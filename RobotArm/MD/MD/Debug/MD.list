
MD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061c4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800627c  0800627c  0001627c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067d8  080067d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080067d8  080067d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067d8  080067d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067d8  080067d8  000167d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067dc  080067dc  000167dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080067e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000000c  080067ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  080067ec  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011806  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c0  00000000  00000000  0003183a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00033900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  00034640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170c1  00000000  00000000  000352c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff85  00000000  00000000  0004c389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c495  00000000  00000000  0005c30e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e87a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033ac  00000000  00000000  000e87f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006264 	.word	0x08006264

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08006264 	.word	0x08006264

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_cfrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	0008      	movs	r0, r1
 80003f0:	4661      	mov	r1, ip
 80003f2:	e7ff      	b.n	80003f4 <__aeabi_cfcmpeq>

080003f4 <__aeabi_cfcmpeq>:
 80003f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003f6:	f000 fa3d 	bl	8000874 <__lesf2>
 80003fa:	2800      	cmp	r0, #0
 80003fc:	d401      	bmi.n	8000402 <__aeabi_cfcmpeq+0xe>
 80003fe:	2100      	movs	r1, #0
 8000400:	42c8      	cmn	r0, r1
 8000402:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000404 <__aeabi_fcmpeq>:
 8000404:	b510      	push	{r4, lr}
 8000406:	f000 f9c9 	bl	800079c <__eqsf2>
 800040a:	4240      	negs	r0, r0
 800040c:	3001      	adds	r0, #1
 800040e:	bd10      	pop	{r4, pc}

08000410 <__aeabi_fcmplt>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 fa2f 	bl	8000874 <__lesf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	db01      	blt.n	800041e <__aeabi_fcmplt+0xe>
 800041a:	2000      	movs	r0, #0
 800041c:	bd10      	pop	{r4, pc}
 800041e:	2001      	movs	r0, #1
 8000420:	bd10      	pop	{r4, pc}
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_fcmple>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 fa25 	bl	8000874 <__lesf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	dd01      	ble.n	8000432 <__aeabi_fcmple+0xe>
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	2001      	movs	r0, #1
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_fcmpgt>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 f9d5 	bl	80007e8 <__gesf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	dc01      	bgt.n	8000446 <__aeabi_fcmpgt+0xe>
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	2001      	movs	r0, #1
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_fcmpge>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 f9cb 	bl	80007e8 <__gesf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	da01      	bge.n	800045a <__aeabi_fcmpge+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__aeabi_fadd>:
 8000460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000462:	46c6      	mov	lr, r8
 8000464:	0243      	lsls	r3, r0, #9
 8000466:	0a5b      	lsrs	r3, r3, #9
 8000468:	024e      	lsls	r6, r1, #9
 800046a:	0045      	lsls	r5, r0, #1
 800046c:	004f      	lsls	r7, r1, #1
 800046e:	00da      	lsls	r2, r3, #3
 8000470:	0fc4      	lsrs	r4, r0, #31
 8000472:	469c      	mov	ip, r3
 8000474:	0a70      	lsrs	r0, r6, #9
 8000476:	4690      	mov	r8, r2
 8000478:	b500      	push	{lr}
 800047a:	0e2d      	lsrs	r5, r5, #24
 800047c:	0e3f      	lsrs	r7, r7, #24
 800047e:	0fc9      	lsrs	r1, r1, #31
 8000480:	09b6      	lsrs	r6, r6, #6
 8000482:	428c      	cmp	r4, r1
 8000484:	d04b      	beq.n	800051e <__aeabi_fadd+0xbe>
 8000486:	1bea      	subs	r2, r5, r7
 8000488:	2a00      	cmp	r2, #0
 800048a:	dd36      	ble.n	80004fa <__aeabi_fadd+0x9a>
 800048c:	2f00      	cmp	r7, #0
 800048e:	d061      	beq.n	8000554 <__aeabi_fadd+0xf4>
 8000490:	2dff      	cmp	r5, #255	; 0xff
 8000492:	d100      	bne.n	8000496 <__aeabi_fadd+0x36>
 8000494:	e0ad      	b.n	80005f2 <__aeabi_fadd+0x192>
 8000496:	2380      	movs	r3, #128	; 0x80
 8000498:	04db      	lsls	r3, r3, #19
 800049a:	431e      	orrs	r6, r3
 800049c:	2a1b      	cmp	r2, #27
 800049e:	dc00      	bgt.n	80004a2 <__aeabi_fadd+0x42>
 80004a0:	e0d3      	b.n	800064a <__aeabi_fadd+0x1ea>
 80004a2:	2001      	movs	r0, #1
 80004a4:	4643      	mov	r3, r8
 80004a6:	1a18      	subs	r0, r3, r0
 80004a8:	0143      	lsls	r3, r0, #5
 80004aa:	d400      	bmi.n	80004ae <__aeabi_fadd+0x4e>
 80004ac:	e08c      	b.n	80005c8 <__aeabi_fadd+0x168>
 80004ae:	0180      	lsls	r0, r0, #6
 80004b0:	0987      	lsrs	r7, r0, #6
 80004b2:	0038      	movs	r0, r7
 80004b4:	f001 fb7e 	bl	8001bb4 <__clzsi2>
 80004b8:	3805      	subs	r0, #5
 80004ba:	4087      	lsls	r7, r0
 80004bc:	4285      	cmp	r5, r0
 80004be:	dc00      	bgt.n	80004c2 <__aeabi_fadd+0x62>
 80004c0:	e0b6      	b.n	8000630 <__aeabi_fadd+0x1d0>
 80004c2:	1a2d      	subs	r5, r5, r0
 80004c4:	48b3      	ldr	r0, [pc, #716]	; (8000794 <__aeabi_fadd+0x334>)
 80004c6:	4038      	ands	r0, r7
 80004c8:	0743      	lsls	r3, r0, #29
 80004ca:	d004      	beq.n	80004d6 <__aeabi_fadd+0x76>
 80004cc:	230f      	movs	r3, #15
 80004ce:	4003      	ands	r3, r0
 80004d0:	2b04      	cmp	r3, #4
 80004d2:	d000      	beq.n	80004d6 <__aeabi_fadd+0x76>
 80004d4:	3004      	adds	r0, #4
 80004d6:	0143      	lsls	r3, r0, #5
 80004d8:	d400      	bmi.n	80004dc <__aeabi_fadd+0x7c>
 80004da:	e078      	b.n	80005ce <__aeabi_fadd+0x16e>
 80004dc:	1c6a      	adds	r2, r5, #1
 80004de:	2dfe      	cmp	r5, #254	; 0xfe
 80004e0:	d065      	beq.n	80005ae <__aeabi_fadd+0x14e>
 80004e2:	0180      	lsls	r0, r0, #6
 80004e4:	0a43      	lsrs	r3, r0, #9
 80004e6:	469c      	mov	ip, r3
 80004e8:	b2d2      	uxtb	r2, r2
 80004ea:	4663      	mov	r3, ip
 80004ec:	05d0      	lsls	r0, r2, #23
 80004ee:	4318      	orrs	r0, r3
 80004f0:	07e4      	lsls	r4, r4, #31
 80004f2:	4320      	orrs	r0, r4
 80004f4:	bc80      	pop	{r7}
 80004f6:	46b8      	mov	r8, r7
 80004f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004fa:	2a00      	cmp	r2, #0
 80004fc:	d035      	beq.n	800056a <__aeabi_fadd+0x10a>
 80004fe:	1b7a      	subs	r2, r7, r5
 8000500:	2d00      	cmp	r5, #0
 8000502:	d000      	beq.n	8000506 <__aeabi_fadd+0xa6>
 8000504:	e0af      	b.n	8000666 <__aeabi_fadd+0x206>
 8000506:	4643      	mov	r3, r8
 8000508:	2b00      	cmp	r3, #0
 800050a:	d100      	bne.n	800050e <__aeabi_fadd+0xae>
 800050c:	e0a7      	b.n	800065e <__aeabi_fadd+0x1fe>
 800050e:	1e53      	subs	r3, r2, #1
 8000510:	2a01      	cmp	r2, #1
 8000512:	d100      	bne.n	8000516 <__aeabi_fadd+0xb6>
 8000514:	e12f      	b.n	8000776 <__aeabi_fadd+0x316>
 8000516:	2aff      	cmp	r2, #255	; 0xff
 8000518:	d069      	beq.n	80005ee <__aeabi_fadd+0x18e>
 800051a:	001a      	movs	r2, r3
 800051c:	e0aa      	b.n	8000674 <__aeabi_fadd+0x214>
 800051e:	1be9      	subs	r1, r5, r7
 8000520:	2900      	cmp	r1, #0
 8000522:	dd70      	ble.n	8000606 <__aeabi_fadd+0x1a6>
 8000524:	2f00      	cmp	r7, #0
 8000526:	d037      	beq.n	8000598 <__aeabi_fadd+0x138>
 8000528:	2dff      	cmp	r5, #255	; 0xff
 800052a:	d062      	beq.n	80005f2 <__aeabi_fadd+0x192>
 800052c:	2380      	movs	r3, #128	; 0x80
 800052e:	04db      	lsls	r3, r3, #19
 8000530:	431e      	orrs	r6, r3
 8000532:	291b      	cmp	r1, #27
 8000534:	dc00      	bgt.n	8000538 <__aeabi_fadd+0xd8>
 8000536:	e0b0      	b.n	800069a <__aeabi_fadd+0x23a>
 8000538:	2001      	movs	r0, #1
 800053a:	4440      	add	r0, r8
 800053c:	0143      	lsls	r3, r0, #5
 800053e:	d543      	bpl.n	80005c8 <__aeabi_fadd+0x168>
 8000540:	3501      	adds	r5, #1
 8000542:	2dff      	cmp	r5, #255	; 0xff
 8000544:	d033      	beq.n	80005ae <__aeabi_fadd+0x14e>
 8000546:	2301      	movs	r3, #1
 8000548:	4a93      	ldr	r2, [pc, #588]	; (8000798 <__aeabi_fadd+0x338>)
 800054a:	4003      	ands	r3, r0
 800054c:	0840      	lsrs	r0, r0, #1
 800054e:	4010      	ands	r0, r2
 8000550:	4318      	orrs	r0, r3
 8000552:	e7b9      	b.n	80004c8 <__aeabi_fadd+0x68>
 8000554:	2e00      	cmp	r6, #0
 8000556:	d100      	bne.n	800055a <__aeabi_fadd+0xfa>
 8000558:	e083      	b.n	8000662 <__aeabi_fadd+0x202>
 800055a:	1e51      	subs	r1, r2, #1
 800055c:	2a01      	cmp	r2, #1
 800055e:	d100      	bne.n	8000562 <__aeabi_fadd+0x102>
 8000560:	e0d8      	b.n	8000714 <__aeabi_fadd+0x2b4>
 8000562:	2aff      	cmp	r2, #255	; 0xff
 8000564:	d045      	beq.n	80005f2 <__aeabi_fadd+0x192>
 8000566:	000a      	movs	r2, r1
 8000568:	e798      	b.n	800049c <__aeabi_fadd+0x3c>
 800056a:	27fe      	movs	r7, #254	; 0xfe
 800056c:	1c6a      	adds	r2, r5, #1
 800056e:	4217      	tst	r7, r2
 8000570:	d000      	beq.n	8000574 <__aeabi_fadd+0x114>
 8000572:	e086      	b.n	8000682 <__aeabi_fadd+0x222>
 8000574:	2d00      	cmp	r5, #0
 8000576:	d000      	beq.n	800057a <__aeabi_fadd+0x11a>
 8000578:	e0b7      	b.n	80006ea <__aeabi_fadd+0x28a>
 800057a:	4643      	mov	r3, r8
 800057c:	2b00      	cmp	r3, #0
 800057e:	d100      	bne.n	8000582 <__aeabi_fadd+0x122>
 8000580:	e0f3      	b.n	800076a <__aeabi_fadd+0x30a>
 8000582:	2200      	movs	r2, #0
 8000584:	2e00      	cmp	r6, #0
 8000586:	d0b0      	beq.n	80004ea <__aeabi_fadd+0x8a>
 8000588:	1b98      	subs	r0, r3, r6
 800058a:	0143      	lsls	r3, r0, #5
 800058c:	d400      	bmi.n	8000590 <__aeabi_fadd+0x130>
 800058e:	e0fa      	b.n	8000786 <__aeabi_fadd+0x326>
 8000590:	4643      	mov	r3, r8
 8000592:	000c      	movs	r4, r1
 8000594:	1af0      	subs	r0, r6, r3
 8000596:	e797      	b.n	80004c8 <__aeabi_fadd+0x68>
 8000598:	2e00      	cmp	r6, #0
 800059a:	d100      	bne.n	800059e <__aeabi_fadd+0x13e>
 800059c:	e0c8      	b.n	8000730 <__aeabi_fadd+0x2d0>
 800059e:	1e4a      	subs	r2, r1, #1
 80005a0:	2901      	cmp	r1, #1
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fadd+0x146>
 80005a4:	e0ae      	b.n	8000704 <__aeabi_fadd+0x2a4>
 80005a6:	29ff      	cmp	r1, #255	; 0xff
 80005a8:	d023      	beq.n	80005f2 <__aeabi_fadd+0x192>
 80005aa:	0011      	movs	r1, r2
 80005ac:	e7c1      	b.n	8000532 <__aeabi_fadd+0xd2>
 80005ae:	2300      	movs	r3, #0
 80005b0:	22ff      	movs	r2, #255	; 0xff
 80005b2:	469c      	mov	ip, r3
 80005b4:	e799      	b.n	80004ea <__aeabi_fadd+0x8a>
 80005b6:	21fe      	movs	r1, #254	; 0xfe
 80005b8:	1c6a      	adds	r2, r5, #1
 80005ba:	4211      	tst	r1, r2
 80005bc:	d077      	beq.n	80006ae <__aeabi_fadd+0x24e>
 80005be:	2aff      	cmp	r2, #255	; 0xff
 80005c0:	d0f5      	beq.n	80005ae <__aeabi_fadd+0x14e>
 80005c2:	0015      	movs	r5, r2
 80005c4:	4446      	add	r6, r8
 80005c6:	0870      	lsrs	r0, r6, #1
 80005c8:	0743      	lsls	r3, r0, #29
 80005ca:	d000      	beq.n	80005ce <__aeabi_fadd+0x16e>
 80005cc:	e77e      	b.n	80004cc <__aeabi_fadd+0x6c>
 80005ce:	08c3      	lsrs	r3, r0, #3
 80005d0:	2dff      	cmp	r5, #255	; 0xff
 80005d2:	d00e      	beq.n	80005f2 <__aeabi_fadd+0x192>
 80005d4:	025b      	lsls	r3, r3, #9
 80005d6:	0a5b      	lsrs	r3, r3, #9
 80005d8:	469c      	mov	ip, r3
 80005da:	b2ea      	uxtb	r2, r5
 80005dc:	e785      	b.n	80004ea <__aeabi_fadd+0x8a>
 80005de:	2e00      	cmp	r6, #0
 80005e0:	d007      	beq.n	80005f2 <__aeabi_fadd+0x192>
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	03d2      	lsls	r2, r2, #15
 80005e6:	4213      	tst	r3, r2
 80005e8:	d003      	beq.n	80005f2 <__aeabi_fadd+0x192>
 80005ea:	4210      	tst	r0, r2
 80005ec:	d101      	bne.n	80005f2 <__aeabi_fadd+0x192>
 80005ee:	000c      	movs	r4, r1
 80005f0:	0003      	movs	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0db      	beq.n	80005ae <__aeabi_fadd+0x14e>
 80005f6:	2080      	movs	r0, #128	; 0x80
 80005f8:	03c0      	lsls	r0, r0, #15
 80005fa:	4318      	orrs	r0, r3
 80005fc:	0240      	lsls	r0, r0, #9
 80005fe:	0a43      	lsrs	r3, r0, #9
 8000600:	469c      	mov	ip, r3
 8000602:	22ff      	movs	r2, #255	; 0xff
 8000604:	e771      	b.n	80004ea <__aeabi_fadd+0x8a>
 8000606:	2900      	cmp	r1, #0
 8000608:	d0d5      	beq.n	80005b6 <__aeabi_fadd+0x156>
 800060a:	1b7a      	subs	r2, r7, r5
 800060c:	2d00      	cmp	r5, #0
 800060e:	d160      	bne.n	80006d2 <__aeabi_fadd+0x272>
 8000610:	4643      	mov	r3, r8
 8000612:	2b00      	cmp	r3, #0
 8000614:	d024      	beq.n	8000660 <__aeabi_fadd+0x200>
 8000616:	1e53      	subs	r3, r2, #1
 8000618:	2a01      	cmp	r2, #1
 800061a:	d073      	beq.n	8000704 <__aeabi_fadd+0x2a4>
 800061c:	2aff      	cmp	r2, #255	; 0xff
 800061e:	d0e7      	beq.n	80005f0 <__aeabi_fadd+0x190>
 8000620:	001a      	movs	r2, r3
 8000622:	2a1b      	cmp	r2, #27
 8000624:	dc00      	bgt.n	8000628 <__aeabi_fadd+0x1c8>
 8000626:	e085      	b.n	8000734 <__aeabi_fadd+0x2d4>
 8000628:	2001      	movs	r0, #1
 800062a:	003d      	movs	r5, r7
 800062c:	1980      	adds	r0, r0, r6
 800062e:	e785      	b.n	800053c <__aeabi_fadd+0xdc>
 8000630:	2320      	movs	r3, #32
 8000632:	003a      	movs	r2, r7
 8000634:	1b45      	subs	r5, r0, r5
 8000636:	0038      	movs	r0, r7
 8000638:	3501      	adds	r5, #1
 800063a:	40ea      	lsrs	r2, r5
 800063c:	1b5d      	subs	r5, r3, r5
 800063e:	40a8      	lsls	r0, r5
 8000640:	1e43      	subs	r3, r0, #1
 8000642:	4198      	sbcs	r0, r3
 8000644:	2500      	movs	r5, #0
 8000646:	4310      	orrs	r0, r2
 8000648:	e73e      	b.n	80004c8 <__aeabi_fadd+0x68>
 800064a:	2320      	movs	r3, #32
 800064c:	0030      	movs	r0, r6
 800064e:	1a9b      	subs	r3, r3, r2
 8000650:	0031      	movs	r1, r6
 8000652:	4098      	lsls	r0, r3
 8000654:	40d1      	lsrs	r1, r2
 8000656:	1e43      	subs	r3, r0, #1
 8000658:	4198      	sbcs	r0, r3
 800065a:	4308      	orrs	r0, r1
 800065c:	e722      	b.n	80004a4 <__aeabi_fadd+0x44>
 800065e:	000c      	movs	r4, r1
 8000660:	0003      	movs	r3, r0
 8000662:	0015      	movs	r5, r2
 8000664:	e7b4      	b.n	80005d0 <__aeabi_fadd+0x170>
 8000666:	2fff      	cmp	r7, #255	; 0xff
 8000668:	d0c1      	beq.n	80005ee <__aeabi_fadd+0x18e>
 800066a:	2380      	movs	r3, #128	; 0x80
 800066c:	4640      	mov	r0, r8
 800066e:	04db      	lsls	r3, r3, #19
 8000670:	4318      	orrs	r0, r3
 8000672:	4680      	mov	r8, r0
 8000674:	2a1b      	cmp	r2, #27
 8000676:	dd51      	ble.n	800071c <__aeabi_fadd+0x2bc>
 8000678:	2001      	movs	r0, #1
 800067a:	000c      	movs	r4, r1
 800067c:	003d      	movs	r5, r7
 800067e:	1a30      	subs	r0, r6, r0
 8000680:	e712      	b.n	80004a8 <__aeabi_fadd+0x48>
 8000682:	4643      	mov	r3, r8
 8000684:	1b9f      	subs	r7, r3, r6
 8000686:	017b      	lsls	r3, r7, #5
 8000688:	d42b      	bmi.n	80006e2 <__aeabi_fadd+0x282>
 800068a:	2f00      	cmp	r7, #0
 800068c:	d000      	beq.n	8000690 <__aeabi_fadd+0x230>
 800068e:	e710      	b.n	80004b2 <__aeabi_fadd+0x52>
 8000690:	2300      	movs	r3, #0
 8000692:	2400      	movs	r4, #0
 8000694:	2200      	movs	r2, #0
 8000696:	469c      	mov	ip, r3
 8000698:	e727      	b.n	80004ea <__aeabi_fadd+0x8a>
 800069a:	2320      	movs	r3, #32
 800069c:	0032      	movs	r2, r6
 800069e:	0030      	movs	r0, r6
 80006a0:	40ca      	lsrs	r2, r1
 80006a2:	1a59      	subs	r1, r3, r1
 80006a4:	4088      	lsls	r0, r1
 80006a6:	1e43      	subs	r3, r0, #1
 80006a8:	4198      	sbcs	r0, r3
 80006aa:	4310      	orrs	r0, r2
 80006ac:	e745      	b.n	800053a <__aeabi_fadd+0xda>
 80006ae:	2d00      	cmp	r5, #0
 80006b0:	d14a      	bne.n	8000748 <__aeabi_fadd+0x2e8>
 80006b2:	4643      	mov	r3, r8
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d063      	beq.n	8000780 <__aeabi_fadd+0x320>
 80006b8:	2200      	movs	r2, #0
 80006ba:	2e00      	cmp	r6, #0
 80006bc:	d100      	bne.n	80006c0 <__aeabi_fadd+0x260>
 80006be:	e714      	b.n	80004ea <__aeabi_fadd+0x8a>
 80006c0:	0030      	movs	r0, r6
 80006c2:	4440      	add	r0, r8
 80006c4:	0143      	lsls	r3, r0, #5
 80006c6:	d400      	bmi.n	80006ca <__aeabi_fadd+0x26a>
 80006c8:	e77e      	b.n	80005c8 <__aeabi_fadd+0x168>
 80006ca:	4b32      	ldr	r3, [pc, #200]	; (8000794 <__aeabi_fadd+0x334>)
 80006cc:	3501      	adds	r5, #1
 80006ce:	4018      	ands	r0, r3
 80006d0:	e77a      	b.n	80005c8 <__aeabi_fadd+0x168>
 80006d2:	2fff      	cmp	r7, #255	; 0xff
 80006d4:	d08c      	beq.n	80005f0 <__aeabi_fadd+0x190>
 80006d6:	2380      	movs	r3, #128	; 0x80
 80006d8:	4641      	mov	r1, r8
 80006da:	04db      	lsls	r3, r3, #19
 80006dc:	4319      	orrs	r1, r3
 80006de:	4688      	mov	r8, r1
 80006e0:	e79f      	b.n	8000622 <__aeabi_fadd+0x1c2>
 80006e2:	4643      	mov	r3, r8
 80006e4:	000c      	movs	r4, r1
 80006e6:	1af7      	subs	r7, r6, r3
 80006e8:	e6e3      	b.n	80004b2 <__aeabi_fadd+0x52>
 80006ea:	4642      	mov	r2, r8
 80006ec:	2a00      	cmp	r2, #0
 80006ee:	d000      	beq.n	80006f2 <__aeabi_fadd+0x292>
 80006f0:	e775      	b.n	80005de <__aeabi_fadd+0x17e>
 80006f2:	2e00      	cmp	r6, #0
 80006f4:	d000      	beq.n	80006f8 <__aeabi_fadd+0x298>
 80006f6:	e77a      	b.n	80005ee <__aeabi_fadd+0x18e>
 80006f8:	2380      	movs	r3, #128	; 0x80
 80006fa:	03db      	lsls	r3, r3, #15
 80006fc:	2400      	movs	r4, #0
 80006fe:	469c      	mov	ip, r3
 8000700:	22ff      	movs	r2, #255	; 0xff
 8000702:	e6f2      	b.n	80004ea <__aeabi_fadd+0x8a>
 8000704:	0030      	movs	r0, r6
 8000706:	4440      	add	r0, r8
 8000708:	2501      	movs	r5, #1
 800070a:	0143      	lsls	r3, r0, #5
 800070c:	d400      	bmi.n	8000710 <__aeabi_fadd+0x2b0>
 800070e:	e75b      	b.n	80005c8 <__aeabi_fadd+0x168>
 8000710:	2502      	movs	r5, #2
 8000712:	e718      	b.n	8000546 <__aeabi_fadd+0xe6>
 8000714:	4643      	mov	r3, r8
 8000716:	2501      	movs	r5, #1
 8000718:	1b98      	subs	r0, r3, r6
 800071a:	e6c5      	b.n	80004a8 <__aeabi_fadd+0x48>
 800071c:	2320      	movs	r3, #32
 800071e:	4644      	mov	r4, r8
 8000720:	4640      	mov	r0, r8
 8000722:	40d4      	lsrs	r4, r2
 8000724:	1a9a      	subs	r2, r3, r2
 8000726:	4090      	lsls	r0, r2
 8000728:	1e43      	subs	r3, r0, #1
 800072a:	4198      	sbcs	r0, r3
 800072c:	4320      	orrs	r0, r4
 800072e:	e7a4      	b.n	800067a <__aeabi_fadd+0x21a>
 8000730:	000d      	movs	r5, r1
 8000732:	e74d      	b.n	80005d0 <__aeabi_fadd+0x170>
 8000734:	2320      	movs	r3, #32
 8000736:	4641      	mov	r1, r8
 8000738:	4640      	mov	r0, r8
 800073a:	40d1      	lsrs	r1, r2
 800073c:	1a9a      	subs	r2, r3, r2
 800073e:	4090      	lsls	r0, r2
 8000740:	1e43      	subs	r3, r0, #1
 8000742:	4198      	sbcs	r0, r3
 8000744:	4308      	orrs	r0, r1
 8000746:	e770      	b.n	800062a <__aeabi_fadd+0x1ca>
 8000748:	4642      	mov	r2, r8
 800074a:	2a00      	cmp	r2, #0
 800074c:	d100      	bne.n	8000750 <__aeabi_fadd+0x2f0>
 800074e:	e74f      	b.n	80005f0 <__aeabi_fadd+0x190>
 8000750:	2e00      	cmp	r6, #0
 8000752:	d100      	bne.n	8000756 <__aeabi_fadd+0x2f6>
 8000754:	e74d      	b.n	80005f2 <__aeabi_fadd+0x192>
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	03d2      	lsls	r2, r2, #15
 800075a:	4213      	tst	r3, r2
 800075c:	d100      	bne.n	8000760 <__aeabi_fadd+0x300>
 800075e:	e748      	b.n	80005f2 <__aeabi_fadd+0x192>
 8000760:	4210      	tst	r0, r2
 8000762:	d000      	beq.n	8000766 <__aeabi_fadd+0x306>
 8000764:	e745      	b.n	80005f2 <__aeabi_fadd+0x192>
 8000766:	0003      	movs	r3, r0
 8000768:	e743      	b.n	80005f2 <__aeabi_fadd+0x192>
 800076a:	2e00      	cmp	r6, #0
 800076c:	d090      	beq.n	8000690 <__aeabi_fadd+0x230>
 800076e:	000c      	movs	r4, r1
 8000770:	4684      	mov	ip, r0
 8000772:	2200      	movs	r2, #0
 8000774:	e6b9      	b.n	80004ea <__aeabi_fadd+0x8a>
 8000776:	4643      	mov	r3, r8
 8000778:	000c      	movs	r4, r1
 800077a:	1af0      	subs	r0, r6, r3
 800077c:	3501      	adds	r5, #1
 800077e:	e693      	b.n	80004a8 <__aeabi_fadd+0x48>
 8000780:	4684      	mov	ip, r0
 8000782:	2200      	movs	r2, #0
 8000784:	e6b1      	b.n	80004ea <__aeabi_fadd+0x8a>
 8000786:	2800      	cmp	r0, #0
 8000788:	d000      	beq.n	800078c <__aeabi_fadd+0x32c>
 800078a:	e71d      	b.n	80005c8 <__aeabi_fadd+0x168>
 800078c:	2300      	movs	r3, #0
 800078e:	2400      	movs	r4, #0
 8000790:	469c      	mov	ip, r3
 8000792:	e6aa      	b.n	80004ea <__aeabi_fadd+0x8a>
 8000794:	fbffffff 	.word	0xfbffffff
 8000798:	7dffffff 	.word	0x7dffffff

0800079c <__eqsf2>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	0042      	lsls	r2, r0, #1
 80007a0:	0245      	lsls	r5, r0, #9
 80007a2:	024e      	lsls	r6, r1, #9
 80007a4:	004c      	lsls	r4, r1, #1
 80007a6:	0fc3      	lsrs	r3, r0, #31
 80007a8:	0a6d      	lsrs	r5, r5, #9
 80007aa:	2001      	movs	r0, #1
 80007ac:	0e12      	lsrs	r2, r2, #24
 80007ae:	0a76      	lsrs	r6, r6, #9
 80007b0:	0e24      	lsrs	r4, r4, #24
 80007b2:	0fc9      	lsrs	r1, r1, #31
 80007b4:	2aff      	cmp	r2, #255	; 0xff
 80007b6:	d006      	beq.n	80007c6 <__eqsf2+0x2a>
 80007b8:	2cff      	cmp	r4, #255	; 0xff
 80007ba:	d003      	beq.n	80007c4 <__eqsf2+0x28>
 80007bc:	42a2      	cmp	r2, r4
 80007be:	d101      	bne.n	80007c4 <__eqsf2+0x28>
 80007c0:	42b5      	cmp	r5, r6
 80007c2:	d006      	beq.n	80007d2 <__eqsf2+0x36>
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	2d00      	cmp	r5, #0
 80007c8:	d1fc      	bne.n	80007c4 <__eqsf2+0x28>
 80007ca:	2cff      	cmp	r4, #255	; 0xff
 80007cc:	d1fa      	bne.n	80007c4 <__eqsf2+0x28>
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d1f8      	bne.n	80007c4 <__eqsf2+0x28>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d006      	beq.n	80007e4 <__eqsf2+0x48>
 80007d6:	2001      	movs	r0, #1
 80007d8:	2a00      	cmp	r2, #0
 80007da:	d1f3      	bne.n	80007c4 <__eqsf2+0x28>
 80007dc:	0028      	movs	r0, r5
 80007de:	1e43      	subs	r3, r0, #1
 80007e0:	4198      	sbcs	r0, r3
 80007e2:	e7ef      	b.n	80007c4 <__eqsf2+0x28>
 80007e4:	2000      	movs	r0, #0
 80007e6:	e7ed      	b.n	80007c4 <__eqsf2+0x28>

080007e8 <__gesf2>:
 80007e8:	b570      	push	{r4, r5, r6, lr}
 80007ea:	0042      	lsls	r2, r0, #1
 80007ec:	0245      	lsls	r5, r0, #9
 80007ee:	024e      	lsls	r6, r1, #9
 80007f0:	004c      	lsls	r4, r1, #1
 80007f2:	0fc3      	lsrs	r3, r0, #31
 80007f4:	0a6d      	lsrs	r5, r5, #9
 80007f6:	0e12      	lsrs	r2, r2, #24
 80007f8:	0a76      	lsrs	r6, r6, #9
 80007fa:	0e24      	lsrs	r4, r4, #24
 80007fc:	0fc8      	lsrs	r0, r1, #31
 80007fe:	2aff      	cmp	r2, #255	; 0xff
 8000800:	d01b      	beq.n	800083a <__gesf2+0x52>
 8000802:	2cff      	cmp	r4, #255	; 0xff
 8000804:	d00e      	beq.n	8000824 <__gesf2+0x3c>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d11b      	bne.n	8000842 <__gesf2+0x5a>
 800080a:	2c00      	cmp	r4, #0
 800080c:	d101      	bne.n	8000812 <__gesf2+0x2a>
 800080e:	2e00      	cmp	r6, #0
 8000810:	d01c      	beq.n	800084c <__gesf2+0x64>
 8000812:	2d00      	cmp	r5, #0
 8000814:	d00c      	beq.n	8000830 <__gesf2+0x48>
 8000816:	4283      	cmp	r3, r0
 8000818:	d01c      	beq.n	8000854 <__gesf2+0x6c>
 800081a:	2102      	movs	r1, #2
 800081c:	1e58      	subs	r0, r3, #1
 800081e:	4008      	ands	r0, r1
 8000820:	3801      	subs	r0, #1
 8000822:	bd70      	pop	{r4, r5, r6, pc}
 8000824:	2e00      	cmp	r6, #0
 8000826:	d122      	bne.n	800086e <__gesf2+0x86>
 8000828:	2a00      	cmp	r2, #0
 800082a:	d1f4      	bne.n	8000816 <__gesf2+0x2e>
 800082c:	2d00      	cmp	r5, #0
 800082e:	d1f2      	bne.n	8000816 <__gesf2+0x2e>
 8000830:	2800      	cmp	r0, #0
 8000832:	d1f6      	bne.n	8000822 <__gesf2+0x3a>
 8000834:	2001      	movs	r0, #1
 8000836:	4240      	negs	r0, r0
 8000838:	e7f3      	b.n	8000822 <__gesf2+0x3a>
 800083a:	2d00      	cmp	r5, #0
 800083c:	d117      	bne.n	800086e <__gesf2+0x86>
 800083e:	2cff      	cmp	r4, #255	; 0xff
 8000840:	d0f0      	beq.n	8000824 <__gesf2+0x3c>
 8000842:	2c00      	cmp	r4, #0
 8000844:	d1e7      	bne.n	8000816 <__gesf2+0x2e>
 8000846:	2e00      	cmp	r6, #0
 8000848:	d1e5      	bne.n	8000816 <__gesf2+0x2e>
 800084a:	e7e6      	b.n	800081a <__gesf2+0x32>
 800084c:	2000      	movs	r0, #0
 800084e:	2d00      	cmp	r5, #0
 8000850:	d0e7      	beq.n	8000822 <__gesf2+0x3a>
 8000852:	e7e2      	b.n	800081a <__gesf2+0x32>
 8000854:	42a2      	cmp	r2, r4
 8000856:	dc05      	bgt.n	8000864 <__gesf2+0x7c>
 8000858:	dbea      	blt.n	8000830 <__gesf2+0x48>
 800085a:	42b5      	cmp	r5, r6
 800085c:	d802      	bhi.n	8000864 <__gesf2+0x7c>
 800085e:	d3e7      	bcc.n	8000830 <__gesf2+0x48>
 8000860:	2000      	movs	r0, #0
 8000862:	e7de      	b.n	8000822 <__gesf2+0x3a>
 8000864:	4243      	negs	r3, r0
 8000866:	4158      	adcs	r0, r3
 8000868:	0040      	lsls	r0, r0, #1
 800086a:	3801      	subs	r0, #1
 800086c:	e7d9      	b.n	8000822 <__gesf2+0x3a>
 800086e:	2002      	movs	r0, #2
 8000870:	4240      	negs	r0, r0
 8000872:	e7d6      	b.n	8000822 <__gesf2+0x3a>

08000874 <__lesf2>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	0042      	lsls	r2, r0, #1
 8000878:	0245      	lsls	r5, r0, #9
 800087a:	024e      	lsls	r6, r1, #9
 800087c:	004c      	lsls	r4, r1, #1
 800087e:	0fc3      	lsrs	r3, r0, #31
 8000880:	0a6d      	lsrs	r5, r5, #9
 8000882:	0e12      	lsrs	r2, r2, #24
 8000884:	0a76      	lsrs	r6, r6, #9
 8000886:	0e24      	lsrs	r4, r4, #24
 8000888:	0fc8      	lsrs	r0, r1, #31
 800088a:	2aff      	cmp	r2, #255	; 0xff
 800088c:	d00b      	beq.n	80008a6 <__lesf2+0x32>
 800088e:	2cff      	cmp	r4, #255	; 0xff
 8000890:	d00d      	beq.n	80008ae <__lesf2+0x3a>
 8000892:	2a00      	cmp	r2, #0
 8000894:	d11f      	bne.n	80008d6 <__lesf2+0x62>
 8000896:	2c00      	cmp	r4, #0
 8000898:	d116      	bne.n	80008c8 <__lesf2+0x54>
 800089a:	2e00      	cmp	r6, #0
 800089c:	d114      	bne.n	80008c8 <__lesf2+0x54>
 800089e:	2000      	movs	r0, #0
 80008a0:	2d00      	cmp	r5, #0
 80008a2:	d010      	beq.n	80008c6 <__lesf2+0x52>
 80008a4:	e009      	b.n	80008ba <__lesf2+0x46>
 80008a6:	2d00      	cmp	r5, #0
 80008a8:	d10c      	bne.n	80008c4 <__lesf2+0x50>
 80008aa:	2cff      	cmp	r4, #255	; 0xff
 80008ac:	d113      	bne.n	80008d6 <__lesf2+0x62>
 80008ae:	2e00      	cmp	r6, #0
 80008b0:	d108      	bne.n	80008c4 <__lesf2+0x50>
 80008b2:	2a00      	cmp	r2, #0
 80008b4:	d008      	beq.n	80008c8 <__lesf2+0x54>
 80008b6:	4283      	cmp	r3, r0
 80008b8:	d012      	beq.n	80008e0 <__lesf2+0x6c>
 80008ba:	2102      	movs	r1, #2
 80008bc:	1e58      	subs	r0, r3, #1
 80008be:	4008      	ands	r0, r1
 80008c0:	3801      	subs	r0, #1
 80008c2:	e000      	b.n	80008c6 <__lesf2+0x52>
 80008c4:	2002      	movs	r0, #2
 80008c6:	bd70      	pop	{r4, r5, r6, pc}
 80008c8:	2d00      	cmp	r5, #0
 80008ca:	d1f4      	bne.n	80008b6 <__lesf2+0x42>
 80008cc:	2800      	cmp	r0, #0
 80008ce:	d1fa      	bne.n	80008c6 <__lesf2+0x52>
 80008d0:	2001      	movs	r0, #1
 80008d2:	4240      	negs	r0, r0
 80008d4:	e7f7      	b.n	80008c6 <__lesf2+0x52>
 80008d6:	2c00      	cmp	r4, #0
 80008d8:	d1ed      	bne.n	80008b6 <__lesf2+0x42>
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d1eb      	bne.n	80008b6 <__lesf2+0x42>
 80008de:	e7ec      	b.n	80008ba <__lesf2+0x46>
 80008e0:	42a2      	cmp	r2, r4
 80008e2:	dc05      	bgt.n	80008f0 <__lesf2+0x7c>
 80008e4:	dbf2      	blt.n	80008cc <__lesf2+0x58>
 80008e6:	42b5      	cmp	r5, r6
 80008e8:	d802      	bhi.n	80008f0 <__lesf2+0x7c>
 80008ea:	d3ef      	bcc.n	80008cc <__lesf2+0x58>
 80008ec:	2000      	movs	r0, #0
 80008ee:	e7ea      	b.n	80008c6 <__lesf2+0x52>
 80008f0:	4243      	negs	r3, r0
 80008f2:	4158      	adcs	r0, r3
 80008f4:	0040      	lsls	r0, r0, #1
 80008f6:	3801      	subs	r0, #1
 80008f8:	e7e5      	b.n	80008c6 <__lesf2+0x52>
 80008fa:	46c0      	nop			; (mov r8, r8)

080008fc <__aeabi_fmul>:
 80008fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fe:	464f      	mov	r7, r9
 8000900:	4646      	mov	r6, r8
 8000902:	46d6      	mov	lr, sl
 8000904:	0244      	lsls	r4, r0, #9
 8000906:	0045      	lsls	r5, r0, #1
 8000908:	b5c0      	push	{r6, r7, lr}
 800090a:	0a64      	lsrs	r4, r4, #9
 800090c:	1c0f      	adds	r7, r1, #0
 800090e:	0e2d      	lsrs	r5, r5, #24
 8000910:	0fc6      	lsrs	r6, r0, #31
 8000912:	2d00      	cmp	r5, #0
 8000914:	d100      	bne.n	8000918 <__aeabi_fmul+0x1c>
 8000916:	e08d      	b.n	8000a34 <__aeabi_fmul+0x138>
 8000918:	2dff      	cmp	r5, #255	; 0xff
 800091a:	d100      	bne.n	800091e <__aeabi_fmul+0x22>
 800091c:	e092      	b.n	8000a44 <__aeabi_fmul+0x148>
 800091e:	2300      	movs	r3, #0
 8000920:	2080      	movs	r0, #128	; 0x80
 8000922:	4699      	mov	r9, r3
 8000924:	469a      	mov	sl, r3
 8000926:	00e4      	lsls	r4, r4, #3
 8000928:	04c0      	lsls	r0, r0, #19
 800092a:	4304      	orrs	r4, r0
 800092c:	3d7f      	subs	r5, #127	; 0x7f
 800092e:	0278      	lsls	r0, r7, #9
 8000930:	0a43      	lsrs	r3, r0, #9
 8000932:	4698      	mov	r8, r3
 8000934:	007b      	lsls	r3, r7, #1
 8000936:	0e1b      	lsrs	r3, r3, #24
 8000938:	0fff      	lsrs	r7, r7, #31
 800093a:	2b00      	cmp	r3, #0
 800093c:	d100      	bne.n	8000940 <__aeabi_fmul+0x44>
 800093e:	e070      	b.n	8000a22 <__aeabi_fmul+0x126>
 8000940:	2bff      	cmp	r3, #255	; 0xff
 8000942:	d100      	bne.n	8000946 <__aeabi_fmul+0x4a>
 8000944:	e086      	b.n	8000a54 <__aeabi_fmul+0x158>
 8000946:	4642      	mov	r2, r8
 8000948:	00d0      	lsls	r0, r2, #3
 800094a:	2280      	movs	r2, #128	; 0x80
 800094c:	3b7f      	subs	r3, #127	; 0x7f
 800094e:	18ed      	adds	r5, r5, r3
 8000950:	2300      	movs	r3, #0
 8000952:	04d2      	lsls	r2, r2, #19
 8000954:	4302      	orrs	r2, r0
 8000956:	4690      	mov	r8, r2
 8000958:	469c      	mov	ip, r3
 800095a:	0031      	movs	r1, r6
 800095c:	464b      	mov	r3, r9
 800095e:	4079      	eors	r1, r7
 8000960:	1c68      	adds	r0, r5, #1
 8000962:	2b0f      	cmp	r3, #15
 8000964:	d81c      	bhi.n	80009a0 <__aeabi_fmul+0xa4>
 8000966:	4a76      	ldr	r2, [pc, #472]	; (8000b40 <__aeabi_fmul+0x244>)
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	58d3      	ldr	r3, [r2, r3]
 800096c:	469f      	mov	pc, r3
 800096e:	0039      	movs	r1, r7
 8000970:	4644      	mov	r4, r8
 8000972:	46e2      	mov	sl, ip
 8000974:	4653      	mov	r3, sl
 8000976:	2b02      	cmp	r3, #2
 8000978:	d00f      	beq.n	800099a <__aeabi_fmul+0x9e>
 800097a:	2b03      	cmp	r3, #3
 800097c:	d100      	bne.n	8000980 <__aeabi_fmul+0x84>
 800097e:	e0d7      	b.n	8000b30 <__aeabi_fmul+0x234>
 8000980:	2b01      	cmp	r3, #1
 8000982:	d137      	bne.n	80009f4 <__aeabi_fmul+0xf8>
 8000984:	2000      	movs	r0, #0
 8000986:	2400      	movs	r4, #0
 8000988:	05c0      	lsls	r0, r0, #23
 800098a:	4320      	orrs	r0, r4
 800098c:	07c9      	lsls	r1, r1, #31
 800098e:	4308      	orrs	r0, r1
 8000990:	bce0      	pop	{r5, r6, r7}
 8000992:	46ba      	mov	sl, r7
 8000994:	46b1      	mov	r9, r6
 8000996:	46a8      	mov	r8, r5
 8000998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800099a:	20ff      	movs	r0, #255	; 0xff
 800099c:	2400      	movs	r4, #0
 800099e:	e7f3      	b.n	8000988 <__aeabi_fmul+0x8c>
 80009a0:	0c26      	lsrs	r6, r4, #16
 80009a2:	0424      	lsls	r4, r4, #16
 80009a4:	0c22      	lsrs	r2, r4, #16
 80009a6:	4644      	mov	r4, r8
 80009a8:	0424      	lsls	r4, r4, #16
 80009aa:	0c24      	lsrs	r4, r4, #16
 80009ac:	4643      	mov	r3, r8
 80009ae:	0027      	movs	r7, r4
 80009b0:	0c1b      	lsrs	r3, r3, #16
 80009b2:	4357      	muls	r7, r2
 80009b4:	4374      	muls	r4, r6
 80009b6:	435a      	muls	r2, r3
 80009b8:	435e      	muls	r6, r3
 80009ba:	1912      	adds	r2, r2, r4
 80009bc:	0c3b      	lsrs	r3, r7, #16
 80009be:	189b      	adds	r3, r3, r2
 80009c0:	429c      	cmp	r4, r3
 80009c2:	d903      	bls.n	80009cc <__aeabi_fmul+0xd0>
 80009c4:	2280      	movs	r2, #128	; 0x80
 80009c6:	0252      	lsls	r2, r2, #9
 80009c8:	4694      	mov	ip, r2
 80009ca:	4466      	add	r6, ip
 80009cc:	043f      	lsls	r7, r7, #16
 80009ce:	041a      	lsls	r2, r3, #16
 80009d0:	0c3f      	lsrs	r7, r7, #16
 80009d2:	19d2      	adds	r2, r2, r7
 80009d4:	0194      	lsls	r4, r2, #6
 80009d6:	1e67      	subs	r7, r4, #1
 80009d8:	41bc      	sbcs	r4, r7
 80009da:	0c1b      	lsrs	r3, r3, #16
 80009dc:	0e92      	lsrs	r2, r2, #26
 80009de:	199b      	adds	r3, r3, r6
 80009e0:	4314      	orrs	r4, r2
 80009e2:	019b      	lsls	r3, r3, #6
 80009e4:	431c      	orrs	r4, r3
 80009e6:	011b      	lsls	r3, r3, #4
 80009e8:	d400      	bmi.n	80009ec <__aeabi_fmul+0xf0>
 80009ea:	e09b      	b.n	8000b24 <__aeabi_fmul+0x228>
 80009ec:	2301      	movs	r3, #1
 80009ee:	0862      	lsrs	r2, r4, #1
 80009f0:	401c      	ands	r4, r3
 80009f2:	4314      	orrs	r4, r2
 80009f4:	0002      	movs	r2, r0
 80009f6:	327f      	adds	r2, #127	; 0x7f
 80009f8:	2a00      	cmp	r2, #0
 80009fa:	dd64      	ble.n	8000ac6 <__aeabi_fmul+0x1ca>
 80009fc:	0763      	lsls	r3, r4, #29
 80009fe:	d004      	beq.n	8000a0a <__aeabi_fmul+0x10e>
 8000a00:	230f      	movs	r3, #15
 8000a02:	4023      	ands	r3, r4
 8000a04:	2b04      	cmp	r3, #4
 8000a06:	d000      	beq.n	8000a0a <__aeabi_fmul+0x10e>
 8000a08:	3404      	adds	r4, #4
 8000a0a:	0123      	lsls	r3, r4, #4
 8000a0c:	d503      	bpl.n	8000a16 <__aeabi_fmul+0x11a>
 8000a0e:	0002      	movs	r2, r0
 8000a10:	4b4c      	ldr	r3, [pc, #304]	; (8000b44 <__aeabi_fmul+0x248>)
 8000a12:	3280      	adds	r2, #128	; 0x80
 8000a14:	401c      	ands	r4, r3
 8000a16:	2afe      	cmp	r2, #254	; 0xfe
 8000a18:	dcbf      	bgt.n	800099a <__aeabi_fmul+0x9e>
 8000a1a:	01a4      	lsls	r4, r4, #6
 8000a1c:	0a64      	lsrs	r4, r4, #9
 8000a1e:	b2d0      	uxtb	r0, r2
 8000a20:	e7b2      	b.n	8000988 <__aeabi_fmul+0x8c>
 8000a22:	4643      	mov	r3, r8
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d13d      	bne.n	8000aa4 <__aeabi_fmul+0x1a8>
 8000a28:	464a      	mov	r2, r9
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	431a      	orrs	r2, r3
 8000a2e:	4691      	mov	r9, r2
 8000a30:	469c      	mov	ip, r3
 8000a32:	e792      	b.n	800095a <__aeabi_fmul+0x5e>
 8000a34:	2c00      	cmp	r4, #0
 8000a36:	d129      	bne.n	8000a8c <__aeabi_fmul+0x190>
 8000a38:	2304      	movs	r3, #4
 8000a3a:	4699      	mov	r9, r3
 8000a3c:	3b03      	subs	r3, #3
 8000a3e:	2500      	movs	r5, #0
 8000a40:	469a      	mov	sl, r3
 8000a42:	e774      	b.n	800092e <__aeabi_fmul+0x32>
 8000a44:	2c00      	cmp	r4, #0
 8000a46:	d11b      	bne.n	8000a80 <__aeabi_fmul+0x184>
 8000a48:	2308      	movs	r3, #8
 8000a4a:	4699      	mov	r9, r3
 8000a4c:	3b06      	subs	r3, #6
 8000a4e:	25ff      	movs	r5, #255	; 0xff
 8000a50:	469a      	mov	sl, r3
 8000a52:	e76c      	b.n	800092e <__aeabi_fmul+0x32>
 8000a54:	4643      	mov	r3, r8
 8000a56:	35ff      	adds	r5, #255	; 0xff
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d10b      	bne.n	8000a74 <__aeabi_fmul+0x178>
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	464a      	mov	r2, r9
 8000a60:	431a      	orrs	r2, r3
 8000a62:	4691      	mov	r9, r2
 8000a64:	469c      	mov	ip, r3
 8000a66:	e778      	b.n	800095a <__aeabi_fmul+0x5e>
 8000a68:	4653      	mov	r3, sl
 8000a6a:	0031      	movs	r1, r6
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d000      	beq.n	8000a72 <__aeabi_fmul+0x176>
 8000a70:	e783      	b.n	800097a <__aeabi_fmul+0x7e>
 8000a72:	e792      	b.n	800099a <__aeabi_fmul+0x9e>
 8000a74:	2303      	movs	r3, #3
 8000a76:	464a      	mov	r2, r9
 8000a78:	431a      	orrs	r2, r3
 8000a7a:	4691      	mov	r9, r2
 8000a7c:	469c      	mov	ip, r3
 8000a7e:	e76c      	b.n	800095a <__aeabi_fmul+0x5e>
 8000a80:	230c      	movs	r3, #12
 8000a82:	4699      	mov	r9, r3
 8000a84:	3b09      	subs	r3, #9
 8000a86:	25ff      	movs	r5, #255	; 0xff
 8000a88:	469a      	mov	sl, r3
 8000a8a:	e750      	b.n	800092e <__aeabi_fmul+0x32>
 8000a8c:	0020      	movs	r0, r4
 8000a8e:	f001 f891 	bl	8001bb4 <__clzsi2>
 8000a92:	2576      	movs	r5, #118	; 0x76
 8000a94:	1f43      	subs	r3, r0, #5
 8000a96:	409c      	lsls	r4, r3
 8000a98:	2300      	movs	r3, #0
 8000a9a:	426d      	negs	r5, r5
 8000a9c:	4699      	mov	r9, r3
 8000a9e:	469a      	mov	sl, r3
 8000aa0:	1a2d      	subs	r5, r5, r0
 8000aa2:	e744      	b.n	800092e <__aeabi_fmul+0x32>
 8000aa4:	4640      	mov	r0, r8
 8000aa6:	f001 f885 	bl	8001bb4 <__clzsi2>
 8000aaa:	4642      	mov	r2, r8
 8000aac:	1f43      	subs	r3, r0, #5
 8000aae:	409a      	lsls	r2, r3
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	1a2d      	subs	r5, r5, r0
 8000ab4:	4690      	mov	r8, r2
 8000ab6:	469c      	mov	ip, r3
 8000ab8:	3d76      	subs	r5, #118	; 0x76
 8000aba:	e74e      	b.n	800095a <__aeabi_fmul+0x5e>
 8000abc:	2480      	movs	r4, #128	; 0x80
 8000abe:	2100      	movs	r1, #0
 8000ac0:	20ff      	movs	r0, #255	; 0xff
 8000ac2:	03e4      	lsls	r4, r4, #15
 8000ac4:	e760      	b.n	8000988 <__aeabi_fmul+0x8c>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	1a9b      	subs	r3, r3, r2
 8000aca:	2b1b      	cmp	r3, #27
 8000acc:	dd00      	ble.n	8000ad0 <__aeabi_fmul+0x1d4>
 8000ace:	e759      	b.n	8000984 <__aeabi_fmul+0x88>
 8000ad0:	0022      	movs	r2, r4
 8000ad2:	309e      	adds	r0, #158	; 0x9e
 8000ad4:	40da      	lsrs	r2, r3
 8000ad6:	4084      	lsls	r4, r0
 8000ad8:	0013      	movs	r3, r2
 8000ada:	1e62      	subs	r2, r4, #1
 8000adc:	4194      	sbcs	r4, r2
 8000ade:	431c      	orrs	r4, r3
 8000ae0:	0763      	lsls	r3, r4, #29
 8000ae2:	d004      	beq.n	8000aee <__aeabi_fmul+0x1f2>
 8000ae4:	230f      	movs	r3, #15
 8000ae6:	4023      	ands	r3, r4
 8000ae8:	2b04      	cmp	r3, #4
 8000aea:	d000      	beq.n	8000aee <__aeabi_fmul+0x1f2>
 8000aec:	3404      	adds	r4, #4
 8000aee:	0163      	lsls	r3, r4, #5
 8000af0:	d51a      	bpl.n	8000b28 <__aeabi_fmul+0x22c>
 8000af2:	2001      	movs	r0, #1
 8000af4:	2400      	movs	r4, #0
 8000af6:	e747      	b.n	8000988 <__aeabi_fmul+0x8c>
 8000af8:	2080      	movs	r0, #128	; 0x80
 8000afa:	03c0      	lsls	r0, r0, #15
 8000afc:	4204      	tst	r4, r0
 8000afe:	d009      	beq.n	8000b14 <__aeabi_fmul+0x218>
 8000b00:	4643      	mov	r3, r8
 8000b02:	4203      	tst	r3, r0
 8000b04:	d106      	bne.n	8000b14 <__aeabi_fmul+0x218>
 8000b06:	4644      	mov	r4, r8
 8000b08:	4304      	orrs	r4, r0
 8000b0a:	0264      	lsls	r4, r4, #9
 8000b0c:	0039      	movs	r1, r7
 8000b0e:	20ff      	movs	r0, #255	; 0xff
 8000b10:	0a64      	lsrs	r4, r4, #9
 8000b12:	e739      	b.n	8000988 <__aeabi_fmul+0x8c>
 8000b14:	2080      	movs	r0, #128	; 0x80
 8000b16:	03c0      	lsls	r0, r0, #15
 8000b18:	4304      	orrs	r4, r0
 8000b1a:	0264      	lsls	r4, r4, #9
 8000b1c:	0031      	movs	r1, r6
 8000b1e:	20ff      	movs	r0, #255	; 0xff
 8000b20:	0a64      	lsrs	r4, r4, #9
 8000b22:	e731      	b.n	8000988 <__aeabi_fmul+0x8c>
 8000b24:	0028      	movs	r0, r5
 8000b26:	e765      	b.n	80009f4 <__aeabi_fmul+0xf8>
 8000b28:	01a4      	lsls	r4, r4, #6
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	0a64      	lsrs	r4, r4, #9
 8000b2e:	e72b      	b.n	8000988 <__aeabi_fmul+0x8c>
 8000b30:	2080      	movs	r0, #128	; 0x80
 8000b32:	03c0      	lsls	r0, r0, #15
 8000b34:	4304      	orrs	r4, r0
 8000b36:	0264      	lsls	r4, r4, #9
 8000b38:	20ff      	movs	r0, #255	; 0xff
 8000b3a:	0a64      	lsrs	r4, r4, #9
 8000b3c:	e724      	b.n	8000988 <__aeabi_fmul+0x8c>
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	0800627c 	.word	0x0800627c
 8000b44:	f7ffffff 	.word	0xf7ffffff

08000b48 <__aeabi_fsub>:
 8000b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b4a:	46ce      	mov	lr, r9
 8000b4c:	4647      	mov	r7, r8
 8000b4e:	0243      	lsls	r3, r0, #9
 8000b50:	0a5b      	lsrs	r3, r3, #9
 8000b52:	024e      	lsls	r6, r1, #9
 8000b54:	00da      	lsls	r2, r3, #3
 8000b56:	4694      	mov	ip, r2
 8000b58:	0a72      	lsrs	r2, r6, #9
 8000b5a:	4691      	mov	r9, r2
 8000b5c:	0045      	lsls	r5, r0, #1
 8000b5e:	004a      	lsls	r2, r1, #1
 8000b60:	b580      	push	{r7, lr}
 8000b62:	0e2d      	lsrs	r5, r5, #24
 8000b64:	001f      	movs	r7, r3
 8000b66:	0fc4      	lsrs	r4, r0, #31
 8000b68:	0e12      	lsrs	r2, r2, #24
 8000b6a:	0fc9      	lsrs	r1, r1, #31
 8000b6c:	09b6      	lsrs	r6, r6, #6
 8000b6e:	2aff      	cmp	r2, #255	; 0xff
 8000b70:	d05b      	beq.n	8000c2a <__aeabi_fsub+0xe2>
 8000b72:	2001      	movs	r0, #1
 8000b74:	4041      	eors	r1, r0
 8000b76:	428c      	cmp	r4, r1
 8000b78:	d039      	beq.n	8000bee <__aeabi_fsub+0xa6>
 8000b7a:	1aa8      	subs	r0, r5, r2
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	dd5a      	ble.n	8000c36 <__aeabi_fsub+0xee>
 8000b80:	2a00      	cmp	r2, #0
 8000b82:	d06a      	beq.n	8000c5a <__aeabi_fsub+0x112>
 8000b84:	2dff      	cmp	r5, #255	; 0xff
 8000b86:	d100      	bne.n	8000b8a <__aeabi_fsub+0x42>
 8000b88:	e0d9      	b.n	8000d3e <__aeabi_fsub+0x1f6>
 8000b8a:	2280      	movs	r2, #128	; 0x80
 8000b8c:	04d2      	lsls	r2, r2, #19
 8000b8e:	4316      	orrs	r6, r2
 8000b90:	281b      	cmp	r0, #27
 8000b92:	dc00      	bgt.n	8000b96 <__aeabi_fsub+0x4e>
 8000b94:	e0e9      	b.n	8000d6a <__aeabi_fsub+0x222>
 8000b96:	2001      	movs	r0, #1
 8000b98:	4663      	mov	r3, ip
 8000b9a:	1a18      	subs	r0, r3, r0
 8000b9c:	0143      	lsls	r3, r0, #5
 8000b9e:	d400      	bmi.n	8000ba2 <__aeabi_fsub+0x5a>
 8000ba0:	e0b4      	b.n	8000d0c <__aeabi_fsub+0x1c4>
 8000ba2:	0180      	lsls	r0, r0, #6
 8000ba4:	0987      	lsrs	r7, r0, #6
 8000ba6:	0038      	movs	r0, r7
 8000ba8:	f001 f804 	bl	8001bb4 <__clzsi2>
 8000bac:	3805      	subs	r0, #5
 8000bae:	4087      	lsls	r7, r0
 8000bb0:	4285      	cmp	r5, r0
 8000bb2:	dc00      	bgt.n	8000bb6 <__aeabi_fsub+0x6e>
 8000bb4:	e0cc      	b.n	8000d50 <__aeabi_fsub+0x208>
 8000bb6:	1a2d      	subs	r5, r5, r0
 8000bb8:	48b5      	ldr	r0, [pc, #724]	; (8000e90 <__aeabi_fsub+0x348>)
 8000bba:	4038      	ands	r0, r7
 8000bbc:	0743      	lsls	r3, r0, #29
 8000bbe:	d004      	beq.n	8000bca <__aeabi_fsub+0x82>
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	4003      	ands	r3, r0
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	d000      	beq.n	8000bca <__aeabi_fsub+0x82>
 8000bc8:	3004      	adds	r0, #4
 8000bca:	0143      	lsls	r3, r0, #5
 8000bcc:	d400      	bmi.n	8000bd0 <__aeabi_fsub+0x88>
 8000bce:	e0a0      	b.n	8000d12 <__aeabi_fsub+0x1ca>
 8000bd0:	1c6a      	adds	r2, r5, #1
 8000bd2:	2dfe      	cmp	r5, #254	; 0xfe
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_fsub+0x90>
 8000bd6:	e08d      	b.n	8000cf4 <__aeabi_fsub+0x1ac>
 8000bd8:	0180      	lsls	r0, r0, #6
 8000bda:	0a47      	lsrs	r7, r0, #9
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	05d0      	lsls	r0, r2, #23
 8000be0:	4338      	orrs	r0, r7
 8000be2:	07e4      	lsls	r4, r4, #31
 8000be4:	4320      	orrs	r0, r4
 8000be6:	bcc0      	pop	{r6, r7}
 8000be8:	46b9      	mov	r9, r7
 8000bea:	46b0      	mov	r8, r6
 8000bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bee:	1aa8      	subs	r0, r5, r2
 8000bf0:	4680      	mov	r8, r0
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	dd45      	ble.n	8000c82 <__aeabi_fsub+0x13a>
 8000bf6:	2a00      	cmp	r2, #0
 8000bf8:	d070      	beq.n	8000cdc <__aeabi_fsub+0x194>
 8000bfa:	2dff      	cmp	r5, #255	; 0xff
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_fsub+0xb8>
 8000bfe:	e09e      	b.n	8000d3e <__aeabi_fsub+0x1f6>
 8000c00:	2380      	movs	r3, #128	; 0x80
 8000c02:	04db      	lsls	r3, r3, #19
 8000c04:	431e      	orrs	r6, r3
 8000c06:	4643      	mov	r3, r8
 8000c08:	2b1b      	cmp	r3, #27
 8000c0a:	dc00      	bgt.n	8000c0e <__aeabi_fsub+0xc6>
 8000c0c:	e0d2      	b.n	8000db4 <__aeabi_fsub+0x26c>
 8000c0e:	2001      	movs	r0, #1
 8000c10:	4460      	add	r0, ip
 8000c12:	0143      	lsls	r3, r0, #5
 8000c14:	d57a      	bpl.n	8000d0c <__aeabi_fsub+0x1c4>
 8000c16:	3501      	adds	r5, #1
 8000c18:	2dff      	cmp	r5, #255	; 0xff
 8000c1a:	d06b      	beq.n	8000cf4 <__aeabi_fsub+0x1ac>
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	4a9d      	ldr	r2, [pc, #628]	; (8000e94 <__aeabi_fsub+0x34c>)
 8000c20:	4003      	ands	r3, r0
 8000c22:	0840      	lsrs	r0, r0, #1
 8000c24:	4010      	ands	r0, r2
 8000c26:	4318      	orrs	r0, r3
 8000c28:	e7c8      	b.n	8000bbc <__aeabi_fsub+0x74>
 8000c2a:	2e00      	cmp	r6, #0
 8000c2c:	d020      	beq.n	8000c70 <__aeabi_fsub+0x128>
 8000c2e:	428c      	cmp	r4, r1
 8000c30:	d023      	beq.n	8000c7a <__aeabi_fsub+0x132>
 8000c32:	0028      	movs	r0, r5
 8000c34:	38ff      	subs	r0, #255	; 0xff
 8000c36:	2800      	cmp	r0, #0
 8000c38:	d039      	beq.n	8000cae <__aeabi_fsub+0x166>
 8000c3a:	1b57      	subs	r7, r2, r5
 8000c3c:	2d00      	cmp	r5, #0
 8000c3e:	d000      	beq.n	8000c42 <__aeabi_fsub+0xfa>
 8000c40:	e09d      	b.n	8000d7e <__aeabi_fsub+0x236>
 8000c42:	4663      	mov	r3, ip
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d100      	bne.n	8000c4a <__aeabi_fsub+0x102>
 8000c48:	e0db      	b.n	8000e02 <__aeabi_fsub+0x2ba>
 8000c4a:	1e7b      	subs	r3, r7, #1
 8000c4c:	2f01      	cmp	r7, #1
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_fsub+0x10a>
 8000c50:	e10d      	b.n	8000e6e <__aeabi_fsub+0x326>
 8000c52:	2fff      	cmp	r7, #255	; 0xff
 8000c54:	d071      	beq.n	8000d3a <__aeabi_fsub+0x1f2>
 8000c56:	001f      	movs	r7, r3
 8000c58:	e098      	b.n	8000d8c <__aeabi_fsub+0x244>
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_fsub+0x118>
 8000c5e:	e0a7      	b.n	8000db0 <__aeabi_fsub+0x268>
 8000c60:	1e42      	subs	r2, r0, #1
 8000c62:	2801      	cmp	r0, #1
 8000c64:	d100      	bne.n	8000c68 <__aeabi_fsub+0x120>
 8000c66:	e0e6      	b.n	8000e36 <__aeabi_fsub+0x2ee>
 8000c68:	28ff      	cmp	r0, #255	; 0xff
 8000c6a:	d068      	beq.n	8000d3e <__aeabi_fsub+0x1f6>
 8000c6c:	0010      	movs	r0, r2
 8000c6e:	e78f      	b.n	8000b90 <__aeabi_fsub+0x48>
 8000c70:	2001      	movs	r0, #1
 8000c72:	4041      	eors	r1, r0
 8000c74:	42a1      	cmp	r1, r4
 8000c76:	d000      	beq.n	8000c7a <__aeabi_fsub+0x132>
 8000c78:	e77f      	b.n	8000b7a <__aeabi_fsub+0x32>
 8000c7a:	20ff      	movs	r0, #255	; 0xff
 8000c7c:	4240      	negs	r0, r0
 8000c7e:	4680      	mov	r8, r0
 8000c80:	44a8      	add	r8, r5
 8000c82:	4640      	mov	r0, r8
 8000c84:	2800      	cmp	r0, #0
 8000c86:	d038      	beq.n	8000cfa <__aeabi_fsub+0x1b2>
 8000c88:	1b51      	subs	r1, r2, r5
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_fsub+0x148>
 8000c8e:	e0ae      	b.n	8000dee <__aeabi_fsub+0x2a6>
 8000c90:	2aff      	cmp	r2, #255	; 0xff
 8000c92:	d100      	bne.n	8000c96 <__aeabi_fsub+0x14e>
 8000c94:	e0df      	b.n	8000e56 <__aeabi_fsub+0x30e>
 8000c96:	2380      	movs	r3, #128	; 0x80
 8000c98:	4660      	mov	r0, ip
 8000c9a:	04db      	lsls	r3, r3, #19
 8000c9c:	4318      	orrs	r0, r3
 8000c9e:	4684      	mov	ip, r0
 8000ca0:	291b      	cmp	r1, #27
 8000ca2:	dc00      	bgt.n	8000ca6 <__aeabi_fsub+0x15e>
 8000ca4:	e0d9      	b.n	8000e5a <__aeabi_fsub+0x312>
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	0015      	movs	r5, r2
 8000caa:	1980      	adds	r0, r0, r6
 8000cac:	e7b1      	b.n	8000c12 <__aeabi_fsub+0xca>
 8000cae:	20fe      	movs	r0, #254	; 0xfe
 8000cb0:	1c6a      	adds	r2, r5, #1
 8000cb2:	4210      	tst	r0, r2
 8000cb4:	d171      	bne.n	8000d9a <__aeabi_fsub+0x252>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d000      	beq.n	8000cbc <__aeabi_fsub+0x174>
 8000cba:	e0a6      	b.n	8000e0a <__aeabi_fsub+0x2c2>
 8000cbc:	4663      	mov	r3, ip
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_fsub+0x17c>
 8000cc2:	e0d9      	b.n	8000e78 <__aeabi_fsub+0x330>
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_fsub+0x184>
 8000cca:	e788      	b.n	8000bde <__aeabi_fsub+0x96>
 8000ccc:	1b98      	subs	r0, r3, r6
 8000cce:	0143      	lsls	r3, r0, #5
 8000cd0:	d400      	bmi.n	8000cd4 <__aeabi_fsub+0x18c>
 8000cd2:	e0e1      	b.n	8000e98 <__aeabi_fsub+0x350>
 8000cd4:	4663      	mov	r3, ip
 8000cd6:	000c      	movs	r4, r1
 8000cd8:	1af0      	subs	r0, r6, r3
 8000cda:	e76f      	b.n	8000bbc <__aeabi_fsub+0x74>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_fsub+0x19a>
 8000ce0:	e0b7      	b.n	8000e52 <__aeabi_fsub+0x30a>
 8000ce2:	0002      	movs	r2, r0
 8000ce4:	3a01      	subs	r2, #1
 8000ce6:	2801      	cmp	r0, #1
 8000ce8:	d100      	bne.n	8000cec <__aeabi_fsub+0x1a4>
 8000cea:	e09c      	b.n	8000e26 <__aeabi_fsub+0x2de>
 8000cec:	28ff      	cmp	r0, #255	; 0xff
 8000cee:	d026      	beq.n	8000d3e <__aeabi_fsub+0x1f6>
 8000cf0:	4690      	mov	r8, r2
 8000cf2:	e788      	b.n	8000c06 <__aeabi_fsub+0xbe>
 8000cf4:	22ff      	movs	r2, #255	; 0xff
 8000cf6:	2700      	movs	r7, #0
 8000cf8:	e771      	b.n	8000bde <__aeabi_fsub+0x96>
 8000cfa:	20fe      	movs	r0, #254	; 0xfe
 8000cfc:	1c6a      	adds	r2, r5, #1
 8000cfe:	4210      	tst	r0, r2
 8000d00:	d064      	beq.n	8000dcc <__aeabi_fsub+0x284>
 8000d02:	2aff      	cmp	r2, #255	; 0xff
 8000d04:	d0f6      	beq.n	8000cf4 <__aeabi_fsub+0x1ac>
 8000d06:	0015      	movs	r5, r2
 8000d08:	4466      	add	r6, ip
 8000d0a:	0870      	lsrs	r0, r6, #1
 8000d0c:	0743      	lsls	r3, r0, #29
 8000d0e:	d000      	beq.n	8000d12 <__aeabi_fsub+0x1ca>
 8000d10:	e756      	b.n	8000bc0 <__aeabi_fsub+0x78>
 8000d12:	08c3      	lsrs	r3, r0, #3
 8000d14:	2dff      	cmp	r5, #255	; 0xff
 8000d16:	d012      	beq.n	8000d3e <__aeabi_fsub+0x1f6>
 8000d18:	025b      	lsls	r3, r3, #9
 8000d1a:	0a5f      	lsrs	r7, r3, #9
 8000d1c:	b2ea      	uxtb	r2, r5
 8000d1e:	e75e      	b.n	8000bde <__aeabi_fsub+0x96>
 8000d20:	4662      	mov	r2, ip
 8000d22:	2a00      	cmp	r2, #0
 8000d24:	d100      	bne.n	8000d28 <__aeabi_fsub+0x1e0>
 8000d26:	e096      	b.n	8000e56 <__aeabi_fsub+0x30e>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d008      	beq.n	8000d3e <__aeabi_fsub+0x1f6>
 8000d2c:	2280      	movs	r2, #128	; 0x80
 8000d2e:	03d2      	lsls	r2, r2, #15
 8000d30:	4213      	tst	r3, r2
 8000d32:	d004      	beq.n	8000d3e <__aeabi_fsub+0x1f6>
 8000d34:	4648      	mov	r0, r9
 8000d36:	4210      	tst	r0, r2
 8000d38:	d101      	bne.n	8000d3e <__aeabi_fsub+0x1f6>
 8000d3a:	000c      	movs	r4, r1
 8000d3c:	464b      	mov	r3, r9
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0d8      	beq.n	8000cf4 <__aeabi_fsub+0x1ac>
 8000d42:	2780      	movs	r7, #128	; 0x80
 8000d44:	03ff      	lsls	r7, r7, #15
 8000d46:	431f      	orrs	r7, r3
 8000d48:	027f      	lsls	r7, r7, #9
 8000d4a:	22ff      	movs	r2, #255	; 0xff
 8000d4c:	0a7f      	lsrs	r7, r7, #9
 8000d4e:	e746      	b.n	8000bde <__aeabi_fsub+0x96>
 8000d50:	2320      	movs	r3, #32
 8000d52:	003a      	movs	r2, r7
 8000d54:	1b45      	subs	r5, r0, r5
 8000d56:	0038      	movs	r0, r7
 8000d58:	3501      	adds	r5, #1
 8000d5a:	40ea      	lsrs	r2, r5
 8000d5c:	1b5d      	subs	r5, r3, r5
 8000d5e:	40a8      	lsls	r0, r5
 8000d60:	1e43      	subs	r3, r0, #1
 8000d62:	4198      	sbcs	r0, r3
 8000d64:	2500      	movs	r5, #0
 8000d66:	4310      	orrs	r0, r2
 8000d68:	e728      	b.n	8000bbc <__aeabi_fsub+0x74>
 8000d6a:	2320      	movs	r3, #32
 8000d6c:	1a1b      	subs	r3, r3, r0
 8000d6e:	0032      	movs	r2, r6
 8000d70:	409e      	lsls	r6, r3
 8000d72:	40c2      	lsrs	r2, r0
 8000d74:	0030      	movs	r0, r6
 8000d76:	1e43      	subs	r3, r0, #1
 8000d78:	4198      	sbcs	r0, r3
 8000d7a:	4310      	orrs	r0, r2
 8000d7c:	e70c      	b.n	8000b98 <__aeabi_fsub+0x50>
 8000d7e:	2aff      	cmp	r2, #255	; 0xff
 8000d80:	d0db      	beq.n	8000d3a <__aeabi_fsub+0x1f2>
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	4660      	mov	r0, ip
 8000d86:	04db      	lsls	r3, r3, #19
 8000d88:	4318      	orrs	r0, r3
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	2f1b      	cmp	r7, #27
 8000d8e:	dd56      	ble.n	8000e3e <__aeabi_fsub+0x2f6>
 8000d90:	2001      	movs	r0, #1
 8000d92:	000c      	movs	r4, r1
 8000d94:	0015      	movs	r5, r2
 8000d96:	1a30      	subs	r0, r6, r0
 8000d98:	e700      	b.n	8000b9c <__aeabi_fsub+0x54>
 8000d9a:	4663      	mov	r3, ip
 8000d9c:	1b9f      	subs	r7, r3, r6
 8000d9e:	017b      	lsls	r3, r7, #5
 8000da0:	d43d      	bmi.n	8000e1e <__aeabi_fsub+0x2d6>
 8000da2:	2f00      	cmp	r7, #0
 8000da4:	d000      	beq.n	8000da8 <__aeabi_fsub+0x260>
 8000da6:	e6fe      	b.n	8000ba6 <__aeabi_fsub+0x5e>
 8000da8:	2400      	movs	r4, #0
 8000daa:	2200      	movs	r2, #0
 8000dac:	2700      	movs	r7, #0
 8000dae:	e716      	b.n	8000bde <__aeabi_fsub+0x96>
 8000db0:	0005      	movs	r5, r0
 8000db2:	e7af      	b.n	8000d14 <__aeabi_fsub+0x1cc>
 8000db4:	0032      	movs	r2, r6
 8000db6:	4643      	mov	r3, r8
 8000db8:	4641      	mov	r1, r8
 8000dba:	40da      	lsrs	r2, r3
 8000dbc:	2320      	movs	r3, #32
 8000dbe:	1a5b      	subs	r3, r3, r1
 8000dc0:	409e      	lsls	r6, r3
 8000dc2:	0030      	movs	r0, r6
 8000dc4:	1e43      	subs	r3, r0, #1
 8000dc6:	4198      	sbcs	r0, r3
 8000dc8:	4310      	orrs	r0, r2
 8000dca:	e721      	b.n	8000c10 <__aeabi_fsub+0xc8>
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d1a7      	bne.n	8000d20 <__aeabi_fsub+0x1d8>
 8000dd0:	4663      	mov	r3, ip
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d059      	beq.n	8000e8a <__aeabi_fsub+0x342>
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d100      	bne.n	8000dde <__aeabi_fsub+0x296>
 8000ddc:	e6ff      	b.n	8000bde <__aeabi_fsub+0x96>
 8000dde:	0030      	movs	r0, r6
 8000de0:	4460      	add	r0, ip
 8000de2:	0143      	lsls	r3, r0, #5
 8000de4:	d592      	bpl.n	8000d0c <__aeabi_fsub+0x1c4>
 8000de6:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <__aeabi_fsub+0x348>)
 8000de8:	3501      	adds	r5, #1
 8000dea:	4018      	ands	r0, r3
 8000dec:	e78e      	b.n	8000d0c <__aeabi_fsub+0x1c4>
 8000dee:	4663      	mov	r3, ip
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d047      	beq.n	8000e84 <__aeabi_fsub+0x33c>
 8000df4:	1e4b      	subs	r3, r1, #1
 8000df6:	2901      	cmp	r1, #1
 8000df8:	d015      	beq.n	8000e26 <__aeabi_fsub+0x2de>
 8000dfa:	29ff      	cmp	r1, #255	; 0xff
 8000dfc:	d02b      	beq.n	8000e56 <__aeabi_fsub+0x30e>
 8000dfe:	0019      	movs	r1, r3
 8000e00:	e74e      	b.n	8000ca0 <__aeabi_fsub+0x158>
 8000e02:	000c      	movs	r4, r1
 8000e04:	464b      	mov	r3, r9
 8000e06:	003d      	movs	r5, r7
 8000e08:	e784      	b.n	8000d14 <__aeabi_fsub+0x1cc>
 8000e0a:	4662      	mov	r2, ip
 8000e0c:	2a00      	cmp	r2, #0
 8000e0e:	d18b      	bne.n	8000d28 <__aeabi_fsub+0x1e0>
 8000e10:	2e00      	cmp	r6, #0
 8000e12:	d192      	bne.n	8000d3a <__aeabi_fsub+0x1f2>
 8000e14:	2780      	movs	r7, #128	; 0x80
 8000e16:	2400      	movs	r4, #0
 8000e18:	22ff      	movs	r2, #255	; 0xff
 8000e1a:	03ff      	lsls	r7, r7, #15
 8000e1c:	e6df      	b.n	8000bde <__aeabi_fsub+0x96>
 8000e1e:	4663      	mov	r3, ip
 8000e20:	000c      	movs	r4, r1
 8000e22:	1af7      	subs	r7, r6, r3
 8000e24:	e6bf      	b.n	8000ba6 <__aeabi_fsub+0x5e>
 8000e26:	0030      	movs	r0, r6
 8000e28:	4460      	add	r0, ip
 8000e2a:	2501      	movs	r5, #1
 8000e2c:	0143      	lsls	r3, r0, #5
 8000e2e:	d400      	bmi.n	8000e32 <__aeabi_fsub+0x2ea>
 8000e30:	e76c      	b.n	8000d0c <__aeabi_fsub+0x1c4>
 8000e32:	2502      	movs	r5, #2
 8000e34:	e6f2      	b.n	8000c1c <__aeabi_fsub+0xd4>
 8000e36:	4663      	mov	r3, ip
 8000e38:	2501      	movs	r5, #1
 8000e3a:	1b98      	subs	r0, r3, r6
 8000e3c:	e6ae      	b.n	8000b9c <__aeabi_fsub+0x54>
 8000e3e:	2320      	movs	r3, #32
 8000e40:	4664      	mov	r4, ip
 8000e42:	4660      	mov	r0, ip
 8000e44:	40fc      	lsrs	r4, r7
 8000e46:	1bdf      	subs	r7, r3, r7
 8000e48:	40b8      	lsls	r0, r7
 8000e4a:	1e43      	subs	r3, r0, #1
 8000e4c:	4198      	sbcs	r0, r3
 8000e4e:	4320      	orrs	r0, r4
 8000e50:	e79f      	b.n	8000d92 <__aeabi_fsub+0x24a>
 8000e52:	0005      	movs	r5, r0
 8000e54:	e75e      	b.n	8000d14 <__aeabi_fsub+0x1cc>
 8000e56:	464b      	mov	r3, r9
 8000e58:	e771      	b.n	8000d3e <__aeabi_fsub+0x1f6>
 8000e5a:	2320      	movs	r3, #32
 8000e5c:	4665      	mov	r5, ip
 8000e5e:	4660      	mov	r0, ip
 8000e60:	40cd      	lsrs	r5, r1
 8000e62:	1a59      	subs	r1, r3, r1
 8000e64:	4088      	lsls	r0, r1
 8000e66:	1e43      	subs	r3, r0, #1
 8000e68:	4198      	sbcs	r0, r3
 8000e6a:	4328      	orrs	r0, r5
 8000e6c:	e71c      	b.n	8000ca8 <__aeabi_fsub+0x160>
 8000e6e:	4663      	mov	r3, ip
 8000e70:	000c      	movs	r4, r1
 8000e72:	2501      	movs	r5, #1
 8000e74:	1af0      	subs	r0, r6, r3
 8000e76:	e691      	b.n	8000b9c <__aeabi_fsub+0x54>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d095      	beq.n	8000da8 <__aeabi_fsub+0x260>
 8000e7c:	000c      	movs	r4, r1
 8000e7e:	464f      	mov	r7, r9
 8000e80:	2200      	movs	r2, #0
 8000e82:	e6ac      	b.n	8000bde <__aeabi_fsub+0x96>
 8000e84:	464b      	mov	r3, r9
 8000e86:	000d      	movs	r5, r1
 8000e88:	e744      	b.n	8000d14 <__aeabi_fsub+0x1cc>
 8000e8a:	464f      	mov	r7, r9
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e6a6      	b.n	8000bde <__aeabi_fsub+0x96>
 8000e90:	fbffffff 	.word	0xfbffffff
 8000e94:	7dffffff 	.word	0x7dffffff
 8000e98:	2800      	cmp	r0, #0
 8000e9a:	d000      	beq.n	8000e9e <__aeabi_fsub+0x356>
 8000e9c:	e736      	b.n	8000d0c <__aeabi_fsub+0x1c4>
 8000e9e:	2400      	movs	r4, #0
 8000ea0:	2700      	movs	r7, #0
 8000ea2:	e69c      	b.n	8000bde <__aeabi_fsub+0x96>

08000ea4 <__aeabi_f2iz>:
 8000ea4:	0241      	lsls	r1, r0, #9
 8000ea6:	0042      	lsls	r2, r0, #1
 8000ea8:	0fc3      	lsrs	r3, r0, #31
 8000eaa:	0a49      	lsrs	r1, r1, #9
 8000eac:	2000      	movs	r0, #0
 8000eae:	0e12      	lsrs	r2, r2, #24
 8000eb0:	2a7e      	cmp	r2, #126	; 0x7e
 8000eb2:	dd03      	ble.n	8000ebc <__aeabi_f2iz+0x18>
 8000eb4:	2a9d      	cmp	r2, #157	; 0x9d
 8000eb6:	dd02      	ble.n	8000ebe <__aeabi_f2iz+0x1a>
 8000eb8:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <__aeabi_f2iz+0x3c>)
 8000eba:	1898      	adds	r0, r3, r2
 8000ebc:	4770      	bx	lr
 8000ebe:	2080      	movs	r0, #128	; 0x80
 8000ec0:	0400      	lsls	r0, r0, #16
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	2a95      	cmp	r2, #149	; 0x95
 8000ec6:	dc07      	bgt.n	8000ed8 <__aeabi_f2iz+0x34>
 8000ec8:	2096      	movs	r0, #150	; 0x96
 8000eca:	1a82      	subs	r2, r0, r2
 8000ecc:	40d1      	lsrs	r1, r2
 8000ece:	4248      	negs	r0, r1
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1f3      	bne.n	8000ebc <__aeabi_f2iz+0x18>
 8000ed4:	0008      	movs	r0, r1
 8000ed6:	e7f1      	b.n	8000ebc <__aeabi_f2iz+0x18>
 8000ed8:	3a96      	subs	r2, #150	; 0x96
 8000eda:	4091      	lsls	r1, r2
 8000edc:	e7f7      	b.n	8000ece <__aeabi_f2iz+0x2a>
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	7fffffff 	.word	0x7fffffff

08000ee4 <__aeabi_i2f>:
 8000ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ee6:	2800      	cmp	r0, #0
 8000ee8:	d013      	beq.n	8000f12 <__aeabi_i2f+0x2e>
 8000eea:	17c3      	asrs	r3, r0, #31
 8000eec:	18c6      	adds	r6, r0, r3
 8000eee:	405e      	eors	r6, r3
 8000ef0:	0fc4      	lsrs	r4, r0, #31
 8000ef2:	0030      	movs	r0, r6
 8000ef4:	f000 fe5e 	bl	8001bb4 <__clzsi2>
 8000ef8:	239e      	movs	r3, #158	; 0x9e
 8000efa:	0005      	movs	r5, r0
 8000efc:	1a1b      	subs	r3, r3, r0
 8000efe:	2b96      	cmp	r3, #150	; 0x96
 8000f00:	dc0f      	bgt.n	8000f22 <__aeabi_i2f+0x3e>
 8000f02:	2808      	cmp	r0, #8
 8000f04:	dd01      	ble.n	8000f0a <__aeabi_i2f+0x26>
 8000f06:	3d08      	subs	r5, #8
 8000f08:	40ae      	lsls	r6, r5
 8000f0a:	0276      	lsls	r6, r6, #9
 8000f0c:	0a76      	lsrs	r6, r6, #9
 8000f0e:	b2d8      	uxtb	r0, r3
 8000f10:	e002      	b.n	8000f18 <__aeabi_i2f+0x34>
 8000f12:	2400      	movs	r4, #0
 8000f14:	2000      	movs	r0, #0
 8000f16:	2600      	movs	r6, #0
 8000f18:	05c0      	lsls	r0, r0, #23
 8000f1a:	4330      	orrs	r0, r6
 8000f1c:	07e4      	lsls	r4, r4, #31
 8000f1e:	4320      	orrs	r0, r4
 8000f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f22:	2b99      	cmp	r3, #153	; 0x99
 8000f24:	dd0c      	ble.n	8000f40 <__aeabi_i2f+0x5c>
 8000f26:	2205      	movs	r2, #5
 8000f28:	0031      	movs	r1, r6
 8000f2a:	1a12      	subs	r2, r2, r0
 8000f2c:	40d1      	lsrs	r1, r2
 8000f2e:	000a      	movs	r2, r1
 8000f30:	0001      	movs	r1, r0
 8000f32:	0030      	movs	r0, r6
 8000f34:	311b      	adds	r1, #27
 8000f36:	4088      	lsls	r0, r1
 8000f38:	1e41      	subs	r1, r0, #1
 8000f3a:	4188      	sbcs	r0, r1
 8000f3c:	4302      	orrs	r2, r0
 8000f3e:	0016      	movs	r6, r2
 8000f40:	2d05      	cmp	r5, #5
 8000f42:	dc12      	bgt.n	8000f6a <__aeabi_i2f+0x86>
 8000f44:	0031      	movs	r1, r6
 8000f46:	4f0d      	ldr	r7, [pc, #52]	; (8000f7c <__aeabi_i2f+0x98>)
 8000f48:	4039      	ands	r1, r7
 8000f4a:	0772      	lsls	r2, r6, #29
 8000f4c:	d009      	beq.n	8000f62 <__aeabi_i2f+0x7e>
 8000f4e:	200f      	movs	r0, #15
 8000f50:	4030      	ands	r0, r6
 8000f52:	2804      	cmp	r0, #4
 8000f54:	d005      	beq.n	8000f62 <__aeabi_i2f+0x7e>
 8000f56:	3104      	adds	r1, #4
 8000f58:	014a      	lsls	r2, r1, #5
 8000f5a:	d502      	bpl.n	8000f62 <__aeabi_i2f+0x7e>
 8000f5c:	239f      	movs	r3, #159	; 0x9f
 8000f5e:	4039      	ands	r1, r7
 8000f60:	1b5b      	subs	r3, r3, r5
 8000f62:	0189      	lsls	r1, r1, #6
 8000f64:	0a4e      	lsrs	r6, r1, #9
 8000f66:	b2d8      	uxtb	r0, r3
 8000f68:	e7d6      	b.n	8000f18 <__aeabi_i2f+0x34>
 8000f6a:	1f6a      	subs	r2, r5, #5
 8000f6c:	4096      	lsls	r6, r2
 8000f6e:	0031      	movs	r1, r6
 8000f70:	4f02      	ldr	r7, [pc, #8]	; (8000f7c <__aeabi_i2f+0x98>)
 8000f72:	4039      	ands	r1, r7
 8000f74:	0772      	lsls	r2, r6, #29
 8000f76:	d0f4      	beq.n	8000f62 <__aeabi_i2f+0x7e>
 8000f78:	e7e9      	b.n	8000f4e <__aeabi_i2f+0x6a>
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	fbffffff 	.word	0xfbffffff

08000f80 <__aeabi_ddiv>:
 8000f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f82:	4657      	mov	r7, sl
 8000f84:	464e      	mov	r6, r9
 8000f86:	4645      	mov	r5, r8
 8000f88:	46de      	mov	lr, fp
 8000f8a:	b5e0      	push	{r5, r6, r7, lr}
 8000f8c:	4681      	mov	r9, r0
 8000f8e:	0005      	movs	r5, r0
 8000f90:	030c      	lsls	r4, r1, #12
 8000f92:	0048      	lsls	r0, r1, #1
 8000f94:	4692      	mov	sl, r2
 8000f96:	001f      	movs	r7, r3
 8000f98:	b085      	sub	sp, #20
 8000f9a:	0b24      	lsrs	r4, r4, #12
 8000f9c:	0d40      	lsrs	r0, r0, #21
 8000f9e:	0fce      	lsrs	r6, r1, #31
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_ddiv+0x26>
 8000fa4:	e156      	b.n	8001254 <__aeabi_ddiv+0x2d4>
 8000fa6:	4bd4      	ldr	r3, [pc, #848]	; (80012f8 <__aeabi_ddiv+0x378>)
 8000fa8:	4298      	cmp	r0, r3
 8000faa:	d100      	bne.n	8000fae <__aeabi_ddiv+0x2e>
 8000fac:	e172      	b.n	8001294 <__aeabi_ddiv+0x314>
 8000fae:	0f6b      	lsrs	r3, r5, #29
 8000fb0:	00e4      	lsls	r4, r4, #3
 8000fb2:	431c      	orrs	r4, r3
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	041b      	lsls	r3, r3, #16
 8000fb8:	4323      	orrs	r3, r4
 8000fba:	4698      	mov	r8, r3
 8000fbc:	4bcf      	ldr	r3, [pc, #828]	; (80012fc <__aeabi_ddiv+0x37c>)
 8000fbe:	00ed      	lsls	r5, r5, #3
 8000fc0:	469b      	mov	fp, r3
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	4699      	mov	r9, r3
 8000fc6:	4483      	add	fp, r0
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	033c      	lsls	r4, r7, #12
 8000fcc:	007b      	lsls	r3, r7, #1
 8000fce:	4650      	mov	r0, sl
 8000fd0:	0b24      	lsrs	r4, r4, #12
 8000fd2:	0d5b      	lsrs	r3, r3, #21
 8000fd4:	0fff      	lsrs	r7, r7, #31
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_ddiv+0x5c>
 8000fda:	e11f      	b.n	800121c <__aeabi_ddiv+0x29c>
 8000fdc:	4ac6      	ldr	r2, [pc, #792]	; (80012f8 <__aeabi_ddiv+0x378>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_ddiv+0x64>
 8000fe2:	e162      	b.n	80012aa <__aeabi_ddiv+0x32a>
 8000fe4:	49c5      	ldr	r1, [pc, #788]	; (80012fc <__aeabi_ddiv+0x37c>)
 8000fe6:	0f42      	lsrs	r2, r0, #29
 8000fe8:	468c      	mov	ip, r1
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	4659      	mov	r1, fp
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	2280      	movs	r2, #128	; 0x80
 8000ff2:	4463      	add	r3, ip
 8000ff4:	0412      	lsls	r2, r2, #16
 8000ff6:	1acb      	subs	r3, r1, r3
 8000ff8:	4314      	orrs	r4, r2
 8000ffa:	469b      	mov	fp, r3
 8000ffc:	00c2      	lsls	r2, r0, #3
 8000ffe:	2000      	movs	r0, #0
 8001000:	0033      	movs	r3, r6
 8001002:	407b      	eors	r3, r7
 8001004:	469a      	mov	sl, r3
 8001006:	464b      	mov	r3, r9
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d827      	bhi.n	800105c <__aeabi_ddiv+0xdc>
 800100c:	49bc      	ldr	r1, [pc, #752]	; (8001300 <__aeabi_ddiv+0x380>)
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	58cb      	ldr	r3, [r1, r3]
 8001012:	469f      	mov	pc, r3
 8001014:	46b2      	mov	sl, r6
 8001016:	9b00      	ldr	r3, [sp, #0]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d016      	beq.n	800104a <__aeabi_ddiv+0xca>
 800101c:	2b03      	cmp	r3, #3
 800101e:	d100      	bne.n	8001022 <__aeabi_ddiv+0xa2>
 8001020:	e28e      	b.n	8001540 <__aeabi_ddiv+0x5c0>
 8001022:	2b01      	cmp	r3, #1
 8001024:	d000      	beq.n	8001028 <__aeabi_ddiv+0xa8>
 8001026:	e0d9      	b.n	80011dc <__aeabi_ddiv+0x25c>
 8001028:	2300      	movs	r3, #0
 800102a:	2400      	movs	r4, #0
 800102c:	2500      	movs	r5, #0
 800102e:	4652      	mov	r2, sl
 8001030:	051b      	lsls	r3, r3, #20
 8001032:	4323      	orrs	r3, r4
 8001034:	07d2      	lsls	r2, r2, #31
 8001036:	4313      	orrs	r3, r2
 8001038:	0028      	movs	r0, r5
 800103a:	0019      	movs	r1, r3
 800103c:	b005      	add	sp, #20
 800103e:	bcf0      	pop	{r4, r5, r6, r7}
 8001040:	46bb      	mov	fp, r7
 8001042:	46b2      	mov	sl, r6
 8001044:	46a9      	mov	r9, r5
 8001046:	46a0      	mov	r8, r4
 8001048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800104a:	2400      	movs	r4, #0
 800104c:	2500      	movs	r5, #0
 800104e:	4baa      	ldr	r3, [pc, #680]	; (80012f8 <__aeabi_ddiv+0x378>)
 8001050:	e7ed      	b.n	800102e <__aeabi_ddiv+0xae>
 8001052:	46ba      	mov	sl, r7
 8001054:	46a0      	mov	r8, r4
 8001056:	0015      	movs	r5, r2
 8001058:	9000      	str	r0, [sp, #0]
 800105a:	e7dc      	b.n	8001016 <__aeabi_ddiv+0x96>
 800105c:	4544      	cmp	r4, r8
 800105e:	d200      	bcs.n	8001062 <__aeabi_ddiv+0xe2>
 8001060:	e1c7      	b.n	80013f2 <__aeabi_ddiv+0x472>
 8001062:	d100      	bne.n	8001066 <__aeabi_ddiv+0xe6>
 8001064:	e1c2      	b.n	80013ec <__aeabi_ddiv+0x46c>
 8001066:	2301      	movs	r3, #1
 8001068:	425b      	negs	r3, r3
 800106a:	469c      	mov	ip, r3
 800106c:	002e      	movs	r6, r5
 800106e:	4640      	mov	r0, r8
 8001070:	2500      	movs	r5, #0
 8001072:	44e3      	add	fp, ip
 8001074:	0223      	lsls	r3, r4, #8
 8001076:	0e14      	lsrs	r4, r2, #24
 8001078:	431c      	orrs	r4, r3
 800107a:	0c1b      	lsrs	r3, r3, #16
 800107c:	4699      	mov	r9, r3
 800107e:	0423      	lsls	r3, r4, #16
 8001080:	0c1f      	lsrs	r7, r3, #16
 8001082:	0212      	lsls	r2, r2, #8
 8001084:	4649      	mov	r1, r9
 8001086:	9200      	str	r2, [sp, #0]
 8001088:	9701      	str	r7, [sp, #4]
 800108a:	f7ff f8bf 	bl	800020c <__aeabi_uidivmod>
 800108e:	0002      	movs	r2, r0
 8001090:	437a      	muls	r2, r7
 8001092:	040b      	lsls	r3, r1, #16
 8001094:	0c31      	lsrs	r1, r6, #16
 8001096:	4680      	mov	r8, r0
 8001098:	4319      	orrs	r1, r3
 800109a:	428a      	cmp	r2, r1
 800109c:	d907      	bls.n	80010ae <__aeabi_ddiv+0x12e>
 800109e:	2301      	movs	r3, #1
 80010a0:	425b      	negs	r3, r3
 80010a2:	469c      	mov	ip, r3
 80010a4:	1909      	adds	r1, r1, r4
 80010a6:	44e0      	add	r8, ip
 80010a8:	428c      	cmp	r4, r1
 80010aa:	d800      	bhi.n	80010ae <__aeabi_ddiv+0x12e>
 80010ac:	e207      	b.n	80014be <__aeabi_ddiv+0x53e>
 80010ae:	1a88      	subs	r0, r1, r2
 80010b0:	4649      	mov	r1, r9
 80010b2:	f7ff f8ab 	bl	800020c <__aeabi_uidivmod>
 80010b6:	0409      	lsls	r1, r1, #16
 80010b8:	468c      	mov	ip, r1
 80010ba:	0431      	lsls	r1, r6, #16
 80010bc:	4666      	mov	r6, ip
 80010be:	9a01      	ldr	r2, [sp, #4]
 80010c0:	0c09      	lsrs	r1, r1, #16
 80010c2:	4342      	muls	r2, r0
 80010c4:	0003      	movs	r3, r0
 80010c6:	4331      	orrs	r1, r6
 80010c8:	428a      	cmp	r2, r1
 80010ca:	d904      	bls.n	80010d6 <__aeabi_ddiv+0x156>
 80010cc:	1909      	adds	r1, r1, r4
 80010ce:	3b01      	subs	r3, #1
 80010d0:	428c      	cmp	r4, r1
 80010d2:	d800      	bhi.n	80010d6 <__aeabi_ddiv+0x156>
 80010d4:	e1ed      	b.n	80014b2 <__aeabi_ddiv+0x532>
 80010d6:	1a88      	subs	r0, r1, r2
 80010d8:	4642      	mov	r2, r8
 80010da:	0412      	lsls	r2, r2, #16
 80010dc:	431a      	orrs	r2, r3
 80010de:	4690      	mov	r8, r2
 80010e0:	4641      	mov	r1, r8
 80010e2:	9b00      	ldr	r3, [sp, #0]
 80010e4:	040e      	lsls	r6, r1, #16
 80010e6:	0c1b      	lsrs	r3, r3, #16
 80010e8:	001f      	movs	r7, r3
 80010ea:	9302      	str	r3, [sp, #8]
 80010ec:	9b00      	ldr	r3, [sp, #0]
 80010ee:	0c36      	lsrs	r6, r6, #16
 80010f0:	041b      	lsls	r3, r3, #16
 80010f2:	0c19      	lsrs	r1, r3, #16
 80010f4:	000b      	movs	r3, r1
 80010f6:	4373      	muls	r3, r6
 80010f8:	0c12      	lsrs	r2, r2, #16
 80010fa:	437e      	muls	r6, r7
 80010fc:	9103      	str	r1, [sp, #12]
 80010fe:	4351      	muls	r1, r2
 8001100:	437a      	muls	r2, r7
 8001102:	0c1f      	lsrs	r7, r3, #16
 8001104:	46bc      	mov	ip, r7
 8001106:	1876      	adds	r6, r6, r1
 8001108:	4466      	add	r6, ip
 800110a:	42b1      	cmp	r1, r6
 800110c:	d903      	bls.n	8001116 <__aeabi_ddiv+0x196>
 800110e:	2180      	movs	r1, #128	; 0x80
 8001110:	0249      	lsls	r1, r1, #9
 8001112:	468c      	mov	ip, r1
 8001114:	4462      	add	r2, ip
 8001116:	0c31      	lsrs	r1, r6, #16
 8001118:	188a      	adds	r2, r1, r2
 800111a:	0431      	lsls	r1, r6, #16
 800111c:	041e      	lsls	r6, r3, #16
 800111e:	0c36      	lsrs	r6, r6, #16
 8001120:	198e      	adds	r6, r1, r6
 8001122:	4290      	cmp	r0, r2
 8001124:	d302      	bcc.n	800112c <__aeabi_ddiv+0x1ac>
 8001126:	d112      	bne.n	800114e <__aeabi_ddiv+0x1ce>
 8001128:	42b5      	cmp	r5, r6
 800112a:	d210      	bcs.n	800114e <__aeabi_ddiv+0x1ce>
 800112c:	4643      	mov	r3, r8
 800112e:	1e59      	subs	r1, r3, #1
 8001130:	9b00      	ldr	r3, [sp, #0]
 8001132:	469c      	mov	ip, r3
 8001134:	4465      	add	r5, ip
 8001136:	001f      	movs	r7, r3
 8001138:	429d      	cmp	r5, r3
 800113a:	419b      	sbcs	r3, r3
 800113c:	425b      	negs	r3, r3
 800113e:	191b      	adds	r3, r3, r4
 8001140:	18c0      	adds	r0, r0, r3
 8001142:	4284      	cmp	r4, r0
 8001144:	d200      	bcs.n	8001148 <__aeabi_ddiv+0x1c8>
 8001146:	e1a0      	b.n	800148a <__aeabi_ddiv+0x50a>
 8001148:	d100      	bne.n	800114c <__aeabi_ddiv+0x1cc>
 800114a:	e19b      	b.n	8001484 <__aeabi_ddiv+0x504>
 800114c:	4688      	mov	r8, r1
 800114e:	1bae      	subs	r6, r5, r6
 8001150:	42b5      	cmp	r5, r6
 8001152:	41ad      	sbcs	r5, r5
 8001154:	1a80      	subs	r0, r0, r2
 8001156:	426d      	negs	r5, r5
 8001158:	1b40      	subs	r0, r0, r5
 800115a:	4284      	cmp	r4, r0
 800115c:	d100      	bne.n	8001160 <__aeabi_ddiv+0x1e0>
 800115e:	e1d5      	b.n	800150c <__aeabi_ddiv+0x58c>
 8001160:	4649      	mov	r1, r9
 8001162:	f7ff f853 	bl	800020c <__aeabi_uidivmod>
 8001166:	9a01      	ldr	r2, [sp, #4]
 8001168:	040b      	lsls	r3, r1, #16
 800116a:	4342      	muls	r2, r0
 800116c:	0c31      	lsrs	r1, r6, #16
 800116e:	0005      	movs	r5, r0
 8001170:	4319      	orrs	r1, r3
 8001172:	428a      	cmp	r2, r1
 8001174:	d900      	bls.n	8001178 <__aeabi_ddiv+0x1f8>
 8001176:	e16c      	b.n	8001452 <__aeabi_ddiv+0x4d2>
 8001178:	1a88      	subs	r0, r1, r2
 800117a:	4649      	mov	r1, r9
 800117c:	f7ff f846 	bl	800020c <__aeabi_uidivmod>
 8001180:	9a01      	ldr	r2, [sp, #4]
 8001182:	0436      	lsls	r6, r6, #16
 8001184:	4342      	muls	r2, r0
 8001186:	0409      	lsls	r1, r1, #16
 8001188:	0c36      	lsrs	r6, r6, #16
 800118a:	0003      	movs	r3, r0
 800118c:	430e      	orrs	r6, r1
 800118e:	42b2      	cmp	r2, r6
 8001190:	d900      	bls.n	8001194 <__aeabi_ddiv+0x214>
 8001192:	e153      	b.n	800143c <__aeabi_ddiv+0x4bc>
 8001194:	9803      	ldr	r0, [sp, #12]
 8001196:	1ab6      	subs	r6, r6, r2
 8001198:	0002      	movs	r2, r0
 800119a:	042d      	lsls	r5, r5, #16
 800119c:	431d      	orrs	r5, r3
 800119e:	9f02      	ldr	r7, [sp, #8]
 80011a0:	042b      	lsls	r3, r5, #16
 80011a2:	0c1b      	lsrs	r3, r3, #16
 80011a4:	435a      	muls	r2, r3
 80011a6:	437b      	muls	r3, r7
 80011a8:	469c      	mov	ip, r3
 80011aa:	0c29      	lsrs	r1, r5, #16
 80011ac:	4348      	muls	r0, r1
 80011ae:	0c13      	lsrs	r3, r2, #16
 80011b0:	4484      	add	ip, r0
 80011b2:	4463      	add	r3, ip
 80011b4:	4379      	muls	r1, r7
 80011b6:	4298      	cmp	r0, r3
 80011b8:	d903      	bls.n	80011c2 <__aeabi_ddiv+0x242>
 80011ba:	2080      	movs	r0, #128	; 0x80
 80011bc:	0240      	lsls	r0, r0, #9
 80011be:	4684      	mov	ip, r0
 80011c0:	4461      	add	r1, ip
 80011c2:	0c18      	lsrs	r0, r3, #16
 80011c4:	0412      	lsls	r2, r2, #16
 80011c6:	041b      	lsls	r3, r3, #16
 80011c8:	0c12      	lsrs	r2, r2, #16
 80011ca:	1841      	adds	r1, r0, r1
 80011cc:	189b      	adds	r3, r3, r2
 80011ce:	428e      	cmp	r6, r1
 80011d0:	d200      	bcs.n	80011d4 <__aeabi_ddiv+0x254>
 80011d2:	e0ff      	b.n	80013d4 <__aeabi_ddiv+0x454>
 80011d4:	d100      	bne.n	80011d8 <__aeabi_ddiv+0x258>
 80011d6:	e0fa      	b.n	80013ce <__aeabi_ddiv+0x44e>
 80011d8:	2301      	movs	r3, #1
 80011da:	431d      	orrs	r5, r3
 80011dc:	4a49      	ldr	r2, [pc, #292]	; (8001304 <__aeabi_ddiv+0x384>)
 80011de:	445a      	add	r2, fp
 80011e0:	2a00      	cmp	r2, #0
 80011e2:	dc00      	bgt.n	80011e6 <__aeabi_ddiv+0x266>
 80011e4:	e0aa      	b.n	800133c <__aeabi_ddiv+0x3bc>
 80011e6:	076b      	lsls	r3, r5, #29
 80011e8:	d000      	beq.n	80011ec <__aeabi_ddiv+0x26c>
 80011ea:	e13d      	b.n	8001468 <__aeabi_ddiv+0x4e8>
 80011ec:	08ed      	lsrs	r5, r5, #3
 80011ee:	4643      	mov	r3, r8
 80011f0:	01db      	lsls	r3, r3, #7
 80011f2:	d506      	bpl.n	8001202 <__aeabi_ddiv+0x282>
 80011f4:	4642      	mov	r2, r8
 80011f6:	4b44      	ldr	r3, [pc, #272]	; (8001308 <__aeabi_ddiv+0x388>)
 80011f8:	401a      	ands	r2, r3
 80011fa:	4690      	mov	r8, r2
 80011fc:	2280      	movs	r2, #128	; 0x80
 80011fe:	00d2      	lsls	r2, r2, #3
 8001200:	445a      	add	r2, fp
 8001202:	4b42      	ldr	r3, [pc, #264]	; (800130c <__aeabi_ddiv+0x38c>)
 8001204:	429a      	cmp	r2, r3
 8001206:	dd00      	ble.n	800120a <__aeabi_ddiv+0x28a>
 8001208:	e71f      	b.n	800104a <__aeabi_ddiv+0xca>
 800120a:	4643      	mov	r3, r8
 800120c:	075b      	lsls	r3, r3, #29
 800120e:	431d      	orrs	r5, r3
 8001210:	4643      	mov	r3, r8
 8001212:	0552      	lsls	r2, r2, #21
 8001214:	025c      	lsls	r4, r3, #9
 8001216:	0b24      	lsrs	r4, r4, #12
 8001218:	0d53      	lsrs	r3, r2, #21
 800121a:	e708      	b.n	800102e <__aeabi_ddiv+0xae>
 800121c:	4652      	mov	r2, sl
 800121e:	4322      	orrs	r2, r4
 8001220:	d100      	bne.n	8001224 <__aeabi_ddiv+0x2a4>
 8001222:	e07b      	b.n	800131c <__aeabi_ddiv+0x39c>
 8001224:	2c00      	cmp	r4, #0
 8001226:	d100      	bne.n	800122a <__aeabi_ddiv+0x2aa>
 8001228:	e0fa      	b.n	8001420 <__aeabi_ddiv+0x4a0>
 800122a:	0020      	movs	r0, r4
 800122c:	f000 fcc2 	bl	8001bb4 <__clzsi2>
 8001230:	0002      	movs	r2, r0
 8001232:	3a0b      	subs	r2, #11
 8001234:	231d      	movs	r3, #29
 8001236:	0001      	movs	r1, r0
 8001238:	1a9b      	subs	r3, r3, r2
 800123a:	4652      	mov	r2, sl
 800123c:	3908      	subs	r1, #8
 800123e:	40da      	lsrs	r2, r3
 8001240:	408c      	lsls	r4, r1
 8001242:	4314      	orrs	r4, r2
 8001244:	4652      	mov	r2, sl
 8001246:	408a      	lsls	r2, r1
 8001248:	4b31      	ldr	r3, [pc, #196]	; (8001310 <__aeabi_ddiv+0x390>)
 800124a:	4458      	add	r0, fp
 800124c:	469b      	mov	fp, r3
 800124e:	4483      	add	fp, r0
 8001250:	2000      	movs	r0, #0
 8001252:	e6d5      	b.n	8001000 <__aeabi_ddiv+0x80>
 8001254:	464b      	mov	r3, r9
 8001256:	4323      	orrs	r3, r4
 8001258:	4698      	mov	r8, r3
 800125a:	d044      	beq.n	80012e6 <__aeabi_ddiv+0x366>
 800125c:	2c00      	cmp	r4, #0
 800125e:	d100      	bne.n	8001262 <__aeabi_ddiv+0x2e2>
 8001260:	e0ce      	b.n	8001400 <__aeabi_ddiv+0x480>
 8001262:	0020      	movs	r0, r4
 8001264:	f000 fca6 	bl	8001bb4 <__clzsi2>
 8001268:	0001      	movs	r1, r0
 800126a:	0002      	movs	r2, r0
 800126c:	390b      	subs	r1, #11
 800126e:	231d      	movs	r3, #29
 8001270:	1a5b      	subs	r3, r3, r1
 8001272:	4649      	mov	r1, r9
 8001274:	0010      	movs	r0, r2
 8001276:	40d9      	lsrs	r1, r3
 8001278:	3808      	subs	r0, #8
 800127a:	4084      	lsls	r4, r0
 800127c:	000b      	movs	r3, r1
 800127e:	464d      	mov	r5, r9
 8001280:	4323      	orrs	r3, r4
 8001282:	4698      	mov	r8, r3
 8001284:	4085      	lsls	r5, r0
 8001286:	4823      	ldr	r0, [pc, #140]	; (8001314 <__aeabi_ddiv+0x394>)
 8001288:	1a83      	subs	r3, r0, r2
 800128a:	469b      	mov	fp, r3
 800128c:	2300      	movs	r3, #0
 800128e:	4699      	mov	r9, r3
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	e69a      	b.n	8000fca <__aeabi_ddiv+0x4a>
 8001294:	464b      	mov	r3, r9
 8001296:	4323      	orrs	r3, r4
 8001298:	4698      	mov	r8, r3
 800129a:	d11d      	bne.n	80012d8 <__aeabi_ddiv+0x358>
 800129c:	2308      	movs	r3, #8
 800129e:	4699      	mov	r9, r3
 80012a0:	3b06      	subs	r3, #6
 80012a2:	2500      	movs	r5, #0
 80012a4:	4683      	mov	fp, r0
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	e68f      	b.n	8000fca <__aeabi_ddiv+0x4a>
 80012aa:	4652      	mov	r2, sl
 80012ac:	4322      	orrs	r2, r4
 80012ae:	d109      	bne.n	80012c4 <__aeabi_ddiv+0x344>
 80012b0:	2302      	movs	r3, #2
 80012b2:	4649      	mov	r1, r9
 80012b4:	4319      	orrs	r1, r3
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <__aeabi_ddiv+0x398>)
 80012b8:	4689      	mov	r9, r1
 80012ba:	469c      	mov	ip, r3
 80012bc:	2400      	movs	r4, #0
 80012be:	2002      	movs	r0, #2
 80012c0:	44e3      	add	fp, ip
 80012c2:	e69d      	b.n	8001000 <__aeabi_ddiv+0x80>
 80012c4:	2303      	movs	r3, #3
 80012c6:	464a      	mov	r2, r9
 80012c8:	431a      	orrs	r2, r3
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <__aeabi_ddiv+0x398>)
 80012cc:	4691      	mov	r9, r2
 80012ce:	469c      	mov	ip, r3
 80012d0:	4652      	mov	r2, sl
 80012d2:	2003      	movs	r0, #3
 80012d4:	44e3      	add	fp, ip
 80012d6:	e693      	b.n	8001000 <__aeabi_ddiv+0x80>
 80012d8:	230c      	movs	r3, #12
 80012da:	4699      	mov	r9, r3
 80012dc:	3b09      	subs	r3, #9
 80012de:	46a0      	mov	r8, r4
 80012e0:	4683      	mov	fp, r0
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	e671      	b.n	8000fca <__aeabi_ddiv+0x4a>
 80012e6:	2304      	movs	r3, #4
 80012e8:	4699      	mov	r9, r3
 80012ea:	2300      	movs	r3, #0
 80012ec:	469b      	mov	fp, r3
 80012ee:	3301      	adds	r3, #1
 80012f0:	2500      	movs	r5, #0
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	e669      	b.n	8000fca <__aeabi_ddiv+0x4a>
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	000007ff 	.word	0x000007ff
 80012fc:	fffffc01 	.word	0xfffffc01
 8001300:	080062bc 	.word	0x080062bc
 8001304:	000003ff 	.word	0x000003ff
 8001308:	feffffff 	.word	0xfeffffff
 800130c:	000007fe 	.word	0x000007fe
 8001310:	000003f3 	.word	0x000003f3
 8001314:	fffffc0d 	.word	0xfffffc0d
 8001318:	fffff801 	.word	0xfffff801
 800131c:	4649      	mov	r1, r9
 800131e:	2301      	movs	r3, #1
 8001320:	4319      	orrs	r1, r3
 8001322:	4689      	mov	r9, r1
 8001324:	2400      	movs	r4, #0
 8001326:	2001      	movs	r0, #1
 8001328:	e66a      	b.n	8001000 <__aeabi_ddiv+0x80>
 800132a:	2300      	movs	r3, #0
 800132c:	2480      	movs	r4, #128	; 0x80
 800132e:	469a      	mov	sl, r3
 8001330:	2500      	movs	r5, #0
 8001332:	4b8a      	ldr	r3, [pc, #552]	; (800155c <__aeabi_ddiv+0x5dc>)
 8001334:	0324      	lsls	r4, r4, #12
 8001336:	e67a      	b.n	800102e <__aeabi_ddiv+0xae>
 8001338:	2501      	movs	r5, #1
 800133a:	426d      	negs	r5, r5
 800133c:	2301      	movs	r3, #1
 800133e:	1a9b      	subs	r3, r3, r2
 8001340:	2b38      	cmp	r3, #56	; 0x38
 8001342:	dd00      	ble.n	8001346 <__aeabi_ddiv+0x3c6>
 8001344:	e670      	b.n	8001028 <__aeabi_ddiv+0xa8>
 8001346:	2b1f      	cmp	r3, #31
 8001348:	dc00      	bgt.n	800134c <__aeabi_ddiv+0x3cc>
 800134a:	e0bf      	b.n	80014cc <__aeabi_ddiv+0x54c>
 800134c:	211f      	movs	r1, #31
 800134e:	4249      	negs	r1, r1
 8001350:	1a8a      	subs	r2, r1, r2
 8001352:	4641      	mov	r1, r8
 8001354:	40d1      	lsrs	r1, r2
 8001356:	000a      	movs	r2, r1
 8001358:	2b20      	cmp	r3, #32
 800135a:	d004      	beq.n	8001366 <__aeabi_ddiv+0x3e6>
 800135c:	4641      	mov	r1, r8
 800135e:	4b80      	ldr	r3, [pc, #512]	; (8001560 <__aeabi_ddiv+0x5e0>)
 8001360:	445b      	add	r3, fp
 8001362:	4099      	lsls	r1, r3
 8001364:	430d      	orrs	r5, r1
 8001366:	1e6b      	subs	r3, r5, #1
 8001368:	419d      	sbcs	r5, r3
 800136a:	2307      	movs	r3, #7
 800136c:	432a      	orrs	r2, r5
 800136e:	001d      	movs	r5, r3
 8001370:	2400      	movs	r4, #0
 8001372:	4015      	ands	r5, r2
 8001374:	4213      	tst	r3, r2
 8001376:	d100      	bne.n	800137a <__aeabi_ddiv+0x3fa>
 8001378:	e0d4      	b.n	8001524 <__aeabi_ddiv+0x5a4>
 800137a:	210f      	movs	r1, #15
 800137c:	2300      	movs	r3, #0
 800137e:	4011      	ands	r1, r2
 8001380:	2904      	cmp	r1, #4
 8001382:	d100      	bne.n	8001386 <__aeabi_ddiv+0x406>
 8001384:	e0cb      	b.n	800151e <__aeabi_ddiv+0x59e>
 8001386:	1d11      	adds	r1, r2, #4
 8001388:	4291      	cmp	r1, r2
 800138a:	4192      	sbcs	r2, r2
 800138c:	4252      	negs	r2, r2
 800138e:	189b      	adds	r3, r3, r2
 8001390:	000a      	movs	r2, r1
 8001392:	0219      	lsls	r1, r3, #8
 8001394:	d400      	bmi.n	8001398 <__aeabi_ddiv+0x418>
 8001396:	e0c2      	b.n	800151e <__aeabi_ddiv+0x59e>
 8001398:	2301      	movs	r3, #1
 800139a:	2400      	movs	r4, #0
 800139c:	2500      	movs	r5, #0
 800139e:	e646      	b.n	800102e <__aeabi_ddiv+0xae>
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	4641      	mov	r1, r8
 80013a4:	031b      	lsls	r3, r3, #12
 80013a6:	4219      	tst	r1, r3
 80013a8:	d008      	beq.n	80013bc <__aeabi_ddiv+0x43c>
 80013aa:	421c      	tst	r4, r3
 80013ac:	d106      	bne.n	80013bc <__aeabi_ddiv+0x43c>
 80013ae:	431c      	orrs	r4, r3
 80013b0:	0324      	lsls	r4, r4, #12
 80013b2:	46ba      	mov	sl, r7
 80013b4:	0015      	movs	r5, r2
 80013b6:	4b69      	ldr	r3, [pc, #420]	; (800155c <__aeabi_ddiv+0x5dc>)
 80013b8:	0b24      	lsrs	r4, r4, #12
 80013ba:	e638      	b.n	800102e <__aeabi_ddiv+0xae>
 80013bc:	2480      	movs	r4, #128	; 0x80
 80013be:	4643      	mov	r3, r8
 80013c0:	0324      	lsls	r4, r4, #12
 80013c2:	431c      	orrs	r4, r3
 80013c4:	0324      	lsls	r4, r4, #12
 80013c6:	46b2      	mov	sl, r6
 80013c8:	4b64      	ldr	r3, [pc, #400]	; (800155c <__aeabi_ddiv+0x5dc>)
 80013ca:	0b24      	lsrs	r4, r4, #12
 80013cc:	e62f      	b.n	800102e <__aeabi_ddiv+0xae>
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d100      	bne.n	80013d4 <__aeabi_ddiv+0x454>
 80013d2:	e703      	b.n	80011dc <__aeabi_ddiv+0x25c>
 80013d4:	19a6      	adds	r6, r4, r6
 80013d6:	1e68      	subs	r0, r5, #1
 80013d8:	42a6      	cmp	r6, r4
 80013da:	d200      	bcs.n	80013de <__aeabi_ddiv+0x45e>
 80013dc:	e08d      	b.n	80014fa <__aeabi_ddiv+0x57a>
 80013de:	428e      	cmp	r6, r1
 80013e0:	d200      	bcs.n	80013e4 <__aeabi_ddiv+0x464>
 80013e2:	e0a3      	b.n	800152c <__aeabi_ddiv+0x5ac>
 80013e4:	d100      	bne.n	80013e8 <__aeabi_ddiv+0x468>
 80013e6:	e0b3      	b.n	8001550 <__aeabi_ddiv+0x5d0>
 80013e8:	0005      	movs	r5, r0
 80013ea:	e6f5      	b.n	80011d8 <__aeabi_ddiv+0x258>
 80013ec:	42aa      	cmp	r2, r5
 80013ee:	d900      	bls.n	80013f2 <__aeabi_ddiv+0x472>
 80013f0:	e639      	b.n	8001066 <__aeabi_ddiv+0xe6>
 80013f2:	4643      	mov	r3, r8
 80013f4:	07de      	lsls	r6, r3, #31
 80013f6:	0858      	lsrs	r0, r3, #1
 80013f8:	086b      	lsrs	r3, r5, #1
 80013fa:	431e      	orrs	r6, r3
 80013fc:	07ed      	lsls	r5, r5, #31
 80013fe:	e639      	b.n	8001074 <__aeabi_ddiv+0xf4>
 8001400:	4648      	mov	r0, r9
 8001402:	f000 fbd7 	bl	8001bb4 <__clzsi2>
 8001406:	0001      	movs	r1, r0
 8001408:	0002      	movs	r2, r0
 800140a:	3115      	adds	r1, #21
 800140c:	3220      	adds	r2, #32
 800140e:	291c      	cmp	r1, #28
 8001410:	dc00      	bgt.n	8001414 <__aeabi_ddiv+0x494>
 8001412:	e72c      	b.n	800126e <__aeabi_ddiv+0x2ee>
 8001414:	464b      	mov	r3, r9
 8001416:	3808      	subs	r0, #8
 8001418:	4083      	lsls	r3, r0
 800141a:	2500      	movs	r5, #0
 800141c:	4698      	mov	r8, r3
 800141e:	e732      	b.n	8001286 <__aeabi_ddiv+0x306>
 8001420:	f000 fbc8 	bl	8001bb4 <__clzsi2>
 8001424:	0003      	movs	r3, r0
 8001426:	001a      	movs	r2, r3
 8001428:	3215      	adds	r2, #21
 800142a:	3020      	adds	r0, #32
 800142c:	2a1c      	cmp	r2, #28
 800142e:	dc00      	bgt.n	8001432 <__aeabi_ddiv+0x4b2>
 8001430:	e700      	b.n	8001234 <__aeabi_ddiv+0x2b4>
 8001432:	4654      	mov	r4, sl
 8001434:	3b08      	subs	r3, #8
 8001436:	2200      	movs	r2, #0
 8001438:	409c      	lsls	r4, r3
 800143a:	e705      	b.n	8001248 <__aeabi_ddiv+0x2c8>
 800143c:	1936      	adds	r6, r6, r4
 800143e:	3b01      	subs	r3, #1
 8001440:	42b4      	cmp	r4, r6
 8001442:	d900      	bls.n	8001446 <__aeabi_ddiv+0x4c6>
 8001444:	e6a6      	b.n	8001194 <__aeabi_ddiv+0x214>
 8001446:	42b2      	cmp	r2, r6
 8001448:	d800      	bhi.n	800144c <__aeabi_ddiv+0x4cc>
 800144a:	e6a3      	b.n	8001194 <__aeabi_ddiv+0x214>
 800144c:	1e83      	subs	r3, r0, #2
 800144e:	1936      	adds	r6, r6, r4
 8001450:	e6a0      	b.n	8001194 <__aeabi_ddiv+0x214>
 8001452:	1909      	adds	r1, r1, r4
 8001454:	3d01      	subs	r5, #1
 8001456:	428c      	cmp	r4, r1
 8001458:	d900      	bls.n	800145c <__aeabi_ddiv+0x4dc>
 800145a:	e68d      	b.n	8001178 <__aeabi_ddiv+0x1f8>
 800145c:	428a      	cmp	r2, r1
 800145e:	d800      	bhi.n	8001462 <__aeabi_ddiv+0x4e2>
 8001460:	e68a      	b.n	8001178 <__aeabi_ddiv+0x1f8>
 8001462:	1e85      	subs	r5, r0, #2
 8001464:	1909      	adds	r1, r1, r4
 8001466:	e687      	b.n	8001178 <__aeabi_ddiv+0x1f8>
 8001468:	230f      	movs	r3, #15
 800146a:	402b      	ands	r3, r5
 800146c:	2b04      	cmp	r3, #4
 800146e:	d100      	bne.n	8001472 <__aeabi_ddiv+0x4f2>
 8001470:	e6bc      	b.n	80011ec <__aeabi_ddiv+0x26c>
 8001472:	2305      	movs	r3, #5
 8001474:	425b      	negs	r3, r3
 8001476:	42ab      	cmp	r3, r5
 8001478:	419b      	sbcs	r3, r3
 800147a:	3504      	adds	r5, #4
 800147c:	425b      	negs	r3, r3
 800147e:	08ed      	lsrs	r5, r5, #3
 8001480:	4498      	add	r8, r3
 8001482:	e6b4      	b.n	80011ee <__aeabi_ddiv+0x26e>
 8001484:	42af      	cmp	r7, r5
 8001486:	d900      	bls.n	800148a <__aeabi_ddiv+0x50a>
 8001488:	e660      	b.n	800114c <__aeabi_ddiv+0x1cc>
 800148a:	4282      	cmp	r2, r0
 800148c:	d804      	bhi.n	8001498 <__aeabi_ddiv+0x518>
 800148e:	d000      	beq.n	8001492 <__aeabi_ddiv+0x512>
 8001490:	e65c      	b.n	800114c <__aeabi_ddiv+0x1cc>
 8001492:	42ae      	cmp	r6, r5
 8001494:	d800      	bhi.n	8001498 <__aeabi_ddiv+0x518>
 8001496:	e659      	b.n	800114c <__aeabi_ddiv+0x1cc>
 8001498:	2302      	movs	r3, #2
 800149a:	425b      	negs	r3, r3
 800149c:	469c      	mov	ip, r3
 800149e:	9b00      	ldr	r3, [sp, #0]
 80014a0:	44e0      	add	r8, ip
 80014a2:	469c      	mov	ip, r3
 80014a4:	4465      	add	r5, ip
 80014a6:	429d      	cmp	r5, r3
 80014a8:	419b      	sbcs	r3, r3
 80014aa:	425b      	negs	r3, r3
 80014ac:	191b      	adds	r3, r3, r4
 80014ae:	18c0      	adds	r0, r0, r3
 80014b0:	e64d      	b.n	800114e <__aeabi_ddiv+0x1ce>
 80014b2:	428a      	cmp	r2, r1
 80014b4:	d800      	bhi.n	80014b8 <__aeabi_ddiv+0x538>
 80014b6:	e60e      	b.n	80010d6 <__aeabi_ddiv+0x156>
 80014b8:	1e83      	subs	r3, r0, #2
 80014ba:	1909      	adds	r1, r1, r4
 80014bc:	e60b      	b.n	80010d6 <__aeabi_ddiv+0x156>
 80014be:	428a      	cmp	r2, r1
 80014c0:	d800      	bhi.n	80014c4 <__aeabi_ddiv+0x544>
 80014c2:	e5f4      	b.n	80010ae <__aeabi_ddiv+0x12e>
 80014c4:	1e83      	subs	r3, r0, #2
 80014c6:	4698      	mov	r8, r3
 80014c8:	1909      	adds	r1, r1, r4
 80014ca:	e5f0      	b.n	80010ae <__aeabi_ddiv+0x12e>
 80014cc:	4925      	ldr	r1, [pc, #148]	; (8001564 <__aeabi_ddiv+0x5e4>)
 80014ce:	0028      	movs	r0, r5
 80014d0:	4459      	add	r1, fp
 80014d2:	408d      	lsls	r5, r1
 80014d4:	4642      	mov	r2, r8
 80014d6:	408a      	lsls	r2, r1
 80014d8:	1e69      	subs	r1, r5, #1
 80014da:	418d      	sbcs	r5, r1
 80014dc:	4641      	mov	r1, r8
 80014de:	40d8      	lsrs	r0, r3
 80014e0:	40d9      	lsrs	r1, r3
 80014e2:	4302      	orrs	r2, r0
 80014e4:	432a      	orrs	r2, r5
 80014e6:	000b      	movs	r3, r1
 80014e8:	0751      	lsls	r1, r2, #29
 80014ea:	d100      	bne.n	80014ee <__aeabi_ddiv+0x56e>
 80014ec:	e751      	b.n	8001392 <__aeabi_ddiv+0x412>
 80014ee:	210f      	movs	r1, #15
 80014f0:	4011      	ands	r1, r2
 80014f2:	2904      	cmp	r1, #4
 80014f4:	d000      	beq.n	80014f8 <__aeabi_ddiv+0x578>
 80014f6:	e746      	b.n	8001386 <__aeabi_ddiv+0x406>
 80014f8:	e74b      	b.n	8001392 <__aeabi_ddiv+0x412>
 80014fa:	0005      	movs	r5, r0
 80014fc:	428e      	cmp	r6, r1
 80014fe:	d000      	beq.n	8001502 <__aeabi_ddiv+0x582>
 8001500:	e66a      	b.n	80011d8 <__aeabi_ddiv+0x258>
 8001502:	9a00      	ldr	r2, [sp, #0]
 8001504:	4293      	cmp	r3, r2
 8001506:	d000      	beq.n	800150a <__aeabi_ddiv+0x58a>
 8001508:	e666      	b.n	80011d8 <__aeabi_ddiv+0x258>
 800150a:	e667      	b.n	80011dc <__aeabi_ddiv+0x25c>
 800150c:	4a16      	ldr	r2, [pc, #88]	; (8001568 <__aeabi_ddiv+0x5e8>)
 800150e:	445a      	add	r2, fp
 8001510:	2a00      	cmp	r2, #0
 8001512:	dc00      	bgt.n	8001516 <__aeabi_ddiv+0x596>
 8001514:	e710      	b.n	8001338 <__aeabi_ddiv+0x3b8>
 8001516:	2301      	movs	r3, #1
 8001518:	2500      	movs	r5, #0
 800151a:	4498      	add	r8, r3
 800151c:	e667      	b.n	80011ee <__aeabi_ddiv+0x26e>
 800151e:	075d      	lsls	r5, r3, #29
 8001520:	025b      	lsls	r3, r3, #9
 8001522:	0b1c      	lsrs	r4, r3, #12
 8001524:	08d2      	lsrs	r2, r2, #3
 8001526:	2300      	movs	r3, #0
 8001528:	4315      	orrs	r5, r2
 800152a:	e580      	b.n	800102e <__aeabi_ddiv+0xae>
 800152c:	9800      	ldr	r0, [sp, #0]
 800152e:	3d02      	subs	r5, #2
 8001530:	0042      	lsls	r2, r0, #1
 8001532:	4282      	cmp	r2, r0
 8001534:	41bf      	sbcs	r7, r7
 8001536:	427f      	negs	r7, r7
 8001538:	193c      	adds	r4, r7, r4
 800153a:	1936      	adds	r6, r6, r4
 800153c:	9200      	str	r2, [sp, #0]
 800153e:	e7dd      	b.n	80014fc <__aeabi_ddiv+0x57c>
 8001540:	2480      	movs	r4, #128	; 0x80
 8001542:	4643      	mov	r3, r8
 8001544:	0324      	lsls	r4, r4, #12
 8001546:	431c      	orrs	r4, r3
 8001548:	0324      	lsls	r4, r4, #12
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <__aeabi_ddiv+0x5dc>)
 800154c:	0b24      	lsrs	r4, r4, #12
 800154e:	e56e      	b.n	800102e <__aeabi_ddiv+0xae>
 8001550:	9a00      	ldr	r2, [sp, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d3ea      	bcc.n	800152c <__aeabi_ddiv+0x5ac>
 8001556:	0005      	movs	r5, r0
 8001558:	e7d3      	b.n	8001502 <__aeabi_ddiv+0x582>
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	000007ff 	.word	0x000007ff
 8001560:	0000043e 	.word	0x0000043e
 8001564:	0000041e 	.word	0x0000041e
 8001568:	000003ff 	.word	0x000003ff

0800156c <__aeabi_dmul>:
 800156c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156e:	4657      	mov	r7, sl
 8001570:	464e      	mov	r6, r9
 8001572:	4645      	mov	r5, r8
 8001574:	46de      	mov	lr, fp
 8001576:	b5e0      	push	{r5, r6, r7, lr}
 8001578:	4698      	mov	r8, r3
 800157a:	030c      	lsls	r4, r1, #12
 800157c:	004b      	lsls	r3, r1, #1
 800157e:	0006      	movs	r6, r0
 8001580:	4692      	mov	sl, r2
 8001582:	b087      	sub	sp, #28
 8001584:	0b24      	lsrs	r4, r4, #12
 8001586:	0d5b      	lsrs	r3, r3, #21
 8001588:	0fcf      	lsrs	r7, r1, #31
 800158a:	2b00      	cmp	r3, #0
 800158c:	d100      	bne.n	8001590 <__aeabi_dmul+0x24>
 800158e:	e15c      	b.n	800184a <__aeabi_dmul+0x2de>
 8001590:	4ad9      	ldr	r2, [pc, #868]	; (80018f8 <__aeabi_dmul+0x38c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d100      	bne.n	8001598 <__aeabi_dmul+0x2c>
 8001596:	e175      	b.n	8001884 <__aeabi_dmul+0x318>
 8001598:	0f42      	lsrs	r2, r0, #29
 800159a:	00e4      	lsls	r4, r4, #3
 800159c:	4314      	orrs	r4, r2
 800159e:	2280      	movs	r2, #128	; 0x80
 80015a0:	0412      	lsls	r2, r2, #16
 80015a2:	4314      	orrs	r4, r2
 80015a4:	4ad5      	ldr	r2, [pc, #852]	; (80018fc <__aeabi_dmul+0x390>)
 80015a6:	00c5      	lsls	r5, r0, #3
 80015a8:	4694      	mov	ip, r2
 80015aa:	4463      	add	r3, ip
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	2300      	movs	r3, #0
 80015b0:	4699      	mov	r9, r3
 80015b2:	469b      	mov	fp, r3
 80015b4:	4643      	mov	r3, r8
 80015b6:	4642      	mov	r2, r8
 80015b8:	031e      	lsls	r6, r3, #12
 80015ba:	0fd2      	lsrs	r2, r2, #31
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4650      	mov	r0, sl
 80015c0:	4690      	mov	r8, r2
 80015c2:	0b36      	lsrs	r6, r6, #12
 80015c4:	0d5b      	lsrs	r3, r3, #21
 80015c6:	d100      	bne.n	80015ca <__aeabi_dmul+0x5e>
 80015c8:	e120      	b.n	800180c <__aeabi_dmul+0x2a0>
 80015ca:	4acb      	ldr	r2, [pc, #812]	; (80018f8 <__aeabi_dmul+0x38c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0x66>
 80015d0:	e162      	b.n	8001898 <__aeabi_dmul+0x32c>
 80015d2:	49ca      	ldr	r1, [pc, #808]	; (80018fc <__aeabi_dmul+0x390>)
 80015d4:	0f42      	lsrs	r2, r0, #29
 80015d6:	468c      	mov	ip, r1
 80015d8:	9900      	ldr	r1, [sp, #0]
 80015da:	4463      	add	r3, ip
 80015dc:	00f6      	lsls	r6, r6, #3
 80015de:	468c      	mov	ip, r1
 80015e0:	4316      	orrs	r6, r2
 80015e2:	2280      	movs	r2, #128	; 0x80
 80015e4:	449c      	add	ip, r3
 80015e6:	0412      	lsls	r2, r2, #16
 80015e8:	4663      	mov	r3, ip
 80015ea:	4316      	orrs	r6, r2
 80015ec:	00c2      	lsls	r2, r0, #3
 80015ee:	2000      	movs	r0, #0
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	9900      	ldr	r1, [sp, #0]
 80015f4:	4643      	mov	r3, r8
 80015f6:	3101      	adds	r1, #1
 80015f8:	468c      	mov	ip, r1
 80015fa:	4649      	mov	r1, r9
 80015fc:	407b      	eors	r3, r7
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	290f      	cmp	r1, #15
 8001602:	d826      	bhi.n	8001652 <__aeabi_dmul+0xe6>
 8001604:	4bbe      	ldr	r3, [pc, #760]	; (8001900 <__aeabi_dmul+0x394>)
 8001606:	0089      	lsls	r1, r1, #2
 8001608:	5859      	ldr	r1, [r3, r1]
 800160a:	468f      	mov	pc, r1
 800160c:	4643      	mov	r3, r8
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	0034      	movs	r4, r6
 8001612:	0015      	movs	r5, r2
 8001614:	4683      	mov	fp, r0
 8001616:	465b      	mov	r3, fp
 8001618:	2b02      	cmp	r3, #2
 800161a:	d016      	beq.n	800164a <__aeabi_dmul+0xde>
 800161c:	2b03      	cmp	r3, #3
 800161e:	d100      	bne.n	8001622 <__aeabi_dmul+0xb6>
 8001620:	e203      	b.n	8001a2a <__aeabi_dmul+0x4be>
 8001622:	2b01      	cmp	r3, #1
 8001624:	d000      	beq.n	8001628 <__aeabi_dmul+0xbc>
 8001626:	e0cd      	b.n	80017c4 <__aeabi_dmul+0x258>
 8001628:	2200      	movs	r2, #0
 800162a:	2400      	movs	r4, #0
 800162c:	2500      	movs	r5, #0
 800162e:	9b01      	ldr	r3, [sp, #4]
 8001630:	0512      	lsls	r2, r2, #20
 8001632:	4322      	orrs	r2, r4
 8001634:	07db      	lsls	r3, r3, #31
 8001636:	431a      	orrs	r2, r3
 8001638:	0028      	movs	r0, r5
 800163a:	0011      	movs	r1, r2
 800163c:	b007      	add	sp, #28
 800163e:	bcf0      	pop	{r4, r5, r6, r7}
 8001640:	46bb      	mov	fp, r7
 8001642:	46b2      	mov	sl, r6
 8001644:	46a9      	mov	r9, r5
 8001646:	46a0      	mov	r8, r4
 8001648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800164a:	2400      	movs	r4, #0
 800164c:	2500      	movs	r5, #0
 800164e:	4aaa      	ldr	r2, [pc, #680]	; (80018f8 <__aeabi_dmul+0x38c>)
 8001650:	e7ed      	b.n	800162e <__aeabi_dmul+0xc2>
 8001652:	0c28      	lsrs	r0, r5, #16
 8001654:	042d      	lsls	r5, r5, #16
 8001656:	0c2d      	lsrs	r5, r5, #16
 8001658:	002b      	movs	r3, r5
 800165a:	0c11      	lsrs	r1, r2, #16
 800165c:	0412      	lsls	r2, r2, #16
 800165e:	0c12      	lsrs	r2, r2, #16
 8001660:	4353      	muls	r3, r2
 8001662:	4698      	mov	r8, r3
 8001664:	0013      	movs	r3, r2
 8001666:	002f      	movs	r7, r5
 8001668:	4343      	muls	r3, r0
 800166a:	4699      	mov	r9, r3
 800166c:	434f      	muls	r7, r1
 800166e:	444f      	add	r7, r9
 8001670:	46bb      	mov	fp, r7
 8001672:	4647      	mov	r7, r8
 8001674:	000b      	movs	r3, r1
 8001676:	0c3f      	lsrs	r7, r7, #16
 8001678:	46ba      	mov	sl, r7
 800167a:	4343      	muls	r3, r0
 800167c:	44da      	add	sl, fp
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	45d1      	cmp	r9, sl
 8001682:	d904      	bls.n	800168e <__aeabi_dmul+0x122>
 8001684:	2780      	movs	r7, #128	; 0x80
 8001686:	027f      	lsls	r7, r7, #9
 8001688:	46b9      	mov	r9, r7
 800168a:	444b      	add	r3, r9
 800168c:	9302      	str	r3, [sp, #8]
 800168e:	4653      	mov	r3, sl
 8001690:	0c1b      	lsrs	r3, r3, #16
 8001692:	469b      	mov	fp, r3
 8001694:	4653      	mov	r3, sl
 8001696:	041f      	lsls	r7, r3, #16
 8001698:	4643      	mov	r3, r8
 800169a:	041b      	lsls	r3, r3, #16
 800169c:	0c1b      	lsrs	r3, r3, #16
 800169e:	4698      	mov	r8, r3
 80016a0:	003b      	movs	r3, r7
 80016a2:	4443      	add	r3, r8
 80016a4:	9304      	str	r3, [sp, #16]
 80016a6:	0c33      	lsrs	r3, r6, #16
 80016a8:	0436      	lsls	r6, r6, #16
 80016aa:	0c36      	lsrs	r6, r6, #16
 80016ac:	4698      	mov	r8, r3
 80016ae:	0033      	movs	r3, r6
 80016b0:	4343      	muls	r3, r0
 80016b2:	4699      	mov	r9, r3
 80016b4:	4643      	mov	r3, r8
 80016b6:	4343      	muls	r3, r0
 80016b8:	002f      	movs	r7, r5
 80016ba:	469a      	mov	sl, r3
 80016bc:	4643      	mov	r3, r8
 80016be:	4377      	muls	r7, r6
 80016c0:	435d      	muls	r5, r3
 80016c2:	0c38      	lsrs	r0, r7, #16
 80016c4:	444d      	add	r5, r9
 80016c6:	1945      	adds	r5, r0, r5
 80016c8:	45a9      	cmp	r9, r5
 80016ca:	d903      	bls.n	80016d4 <__aeabi_dmul+0x168>
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	025b      	lsls	r3, r3, #9
 80016d0:	4699      	mov	r9, r3
 80016d2:	44ca      	add	sl, r9
 80016d4:	043f      	lsls	r7, r7, #16
 80016d6:	0c28      	lsrs	r0, r5, #16
 80016d8:	0c3f      	lsrs	r7, r7, #16
 80016da:	042d      	lsls	r5, r5, #16
 80016dc:	19ed      	adds	r5, r5, r7
 80016de:	0c27      	lsrs	r7, r4, #16
 80016e0:	0424      	lsls	r4, r4, #16
 80016e2:	0c24      	lsrs	r4, r4, #16
 80016e4:	0003      	movs	r3, r0
 80016e6:	0020      	movs	r0, r4
 80016e8:	4350      	muls	r0, r2
 80016ea:	437a      	muls	r2, r7
 80016ec:	4691      	mov	r9, r2
 80016ee:	003a      	movs	r2, r7
 80016f0:	4453      	add	r3, sl
 80016f2:	9305      	str	r3, [sp, #20]
 80016f4:	0c03      	lsrs	r3, r0, #16
 80016f6:	469a      	mov	sl, r3
 80016f8:	434a      	muls	r2, r1
 80016fa:	4361      	muls	r1, r4
 80016fc:	4449      	add	r1, r9
 80016fe:	4451      	add	r1, sl
 8001700:	44ab      	add	fp, r5
 8001702:	4589      	cmp	r9, r1
 8001704:	d903      	bls.n	800170e <__aeabi_dmul+0x1a2>
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	025b      	lsls	r3, r3, #9
 800170a:	4699      	mov	r9, r3
 800170c:	444a      	add	r2, r9
 800170e:	0400      	lsls	r0, r0, #16
 8001710:	0c0b      	lsrs	r3, r1, #16
 8001712:	0c00      	lsrs	r0, r0, #16
 8001714:	0409      	lsls	r1, r1, #16
 8001716:	1809      	adds	r1, r1, r0
 8001718:	0020      	movs	r0, r4
 800171a:	4699      	mov	r9, r3
 800171c:	4643      	mov	r3, r8
 800171e:	4370      	muls	r0, r6
 8001720:	435c      	muls	r4, r3
 8001722:	437e      	muls	r6, r7
 8001724:	435f      	muls	r7, r3
 8001726:	0c03      	lsrs	r3, r0, #16
 8001728:	4698      	mov	r8, r3
 800172a:	19a4      	adds	r4, r4, r6
 800172c:	4444      	add	r4, r8
 800172e:	444a      	add	r2, r9
 8001730:	9703      	str	r7, [sp, #12]
 8001732:	42a6      	cmp	r6, r4
 8001734:	d904      	bls.n	8001740 <__aeabi_dmul+0x1d4>
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	025b      	lsls	r3, r3, #9
 800173a:	4698      	mov	r8, r3
 800173c:	4447      	add	r7, r8
 800173e:	9703      	str	r7, [sp, #12]
 8001740:	0423      	lsls	r3, r4, #16
 8001742:	9e02      	ldr	r6, [sp, #8]
 8001744:	469a      	mov	sl, r3
 8001746:	9b05      	ldr	r3, [sp, #20]
 8001748:	445e      	add	r6, fp
 800174a:	4698      	mov	r8, r3
 800174c:	42ae      	cmp	r6, r5
 800174e:	41ad      	sbcs	r5, r5
 8001750:	1876      	adds	r6, r6, r1
 8001752:	428e      	cmp	r6, r1
 8001754:	4189      	sbcs	r1, r1
 8001756:	0400      	lsls	r0, r0, #16
 8001758:	0c00      	lsrs	r0, r0, #16
 800175a:	4450      	add	r0, sl
 800175c:	4440      	add	r0, r8
 800175e:	426d      	negs	r5, r5
 8001760:	1947      	adds	r7, r0, r5
 8001762:	46b8      	mov	r8, r7
 8001764:	4693      	mov	fp, r2
 8001766:	4249      	negs	r1, r1
 8001768:	4689      	mov	r9, r1
 800176a:	44c3      	add	fp, r8
 800176c:	44d9      	add	r9, fp
 800176e:	4298      	cmp	r0, r3
 8001770:	4180      	sbcs	r0, r0
 8001772:	45a8      	cmp	r8, r5
 8001774:	41ad      	sbcs	r5, r5
 8001776:	4593      	cmp	fp, r2
 8001778:	4192      	sbcs	r2, r2
 800177a:	4589      	cmp	r9, r1
 800177c:	4189      	sbcs	r1, r1
 800177e:	426d      	negs	r5, r5
 8001780:	4240      	negs	r0, r0
 8001782:	4328      	orrs	r0, r5
 8001784:	0c24      	lsrs	r4, r4, #16
 8001786:	4252      	negs	r2, r2
 8001788:	4249      	negs	r1, r1
 800178a:	430a      	orrs	r2, r1
 800178c:	9b03      	ldr	r3, [sp, #12]
 800178e:	1900      	adds	r0, r0, r4
 8001790:	1880      	adds	r0, r0, r2
 8001792:	18c7      	adds	r7, r0, r3
 8001794:	464b      	mov	r3, r9
 8001796:	0ddc      	lsrs	r4, r3, #23
 8001798:	9b04      	ldr	r3, [sp, #16]
 800179a:	0275      	lsls	r5, r6, #9
 800179c:	431d      	orrs	r5, r3
 800179e:	1e6a      	subs	r2, r5, #1
 80017a0:	4195      	sbcs	r5, r2
 80017a2:	464b      	mov	r3, r9
 80017a4:	0df6      	lsrs	r6, r6, #23
 80017a6:	027f      	lsls	r7, r7, #9
 80017a8:	4335      	orrs	r5, r6
 80017aa:	025a      	lsls	r2, r3, #9
 80017ac:	433c      	orrs	r4, r7
 80017ae:	4315      	orrs	r5, r2
 80017b0:	01fb      	lsls	r3, r7, #7
 80017b2:	d400      	bmi.n	80017b6 <__aeabi_dmul+0x24a>
 80017b4:	e11c      	b.n	80019f0 <__aeabi_dmul+0x484>
 80017b6:	2101      	movs	r1, #1
 80017b8:	086a      	lsrs	r2, r5, #1
 80017ba:	400d      	ands	r5, r1
 80017bc:	4315      	orrs	r5, r2
 80017be:	07e2      	lsls	r2, r4, #31
 80017c0:	4315      	orrs	r5, r2
 80017c2:	0864      	lsrs	r4, r4, #1
 80017c4:	494f      	ldr	r1, [pc, #316]	; (8001904 <__aeabi_dmul+0x398>)
 80017c6:	4461      	add	r1, ip
 80017c8:	2900      	cmp	r1, #0
 80017ca:	dc00      	bgt.n	80017ce <__aeabi_dmul+0x262>
 80017cc:	e0b0      	b.n	8001930 <__aeabi_dmul+0x3c4>
 80017ce:	076b      	lsls	r3, r5, #29
 80017d0:	d009      	beq.n	80017e6 <__aeabi_dmul+0x27a>
 80017d2:	220f      	movs	r2, #15
 80017d4:	402a      	ands	r2, r5
 80017d6:	2a04      	cmp	r2, #4
 80017d8:	d005      	beq.n	80017e6 <__aeabi_dmul+0x27a>
 80017da:	1d2a      	adds	r2, r5, #4
 80017dc:	42aa      	cmp	r2, r5
 80017de:	41ad      	sbcs	r5, r5
 80017e0:	426d      	negs	r5, r5
 80017e2:	1964      	adds	r4, r4, r5
 80017e4:	0015      	movs	r5, r2
 80017e6:	01e3      	lsls	r3, r4, #7
 80017e8:	d504      	bpl.n	80017f4 <__aeabi_dmul+0x288>
 80017ea:	2180      	movs	r1, #128	; 0x80
 80017ec:	4a46      	ldr	r2, [pc, #280]	; (8001908 <__aeabi_dmul+0x39c>)
 80017ee:	00c9      	lsls	r1, r1, #3
 80017f0:	4014      	ands	r4, r2
 80017f2:	4461      	add	r1, ip
 80017f4:	4a45      	ldr	r2, [pc, #276]	; (800190c <__aeabi_dmul+0x3a0>)
 80017f6:	4291      	cmp	r1, r2
 80017f8:	dd00      	ble.n	80017fc <__aeabi_dmul+0x290>
 80017fa:	e726      	b.n	800164a <__aeabi_dmul+0xde>
 80017fc:	0762      	lsls	r2, r4, #29
 80017fe:	08ed      	lsrs	r5, r5, #3
 8001800:	0264      	lsls	r4, r4, #9
 8001802:	0549      	lsls	r1, r1, #21
 8001804:	4315      	orrs	r5, r2
 8001806:	0b24      	lsrs	r4, r4, #12
 8001808:	0d4a      	lsrs	r2, r1, #21
 800180a:	e710      	b.n	800162e <__aeabi_dmul+0xc2>
 800180c:	4652      	mov	r2, sl
 800180e:	4332      	orrs	r2, r6
 8001810:	d100      	bne.n	8001814 <__aeabi_dmul+0x2a8>
 8001812:	e07f      	b.n	8001914 <__aeabi_dmul+0x3a8>
 8001814:	2e00      	cmp	r6, #0
 8001816:	d100      	bne.n	800181a <__aeabi_dmul+0x2ae>
 8001818:	e0dc      	b.n	80019d4 <__aeabi_dmul+0x468>
 800181a:	0030      	movs	r0, r6
 800181c:	f000 f9ca 	bl	8001bb4 <__clzsi2>
 8001820:	0002      	movs	r2, r0
 8001822:	3a0b      	subs	r2, #11
 8001824:	231d      	movs	r3, #29
 8001826:	0001      	movs	r1, r0
 8001828:	1a9b      	subs	r3, r3, r2
 800182a:	4652      	mov	r2, sl
 800182c:	3908      	subs	r1, #8
 800182e:	40da      	lsrs	r2, r3
 8001830:	408e      	lsls	r6, r1
 8001832:	4316      	orrs	r6, r2
 8001834:	4652      	mov	r2, sl
 8001836:	408a      	lsls	r2, r1
 8001838:	9b00      	ldr	r3, [sp, #0]
 800183a:	4935      	ldr	r1, [pc, #212]	; (8001910 <__aeabi_dmul+0x3a4>)
 800183c:	1a18      	subs	r0, r3, r0
 800183e:	0003      	movs	r3, r0
 8001840:	468c      	mov	ip, r1
 8001842:	4463      	add	r3, ip
 8001844:	2000      	movs	r0, #0
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	e6d3      	b.n	80015f2 <__aeabi_dmul+0x86>
 800184a:	0025      	movs	r5, r4
 800184c:	4305      	orrs	r5, r0
 800184e:	d04a      	beq.n	80018e6 <__aeabi_dmul+0x37a>
 8001850:	2c00      	cmp	r4, #0
 8001852:	d100      	bne.n	8001856 <__aeabi_dmul+0x2ea>
 8001854:	e0b0      	b.n	80019b8 <__aeabi_dmul+0x44c>
 8001856:	0020      	movs	r0, r4
 8001858:	f000 f9ac 	bl	8001bb4 <__clzsi2>
 800185c:	0001      	movs	r1, r0
 800185e:	0002      	movs	r2, r0
 8001860:	390b      	subs	r1, #11
 8001862:	231d      	movs	r3, #29
 8001864:	0010      	movs	r0, r2
 8001866:	1a5b      	subs	r3, r3, r1
 8001868:	0031      	movs	r1, r6
 800186a:	0035      	movs	r5, r6
 800186c:	3808      	subs	r0, #8
 800186e:	4084      	lsls	r4, r0
 8001870:	40d9      	lsrs	r1, r3
 8001872:	4085      	lsls	r5, r0
 8001874:	430c      	orrs	r4, r1
 8001876:	4826      	ldr	r0, [pc, #152]	; (8001910 <__aeabi_dmul+0x3a4>)
 8001878:	1a83      	subs	r3, r0, r2
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	2300      	movs	r3, #0
 800187e:	4699      	mov	r9, r3
 8001880:	469b      	mov	fp, r3
 8001882:	e697      	b.n	80015b4 <__aeabi_dmul+0x48>
 8001884:	0005      	movs	r5, r0
 8001886:	4325      	orrs	r5, r4
 8001888:	d126      	bne.n	80018d8 <__aeabi_dmul+0x36c>
 800188a:	2208      	movs	r2, #8
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2302      	movs	r3, #2
 8001890:	2400      	movs	r4, #0
 8001892:	4691      	mov	r9, r2
 8001894:	469b      	mov	fp, r3
 8001896:	e68d      	b.n	80015b4 <__aeabi_dmul+0x48>
 8001898:	4652      	mov	r2, sl
 800189a:	9b00      	ldr	r3, [sp, #0]
 800189c:	4332      	orrs	r2, r6
 800189e:	d110      	bne.n	80018c2 <__aeabi_dmul+0x356>
 80018a0:	4915      	ldr	r1, [pc, #84]	; (80018f8 <__aeabi_dmul+0x38c>)
 80018a2:	2600      	movs	r6, #0
 80018a4:	468c      	mov	ip, r1
 80018a6:	4463      	add	r3, ip
 80018a8:	4649      	mov	r1, r9
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2302      	movs	r3, #2
 80018ae:	4319      	orrs	r1, r3
 80018b0:	4689      	mov	r9, r1
 80018b2:	2002      	movs	r0, #2
 80018b4:	e69d      	b.n	80015f2 <__aeabi_dmul+0x86>
 80018b6:	465b      	mov	r3, fp
 80018b8:	9701      	str	r7, [sp, #4]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d000      	beq.n	80018c0 <__aeabi_dmul+0x354>
 80018be:	e6ad      	b.n	800161c <__aeabi_dmul+0xb0>
 80018c0:	e6c3      	b.n	800164a <__aeabi_dmul+0xde>
 80018c2:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <__aeabi_dmul+0x38c>)
 80018c4:	2003      	movs	r0, #3
 80018c6:	4694      	mov	ip, r2
 80018c8:	4463      	add	r3, ip
 80018ca:	464a      	mov	r2, r9
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	2303      	movs	r3, #3
 80018d0:	431a      	orrs	r2, r3
 80018d2:	4691      	mov	r9, r2
 80018d4:	4652      	mov	r2, sl
 80018d6:	e68c      	b.n	80015f2 <__aeabi_dmul+0x86>
 80018d8:	220c      	movs	r2, #12
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	2303      	movs	r3, #3
 80018de:	0005      	movs	r5, r0
 80018e0:	4691      	mov	r9, r2
 80018e2:	469b      	mov	fp, r3
 80018e4:	e666      	b.n	80015b4 <__aeabi_dmul+0x48>
 80018e6:	2304      	movs	r3, #4
 80018e8:	4699      	mov	r9, r3
 80018ea:	2300      	movs	r3, #0
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	3301      	adds	r3, #1
 80018f0:	2400      	movs	r4, #0
 80018f2:	469b      	mov	fp, r3
 80018f4:	e65e      	b.n	80015b4 <__aeabi_dmul+0x48>
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	000007ff 	.word	0x000007ff
 80018fc:	fffffc01 	.word	0xfffffc01
 8001900:	080062fc 	.word	0x080062fc
 8001904:	000003ff 	.word	0x000003ff
 8001908:	feffffff 	.word	0xfeffffff
 800190c:	000007fe 	.word	0x000007fe
 8001910:	fffffc0d 	.word	0xfffffc0d
 8001914:	4649      	mov	r1, r9
 8001916:	2301      	movs	r3, #1
 8001918:	4319      	orrs	r1, r3
 800191a:	4689      	mov	r9, r1
 800191c:	2600      	movs	r6, #0
 800191e:	2001      	movs	r0, #1
 8001920:	e667      	b.n	80015f2 <__aeabi_dmul+0x86>
 8001922:	2300      	movs	r3, #0
 8001924:	2480      	movs	r4, #128	; 0x80
 8001926:	2500      	movs	r5, #0
 8001928:	4a43      	ldr	r2, [pc, #268]	; (8001a38 <__aeabi_dmul+0x4cc>)
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	0324      	lsls	r4, r4, #12
 800192e:	e67e      	b.n	800162e <__aeabi_dmul+0xc2>
 8001930:	2001      	movs	r0, #1
 8001932:	1a40      	subs	r0, r0, r1
 8001934:	2838      	cmp	r0, #56	; 0x38
 8001936:	dd00      	ble.n	800193a <__aeabi_dmul+0x3ce>
 8001938:	e676      	b.n	8001628 <__aeabi_dmul+0xbc>
 800193a:	281f      	cmp	r0, #31
 800193c:	dd5b      	ble.n	80019f6 <__aeabi_dmul+0x48a>
 800193e:	221f      	movs	r2, #31
 8001940:	0023      	movs	r3, r4
 8001942:	4252      	negs	r2, r2
 8001944:	1a51      	subs	r1, r2, r1
 8001946:	40cb      	lsrs	r3, r1
 8001948:	0019      	movs	r1, r3
 800194a:	2820      	cmp	r0, #32
 800194c:	d003      	beq.n	8001956 <__aeabi_dmul+0x3ea>
 800194e:	4a3b      	ldr	r2, [pc, #236]	; (8001a3c <__aeabi_dmul+0x4d0>)
 8001950:	4462      	add	r2, ip
 8001952:	4094      	lsls	r4, r2
 8001954:	4325      	orrs	r5, r4
 8001956:	1e6a      	subs	r2, r5, #1
 8001958:	4195      	sbcs	r5, r2
 800195a:	002a      	movs	r2, r5
 800195c:	430a      	orrs	r2, r1
 800195e:	2107      	movs	r1, #7
 8001960:	000d      	movs	r5, r1
 8001962:	2400      	movs	r4, #0
 8001964:	4015      	ands	r5, r2
 8001966:	4211      	tst	r1, r2
 8001968:	d05b      	beq.n	8001a22 <__aeabi_dmul+0x4b6>
 800196a:	210f      	movs	r1, #15
 800196c:	2400      	movs	r4, #0
 800196e:	4011      	ands	r1, r2
 8001970:	2904      	cmp	r1, #4
 8001972:	d053      	beq.n	8001a1c <__aeabi_dmul+0x4b0>
 8001974:	1d11      	adds	r1, r2, #4
 8001976:	4291      	cmp	r1, r2
 8001978:	4192      	sbcs	r2, r2
 800197a:	4252      	negs	r2, r2
 800197c:	18a4      	adds	r4, r4, r2
 800197e:	000a      	movs	r2, r1
 8001980:	0223      	lsls	r3, r4, #8
 8001982:	d54b      	bpl.n	8001a1c <__aeabi_dmul+0x4b0>
 8001984:	2201      	movs	r2, #1
 8001986:	2400      	movs	r4, #0
 8001988:	2500      	movs	r5, #0
 800198a:	e650      	b.n	800162e <__aeabi_dmul+0xc2>
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	031b      	lsls	r3, r3, #12
 8001990:	421c      	tst	r4, r3
 8001992:	d009      	beq.n	80019a8 <__aeabi_dmul+0x43c>
 8001994:	421e      	tst	r6, r3
 8001996:	d107      	bne.n	80019a8 <__aeabi_dmul+0x43c>
 8001998:	4333      	orrs	r3, r6
 800199a:	031c      	lsls	r4, r3, #12
 800199c:	4643      	mov	r3, r8
 800199e:	0015      	movs	r5, r2
 80019a0:	0b24      	lsrs	r4, r4, #12
 80019a2:	4a25      	ldr	r2, [pc, #148]	; (8001a38 <__aeabi_dmul+0x4cc>)
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	e642      	b.n	800162e <__aeabi_dmul+0xc2>
 80019a8:	2280      	movs	r2, #128	; 0x80
 80019aa:	0312      	lsls	r2, r2, #12
 80019ac:	4314      	orrs	r4, r2
 80019ae:	0324      	lsls	r4, r4, #12
 80019b0:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <__aeabi_dmul+0x4cc>)
 80019b2:	0b24      	lsrs	r4, r4, #12
 80019b4:	9701      	str	r7, [sp, #4]
 80019b6:	e63a      	b.n	800162e <__aeabi_dmul+0xc2>
 80019b8:	f000 f8fc 	bl	8001bb4 <__clzsi2>
 80019bc:	0001      	movs	r1, r0
 80019be:	0002      	movs	r2, r0
 80019c0:	3115      	adds	r1, #21
 80019c2:	3220      	adds	r2, #32
 80019c4:	291c      	cmp	r1, #28
 80019c6:	dc00      	bgt.n	80019ca <__aeabi_dmul+0x45e>
 80019c8:	e74b      	b.n	8001862 <__aeabi_dmul+0x2f6>
 80019ca:	0034      	movs	r4, r6
 80019cc:	3808      	subs	r0, #8
 80019ce:	2500      	movs	r5, #0
 80019d0:	4084      	lsls	r4, r0
 80019d2:	e750      	b.n	8001876 <__aeabi_dmul+0x30a>
 80019d4:	f000 f8ee 	bl	8001bb4 <__clzsi2>
 80019d8:	0003      	movs	r3, r0
 80019da:	001a      	movs	r2, r3
 80019dc:	3215      	adds	r2, #21
 80019de:	3020      	adds	r0, #32
 80019e0:	2a1c      	cmp	r2, #28
 80019e2:	dc00      	bgt.n	80019e6 <__aeabi_dmul+0x47a>
 80019e4:	e71e      	b.n	8001824 <__aeabi_dmul+0x2b8>
 80019e6:	4656      	mov	r6, sl
 80019e8:	3b08      	subs	r3, #8
 80019ea:	2200      	movs	r2, #0
 80019ec:	409e      	lsls	r6, r3
 80019ee:	e723      	b.n	8001838 <__aeabi_dmul+0x2cc>
 80019f0:	9b00      	ldr	r3, [sp, #0]
 80019f2:	469c      	mov	ip, r3
 80019f4:	e6e6      	b.n	80017c4 <__aeabi_dmul+0x258>
 80019f6:	4912      	ldr	r1, [pc, #72]	; (8001a40 <__aeabi_dmul+0x4d4>)
 80019f8:	0022      	movs	r2, r4
 80019fa:	4461      	add	r1, ip
 80019fc:	002e      	movs	r6, r5
 80019fe:	408d      	lsls	r5, r1
 8001a00:	408a      	lsls	r2, r1
 8001a02:	40c6      	lsrs	r6, r0
 8001a04:	1e69      	subs	r1, r5, #1
 8001a06:	418d      	sbcs	r5, r1
 8001a08:	4332      	orrs	r2, r6
 8001a0a:	432a      	orrs	r2, r5
 8001a0c:	40c4      	lsrs	r4, r0
 8001a0e:	0753      	lsls	r3, r2, #29
 8001a10:	d0b6      	beq.n	8001980 <__aeabi_dmul+0x414>
 8001a12:	210f      	movs	r1, #15
 8001a14:	4011      	ands	r1, r2
 8001a16:	2904      	cmp	r1, #4
 8001a18:	d1ac      	bne.n	8001974 <__aeabi_dmul+0x408>
 8001a1a:	e7b1      	b.n	8001980 <__aeabi_dmul+0x414>
 8001a1c:	0765      	lsls	r5, r4, #29
 8001a1e:	0264      	lsls	r4, r4, #9
 8001a20:	0b24      	lsrs	r4, r4, #12
 8001a22:	08d2      	lsrs	r2, r2, #3
 8001a24:	4315      	orrs	r5, r2
 8001a26:	2200      	movs	r2, #0
 8001a28:	e601      	b.n	800162e <__aeabi_dmul+0xc2>
 8001a2a:	2280      	movs	r2, #128	; 0x80
 8001a2c:	0312      	lsls	r2, r2, #12
 8001a2e:	4314      	orrs	r4, r2
 8001a30:	0324      	lsls	r4, r4, #12
 8001a32:	4a01      	ldr	r2, [pc, #4]	; (8001a38 <__aeabi_dmul+0x4cc>)
 8001a34:	0b24      	lsrs	r4, r4, #12
 8001a36:	e5fa      	b.n	800162e <__aeabi_dmul+0xc2>
 8001a38:	000007ff 	.word	0x000007ff
 8001a3c:	0000043e 	.word	0x0000043e
 8001a40:	0000041e 	.word	0x0000041e

08001a44 <__aeabi_i2d>:
 8001a44:	b570      	push	{r4, r5, r6, lr}
 8001a46:	2800      	cmp	r0, #0
 8001a48:	d016      	beq.n	8001a78 <__aeabi_i2d+0x34>
 8001a4a:	17c3      	asrs	r3, r0, #31
 8001a4c:	18c5      	adds	r5, r0, r3
 8001a4e:	405d      	eors	r5, r3
 8001a50:	0fc4      	lsrs	r4, r0, #31
 8001a52:	0028      	movs	r0, r5
 8001a54:	f000 f8ae 	bl	8001bb4 <__clzsi2>
 8001a58:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <__aeabi_i2d+0x5c>)
 8001a5a:	1a12      	subs	r2, r2, r0
 8001a5c:	280a      	cmp	r0, #10
 8001a5e:	dc16      	bgt.n	8001a8e <__aeabi_i2d+0x4a>
 8001a60:	0003      	movs	r3, r0
 8001a62:	002e      	movs	r6, r5
 8001a64:	3315      	adds	r3, #21
 8001a66:	409e      	lsls	r6, r3
 8001a68:	230b      	movs	r3, #11
 8001a6a:	1a18      	subs	r0, r3, r0
 8001a6c:	40c5      	lsrs	r5, r0
 8001a6e:	0552      	lsls	r2, r2, #21
 8001a70:	032d      	lsls	r5, r5, #12
 8001a72:	0b2d      	lsrs	r5, r5, #12
 8001a74:	0d53      	lsrs	r3, r2, #21
 8001a76:	e003      	b.n	8001a80 <__aeabi_i2d+0x3c>
 8001a78:	2400      	movs	r4, #0
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	2500      	movs	r5, #0
 8001a7e:	2600      	movs	r6, #0
 8001a80:	051b      	lsls	r3, r3, #20
 8001a82:	432b      	orrs	r3, r5
 8001a84:	07e4      	lsls	r4, r4, #31
 8001a86:	4323      	orrs	r3, r4
 8001a88:	0030      	movs	r0, r6
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	bd70      	pop	{r4, r5, r6, pc}
 8001a8e:	380b      	subs	r0, #11
 8001a90:	4085      	lsls	r5, r0
 8001a92:	0552      	lsls	r2, r2, #21
 8001a94:	032d      	lsls	r5, r5, #12
 8001a96:	2600      	movs	r6, #0
 8001a98:	0b2d      	lsrs	r5, r5, #12
 8001a9a:	0d53      	lsrs	r3, r2, #21
 8001a9c:	e7f0      	b.n	8001a80 <__aeabi_i2d+0x3c>
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	0000041e 	.word	0x0000041e

08001aa4 <__aeabi_d2f>:
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	004b      	lsls	r3, r1, #1
 8001aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aaa:	0d5b      	lsrs	r3, r3, #21
 8001aac:	030c      	lsls	r4, r1, #12
 8001aae:	4e3d      	ldr	r6, [pc, #244]	; (8001ba4 <__aeabi_d2f+0x100>)
 8001ab0:	0a64      	lsrs	r4, r4, #9
 8001ab2:	0f40      	lsrs	r0, r0, #29
 8001ab4:	1c5f      	adds	r7, r3, #1
 8001ab6:	0fc9      	lsrs	r1, r1, #31
 8001ab8:	4304      	orrs	r4, r0
 8001aba:	00d5      	lsls	r5, r2, #3
 8001abc:	4237      	tst	r7, r6
 8001abe:	d00a      	beq.n	8001ad6 <__aeabi_d2f+0x32>
 8001ac0:	4839      	ldr	r0, [pc, #228]	; (8001ba8 <__aeabi_d2f+0x104>)
 8001ac2:	181e      	adds	r6, r3, r0
 8001ac4:	2efe      	cmp	r6, #254	; 0xfe
 8001ac6:	dd16      	ble.n	8001af6 <__aeabi_d2f+0x52>
 8001ac8:	20ff      	movs	r0, #255	; 0xff
 8001aca:	2400      	movs	r4, #0
 8001acc:	05c0      	lsls	r0, r0, #23
 8001ace:	4320      	orrs	r0, r4
 8001ad0:	07c9      	lsls	r1, r1, #31
 8001ad2:	4308      	orrs	r0, r1
 8001ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d106      	bne.n	8001ae8 <__aeabi_d2f+0x44>
 8001ada:	432c      	orrs	r4, r5
 8001adc:	d026      	beq.n	8001b2c <__aeabi_d2f+0x88>
 8001ade:	2205      	movs	r2, #5
 8001ae0:	0192      	lsls	r2, r2, #6
 8001ae2:	0a54      	lsrs	r4, r2, #9
 8001ae4:	b2d8      	uxtb	r0, r3
 8001ae6:	e7f1      	b.n	8001acc <__aeabi_d2f+0x28>
 8001ae8:	4325      	orrs	r5, r4
 8001aea:	d0ed      	beq.n	8001ac8 <__aeabi_d2f+0x24>
 8001aec:	2080      	movs	r0, #128	; 0x80
 8001aee:	03c0      	lsls	r0, r0, #15
 8001af0:	4304      	orrs	r4, r0
 8001af2:	20ff      	movs	r0, #255	; 0xff
 8001af4:	e7ea      	b.n	8001acc <__aeabi_d2f+0x28>
 8001af6:	2e00      	cmp	r6, #0
 8001af8:	dd1b      	ble.n	8001b32 <__aeabi_d2f+0x8e>
 8001afa:	0192      	lsls	r2, r2, #6
 8001afc:	1e53      	subs	r3, r2, #1
 8001afe:	419a      	sbcs	r2, r3
 8001b00:	00e4      	lsls	r4, r4, #3
 8001b02:	0f6d      	lsrs	r5, r5, #29
 8001b04:	4322      	orrs	r2, r4
 8001b06:	432a      	orrs	r2, r5
 8001b08:	0753      	lsls	r3, r2, #29
 8001b0a:	d048      	beq.n	8001b9e <__aeabi_d2f+0xfa>
 8001b0c:	230f      	movs	r3, #15
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d000      	beq.n	8001b16 <__aeabi_d2f+0x72>
 8001b14:	3204      	adds	r2, #4
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	04db      	lsls	r3, r3, #19
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d03f      	beq.n	8001b9e <__aeabi_d2f+0xfa>
 8001b1e:	1c70      	adds	r0, r6, #1
 8001b20:	2efe      	cmp	r6, #254	; 0xfe
 8001b22:	d0d1      	beq.n	8001ac8 <__aeabi_d2f+0x24>
 8001b24:	0192      	lsls	r2, r2, #6
 8001b26:	0a54      	lsrs	r4, r2, #9
 8001b28:	b2c0      	uxtb	r0, r0
 8001b2a:	e7cf      	b.n	8001acc <__aeabi_d2f+0x28>
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	2400      	movs	r4, #0
 8001b30:	e7cc      	b.n	8001acc <__aeabi_d2f+0x28>
 8001b32:	0032      	movs	r2, r6
 8001b34:	3217      	adds	r2, #23
 8001b36:	db22      	blt.n	8001b7e <__aeabi_d2f+0xda>
 8001b38:	2080      	movs	r0, #128	; 0x80
 8001b3a:	0400      	lsls	r0, r0, #16
 8001b3c:	4320      	orrs	r0, r4
 8001b3e:	241e      	movs	r4, #30
 8001b40:	1ba4      	subs	r4, r4, r6
 8001b42:	2c1f      	cmp	r4, #31
 8001b44:	dd1d      	ble.n	8001b82 <__aeabi_d2f+0xde>
 8001b46:	2202      	movs	r2, #2
 8001b48:	4252      	negs	r2, r2
 8001b4a:	1b96      	subs	r6, r2, r6
 8001b4c:	0002      	movs	r2, r0
 8001b4e:	40f2      	lsrs	r2, r6
 8001b50:	0016      	movs	r6, r2
 8001b52:	2c20      	cmp	r4, #32
 8001b54:	d004      	beq.n	8001b60 <__aeabi_d2f+0xbc>
 8001b56:	4a15      	ldr	r2, [pc, #84]	; (8001bac <__aeabi_d2f+0x108>)
 8001b58:	4694      	mov	ip, r2
 8001b5a:	4463      	add	r3, ip
 8001b5c:	4098      	lsls	r0, r3
 8001b5e:	4305      	orrs	r5, r0
 8001b60:	002a      	movs	r2, r5
 8001b62:	1e53      	subs	r3, r2, #1
 8001b64:	419a      	sbcs	r2, r3
 8001b66:	4332      	orrs	r2, r6
 8001b68:	2600      	movs	r6, #0
 8001b6a:	0753      	lsls	r3, r2, #29
 8001b6c:	d1ce      	bne.n	8001b0c <__aeabi_d2f+0x68>
 8001b6e:	2480      	movs	r4, #128	; 0x80
 8001b70:	0013      	movs	r3, r2
 8001b72:	04e4      	lsls	r4, r4, #19
 8001b74:	2001      	movs	r0, #1
 8001b76:	4023      	ands	r3, r4
 8001b78:	4222      	tst	r2, r4
 8001b7a:	d1d3      	bne.n	8001b24 <__aeabi_d2f+0x80>
 8001b7c:	e7b0      	b.n	8001ae0 <__aeabi_d2f+0x3c>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e7ad      	b.n	8001ade <__aeabi_d2f+0x3a>
 8001b82:	4a0b      	ldr	r2, [pc, #44]	; (8001bb0 <__aeabi_d2f+0x10c>)
 8001b84:	4694      	mov	ip, r2
 8001b86:	002a      	movs	r2, r5
 8001b88:	40e2      	lsrs	r2, r4
 8001b8a:	0014      	movs	r4, r2
 8001b8c:	002a      	movs	r2, r5
 8001b8e:	4463      	add	r3, ip
 8001b90:	409a      	lsls	r2, r3
 8001b92:	4098      	lsls	r0, r3
 8001b94:	1e55      	subs	r5, r2, #1
 8001b96:	41aa      	sbcs	r2, r5
 8001b98:	4302      	orrs	r2, r0
 8001b9a:	4322      	orrs	r2, r4
 8001b9c:	e7e4      	b.n	8001b68 <__aeabi_d2f+0xc4>
 8001b9e:	0033      	movs	r3, r6
 8001ba0:	e79e      	b.n	8001ae0 <__aeabi_d2f+0x3c>
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	000007fe 	.word	0x000007fe
 8001ba8:	fffffc80 	.word	0xfffffc80
 8001bac:	fffffca2 	.word	0xfffffca2
 8001bb0:	fffffc82 	.word	0xfffffc82

08001bb4 <__clzsi2>:
 8001bb4:	211c      	movs	r1, #28
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	041b      	lsls	r3, r3, #16
 8001bba:	4298      	cmp	r0, r3
 8001bbc:	d301      	bcc.n	8001bc2 <__clzsi2+0xe>
 8001bbe:	0c00      	lsrs	r0, r0, #16
 8001bc0:	3910      	subs	r1, #16
 8001bc2:	0a1b      	lsrs	r3, r3, #8
 8001bc4:	4298      	cmp	r0, r3
 8001bc6:	d301      	bcc.n	8001bcc <__clzsi2+0x18>
 8001bc8:	0a00      	lsrs	r0, r0, #8
 8001bca:	3908      	subs	r1, #8
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	4298      	cmp	r0, r3
 8001bd0:	d301      	bcc.n	8001bd6 <__clzsi2+0x22>
 8001bd2:	0900      	lsrs	r0, r0, #4
 8001bd4:	3904      	subs	r1, #4
 8001bd6:	a202      	add	r2, pc, #8	; (adr r2, 8001be0 <__clzsi2+0x2c>)
 8001bd8:	5c10      	ldrb	r0, [r2, r0]
 8001bda:	1840      	adds	r0, r0, r1
 8001bdc:	4770      	bx	lr
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	02020304 	.word	0x02020304
 8001be4:	01010101 	.word	0x01010101
	...

08001bf0 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	1c18      	adds	r0, r3, #0
 8001bfc:	f003 fd3e 	bl	800567c <cosf>
 8001c00:	1c03      	adds	r3, r0, #0
 8001c02:	1c18      	adds	r0, r3, #0
 8001c04:	46bd      	mov	sp, r7
 8001c06:	b002      	add	sp, #8
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c12:	f000 fd43 	bl	800269c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c16:	f000 f889 	bl	8001d2c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c1a:	f000 f9d7 	bl	8001fcc <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001c1e:	f000 f9b7 	bl	8001f90 <_ZL11MX_DMA_Initv>
  MX_TIM16_Init();
 8001c22:	f000 f8e5 	bl	8001df0 <_ZL13MX_TIM16_Initv>
  MX_USART2_UART_Init();
 8001c26:	f000 f97b 	bl	8001f20 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  MAXON maxon(&htim16, TIM_CHANNEL_1, shdn_GPIO_Port, shdn_Pin);
 8001c2a:	4a39      	ldr	r2, [pc, #228]	; (8001d10 <main+0x104>)
 8001c2c:	4939      	ldr	r1, [pc, #228]	; (8001d14 <main+0x108>)
 8001c2e:	0038      	movs	r0, r7
 8001c30:	2310      	movs	r3, #16
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	0013      	movs	r3, r2
 8001c36:	2200      	movs	r2, #0
 8001c38:	f000 fb1b 	bl	8002272 <_ZN5MAXONC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeft>
  HAL_UART_Receive_DMA(&huart2, rxBuf, sizeof(rxBuf));
 8001c3c:	4936      	ldr	r1, [pc, #216]	; (8001d18 <main+0x10c>)
 8001c3e:	4b37      	ldr	r3, [pc, #220]	; (8001d1c <main+0x110>)
 8001c40:	2280      	movs	r2, #128	; 0x80
 8001c42:	0018      	movs	r0, r3
 8001c44:	f002 ff20 	bl	8004a88 <HAL_UART_Receive_DMA>

  if(HAL_GPIO_ReadPin(dip1_GPIO_Port, dip1_Pin) == 1){
 8001c48:	23a0      	movs	r3, #160	; 0xa0
 8001c4a:	05db      	lsls	r3, r3, #23
 8001c4c:	2102      	movs	r1, #2
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f001 fa62 	bl	8003118 <HAL_GPIO_ReadPin>
 8001c54:	0003      	movs	r3, r0
 8001c56:	3b01      	subs	r3, #1
 8001c58:	425a      	negs	r2, r3
 8001c5a:	4153      	adcs	r3, r2
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <main+0x5e>
	  ID = 1;
 8001c62:	4b2f      	ldr	r3, [pc, #188]	; (8001d20 <main+0x114>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	701a      	strb	r2, [r3, #0]
 8001c68:	e020      	b.n	8001cac <main+0xa0>
  }else if(HAL_GPIO_ReadPin(dip2_GPIO_Port, dip2_Pin) == 1){
 8001c6a:	4b29      	ldr	r3, [pc, #164]	; (8001d10 <main+0x104>)
 8001c6c:	2120      	movs	r1, #32
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f001 fa52 	bl	8003118 <HAL_GPIO_ReadPin>
 8001c74:	0003      	movs	r3, r0
 8001c76:	3b01      	subs	r3, #1
 8001c78:	425a      	negs	r2, r3
 8001c7a:	4153      	adcs	r3, r2
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <main+0x7e>
	  ID = 2;
 8001c82:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <main+0x114>)
 8001c84:	2202      	movs	r2, #2
 8001c86:	701a      	strb	r2, [r3, #0]
 8001c88:	e010      	b.n	8001cac <main+0xa0>
  }else if(HAL_GPIO_ReadPin(dip3_GPIO_Port, dip3_Pin) == 1){
 8001c8a:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <main+0x104>)
 8001c8c:	2180      	movs	r1, #128	; 0x80
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f001 fa42 	bl	8003118 <HAL_GPIO_ReadPin>
 8001c94:	0003      	movs	r3, r0
 8001c96:	3b01      	subs	r3, #1
 8001c98:	425a      	negs	r2, r3
 8001c9a:	4153      	adcs	r3, r2
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <main+0x9e>
	  ID = 3;
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <main+0x114>)
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	701a      	strb	r2, [r3, #0]
 8001ca8:	e000      	b.n	8001cac <main+0xa0>
  }else {
	  while(1);
 8001caa:	e7fe      	b.n	8001caa <main+0x9e>
  }

  m_angle = (ID * 120 + 30) % 360;
 8001cac:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <main+0x114>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	001a      	movs	r2, r3
 8001cb2:	0013      	movs	r3, r2
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	1a9b      	subs	r3, r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	331e      	adds	r3, #30
 8001cbc:	22b4      	movs	r2, #180	; 0xb4
 8001cbe:	0051      	lsls	r1, r2, #1
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f7fe fb8d 	bl	80003e0 <__aeabi_idivmod>
 8001cc6:	000b      	movs	r3, r1
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <main+0x118>)
 8001ccc:	801a      	strh	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  receiveData();
 8001cce:	f000 f9e1 	bl	8002094 <_Z11receiveDatav>
	  value = calcValue();
 8001cd2:	f000 fa81 	bl	80021d8 <_Z9calcValuev>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	001a      	movs	r2, r3
 8001cda:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <main+0x11c>)
 8001cdc:	801a      	strh	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin (slide_GPIO_Port, slide_Pin) == 0){
 8001cde:	23a0      	movs	r3, #160	; 0xa0
 8001ce0:	05db      	lsls	r3, r3, #23
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f001 fa17 	bl	8003118 <HAL_GPIO_ReadPin>
 8001cea:	0003      	movs	r3, r0
 8001cec:	425a      	negs	r2, r3
 8001cee:	4153      	adcs	r3, r2
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <main+0xf0>
		  value = 0;
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <main+0x11c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	801a      	strh	r2, [r3, #0]
	  }
	  maxon.move(value);
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <main+0x11c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	5e9a      	ldrsh	r2, [r3, r2]
 8001d02:	003b      	movs	r3, r7
 8001d04:	0011      	movs	r1, r2
 8001d06:	0018      	movs	r0, r3
 8001d08:	f000 fadd 	bl	80022c6 <_ZN5MAXON4moveEs>
	  receiveData();
 8001d0c:	e7df      	b.n	8001cce <main+0xc2>
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	50000400 	.word	0x50000400
 8001d14:	20000028 	.word	0x20000028
 8001d18:	20000168 	.word	0x20000168
 8001d1c:	20000074 	.word	0x20000074
 8001d20:	200001fd 	.word	0x200001fd
 8001d24:	200001fe 	.word	0x200001fe
 8001d28:	20000164 	.word	0x20000164

08001d2c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b093      	sub	sp, #76	; 0x4c
 8001d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d32:	2414      	movs	r4, #20
 8001d34:	193b      	adds	r3, r7, r4
 8001d36:	0018      	movs	r0, r3
 8001d38:	2334      	movs	r3, #52	; 0x34
 8001d3a:	001a      	movs	r2, r3
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	f004 fa89 	bl	8006254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	0018      	movs	r0, r3
 8001d46:	2310      	movs	r3, #16
 8001d48:	001a      	movs	r2, r3
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	f004 fa82 	bl	8006254 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	0018      	movs	r0, r3
 8001d56:	f001 fa19 	bl	800318c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d5a:	193b      	adds	r3, r7, r4
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d60:	193b      	adds	r3, r7, r4
 8001d62:	2280      	movs	r2, #128	; 0x80
 8001d64:	0052      	lsls	r2, r2, #1
 8001d66:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001d68:	0021      	movs	r1, r4
 8001d6a:	187b      	adds	r3, r7, r1
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d70:	187b      	adds	r3, r7, r1
 8001d72:	2240      	movs	r2, #64	; 0x40
 8001d74:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d76:	187b      	adds	r3, r7, r1
 8001d78:	2202      	movs	r2, #2
 8001d7a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d7c:	187b      	adds	r3, r7, r1
 8001d7e:	2202      	movs	r2, #2
 8001d80:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001d82:	187b      	adds	r3, r7, r1
 8001d84:	2200      	movs	r2, #0
 8001d86:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001d88:	187b      	adds	r3, r7, r1
 8001d8a:	2208      	movs	r2, #8
 8001d8c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d8e:	187b      	adds	r3, r7, r1
 8001d90:	2280      	movs	r2, #128	; 0x80
 8001d92:	0292      	lsls	r2, r2, #10
 8001d94:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d96:	187b      	adds	r3, r7, r1
 8001d98:	2280      	movs	r2, #128	; 0x80
 8001d9a:	0592      	lsls	r2, r2, #22
 8001d9c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d9e:	187b      	adds	r3, r7, r1
 8001da0:	0018      	movs	r0, r3
 8001da2:	f001 fa3f 	bl	8003224 <HAL_RCC_OscConfig>
 8001da6:	0003      	movs	r3, r0
 8001da8:	1e5a      	subs	r2, r3, #1
 8001daa:	4193      	sbcs	r3, r2
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 8001db2:	f000 fa59 	bl	8002268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	2207      	movs	r2, #7
 8001dba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dbc:	1d3b      	adds	r3, r7, #4
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	2200      	movs	r2, #0
 8001dcc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	2102      	movs	r1, #2
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f001 fd36 	bl	8003844 <HAL_RCC_ClockConfig>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	1e5a      	subs	r2, r3, #1
 8001ddc:	4193      	sbcs	r3, r2
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8001de4:	f000 fa40 	bl	8002268 <Error_Handler>
  }
}
 8001de8:	46c0      	nop			; (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b013      	add	sp, #76	; 0x4c
 8001dee:	bd90      	pop	{r4, r7, pc}

08001df0 <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b094      	sub	sp, #80	; 0x50
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001df6:	2334      	movs	r3, #52	; 0x34
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	231c      	movs	r3, #28
 8001dfe:	001a      	movs	r2, r3
 8001e00:	2100      	movs	r1, #0
 8001e02:	f004 fa27 	bl	8006254 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e06:	003b      	movs	r3, r7
 8001e08:	0018      	movs	r0, r3
 8001e0a:	2334      	movs	r3, #52	; 0x34
 8001e0c:	001a      	movs	r2, r3
 8001e0e:	2100      	movs	r1, #0
 8001e10:	f004 fa20 	bl	8006254 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001e14:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <_ZL13MX_TIM16_Initv+0x124>)
 8001e16:	4a40      	ldr	r2, [pc, #256]	; (8001f18 <_ZL13MX_TIM16_Initv+0x128>)
 8001e18:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1-1;
 8001e1a:	4b3e      	ldr	r3, [pc, #248]	; (8001f14 <_ZL13MX_TIM16_Initv+0x124>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e20:	4b3c      	ldr	r3, [pc, #240]	; (8001f14 <_ZL13MX_TIM16_Initv+0x124>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 640-1;
 8001e26:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <_ZL13MX_TIM16_Initv+0x124>)
 8001e28:	4a3c      	ldr	r2, [pc, #240]	; (8001f1c <_ZL13MX_TIM16_Initv+0x12c>)
 8001e2a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2c:	4b39      	ldr	r3, [pc, #228]	; (8001f14 <_ZL13MX_TIM16_Initv+0x124>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001e32:	4b38      	ldr	r3, [pc, #224]	; (8001f14 <_ZL13MX_TIM16_Initv+0x124>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e38:	4b36      	ldr	r3, [pc, #216]	; (8001f14 <_ZL13MX_TIM16_Initv+0x124>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e3e:	4b35      	ldr	r3, [pc, #212]	; (8001f14 <_ZL13MX_TIM16_Initv+0x124>)
 8001e40:	0018      	movs	r0, r3
 8001e42:	f001 fea9 	bl	8003b98 <HAL_TIM_Base_Init>
 8001e46:	0003      	movs	r3, r0
 8001e48:	1e5a      	subs	r2, r3, #1
 8001e4a:	4193      	sbcs	r3, r2
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <_ZL13MX_TIM16_Initv+0x66>
  {
    Error_Handler();
 8001e52:	f000 fa09 	bl	8002268 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001e56:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <_ZL13MX_TIM16_Initv+0x124>)
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f001 fef5 	bl	8003c48 <HAL_TIM_PWM_Init>
 8001e5e:	0003      	movs	r3, r0
 8001e60:	1e5a      	subs	r2, r3, #1
 8001e62:	4193      	sbcs	r3, r2
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <_ZL13MX_TIM16_Initv+0x7e>
  {
    Error_Handler();
 8001e6a:	f000 f9fd 	bl	8002268 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e6e:	2134      	movs	r1, #52	; 0x34
 8001e70:	187b      	adds	r3, r7, r1
 8001e72:	2260      	movs	r2, #96	; 0x60
 8001e74:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001e76:	187b      	adds	r3, r7, r1
 8001e78:	2200      	movs	r2, #0
 8001e7a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e7c:	187b      	adds	r3, r7, r1
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e82:	187b      	adds	r3, r7, r1
 8001e84:	2200      	movs	r2, #0
 8001e86:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001e88:	187b      	adds	r3, r7, r1
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e8e:	187b      	adds	r3, r7, r1
 8001e90:	2200      	movs	r2, #0
 8001e92:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e94:	187b      	adds	r3, r7, r1
 8001e96:	2200      	movs	r2, #0
 8001e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e9a:	1879      	adds	r1, r7, r1
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <_ZL13MX_TIM16_Initv+0x124>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f002 f809 	bl	8003eb8 <HAL_TIM_PWM_ConfigChannel>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	1e5a      	subs	r2, r3, #1
 8001eaa:	4193      	sbcs	r3, r2
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <_ZL13MX_TIM16_Initv+0xc6>
  {
    Error_Handler();
 8001eb2:	f000 f9d9 	bl	8002268 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eb6:	003b      	movs	r3, r7
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ebc:	003b      	movs	r3, r7
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ec2:	003b      	movs	r3, r7
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ec8:	003b      	movs	r3, r7
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ece:	003b      	movs	r3, r7
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ed4:	003b      	movs	r3, r7
 8001ed6:	2280      	movs	r2, #128	; 0x80
 8001ed8:	0192      	lsls	r2, r2, #6
 8001eda:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001edc:	003b      	movs	r3, r7
 8001ede:	2200      	movs	r2, #0
 8001ee0:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ee2:	003b      	movs	r3, r7
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001ee8:	003a      	movs	r2, r7
 8001eea:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <_ZL13MX_TIM16_Initv+0x124>)
 8001eec:	0011      	movs	r1, r2
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f002 fcb4 	bl	800485c <HAL_TIMEx_ConfigBreakDeadTime>
 8001ef4:	0003      	movs	r3, r0
 8001ef6:	1e5a      	subs	r2, r3, #1
 8001ef8:	4193      	sbcs	r3, r2
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <_ZL13MX_TIM16_Initv+0x114>
  {
    Error_Handler();
 8001f00:	f000 f9b2 	bl	8002268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001f04:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <_ZL13MX_TIM16_Initv+0x124>)
 8001f06:	0018      	movs	r0, r3
 8001f08:	f000 fa98 	bl	800243c <HAL_TIM_MspPostInit>

}
 8001f0c:	46c0      	nop			; (mov r8, r8)
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b014      	add	sp, #80	; 0x50
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000028 	.word	0x20000028
 8001f18:	40014400 	.word	0x40014400
 8001f1c:	0000027f 	.word	0x0000027f

08001f20 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f24:	4b18      	ldr	r3, [pc, #96]	; (8001f88 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001f26:	4a19      	ldr	r2, [pc, #100]	; (8001f8c <_ZL19MX_USART2_UART_Initv+0x6c>)
 8001f28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f2a:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001f2c:	22e1      	movs	r2, #225	; 0xe1
 8001f2e:	0252      	lsls	r2, r2, #9
 8001f30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f44:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001f46:	220c      	movs	r2, #12
 8001f48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f50:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f56:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f002 fd36 	bl	80049dc <HAL_UART_Init>
 8001f70:	0003      	movs	r3, r0
 8001f72:	1e5a      	subs	r2, r3, #1
 8001f74:	4193      	sbcs	r3, r2
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <_ZL19MX_USART2_UART_Initv+0x60>
  {
    Error_Handler();
 8001f7c:	f000 f974 	bl	8002268 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f80:	46c0      	nop			; (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	20000074 	.word	0x20000074
 8001f8c:	40004400 	.word	0x40004400

08001f90 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f96:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <_ZL11MX_DMA_Initv+0x38>)
 8001f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <_ZL11MX_DMA_Initv+0x38>)
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	639a      	str	r2, [r3, #56]	; 0x38
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <_ZL11MX_DMA_Initv+0x38>)
 8001fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	4013      	ands	r3, r2
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2009      	movs	r0, #9
 8001fb4:	f000 fcc8 	bl	8002948 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001fb8:	2009      	movs	r0, #9
 8001fba:	f000 fcda 	bl	8002972 <HAL_NVIC_EnableIRQ>

}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b002      	add	sp, #8
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	40021000 	.word	0x40021000

08001fcc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fcc:	b590      	push	{r4, r7, lr}
 8001fce:	b089      	sub	sp, #36	; 0x24
 8001fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd2:	240c      	movs	r4, #12
 8001fd4:	193b      	adds	r3, r7, r4
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	2314      	movs	r3, #20
 8001fda:	001a      	movs	r2, r3
 8001fdc:	2100      	movs	r1, #0
 8001fde:	f004 f939 	bl	8006254 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	4b2a      	ldr	r3, [pc, #168]	; (800208c <_ZL12MX_GPIO_Initv+0xc0>)
 8001fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fe6:	4b29      	ldr	r3, [pc, #164]	; (800208c <_ZL12MX_GPIO_Initv+0xc0>)
 8001fe8:	2102      	movs	r1, #2
 8001fea:	430a      	orrs	r2, r1
 8001fec:	635a      	str	r2, [r3, #52]	; 0x34
 8001fee:	4b27      	ldr	r3, [pc, #156]	; (800208c <_ZL12MX_GPIO_Initv+0xc0>)
 8001ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffa:	4b24      	ldr	r3, [pc, #144]	; (800208c <_ZL12MX_GPIO_Initv+0xc0>)
 8001ffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ffe:	4b23      	ldr	r3, [pc, #140]	; (800208c <_ZL12MX_GPIO_Initv+0xc0>)
 8002000:	2101      	movs	r1, #1
 8002002:	430a      	orrs	r2, r1
 8002004:	635a      	str	r2, [r3, #52]	; 0x34
 8002006:	4b21      	ldr	r3, [pc, #132]	; (800208c <_ZL12MX_GPIO_Initv+0xc0>)
 8002008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200a:	2201      	movs	r2, #1
 800200c:	4013      	ands	r3, r2
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(shdn_GPIO_Port, shdn_Pin, GPIO_PIN_RESET);
 8002012:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <_ZL12MX_GPIO_Initv+0xc4>)
 8002014:	2200      	movs	r2, #0
 8002016:	2110      	movs	r1, #16
 8002018:	0018      	movs	r0, r3
 800201a:	f001 f89a 	bl	8003152 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : dip5_Pin dip2_Pin dip3_Pin dip4_Pin */
  GPIO_InitStruct.Pin = dip5_Pin|dip2_Pin|dip3_Pin|dip4_Pin;
 800201e:	193b      	adds	r3, r7, r4
 8002020:	22e8      	movs	r2, #232	; 0xe8
 8002022:	0092      	lsls	r2, r2, #2
 8002024:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002026:	193b      	adds	r3, r7, r4
 8002028:	2200      	movs	r2, #0
 800202a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	193b      	adds	r3, r7, r4
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002032:	193b      	adds	r3, r7, r4
 8002034:	4a16      	ldr	r2, [pc, #88]	; (8002090 <_ZL12MX_GPIO_Initv+0xc4>)
 8002036:	0019      	movs	r1, r3
 8002038:	0010      	movs	r0, r2
 800203a:	f000 ff09 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : slide_Pin dip1_Pin */
  GPIO_InitStruct.Pin = slide_Pin|dip1_Pin;
 800203e:	193b      	adds	r3, r7, r4
 8002040:	2203      	movs	r2, #3
 8002042:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002044:	193b      	adds	r3, r7, r4
 8002046:	2200      	movs	r2, #0
 8002048:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	193b      	adds	r3, r7, r4
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	193a      	adds	r2, r7, r4
 8002052:	23a0      	movs	r3, #160	; 0xa0
 8002054:	05db      	lsls	r3, r3, #23
 8002056:	0011      	movs	r1, r2
 8002058:	0018      	movs	r0, r3
 800205a:	f000 fef9 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : shdn_Pin */
  GPIO_InitStruct.Pin = shdn_Pin;
 800205e:	0021      	movs	r1, r4
 8002060:	187b      	adds	r3, r7, r1
 8002062:	2210      	movs	r2, #16
 8002064:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002066:	187b      	adds	r3, r7, r1
 8002068:	2201      	movs	r2, #1
 800206a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	187b      	adds	r3, r7, r1
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	187b      	adds	r3, r7, r1
 8002074:	2200      	movs	r2, #0
 8002076:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(shdn_GPIO_Port, &GPIO_InitStruct);
 8002078:	187b      	adds	r3, r7, r1
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <_ZL12MX_GPIO_Initv+0xc4>)
 800207c:	0019      	movs	r1, r3
 800207e:	0010      	movs	r0, r2
 8002080:	f000 fee6 	bl	8002e50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002084:	46c0      	nop			; (mov r8, r8)
 8002086:	46bd      	mov	sp, r7
 8002088:	b009      	add	sp, #36	; 0x24
 800208a:	bd90      	pop	{r4, r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	50000400 	.word	0x50000400

08002094 <_Z11receiveDatav>:

/* USER CODE BEGIN 4 */
void receiveData(){
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
	uint8_t checksum = 0;
 800209a:	2317      	movs	r3, #23
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
	static uint8_t index = 0;

  index = huart2.hdmarx->Instance->CNDTR;
 80020a2:	4b46      	ldr	r3, [pc, #280]	; (80021bc <_Z11receiveDatav+0x128>)
 80020a4:	2280      	movs	r2, #128	; 0x80
 80020a6:	589b      	ldr	r3, [r3, r2]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	4b44      	ldr	r3, [pc, #272]	; (80021c0 <_Z11receiveDatav+0x12c>)
 80020b0:	701a      	strb	r2, [r3, #0]
  index = sizeof(rxBuf) - index;
 80020b2:	4b43      	ldr	r3, [pc, #268]	; (80021c0 <_Z11receiveDatav+0x12c>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	4252      	negs	r2, r2
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4b40      	ldr	r3, [pc, #256]	; (80021c0 <_Z11receiveDatav+0x12c>)
 80020c0:	701a      	strb	r2, [r3, #0]

  if (index >= 11)
 80020c2:	4b3f      	ldr	r3, [pc, #252]	; (80021c0 <_Z11receiveDatav+0x12c>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b0a      	cmp	r3, #10
 80020c8:	d918      	bls.n	80020fc <_Z11receiveDatav+0x68>
  {
    for (int i = 0; i < 11; i++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	2b0a      	cmp	r3, #10
 80020d2:	dc13      	bgt.n	80020fc <_Z11receiveDatav+0x68>
    {
      receiveArray[i] = rxBuf[index - 10 + i];
 80020d4:	4b3a      	ldr	r3, [pc, #232]	; (80021c0 <_Z11receiveDatav+0x12c>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	3b0a      	subs	r3, #10
 80020da:	001a      	movs	r2, r3
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	18d3      	adds	r3, r2, r3
 80020e0:	4a38      	ldr	r2, [pc, #224]	; (80021c4 <_Z11receiveDatav+0x130>)
 80020e2:	5cd1      	ldrb	r1, [r2, r3]
 80020e4:	4a38      	ldr	r2, [pc, #224]	; (80021c8 <_Z11receiveDatav+0x134>)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	18d3      	adds	r3, r2, r3
 80020ea:	1c0a      	adds	r2, r1, #0
 80020ec:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 80020ee:	2001      	movs	r0, #1
 80020f0:	f000 fb5a 	bl	80027a8 <HAL_Delay>
    for (int i = 0; i < 11; i++)
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	3301      	adds	r3, #1
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	e7e8      	b.n	80020ce <_Z11receiveDatav+0x3a>
    }
  }

  for (int i = 0; i < 11; i++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b0a      	cmp	r3, #10
 8002104:	dc22      	bgt.n	800214c <_Z11receiveDatav+0xb8>
  {
    if (receiveArray[i] == 255 && receiveArray[i + 1] == 255)
 8002106:	4a30      	ldr	r2, [pc, #192]	; (80021c8 <_Z11receiveDatav+0x134>)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	18d3      	adds	r3, r2, r3
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2bff      	cmp	r3, #255	; 0xff
 8002110:	d118      	bne.n	8002144 <_Z11receiveDatav+0xb0>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	3301      	adds	r3, #1
 8002116:	4a2c      	ldr	r2, [pc, #176]	; (80021c8 <_Z11receiveDatav+0x134>)
 8002118:	5cd3      	ldrb	r3, [r2, r3]
 800211a:	2bff      	cmp	r3, #255	; 0xff
 800211c:	d112      	bne.n	8002144 <_Z11receiveDatav+0xb0>
    {
      for (int j = 0; j < 6; j++)
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b05      	cmp	r3, #5
 8002126:	dc0d      	bgt.n	8002144 <_Z11receiveDatav+0xb0>
      {
        read[j] = receiveArray[i + j];
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	18d3      	adds	r3, r2, r3
 800212e:	4a26      	ldr	r2, [pc, #152]	; (80021c8 <_Z11receiveDatav+0x134>)
 8002130:	5cd1      	ldrb	r1, [r2, r3]
 8002132:	4a26      	ldr	r2, [pc, #152]	; (80021cc <_Z11receiveDatav+0x138>)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	18d3      	adds	r3, r2, r3
 8002138:	1c0a      	adds	r2, r1, #0
 800213a:	701a      	strb	r2, [r3, #0]
      for (int j = 0; j < 6; j++)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	3301      	adds	r3, #1
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	e7ee      	b.n	8002122 <_Z11receiveDatav+0x8e>
  for (int i = 0; i < 11; i++)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3301      	adds	r3, #1
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	e7d9      	b.n	8002100 <_Z11receiveDatav+0x6c>
      }
    }
  }

  for (int i = 2; i < 5; i++)
 800214c:	2302      	movs	r3, #2
 800214e:	607b      	str	r3, [r7, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b04      	cmp	r3, #4
 8002154:	dc0d      	bgt.n	8002172 <_Z11receiveDatav+0xde>
  {
    checksum += read[i];
 8002156:	4a1d      	ldr	r2, [pc, #116]	; (80021cc <_Z11receiveDatav+0x138>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	18d3      	adds	r3, r2, r3
 800215c:	7819      	ldrb	r1, [r3, #0]
 800215e:	2217      	movs	r2, #23
 8002160:	18bb      	adds	r3, r7, r2
 8002162:	18ba      	adds	r2, r7, r2
 8002164:	7812      	ldrb	r2, [r2, #0]
 8002166:	188a      	adds	r2, r1, r2
 8002168:	701a      	strb	r2, [r3, #0]
  for (int i = 2; i < 5; i++)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3301      	adds	r3, #1
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	e7ee      	b.n	8002150 <_Z11receiveDatav+0xbc>
  }
  checksum += 10;
 8002172:	2117      	movs	r1, #23
 8002174:	187b      	adds	r3, r7, r1
 8002176:	187a      	adds	r2, r7, r1
 8002178:	7812      	ldrb	r2, [r2, #0]
 800217a:	320a      	adds	r2, #10
 800217c:	701a      	strb	r2, [r3, #0]
  checksum %= 256;
 800217e:	187b      	adds	r3, r7, r1
 8002180:	187a      	adds	r2, r7, r1
 8002182:	7812      	ldrb	r2, [r2, #0]
 8002184:	701a      	strb	r2, [r3, #0]

  if (read[5] == checksum)
 8002186:	4b11      	ldr	r3, [pc, #68]	; (80021cc <_Z11receiveDatav+0x138>)
 8002188:	795b      	ldrb	r3, [r3, #5]
 800218a:	187a      	adds	r2, r7, r1
 800218c:	7812      	ldrb	r2, [r2, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d10f      	bne.n	80021b2 <_Z11receiveDatav+0x11e>
  {
	  angle = read[2] * 256 + read[3];
 8002192:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <_Z11receiveDatav+0x138>)
 8002194:	789b      	ldrb	r3, [r3, #2]
 8002196:	b29b      	uxth	r3, r3
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	b29a      	uxth	r2, r3
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <_Z11receiveDatav+0x138>)
 800219e:	78db      	ldrb	r3, [r3, #3]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	18d3      	adds	r3, r2, r3
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <_Z11receiveDatav+0x13c>)
 80021a8:	801a      	strh	r2, [r3, #0]
	  speed = read[4];
 80021aa:	4b08      	ldr	r3, [pc, #32]	; (80021cc <_Z11receiveDatav+0x138>)
 80021ac:	791a      	ldrb	r2, [r3, #4]
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <_Z11receiveDatav+0x140>)
 80021b0:	701a      	strb	r2, [r3, #0]
  }
}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b006      	add	sp, #24
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	20000074 	.word	0x20000074
 80021c0:	20000200 	.word	0x20000200
 80021c4:	20000168 	.word	0x20000168
 80021c8:	200001e8 	.word	0x200001e8
 80021cc:	200001f4 	.word	0x200001f4
 80021d0:	200001fa 	.word	0x200001fa
 80021d4:	200001fc 	.word	0x200001fc

080021d8 <_Z9calcValuev>:

int16_t calcValue(){
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
	float diffRad = (abs(m_angle - angle)) / 180.0 * M_PI;
 80021de:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <_Z9calcValuev+0x78>)
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	001a      	movs	r2, r3
 80021e4:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <_Z9calcValuev+0x7c>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	17da      	asrs	r2, r3, #31
 80021ec:	189b      	adds	r3, r3, r2
 80021ee:	4053      	eors	r3, r2
 80021f0:	0018      	movs	r0, r3
 80021f2:	f7ff fc27 	bl	8001a44 <__aeabi_i2d>
 80021f6:	2200      	movs	r2, #0
 80021f8:	4b17      	ldr	r3, [pc, #92]	; (8002258 <_Z9calcValuev+0x80>)
 80021fa:	f7fe fec1 	bl	8000f80 <__aeabi_ddiv>
 80021fe:	0002      	movs	r2, r0
 8002200:	000b      	movs	r3, r1
 8002202:	0010      	movs	r0, r2
 8002204:	0019      	movs	r1, r3
 8002206:	4a15      	ldr	r2, [pc, #84]	; (800225c <_Z9calcValuev+0x84>)
 8002208:	4b15      	ldr	r3, [pc, #84]	; (8002260 <_Z9calcValuev+0x88>)
 800220a:	f7ff f9af 	bl	800156c <__aeabi_dmul>
 800220e:	0002      	movs	r2, r0
 8002210:	000b      	movs	r3, r1
 8002212:	0010      	movs	r0, r2
 8002214:	0019      	movs	r1, r3
 8002216:	f7ff fc45 	bl	8001aa4 <__aeabi_d2f>
 800221a:	1c03      	adds	r3, r0, #0
 800221c:	607b      	str	r3, [r7, #4]
	return (cos(diffRad) * speed);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	1c18      	adds	r0, r3, #0
 8002222:	f7ff fce5 	bl	8001bf0 <_ZSt3cosf>
 8002226:	1c04      	adds	r4, r0, #0
 8002228:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <_Z9calcValuev+0x8c>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	0018      	movs	r0, r3
 800222e:	f7fe fe59 	bl	8000ee4 <__aeabi_i2f>
 8002232:	1c03      	adds	r3, r0, #0
 8002234:	1c19      	adds	r1, r3, #0
 8002236:	1c20      	adds	r0, r4, #0
 8002238:	f7fe fb60 	bl	80008fc <__aeabi_fmul>
 800223c:	1c03      	adds	r3, r0, #0
 800223e:	1c18      	adds	r0, r3, #0
 8002240:	f7fe fe30 	bl	8000ea4 <__aeabi_f2iz>
 8002244:	0003      	movs	r3, r0
 8002246:	b21b      	sxth	r3, r3
}
 8002248:	0018      	movs	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	b003      	add	sp, #12
 800224e:	bd90      	pop	{r4, r7, pc}
 8002250:	200001fe 	.word	0x200001fe
 8002254:	200001fa 	.word	0x200001fa
 8002258:	40668000 	.word	0x40668000
 800225c:	54442d18 	.word	0x54442d18
 8002260:	400921fb 	.word	0x400921fb
 8002264:	200001fc 	.word	0x200001fc

08002268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800226c:	b672      	cpsid	i
}
 800226e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002270:	e7fe      	b.n	8002270 <Error_Handler+0x8>

08002272 <_ZN5MAXONC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeft>:
#include "maxon.h"

MAXON::MAXON(TIM_HandleTypeDef *htim, uint32_t timChannel, GPIO_TypeDef *gpio, uint16_t shdnPin)
 8002272:	b580      	push	{r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	603b      	str	r3, [r7, #0]
{
  HTIM = htim;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	601a      	str	r2, [r3, #0]
  channel = timChannel;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	605a      	str	r2, [r3, #4]
  GPIO = gpio;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	609a      	str	r2, [r3, #8]
  shdn = shdnPin;
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	2318      	movs	r3, #24
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	8193      	strh	r3, [r2, #12]
  HAL_TIM_PWM_Start(HTIM, channel);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	0019      	movs	r1, r3
 80022a6:	0010      	movs	r0, r2
 80022a8:	f001 fd2e 	bl	8003d08 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(HTIM, channel);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	0019      	movs	r1, r3
 80022b6:	0010      	movs	r0, r2
 80022b8:	f002 fa38 	bl	800472c <HAL_TIMEx_PWMN_Start>
}
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	0018      	movs	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b004      	add	sp, #16
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <_ZN5MAXON4moveEs>:

void MAXON::move(int16_t speed){
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	000a      	movs	r2, r1
 80022d0:	1cbb      	adds	r3, r7, #2
 80022d2:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(HTIM, channel, speed + 320);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10a      	bne.n	80022f2 <_ZN5MAXON4moveEs+0x2c>
 80022dc:	1cbb      	adds	r3, r7, #2
 80022de:	2200      	movs	r2, #0
 80022e0:	5e9b      	ldrsh	r3, [r3, r2]
 80022e2:	3341      	adds	r3, #65	; 0x41
 80022e4:	33ff      	adds	r3, #255	; 0xff
 80022e6:	001a      	movs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	635a      	str	r2, [r3, #52]	; 0x34
 80022f0:	e045      	b.n	800237e <_ZN5MAXON4moveEs+0xb8>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d10a      	bne.n	8002310 <_ZN5MAXON4moveEs+0x4a>
 80022fa:	1cbb      	adds	r3, r7, #2
 80022fc:	2200      	movs	r2, #0
 80022fe:	5e9b      	ldrsh	r3, [r3, r2]
 8002300:	3341      	adds	r3, #65	; 0x41
 8002302:	33ff      	adds	r3, #255	; 0xff
 8002304:	001a      	movs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	639a      	str	r2, [r3, #56]	; 0x38
 800230e:	e036      	b.n	800237e <_ZN5MAXON4moveEs+0xb8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b08      	cmp	r3, #8
 8002316:	d10a      	bne.n	800232e <_ZN5MAXON4moveEs+0x68>
 8002318:	1cbb      	adds	r3, r7, #2
 800231a:	2200      	movs	r2, #0
 800231c:	5e9b      	ldrsh	r3, [r3, r2]
 800231e:	3341      	adds	r3, #65	; 0x41
 8002320:	33ff      	adds	r3, #255	; 0xff
 8002322:	001a      	movs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	63da      	str	r2, [r3, #60]	; 0x3c
 800232c:	e027      	b.n	800237e <_ZN5MAXON4moveEs+0xb8>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b0c      	cmp	r3, #12
 8002334:	d10a      	bne.n	800234c <_ZN5MAXON4moveEs+0x86>
 8002336:	1cbb      	adds	r3, r7, #2
 8002338:	2200      	movs	r2, #0
 800233a:	5e9b      	ldrsh	r3, [r3, r2]
 800233c:	3341      	adds	r3, #65	; 0x41
 800233e:	33ff      	adds	r3, #255	; 0xff
 8002340:	001a      	movs	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
 800234a:	e018      	b.n	800237e <_ZN5MAXON4moveEs+0xb8>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b10      	cmp	r3, #16
 8002352:	d10a      	bne.n	800236a <_ZN5MAXON4moveEs+0xa4>
 8002354:	1cbb      	adds	r3, r7, #2
 8002356:	2200      	movs	r2, #0
 8002358:	5e9b      	ldrsh	r3, [r3, r2]
 800235a:	3341      	adds	r3, #65	; 0x41
 800235c:	33ff      	adds	r3, #255	; 0xff
 800235e:	001a      	movs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	659a      	str	r2, [r3, #88]	; 0x58
 8002368:	e009      	b.n	800237e <_ZN5MAXON4moveEs+0xb8>
 800236a:	1cbb      	adds	r3, r7, #2
 800236c:	2200      	movs	r2, #0
 800236e:	5e9b      	ldrsh	r3, [r3, r2]
 8002370:	3341      	adds	r3, #65	; 0x41
 8002372:	33ff      	adds	r3, #255	; 0xff
 8002374:	001a      	movs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	65da      	str	r2, [r3, #92]	; 0x5c
	if(speed == 0){
 800237e:	1cbb      	adds	r3, r7, #2
 8002380:	2200      	movs	r2, #0
 8002382:	5e9b      	ldrsh	r3, [r3, r2]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d108      	bne.n	800239a <_ZN5MAXON4moveEs+0xd4>
		HAL_GPIO_WritePin(GPIO, shdn, GPIO_PIN_RESET);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6898      	ldr	r0, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	899b      	ldrh	r3, [r3, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	0019      	movs	r1, r3
 8002394:	f000 fedd 	bl	8003152 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIO, shdn, GPIO_PIN_SET);
	}
}
 8002398:	e007      	b.n	80023aa <_ZN5MAXON4moveEs+0xe4>
		HAL_GPIO_WritePin(GPIO, shdn, GPIO_PIN_SET);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6898      	ldr	r0, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	899b      	ldrh	r3, [r3, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	0019      	movs	r1, r3
 80023a6:	f000 fed4 	bl	8003152 <HAL_GPIO_WritePin>
}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b002      	add	sp, #8
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ba:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <HAL_MspInit+0x44>)
 80023bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023be:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <HAL_MspInit+0x44>)
 80023c0:	2101      	movs	r1, #1
 80023c2:	430a      	orrs	r2, r1
 80023c4:	641a      	str	r2, [r3, #64]	; 0x40
 80023c6:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <HAL_MspInit+0x44>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	2201      	movs	r2, #1
 80023cc:	4013      	ands	r3, r2
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <HAL_MspInit+0x44>)
 80023d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <HAL_MspInit+0x44>)
 80023d8:	2180      	movs	r1, #128	; 0x80
 80023da:	0549      	lsls	r1, r1, #21
 80023dc:	430a      	orrs	r2, r1
 80023de:	63da      	str	r2, [r3, #60]	; 0x3c
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_MspInit+0x44>)
 80023e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	055b      	lsls	r3, r3, #21
 80023e8:	4013      	ands	r3, r2
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b002      	add	sp, #8
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	40021000 	.word	0x40021000

080023fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <HAL_TIM_Base_MspInit+0x38>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d10d      	bne.n	800242a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <HAL_TIM_Base_MspInit+0x3c>)
 8002410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_TIM_Base_MspInit+0x3c>)
 8002414:	2180      	movs	r1, #128	; 0x80
 8002416:	0289      	lsls	r1, r1, #10
 8002418:	430a      	orrs	r2, r1
 800241a:	641a      	str	r2, [r3, #64]	; 0x40
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_TIM_Base_MspInit+0x3c>)
 800241e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	029b      	lsls	r3, r3, #10
 8002424:	4013      	ands	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	46bd      	mov	sp, r7
 800242e:	b004      	add	sp, #16
 8002430:	bd80      	pop	{r7, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	40014400 	.word	0x40014400
 8002438:	40021000 	.word	0x40021000

0800243c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b08b      	sub	sp, #44	; 0x2c
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	2414      	movs	r4, #20
 8002446:	193b      	adds	r3, r7, r4
 8002448:	0018      	movs	r0, r3
 800244a:	2314      	movs	r3, #20
 800244c:	001a      	movs	r2, r3
 800244e:	2100      	movs	r1, #0
 8002450:	f003 ff00 	bl	8006254 <memset>
  if(htim->Instance==TIM16)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a25      	ldr	r2, [pc, #148]	; (80024f0 <HAL_TIM_MspPostInit+0xb4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d143      	bne.n	80024e6 <HAL_TIM_MspPostInit+0xaa>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245e:	4b25      	ldr	r3, [pc, #148]	; (80024f4 <HAL_TIM_MspPostInit+0xb8>)
 8002460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002462:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <HAL_TIM_MspPostInit+0xb8>)
 8002464:	2101      	movs	r1, #1
 8002466:	430a      	orrs	r2, r1
 8002468:	635a      	str	r2, [r3, #52]	; 0x34
 800246a:	4b22      	ldr	r3, [pc, #136]	; (80024f4 <HAL_TIM_MspPostInit+0xb8>)
 800246c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246e:	2201      	movs	r2, #1
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002476:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <HAL_TIM_MspPostInit+0xb8>)
 8002478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800247a:	4b1e      	ldr	r3, [pc, #120]	; (80024f4 <HAL_TIM_MspPostInit+0xb8>)
 800247c:	2102      	movs	r1, #2
 800247e:	430a      	orrs	r2, r1
 8002480:	635a      	str	r2, [r3, #52]	; 0x34
 8002482:	4b1c      	ldr	r3, [pc, #112]	; (80024f4 <HAL_TIM_MspPostInit+0xb8>)
 8002484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002486:	2202      	movs	r2, #2
 8002488:	4013      	ands	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    PB6     ------> TIM16_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800248e:	193b      	adds	r3, r7, r4
 8002490:	2240      	movs	r2, #64	; 0x40
 8002492:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002494:	193b      	adds	r3, r7, r4
 8002496:	2202      	movs	r2, #2
 8002498:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	193b      	adds	r3, r7, r4
 800249c:	2200      	movs	r2, #0
 800249e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	193b      	adds	r3, r7, r4
 80024a2:	2200      	movs	r2, #0
 80024a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 80024a6:	193b      	adds	r3, r7, r4
 80024a8:	2205      	movs	r2, #5
 80024aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ac:	193a      	adds	r2, r7, r4
 80024ae:	23a0      	movs	r3, #160	; 0xa0
 80024b0:	05db      	lsls	r3, r3, #23
 80024b2:	0011      	movs	r1, r2
 80024b4:	0018      	movs	r0, r3
 80024b6:	f000 fccb 	bl	8002e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024ba:	0021      	movs	r1, r4
 80024bc:	187b      	adds	r3, r7, r1
 80024be:	2240      	movs	r2, #64	; 0x40
 80024c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c2:	187b      	adds	r3, r7, r1
 80024c4:	2202      	movs	r2, #2
 80024c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	187b      	adds	r3, r7, r1
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ce:	187b      	adds	r3, r7, r1
 80024d0:	2200      	movs	r2, #0
 80024d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 80024d4:	187b      	adds	r3, r7, r1
 80024d6:	2202      	movs	r2, #2
 80024d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024da:	187b      	adds	r3, r7, r1
 80024dc:	4a06      	ldr	r2, [pc, #24]	; (80024f8 <HAL_TIM_MspPostInit+0xbc>)
 80024de:	0019      	movs	r1, r3
 80024e0:	0010      	movs	r0, r2
 80024e2:	f000 fcb5 	bl	8002e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b00b      	add	sp, #44	; 0x2c
 80024ec:	bd90      	pop	{r4, r7, pc}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	40014400 	.word	0x40014400
 80024f4:	40021000 	.word	0x40021000
 80024f8:	50000400 	.word	0x50000400

080024fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024fc:	b590      	push	{r4, r7, lr}
 80024fe:	b08b      	sub	sp, #44	; 0x2c
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	2414      	movs	r4, #20
 8002506:	193b      	adds	r3, r7, r4
 8002508:	0018      	movs	r0, r3
 800250a:	2314      	movs	r3, #20
 800250c:	001a      	movs	r2, r3
 800250e:	2100      	movs	r1, #0
 8002510:	f003 fea0 	bl	8006254 <memset>
  if(huart->Instance==USART2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a31      	ldr	r2, [pc, #196]	; (80025e0 <HAL_UART_MspInit+0xe4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d15b      	bne.n	80025d6 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800251e:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <HAL_UART_MspInit+0xe8>)
 8002520:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002522:	4b30      	ldr	r3, [pc, #192]	; (80025e4 <HAL_UART_MspInit+0xe8>)
 8002524:	2180      	movs	r1, #128	; 0x80
 8002526:	0289      	lsls	r1, r1, #10
 8002528:	430a      	orrs	r2, r1
 800252a:	63da      	str	r2, [r3, #60]	; 0x3c
 800252c:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <HAL_UART_MspInit+0xe8>)
 800252e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	029b      	lsls	r3, r3, #10
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253a:	4b2a      	ldr	r3, [pc, #168]	; (80025e4 <HAL_UART_MspInit+0xe8>)
 800253c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800253e:	4b29      	ldr	r3, [pc, #164]	; (80025e4 <HAL_UART_MspInit+0xe8>)
 8002540:	2101      	movs	r1, #1
 8002542:	430a      	orrs	r2, r1
 8002544:	635a      	str	r2, [r3, #52]	; 0x34
 8002546:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <HAL_UART_MspInit+0xe8>)
 8002548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254a:	2201      	movs	r2, #1
 800254c:	4013      	ands	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8002552:	0021      	movs	r1, r4
 8002554:	187b      	adds	r3, r7, r1
 8002556:	4a24      	ldr	r2, [pc, #144]	; (80025e8 <HAL_UART_MspInit+0xec>)
 8002558:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	187b      	adds	r3, r7, r1
 800255c:	2202      	movs	r2, #2
 800255e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	187b      	adds	r3, r7, r1
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002566:	187b      	adds	r3, r7, r1
 8002568:	2200      	movs	r2, #0
 800256a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800256c:	187b      	adds	r3, r7, r1
 800256e:	2201      	movs	r2, #1
 8002570:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002572:	187a      	adds	r2, r7, r1
 8002574:	23a0      	movs	r3, #160	; 0xa0
 8002576:	05db      	lsls	r3, r3, #23
 8002578:	0011      	movs	r1, r2
 800257a:	0018      	movs	r0, r3
 800257c:	f000 fc68 	bl	8002e50 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8002580:	4b1a      	ldr	r3, [pc, #104]	; (80025ec <HAL_UART_MspInit+0xf0>)
 8002582:	4a1b      	ldr	r2, [pc, #108]	; (80025f0 <HAL_UART_MspInit+0xf4>)
 8002584:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002586:	4b19      	ldr	r3, [pc, #100]	; (80025ec <HAL_UART_MspInit+0xf0>)
 8002588:	2234      	movs	r2, #52	; 0x34
 800258a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800258c:	4b17      	ldr	r3, [pc, #92]	; (80025ec <HAL_UART_MspInit+0xf0>)
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002592:	4b16      	ldr	r3, [pc, #88]	; (80025ec <HAL_UART_MspInit+0xf0>)
 8002594:	2200      	movs	r2, #0
 8002596:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002598:	4b14      	ldr	r3, [pc, #80]	; (80025ec <HAL_UART_MspInit+0xf0>)
 800259a:	2280      	movs	r2, #128	; 0x80
 800259c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800259e:	4b13      	ldr	r3, [pc, #76]	; (80025ec <HAL_UART_MspInit+0xf0>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025a4:	4b11      	ldr	r3, [pc, #68]	; (80025ec <HAL_UART_MspInit+0xf0>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80025aa:	4b10      	ldr	r3, [pc, #64]	; (80025ec <HAL_UART_MspInit+0xf0>)
 80025ac:	2220      	movs	r2, #32
 80025ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80025b0:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <HAL_UART_MspInit+0xf0>)
 80025b2:	2280      	movs	r2, #128	; 0x80
 80025b4:	0192      	lsls	r2, r2, #6
 80025b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <HAL_UART_MspInit+0xf0>)
 80025ba:	0018      	movs	r0, r3
 80025bc:	f000 f9f6 	bl	80029ac <HAL_DMA_Init>
 80025c0:	1e03      	subs	r3, r0, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80025c4:	f7ff fe50 	bl	8002268 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2180      	movs	r1, #128	; 0x80
 80025cc:	4a07      	ldr	r2, [pc, #28]	; (80025ec <HAL_UART_MspInit+0xf0>)
 80025ce:	505a      	str	r2, [r3, r1]
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_UART_MspInit+0xf0>)
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	46bd      	mov	sp, r7
 80025da:	b00b      	add	sp, #44	; 0x2c
 80025dc:	bd90      	pop	{r4, r7, pc}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	40004400 	.word	0x40004400
 80025e4:	40021000 	.word	0x40021000
 80025e8:	00008004 	.word	0x00008004
 80025ec:	20000108 	.word	0x20000108
 80025f0:	40020008 	.word	0x40020008

080025f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <NMI_Handler+0x4>

080025fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025fe:	e7fe      	b.n	80025fe <HardFault_Handler+0x4>

08002600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002604:	46c0      	nop			; (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002618:	f000 f8aa 	bl	8002770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800261c:	46c0      	nop			; (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <DMA1_Channel1_IRQHandler+0x14>)
 800262a:	0018      	movs	r0, r3
 800262c:	f000 face 	bl	8002bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	20000108 	.word	0x20000108

0800263c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002640:	46c0      	nop			; (mov r8, r8)
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002648:	480d      	ldr	r0, [pc, #52]	; (8002680 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800264a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800264c:	f7ff fff6 	bl	800263c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002650:	480c      	ldr	r0, [pc, #48]	; (8002684 <LoopForever+0x6>)
  ldr r1, =_edata
 8002652:	490d      	ldr	r1, [pc, #52]	; (8002688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002654:	4a0d      	ldr	r2, [pc, #52]	; (800268c <LoopForever+0xe>)
  movs r3, #0
 8002656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002658:	e002      	b.n	8002660 <LoopCopyDataInit>

0800265a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800265a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800265c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800265e:	3304      	adds	r3, #4

08002660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002664:	d3f9      	bcc.n	800265a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002666:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002668:	4c0a      	ldr	r4, [pc, #40]	; (8002694 <LoopForever+0x16>)
  movs r3, #0
 800266a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800266c:	e001      	b.n	8002672 <LoopFillZerobss>

0800266e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800266e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002670:	3204      	adds	r2, #4

08002672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002674:	d3fb      	bcc.n	800266e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002676:	f003 fdc9 	bl	800620c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800267a:	f7ff fac7 	bl	8001c0c <main>

0800267e <LoopForever>:

LoopForever:
  b LoopForever
 800267e:	e7fe      	b.n	800267e <LoopForever>
  ldr   r0, =_estack
 8002680:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002688:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800268c:	080067e0 	.word	0x080067e0
  ldr r2, =_sbss
 8002690:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002694:	20000208 	.word	0x20000208

08002698 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002698:	e7fe      	b.n	8002698 <ADC1_IRQHandler>
	...

0800269c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026a2:	1dfb      	adds	r3, r7, #7
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_Init+0x3c>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <HAL_Init+0x3c>)
 80026ae:	2180      	movs	r1, #128	; 0x80
 80026b0:	0049      	lsls	r1, r1, #1
 80026b2:	430a      	orrs	r2, r1
 80026b4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026b6:	2003      	movs	r0, #3
 80026b8:	f000 f810 	bl	80026dc <HAL_InitTick>
 80026bc:	1e03      	subs	r3, r0, #0
 80026be:	d003      	beq.n	80026c8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80026c0:	1dfb      	adds	r3, r7, #7
 80026c2:	2201      	movs	r2, #1
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	e001      	b.n	80026cc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80026c8:	f7ff fe74 	bl	80023b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026cc:	1dfb      	adds	r3, r7, #7
 80026ce:	781b      	ldrb	r3, [r3, #0]
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b002      	add	sp, #8
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40022000 	.word	0x40022000

080026dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026dc:	b590      	push	{r4, r7, lr}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026e4:	230f      	movs	r3, #15
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80026ec:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <HAL_InitTick+0x88>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d02b      	beq.n	800274c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80026f4:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <HAL_InitTick+0x8c>)
 80026f6:	681c      	ldr	r4, [r3, #0]
 80026f8:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <HAL_InitTick+0x88>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	0019      	movs	r1, r3
 80026fe:	23fa      	movs	r3, #250	; 0xfa
 8002700:	0098      	lsls	r0, r3, #2
 8002702:	f7fd fcfd 	bl	8000100 <__udivsi3>
 8002706:	0003      	movs	r3, r0
 8002708:	0019      	movs	r1, r3
 800270a:	0020      	movs	r0, r4
 800270c:	f7fd fcf8 	bl	8000100 <__udivsi3>
 8002710:	0003      	movs	r3, r0
 8002712:	0018      	movs	r0, r3
 8002714:	f000 f93d 	bl	8002992 <HAL_SYSTICK_Config>
 8002718:	1e03      	subs	r3, r0, #0
 800271a:	d112      	bne.n	8002742 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b03      	cmp	r3, #3
 8002720:	d80a      	bhi.n	8002738 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	2301      	movs	r3, #1
 8002726:	425b      	negs	r3, r3
 8002728:	2200      	movs	r2, #0
 800272a:	0018      	movs	r0, r3
 800272c:	f000 f90c 	bl	8002948 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002730:	4b0e      	ldr	r3, [pc, #56]	; (800276c <HAL_InitTick+0x90>)
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e00d      	b.n	8002754 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002738:	230f      	movs	r3, #15
 800273a:	18fb      	adds	r3, r7, r3
 800273c:	2201      	movs	r2, #1
 800273e:	701a      	strb	r2, [r3, #0]
 8002740:	e008      	b.n	8002754 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002742:	230f      	movs	r3, #15
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	2201      	movs	r2, #1
 8002748:	701a      	strb	r2, [r3, #0]
 800274a:	e003      	b.n	8002754 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800274c:	230f      	movs	r3, #15
 800274e:	18fb      	adds	r3, r7, r3
 8002750:	2201      	movs	r2, #1
 8002752:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002754:	230f      	movs	r3, #15
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	781b      	ldrb	r3, [r3, #0]
}
 800275a:	0018      	movs	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	b005      	add	sp, #20
 8002760:	bd90      	pop	{r4, r7, pc}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	20000008 	.word	0x20000008
 8002768:	20000000 	.word	0x20000000
 800276c:	20000004 	.word	0x20000004

08002770 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_IncTick+0x1c>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	001a      	movs	r2, r3
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_IncTick+0x20>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	18d2      	adds	r2, r2, r3
 8002780:	4b03      	ldr	r3, [pc, #12]	; (8002790 <HAL_IncTick+0x20>)
 8002782:	601a      	str	r2, [r3, #0]
}
 8002784:	46c0      	nop			; (mov r8, r8)
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	20000008 	.word	0x20000008
 8002790:	20000204 	.word	0x20000204

08002794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  return uwTick;
 8002798:	4b02      	ldr	r3, [pc, #8]	; (80027a4 <HAL_GetTick+0x10>)
 800279a:	681b      	ldr	r3, [r3, #0]
}
 800279c:	0018      	movs	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	20000204 	.word	0x20000204

080027a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027b0:	f7ff fff0 	bl	8002794 <HAL_GetTick>
 80027b4:	0003      	movs	r3, r0
 80027b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3301      	adds	r3, #1
 80027c0:	d005      	beq.n	80027ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027c2:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <HAL_Delay+0x44>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	001a      	movs	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	189b      	adds	r3, r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	f7ff ffe0 	bl	8002794 <HAL_GetTick>
 80027d4:	0002      	movs	r2, r0
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d8f7      	bhi.n	80027d0 <HAL_Delay+0x28>
  {
  }
}
 80027e0:	46c0      	nop			; (mov r8, r8)
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b004      	add	sp, #16
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	20000008 	.word	0x20000008

080027f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	0002      	movs	r2, r0
 80027f8:	1dfb      	adds	r3, r7, #7
 80027fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027fc:	1dfb      	adds	r3, r7, #7
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b7f      	cmp	r3, #127	; 0x7f
 8002802:	d809      	bhi.n	8002818 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002804:	1dfb      	adds	r3, r7, #7
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	001a      	movs	r2, r3
 800280a:	231f      	movs	r3, #31
 800280c:	401a      	ands	r2, r3
 800280e:	4b04      	ldr	r3, [pc, #16]	; (8002820 <__NVIC_EnableIRQ+0x30>)
 8002810:	2101      	movs	r1, #1
 8002812:	4091      	lsls	r1, r2
 8002814:	000a      	movs	r2, r1
 8002816:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002818:	46c0      	nop			; (mov r8, r8)
 800281a:	46bd      	mov	sp, r7
 800281c:	b002      	add	sp, #8
 800281e:	bd80      	pop	{r7, pc}
 8002820:	e000e100 	.word	0xe000e100

08002824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002824:	b590      	push	{r4, r7, lr}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	0002      	movs	r2, r0
 800282c:	6039      	str	r1, [r7, #0]
 800282e:	1dfb      	adds	r3, r7, #7
 8002830:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002832:	1dfb      	adds	r3, r7, #7
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b7f      	cmp	r3, #127	; 0x7f
 8002838:	d828      	bhi.n	800288c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800283a:	4a2f      	ldr	r2, [pc, #188]	; (80028f8 <__NVIC_SetPriority+0xd4>)
 800283c:	1dfb      	adds	r3, r7, #7
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	b25b      	sxtb	r3, r3
 8002842:	089b      	lsrs	r3, r3, #2
 8002844:	33c0      	adds	r3, #192	; 0xc0
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	589b      	ldr	r3, [r3, r2]
 800284a:	1dfa      	adds	r2, r7, #7
 800284c:	7812      	ldrb	r2, [r2, #0]
 800284e:	0011      	movs	r1, r2
 8002850:	2203      	movs	r2, #3
 8002852:	400a      	ands	r2, r1
 8002854:	00d2      	lsls	r2, r2, #3
 8002856:	21ff      	movs	r1, #255	; 0xff
 8002858:	4091      	lsls	r1, r2
 800285a:	000a      	movs	r2, r1
 800285c:	43d2      	mvns	r2, r2
 800285e:	401a      	ands	r2, r3
 8002860:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	019b      	lsls	r3, r3, #6
 8002866:	22ff      	movs	r2, #255	; 0xff
 8002868:	401a      	ands	r2, r3
 800286a:	1dfb      	adds	r3, r7, #7
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	0018      	movs	r0, r3
 8002870:	2303      	movs	r3, #3
 8002872:	4003      	ands	r3, r0
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002878:	481f      	ldr	r0, [pc, #124]	; (80028f8 <__NVIC_SetPriority+0xd4>)
 800287a:	1dfb      	adds	r3, r7, #7
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	b25b      	sxtb	r3, r3
 8002880:	089b      	lsrs	r3, r3, #2
 8002882:	430a      	orrs	r2, r1
 8002884:	33c0      	adds	r3, #192	; 0xc0
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800288a:	e031      	b.n	80028f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800288c:	4a1b      	ldr	r2, [pc, #108]	; (80028fc <__NVIC_SetPriority+0xd8>)
 800288e:	1dfb      	adds	r3, r7, #7
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	0019      	movs	r1, r3
 8002894:	230f      	movs	r3, #15
 8002896:	400b      	ands	r3, r1
 8002898:	3b08      	subs	r3, #8
 800289a:	089b      	lsrs	r3, r3, #2
 800289c:	3306      	adds	r3, #6
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	18d3      	adds	r3, r2, r3
 80028a2:	3304      	adds	r3, #4
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	1dfa      	adds	r2, r7, #7
 80028a8:	7812      	ldrb	r2, [r2, #0]
 80028aa:	0011      	movs	r1, r2
 80028ac:	2203      	movs	r2, #3
 80028ae:	400a      	ands	r2, r1
 80028b0:	00d2      	lsls	r2, r2, #3
 80028b2:	21ff      	movs	r1, #255	; 0xff
 80028b4:	4091      	lsls	r1, r2
 80028b6:	000a      	movs	r2, r1
 80028b8:	43d2      	mvns	r2, r2
 80028ba:	401a      	ands	r2, r3
 80028bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	019b      	lsls	r3, r3, #6
 80028c2:	22ff      	movs	r2, #255	; 0xff
 80028c4:	401a      	ands	r2, r3
 80028c6:	1dfb      	adds	r3, r7, #7
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	0018      	movs	r0, r3
 80028cc:	2303      	movs	r3, #3
 80028ce:	4003      	ands	r3, r0
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028d4:	4809      	ldr	r0, [pc, #36]	; (80028fc <__NVIC_SetPriority+0xd8>)
 80028d6:	1dfb      	adds	r3, r7, #7
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	001c      	movs	r4, r3
 80028dc:	230f      	movs	r3, #15
 80028de:	4023      	ands	r3, r4
 80028e0:	3b08      	subs	r3, #8
 80028e2:	089b      	lsrs	r3, r3, #2
 80028e4:	430a      	orrs	r2, r1
 80028e6:	3306      	adds	r3, #6
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	18c3      	adds	r3, r0, r3
 80028ec:	3304      	adds	r3, #4
 80028ee:	601a      	str	r2, [r3, #0]
}
 80028f0:	46c0      	nop			; (mov r8, r8)
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b003      	add	sp, #12
 80028f6:	bd90      	pop	{r4, r7, pc}
 80028f8:	e000e100 	.word	0xe000e100
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	1e5a      	subs	r2, r3, #1
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	045b      	lsls	r3, r3, #17
 8002910:	429a      	cmp	r2, r3
 8002912:	d301      	bcc.n	8002918 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002914:	2301      	movs	r3, #1
 8002916:	e010      	b.n	800293a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <SysTick_Config+0x44>)
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	3a01      	subs	r2, #1
 800291e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002920:	2301      	movs	r3, #1
 8002922:	425b      	negs	r3, r3
 8002924:	2103      	movs	r1, #3
 8002926:	0018      	movs	r0, r3
 8002928:	f7ff ff7c 	bl	8002824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <SysTick_Config+0x44>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002932:	4b04      	ldr	r3, [pc, #16]	; (8002944 <SysTick_Config+0x44>)
 8002934:	2207      	movs	r2, #7
 8002936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002938:	2300      	movs	r3, #0
}
 800293a:	0018      	movs	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	b002      	add	sp, #8
 8002940:	bd80      	pop	{r7, pc}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	e000e010 	.word	0xe000e010

08002948 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	210f      	movs	r1, #15
 8002954:	187b      	adds	r3, r7, r1
 8002956:	1c02      	adds	r2, r0, #0
 8002958:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	187b      	adds	r3, r7, r1
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	b25b      	sxtb	r3, r3
 8002962:	0011      	movs	r1, r2
 8002964:	0018      	movs	r0, r3
 8002966:	f7ff ff5d 	bl	8002824 <__NVIC_SetPriority>
}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	46bd      	mov	sp, r7
 800296e:	b004      	add	sp, #16
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	0002      	movs	r2, r0
 800297a:	1dfb      	adds	r3, r7, #7
 800297c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800297e:	1dfb      	adds	r3, r7, #7
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	b25b      	sxtb	r3, r3
 8002984:	0018      	movs	r0, r3
 8002986:	f7ff ff33 	bl	80027f0 <__NVIC_EnableIRQ>
}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	46bd      	mov	sp, r7
 800298e:	b002      	add	sp, #8
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	0018      	movs	r0, r3
 800299e:	f7ff ffaf 	bl	8002900 <SysTick_Config>
 80029a2:	0003      	movs	r3, r0
}
 80029a4:	0018      	movs	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b002      	add	sp, #8
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e077      	b.n	8002aae <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a3d      	ldr	r2, [pc, #244]	; (8002ab8 <HAL_DMA_Init+0x10c>)
 80029c4:	4694      	mov	ip, r2
 80029c6:	4463      	add	r3, ip
 80029c8:	2114      	movs	r1, #20
 80029ca:	0018      	movs	r0, r3
 80029cc:	f7fd fb98 	bl	8000100 <__udivsi3>
 80029d0:	0003      	movs	r3, r0
 80029d2:	009a      	lsls	r2, r3, #2
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2225      	movs	r2, #37	; 0x25
 80029dc:	2102      	movs	r1, #2
 80029de:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4934      	ldr	r1, [pc, #208]	; (8002abc <HAL_DMA_Init+0x110>)
 80029ec:	400a      	ands	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6819      	ldr	r1, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f000 f9c1 	bl	8002db0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	2380      	movs	r3, #128	; 0x80
 8002a34:	01db      	lsls	r3, r3, #7
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d102      	bne.n	8002a40 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a48:	213f      	movs	r1, #63	; 0x3f
 8002a4a:	400a      	ands	r2, r1
 8002a4c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a56:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d011      	beq.n	8002a84 <HAL_DMA_Init+0xd8>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d80d      	bhi.n	8002a84 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f000 f9cc 	bl	8002e08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	e008      	b.n	8002a96 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2225      	movs	r2, #37	; 0x25
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2224      	movs	r2, #36	; 0x24
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	0018      	movs	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b002      	add	sp, #8
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	bffdfff8 	.word	0xbffdfff8
 8002abc:	ffff800f 	.word	0xffff800f

08002ac0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ace:	2317      	movs	r3, #23
 8002ad0:	18fb      	adds	r3, r7, r3
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2224      	movs	r2, #36	; 0x24
 8002ada:	5c9b      	ldrb	r3, [r3, r2]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_DMA_Start_IT+0x24>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e06f      	b.n	8002bc4 <HAL_DMA_Start_IT+0x104>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2224      	movs	r2, #36	; 0x24
 8002ae8:	2101      	movs	r1, #1
 8002aea:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2225      	movs	r2, #37	; 0x25
 8002af0:	5c9b      	ldrb	r3, [r3, r2]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d157      	bne.n	8002ba8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2225      	movs	r2, #37	; 0x25
 8002afc:	2102      	movs	r1, #2
 8002afe:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2101      	movs	r1, #1
 8002b12:	438a      	bics	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	68b9      	ldr	r1, [r7, #8]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f907 	bl	8002d30 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d008      	beq.n	8002b3c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	210e      	movs	r1, #14
 8002b36:	430a      	orrs	r2, r1
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	e00f      	b.n	8002b5c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2104      	movs	r1, #4
 8002b48:	438a      	bics	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	210a      	movs	r1, #10
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	2380      	movs	r3, #128	; 0x80
 8002b64:	025b      	lsls	r3, r3, #9
 8002b66:	4013      	ands	r3, r2
 8002b68:	d008      	beq.n	8002b7c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b74:	2180      	movs	r1, #128	; 0x80
 8002b76:	0049      	lsls	r1, r1, #1
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8e:	2180      	movs	r1, #128	; 0x80
 8002b90:	0049      	lsls	r1, r1, #1
 8002b92:	430a      	orrs	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e00a      	b.n	8002bbe <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2280      	movs	r2, #128	; 0x80
 8002bac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2224      	movs	r2, #36	; 0x24
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002bb6:	2317      	movs	r3, #23
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	2201      	movs	r2, #1
 8002bbc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002bbe:	2317      	movs	r3, #23
 8002bc0:	18fb      	adds	r3, r7, r3
 8002bc2:	781b      	ldrb	r3, [r3, #0]
}
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b006      	add	sp, #24
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002bd4:	4b55      	ldr	r3, [pc, #340]	; (8002d2c <HAL_DMA_IRQHandler+0x160>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	221c      	movs	r2, #28
 8002be8:	4013      	ands	r3, r2
 8002bea:	2204      	movs	r2, #4
 8002bec:	409a      	lsls	r2, r3
 8002bee:	0013      	movs	r3, r2
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d027      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x7a>
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d023      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2220      	movs	r2, #32
 8002c06:	4013      	ands	r3, r2
 8002c08:	d107      	bne.n	8002c1a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2104      	movs	r1, #4
 8002c16:	438a      	bics	r2, r1
 8002c18:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002c1a:	4b44      	ldr	r3, [pc, #272]	; (8002d2c <HAL_DMA_IRQHandler+0x160>)
 8002c1c:	6859      	ldr	r1, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	221c      	movs	r2, #28
 8002c24:	4013      	ands	r3, r2
 8002c26:	2204      	movs	r2, #4
 8002c28:	409a      	lsls	r2, r3
 8002c2a:	4b40      	ldr	r3, [pc, #256]	; (8002d2c <HAL_DMA_IRQHandler+0x160>)
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d100      	bne.n	8002c3a <HAL_DMA_IRQHandler+0x6e>
 8002c38:	e073      	b.n	8002d22 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	0010      	movs	r0, r2
 8002c42:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002c44:	e06d      	b.n	8002d22 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	221c      	movs	r2, #28
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2202      	movs	r2, #2
 8002c50:	409a      	lsls	r2, r3
 8002c52:	0013      	movs	r3, r2
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4013      	ands	r3, r2
 8002c58:	d02e      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0xec>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d02a      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d10b      	bne.n	8002c86 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	210a      	movs	r1, #10
 8002c7a:	438a      	bics	r2, r1
 8002c7c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2225      	movs	r2, #37	; 0x25
 8002c82:	2101      	movs	r1, #1
 8002c84:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002c86:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <HAL_DMA_IRQHandler+0x160>)
 8002c88:	6859      	ldr	r1, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	221c      	movs	r2, #28
 8002c90:	4013      	ands	r3, r2
 8002c92:	2202      	movs	r2, #2
 8002c94:	409a      	lsls	r2, r3
 8002c96:	4b25      	ldr	r3, [pc, #148]	; (8002d2c <HAL_DMA_IRQHandler+0x160>)
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2224      	movs	r2, #36	; 0x24
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d03a      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	0010      	movs	r0, r2
 8002cb4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002cb6:	e034      	b.n	8002d22 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	221c      	movs	r2, #28
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2208      	movs	r2, #8
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	0013      	movs	r3, r2
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d02b      	beq.n	8002d24 <HAL_DMA_IRQHandler+0x158>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2208      	movs	r2, #8
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d027      	beq.n	8002d24 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	210e      	movs	r1, #14
 8002ce0:	438a      	bics	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002ce4:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <HAL_DMA_IRQHandler+0x160>)
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	221c      	movs	r2, #28
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <HAL_DMA_IRQHandler+0x160>)
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2225      	movs	r2, #37	; 0x25
 8002d04:	2101      	movs	r1, #1
 8002d06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2224      	movs	r2, #36	; 0x24
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	0010      	movs	r0, r2
 8002d20:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	46c0      	nop			; (mov r8, r8)
}
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b004      	add	sp, #16
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40020000 	.word	0x40020000

08002d30 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002d46:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d004      	beq.n	8002d5a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002d58:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002d5a:	4b14      	ldr	r3, [pc, #80]	; (8002dac <DMA_SetConfig+0x7c>)
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	221c      	movs	r2, #28
 8002d64:	4013      	ands	r3, r2
 8002d66:	2201      	movs	r2, #1
 8002d68:	409a      	lsls	r2, r3
 8002d6a:	4b10      	ldr	r3, [pc, #64]	; (8002dac <DMA_SetConfig+0x7c>)
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d108      	bne.n	8002d92 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d90:	e007      	b.n	8002da2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	60da      	str	r2, [r3, #12]
}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b004      	add	sp, #16
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	40020000 	.word	0x40020000

08002db0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	089b      	lsrs	r3, r3, #2
 8002dbe:	4a10      	ldr	r2, [pc, #64]	; (8002e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002dc0:	4694      	mov	ip, r2
 8002dc2:	4463      	add	r3, ip
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	001a      	movs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	001a      	movs	r2, r3
 8002dd2:	23ff      	movs	r3, #255	; 0xff
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	3b08      	subs	r3, #8
 8002dd8:	2114      	movs	r1, #20
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f7fd f990 	bl	8000100 <__udivsi3>
 8002de0:	0003      	movs	r3, r0
 8002de2:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a07      	ldr	r2, [pc, #28]	; (8002e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002de8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	221f      	movs	r2, #31
 8002dee:	4013      	ands	r3, r2
 8002df0:	2201      	movs	r2, #1
 8002df2:	409a      	lsls	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002df8:	46c0      	nop			; (mov r8, r8)
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b004      	add	sp, #16
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	10008200 	.word	0x10008200
 8002e04:	40020880 	.word	0x40020880

08002e08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	223f      	movs	r2, #63	; 0x3f
 8002e16:	4013      	ands	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4a0a      	ldr	r2, [pc, #40]	; (8002e48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002e1e:	4694      	mov	ip, r2
 8002e20:	4463      	add	r3, ip
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	001a      	movs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a07      	ldr	r2, [pc, #28]	; (8002e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	2203      	movs	r2, #3
 8002e36:	4013      	ands	r3, r2
 8002e38:	2201      	movs	r2, #1
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002e40:	46c0      	nop			; (mov r8, r8)
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b004      	add	sp, #16
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	1000823f 	.word	0x1000823f
 8002e4c:	40020940 	.word	0x40020940

08002e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e5e:	e147      	b.n	80030f0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2101      	movs	r1, #1
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4091      	lsls	r1, r2
 8002e6a:	000a      	movs	r2, r1
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d100      	bne.n	8002e78 <HAL_GPIO_Init+0x28>
 8002e76:	e138      	b.n	80030ea <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d005      	beq.n	8002e90 <HAL_GPIO_Init+0x40>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2203      	movs	r2, #3
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d130      	bne.n	8002ef2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	409a      	lsls	r2, r3
 8002e9e:	0013      	movs	r3, r2
 8002ea0:	43da      	mvns	r2, r3
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	0013      	movs	r3, r2
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	0013      	movs	r3, r2
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	091b      	lsrs	r3, r3, #4
 8002edc:	2201      	movs	r2, #1
 8002ede:	401a      	ands	r2, r3
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	0013      	movs	r3, r2
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d017      	beq.n	8002f2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	2203      	movs	r2, #3
 8002f0a:	409a      	lsls	r2, r3
 8002f0c:	0013      	movs	r3, r2
 8002f0e:	43da      	mvns	r2, r3
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4013      	ands	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	0013      	movs	r3, r2
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2203      	movs	r2, #3
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d123      	bne.n	8002f82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	08da      	lsrs	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3208      	adds	r2, #8
 8002f42:	0092      	lsls	r2, r2, #2
 8002f44:	58d3      	ldr	r3, [r2, r3]
 8002f46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2207      	movs	r2, #7
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	220f      	movs	r2, #15
 8002f52:	409a      	lsls	r2, r3
 8002f54:	0013      	movs	r3, r2
 8002f56:	43da      	mvns	r2, r3
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2107      	movs	r1, #7
 8002f66:	400b      	ands	r3, r1
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	0013      	movs	r3, r2
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	08da      	lsrs	r2, r3, #3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3208      	adds	r2, #8
 8002f7c:	0092      	lsls	r2, r2, #2
 8002f7e:	6939      	ldr	r1, [r7, #16]
 8002f80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	409a      	lsls	r2, r3
 8002f90:	0013      	movs	r3, r2
 8002f92:	43da      	mvns	r2, r3
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4013      	ands	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	401a      	ands	r2, r3
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	0013      	movs	r3, r2
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	23c0      	movs	r3, #192	; 0xc0
 8002fbc:	029b      	lsls	r3, r3, #10
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d100      	bne.n	8002fc4 <HAL_GPIO_Init+0x174>
 8002fc2:	e092      	b.n	80030ea <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002fc4:	4a50      	ldr	r2, [pc, #320]	; (8003108 <HAL_GPIO_Init+0x2b8>)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	089b      	lsrs	r3, r3, #2
 8002fca:	3318      	adds	r3, #24
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	589b      	ldr	r3, [r3, r2]
 8002fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	220f      	movs	r2, #15
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	0013      	movs	r3, r2
 8002fe0:	43da      	mvns	r2, r3
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	23a0      	movs	r3, #160	; 0xa0
 8002fec:	05db      	lsls	r3, r3, #23
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d013      	beq.n	800301a <HAL_GPIO_Init+0x1ca>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a45      	ldr	r2, [pc, #276]	; (800310c <HAL_GPIO_Init+0x2bc>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00d      	beq.n	8003016 <HAL_GPIO_Init+0x1c6>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a44      	ldr	r2, [pc, #272]	; (8003110 <HAL_GPIO_Init+0x2c0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d007      	beq.n	8003012 <HAL_GPIO_Init+0x1c2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a43      	ldr	r2, [pc, #268]	; (8003114 <HAL_GPIO_Init+0x2c4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d101      	bne.n	800300e <HAL_GPIO_Init+0x1be>
 800300a:	2303      	movs	r3, #3
 800300c:	e006      	b.n	800301c <HAL_GPIO_Init+0x1cc>
 800300e:	2305      	movs	r3, #5
 8003010:	e004      	b.n	800301c <HAL_GPIO_Init+0x1cc>
 8003012:	2302      	movs	r3, #2
 8003014:	e002      	b.n	800301c <HAL_GPIO_Init+0x1cc>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <HAL_GPIO_Init+0x1cc>
 800301a:	2300      	movs	r3, #0
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	2103      	movs	r1, #3
 8003020:	400a      	ands	r2, r1
 8003022:	00d2      	lsls	r2, r2, #3
 8003024:	4093      	lsls	r3, r2
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800302c:	4936      	ldr	r1, [pc, #216]	; (8003108 <HAL_GPIO_Init+0x2b8>)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	089b      	lsrs	r3, r3, #2
 8003032:	3318      	adds	r3, #24
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800303a:	4b33      	ldr	r3, [pc, #204]	; (8003108 <HAL_GPIO_Init+0x2b8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	43da      	mvns	r2, r3
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4013      	ands	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	035b      	lsls	r3, r3, #13
 8003052:	4013      	ands	r3, r2
 8003054:	d003      	beq.n	800305e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800305e:	4b2a      	ldr	r3, [pc, #168]	; (8003108 <HAL_GPIO_Init+0x2b8>)
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003064:	4b28      	ldr	r3, [pc, #160]	; (8003108 <HAL_GPIO_Init+0x2b8>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	43da      	mvns	r2, r3
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4013      	ands	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	2380      	movs	r3, #128	; 0x80
 800307a:	039b      	lsls	r3, r3, #14
 800307c:	4013      	ands	r3, r2
 800307e:	d003      	beq.n	8003088 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4313      	orrs	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003088:	4b1f      	ldr	r3, [pc, #124]	; (8003108 <HAL_GPIO_Init+0x2b8>)
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800308e:	4a1e      	ldr	r2, [pc, #120]	; (8003108 <HAL_GPIO_Init+0x2b8>)
 8003090:	2384      	movs	r3, #132	; 0x84
 8003092:	58d3      	ldr	r3, [r2, r3]
 8003094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	43da      	mvns	r2, r3
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	4013      	ands	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	029b      	lsls	r3, r3, #10
 80030a8:	4013      	ands	r3, r2
 80030aa:	d003      	beq.n	80030b4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030b4:	4914      	ldr	r1, [pc, #80]	; (8003108 <HAL_GPIO_Init+0x2b8>)
 80030b6:	2284      	movs	r2, #132	; 0x84
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80030bc:	4a12      	ldr	r2, [pc, #72]	; (8003108 <HAL_GPIO_Init+0x2b8>)
 80030be:	2380      	movs	r3, #128	; 0x80
 80030c0:	58d3      	ldr	r3, [r2, r3]
 80030c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	43da      	mvns	r2, r3
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4013      	ands	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	2380      	movs	r3, #128	; 0x80
 80030d4:	025b      	lsls	r3, r3, #9
 80030d6:	4013      	ands	r3, r2
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030e2:	4909      	ldr	r1, [pc, #36]	; (8003108 <HAL_GPIO_Init+0x2b8>)
 80030e4:	2280      	movs	r2, #128	; 0x80
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	3301      	adds	r3, #1
 80030ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	40da      	lsrs	r2, r3
 80030f8:	1e13      	subs	r3, r2, #0
 80030fa:	d000      	beq.n	80030fe <HAL_GPIO_Init+0x2ae>
 80030fc:	e6b0      	b.n	8002e60 <HAL_GPIO_Init+0x10>
  }
}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	46c0      	nop			; (mov r8, r8)
 8003102:	46bd      	mov	sp, r7
 8003104:	b006      	add	sp, #24
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40021800 	.word	0x40021800
 800310c:	50000400 	.word	0x50000400
 8003110:	50000800 	.word	0x50000800
 8003114:	50000c00 	.word	0x50000c00

08003118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	000a      	movs	r2, r1
 8003122:	1cbb      	adds	r3, r7, #2
 8003124:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	1cba      	adds	r2, r7, #2
 800312c:	8812      	ldrh	r2, [r2, #0]
 800312e:	4013      	ands	r3, r2
 8003130:	d004      	beq.n	800313c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003132:	230f      	movs	r3, #15
 8003134:	18fb      	adds	r3, r7, r3
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]
 800313a:	e003      	b.n	8003144 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800313c:	230f      	movs	r3, #15
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	2200      	movs	r2, #0
 8003142:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003144:	230f      	movs	r3, #15
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	781b      	ldrb	r3, [r3, #0]
}
 800314a:	0018      	movs	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	b004      	add	sp, #16
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	0008      	movs	r0, r1
 800315c:	0011      	movs	r1, r2
 800315e:	1cbb      	adds	r3, r7, #2
 8003160:	1c02      	adds	r2, r0, #0
 8003162:	801a      	strh	r2, [r3, #0]
 8003164:	1c7b      	adds	r3, r7, #1
 8003166:	1c0a      	adds	r2, r1, #0
 8003168:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800316a:	1c7b      	adds	r3, r7, #1
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d004      	beq.n	800317c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003172:	1cbb      	adds	r3, r7, #2
 8003174:	881a      	ldrh	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800317a:	e003      	b.n	8003184 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800317c:	1cbb      	adds	r3, r7, #2
 800317e:	881a      	ldrh	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003184:	46c0      	nop			; (mov r8, r8)
 8003186:	46bd      	mov	sp, r7
 8003188:	b002      	add	sp, #8
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003194:	4b19      	ldr	r3, [pc, #100]	; (80031fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a19      	ldr	r2, [pc, #100]	; (8003200 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800319a:	4013      	ands	r3, r2
 800319c:	0019      	movs	r1, r3
 800319e:	4b17      	ldr	r3, [pc, #92]	; (80031fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	2380      	movs	r3, #128	; 0x80
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d11f      	bne.n	80031f0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80031b0:	4b14      	ldr	r3, [pc, #80]	; (8003204 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	0013      	movs	r3, r2
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	189b      	adds	r3, r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4912      	ldr	r1, [pc, #72]	; (8003208 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80031be:	0018      	movs	r0, r3
 80031c0:	f7fc ff9e 	bl	8000100 <__udivsi3>
 80031c4:	0003      	movs	r3, r0
 80031c6:	3301      	adds	r3, #1
 80031c8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031ca:	e008      	b.n	80031de <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	e001      	b.n	80031de <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e009      	b.n	80031f2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031de:	4b07      	ldr	r3, [pc, #28]	; (80031fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	2380      	movs	r3, #128	; 0x80
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	401a      	ands	r2, r3
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d0ed      	beq.n	80031cc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	0018      	movs	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b004      	add	sp, #16
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	40007000 	.word	0x40007000
 8003200:	fffff9ff 	.word	0xfffff9ff
 8003204:	20000000 	.word	0x20000000
 8003208:	000f4240 	.word	0x000f4240

0800320c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003210:	4b03      	ldr	r3, [pc, #12]	; (8003220 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	23e0      	movs	r3, #224	; 0xe0
 8003216:	01db      	lsls	r3, r3, #7
 8003218:	4013      	ands	r3, r2
}
 800321a:	0018      	movs	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40021000 	.word	0x40021000

08003224 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e2f3      	b.n	800381e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2201      	movs	r2, #1
 800323c:	4013      	ands	r3, r2
 800323e:	d100      	bne.n	8003242 <HAL_RCC_OscConfig+0x1e>
 8003240:	e07c      	b.n	800333c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003242:	4bc3      	ldr	r3, [pc, #780]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2238      	movs	r2, #56	; 0x38
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800324c:	4bc0      	ldr	r3, [pc, #768]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2203      	movs	r2, #3
 8003252:	4013      	ands	r3, r2
 8003254:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	2b10      	cmp	r3, #16
 800325a:	d102      	bne.n	8003262 <HAL_RCC_OscConfig+0x3e>
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	2b03      	cmp	r3, #3
 8003260:	d002      	beq.n	8003268 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2b08      	cmp	r3, #8
 8003266:	d10b      	bne.n	8003280 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003268:	4bb9      	ldr	r3, [pc, #740]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	029b      	lsls	r3, r3, #10
 8003270:	4013      	ands	r3, r2
 8003272:	d062      	beq.n	800333a <HAL_RCC_OscConfig+0x116>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d15e      	bne.n	800333a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e2ce      	b.n	800381e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	2380      	movs	r3, #128	; 0x80
 8003286:	025b      	lsls	r3, r3, #9
 8003288:	429a      	cmp	r2, r3
 800328a:	d107      	bne.n	800329c <HAL_RCC_OscConfig+0x78>
 800328c:	4bb0      	ldr	r3, [pc, #704]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	4baf      	ldr	r3, [pc, #700]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 8003292:	2180      	movs	r1, #128	; 0x80
 8003294:	0249      	lsls	r1, r1, #9
 8003296:	430a      	orrs	r2, r1
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	e020      	b.n	80032de <HAL_RCC_OscConfig+0xba>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	23a0      	movs	r3, #160	; 0xa0
 80032a2:	02db      	lsls	r3, r3, #11
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d10e      	bne.n	80032c6 <HAL_RCC_OscConfig+0xa2>
 80032a8:	4ba9      	ldr	r3, [pc, #676]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4ba8      	ldr	r3, [pc, #672]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 80032ae:	2180      	movs	r1, #128	; 0x80
 80032b0:	02c9      	lsls	r1, r1, #11
 80032b2:	430a      	orrs	r2, r1
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	4ba6      	ldr	r3, [pc, #664]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	4ba5      	ldr	r3, [pc, #660]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 80032bc:	2180      	movs	r1, #128	; 0x80
 80032be:	0249      	lsls	r1, r1, #9
 80032c0:	430a      	orrs	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	e00b      	b.n	80032de <HAL_RCC_OscConfig+0xba>
 80032c6:	4ba2      	ldr	r3, [pc, #648]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	4ba1      	ldr	r3, [pc, #644]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 80032cc:	49a1      	ldr	r1, [pc, #644]	; (8003554 <HAL_RCC_OscConfig+0x330>)
 80032ce:	400a      	ands	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	4b9f      	ldr	r3, [pc, #636]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	4b9e      	ldr	r3, [pc, #632]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 80032d8:	499f      	ldr	r1, [pc, #636]	; (8003558 <HAL_RCC_OscConfig+0x334>)
 80032da:	400a      	ands	r2, r1
 80032dc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d014      	beq.n	8003310 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e6:	f7ff fa55 	bl	8002794 <HAL_GetTick>
 80032ea:	0003      	movs	r3, r0
 80032ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f0:	f7ff fa50 	bl	8002794 <HAL_GetTick>
 80032f4:	0002      	movs	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b64      	cmp	r3, #100	; 0x64
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e28d      	b.n	800381e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003302:	4b93      	ldr	r3, [pc, #588]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	2380      	movs	r3, #128	; 0x80
 8003308:	029b      	lsls	r3, r3, #10
 800330a:	4013      	ands	r3, r2
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0xcc>
 800330e:	e015      	b.n	800333c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7ff fa40 	bl	8002794 <HAL_GetTick>
 8003314:	0003      	movs	r3, r0
 8003316:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800331a:	f7ff fa3b 	bl	8002794 <HAL_GetTick>
 800331e:	0002      	movs	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b64      	cmp	r3, #100	; 0x64
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e278      	b.n	800381e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800332c:	4b88      	ldr	r3, [pc, #544]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	2380      	movs	r3, #128	; 0x80
 8003332:	029b      	lsls	r3, r3, #10
 8003334:	4013      	ands	r3, r2
 8003336:	d1f0      	bne.n	800331a <HAL_RCC_OscConfig+0xf6>
 8003338:	e000      	b.n	800333c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2202      	movs	r2, #2
 8003342:	4013      	ands	r3, r2
 8003344:	d100      	bne.n	8003348 <HAL_RCC_OscConfig+0x124>
 8003346:	e099      	b.n	800347c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003348:	4b81      	ldr	r3, [pc, #516]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2238      	movs	r2, #56	; 0x38
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003352:	4b7f      	ldr	r3, [pc, #508]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	2203      	movs	r2, #3
 8003358:	4013      	ands	r3, r2
 800335a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2b10      	cmp	r3, #16
 8003360:	d102      	bne.n	8003368 <HAL_RCC_OscConfig+0x144>
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d002      	beq.n	800336e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d135      	bne.n	80033da <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800336e:	4b78      	ldr	r3, [pc, #480]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	2380      	movs	r3, #128	; 0x80
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4013      	ands	r3, r2
 8003378:	d005      	beq.n	8003386 <HAL_RCC_OscConfig+0x162>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e24b      	b.n	800381e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003386:	4b72      	ldr	r3, [pc, #456]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	4a74      	ldr	r2, [pc, #464]	; (800355c <HAL_RCC_OscConfig+0x338>)
 800338c:	4013      	ands	r3, r2
 800338e:	0019      	movs	r1, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	021a      	lsls	r2, r3, #8
 8003396:	4b6e      	ldr	r3, [pc, #440]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 8003398:	430a      	orrs	r2, r1
 800339a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d112      	bne.n	80033c8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80033a2:	4b6b      	ldr	r3, [pc, #428]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a6e      	ldr	r2, [pc, #440]	; (8003560 <HAL_RCC_OscConfig+0x33c>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	0019      	movs	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	4b67      	ldr	r3, [pc, #412]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 80033b2:	430a      	orrs	r2, r1
 80033b4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80033b6:	4b66      	ldr	r3, [pc, #408]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	0adb      	lsrs	r3, r3, #11
 80033bc:	2207      	movs	r2, #7
 80033be:	4013      	ands	r3, r2
 80033c0:	4a68      	ldr	r2, [pc, #416]	; (8003564 <HAL_RCC_OscConfig+0x340>)
 80033c2:	40da      	lsrs	r2, r3
 80033c4:	4b68      	ldr	r3, [pc, #416]	; (8003568 <HAL_RCC_OscConfig+0x344>)
 80033c6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033c8:	4b68      	ldr	r3, [pc, #416]	; (800356c <HAL_RCC_OscConfig+0x348>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7ff f985 	bl	80026dc <HAL_InitTick>
 80033d2:	1e03      	subs	r3, r0, #0
 80033d4:	d051      	beq.n	800347a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e221      	b.n	800381e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d030      	beq.n	8003444 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80033e2:	4b5b      	ldr	r3, [pc, #364]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a5e      	ldr	r2, [pc, #376]	; (8003560 <HAL_RCC_OscConfig+0x33c>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	0019      	movs	r1, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691a      	ldr	r2, [r3, #16]
 80033f0:	4b57      	ldr	r3, [pc, #348]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 80033f2:	430a      	orrs	r2, r1
 80033f4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80033f6:	4b56      	ldr	r3, [pc, #344]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	4b55      	ldr	r3, [pc, #340]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 80033fc:	2180      	movs	r1, #128	; 0x80
 80033fe:	0049      	lsls	r1, r1, #1
 8003400:	430a      	orrs	r2, r1
 8003402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7ff f9c6 	bl	8002794 <HAL_GetTick>
 8003408:	0003      	movs	r3, r0
 800340a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800340e:	f7ff f9c1 	bl	8002794 <HAL_GetTick>
 8003412:	0002      	movs	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e1fe      	b.n	800381e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003420:	4b4b      	ldr	r3, [pc, #300]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	2380      	movs	r3, #128	; 0x80
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4013      	ands	r3, r2
 800342a:	d0f0      	beq.n	800340e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342c:	4b48      	ldr	r3, [pc, #288]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	4a4a      	ldr	r2, [pc, #296]	; (800355c <HAL_RCC_OscConfig+0x338>)
 8003432:	4013      	ands	r3, r2
 8003434:	0019      	movs	r1, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	021a      	lsls	r2, r3, #8
 800343c:	4b44      	ldr	r3, [pc, #272]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	e01b      	b.n	800347c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003444:	4b42      	ldr	r3, [pc, #264]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4b41      	ldr	r3, [pc, #260]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 800344a:	4949      	ldr	r1, [pc, #292]	; (8003570 <HAL_RCC_OscConfig+0x34c>)
 800344c:	400a      	ands	r2, r1
 800344e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7ff f9a0 	bl	8002794 <HAL_GetTick>
 8003454:	0003      	movs	r3, r0
 8003456:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800345a:	f7ff f99b 	bl	8002794 <HAL_GetTick>
 800345e:	0002      	movs	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e1d8      	b.n	800381e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800346c:	4b38      	ldr	r3, [pc, #224]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4013      	ands	r3, r2
 8003476:	d1f0      	bne.n	800345a <HAL_RCC_OscConfig+0x236>
 8003478:	e000      	b.n	800347c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800347a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2208      	movs	r2, #8
 8003482:	4013      	ands	r3, r2
 8003484:	d047      	beq.n	8003516 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003486:	4b32      	ldr	r3, [pc, #200]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2238      	movs	r2, #56	; 0x38
 800348c:	4013      	ands	r3, r2
 800348e:	2b18      	cmp	r3, #24
 8003490:	d10a      	bne.n	80034a8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003492:	4b2f      	ldr	r3, [pc, #188]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 8003494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003496:	2202      	movs	r2, #2
 8003498:	4013      	ands	r3, r2
 800349a:	d03c      	beq.n	8003516 <HAL_RCC_OscConfig+0x2f2>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d138      	bne.n	8003516 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e1ba      	b.n	800381e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d019      	beq.n	80034e4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80034b0:	4b27      	ldr	r3, [pc, #156]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 80034b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034b4:	4b26      	ldr	r3, [pc, #152]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 80034b6:	2101      	movs	r1, #1
 80034b8:	430a      	orrs	r2, r1
 80034ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034bc:	f7ff f96a 	bl	8002794 <HAL_GetTick>
 80034c0:	0003      	movs	r3, r0
 80034c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c6:	f7ff f965 	bl	8002794 <HAL_GetTick>
 80034ca:	0002      	movs	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e1a2      	b.n	800381e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034d8:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 80034da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034dc:	2202      	movs	r2, #2
 80034de:	4013      	ands	r3, r2
 80034e0:	d0f1      	beq.n	80034c6 <HAL_RCC_OscConfig+0x2a2>
 80034e2:	e018      	b.n	8003516 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80034e4:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 80034e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034e8:	4b19      	ldr	r3, [pc, #100]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 80034ea:	2101      	movs	r1, #1
 80034ec:	438a      	bics	r2, r1
 80034ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7ff f950 	bl	8002794 <HAL_GetTick>
 80034f4:	0003      	movs	r3, r0
 80034f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034fa:	f7ff f94b 	bl	8002794 <HAL_GetTick>
 80034fe:	0002      	movs	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e188      	b.n	800381e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800350c:	4b10      	ldr	r3, [pc, #64]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 800350e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003510:	2202      	movs	r2, #2
 8003512:	4013      	ands	r3, r2
 8003514:	d1f1      	bne.n	80034fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2204      	movs	r2, #4
 800351c:	4013      	ands	r3, r2
 800351e:	d100      	bne.n	8003522 <HAL_RCC_OscConfig+0x2fe>
 8003520:	e0c6      	b.n	80036b0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003522:	231f      	movs	r3, #31
 8003524:	18fb      	adds	r3, r7, r3
 8003526:	2200      	movs	r2, #0
 8003528:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800352a:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2238      	movs	r2, #56	; 0x38
 8003530:	4013      	ands	r3, r2
 8003532:	2b20      	cmp	r3, #32
 8003534:	d11e      	bne.n	8003574 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003536:	4b06      	ldr	r3, [pc, #24]	; (8003550 <HAL_RCC_OscConfig+0x32c>)
 8003538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353a:	2202      	movs	r2, #2
 800353c:	4013      	ands	r3, r2
 800353e:	d100      	bne.n	8003542 <HAL_RCC_OscConfig+0x31e>
 8003540:	e0b6      	b.n	80036b0 <HAL_RCC_OscConfig+0x48c>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d000      	beq.n	800354c <HAL_RCC_OscConfig+0x328>
 800354a:	e0b1      	b.n	80036b0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e166      	b.n	800381e <HAL_RCC_OscConfig+0x5fa>
 8003550:	40021000 	.word	0x40021000
 8003554:	fffeffff 	.word	0xfffeffff
 8003558:	fffbffff 	.word	0xfffbffff
 800355c:	ffff80ff 	.word	0xffff80ff
 8003560:	ffffc7ff 	.word	0xffffc7ff
 8003564:	00f42400 	.word	0x00f42400
 8003568:	20000000 	.word	0x20000000
 800356c:	20000004 	.word	0x20000004
 8003570:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003574:	4bac      	ldr	r3, [pc, #688]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 8003576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	055b      	lsls	r3, r3, #21
 800357c:	4013      	ands	r3, r2
 800357e:	d101      	bne.n	8003584 <HAL_RCC_OscConfig+0x360>
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <HAL_RCC_OscConfig+0x362>
 8003584:	2300      	movs	r3, #0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d011      	beq.n	80035ae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800358a:	4ba7      	ldr	r3, [pc, #668]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 800358c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800358e:	4ba6      	ldr	r3, [pc, #664]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 8003590:	2180      	movs	r1, #128	; 0x80
 8003592:	0549      	lsls	r1, r1, #21
 8003594:	430a      	orrs	r2, r1
 8003596:	63da      	str	r2, [r3, #60]	; 0x3c
 8003598:	4ba3      	ldr	r3, [pc, #652]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 800359a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800359c:	2380      	movs	r3, #128	; 0x80
 800359e:	055b      	lsls	r3, r3, #21
 80035a0:	4013      	ands	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80035a6:	231f      	movs	r3, #31
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	2201      	movs	r2, #1
 80035ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ae:	4b9f      	ldr	r3, [pc, #636]	; (800382c <HAL_RCC_OscConfig+0x608>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	2380      	movs	r3, #128	; 0x80
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	4013      	ands	r3, r2
 80035b8:	d11a      	bne.n	80035f0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035ba:	4b9c      	ldr	r3, [pc, #624]	; (800382c <HAL_RCC_OscConfig+0x608>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	4b9b      	ldr	r3, [pc, #620]	; (800382c <HAL_RCC_OscConfig+0x608>)
 80035c0:	2180      	movs	r1, #128	; 0x80
 80035c2:	0049      	lsls	r1, r1, #1
 80035c4:	430a      	orrs	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80035c8:	f7ff f8e4 	bl	8002794 <HAL_GetTick>
 80035cc:	0003      	movs	r3, r0
 80035ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d2:	f7ff f8df 	bl	8002794 <HAL_GetTick>
 80035d6:	0002      	movs	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e11c      	b.n	800381e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e4:	4b91      	ldr	r3, [pc, #580]	; (800382c <HAL_RCC_OscConfig+0x608>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	2380      	movs	r3, #128	; 0x80
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	4013      	ands	r3, r2
 80035ee:	d0f0      	beq.n	80035d2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d106      	bne.n	8003606 <HAL_RCC_OscConfig+0x3e2>
 80035f8:	4b8b      	ldr	r3, [pc, #556]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 80035fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035fc:	4b8a      	ldr	r3, [pc, #552]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 80035fe:	2101      	movs	r1, #1
 8003600:	430a      	orrs	r2, r1
 8003602:	65da      	str	r2, [r3, #92]	; 0x5c
 8003604:	e01c      	b.n	8003640 <HAL_RCC_OscConfig+0x41c>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2b05      	cmp	r3, #5
 800360c:	d10c      	bne.n	8003628 <HAL_RCC_OscConfig+0x404>
 800360e:	4b86      	ldr	r3, [pc, #536]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 8003610:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003612:	4b85      	ldr	r3, [pc, #532]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 8003614:	2104      	movs	r1, #4
 8003616:	430a      	orrs	r2, r1
 8003618:	65da      	str	r2, [r3, #92]	; 0x5c
 800361a:	4b83      	ldr	r3, [pc, #524]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 800361c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800361e:	4b82      	ldr	r3, [pc, #520]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 8003620:	2101      	movs	r1, #1
 8003622:	430a      	orrs	r2, r1
 8003624:	65da      	str	r2, [r3, #92]	; 0x5c
 8003626:	e00b      	b.n	8003640 <HAL_RCC_OscConfig+0x41c>
 8003628:	4b7f      	ldr	r3, [pc, #508]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 800362a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800362c:	4b7e      	ldr	r3, [pc, #504]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 800362e:	2101      	movs	r1, #1
 8003630:	438a      	bics	r2, r1
 8003632:	65da      	str	r2, [r3, #92]	; 0x5c
 8003634:	4b7c      	ldr	r3, [pc, #496]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 8003636:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003638:	4b7b      	ldr	r3, [pc, #492]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 800363a:	2104      	movs	r1, #4
 800363c:	438a      	bics	r2, r1
 800363e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d014      	beq.n	8003672 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7ff f8a4 	bl	8002794 <HAL_GetTick>
 800364c:	0003      	movs	r3, r0
 800364e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003650:	e009      	b.n	8003666 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7ff f89f 	bl	8002794 <HAL_GetTick>
 8003656:	0002      	movs	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	4a74      	ldr	r2, [pc, #464]	; (8003830 <HAL_RCC_OscConfig+0x60c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e0db      	b.n	800381e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003666:	4b70      	ldr	r3, [pc, #448]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 8003668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366a:	2202      	movs	r2, #2
 800366c:	4013      	ands	r3, r2
 800366e:	d0f0      	beq.n	8003652 <HAL_RCC_OscConfig+0x42e>
 8003670:	e013      	b.n	800369a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003672:	f7ff f88f 	bl	8002794 <HAL_GetTick>
 8003676:	0003      	movs	r3, r0
 8003678:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800367a:	e009      	b.n	8003690 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367c:	f7ff f88a 	bl	8002794 <HAL_GetTick>
 8003680:	0002      	movs	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	4a6a      	ldr	r2, [pc, #424]	; (8003830 <HAL_RCC_OscConfig+0x60c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e0c6      	b.n	800381e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003690:	4b65      	ldr	r3, [pc, #404]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 8003692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003694:	2202      	movs	r2, #2
 8003696:	4013      	ands	r3, r2
 8003698:	d1f0      	bne.n	800367c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800369a:	231f      	movs	r3, #31
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d105      	bne.n	80036b0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80036a4:	4b60      	ldr	r3, [pc, #384]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 80036a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036a8:	4b5f      	ldr	r3, [pc, #380]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 80036aa:	4962      	ldr	r1, [pc, #392]	; (8003834 <HAL_RCC_OscConfig+0x610>)
 80036ac:	400a      	ands	r2, r1
 80036ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d100      	bne.n	80036ba <HAL_RCC_OscConfig+0x496>
 80036b8:	e0b0      	b.n	800381c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036ba:	4b5b      	ldr	r3, [pc, #364]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2238      	movs	r2, #56	; 0x38
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b10      	cmp	r3, #16
 80036c4:	d100      	bne.n	80036c8 <HAL_RCC_OscConfig+0x4a4>
 80036c6:	e078      	b.n	80037ba <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d153      	bne.n	8003778 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d0:	4b55      	ldr	r3, [pc, #340]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	4b54      	ldr	r3, [pc, #336]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 80036d6:	4958      	ldr	r1, [pc, #352]	; (8003838 <HAL_RCC_OscConfig+0x614>)
 80036d8:	400a      	ands	r2, r1
 80036da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036dc:	f7ff f85a 	bl	8002794 <HAL_GetTick>
 80036e0:	0003      	movs	r3, r0
 80036e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e6:	f7ff f855 	bl	8002794 <HAL_GetTick>
 80036ea:	0002      	movs	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e092      	b.n	800381e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f8:	4b4b      	ldr	r3, [pc, #300]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	2380      	movs	r3, #128	; 0x80
 80036fe:	049b      	lsls	r3, r3, #18
 8003700:	4013      	ands	r3, r2
 8003702:	d1f0      	bne.n	80036e6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003704:	4b48      	ldr	r3, [pc, #288]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4a4c      	ldr	r2, [pc, #304]	; (800383c <HAL_RCC_OscConfig+0x618>)
 800370a:	4013      	ands	r3, r2
 800370c:	0019      	movs	r1, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1a      	ldr	r2, [r3, #32]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	431a      	orrs	r2, r3
 800372c:	4b3e      	ldr	r3, [pc, #248]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 800372e:	430a      	orrs	r2, r1
 8003730:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003732:	4b3d      	ldr	r3, [pc, #244]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	4b3c      	ldr	r3, [pc, #240]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 8003738:	2180      	movs	r1, #128	; 0x80
 800373a:	0449      	lsls	r1, r1, #17
 800373c:	430a      	orrs	r2, r1
 800373e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003740:	4b39      	ldr	r3, [pc, #228]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	4b38      	ldr	r3, [pc, #224]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 8003746:	2180      	movs	r1, #128	; 0x80
 8003748:	0549      	lsls	r1, r1, #21
 800374a:	430a      	orrs	r2, r1
 800374c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374e:	f7ff f821 	bl	8002794 <HAL_GetTick>
 8003752:	0003      	movs	r3, r0
 8003754:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003758:	f7ff f81c 	bl	8002794 <HAL_GetTick>
 800375c:	0002      	movs	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e059      	b.n	800381e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800376a:	4b2f      	ldr	r3, [pc, #188]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	2380      	movs	r3, #128	; 0x80
 8003770:	049b      	lsls	r3, r3, #18
 8003772:	4013      	ands	r3, r2
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0x534>
 8003776:	e051      	b.n	800381c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003778:	4b2b      	ldr	r3, [pc, #172]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	4b2a      	ldr	r3, [pc, #168]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 800377e:	492e      	ldr	r1, [pc, #184]	; (8003838 <HAL_RCC_OscConfig+0x614>)
 8003780:	400a      	ands	r2, r1
 8003782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7ff f806 	bl	8002794 <HAL_GetTick>
 8003788:	0003      	movs	r3, r0
 800378a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378e:	f7ff f801 	bl	8002794 <HAL_GetTick>
 8003792:	0002      	movs	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e03e      	b.n	800381e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037a0:	4b21      	ldr	r3, [pc, #132]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	2380      	movs	r3, #128	; 0x80
 80037a6:	049b      	lsls	r3, r3, #18
 80037a8:	4013      	ands	r3, r2
 80037aa:	d1f0      	bne.n	800378e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80037ac:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 80037b2:	4923      	ldr	r1, [pc, #140]	; (8003840 <HAL_RCC_OscConfig+0x61c>)
 80037b4:	400a      	ands	r2, r1
 80037b6:	60da      	str	r2, [r3, #12]
 80037b8:	e030      	b.n	800381c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e02b      	b.n	800381e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80037c6:	4b18      	ldr	r3, [pc, #96]	; (8003828 <HAL_RCC_OscConfig+0x604>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2203      	movs	r2, #3
 80037d0:	401a      	ands	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d11e      	bne.n	8003818 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2270      	movs	r2, #112	; 0x70
 80037de:	401a      	ands	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d117      	bne.n	8003818 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	23fe      	movs	r3, #254	; 0xfe
 80037ec:	01db      	lsls	r3, r3, #7
 80037ee:	401a      	ands	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d10e      	bne.n	8003818 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	23f8      	movs	r3, #248	; 0xf8
 80037fe:	039b      	lsls	r3, r3, #14
 8003800:	401a      	ands	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d106      	bne.n	8003818 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	0f5b      	lsrs	r3, r3, #29
 800380e:	075a      	lsls	r2, r3, #29
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003814:	429a      	cmp	r2, r3
 8003816:	d001      	beq.n	800381c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e000      	b.n	800381e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	0018      	movs	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	b008      	add	sp, #32
 8003824:	bd80      	pop	{r7, pc}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	40021000 	.word	0x40021000
 800382c:	40007000 	.word	0x40007000
 8003830:	00001388 	.word	0x00001388
 8003834:	efffffff 	.word	0xefffffff
 8003838:	feffffff 	.word	0xfeffffff
 800383c:	1fc1808c 	.word	0x1fc1808c
 8003840:	effefffc 	.word	0xeffefffc

08003844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0e9      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003858:	4b76      	ldr	r3, [pc, #472]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2207      	movs	r2, #7
 800385e:	4013      	ands	r3, r2
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d91e      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003866:	4b73      	ldr	r3, [pc, #460]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2207      	movs	r2, #7
 800386c:	4393      	bics	r3, r2
 800386e:	0019      	movs	r1, r3
 8003870:	4b70      	ldr	r3, [pc, #448]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003878:	f7fe ff8c 	bl	8002794 <HAL_GetTick>
 800387c:	0003      	movs	r3, r0
 800387e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003880:	e009      	b.n	8003896 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003882:	f7fe ff87 	bl	8002794 <HAL_GetTick>
 8003886:	0002      	movs	r2, r0
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	4a6a      	ldr	r2, [pc, #424]	; (8003a38 <HAL_RCC_ClockConfig+0x1f4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e0ca      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003896:	4b67      	ldr	r3, [pc, #412]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2207      	movs	r2, #7
 800389c:	4013      	ands	r3, r2
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d1ee      	bne.n	8003882 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2202      	movs	r2, #2
 80038aa:	4013      	ands	r3, r2
 80038ac:	d015      	beq.n	80038da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2204      	movs	r2, #4
 80038b4:	4013      	ands	r3, r2
 80038b6:	d006      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80038b8:	4b60      	ldr	r3, [pc, #384]	; (8003a3c <HAL_RCC_ClockConfig+0x1f8>)
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	4b5f      	ldr	r3, [pc, #380]	; (8003a3c <HAL_RCC_ClockConfig+0x1f8>)
 80038be:	21e0      	movs	r1, #224	; 0xe0
 80038c0:	01c9      	lsls	r1, r1, #7
 80038c2:	430a      	orrs	r2, r1
 80038c4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c6:	4b5d      	ldr	r3, [pc, #372]	; (8003a3c <HAL_RCC_ClockConfig+0x1f8>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	4a5d      	ldr	r2, [pc, #372]	; (8003a40 <HAL_RCC_ClockConfig+0x1fc>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	0019      	movs	r1, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	4b59      	ldr	r3, [pc, #356]	; (8003a3c <HAL_RCC_ClockConfig+0x1f8>)
 80038d6:	430a      	orrs	r2, r1
 80038d8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2201      	movs	r2, #1
 80038e0:	4013      	ands	r3, r2
 80038e2:	d057      	beq.n	8003994 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d107      	bne.n	80038fc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ec:	4b53      	ldr	r3, [pc, #332]	; (8003a3c <HAL_RCC_ClockConfig+0x1f8>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	2380      	movs	r3, #128	; 0x80
 80038f2:	029b      	lsls	r3, r3, #10
 80038f4:	4013      	ands	r3, r2
 80038f6:	d12b      	bne.n	8003950 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e097      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b02      	cmp	r3, #2
 8003902:	d107      	bne.n	8003914 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003904:	4b4d      	ldr	r3, [pc, #308]	; (8003a3c <HAL_RCC_ClockConfig+0x1f8>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	2380      	movs	r3, #128	; 0x80
 800390a:	049b      	lsls	r3, r3, #18
 800390c:	4013      	ands	r3, r2
 800390e:	d11f      	bne.n	8003950 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e08b      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d107      	bne.n	800392c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800391c:	4b47      	ldr	r3, [pc, #284]	; (8003a3c <HAL_RCC_ClockConfig+0x1f8>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4013      	ands	r3, r2
 8003926:	d113      	bne.n	8003950 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e07f      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b03      	cmp	r3, #3
 8003932:	d106      	bne.n	8003942 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003934:	4b41      	ldr	r3, [pc, #260]	; (8003a3c <HAL_RCC_ClockConfig+0x1f8>)
 8003936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003938:	2202      	movs	r2, #2
 800393a:	4013      	ands	r3, r2
 800393c:	d108      	bne.n	8003950 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e074      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003942:	4b3e      	ldr	r3, [pc, #248]	; (8003a3c <HAL_RCC_ClockConfig+0x1f8>)
 8003944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003946:	2202      	movs	r2, #2
 8003948:	4013      	ands	r3, r2
 800394a:	d101      	bne.n	8003950 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e06d      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003950:	4b3a      	ldr	r3, [pc, #232]	; (8003a3c <HAL_RCC_ClockConfig+0x1f8>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2207      	movs	r2, #7
 8003956:	4393      	bics	r3, r2
 8003958:	0019      	movs	r1, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	4b37      	ldr	r3, [pc, #220]	; (8003a3c <HAL_RCC_ClockConfig+0x1f8>)
 8003960:	430a      	orrs	r2, r1
 8003962:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003964:	f7fe ff16 	bl	8002794 <HAL_GetTick>
 8003968:	0003      	movs	r3, r0
 800396a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396c:	e009      	b.n	8003982 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800396e:	f7fe ff11 	bl	8002794 <HAL_GetTick>
 8003972:	0002      	movs	r2, r0
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	4a2f      	ldr	r2, [pc, #188]	; (8003a38 <HAL_RCC_ClockConfig+0x1f4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e054      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003982:	4b2e      	ldr	r3, [pc, #184]	; (8003a3c <HAL_RCC_ClockConfig+0x1f8>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2238      	movs	r2, #56	; 0x38
 8003988:	401a      	ands	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	429a      	cmp	r2, r3
 8003992:	d1ec      	bne.n	800396e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003994:	4b27      	ldr	r3, [pc, #156]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2207      	movs	r2, #7
 800399a:	4013      	ands	r3, r2
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d21e      	bcs.n	80039e0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a2:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2207      	movs	r2, #7
 80039a8:	4393      	bics	r3, r2
 80039aa:	0019      	movs	r1, r3
 80039ac:	4b21      	ldr	r3, [pc, #132]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80039b4:	f7fe feee 	bl	8002794 <HAL_GetTick>
 80039b8:	0003      	movs	r3, r0
 80039ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80039bc:	e009      	b.n	80039d2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039be:	f7fe fee9 	bl	8002794 <HAL_GetTick>
 80039c2:	0002      	movs	r2, r0
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	4a1b      	ldr	r2, [pc, #108]	; (8003a38 <HAL_RCC_ClockConfig+0x1f4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e02c      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80039d2:	4b18      	ldr	r3, [pc, #96]	; (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2207      	movs	r2, #7
 80039d8:	4013      	ands	r3, r2
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d1ee      	bne.n	80039be <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2204      	movs	r2, #4
 80039e6:	4013      	ands	r3, r2
 80039e8:	d009      	beq.n	80039fe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80039ea:	4b14      	ldr	r3, [pc, #80]	; (8003a3c <HAL_RCC_ClockConfig+0x1f8>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <HAL_RCC_ClockConfig+0x200>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	0019      	movs	r1, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <HAL_RCC_ClockConfig+0x1f8>)
 80039fa:	430a      	orrs	r2, r1
 80039fc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80039fe:	f000 f829 	bl	8003a54 <HAL_RCC_GetSysClockFreq>
 8003a02:	0001      	movs	r1, r0
 8003a04:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <HAL_RCC_ClockConfig+0x1f8>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	0a1b      	lsrs	r3, r3, #8
 8003a0a:	220f      	movs	r2, #15
 8003a0c:	401a      	ands	r2, r3
 8003a0e:	4b0e      	ldr	r3, [pc, #56]	; (8003a48 <HAL_RCC_ClockConfig+0x204>)
 8003a10:	0092      	lsls	r2, r2, #2
 8003a12:	58d3      	ldr	r3, [r2, r3]
 8003a14:	221f      	movs	r2, #31
 8003a16:	4013      	ands	r3, r2
 8003a18:	000a      	movs	r2, r1
 8003a1a:	40da      	lsrs	r2, r3
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <HAL_RCC_ClockConfig+0x208>)
 8003a1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_RCC_ClockConfig+0x20c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	0018      	movs	r0, r3
 8003a26:	f7fe fe59 	bl	80026dc <HAL_InitTick>
 8003a2a:	0003      	movs	r3, r0
}
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b004      	add	sp, #16
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40022000 	.word	0x40022000
 8003a38:	00001388 	.word	0x00001388
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	fffff0ff 	.word	0xfffff0ff
 8003a44:	ffff8fff 	.word	0xffff8fff
 8003a48:	0800633c 	.word	0x0800633c
 8003a4c:	20000000 	.word	0x20000000
 8003a50:	20000004 	.word	0x20000004

08003a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a5a:	4b3c      	ldr	r3, [pc, #240]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2238      	movs	r2, #56	; 0x38
 8003a60:	4013      	ands	r3, r2
 8003a62:	d10f      	bne.n	8003a84 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003a64:	4b39      	ldr	r3, [pc, #228]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	0adb      	lsrs	r3, r3, #11
 8003a6a:	2207      	movs	r2, #7
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	2201      	movs	r2, #1
 8003a70:	409a      	lsls	r2, r3
 8003a72:	0013      	movs	r3, r2
 8003a74:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003a76:	6839      	ldr	r1, [r7, #0]
 8003a78:	4835      	ldr	r0, [pc, #212]	; (8003b50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003a7a:	f7fc fb41 	bl	8000100 <__udivsi3>
 8003a7e:	0003      	movs	r3, r0
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	e05d      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a84:	4b31      	ldr	r3, [pc, #196]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2238      	movs	r2, #56	; 0x38
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d102      	bne.n	8003a96 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a90:	4b30      	ldr	r3, [pc, #192]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x100>)
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	e054      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a96:	4b2d      	ldr	r3, [pc, #180]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2238      	movs	r2, #56	; 0x38
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	2b10      	cmp	r3, #16
 8003aa0:	d138      	bne.n	8003b14 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003aa2:	4b2a      	ldr	r3, [pc, #168]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	2203      	movs	r2, #3
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003aac:	4b27      	ldr	r3, [pc, #156]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	091b      	lsrs	r3, r3, #4
 8003ab2:	2207      	movs	r2, #7
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d10d      	bne.n	8003adc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	4824      	ldr	r0, [pc, #144]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x100>)
 8003ac4:	f7fc fb1c 	bl	8000100 <__udivsi3>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	0019      	movs	r1, r3
 8003acc:	4b1f      	ldr	r3, [pc, #124]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	0a1b      	lsrs	r3, r3, #8
 8003ad2:	227f      	movs	r2, #127	; 0x7f
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	434b      	muls	r3, r1
 8003ad8:	617b      	str	r3, [r7, #20]
        break;
 8003ada:	e00d      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003adc:	68b9      	ldr	r1, [r7, #8]
 8003ade:	481c      	ldr	r0, [pc, #112]	; (8003b50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003ae0:	f7fc fb0e 	bl	8000100 <__udivsi3>
 8003ae4:	0003      	movs	r3, r0
 8003ae6:	0019      	movs	r1, r3
 8003ae8:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	0a1b      	lsrs	r3, r3, #8
 8003aee:	227f      	movs	r2, #127	; 0x7f
 8003af0:	4013      	ands	r3, r2
 8003af2:	434b      	muls	r3, r1
 8003af4:	617b      	str	r3, [r7, #20]
        break;
 8003af6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003af8:	4b14      	ldr	r3, [pc, #80]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	0f5b      	lsrs	r3, r3, #29
 8003afe:	2207      	movs	r2, #7
 8003b00:	4013      	ands	r3, r2
 8003b02:	3301      	adds	r3, #1
 8003b04:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	6978      	ldr	r0, [r7, #20]
 8003b0a:	f7fc faf9 	bl	8000100 <__udivsi3>
 8003b0e:	0003      	movs	r3, r0
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	e015      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003b14:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2238      	movs	r2, #56	; 0x38
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d103      	bne.n	8003b28 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	021b      	lsls	r3, r3, #8
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	e00b      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003b28:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2238      	movs	r2, #56	; 0x38
 8003b2e:	4013      	ands	r3, r2
 8003b30:	2b18      	cmp	r3, #24
 8003b32:	d103      	bne.n	8003b3c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003b34:	23fa      	movs	r3, #250	; 0xfa
 8003b36:	01db      	lsls	r3, r3, #7
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	e001      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003b40:	693b      	ldr	r3, [r7, #16]
}
 8003b42:	0018      	movs	r0, r3
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b006      	add	sp, #24
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	00f42400 	.word	0x00f42400
 8003b54:	007a1200 	.word	0x007a1200

08003b58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b5c:	4b02      	ldr	r3, [pc, #8]	; (8003b68 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
}
 8003b60:	0018      	movs	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	20000000 	.word	0x20000000

08003b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b6c:	b5b0      	push	{r4, r5, r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003b70:	f7ff fff2 	bl	8003b58 <HAL_RCC_GetHCLKFreq>
 8003b74:	0004      	movs	r4, r0
 8003b76:	f7ff fb49 	bl	800320c <LL_RCC_GetAPB1Prescaler>
 8003b7a:	0003      	movs	r3, r0
 8003b7c:	0b1a      	lsrs	r2, r3, #12
 8003b7e:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b80:	0092      	lsls	r2, r2, #2
 8003b82:	58d3      	ldr	r3, [r2, r3]
 8003b84:	221f      	movs	r2, #31
 8003b86:	4013      	ands	r3, r2
 8003b88:	40dc      	lsrs	r4, r3
 8003b8a:	0023      	movs	r3, r4
}
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bdb0      	pop	{r4, r5, r7, pc}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	0800637c 	.word	0x0800637c

08003b98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e04a      	b.n	8003c40 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	223d      	movs	r2, #61	; 0x3d
 8003bae:	5c9b      	ldrb	r3, [r3, r2]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d107      	bne.n	8003bc6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	223c      	movs	r2, #60	; 0x3c
 8003bba:	2100      	movs	r1, #0
 8003bbc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f7fe fc1b 	bl	80023fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	223d      	movs	r2, #61	; 0x3d
 8003bca:	2102      	movs	r1, #2
 8003bcc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	0019      	movs	r1, r3
 8003bd8:	0010      	movs	r0, r2
 8003bda:	f000 fa6d 	bl	80040b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2248      	movs	r2, #72	; 0x48
 8003be2:	2101      	movs	r1, #1
 8003be4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	223e      	movs	r2, #62	; 0x3e
 8003bea:	2101      	movs	r1, #1
 8003bec:	5499      	strb	r1, [r3, r2]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	223f      	movs	r2, #63	; 0x3f
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	5499      	strb	r1, [r3, r2]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2240      	movs	r2, #64	; 0x40
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	5499      	strb	r1, [r3, r2]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2241      	movs	r2, #65	; 0x41
 8003c02:	2101      	movs	r1, #1
 8003c04:	5499      	strb	r1, [r3, r2]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2242      	movs	r2, #66	; 0x42
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	5499      	strb	r1, [r3, r2]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2243      	movs	r2, #67	; 0x43
 8003c12:	2101      	movs	r1, #1
 8003c14:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2244      	movs	r2, #68	; 0x44
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	5499      	strb	r1, [r3, r2]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2245      	movs	r2, #69	; 0x45
 8003c22:	2101      	movs	r1, #1
 8003c24:	5499      	strb	r1, [r3, r2]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2246      	movs	r2, #70	; 0x46
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	5499      	strb	r1, [r3, r2]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2247      	movs	r2, #71	; 0x47
 8003c32:	2101      	movs	r1, #1
 8003c34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	223d      	movs	r2, #61	; 0x3d
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	0018      	movs	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b002      	add	sp, #8
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e04a      	b.n	8003cf0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	223d      	movs	r2, #61	; 0x3d
 8003c5e:	5c9b      	ldrb	r3, [r3, r2]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d107      	bne.n	8003c76 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	223c      	movs	r2, #60	; 0x3c
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	0018      	movs	r0, r3
 8003c72:	f000 f841 	bl	8003cf8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	223d      	movs	r2, #61	; 0x3d
 8003c7a:	2102      	movs	r1, #2
 8003c7c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3304      	adds	r3, #4
 8003c86:	0019      	movs	r1, r3
 8003c88:	0010      	movs	r0, r2
 8003c8a:	f000 fa15 	bl	80040b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2248      	movs	r2, #72	; 0x48
 8003c92:	2101      	movs	r1, #1
 8003c94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	223e      	movs	r2, #62	; 0x3e
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	5499      	strb	r1, [r3, r2]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	223f      	movs	r2, #63	; 0x3f
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	5499      	strb	r1, [r3, r2]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2240      	movs	r2, #64	; 0x40
 8003caa:	2101      	movs	r1, #1
 8003cac:	5499      	strb	r1, [r3, r2]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2241      	movs	r2, #65	; 0x41
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	5499      	strb	r1, [r3, r2]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2242      	movs	r2, #66	; 0x42
 8003cba:	2101      	movs	r1, #1
 8003cbc:	5499      	strb	r1, [r3, r2]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2243      	movs	r2, #67	; 0x43
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2244      	movs	r2, #68	; 0x44
 8003cca:	2101      	movs	r1, #1
 8003ccc:	5499      	strb	r1, [r3, r2]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2245      	movs	r2, #69	; 0x45
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	5499      	strb	r1, [r3, r2]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2246      	movs	r2, #70	; 0x46
 8003cda:	2101      	movs	r1, #1
 8003cdc:	5499      	strb	r1, [r3, r2]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2247      	movs	r2, #71	; 0x47
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	223d      	movs	r2, #61	; 0x3d
 8003cea:	2101      	movs	r1, #1
 8003cec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b002      	add	sp, #8
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d00:	46c0      	nop			; (mov r8, r8)
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b002      	add	sp, #8
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d108      	bne.n	8003d2a <HAL_TIM_PWM_Start+0x22>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	223e      	movs	r2, #62	; 0x3e
 8003d1c:	5c9b      	ldrb	r3, [r3, r2]
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	1e5a      	subs	r2, r3, #1
 8003d24:	4193      	sbcs	r3, r2
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	e037      	b.n	8003d9a <HAL_TIM_PWM_Start+0x92>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d108      	bne.n	8003d42 <HAL_TIM_PWM_Start+0x3a>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	223f      	movs	r2, #63	; 0x3f
 8003d34:	5c9b      	ldrb	r3, [r3, r2]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	1e5a      	subs	r2, r3, #1
 8003d3c:	4193      	sbcs	r3, r2
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	e02b      	b.n	8003d9a <HAL_TIM_PWM_Start+0x92>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d108      	bne.n	8003d5a <HAL_TIM_PWM_Start+0x52>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2240      	movs	r2, #64	; 0x40
 8003d4c:	5c9b      	ldrb	r3, [r3, r2]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	3b01      	subs	r3, #1
 8003d52:	1e5a      	subs	r2, r3, #1
 8003d54:	4193      	sbcs	r3, r2
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	e01f      	b.n	8003d9a <HAL_TIM_PWM_Start+0x92>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b0c      	cmp	r3, #12
 8003d5e:	d108      	bne.n	8003d72 <HAL_TIM_PWM_Start+0x6a>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2241      	movs	r2, #65	; 0x41
 8003d64:	5c9b      	ldrb	r3, [r3, r2]
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	1e5a      	subs	r2, r3, #1
 8003d6c:	4193      	sbcs	r3, r2
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	e013      	b.n	8003d9a <HAL_TIM_PWM_Start+0x92>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b10      	cmp	r3, #16
 8003d76:	d108      	bne.n	8003d8a <HAL_TIM_PWM_Start+0x82>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2242      	movs	r2, #66	; 0x42
 8003d7c:	5c9b      	ldrb	r3, [r3, r2]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	1e5a      	subs	r2, r3, #1
 8003d84:	4193      	sbcs	r3, r2
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	e007      	b.n	8003d9a <HAL_TIM_PWM_Start+0x92>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2243      	movs	r2, #67	; 0x43
 8003d8e:	5c9b      	ldrb	r3, [r3, r2]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	1e5a      	subs	r2, r3, #1
 8003d96:	4193      	sbcs	r3, r2
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e07b      	b.n	8003e9a <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d104      	bne.n	8003db2 <HAL_TIM_PWM_Start+0xaa>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	223e      	movs	r2, #62	; 0x3e
 8003dac:	2102      	movs	r1, #2
 8003dae:	5499      	strb	r1, [r3, r2]
 8003db0:	e023      	b.n	8003dfa <HAL_TIM_PWM_Start+0xf2>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d104      	bne.n	8003dc2 <HAL_TIM_PWM_Start+0xba>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	223f      	movs	r2, #63	; 0x3f
 8003dbc:	2102      	movs	r1, #2
 8003dbe:	5499      	strb	r1, [r3, r2]
 8003dc0:	e01b      	b.n	8003dfa <HAL_TIM_PWM_Start+0xf2>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d104      	bne.n	8003dd2 <HAL_TIM_PWM_Start+0xca>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2240      	movs	r2, #64	; 0x40
 8003dcc:	2102      	movs	r1, #2
 8003dce:	5499      	strb	r1, [r3, r2]
 8003dd0:	e013      	b.n	8003dfa <HAL_TIM_PWM_Start+0xf2>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b0c      	cmp	r3, #12
 8003dd6:	d104      	bne.n	8003de2 <HAL_TIM_PWM_Start+0xda>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2241      	movs	r2, #65	; 0x41
 8003ddc:	2102      	movs	r1, #2
 8003dde:	5499      	strb	r1, [r3, r2]
 8003de0:	e00b      	b.n	8003dfa <HAL_TIM_PWM_Start+0xf2>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b10      	cmp	r3, #16
 8003de6:	d104      	bne.n	8003df2 <HAL_TIM_PWM_Start+0xea>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2242      	movs	r2, #66	; 0x42
 8003dec:	2102      	movs	r1, #2
 8003dee:	5499      	strb	r1, [r3, r2]
 8003df0:	e003      	b.n	8003dfa <HAL_TIM_PWM_Start+0xf2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2243      	movs	r2, #67	; 0x43
 8003df6:	2102      	movs	r1, #2
 8003df8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6839      	ldr	r1, [r7, #0]
 8003e00:	2201      	movs	r2, #1
 8003e02:	0018      	movs	r0, r3
 8003e04:	f000 fc6e 	bl	80046e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a25      	ldr	r2, [pc, #148]	; (8003ea4 <HAL_TIM_PWM_Start+0x19c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d009      	beq.n	8003e26 <HAL_TIM_PWM_Start+0x11e>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a24      	ldr	r2, [pc, #144]	; (8003ea8 <HAL_TIM_PWM_Start+0x1a0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d004      	beq.n	8003e26 <HAL_TIM_PWM_Start+0x11e>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a22      	ldr	r2, [pc, #136]	; (8003eac <HAL_TIM_PWM_Start+0x1a4>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d101      	bne.n	8003e2a <HAL_TIM_PWM_Start+0x122>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <HAL_TIM_PWM_Start+0x124>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d008      	beq.n	8003e42 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2180      	movs	r1, #128	; 0x80
 8003e3c:	0209      	lsls	r1, r1, #8
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a17      	ldr	r2, [pc, #92]	; (8003ea4 <HAL_TIM_PWM_Start+0x19c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d004      	beq.n	8003e56 <HAL_TIM_PWM_Start+0x14e>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a17      	ldr	r2, [pc, #92]	; (8003eb0 <HAL_TIM_PWM_Start+0x1a8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d116      	bne.n	8003e84 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	4a15      	ldr	r2, [pc, #84]	; (8003eb4 <HAL_TIM_PWM_Start+0x1ac>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b06      	cmp	r3, #6
 8003e66:	d016      	beq.n	8003e96 <HAL_TIM_PWM_Start+0x18e>
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	2380      	movs	r3, #128	; 0x80
 8003e6c:	025b      	lsls	r3, r3, #9
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d011      	beq.n	8003e96 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e82:	e008      	b.n	8003e96 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2101      	movs	r1, #1
 8003e90:	430a      	orrs	r2, r1
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	e000      	b.n	8003e98 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e96:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b004      	add	sp, #16
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	40012c00 	.word	0x40012c00
 8003ea8:	40014400 	.word	0x40014400
 8003eac:	40014800 	.word	0x40014800
 8003eb0:	40000400 	.word	0x40000400
 8003eb4:	00010007 	.word	0x00010007

08003eb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec4:	2317      	movs	r3, #23
 8003ec6:	18fb      	adds	r3, r7, r3
 8003ec8:	2200      	movs	r2, #0
 8003eca:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	223c      	movs	r2, #60	; 0x3c
 8003ed0:	5c9b      	ldrb	r3, [r3, r2]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_TIM_PWM_ConfigChannel+0x22>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e0e5      	b.n	80040a6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	223c      	movs	r2, #60	; 0x3c
 8003ede:	2101      	movs	r1, #1
 8003ee0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b14      	cmp	r3, #20
 8003ee6:	d900      	bls.n	8003eea <HAL_TIM_PWM_ConfigChannel+0x32>
 8003ee8:	e0d1      	b.n	800408e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	009a      	lsls	r2, r3, #2
 8003eee:	4b70      	ldr	r3, [pc, #448]	; (80040b0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003ef0:	18d3      	adds	r3, r2, r3
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	0011      	movs	r1, r2
 8003efe:	0018      	movs	r0, r3
 8003f00:	f000 f954 	bl	80041ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699a      	ldr	r2, [r3, #24]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2108      	movs	r1, #8
 8003f10:	430a      	orrs	r2, r1
 8003f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699a      	ldr	r2, [r3, #24]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2104      	movs	r1, #4
 8003f20:	438a      	bics	r2, r1
 8003f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6999      	ldr	r1, [r3, #24]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	619a      	str	r2, [r3, #24]
      break;
 8003f36:	e0af      	b.n	8004098 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	0011      	movs	r1, r2
 8003f40:	0018      	movs	r0, r3
 8003f42:	f000 f9b3 	bl	80042ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699a      	ldr	r2, [r3, #24]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2180      	movs	r1, #128	; 0x80
 8003f52:	0109      	lsls	r1, r1, #4
 8003f54:	430a      	orrs	r2, r1
 8003f56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4954      	ldr	r1, [pc, #336]	; (80040b4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003f64:	400a      	ands	r2, r1
 8003f66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6999      	ldr	r1, [r3, #24]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	021a      	lsls	r2, r3, #8
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	619a      	str	r2, [r3, #24]
      break;
 8003f7c:	e08c      	b.n	8004098 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	0011      	movs	r1, r2
 8003f86:	0018      	movs	r0, r3
 8003f88:	f000 fa0e 	bl	80043a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	69da      	ldr	r2, [r3, #28]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2108      	movs	r1, #8
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	69da      	ldr	r2, [r3, #28]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2104      	movs	r1, #4
 8003fa8:	438a      	bics	r2, r1
 8003faa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	69d9      	ldr	r1, [r3, #28]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	691a      	ldr	r2, [r3, #16]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	61da      	str	r2, [r3, #28]
      break;
 8003fbe:	e06b      	b.n	8004098 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	0011      	movs	r1, r2
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f000 fa6f 	bl	80044ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	69da      	ldr	r2, [r3, #28]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2180      	movs	r1, #128	; 0x80
 8003fda:	0109      	lsls	r1, r1, #4
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	69da      	ldr	r2, [r3, #28]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4932      	ldr	r1, [pc, #200]	; (80040b4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003fec:	400a      	ands	r2, r1
 8003fee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	69d9      	ldr	r1, [r3, #28]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	021a      	lsls	r2, r3, #8
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	61da      	str	r2, [r3, #28]
      break;
 8004004:	e048      	b.n	8004098 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	0011      	movs	r1, r2
 800400e:	0018      	movs	r0, r3
 8004010:	f000 fab0 	bl	8004574 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2108      	movs	r1, #8
 8004020:	430a      	orrs	r2, r1
 8004022:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2104      	movs	r1, #4
 8004030:	438a      	bics	r2, r1
 8004032:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	691a      	ldr	r2, [r3, #16]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004046:	e027      	b.n	8004098 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	0011      	movs	r1, r2
 8004050:	0018      	movs	r0, r3
 8004052:	f000 fae9 	bl	8004628 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2180      	movs	r1, #128	; 0x80
 8004062:	0109      	lsls	r1, r1, #4
 8004064:	430a      	orrs	r2, r1
 8004066:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4910      	ldr	r1, [pc, #64]	; (80040b4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004074:	400a      	ands	r2, r1
 8004076:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	021a      	lsls	r2, r3, #8
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800408c:	e004      	b.n	8004098 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800408e:	2317      	movs	r3, #23
 8004090:	18fb      	adds	r3, r7, r3
 8004092:	2201      	movs	r2, #1
 8004094:	701a      	strb	r2, [r3, #0]
      break;
 8004096:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	223c      	movs	r2, #60	; 0x3c
 800409c:	2100      	movs	r1, #0
 800409e:	5499      	strb	r1, [r3, r2]

  return status;
 80040a0:	2317      	movs	r3, #23
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	781b      	ldrb	r3, [r3, #0]
}
 80040a6:	0018      	movs	r0, r3
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b006      	add	sp, #24
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	0800639c 	.word	0x0800639c
 80040b4:	fffffbff 	.word	0xfffffbff

080040b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a32      	ldr	r2, [pc, #200]	; (8004194 <TIM_Base_SetConfig+0xdc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d003      	beq.n	80040d8 <TIM_Base_SetConfig+0x20>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a31      	ldr	r2, [pc, #196]	; (8004198 <TIM_Base_SetConfig+0xe0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d108      	bne.n	80040ea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2270      	movs	r2, #112	; 0x70
 80040dc:	4393      	bics	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a29      	ldr	r2, [pc, #164]	; (8004194 <TIM_Base_SetConfig+0xdc>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00f      	beq.n	8004112 <TIM_Base_SetConfig+0x5a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a28      	ldr	r2, [pc, #160]	; (8004198 <TIM_Base_SetConfig+0xe0>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00b      	beq.n	8004112 <TIM_Base_SetConfig+0x5a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a27      	ldr	r2, [pc, #156]	; (800419c <TIM_Base_SetConfig+0xe4>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d007      	beq.n	8004112 <TIM_Base_SetConfig+0x5a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a26      	ldr	r2, [pc, #152]	; (80041a0 <TIM_Base_SetConfig+0xe8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d003      	beq.n	8004112 <TIM_Base_SetConfig+0x5a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a25      	ldr	r2, [pc, #148]	; (80041a4 <TIM_Base_SetConfig+0xec>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d108      	bne.n	8004124 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	4a24      	ldr	r2, [pc, #144]	; (80041a8 <TIM_Base_SetConfig+0xf0>)
 8004116:	4013      	ands	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2280      	movs	r2, #128	; 0x80
 8004128:	4393      	bics	r3, r2
 800412a:	001a      	movs	r2, r3
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a11      	ldr	r2, [pc, #68]	; (8004194 <TIM_Base_SetConfig+0xdc>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d007      	beq.n	8004162 <TIM_Base_SetConfig+0xaa>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a12      	ldr	r2, [pc, #72]	; (80041a0 <TIM_Base_SetConfig+0xe8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d003      	beq.n	8004162 <TIM_Base_SetConfig+0xaa>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a11      	ldr	r2, [pc, #68]	; (80041a4 <TIM_Base_SetConfig+0xec>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d103      	bne.n	800416a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	691a      	ldr	r2, [r3, #16]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	2201      	movs	r2, #1
 8004176:	4013      	ands	r3, r2
 8004178:	2b01      	cmp	r3, #1
 800417a:	d106      	bne.n	800418a <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2201      	movs	r2, #1
 8004182:	4393      	bics	r3, r2
 8004184:	001a      	movs	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	611a      	str	r2, [r3, #16]
  }
}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	46bd      	mov	sp, r7
 800418e:	b004      	add	sp, #16
 8004190:	bd80      	pop	{r7, pc}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	40012c00 	.word	0x40012c00
 8004198:	40000400 	.word	0x40000400
 800419c:	40002000 	.word	0x40002000
 80041a0:	40014400 	.word	0x40014400
 80041a4:	40014800 	.word	0x40014800
 80041a8:	fffffcff 	.word	0xfffffcff

080041ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	2201      	movs	r2, #1
 80041c2:	4393      	bics	r3, r2
 80041c4:	001a      	movs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4a2e      	ldr	r2, [pc, #184]	; (8004294 <TIM_OC1_SetConfig+0xe8>)
 80041da:	4013      	ands	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2203      	movs	r2, #3
 80041e2:	4393      	bics	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2202      	movs	r2, #2
 80041f4:	4393      	bics	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a24      	ldr	r2, [pc, #144]	; (8004298 <TIM_OC1_SetConfig+0xec>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d007      	beq.n	800421a <TIM_OC1_SetConfig+0x6e>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a23      	ldr	r2, [pc, #140]	; (800429c <TIM_OC1_SetConfig+0xf0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d003      	beq.n	800421a <TIM_OC1_SetConfig+0x6e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a22      	ldr	r2, [pc, #136]	; (80042a0 <TIM_OC1_SetConfig+0xf4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d10c      	bne.n	8004234 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2208      	movs	r2, #8
 800421e:	4393      	bics	r3, r2
 8004220:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2204      	movs	r2, #4
 8004230:	4393      	bics	r3, r2
 8004232:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a18      	ldr	r2, [pc, #96]	; (8004298 <TIM_OC1_SetConfig+0xec>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d007      	beq.n	800424c <TIM_OC1_SetConfig+0xa0>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a17      	ldr	r2, [pc, #92]	; (800429c <TIM_OC1_SetConfig+0xf0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d003      	beq.n	800424c <TIM_OC1_SetConfig+0xa0>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a16      	ldr	r2, [pc, #88]	; (80042a0 <TIM_OC1_SetConfig+0xf4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d111      	bne.n	8004270 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	4a15      	ldr	r2, [pc, #84]	; (80042a4 <TIM_OC1_SetConfig+0xf8>)
 8004250:	4013      	ands	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	4a14      	ldr	r2, [pc, #80]	; (80042a8 <TIM_OC1_SetConfig+0xfc>)
 8004258:	4013      	ands	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	621a      	str	r2, [r3, #32]
}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	46bd      	mov	sp, r7
 800428e:	b006      	add	sp, #24
 8004290:	bd80      	pop	{r7, pc}
 8004292:	46c0      	nop			; (mov r8, r8)
 8004294:	fffeff8f 	.word	0xfffeff8f
 8004298:	40012c00 	.word	0x40012c00
 800429c:	40014400 	.word	0x40014400
 80042a0:	40014800 	.word	0x40014800
 80042a4:	fffffeff 	.word	0xfffffeff
 80042a8:	fffffdff 	.word	0xfffffdff

080042ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	2210      	movs	r2, #16
 80042c2:	4393      	bics	r3, r2
 80042c4:	001a      	movs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4a2c      	ldr	r2, [pc, #176]	; (800438c <TIM_OC2_SetConfig+0xe0>)
 80042da:	4013      	ands	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4a2b      	ldr	r2, [pc, #172]	; (8004390 <TIM_OC2_SetConfig+0xe4>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	021b      	lsls	r3, r3, #8
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2220      	movs	r2, #32
 80042f6:	4393      	bics	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a22      	ldr	r2, [pc, #136]	; (8004394 <TIM_OC2_SetConfig+0xe8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d10d      	bne.n	800432a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2280      	movs	r2, #128	; 0x80
 8004312:	4393      	bics	r3, r2
 8004314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2240      	movs	r2, #64	; 0x40
 8004326:	4393      	bics	r3, r2
 8004328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a19      	ldr	r2, [pc, #100]	; (8004394 <TIM_OC2_SetConfig+0xe8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d007      	beq.n	8004342 <TIM_OC2_SetConfig+0x96>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a18      	ldr	r2, [pc, #96]	; (8004398 <TIM_OC2_SetConfig+0xec>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d003      	beq.n	8004342 <TIM_OC2_SetConfig+0x96>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a17      	ldr	r2, [pc, #92]	; (800439c <TIM_OC2_SetConfig+0xf0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d113      	bne.n	800436a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4a16      	ldr	r2, [pc, #88]	; (80043a0 <TIM_OC2_SetConfig+0xf4>)
 8004346:	4013      	ands	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	4a15      	ldr	r2, [pc, #84]	; (80043a4 <TIM_OC2_SetConfig+0xf8>)
 800434e:	4013      	ands	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4313      	orrs	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	621a      	str	r2, [r3, #32]
}
 8004384:	46c0      	nop			; (mov r8, r8)
 8004386:	46bd      	mov	sp, r7
 8004388:	b006      	add	sp, #24
 800438a:	bd80      	pop	{r7, pc}
 800438c:	feff8fff 	.word	0xfeff8fff
 8004390:	fffffcff 	.word	0xfffffcff
 8004394:	40012c00 	.word	0x40012c00
 8004398:	40014400 	.word	0x40014400
 800439c:	40014800 	.word	0x40014800
 80043a0:	fffffbff 	.word	0xfffffbff
 80043a4:	fffff7ff 	.word	0xfffff7ff

080043a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	4a31      	ldr	r2, [pc, #196]	; (8004484 <TIM_OC3_SetConfig+0xdc>)
 80043be:	401a      	ands	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4a2d      	ldr	r2, [pc, #180]	; (8004488 <TIM_OC3_SetConfig+0xe0>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2203      	movs	r2, #3
 80043dc:	4393      	bics	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	4a27      	ldr	r2, [pc, #156]	; (800448c <TIM_OC3_SetConfig+0xe4>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	021b      	lsls	r3, r3, #8
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a23      	ldr	r2, [pc, #140]	; (8004490 <TIM_OC3_SetConfig+0xe8>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d10d      	bne.n	8004422 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	4a22      	ldr	r2, [pc, #136]	; (8004494 <TIM_OC3_SetConfig+0xec>)
 800440a:	4013      	ands	r3, r2
 800440c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	4313      	orrs	r3, r2
 8004418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	4a1e      	ldr	r2, [pc, #120]	; (8004498 <TIM_OC3_SetConfig+0xf0>)
 800441e:	4013      	ands	r3, r2
 8004420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a1a      	ldr	r2, [pc, #104]	; (8004490 <TIM_OC3_SetConfig+0xe8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d007      	beq.n	800443a <TIM_OC3_SetConfig+0x92>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a1b      	ldr	r2, [pc, #108]	; (800449c <TIM_OC3_SetConfig+0xf4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d003      	beq.n	800443a <TIM_OC3_SetConfig+0x92>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a1a      	ldr	r2, [pc, #104]	; (80044a0 <TIM_OC3_SetConfig+0xf8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d113      	bne.n	8004462 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	4a19      	ldr	r2, [pc, #100]	; (80044a4 <TIM_OC3_SetConfig+0xfc>)
 800443e:	4013      	ands	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	4a18      	ldr	r2, [pc, #96]	; (80044a8 <TIM_OC3_SetConfig+0x100>)
 8004446:	4013      	ands	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	621a      	str	r2, [r3, #32]
}
 800447c:	46c0      	nop			; (mov r8, r8)
 800447e:	46bd      	mov	sp, r7
 8004480:	b006      	add	sp, #24
 8004482:	bd80      	pop	{r7, pc}
 8004484:	fffffeff 	.word	0xfffffeff
 8004488:	fffeff8f 	.word	0xfffeff8f
 800448c:	fffffdff 	.word	0xfffffdff
 8004490:	40012c00 	.word	0x40012c00
 8004494:	fffff7ff 	.word	0xfffff7ff
 8004498:	fffffbff 	.word	0xfffffbff
 800449c:	40014400 	.word	0x40014400
 80044a0:	40014800 	.word	0x40014800
 80044a4:	ffffefff 	.word	0xffffefff
 80044a8:	ffffdfff 	.word	0xffffdfff

080044ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	4a24      	ldr	r2, [pc, #144]	; (8004554 <TIM_OC4_SetConfig+0xa8>)
 80044c2:	401a      	ands	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4a20      	ldr	r2, [pc, #128]	; (8004558 <TIM_OC4_SetConfig+0xac>)
 80044d8:	4013      	ands	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4a1f      	ldr	r2, [pc, #124]	; (800455c <TIM_OC4_SetConfig+0xb0>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	021b      	lsls	r3, r3, #8
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	4a1b      	ldr	r2, [pc, #108]	; (8004560 <TIM_OC4_SetConfig+0xb4>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	031b      	lsls	r3, r3, #12
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a17      	ldr	r2, [pc, #92]	; (8004564 <TIM_OC4_SetConfig+0xb8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d007      	beq.n	800451c <TIM_OC4_SetConfig+0x70>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a16      	ldr	r2, [pc, #88]	; (8004568 <TIM_OC4_SetConfig+0xbc>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d003      	beq.n	800451c <TIM_OC4_SetConfig+0x70>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a15      	ldr	r2, [pc, #84]	; (800456c <TIM_OC4_SetConfig+0xc0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d109      	bne.n	8004530 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	4a14      	ldr	r2, [pc, #80]	; (8004570 <TIM_OC4_SetConfig+0xc4>)
 8004520:	4013      	ands	r3, r2
 8004522:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	019b      	lsls	r3, r3, #6
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	621a      	str	r2, [r3, #32]
}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	46bd      	mov	sp, r7
 800454e:	b006      	add	sp, #24
 8004550:	bd80      	pop	{r7, pc}
 8004552:	46c0      	nop			; (mov r8, r8)
 8004554:	ffffefff 	.word	0xffffefff
 8004558:	feff8fff 	.word	0xfeff8fff
 800455c:	fffffcff 	.word	0xfffffcff
 8004560:	ffffdfff 	.word	0xffffdfff
 8004564:	40012c00 	.word	0x40012c00
 8004568:	40014400 	.word	0x40014400
 800456c:	40014800 	.word	0x40014800
 8004570:	ffffbfff 	.word	0xffffbfff

08004574 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	4a21      	ldr	r2, [pc, #132]	; (8004610 <TIM_OC5_SetConfig+0x9c>)
 800458a:	401a      	ands	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4a1d      	ldr	r2, [pc, #116]	; (8004614 <TIM_OC5_SetConfig+0xa0>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	4a19      	ldr	r2, [pc, #100]	; (8004618 <TIM_OC5_SetConfig+0xa4>)
 80045b2:	4013      	ands	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	041b      	lsls	r3, r3, #16
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a15      	ldr	r2, [pc, #84]	; (800461c <TIM_OC5_SetConfig+0xa8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d007      	beq.n	80045da <TIM_OC5_SetConfig+0x66>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a14      	ldr	r2, [pc, #80]	; (8004620 <TIM_OC5_SetConfig+0xac>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d003      	beq.n	80045da <TIM_OC5_SetConfig+0x66>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a13      	ldr	r2, [pc, #76]	; (8004624 <TIM_OC5_SetConfig+0xb0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d109      	bne.n	80045ee <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	4a0c      	ldr	r2, [pc, #48]	; (8004610 <TIM_OC5_SetConfig+0x9c>)
 80045de:	4013      	ands	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	021b      	lsls	r3, r3, #8
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	621a      	str	r2, [r3, #32]
}
 8004608:	46c0      	nop			; (mov r8, r8)
 800460a:	46bd      	mov	sp, r7
 800460c:	b006      	add	sp, #24
 800460e:	bd80      	pop	{r7, pc}
 8004610:	fffeffff 	.word	0xfffeffff
 8004614:	fffeff8f 	.word	0xfffeff8f
 8004618:	fffdffff 	.word	0xfffdffff
 800461c:	40012c00 	.word	0x40012c00
 8004620:	40014400 	.word	0x40014400
 8004624:	40014800 	.word	0x40014800

08004628 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	4a22      	ldr	r2, [pc, #136]	; (80046c8 <TIM_OC6_SetConfig+0xa0>)
 800463e:	401a      	ands	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4a1e      	ldr	r2, [pc, #120]	; (80046cc <TIM_OC6_SetConfig+0xa4>)
 8004654:	4013      	ands	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4313      	orrs	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	4a1a      	ldr	r2, [pc, #104]	; (80046d0 <TIM_OC6_SetConfig+0xa8>)
 8004668:	4013      	ands	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	051b      	lsls	r3, r3, #20
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a16      	ldr	r2, [pc, #88]	; (80046d4 <TIM_OC6_SetConfig+0xac>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d007      	beq.n	8004690 <TIM_OC6_SetConfig+0x68>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a15      	ldr	r2, [pc, #84]	; (80046d8 <TIM_OC6_SetConfig+0xb0>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d003      	beq.n	8004690 <TIM_OC6_SetConfig+0x68>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a14      	ldr	r2, [pc, #80]	; (80046dc <TIM_OC6_SetConfig+0xb4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d109      	bne.n	80046a4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	4a13      	ldr	r2, [pc, #76]	; (80046e0 <TIM_OC6_SetConfig+0xb8>)
 8004694:	4013      	ands	r3, r2
 8004696:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	029b      	lsls	r3, r3, #10
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	621a      	str	r2, [r3, #32]
}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	46bd      	mov	sp, r7
 80046c2:	b006      	add	sp, #24
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	ffefffff 	.word	0xffefffff
 80046cc:	feff8fff 	.word	0xfeff8fff
 80046d0:	ffdfffff 	.word	0xffdfffff
 80046d4:	40012c00 	.word	0x40012c00
 80046d8:	40014400 	.word	0x40014400
 80046dc:	40014800 	.word	0x40014800
 80046e0:	fffbffff 	.word	0xfffbffff

080046e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	221f      	movs	r2, #31
 80046f4:	4013      	ands	r3, r2
 80046f6:	2201      	movs	r2, #1
 80046f8:	409a      	lsls	r2, r3
 80046fa:	0013      	movs	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	43d2      	mvns	r2, r2
 8004706:	401a      	ands	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a1a      	ldr	r2, [r3, #32]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	211f      	movs	r1, #31
 8004714:	400b      	ands	r3, r1
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	4099      	lsls	r1, r3
 800471a:	000b      	movs	r3, r1
 800471c:	431a      	orrs	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	621a      	str	r2, [r3, #32]
}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	46bd      	mov	sp, r7
 8004726:	b006      	add	sp, #24
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d108      	bne.n	800474e <HAL_TIMEx_PWMN_Start+0x22>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2244      	movs	r2, #68	; 0x44
 8004740:	5c9b      	ldrb	r3, [r3, r2]
 8004742:	b2db      	uxtb	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	1e5a      	subs	r2, r3, #1
 8004748:	4193      	sbcs	r3, r2
 800474a:	b2db      	uxtb	r3, r3
 800474c:	e01f      	b.n	800478e <HAL_TIMEx_PWMN_Start+0x62>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b04      	cmp	r3, #4
 8004752:	d108      	bne.n	8004766 <HAL_TIMEx_PWMN_Start+0x3a>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2245      	movs	r2, #69	; 0x45
 8004758:	5c9b      	ldrb	r3, [r3, r2]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	3b01      	subs	r3, #1
 800475e:	1e5a      	subs	r2, r3, #1
 8004760:	4193      	sbcs	r3, r2
 8004762:	b2db      	uxtb	r3, r3
 8004764:	e013      	b.n	800478e <HAL_TIMEx_PWMN_Start+0x62>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b08      	cmp	r3, #8
 800476a:	d108      	bne.n	800477e <HAL_TIMEx_PWMN_Start+0x52>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2246      	movs	r2, #70	; 0x46
 8004770:	5c9b      	ldrb	r3, [r3, r2]
 8004772:	b2db      	uxtb	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	1e5a      	subs	r2, r3, #1
 8004778:	4193      	sbcs	r3, r2
 800477a:	b2db      	uxtb	r3, r3
 800477c:	e007      	b.n	800478e <HAL_TIMEx_PWMN_Start+0x62>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2247      	movs	r2, #71	; 0x47
 8004782:	5c9b      	ldrb	r3, [r3, r2]
 8004784:	b2db      	uxtb	r3, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	1e5a      	subs	r2, r3, #1
 800478a:	4193      	sbcs	r3, r2
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e057      	b.n	8004846 <HAL_TIMEx_PWMN_Start+0x11a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d104      	bne.n	80047a6 <HAL_TIMEx_PWMN_Start+0x7a>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2244      	movs	r2, #68	; 0x44
 80047a0:	2102      	movs	r1, #2
 80047a2:	5499      	strb	r1, [r3, r2]
 80047a4:	e013      	b.n	80047ce <HAL_TIMEx_PWMN_Start+0xa2>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d104      	bne.n	80047b6 <HAL_TIMEx_PWMN_Start+0x8a>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2245      	movs	r2, #69	; 0x45
 80047b0:	2102      	movs	r1, #2
 80047b2:	5499      	strb	r1, [r3, r2]
 80047b4:	e00b      	b.n	80047ce <HAL_TIMEx_PWMN_Start+0xa2>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d104      	bne.n	80047c6 <HAL_TIMEx_PWMN_Start+0x9a>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2246      	movs	r2, #70	; 0x46
 80047c0:	2102      	movs	r1, #2
 80047c2:	5499      	strb	r1, [r3, r2]
 80047c4:	e003      	b.n	80047ce <HAL_TIMEx_PWMN_Start+0xa2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2247      	movs	r2, #71	; 0x47
 80047ca:	2102      	movs	r1, #2
 80047cc:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6839      	ldr	r1, [r7, #0]
 80047d4:	2204      	movs	r2, #4
 80047d6:	0018      	movs	r0, r3
 80047d8:	f000 f8dc 	bl	8004994 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2180      	movs	r1, #128	; 0x80
 80047e8:	0209      	lsls	r1, r1, #8
 80047ea:	430a      	orrs	r2, r1
 80047ec:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a17      	ldr	r2, [pc, #92]	; (8004850 <HAL_TIMEx_PWMN_Start+0x124>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d004      	beq.n	8004802 <HAL_TIMEx_PWMN_Start+0xd6>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a15      	ldr	r2, [pc, #84]	; (8004854 <HAL_TIMEx_PWMN_Start+0x128>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d116      	bne.n	8004830 <HAL_TIMEx_PWMN_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4a13      	ldr	r2, [pc, #76]	; (8004858 <HAL_TIMEx_PWMN_Start+0x12c>)
 800480a:	4013      	ands	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b06      	cmp	r3, #6
 8004812:	d016      	beq.n	8004842 <HAL_TIMEx_PWMN_Start+0x116>
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	2380      	movs	r3, #128	; 0x80
 8004818:	025b      	lsls	r3, r3, #9
 800481a:	429a      	cmp	r2, r3
 800481c:	d011      	beq.n	8004842 <HAL_TIMEx_PWMN_Start+0x116>
    {
      __HAL_TIM_ENABLE(htim);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2101      	movs	r1, #1
 800482a:	430a      	orrs	r2, r1
 800482c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800482e:	e008      	b.n	8004842 <HAL_TIMEx_PWMN_Start+0x116>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2101      	movs	r1, #1
 800483c:	430a      	orrs	r2, r1
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	e000      	b.n	8004844 <HAL_TIMEx_PWMN_Start+0x118>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004842:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	0018      	movs	r0, r3
 8004848:	46bd      	mov	sp, r7
 800484a:	b004      	add	sp, #16
 800484c:	bd80      	pop	{r7, pc}
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	40012c00 	.word	0x40012c00
 8004854:	40000400 	.word	0x40000400
 8004858:	00010007 	.word	0x00010007

0800485c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	223c      	movs	r2, #60	; 0x3c
 800486e:	5c9b      	ldrb	r3, [r3, r2]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004874:	2302      	movs	r3, #2
 8004876:	e06f      	b.n	8004958 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	223c      	movs	r2, #60	; 0x3c
 800487c:	2101      	movs	r1, #1
 800487e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	22ff      	movs	r2, #255	; 0xff
 8004884:	4393      	bics	r3, r2
 8004886:	001a      	movs	r2, r3
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	4313      	orrs	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4a33      	ldr	r2, [pc, #204]	; (8004960 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004894:	401a      	ands	r2, r3
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4a30      	ldr	r2, [pc, #192]	; (8004964 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80048a2:	401a      	ands	r2, r3
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4a2e      	ldr	r2, [pc, #184]	; (8004968 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80048b0:	401a      	ands	r2, r3
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4a2b      	ldr	r2, [pc, #172]	; (800496c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80048be:	401a      	ands	r2, r3
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4a29      	ldr	r2, [pc, #164]	; (8004970 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80048cc:	401a      	ands	r2, r3
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4a26      	ldr	r2, [pc, #152]	; (8004974 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80048da:	401a      	ands	r2, r3
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4a24      	ldr	r2, [pc, #144]	; (8004978 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80048e8:	401a      	ands	r2, r3
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	041b      	lsls	r3, r3, #16
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4a21      	ldr	r2, [pc, #132]	; (800497c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80048f8:	401a      	ands	r2, r3
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1e      	ldr	r2, [pc, #120]	; (8004980 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d11c      	bne.n	8004946 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4a1d      	ldr	r2, [pc, #116]	; (8004984 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004910:	401a      	ands	r2, r3
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	051b      	lsls	r3, r3, #20
 8004918:	4313      	orrs	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4a1a      	ldr	r2, [pc, #104]	; (8004988 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004920:	401a      	ands	r2, r3
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	4313      	orrs	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4a17      	ldr	r2, [pc, #92]	; (800498c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800492e:	401a      	ands	r2, r3
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	4313      	orrs	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4a15      	ldr	r2, [pc, #84]	; (8004990 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800493c:	401a      	ands	r2, r3
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	223c      	movs	r2, #60	; 0x3c
 8004952:	2100      	movs	r1, #0
 8004954:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	0018      	movs	r0, r3
 800495a:	46bd      	mov	sp, r7
 800495c:	b004      	add	sp, #16
 800495e:	bd80      	pop	{r7, pc}
 8004960:	fffffcff 	.word	0xfffffcff
 8004964:	fffffbff 	.word	0xfffffbff
 8004968:	fffff7ff 	.word	0xfffff7ff
 800496c:	ffffefff 	.word	0xffffefff
 8004970:	ffffdfff 	.word	0xffffdfff
 8004974:	ffffbfff 	.word	0xffffbfff
 8004978:	fff0ffff 	.word	0xfff0ffff
 800497c:	efffffff 	.word	0xefffffff
 8004980:	40012c00 	.word	0x40012c00
 8004984:	ff0fffff 	.word	0xff0fffff
 8004988:	feffffff 	.word	0xfeffffff
 800498c:	fdffffff 	.word	0xfdffffff
 8004990:	dfffffff 	.word	0xdfffffff

08004994 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	220f      	movs	r2, #15
 80049a4:	4013      	ands	r3, r2
 80049a6:	2204      	movs	r2, #4
 80049a8:	409a      	lsls	r2, r3
 80049aa:	0013      	movs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	43d2      	mvns	r2, r2
 80049b6:	401a      	ands	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a1a      	ldr	r2, [r3, #32]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	210f      	movs	r1, #15
 80049c4:	400b      	ands	r3, r1
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	4099      	lsls	r1, r3
 80049ca:	000b      	movs	r3, r1
 80049cc:	431a      	orrs	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	621a      	str	r2, [r3, #32]
}
 80049d2:	46c0      	nop			; (mov r8, r8)
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b006      	add	sp, #24
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e046      	b.n	8004a7c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2288      	movs	r2, #136	; 0x88
 80049f2:	589b      	ldr	r3, [r3, r2]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d107      	bne.n	8004a08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2284      	movs	r2, #132	; 0x84
 80049fc:	2100      	movs	r1, #0
 80049fe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	0018      	movs	r0, r3
 8004a04:	f7fd fd7a 	bl	80024fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2288      	movs	r2, #136	; 0x88
 8004a0c:	2124      	movs	r1, #36	; 0x24
 8004a0e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	438a      	bics	r2, r1
 8004a1e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f000 fa10 	bl	8004e50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	0018      	movs	r0, r3
 8004a34:	f000 f8a2 	bl	8004b7c <UART_SetConfig>
 8004a38:	0003      	movs	r3, r0
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e01c      	b.n	8004a7c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	490d      	ldr	r1, [pc, #52]	; (8004a84 <HAL_UART_Init+0xa8>)
 8004a4e:	400a      	ands	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	212a      	movs	r1, #42	; 0x2a
 8004a5e:	438a      	bics	r2, r1
 8004a60:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	0018      	movs	r0, r3
 8004a76:	f000 fa9f 	bl	8004fb8 <UART_CheckIdleState>
 8004a7a:	0003      	movs	r3, r0
}
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	b002      	add	sp, #8
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	ffffb7ff 	.word	0xffffb7ff

08004a88 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	1dbb      	adds	r3, r7, #6
 8004a94:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	228c      	movs	r2, #140	; 0x8c
 8004a9a:	589b      	ldr	r3, [r3, r2]
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d145      	bne.n	8004b2c <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_UART_Receive_DMA+0x26>
 8004aa6:	1dbb      	adds	r3, r7, #6
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e03d      	b.n	8004b2e <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	2380      	movs	r3, #128	; 0x80
 8004ab8:	015b      	lsls	r3, r3, #5
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d109      	bne.n	8004ad2 <HAL_UART_Receive_DMA+0x4a>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d105      	bne.n	8004ad2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	4013      	ands	r3, r2
 8004acc:	d001      	beq.n	8004ad2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e02d      	b.n	8004b2e <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	2380      	movs	r3, #128	; 0x80
 8004ae0:	041b      	lsls	r3, r3, #16
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	d019      	beq.n	8004b1a <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8004aea:	613b      	str	r3, [r7, #16]
  return(result);
 8004aec:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004aee:	61fb      	str	r3, [r7, #28]
 8004af0:	2301      	movs	r3, #1
 8004af2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f383 8810 	msr	PRIMASK, r3
}
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2180      	movs	r1, #128	; 0x80
 8004b08:	04c9      	lsls	r1, r1, #19
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	f383 8810 	msr	PRIMASK, r3
}
 8004b18:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004b1a:	1dbb      	adds	r3, r7, #6
 8004b1c:	881a      	ldrh	r2, [r3, #0]
 8004b1e:	68b9      	ldr	r1, [r7, #8]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	0018      	movs	r0, r3
 8004b24:	f000 fb62 	bl	80051ec <UART_Start_Receive_DMA>
 8004b28:	0003      	movs	r3, r0
 8004b2a:	e000      	b.n	8004b2e <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004b2c:	2302      	movs	r3, #2
  }
}
 8004b2e:	0018      	movs	r0, r3
 8004b30:	46bd      	mov	sp, r7
 8004b32:	b008      	add	sp, #32
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b002      	add	sp, #8
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b082      	sub	sp, #8
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b002      	add	sp, #8
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b082      	sub	sp, #8
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b5e:	46c0      	nop			; (mov r8, r8)
 8004b60:	46bd      	mov	sp, r7
 8004b62:	b002      	add	sp, #8
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b082      	sub	sp, #8
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	000a      	movs	r2, r1
 8004b70:	1cbb      	adds	r3, r7, #2
 8004b72:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b74:	46c0      	nop			; (mov r8, r8)
 8004b76:	46bd      	mov	sp, r7
 8004b78:	b002      	add	sp, #8
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b088      	sub	sp, #32
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b84:	231a      	movs	r3, #26
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	2200      	movs	r2, #0
 8004b8a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4aa1      	ldr	r2, [pc, #644]	; (8004e30 <UART_SetConfig+0x2b4>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	0019      	movs	r1, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	69fa      	ldr	r2, [r7, #28]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	4a9c      	ldr	r2, [pc, #624]	; (8004e34 <UART_SetConfig+0x2b8>)
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	0019      	movs	r1, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	4a93      	ldr	r2, [pc, #588]	; (8004e38 <UART_SetConfig+0x2bc>)
 8004bea:	4013      	ands	r3, r2
 8004bec:	0019      	movs	r1, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69fa      	ldr	r2, [r7, #28]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfe:	220f      	movs	r2, #15
 8004c00:	4393      	bics	r3, r2
 8004c02:	0019      	movs	r1, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a89      	ldr	r2, [pc, #548]	; (8004e3c <UART_SetConfig+0x2c0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d127      	bne.n	8004c6a <UART_SetConfig+0xee>
 8004c1a:	4b89      	ldr	r3, [pc, #548]	; (8004e40 <UART_SetConfig+0x2c4>)
 8004c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1e:	2203      	movs	r2, #3
 8004c20:	4013      	ands	r3, r2
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d017      	beq.n	8004c56 <UART_SetConfig+0xda>
 8004c26:	d81b      	bhi.n	8004c60 <UART_SetConfig+0xe4>
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d00a      	beq.n	8004c42 <UART_SetConfig+0xc6>
 8004c2c:	d818      	bhi.n	8004c60 <UART_SetConfig+0xe4>
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d002      	beq.n	8004c38 <UART_SetConfig+0xbc>
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d00a      	beq.n	8004c4c <UART_SetConfig+0xd0>
 8004c36:	e013      	b.n	8004c60 <UART_SetConfig+0xe4>
 8004c38:	231b      	movs	r3, #27
 8004c3a:	18fb      	adds	r3, r7, r3
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	701a      	strb	r2, [r3, #0]
 8004c40:	e021      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004c42:	231b      	movs	r3, #27
 8004c44:	18fb      	adds	r3, r7, r3
 8004c46:	2202      	movs	r2, #2
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	e01c      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004c4c:	231b      	movs	r3, #27
 8004c4e:	18fb      	adds	r3, r7, r3
 8004c50:	2204      	movs	r2, #4
 8004c52:	701a      	strb	r2, [r3, #0]
 8004c54:	e017      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004c56:	231b      	movs	r3, #27
 8004c58:	18fb      	adds	r3, r7, r3
 8004c5a:	2208      	movs	r2, #8
 8004c5c:	701a      	strb	r2, [r3, #0]
 8004c5e:	e012      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004c60:	231b      	movs	r3, #27
 8004c62:	18fb      	adds	r3, r7, r3
 8004c64:	2210      	movs	r2, #16
 8004c66:	701a      	strb	r2, [r3, #0]
 8004c68:	e00d      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a75      	ldr	r2, [pc, #468]	; (8004e44 <UART_SetConfig+0x2c8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d104      	bne.n	8004c7e <UART_SetConfig+0x102>
 8004c74:	231b      	movs	r3, #27
 8004c76:	18fb      	adds	r3, r7, r3
 8004c78:	2200      	movs	r2, #0
 8004c7a:	701a      	strb	r2, [r3, #0]
 8004c7c:	e003      	b.n	8004c86 <UART_SetConfig+0x10a>
 8004c7e:	231b      	movs	r3, #27
 8004c80:	18fb      	adds	r3, r7, r3
 8004c82:	2210      	movs	r2, #16
 8004c84:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69da      	ldr	r2, [r3, #28]
 8004c8a:	2380      	movs	r3, #128	; 0x80
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d000      	beq.n	8004c94 <UART_SetConfig+0x118>
 8004c92:	e065      	b.n	8004d60 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8004c94:	231b      	movs	r3, #27
 8004c96:	18fb      	adds	r3, r7, r3
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d015      	beq.n	8004cca <UART_SetConfig+0x14e>
 8004c9e:	dc18      	bgt.n	8004cd2 <UART_SetConfig+0x156>
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d00d      	beq.n	8004cc0 <UART_SetConfig+0x144>
 8004ca4:	dc15      	bgt.n	8004cd2 <UART_SetConfig+0x156>
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <UART_SetConfig+0x134>
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d005      	beq.n	8004cba <UART_SetConfig+0x13e>
 8004cae:	e010      	b.n	8004cd2 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cb0:	f7fe ff5c 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 8004cb4:	0003      	movs	r3, r0
 8004cb6:	617b      	str	r3, [r7, #20]
        break;
 8004cb8:	e012      	b.n	8004ce0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cba:	4b63      	ldr	r3, [pc, #396]	; (8004e48 <UART_SetConfig+0x2cc>)
 8004cbc:	617b      	str	r3, [r7, #20]
        break;
 8004cbe:	e00f      	b.n	8004ce0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cc0:	f7fe fec8 	bl	8003a54 <HAL_RCC_GetSysClockFreq>
 8004cc4:	0003      	movs	r3, r0
 8004cc6:	617b      	str	r3, [r7, #20]
        break;
 8004cc8:	e00a      	b.n	8004ce0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cca:	2380      	movs	r3, #128	; 0x80
 8004ccc:	021b      	lsls	r3, r3, #8
 8004cce:	617b      	str	r3, [r7, #20]
        break;
 8004cd0:	e006      	b.n	8004ce0 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004cd6:	231a      	movs	r3, #26
 8004cd8:	18fb      	adds	r3, r7, r3
 8004cda:	2201      	movs	r2, #1
 8004cdc:	701a      	strb	r2, [r3, #0]
        break;
 8004cde:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d100      	bne.n	8004ce8 <UART_SetConfig+0x16c>
 8004ce6:	e08d      	b.n	8004e04 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cec:	4b57      	ldr	r3, [pc, #348]	; (8004e4c <UART_SetConfig+0x2d0>)
 8004cee:	0052      	lsls	r2, r2, #1
 8004cf0:	5ad3      	ldrh	r3, [r2, r3]
 8004cf2:	0019      	movs	r1, r3
 8004cf4:	6978      	ldr	r0, [r7, #20]
 8004cf6:	f7fb fa03 	bl	8000100 <__udivsi3>
 8004cfa:	0003      	movs	r3, r0
 8004cfc:	005a      	lsls	r2, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	085b      	lsrs	r3, r3, #1
 8004d04:	18d2      	adds	r2, r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	0019      	movs	r1, r3
 8004d0c:	0010      	movs	r0, r2
 8004d0e:	f7fb f9f7 	bl	8000100 <__udivsi3>
 8004d12:	0003      	movs	r3, r0
 8004d14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	2b0f      	cmp	r3, #15
 8004d1a:	d91c      	bls.n	8004d56 <UART_SetConfig+0x1da>
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	2380      	movs	r3, #128	; 0x80
 8004d20:	025b      	lsls	r3, r3, #9
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d217      	bcs.n	8004d56 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	200e      	movs	r0, #14
 8004d2c:	183b      	adds	r3, r7, r0
 8004d2e:	210f      	movs	r1, #15
 8004d30:	438a      	bics	r2, r1
 8004d32:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	085b      	lsrs	r3, r3, #1
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2207      	movs	r2, #7
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	b299      	uxth	r1, r3
 8004d40:	183b      	adds	r3, r7, r0
 8004d42:	183a      	adds	r2, r7, r0
 8004d44:	8812      	ldrh	r2, [r2, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	183a      	adds	r2, r7, r0
 8004d50:	8812      	ldrh	r2, [r2, #0]
 8004d52:	60da      	str	r2, [r3, #12]
 8004d54:	e056      	b.n	8004e04 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004d56:	231a      	movs	r3, #26
 8004d58:	18fb      	adds	r3, r7, r3
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	701a      	strb	r2, [r3, #0]
 8004d5e:	e051      	b.n	8004e04 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d60:	231b      	movs	r3, #27
 8004d62:	18fb      	adds	r3, r7, r3
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d015      	beq.n	8004d96 <UART_SetConfig+0x21a>
 8004d6a:	dc18      	bgt.n	8004d9e <UART_SetConfig+0x222>
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d00d      	beq.n	8004d8c <UART_SetConfig+0x210>
 8004d70:	dc15      	bgt.n	8004d9e <UART_SetConfig+0x222>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <UART_SetConfig+0x200>
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d005      	beq.n	8004d86 <UART_SetConfig+0x20a>
 8004d7a:	e010      	b.n	8004d9e <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d7c:	f7fe fef6 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 8004d80:	0003      	movs	r3, r0
 8004d82:	617b      	str	r3, [r7, #20]
        break;
 8004d84:	e012      	b.n	8004dac <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d86:	4b30      	ldr	r3, [pc, #192]	; (8004e48 <UART_SetConfig+0x2cc>)
 8004d88:	617b      	str	r3, [r7, #20]
        break;
 8004d8a:	e00f      	b.n	8004dac <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d8c:	f7fe fe62 	bl	8003a54 <HAL_RCC_GetSysClockFreq>
 8004d90:	0003      	movs	r3, r0
 8004d92:	617b      	str	r3, [r7, #20]
        break;
 8004d94:	e00a      	b.n	8004dac <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d96:	2380      	movs	r3, #128	; 0x80
 8004d98:	021b      	lsls	r3, r3, #8
 8004d9a:	617b      	str	r3, [r7, #20]
        break;
 8004d9c:	e006      	b.n	8004dac <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004da2:	231a      	movs	r3, #26
 8004da4:	18fb      	adds	r3, r7, r3
 8004da6:	2201      	movs	r2, #1
 8004da8:	701a      	strb	r2, [r3, #0]
        break;
 8004daa:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d028      	beq.n	8004e04 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004db6:	4b25      	ldr	r3, [pc, #148]	; (8004e4c <UART_SetConfig+0x2d0>)
 8004db8:	0052      	lsls	r2, r2, #1
 8004dba:	5ad3      	ldrh	r3, [r2, r3]
 8004dbc:	0019      	movs	r1, r3
 8004dbe:	6978      	ldr	r0, [r7, #20]
 8004dc0:	f7fb f99e 	bl	8000100 <__udivsi3>
 8004dc4:	0003      	movs	r3, r0
 8004dc6:	001a      	movs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	085b      	lsrs	r3, r3, #1
 8004dce:	18d2      	adds	r2, r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	0019      	movs	r1, r3
 8004dd6:	0010      	movs	r0, r2
 8004dd8:	f7fb f992 	bl	8000100 <__udivsi3>
 8004ddc:	0003      	movs	r3, r0
 8004dde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	2b0f      	cmp	r3, #15
 8004de4:	d90a      	bls.n	8004dfc <UART_SetConfig+0x280>
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	2380      	movs	r3, #128	; 0x80
 8004dea:	025b      	lsls	r3, r3, #9
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d205      	bcs.n	8004dfc <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	60da      	str	r2, [r3, #12]
 8004dfa:	e003      	b.n	8004e04 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004dfc:	231a      	movs	r3, #26
 8004dfe:	18fb      	adds	r3, r7, r3
 8004e00:	2201      	movs	r2, #1
 8004e02:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	226a      	movs	r2, #106	; 0x6a
 8004e08:	2101      	movs	r1, #1
 8004e0a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2268      	movs	r2, #104	; 0x68
 8004e10:	2101      	movs	r1, #1
 8004e12:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004e20:	231a      	movs	r3, #26
 8004e22:	18fb      	adds	r3, r7, r3
 8004e24:	781b      	ldrb	r3, [r3, #0]
}
 8004e26:	0018      	movs	r0, r3
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	b008      	add	sp, #32
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	46c0      	nop			; (mov r8, r8)
 8004e30:	cfff69f3 	.word	0xcfff69f3
 8004e34:	ffffcfff 	.word	0xffffcfff
 8004e38:	11fff4ff 	.word	0x11fff4ff
 8004e3c:	40013800 	.word	0x40013800
 8004e40:	40021000 	.word	0x40021000
 8004e44:	40004400 	.word	0x40004400
 8004e48:	00f42400 	.word	0x00f42400
 8004e4c:	080063f0 	.word	0x080063f0

08004e50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	2208      	movs	r2, #8
 8004e5e:	4013      	ands	r3, r2
 8004e60:	d00b      	beq.n	8004e7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	4a4a      	ldr	r2, [pc, #296]	; (8004f94 <UART_AdvFeatureConfig+0x144>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	0019      	movs	r1, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7e:	2201      	movs	r2, #1
 8004e80:	4013      	ands	r3, r2
 8004e82:	d00b      	beq.n	8004e9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	4a43      	ldr	r2, [pc, #268]	; (8004f98 <UART_AdvFeatureConfig+0x148>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	0019      	movs	r1, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d00b      	beq.n	8004ebe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	4a3b      	ldr	r2, [pc, #236]	; (8004f9c <UART_AdvFeatureConfig+0x14c>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	0019      	movs	r1, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	2204      	movs	r2, #4
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	d00b      	beq.n	8004ee0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	4a34      	ldr	r2, [pc, #208]	; (8004fa0 <UART_AdvFeatureConfig+0x150>)
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	0019      	movs	r1, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee4:	2210      	movs	r2, #16
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	d00b      	beq.n	8004f02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	4a2c      	ldr	r2, [pc, #176]	; (8004fa4 <UART_AdvFeatureConfig+0x154>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	0019      	movs	r1, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f06:	2220      	movs	r2, #32
 8004f08:	4013      	ands	r3, r2
 8004f0a:	d00b      	beq.n	8004f24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	4a25      	ldr	r2, [pc, #148]	; (8004fa8 <UART_AdvFeatureConfig+0x158>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	0019      	movs	r1, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f28:	2240      	movs	r2, #64	; 0x40
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	d01d      	beq.n	8004f6a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	4a1d      	ldr	r2, [pc, #116]	; (8004fac <UART_AdvFeatureConfig+0x15c>)
 8004f36:	4013      	ands	r3, r2
 8004f38:	0019      	movs	r1, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f4a:	2380      	movs	r3, #128	; 0x80
 8004f4c:	035b      	lsls	r3, r3, #13
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d10b      	bne.n	8004f6a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	4a15      	ldr	r2, [pc, #84]	; (8004fb0 <UART_AdvFeatureConfig+0x160>)
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	0019      	movs	r1, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6e:	2280      	movs	r2, #128	; 0x80
 8004f70:	4013      	ands	r3, r2
 8004f72:	d00b      	beq.n	8004f8c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	4a0e      	ldr	r2, [pc, #56]	; (8004fb4 <UART_AdvFeatureConfig+0x164>)
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	0019      	movs	r1, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	605a      	str	r2, [r3, #4]
  }
}
 8004f8c:	46c0      	nop			; (mov r8, r8)
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b002      	add	sp, #8
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	ffff7fff 	.word	0xffff7fff
 8004f98:	fffdffff 	.word	0xfffdffff
 8004f9c:	fffeffff 	.word	0xfffeffff
 8004fa0:	fffbffff 	.word	0xfffbffff
 8004fa4:	ffffefff 	.word	0xffffefff
 8004fa8:	ffffdfff 	.word	0xffffdfff
 8004fac:	ffefffff 	.word	0xffefffff
 8004fb0:	ff9fffff 	.word	0xff9fffff
 8004fb4:	fff7ffff 	.word	0xfff7ffff

08004fb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b092      	sub	sp, #72	; 0x48
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2290      	movs	r2, #144	; 0x90
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fc8:	f7fd fbe4 	bl	8002794 <HAL_GetTick>
 8004fcc:	0003      	movs	r3, r0
 8004fce:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2208      	movs	r2, #8
 8004fd8:	4013      	ands	r3, r2
 8004fda:	2b08      	cmp	r3, #8
 8004fdc:	d12d      	bne.n	800503a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe0:	2280      	movs	r2, #128	; 0x80
 8004fe2:	0391      	lsls	r1, r2, #14
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	4a47      	ldr	r2, [pc, #284]	; (8005104 <UART_CheckIdleState+0x14c>)
 8004fe8:	9200      	str	r2, [sp, #0]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f000 f88e 	bl	800510c <UART_WaitOnFlagUntilTimeout>
 8004ff0:	1e03      	subs	r3, r0, #0
 8004ff2:	d022      	beq.n	800503a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ff4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004ffc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ffe:	2301      	movs	r3, #1
 8005000:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005004:	f383 8810 	msr	PRIMASK, r3
}
 8005008:	46c0      	nop			; (mov r8, r8)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2180      	movs	r1, #128	; 0x80
 8005016:	438a      	bics	r2, r1
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800501e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005020:	f383 8810 	msr	PRIMASK, r3
}
 8005024:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2288      	movs	r2, #136	; 0x88
 800502a:	2120      	movs	r1, #32
 800502c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2284      	movs	r2, #132	; 0x84
 8005032:	2100      	movs	r1, #0
 8005034:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e060      	b.n	80050fc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2204      	movs	r2, #4
 8005042:	4013      	ands	r3, r2
 8005044:	2b04      	cmp	r3, #4
 8005046:	d146      	bne.n	80050d6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800504a:	2280      	movs	r2, #128	; 0x80
 800504c:	03d1      	lsls	r1, r2, #15
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	4a2c      	ldr	r2, [pc, #176]	; (8005104 <UART_CheckIdleState+0x14c>)
 8005052:	9200      	str	r2, [sp, #0]
 8005054:	2200      	movs	r2, #0
 8005056:	f000 f859 	bl	800510c <UART_WaitOnFlagUntilTimeout>
 800505a:	1e03      	subs	r3, r0, #0
 800505c:	d03b      	beq.n	80050d6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800505e:	f3ef 8310 	mrs	r3, PRIMASK
 8005062:	60fb      	str	r3, [r7, #12]
  return(result);
 8005064:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005066:	637b      	str	r3, [r7, #52]	; 0x34
 8005068:	2301      	movs	r3, #1
 800506a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	f383 8810 	msr	PRIMASK, r3
}
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4922      	ldr	r1, [pc, #136]	; (8005108 <UART_CheckIdleState+0x150>)
 8005080:	400a      	ands	r2, r1
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005086:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f383 8810 	msr	PRIMASK, r3
}
 800508e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005090:	f3ef 8310 	mrs	r3, PRIMASK
 8005094:	61bb      	str	r3, [r7, #24]
  return(result);
 8005096:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005098:	633b      	str	r3, [r7, #48]	; 0x30
 800509a:	2301      	movs	r3, #1
 800509c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	f383 8810 	msr	PRIMASK, r3
}
 80050a4:	46c0      	nop			; (mov r8, r8)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2101      	movs	r1, #1
 80050b2:	438a      	bics	r2, r1
 80050b4:	609a      	str	r2, [r3, #8]
 80050b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	f383 8810 	msr	PRIMASK, r3
}
 80050c0:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	228c      	movs	r2, #140	; 0x8c
 80050c6:	2120      	movs	r1, #32
 80050c8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2284      	movs	r2, #132	; 0x84
 80050ce:	2100      	movs	r1, #0
 80050d0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e012      	b.n	80050fc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2288      	movs	r2, #136	; 0x88
 80050da:	2120      	movs	r1, #32
 80050dc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	228c      	movs	r2, #140	; 0x8c
 80050e2:	2120      	movs	r1, #32
 80050e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2284      	movs	r2, #132	; 0x84
 80050f6:	2100      	movs	r1, #0
 80050f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	0018      	movs	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	b010      	add	sp, #64	; 0x40
 8005102:	bd80      	pop	{r7, pc}
 8005104:	01ffffff 	.word	0x01ffffff
 8005108:	fffffedf 	.word	0xfffffedf

0800510c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	1dfb      	adds	r3, r7, #7
 800511a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800511c:	e051      	b.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	3301      	adds	r3, #1
 8005122:	d04e      	beq.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005124:	f7fd fb36 	bl	8002794 <HAL_GetTick>
 8005128:	0002      	movs	r2, r0
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	429a      	cmp	r2, r3
 8005132:	d302      	bcc.n	800513a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e051      	b.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2204      	movs	r2, #4
 8005146:	4013      	ands	r3, r2
 8005148:	d03b      	beq.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2b80      	cmp	r3, #128	; 0x80
 800514e:	d038      	beq.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2b40      	cmp	r3, #64	; 0x40
 8005154:	d035      	beq.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	2208      	movs	r2, #8
 800515e:	4013      	ands	r3, r2
 8005160:	2b08      	cmp	r3, #8
 8005162:	d111      	bne.n	8005188 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2208      	movs	r2, #8
 800516a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	0018      	movs	r0, r3
 8005170:	f000 f922 	bl	80053b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2290      	movs	r2, #144	; 0x90
 8005178:	2108      	movs	r1, #8
 800517a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2284      	movs	r2, #132	; 0x84
 8005180:	2100      	movs	r1, #0
 8005182:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e02c      	b.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	69da      	ldr	r2, [r3, #28]
 800518e:	2380      	movs	r3, #128	; 0x80
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	401a      	ands	r2, r3
 8005194:	2380      	movs	r3, #128	; 0x80
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	429a      	cmp	r2, r3
 800519a:	d112      	bne.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2280      	movs	r2, #128	; 0x80
 80051a2:	0112      	lsls	r2, r2, #4
 80051a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	0018      	movs	r0, r3
 80051aa:	f000 f905 	bl	80053b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2290      	movs	r2, #144	; 0x90
 80051b2:	2120      	movs	r1, #32
 80051b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2284      	movs	r2, #132	; 0x84
 80051ba:	2100      	movs	r1, #0
 80051bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e00f      	b.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	4013      	ands	r3, r2
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	425a      	negs	r2, r3
 80051d2:	4153      	adcs	r3, r2
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	001a      	movs	r2, r3
 80051d8:	1dfb      	adds	r3, r7, #7
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d09e      	beq.n	800511e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	0018      	movs	r0, r3
 80051e4:	46bd      	mov	sp, r7
 80051e6:	b004      	add	sp, #16
 80051e8:	bd80      	pop	{r7, pc}
	...

080051ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b090      	sub	sp, #64	; 0x40
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	1dbb      	adds	r3, r7, #6
 80051f8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	1dba      	adds	r2, r7, #6
 8005204:	215c      	movs	r1, #92	; 0x5c
 8005206:	8812      	ldrh	r2, [r2, #0]
 8005208:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2290      	movs	r2, #144	; 0x90
 800520e:	2100      	movs	r1, #0
 8005210:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	228c      	movs	r2, #140	; 0x8c
 8005216:	2122      	movs	r1, #34	; 0x22
 8005218:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2280      	movs	r2, #128	; 0x80
 800521e:	589b      	ldr	r3, [r3, r2]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d02d      	beq.n	8005280 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2280      	movs	r2, #128	; 0x80
 8005228:	589b      	ldr	r3, [r3, r2]
 800522a:	4a40      	ldr	r2, [pc, #256]	; (800532c <UART_Start_Receive_DMA+0x140>)
 800522c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2280      	movs	r2, #128	; 0x80
 8005232:	589b      	ldr	r3, [r3, r2]
 8005234:	4a3e      	ldr	r2, [pc, #248]	; (8005330 <UART_Start_Receive_DMA+0x144>)
 8005236:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2280      	movs	r2, #128	; 0x80
 800523c:	589b      	ldr	r3, [r3, r2]
 800523e:	4a3d      	ldr	r2, [pc, #244]	; (8005334 <UART_Start_Receive_DMA+0x148>)
 8005240:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2280      	movs	r2, #128	; 0x80
 8005246:	589b      	ldr	r3, [r3, r2]
 8005248:	2200      	movs	r2, #0
 800524a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2280      	movs	r2, #128	; 0x80
 8005250:	5898      	ldr	r0, [r3, r2]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3324      	adds	r3, #36	; 0x24
 8005258:	0019      	movs	r1, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525e:	001a      	movs	r2, r3
 8005260:	1dbb      	adds	r3, r7, #6
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	f7fd fc2c 	bl	8002ac0 <HAL_DMA_Start_IT>
 8005268:	1e03      	subs	r3, r0, #0
 800526a:	d009      	beq.n	8005280 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2290      	movs	r2, #144	; 0x90
 8005270:	2110      	movs	r1, #16
 8005272:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	228c      	movs	r2, #140	; 0x8c
 8005278:	2120      	movs	r1, #32
 800527a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e050      	b.n	8005322 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d019      	beq.n	80052bc <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005288:	f3ef 8310 	mrs	r3, PRIMASK
 800528c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005290:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005292:	2301      	movs	r3, #1
 8005294:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005298:	f383 8810 	msr	PRIMASK, r3
}
 800529c:	46c0      	nop			; (mov r8, r8)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2180      	movs	r1, #128	; 0x80
 80052aa:	0049      	lsls	r1, r1, #1
 80052ac:	430a      	orrs	r2, r1
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b6:	f383 8810 	msr	PRIMASK, r3
}
 80052ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052bc:	f3ef 8310 	mrs	r3, PRIMASK
 80052c0:	613b      	str	r3, [r7, #16]
  return(result);
 80052c2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80052c6:	2301      	movs	r3, #1
 80052c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f383 8810 	msr	PRIMASK, r3
}
 80052d0:	46c0      	nop			; (mov r8, r8)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2101      	movs	r1, #1
 80052de:	430a      	orrs	r2, r1
 80052e0:	609a      	str	r2, [r3, #8]
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	f383 8810 	msr	PRIMASK, r3
}
 80052ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ee:	f3ef 8310 	mrs	r3, PRIMASK
 80052f2:	61fb      	str	r3, [r7, #28]
  return(result);
 80052f4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052f6:	637b      	str	r3, [r7, #52]	; 0x34
 80052f8:	2301      	movs	r3, #1
 80052fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	f383 8810 	msr	PRIMASK, r3
}
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2140      	movs	r1, #64	; 0x40
 8005310:	430a      	orrs	r2, r1
 8005312:	609a      	str	r2, [r3, #8]
 8005314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005316:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	f383 8810 	msr	PRIMASK, r3
}
 800531e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	0018      	movs	r0, r3
 8005324:	46bd      	mov	sp, r7
 8005326:	b010      	add	sp, #64	; 0x40
 8005328:	bd80      	pop	{r7, pc}
 800532a:	46c0      	nop			; (mov r8, r8)
 800532c:	08005485 	.word	0x08005485
 8005330:	080055b5 	.word	0x080055b5
 8005334:	080055f7 	.word	0x080055f7

08005338 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08a      	sub	sp, #40	; 0x28
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005340:	f3ef 8310 	mrs	r3, PRIMASK
 8005344:	60bb      	str	r3, [r7, #8]
  return(result);
 8005346:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005348:	627b      	str	r3, [r7, #36]	; 0x24
 800534a:	2301      	movs	r3, #1
 800534c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f383 8810 	msr	PRIMASK, r3
}
 8005354:	46c0      	nop			; (mov r8, r8)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	21c0      	movs	r1, #192	; 0xc0
 8005362:	438a      	bics	r2, r1
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f383 8810 	msr	PRIMASK, r3
}
 8005370:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005372:	f3ef 8310 	mrs	r3, PRIMASK
 8005376:	617b      	str	r3, [r7, #20]
  return(result);
 8005378:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800537a:	623b      	str	r3, [r7, #32]
 800537c:	2301      	movs	r3, #1
 800537e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	f383 8810 	msr	PRIMASK, r3
}
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4908      	ldr	r1, [pc, #32]	; (80053b4 <UART_EndTxTransfer+0x7c>)
 8005394:	400a      	ands	r2, r1
 8005396:	609a      	str	r2, [r3, #8]
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	f383 8810 	msr	PRIMASK, r3
}
 80053a2:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2288      	movs	r2, #136	; 0x88
 80053a8:	2120      	movs	r1, #32
 80053aa:	5099      	str	r1, [r3, r2]
}
 80053ac:	46c0      	nop			; (mov r8, r8)
 80053ae:	46bd      	mov	sp, r7
 80053b0:	b00a      	add	sp, #40	; 0x28
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	ff7fffff 	.word	0xff7fffff

080053b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08e      	sub	sp, #56	; 0x38
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053c0:	f3ef 8310 	mrs	r3, PRIMASK
 80053c4:	617b      	str	r3, [r7, #20]
  return(result);
 80053c6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053c8:	637b      	str	r3, [r7, #52]	; 0x34
 80053ca:	2301      	movs	r3, #1
 80053cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	f383 8810 	msr	PRIMASK, r3
}
 80053d4:	46c0      	nop			; (mov r8, r8)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4926      	ldr	r1, [pc, #152]	; (800547c <UART_EndRxTransfer+0xc4>)
 80053e2:	400a      	ands	r2, r1
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	f383 8810 	msr	PRIMASK, r3
}
 80053f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053f2:	f3ef 8310 	mrs	r3, PRIMASK
 80053f6:	623b      	str	r3, [r7, #32]
  return(result);
 80053f8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053fa:	633b      	str	r3, [r7, #48]	; 0x30
 80053fc:	2301      	movs	r3, #1
 80053fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	f383 8810 	msr	PRIMASK, r3
}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689a      	ldr	r2, [r3, #8]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	491b      	ldr	r1, [pc, #108]	; (8005480 <UART_EndRxTransfer+0xc8>)
 8005414:	400a      	ands	r2, r1
 8005416:	609a      	str	r2, [r3, #8]
 8005418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541e:	f383 8810 	msr	PRIMASK, r3
}
 8005422:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005428:	2b01      	cmp	r3, #1
 800542a:	d118      	bne.n	800545e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800542c:	f3ef 8310 	mrs	r3, PRIMASK
 8005430:	60bb      	str	r3, [r7, #8]
  return(result);
 8005432:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005436:	2301      	movs	r3, #1
 8005438:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f383 8810 	msr	PRIMASK, r3
}
 8005440:	46c0      	nop			; (mov r8, r8)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2110      	movs	r1, #16
 800544e:	438a      	bics	r2, r1
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005454:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f383 8810 	msr	PRIMASK, r3
}
 800545c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	228c      	movs	r2, #140	; 0x8c
 8005462:	2120      	movs	r1, #32
 8005464:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	46bd      	mov	sp, r7
 8005476:	b00e      	add	sp, #56	; 0x38
 8005478:	bd80      	pop	{r7, pc}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	fffffedf 	.word	0xfffffedf
 8005480:	effffffe 	.word	0xeffffffe

08005484 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b094      	sub	sp, #80	; 0x50
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005490:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2220      	movs	r2, #32
 800549a:	4013      	ands	r3, r2
 800549c:	d16f      	bne.n	800557e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800549e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a0:	225e      	movs	r2, #94	; 0x5e
 80054a2:	2100      	movs	r1, #0
 80054a4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054a6:	f3ef 8310 	mrs	r3, PRIMASK
 80054aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80054ac:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80054b0:	2301      	movs	r3, #1
 80054b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	f383 8810 	msr	PRIMASK, r3
}
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	493a      	ldr	r1, [pc, #232]	; (80055b0 <UART_DMAReceiveCplt+0x12c>)
 80054c8:	400a      	ands	r2, r1
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	f383 8810 	msr	PRIMASK, r3
}
 80054d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054d8:	f3ef 8310 	mrs	r3, PRIMASK
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e0:	647b      	str	r3, [r7, #68]	; 0x44
 80054e2:	2301      	movs	r3, #1
 80054e4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e8:	f383 8810 	msr	PRIMASK, r3
}
 80054ec:	46c0      	nop			; (mov r8, r8)
 80054ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2101      	movs	r1, #1
 80054fa:	438a      	bics	r2, r1
 80054fc:	609a      	str	r2, [r3, #8]
 80054fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005500:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005504:	f383 8810 	msr	PRIMASK, r3
}
 8005508:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800550a:	f3ef 8310 	mrs	r3, PRIMASK
 800550e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005510:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005512:	643b      	str	r3, [r7, #64]	; 0x40
 8005514:	2301      	movs	r3, #1
 8005516:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551a:	f383 8810 	msr	PRIMASK, r3
}
 800551e:	46c0      	nop			; (mov r8, r8)
 8005520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689a      	ldr	r2, [r3, #8]
 8005526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2140      	movs	r1, #64	; 0x40
 800552c:	438a      	bics	r2, r1
 800552e:	609a      	str	r2, [r3, #8]
 8005530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005532:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005536:	f383 8810 	msr	PRIMASK, r3
}
 800553a:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800553c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800553e:	228c      	movs	r2, #140	; 0x8c
 8005540:	2120      	movs	r1, #32
 8005542:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005548:	2b01      	cmp	r3, #1
 800554a:	d118      	bne.n	800557e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800554c:	f3ef 8310 	mrs	r3, PRIMASK
 8005550:	60fb      	str	r3, [r7, #12]
  return(result);
 8005552:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005554:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005556:	2301      	movs	r3, #1
 8005558:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f383 8810 	msr	PRIMASK, r3
}
 8005560:	46c0      	nop			; (mov r8, r8)
 8005562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2110      	movs	r1, #16
 800556e:	438a      	bics	r2, r1
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005574:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f383 8810 	msr	PRIMASK, r3
}
 800557c:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800557e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005580:	2200      	movs	r2, #0
 8005582:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005588:	2b01      	cmp	r3, #1
 800558a:	d108      	bne.n	800559e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800558c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800558e:	225c      	movs	r2, #92	; 0x5c
 8005590:	5a9a      	ldrh	r2, [r3, r2]
 8005592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005594:	0011      	movs	r1, r2
 8005596:	0018      	movs	r0, r3
 8005598:	f7ff fae5 	bl	8004b66 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800559c:	e003      	b.n	80055a6 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800559e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a0:	0018      	movs	r0, r3
 80055a2:	f7ff fac8 	bl	8004b36 <HAL_UART_RxCpltCallback>
}
 80055a6:	46c0      	nop			; (mov r8, r8)
 80055a8:	46bd      	mov	sp, r7
 80055aa:	b014      	add	sp, #80	; 0x50
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	fffffeff 	.word	0xfffffeff

080055b4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2201      	movs	r2, #1
 80055c6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d10a      	bne.n	80055e6 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	225c      	movs	r2, #92	; 0x5c
 80055d4:	5a9b      	ldrh	r3, [r3, r2]
 80055d6:	085b      	lsrs	r3, r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	0011      	movs	r1, r2
 80055de:	0018      	movs	r0, r3
 80055e0:	f7ff fac1 	bl	8004b66 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055e4:	e003      	b.n	80055ee <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	0018      	movs	r0, r3
 80055ea:	f7ff faac 	bl	8004b46 <HAL_UART_RxHalfCpltCallback>
}
 80055ee:	46c0      	nop			; (mov r8, r8)
 80055f0:	46bd      	mov	sp, r7
 80055f2:	b004      	add	sp, #16
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b086      	sub	sp, #24
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005602:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	2288      	movs	r2, #136	; 0x88
 8005608:	589b      	ldr	r3, [r3, r2]
 800560a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	228c      	movs	r2, #140	; 0x8c
 8005610:	589b      	ldr	r3, [r3, r2]
 8005612:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	2280      	movs	r2, #128	; 0x80
 800561c:	4013      	ands	r3, r2
 800561e:	2b80      	cmp	r3, #128	; 0x80
 8005620:	d10a      	bne.n	8005638 <UART_DMAError+0x42>
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	2b21      	cmp	r3, #33	; 0x21
 8005626:	d107      	bne.n	8005638 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	2256      	movs	r2, #86	; 0x56
 800562c:	2100      	movs	r1, #0
 800562e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	0018      	movs	r0, r3
 8005634:	f7ff fe80 	bl	8005338 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	2240      	movs	r2, #64	; 0x40
 8005640:	4013      	ands	r3, r2
 8005642:	2b40      	cmp	r3, #64	; 0x40
 8005644:	d10a      	bne.n	800565c <UART_DMAError+0x66>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2b22      	cmp	r3, #34	; 0x22
 800564a:	d107      	bne.n	800565c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	225e      	movs	r2, #94	; 0x5e
 8005650:	2100      	movs	r1, #0
 8005652:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	0018      	movs	r0, r3
 8005658:	f7ff feae 	bl	80053b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	2290      	movs	r2, #144	; 0x90
 8005660:	589b      	ldr	r3, [r3, r2]
 8005662:	2210      	movs	r2, #16
 8005664:	431a      	orrs	r2, r3
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2190      	movs	r1, #144	; 0x90
 800566a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	0018      	movs	r0, r3
 8005670:	f7ff fa71 	bl	8004b56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005674:	46c0      	nop			; (mov r8, r8)
 8005676:	46bd      	mov	sp, r7
 8005678:	b006      	add	sp, #24
 800567a:	bd80      	pop	{r7, pc}

0800567c <cosf>:
 800567c:	b507      	push	{r0, r1, r2, lr}
 800567e:	4a18      	ldr	r2, [pc, #96]	; (80056e0 <cosf+0x64>)
 8005680:	0043      	lsls	r3, r0, #1
 8005682:	2100      	movs	r1, #0
 8005684:	085b      	lsrs	r3, r3, #1
 8005686:	4293      	cmp	r3, r2
 8005688:	dd14      	ble.n	80056b4 <cosf+0x38>
 800568a:	22ff      	movs	r2, #255	; 0xff
 800568c:	05d2      	lsls	r2, r2, #23
 800568e:	4293      	cmp	r3, r2
 8005690:	db03      	blt.n	800569a <cosf+0x1e>
 8005692:	1c01      	adds	r1, r0, #0
 8005694:	f7fb fa58 	bl	8000b48 <__aeabi_fsub>
 8005698:	bd0e      	pop	{r1, r2, r3, pc}
 800569a:	4669      	mov	r1, sp
 800569c:	f000 f822 	bl	80056e4 <__ieee754_rem_pio2f>
 80056a0:	2203      	movs	r2, #3
 80056a2:	4002      	ands	r2, r0
 80056a4:	2a01      	cmp	r2, #1
 80056a6:	d008      	beq.n	80056ba <cosf+0x3e>
 80056a8:	2a02      	cmp	r2, #2
 80056aa:	d00e      	beq.n	80056ca <cosf+0x4e>
 80056ac:	2a00      	cmp	r2, #0
 80056ae:	d111      	bne.n	80056d4 <cosf+0x58>
 80056b0:	9901      	ldr	r1, [sp, #4]
 80056b2:	9800      	ldr	r0, [sp, #0]
 80056b4:	f000 f972 	bl	800599c <__kernel_cosf>
 80056b8:	e7ee      	b.n	8005698 <cosf+0x1c>
 80056ba:	9901      	ldr	r1, [sp, #4]
 80056bc:	9800      	ldr	r0, [sp, #0]
 80056be:	f000 fc95 	bl	8005fec <__kernel_sinf>
 80056c2:	2380      	movs	r3, #128	; 0x80
 80056c4:	061b      	lsls	r3, r3, #24
 80056c6:	18c0      	adds	r0, r0, r3
 80056c8:	e7e6      	b.n	8005698 <cosf+0x1c>
 80056ca:	9901      	ldr	r1, [sp, #4]
 80056cc:	9800      	ldr	r0, [sp, #0]
 80056ce:	f000 f965 	bl	800599c <__kernel_cosf>
 80056d2:	e7f6      	b.n	80056c2 <cosf+0x46>
 80056d4:	2201      	movs	r2, #1
 80056d6:	9901      	ldr	r1, [sp, #4]
 80056d8:	9800      	ldr	r0, [sp, #0]
 80056da:	f000 fc87 	bl	8005fec <__kernel_sinf>
 80056de:	e7db      	b.n	8005698 <cosf+0x1c>
 80056e0:	3f490fd8 	.word	0x3f490fd8

080056e4 <__ieee754_rem_pio2f>:
 80056e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056e6:	4ba0      	ldr	r3, [pc, #640]	; (8005968 <__ieee754_rem_pio2f+0x284>)
 80056e8:	b08b      	sub	sp, #44	; 0x2c
 80056ea:	0045      	lsls	r5, r0, #1
 80056ec:	000c      	movs	r4, r1
 80056ee:	9005      	str	r0, [sp, #20]
 80056f0:	086d      	lsrs	r5, r5, #1
 80056f2:	429d      	cmp	r5, r3
 80056f4:	dc04      	bgt.n	8005700 <__ieee754_rem_pio2f+0x1c>
 80056f6:	2300      	movs	r3, #0
 80056f8:	6008      	str	r0, [r1, #0]
 80056fa:	604b      	str	r3, [r1, #4]
 80056fc:	2700      	movs	r7, #0
 80056fe:	e01a      	b.n	8005736 <__ieee754_rem_pio2f+0x52>
 8005700:	4b9a      	ldr	r3, [pc, #616]	; (800596c <__ieee754_rem_pio2f+0x288>)
 8005702:	429d      	cmp	r5, r3
 8005704:	dc4a      	bgt.n	800579c <__ieee754_rem_pio2f+0xb8>
 8005706:	230f      	movs	r3, #15
 8005708:	4e99      	ldr	r6, [pc, #612]	; (8005970 <__ieee754_rem_pio2f+0x28c>)
 800570a:	499a      	ldr	r1, [pc, #616]	; (8005974 <__ieee754_rem_pio2f+0x290>)
 800570c:	439d      	bics	r5, r3
 800570e:	2800      	cmp	r0, #0
 8005710:	dd22      	ble.n	8005758 <__ieee754_rem_pio2f+0x74>
 8005712:	f7fb fa19 	bl	8000b48 <__aeabi_fsub>
 8005716:	1c07      	adds	r7, r0, #0
 8005718:	42b5      	cmp	r5, r6
 800571a:	d00f      	beq.n	800573c <__ieee754_rem_pio2f+0x58>
 800571c:	4996      	ldr	r1, [pc, #600]	; (8005978 <__ieee754_rem_pio2f+0x294>)
 800571e:	f7fb fa13 	bl	8000b48 <__aeabi_fsub>
 8005722:	1c01      	adds	r1, r0, #0
 8005724:	6020      	str	r0, [r4, #0]
 8005726:	1c38      	adds	r0, r7, #0
 8005728:	f7fb fa0e 	bl	8000b48 <__aeabi_fsub>
 800572c:	4992      	ldr	r1, [pc, #584]	; (8005978 <__ieee754_rem_pio2f+0x294>)
 800572e:	f7fb fa0b 	bl	8000b48 <__aeabi_fsub>
 8005732:	2701      	movs	r7, #1
 8005734:	6060      	str	r0, [r4, #4]
 8005736:	0038      	movs	r0, r7
 8005738:	b00b      	add	sp, #44	; 0x2c
 800573a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800573c:	498f      	ldr	r1, [pc, #572]	; (800597c <__ieee754_rem_pio2f+0x298>)
 800573e:	f7fb fa03 	bl	8000b48 <__aeabi_fsub>
 8005742:	498f      	ldr	r1, [pc, #572]	; (8005980 <__ieee754_rem_pio2f+0x29c>)
 8005744:	1c05      	adds	r5, r0, #0
 8005746:	f7fb f9ff 	bl	8000b48 <__aeabi_fsub>
 800574a:	1c01      	adds	r1, r0, #0
 800574c:	6020      	str	r0, [r4, #0]
 800574e:	1c28      	adds	r0, r5, #0
 8005750:	f7fb f9fa 	bl	8000b48 <__aeabi_fsub>
 8005754:	498a      	ldr	r1, [pc, #552]	; (8005980 <__ieee754_rem_pio2f+0x29c>)
 8005756:	e7ea      	b.n	800572e <__ieee754_rem_pio2f+0x4a>
 8005758:	f7fa fe82 	bl	8000460 <__aeabi_fadd>
 800575c:	1c07      	adds	r7, r0, #0
 800575e:	42b5      	cmp	r5, r6
 8005760:	d00e      	beq.n	8005780 <__ieee754_rem_pio2f+0x9c>
 8005762:	4985      	ldr	r1, [pc, #532]	; (8005978 <__ieee754_rem_pio2f+0x294>)
 8005764:	f7fa fe7c 	bl	8000460 <__aeabi_fadd>
 8005768:	1c01      	adds	r1, r0, #0
 800576a:	6020      	str	r0, [r4, #0]
 800576c:	1c38      	adds	r0, r7, #0
 800576e:	f7fb f9eb 	bl	8000b48 <__aeabi_fsub>
 8005772:	4981      	ldr	r1, [pc, #516]	; (8005978 <__ieee754_rem_pio2f+0x294>)
 8005774:	f7fa fe74 	bl	8000460 <__aeabi_fadd>
 8005778:	2701      	movs	r7, #1
 800577a:	6060      	str	r0, [r4, #4]
 800577c:	427f      	negs	r7, r7
 800577e:	e7da      	b.n	8005736 <__ieee754_rem_pio2f+0x52>
 8005780:	497e      	ldr	r1, [pc, #504]	; (800597c <__ieee754_rem_pio2f+0x298>)
 8005782:	f7fa fe6d 	bl	8000460 <__aeabi_fadd>
 8005786:	497e      	ldr	r1, [pc, #504]	; (8005980 <__ieee754_rem_pio2f+0x29c>)
 8005788:	1c05      	adds	r5, r0, #0
 800578a:	f7fa fe69 	bl	8000460 <__aeabi_fadd>
 800578e:	1c01      	adds	r1, r0, #0
 8005790:	6020      	str	r0, [r4, #0]
 8005792:	1c28      	adds	r0, r5, #0
 8005794:	f7fb f9d8 	bl	8000b48 <__aeabi_fsub>
 8005798:	4979      	ldr	r1, [pc, #484]	; (8005980 <__ieee754_rem_pio2f+0x29c>)
 800579a:	e7eb      	b.n	8005774 <__ieee754_rem_pio2f+0x90>
 800579c:	4b79      	ldr	r3, [pc, #484]	; (8005984 <__ieee754_rem_pio2f+0x2a0>)
 800579e:	429d      	cmp	r5, r3
 80057a0:	dd00      	ble.n	80057a4 <__ieee754_rem_pio2f+0xc0>
 80057a2:	e091      	b.n	80058c8 <__ieee754_rem_pio2f+0x1e4>
 80057a4:	f000 fc96 	bl	80060d4 <fabsf>
 80057a8:	4977      	ldr	r1, [pc, #476]	; (8005988 <__ieee754_rem_pio2f+0x2a4>)
 80057aa:	1c06      	adds	r6, r0, #0
 80057ac:	f7fb f8a6 	bl	80008fc <__aeabi_fmul>
 80057b0:	21fc      	movs	r1, #252	; 0xfc
 80057b2:	0589      	lsls	r1, r1, #22
 80057b4:	f7fa fe54 	bl	8000460 <__aeabi_fadd>
 80057b8:	f7fb fb74 	bl	8000ea4 <__aeabi_f2iz>
 80057bc:	0007      	movs	r7, r0
 80057be:	f7fb fb91 	bl	8000ee4 <__aeabi_i2f>
 80057c2:	496c      	ldr	r1, [pc, #432]	; (8005974 <__ieee754_rem_pio2f+0x290>)
 80057c4:	9003      	str	r0, [sp, #12]
 80057c6:	f7fb f899 	bl	80008fc <__aeabi_fmul>
 80057ca:	1c01      	adds	r1, r0, #0
 80057cc:	1c30      	adds	r0, r6, #0
 80057ce:	f7fb f9bb 	bl	8000b48 <__aeabi_fsub>
 80057d2:	4969      	ldr	r1, [pc, #420]	; (8005978 <__ieee754_rem_pio2f+0x294>)
 80057d4:	9002      	str	r0, [sp, #8]
 80057d6:	9803      	ldr	r0, [sp, #12]
 80057d8:	f7fb f890 	bl	80008fc <__aeabi_fmul>
 80057dc:	1c06      	adds	r6, r0, #0
 80057de:	2f1f      	cmp	r7, #31
 80057e0:	dc0d      	bgt.n	80057fe <__ieee754_rem_pio2f+0x11a>
 80057e2:	23ff      	movs	r3, #255	; 0xff
 80057e4:	002a      	movs	r2, r5
 80057e6:	4969      	ldr	r1, [pc, #420]	; (800598c <__ieee754_rem_pio2f+0x2a8>)
 80057e8:	439a      	bics	r2, r3
 80057ea:	1e7b      	subs	r3, r7, #1
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	585b      	ldr	r3, [r3, r1]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d004      	beq.n	80057fe <__ieee754_rem_pio2f+0x11a>
 80057f4:	9802      	ldr	r0, [sp, #8]
 80057f6:	1c31      	adds	r1, r6, #0
 80057f8:	f7fb f9a6 	bl	8000b48 <__aeabi_fsub>
 80057fc:	e00c      	b.n	8005818 <__ieee754_rem_pio2f+0x134>
 80057fe:	9802      	ldr	r0, [sp, #8]
 8005800:	1c31      	adds	r1, r6, #0
 8005802:	f7fb f9a1 	bl	8000b48 <__aeabi_fsub>
 8005806:	22ff      	movs	r2, #255	; 0xff
 8005808:	15eb      	asrs	r3, r5, #23
 800580a:	9304      	str	r3, [sp, #16]
 800580c:	0dc3      	lsrs	r3, r0, #23
 800580e:	4013      	ands	r3, r2
 8005810:	9a04      	ldr	r2, [sp, #16]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b08      	cmp	r3, #8
 8005816:	dc01      	bgt.n	800581c <__ieee754_rem_pio2f+0x138>
 8005818:	6020      	str	r0, [r4, #0]
 800581a:	e026      	b.n	800586a <__ieee754_rem_pio2f+0x186>
 800581c:	4957      	ldr	r1, [pc, #348]	; (800597c <__ieee754_rem_pio2f+0x298>)
 800581e:	9803      	ldr	r0, [sp, #12]
 8005820:	f7fb f86c 	bl	80008fc <__aeabi_fmul>
 8005824:	1c06      	adds	r6, r0, #0
 8005826:	1c01      	adds	r1, r0, #0
 8005828:	9802      	ldr	r0, [sp, #8]
 800582a:	f7fb f98d 	bl	8000b48 <__aeabi_fsub>
 800582e:	1c01      	adds	r1, r0, #0
 8005830:	1c05      	adds	r5, r0, #0
 8005832:	9802      	ldr	r0, [sp, #8]
 8005834:	f7fb f988 	bl	8000b48 <__aeabi_fsub>
 8005838:	1c31      	adds	r1, r6, #0
 800583a:	f7fb f985 	bl	8000b48 <__aeabi_fsub>
 800583e:	4950      	ldr	r1, [pc, #320]	; (8005980 <__ieee754_rem_pio2f+0x29c>)
 8005840:	1c06      	adds	r6, r0, #0
 8005842:	9803      	ldr	r0, [sp, #12]
 8005844:	f7fb f85a 	bl	80008fc <__aeabi_fmul>
 8005848:	1c31      	adds	r1, r6, #0
 800584a:	f7fb f97d 	bl	8000b48 <__aeabi_fsub>
 800584e:	1c01      	adds	r1, r0, #0
 8005850:	1c06      	adds	r6, r0, #0
 8005852:	1c28      	adds	r0, r5, #0
 8005854:	f7fb f978 	bl	8000b48 <__aeabi_fsub>
 8005858:	22ff      	movs	r2, #255	; 0xff
 800585a:	0dc3      	lsrs	r3, r0, #23
 800585c:	4013      	ands	r3, r2
 800585e:	9a04      	ldr	r2, [sp, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b19      	cmp	r3, #25
 8005864:	dc15      	bgt.n	8005892 <__ieee754_rem_pio2f+0x1ae>
 8005866:	6020      	str	r0, [r4, #0]
 8005868:	9502      	str	r5, [sp, #8]
 800586a:	6825      	ldr	r5, [r4, #0]
 800586c:	9802      	ldr	r0, [sp, #8]
 800586e:	1c29      	adds	r1, r5, #0
 8005870:	f7fb f96a 	bl	8000b48 <__aeabi_fsub>
 8005874:	1c31      	adds	r1, r6, #0
 8005876:	f7fb f967 	bl	8000b48 <__aeabi_fsub>
 800587a:	9b05      	ldr	r3, [sp, #20]
 800587c:	6060      	str	r0, [r4, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	db00      	blt.n	8005884 <__ieee754_rem_pio2f+0x1a0>
 8005882:	e758      	b.n	8005736 <__ieee754_rem_pio2f+0x52>
 8005884:	2380      	movs	r3, #128	; 0x80
 8005886:	061b      	lsls	r3, r3, #24
 8005888:	18ed      	adds	r5, r5, r3
 800588a:	18c0      	adds	r0, r0, r3
 800588c:	6025      	str	r5, [r4, #0]
 800588e:	6060      	str	r0, [r4, #4]
 8005890:	e774      	b.n	800577c <__ieee754_rem_pio2f+0x98>
 8005892:	493f      	ldr	r1, [pc, #252]	; (8005990 <__ieee754_rem_pio2f+0x2ac>)
 8005894:	9803      	ldr	r0, [sp, #12]
 8005896:	f7fb f831 	bl	80008fc <__aeabi_fmul>
 800589a:	1c06      	adds	r6, r0, #0
 800589c:	1c01      	adds	r1, r0, #0
 800589e:	1c28      	adds	r0, r5, #0
 80058a0:	f7fb f952 	bl	8000b48 <__aeabi_fsub>
 80058a4:	1c01      	adds	r1, r0, #0
 80058a6:	9002      	str	r0, [sp, #8]
 80058a8:	1c28      	adds	r0, r5, #0
 80058aa:	f7fb f94d 	bl	8000b48 <__aeabi_fsub>
 80058ae:	1c31      	adds	r1, r6, #0
 80058b0:	f7fb f94a 	bl	8000b48 <__aeabi_fsub>
 80058b4:	4937      	ldr	r1, [pc, #220]	; (8005994 <__ieee754_rem_pio2f+0x2b0>)
 80058b6:	1c05      	adds	r5, r0, #0
 80058b8:	9803      	ldr	r0, [sp, #12]
 80058ba:	f7fb f81f 	bl	80008fc <__aeabi_fmul>
 80058be:	1c29      	adds	r1, r5, #0
 80058c0:	f7fb f942 	bl	8000b48 <__aeabi_fsub>
 80058c4:	1c06      	adds	r6, r0, #0
 80058c6:	e795      	b.n	80057f4 <__ieee754_rem_pio2f+0x110>
 80058c8:	23ff      	movs	r3, #255	; 0xff
 80058ca:	05db      	lsls	r3, r3, #23
 80058cc:	429d      	cmp	r5, r3
 80058ce:	db05      	blt.n	80058dc <__ieee754_rem_pio2f+0x1f8>
 80058d0:	1c01      	adds	r1, r0, #0
 80058d2:	f7fb f939 	bl	8000b48 <__aeabi_fsub>
 80058d6:	6060      	str	r0, [r4, #4]
 80058d8:	6020      	str	r0, [r4, #0]
 80058da:	e70f      	b.n	80056fc <__ieee754_rem_pio2f+0x18>
 80058dc:	15ee      	asrs	r6, r5, #23
 80058de:	3e86      	subs	r6, #134	; 0x86
 80058e0:	05f3      	lsls	r3, r6, #23
 80058e2:	1aed      	subs	r5, r5, r3
 80058e4:	1c28      	adds	r0, r5, #0
 80058e6:	f7fb fadd 	bl	8000ea4 <__aeabi_f2iz>
 80058ea:	f7fb fafb 	bl	8000ee4 <__aeabi_i2f>
 80058ee:	1c01      	adds	r1, r0, #0
 80058f0:	9007      	str	r0, [sp, #28]
 80058f2:	1c28      	adds	r0, r5, #0
 80058f4:	f7fb f928 	bl	8000b48 <__aeabi_fsub>
 80058f8:	2187      	movs	r1, #135	; 0x87
 80058fa:	05c9      	lsls	r1, r1, #23
 80058fc:	f7fa fffe 	bl	80008fc <__aeabi_fmul>
 8005900:	1c07      	adds	r7, r0, #0
 8005902:	f7fb facf 	bl	8000ea4 <__aeabi_f2iz>
 8005906:	f7fb faed 	bl	8000ee4 <__aeabi_i2f>
 800590a:	1c01      	adds	r1, r0, #0
 800590c:	9008      	str	r0, [sp, #32]
 800590e:	1c05      	adds	r5, r0, #0
 8005910:	1c38      	adds	r0, r7, #0
 8005912:	f7fb f919 	bl	8000b48 <__aeabi_fsub>
 8005916:	2187      	movs	r1, #135	; 0x87
 8005918:	05c9      	lsls	r1, r1, #23
 800591a:	f7fa ffef 	bl	80008fc <__aeabi_fmul>
 800591e:	2100      	movs	r1, #0
 8005920:	9009      	str	r0, [sp, #36]	; 0x24
 8005922:	f7fa fd6f 	bl	8000404 <__aeabi_fcmpeq>
 8005926:	2303      	movs	r3, #3
 8005928:	2800      	cmp	r0, #0
 800592a:	d006      	beq.n	800593a <__ieee754_rem_pio2f+0x256>
 800592c:	2100      	movs	r1, #0
 800592e:	1c28      	adds	r0, r5, #0
 8005930:	f7fa fd68 	bl	8000404 <__aeabi_fcmpeq>
 8005934:	4243      	negs	r3, r0
 8005936:	4143      	adcs	r3, r0
 8005938:	3301      	adds	r3, #1
 800593a:	4a17      	ldr	r2, [pc, #92]	; (8005998 <__ieee754_rem_pio2f+0x2b4>)
 800593c:	0021      	movs	r1, r4
 800593e:	9201      	str	r2, [sp, #4]
 8005940:	2202      	movs	r2, #2
 8005942:	a807      	add	r0, sp, #28
 8005944:	9200      	str	r2, [sp, #0]
 8005946:	0032      	movs	r2, r6
 8005948:	f000 f8a8 	bl	8005a9c <__kernel_rem_pio2f>
 800594c:	9b05      	ldr	r3, [sp, #20]
 800594e:	0007      	movs	r7, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	db00      	blt.n	8005956 <__ieee754_rem_pio2f+0x272>
 8005954:	e6ef      	b.n	8005736 <__ieee754_rem_pio2f+0x52>
 8005956:	2280      	movs	r2, #128	; 0x80
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	0612      	lsls	r2, r2, #24
 800595c:	189b      	adds	r3, r3, r2
 800595e:	6023      	str	r3, [r4, #0]
 8005960:	6863      	ldr	r3, [r4, #4]
 8005962:	189b      	adds	r3, r3, r2
 8005964:	6063      	str	r3, [r4, #4]
 8005966:	e709      	b.n	800577c <__ieee754_rem_pio2f+0x98>
 8005968:	3f490fd8 	.word	0x3f490fd8
 800596c:	4016cbe3 	.word	0x4016cbe3
 8005970:	3fc90fd0 	.word	0x3fc90fd0
 8005974:	3fc90f80 	.word	0x3fc90f80
 8005978:	37354443 	.word	0x37354443
 800597c:	37354400 	.word	0x37354400
 8005980:	2e85a308 	.word	0x2e85a308
 8005984:	43490f80 	.word	0x43490f80
 8005988:	3f22f984 	.word	0x3f22f984
 800598c:	08006408 	.word	0x08006408
 8005990:	2e85a300 	.word	0x2e85a300
 8005994:	248d3132 	.word	0x248d3132
 8005998:	08006488 	.word	0x08006488

0800599c <__kernel_cosf>:
 800599c:	23c8      	movs	r3, #200	; 0xc8
 800599e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059a0:	0044      	lsls	r4, r0, #1
 80059a2:	1c06      	adds	r6, r0, #0
 80059a4:	9101      	str	r1, [sp, #4]
 80059a6:	0864      	lsrs	r4, r4, #1
 80059a8:	059b      	lsls	r3, r3, #22
 80059aa:	429c      	cmp	r4, r3
 80059ac:	da03      	bge.n	80059b6 <__kernel_cosf+0x1a>
 80059ae:	f7fb fa79 	bl	8000ea4 <__aeabi_f2iz>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d05d      	beq.n	8005a72 <__kernel_cosf+0xd6>
 80059b6:	1c31      	adds	r1, r6, #0
 80059b8:	1c30      	adds	r0, r6, #0
 80059ba:	f7fa ff9f 	bl	80008fc <__aeabi_fmul>
 80059be:	21fc      	movs	r1, #252	; 0xfc
 80059c0:	0589      	lsls	r1, r1, #22
 80059c2:	1c05      	adds	r5, r0, #0
 80059c4:	f7fa ff9a 	bl	80008fc <__aeabi_fmul>
 80059c8:	492b      	ldr	r1, [pc, #172]	; (8005a78 <__kernel_cosf+0xdc>)
 80059ca:	1c07      	adds	r7, r0, #0
 80059cc:	1c28      	adds	r0, r5, #0
 80059ce:	f7fa ff95 	bl	80008fc <__aeabi_fmul>
 80059d2:	492a      	ldr	r1, [pc, #168]	; (8005a7c <__kernel_cosf+0xe0>)
 80059d4:	f7fa fd44 	bl	8000460 <__aeabi_fadd>
 80059d8:	1c29      	adds	r1, r5, #0
 80059da:	f7fa ff8f 	bl	80008fc <__aeabi_fmul>
 80059de:	4928      	ldr	r1, [pc, #160]	; (8005a80 <__kernel_cosf+0xe4>)
 80059e0:	f7fb f8b2 	bl	8000b48 <__aeabi_fsub>
 80059e4:	1c29      	adds	r1, r5, #0
 80059e6:	f7fa ff89 	bl	80008fc <__aeabi_fmul>
 80059ea:	4926      	ldr	r1, [pc, #152]	; (8005a84 <__kernel_cosf+0xe8>)
 80059ec:	f7fa fd38 	bl	8000460 <__aeabi_fadd>
 80059f0:	1c29      	adds	r1, r5, #0
 80059f2:	f7fa ff83 	bl	80008fc <__aeabi_fmul>
 80059f6:	4924      	ldr	r1, [pc, #144]	; (8005a88 <__kernel_cosf+0xec>)
 80059f8:	f7fb f8a6 	bl	8000b48 <__aeabi_fsub>
 80059fc:	1c29      	adds	r1, r5, #0
 80059fe:	f7fa ff7d 	bl	80008fc <__aeabi_fmul>
 8005a02:	4922      	ldr	r1, [pc, #136]	; (8005a8c <__kernel_cosf+0xf0>)
 8005a04:	f7fa fd2c 	bl	8000460 <__aeabi_fadd>
 8005a08:	1c29      	adds	r1, r5, #0
 8005a0a:	f7fa ff77 	bl	80008fc <__aeabi_fmul>
 8005a0e:	1c29      	adds	r1, r5, #0
 8005a10:	f7fa ff74 	bl	80008fc <__aeabi_fmul>
 8005a14:	9901      	ldr	r1, [sp, #4]
 8005a16:	1c05      	adds	r5, r0, #0
 8005a18:	1c30      	adds	r0, r6, #0
 8005a1a:	f7fa ff6f 	bl	80008fc <__aeabi_fmul>
 8005a1e:	1c01      	adds	r1, r0, #0
 8005a20:	1c28      	adds	r0, r5, #0
 8005a22:	f7fb f891 	bl	8000b48 <__aeabi_fsub>
 8005a26:	4b1a      	ldr	r3, [pc, #104]	; (8005a90 <__kernel_cosf+0xf4>)
 8005a28:	1c05      	adds	r5, r0, #0
 8005a2a:	429c      	cmp	r4, r3
 8005a2c:	dc09      	bgt.n	8005a42 <__kernel_cosf+0xa6>
 8005a2e:	1c01      	adds	r1, r0, #0
 8005a30:	1c38      	adds	r0, r7, #0
 8005a32:	f7fb f889 	bl	8000b48 <__aeabi_fsub>
 8005a36:	1c01      	adds	r1, r0, #0
 8005a38:	20fe      	movs	r0, #254	; 0xfe
 8005a3a:	0580      	lsls	r0, r0, #22
 8005a3c:	f7fb f884 	bl	8000b48 <__aeabi_fsub>
 8005a40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a42:	4b14      	ldr	r3, [pc, #80]	; (8005a94 <__kernel_cosf+0xf8>)
 8005a44:	429c      	cmp	r4, r3
 8005a46:	dc12      	bgt.n	8005a6e <__kernel_cosf+0xd2>
 8005a48:	23ff      	movs	r3, #255	; 0xff
 8005a4a:	061b      	lsls	r3, r3, #24
 8005a4c:	18e4      	adds	r4, r4, r3
 8005a4e:	20fe      	movs	r0, #254	; 0xfe
 8005a50:	1c21      	adds	r1, r4, #0
 8005a52:	0580      	lsls	r0, r0, #22
 8005a54:	f7fb f878 	bl	8000b48 <__aeabi_fsub>
 8005a58:	1c21      	adds	r1, r4, #0
 8005a5a:	1c06      	adds	r6, r0, #0
 8005a5c:	1c38      	adds	r0, r7, #0
 8005a5e:	f7fb f873 	bl	8000b48 <__aeabi_fsub>
 8005a62:	1c29      	adds	r1, r5, #0
 8005a64:	f7fb f870 	bl	8000b48 <__aeabi_fsub>
 8005a68:	1c01      	adds	r1, r0, #0
 8005a6a:	1c30      	adds	r0, r6, #0
 8005a6c:	e7e6      	b.n	8005a3c <__kernel_cosf+0xa0>
 8005a6e:	4c0a      	ldr	r4, [pc, #40]	; (8005a98 <__kernel_cosf+0xfc>)
 8005a70:	e7ed      	b.n	8005a4e <__kernel_cosf+0xb2>
 8005a72:	20fe      	movs	r0, #254	; 0xfe
 8005a74:	0580      	lsls	r0, r0, #22
 8005a76:	e7e3      	b.n	8005a40 <__kernel_cosf+0xa4>
 8005a78:	ad47d74e 	.word	0xad47d74e
 8005a7c:	310f74f6 	.word	0x310f74f6
 8005a80:	3493f27c 	.word	0x3493f27c
 8005a84:	37d00d01 	.word	0x37d00d01
 8005a88:	3ab60b61 	.word	0x3ab60b61
 8005a8c:	3d2aaaab 	.word	0x3d2aaaab
 8005a90:	3e999999 	.word	0x3e999999
 8005a94:	3f480000 	.word	0x3f480000
 8005a98:	3e900000 	.word	0x3e900000

08005a9c <__kernel_rem_pio2f>:
 8005a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a9e:	b0df      	sub	sp, #380	; 0x17c
 8005aa0:	9308      	str	r3, [sp, #32]
 8005aa2:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8005aa4:	9207      	str	r2, [sp, #28]
 8005aa6:	009a      	lsls	r2, r3, #2
 8005aa8:	4bc8      	ldr	r3, [pc, #800]	; (8005dcc <__kernel_rem_pio2f+0x330>)
 8005aaa:	900a      	str	r0, [sp, #40]	; 0x28
 8005aac:	58d3      	ldr	r3, [r2, r3]
 8005aae:	9103      	str	r1, [sp, #12]
 8005ab0:	9305      	str	r3, [sp, #20]
 8005ab2:	9b08      	ldr	r3, [sp, #32]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	9306      	str	r3, [sp, #24]
 8005ab8:	2300      	movs	r3, #0
 8005aba:	9302      	str	r3, [sp, #8]
 8005abc:	9b07      	ldr	r3, [sp, #28]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	db07      	blt.n	8005ad2 <__kernel_rem_pio2f+0x36>
 8005ac2:	2107      	movs	r1, #7
 8005ac4:	9b07      	ldr	r3, [sp, #28]
 8005ac6:	1eda      	subs	r2, r3, #3
 8005ac8:	17d3      	asrs	r3, r2, #31
 8005aca:	400b      	ands	r3, r1
 8005acc:	189b      	adds	r3, r3, r2
 8005ace:	10db      	asrs	r3, r3, #3
 8005ad0:	9302      	str	r3, [sp, #8]
 8005ad2:	9b02      	ldr	r3, [sp, #8]
 8005ad4:	ae22      	add	r6, sp, #136	; 0x88
 8005ad6:	1c59      	adds	r1, r3, #1
 8005ad8:	00cb      	lsls	r3, r1, #3
 8005ada:	9309      	str	r3, [sp, #36]	; 0x24
 8005adc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ade:	9b07      	ldr	r3, [sp, #28]
 8005ae0:	1a9b      	subs	r3, r3, r2
 8005ae2:	9301      	str	r3, [sp, #4]
 8005ae4:	9a06      	ldr	r2, [sp, #24]
 8005ae6:	9b02      	ldr	r3, [sp, #8]
 8005ae8:	1a9d      	subs	r5, r3, r2
 8005aea:	002c      	movs	r4, r5
 8005aec:	9b05      	ldr	r3, [sp, #20]
 8005aee:	189f      	adds	r7, r3, r2
 8005af0:	1b63      	subs	r3, r4, r5
 8005af2:	429f      	cmp	r7, r3
 8005af4:	da0d      	bge.n	8005b12 <__kernel_rem_pio2f+0x76>
 8005af6:	9c08      	ldr	r4, [sp, #32]
 8005af8:	af4a      	add	r7, sp, #296	; 0x128
 8005afa:	9b08      	ldr	r3, [sp, #32]
 8005afc:	9a05      	ldr	r2, [sp, #20]
 8005afe:	1ae3      	subs	r3, r4, r3
 8005b00:	429a      	cmp	r2, r3
 8005b02:	db25      	blt.n	8005b50 <__kernel_rem_pio2f+0xb4>
 8005b04:	ab22      	add	r3, sp, #136	; 0x88
 8005b06:	00a5      	lsls	r5, r4, #2
 8005b08:	18ed      	adds	r5, r5, r3
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	2600      	movs	r6, #0
 8005b0e:	9304      	str	r3, [sp, #16]
 8005b10:	e016      	b.n	8005b40 <__kernel_rem_pio2f+0xa4>
 8005b12:	2000      	movs	r0, #0
 8005b14:	2c00      	cmp	r4, #0
 8005b16:	db04      	blt.n	8005b22 <__kernel_rem_pio2f+0x86>
 8005b18:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8005b1a:	00a3      	lsls	r3, r4, #2
 8005b1c:	58d0      	ldr	r0, [r2, r3]
 8005b1e:	f7fb f9e1 	bl	8000ee4 <__aeabi_i2f>
 8005b22:	c601      	stmia	r6!, {r0}
 8005b24:	3401      	adds	r4, #1
 8005b26:	e7e3      	b.n	8005af0 <__kernel_rem_pio2f+0x54>
 8005b28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b2a:	00b3      	lsls	r3, r6, #2
 8005b2c:	6829      	ldr	r1, [r5, #0]
 8005b2e:	58d0      	ldr	r0, [r2, r3]
 8005b30:	f7fa fee4 	bl	80008fc <__aeabi_fmul>
 8005b34:	1c01      	adds	r1, r0, #0
 8005b36:	9804      	ldr	r0, [sp, #16]
 8005b38:	f7fa fc92 	bl	8000460 <__aeabi_fadd>
 8005b3c:	3601      	adds	r6, #1
 8005b3e:	9004      	str	r0, [sp, #16]
 8005b40:	9b06      	ldr	r3, [sp, #24]
 8005b42:	3d04      	subs	r5, #4
 8005b44:	429e      	cmp	r6, r3
 8005b46:	ddef      	ble.n	8005b28 <__kernel_rem_pio2f+0x8c>
 8005b48:	9b04      	ldr	r3, [sp, #16]
 8005b4a:	3401      	adds	r4, #1
 8005b4c:	c708      	stmia	r7!, {r3}
 8005b4e:	e7d4      	b.n	8005afa <__kernel_rem_pio2f+0x5e>
 8005b50:	9b05      	ldr	r3, [sp, #20]
 8005b52:	aa0e      	add	r2, sp, #56	; 0x38
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	189b      	adds	r3, r3, r2
 8005b58:	930c      	str	r3, [sp, #48]	; 0x30
 8005b5a:	9b02      	ldr	r3, [sp, #8]
 8005b5c:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	18d3      	adds	r3, r2, r3
 8005b62:	9e05      	ldr	r6, [sp, #20]
 8005b64:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b66:	0035      	movs	r5, r6
 8005b68:	aa4a      	add	r2, sp, #296	; 0x128
 8005b6a:	00b3      	lsls	r3, r6, #2
 8005b6c:	af0e      	add	r7, sp, #56	; 0x38
 8005b6e:	589c      	ldr	r4, [r3, r2]
 8005b70:	9702      	str	r7, [sp, #8]
 8005b72:	920d      	str	r2, [sp, #52]	; 0x34
 8005b74:	2d00      	cmp	r5, #0
 8005b76:	dc64      	bgt.n	8005c42 <__kernel_rem_pio2f+0x1a6>
 8005b78:	9901      	ldr	r1, [sp, #4]
 8005b7a:	1c20      	adds	r0, r4, #0
 8005b7c:	f000 faec 	bl	8006158 <scalbnf>
 8005b80:	21f8      	movs	r1, #248	; 0xf8
 8005b82:	0589      	lsls	r1, r1, #22
 8005b84:	1c04      	adds	r4, r0, #0
 8005b86:	f7fa feb9 	bl	80008fc <__aeabi_fmul>
 8005b8a:	f000 faa7 	bl	80060dc <floorf>
 8005b8e:	2182      	movs	r1, #130	; 0x82
 8005b90:	05c9      	lsls	r1, r1, #23
 8005b92:	f7fa feb3 	bl	80008fc <__aeabi_fmul>
 8005b96:	1c01      	adds	r1, r0, #0
 8005b98:	1c20      	adds	r0, r4, #0
 8005b9a:	f7fa ffd5 	bl	8000b48 <__aeabi_fsub>
 8005b9e:	1c04      	adds	r4, r0, #0
 8005ba0:	f7fb f980 	bl	8000ea4 <__aeabi_f2iz>
 8005ba4:	9004      	str	r0, [sp, #16]
 8005ba6:	f7fb f99d 	bl	8000ee4 <__aeabi_i2f>
 8005baa:	1c01      	adds	r1, r0, #0
 8005bac:	1c20      	adds	r0, r4, #0
 8005bae:	f7fa ffcb 	bl	8000b48 <__aeabi_fsub>
 8005bb2:	9b01      	ldr	r3, [sp, #4]
 8005bb4:	1c04      	adds	r4, r0, #0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	dd63      	ble.n	8005c82 <__kernel_rem_pio2f+0x1e6>
 8005bba:	2108      	movs	r1, #8
 8005bbc:	1e73      	subs	r3, r6, #1
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	aa0e      	add	r2, sp, #56	; 0x38
 8005bc2:	589a      	ldr	r2, [r3, r2]
 8005bc4:	9801      	ldr	r0, [sp, #4]
 8005bc6:	9d04      	ldr	r5, [sp, #16]
 8005bc8:	1a09      	subs	r1, r1, r0
 8005bca:	0010      	movs	r0, r2
 8005bcc:	4108      	asrs	r0, r1
 8005bce:	182d      	adds	r5, r5, r0
 8005bd0:	4088      	lsls	r0, r1
 8005bd2:	a90e      	add	r1, sp, #56	; 0x38
 8005bd4:	1a12      	subs	r2, r2, r0
 8005bd6:	505a      	str	r2, [r3, r1]
 8005bd8:	2307      	movs	r3, #7
 8005bda:	9901      	ldr	r1, [sp, #4]
 8005bdc:	9504      	str	r5, [sp, #16]
 8005bde:	1a5b      	subs	r3, r3, r1
 8005be0:	411a      	asrs	r2, r3
 8005be2:	9202      	str	r2, [sp, #8]
 8005be4:	9b02      	ldr	r3, [sp, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	dd5c      	ble.n	8005ca4 <__kernel_rem_pio2f+0x208>
 8005bea:	9b04      	ldr	r3, [sp, #16]
 8005bec:	2200      	movs	r2, #0
 8005bee:	3301      	adds	r3, #1
 8005bf0:	9304      	str	r3, [sp, #16]
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	2080      	movs	r0, #128	; 0x80
 8005bf6:	0015      	movs	r5, r2
 8005bf8:	21ff      	movs	r1, #255	; 0xff
 8005bfa:	469c      	mov	ip, r3
 8005bfc:	0040      	lsls	r0, r0, #1
 8005bfe:	4296      	cmp	r6, r2
 8005c00:	dd00      	ble.n	8005c04 <__kernel_rem_pio2f+0x168>
 8005c02:	e080      	b.n	8005d06 <__kernel_rem_pio2f+0x26a>
 8005c04:	9b01      	ldr	r3, [sp, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	dd05      	ble.n	8005c16 <__kernel_rem_pio2f+0x17a>
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d100      	bne.n	8005c10 <__kernel_rem_pio2f+0x174>
 8005c0e:	e08a      	b.n	8005d26 <__kernel_rem_pio2f+0x28a>
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d100      	bne.n	8005c16 <__kernel_rem_pio2f+0x17a>
 8005c14:	e092      	b.n	8005d3c <__kernel_rem_pio2f+0x2a0>
 8005c16:	9b02      	ldr	r3, [sp, #8]
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d143      	bne.n	8005ca4 <__kernel_rem_pio2f+0x208>
 8005c1c:	20fe      	movs	r0, #254	; 0xfe
 8005c1e:	1c21      	adds	r1, r4, #0
 8005c20:	0580      	lsls	r0, r0, #22
 8005c22:	f7fa ff91 	bl	8000b48 <__aeabi_fsub>
 8005c26:	1c04      	adds	r4, r0, #0
 8005c28:	2d00      	cmp	r5, #0
 8005c2a:	d03b      	beq.n	8005ca4 <__kernel_rem_pio2f+0x208>
 8005c2c:	20fe      	movs	r0, #254	; 0xfe
 8005c2e:	9901      	ldr	r1, [sp, #4]
 8005c30:	0580      	lsls	r0, r0, #22
 8005c32:	f000 fa91 	bl	8006158 <scalbnf>
 8005c36:	1c01      	adds	r1, r0, #0
 8005c38:	1c20      	adds	r0, r4, #0
 8005c3a:	f7fa ff85 	bl	8000b48 <__aeabi_fsub>
 8005c3e:	1c04      	adds	r4, r0, #0
 8005c40:	e030      	b.n	8005ca4 <__kernel_rem_pio2f+0x208>
 8005c42:	21ee      	movs	r1, #238	; 0xee
 8005c44:	1c20      	adds	r0, r4, #0
 8005c46:	0589      	lsls	r1, r1, #22
 8005c48:	f7fa fe58 	bl	80008fc <__aeabi_fmul>
 8005c4c:	f7fb f92a 	bl	8000ea4 <__aeabi_f2iz>
 8005c50:	f7fb f948 	bl	8000ee4 <__aeabi_i2f>
 8005c54:	2187      	movs	r1, #135	; 0x87
 8005c56:	05c9      	lsls	r1, r1, #23
 8005c58:	9004      	str	r0, [sp, #16]
 8005c5a:	f7fa fe4f 	bl	80008fc <__aeabi_fmul>
 8005c5e:	1c01      	adds	r1, r0, #0
 8005c60:	1c20      	adds	r0, r4, #0
 8005c62:	f7fa ff71 	bl	8000b48 <__aeabi_fsub>
 8005c66:	f7fb f91d 	bl	8000ea4 <__aeabi_f2iz>
 8005c6a:	9b02      	ldr	r3, [sp, #8]
 8005c6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c6e:	c301      	stmia	r3!, {r0}
 8005c70:	3d01      	subs	r5, #1
 8005c72:	9302      	str	r3, [sp, #8]
 8005c74:	00ab      	lsls	r3, r5, #2
 8005c76:	5899      	ldr	r1, [r3, r2]
 8005c78:	9804      	ldr	r0, [sp, #16]
 8005c7a:	f7fa fbf1 	bl	8000460 <__aeabi_fadd>
 8005c7e:	1c04      	adds	r4, r0, #0
 8005c80:	e778      	b.n	8005b74 <__kernel_rem_pio2f+0xd8>
 8005c82:	9b01      	ldr	r3, [sp, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d106      	bne.n	8005c96 <__kernel_rem_pio2f+0x1fa>
 8005c88:	1e73      	subs	r3, r6, #1
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	aa0e      	add	r2, sp, #56	; 0x38
 8005c8e:	5898      	ldr	r0, [r3, r2]
 8005c90:	11c3      	asrs	r3, r0, #7
 8005c92:	9302      	str	r3, [sp, #8]
 8005c94:	e7a6      	b.n	8005be4 <__kernel_rem_pio2f+0x148>
 8005c96:	21fc      	movs	r1, #252	; 0xfc
 8005c98:	0589      	lsls	r1, r1, #22
 8005c9a:	f7fa fbd7 	bl	800044c <__aeabi_fcmpge>
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d12e      	bne.n	8005d00 <__kernel_rem_pio2f+0x264>
 8005ca2:	9002      	str	r0, [sp, #8]
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	1c20      	adds	r0, r4, #0
 8005ca8:	f7fa fbac 	bl	8000404 <__aeabi_fcmpeq>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	d100      	bne.n	8005cb2 <__kernel_rem_pio2f+0x216>
 8005cb0:	e08e      	b.n	8005dd0 <__kernel_rem_pio2f+0x334>
 8005cb2:	1e77      	subs	r7, r6, #1
 8005cb4:	003b      	movs	r3, r7
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	9905      	ldr	r1, [sp, #20]
 8005cba:	428b      	cmp	r3, r1
 8005cbc:	da45      	bge.n	8005d4a <__kernel_rem_pio2f+0x2ae>
 8005cbe:	2a00      	cmp	r2, #0
 8005cc0:	d05d      	beq.n	8005d7e <__kernel_rem_pio2f+0x2e2>
 8005cc2:	9b01      	ldr	r3, [sp, #4]
 8005cc4:	aa0e      	add	r2, sp, #56	; 0x38
 8005cc6:	3b08      	subs	r3, #8
 8005cc8:	9301      	str	r3, [sp, #4]
 8005cca:	00bb      	lsls	r3, r7, #2
 8005ccc:	589b      	ldr	r3, [r3, r2]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d07a      	beq.n	8005dc8 <__kernel_rem_pio2f+0x32c>
 8005cd2:	20fe      	movs	r0, #254	; 0xfe
 8005cd4:	9901      	ldr	r1, [sp, #4]
 8005cd6:	0580      	lsls	r0, r0, #22
 8005cd8:	f000 fa3e 	bl	8006158 <scalbnf>
 8005cdc:	003d      	movs	r5, r7
 8005cde:	1c04      	adds	r4, r0, #0
 8005ce0:	2d00      	cmp	r5, #0
 8005ce2:	db00      	blt.n	8005ce6 <__kernel_rem_pio2f+0x24a>
 8005ce4:	e0ab      	b.n	8005e3e <__kernel_rem_pio2f+0x3a2>
 8005ce6:	003c      	movs	r4, r7
 8005ce8:	2c00      	cmp	r4, #0
 8005cea:	da00      	bge.n	8005cee <__kernel_rem_pio2f+0x252>
 8005cec:	e0d6      	b.n	8005e9c <__kernel_rem_pio2f+0x400>
 8005cee:	00a3      	lsls	r3, r4, #2
 8005cf0:	aa4a      	add	r2, sp, #296	; 0x128
 8005cf2:	189b      	adds	r3, r3, r2
 8005cf4:	9306      	str	r3, [sp, #24]
 8005cf6:	1b3b      	subs	r3, r7, r4
 8005cf8:	2600      	movs	r6, #0
 8005cfa:	2500      	movs	r5, #0
 8005cfc:	9301      	str	r3, [sp, #4]
 8005cfe:	e0bf      	b.n	8005e80 <__kernel_rem_pio2f+0x3e4>
 8005d00:	2302      	movs	r3, #2
 8005d02:	9302      	str	r3, [sp, #8]
 8005d04:	e771      	b.n	8005bea <__kernel_rem_pio2f+0x14e>
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2d00      	cmp	r5, #0
 8005d0a:	d108      	bne.n	8005d1e <__kernel_rem_pio2f+0x282>
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <__kernel_rem_pio2f+0x27a>
 8005d10:	1ac3      	subs	r3, r0, r3
 8005d12:	603b      	str	r3, [r7, #0]
 8005d14:	4663      	mov	r3, ip
 8005d16:	001d      	movs	r5, r3
 8005d18:	3201      	adds	r2, #1
 8005d1a:	3704      	adds	r7, #4
 8005d1c:	e76f      	b.n	8005bfe <__kernel_rem_pio2f+0x162>
 8005d1e:	1acb      	subs	r3, r1, r3
 8005d20:	603b      	str	r3, [r7, #0]
 8005d22:	002b      	movs	r3, r5
 8005d24:	e7f7      	b.n	8005d16 <__kernel_rem_pio2f+0x27a>
 8005d26:	1e73      	subs	r3, r6, #1
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	aa0e      	add	r2, sp, #56	; 0x38
 8005d2c:	589a      	ldr	r2, [r3, r2]
 8005d2e:	920d      	str	r2, [sp, #52]	; 0x34
 8005d30:	227f      	movs	r2, #127	; 0x7f
 8005d32:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d34:	400a      	ands	r2, r1
 8005d36:	a90e      	add	r1, sp, #56	; 0x38
 8005d38:	505a      	str	r2, [r3, r1]
 8005d3a:	e76c      	b.n	8005c16 <__kernel_rem_pio2f+0x17a>
 8005d3c:	1e73      	subs	r3, r6, #1
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	aa0e      	add	r2, sp, #56	; 0x38
 8005d42:	589a      	ldr	r2, [r3, r2]
 8005d44:	920d      	str	r2, [sp, #52]	; 0x34
 8005d46:	223f      	movs	r2, #63	; 0x3f
 8005d48:	e7f3      	b.n	8005d32 <__kernel_rem_pio2f+0x296>
 8005d4a:	0099      	lsls	r1, r3, #2
 8005d4c:	a80e      	add	r0, sp, #56	; 0x38
 8005d4e:	5809      	ldr	r1, [r1, r0]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	430a      	orrs	r2, r1
 8005d54:	e7b0      	b.n	8005cb8 <__kernel_rem_pio2f+0x21c>
 8005d56:	3301      	adds	r3, #1
 8005d58:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005d5a:	009a      	lsls	r2, r3, #2
 8005d5c:	4252      	negs	r2, r2
 8005d5e:	588a      	ldr	r2, [r1, r2]
 8005d60:	2a00      	cmp	r2, #0
 8005d62:	d0f8      	beq.n	8005d56 <__kernel_rem_pio2f+0x2ba>
 8005d64:	9a08      	ldr	r2, [sp, #32]
 8005d66:	18f3      	adds	r3, r6, r3
 8005d68:	18b4      	adds	r4, r6, r2
 8005d6a:	00a4      	lsls	r4, r4, #2
 8005d6c:	aa22      	add	r2, sp, #136	; 0x88
 8005d6e:	1c75      	adds	r5, r6, #1
 8005d70:	1914      	adds	r4, r2, r4
 8005d72:	9302      	str	r3, [sp, #8]
 8005d74:	9b02      	ldr	r3, [sp, #8]
 8005d76:	42ab      	cmp	r3, r5
 8005d78:	da03      	bge.n	8005d82 <__kernel_rem_pio2f+0x2e6>
 8005d7a:	001e      	movs	r6, r3
 8005d7c:	e6f3      	b.n	8005b66 <__kernel_rem_pio2f+0xca>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e7ea      	b.n	8005d58 <__kernel_rem_pio2f+0x2bc>
 8005d82:	00ab      	lsls	r3, r5, #2
 8005d84:	9304      	str	r3, [sp, #16]
 8005d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d88:	00aa      	lsls	r2, r5, #2
 8005d8a:	5898      	ldr	r0, [r3, r2]
 8005d8c:	f7fb f8aa 	bl	8000ee4 <__aeabi_i2f>
 8005d90:	2700      	movs	r7, #0
 8005d92:	2600      	movs	r6, #0
 8005d94:	6020      	str	r0, [r4, #0]
 8005d96:	9b06      	ldr	r3, [sp, #24]
 8005d98:	429f      	cmp	r7, r3
 8005d9a:	dd07      	ble.n	8005dac <__kernel_rem_pio2f+0x310>
 8005d9c:	21f0      	movs	r1, #240	; 0xf0
 8005d9e:	9a04      	ldr	r2, [sp, #16]
 8005da0:	ab0e      	add	r3, sp, #56	; 0x38
 8005da2:	185b      	adds	r3, r3, r1
 8005da4:	509e      	str	r6, [r3, r2]
 8005da6:	3501      	adds	r5, #1
 8005da8:	3404      	adds	r4, #4
 8005daa:	e7e3      	b.n	8005d74 <__kernel_rem_pio2f+0x2d8>
 8005dac:	00bb      	lsls	r3, r7, #2
 8005dae:	425a      	negs	r2, r3
 8005db0:	58a1      	ldr	r1, [r4, r2]
 8005db2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005db4:	3701      	adds	r7, #1
 8005db6:	58d0      	ldr	r0, [r2, r3]
 8005db8:	f7fa fda0 	bl	80008fc <__aeabi_fmul>
 8005dbc:	1c01      	adds	r1, r0, #0
 8005dbe:	1c30      	adds	r0, r6, #0
 8005dc0:	f7fa fb4e 	bl	8000460 <__aeabi_fadd>
 8005dc4:	1c06      	adds	r6, r0, #0
 8005dc6:	e7e6      	b.n	8005d96 <__kernel_rem_pio2f+0x2fa>
 8005dc8:	3f01      	subs	r7, #1
 8005dca:	e77a      	b.n	8005cc2 <__kernel_rem_pio2f+0x226>
 8005dcc:	080067cc 	.word	0x080067cc
 8005dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dd2:	9a07      	ldr	r2, [sp, #28]
 8005dd4:	1c20      	adds	r0, r4, #0
 8005dd6:	1a99      	subs	r1, r3, r2
 8005dd8:	f000 f9be 	bl	8006158 <scalbnf>
 8005ddc:	2187      	movs	r1, #135	; 0x87
 8005dde:	05c9      	lsls	r1, r1, #23
 8005de0:	1c04      	adds	r4, r0, #0
 8005de2:	f7fa fb33 	bl	800044c <__aeabi_fcmpge>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d021      	beq.n	8005e2e <__kernel_rem_pio2f+0x392>
 8005dea:	21ee      	movs	r1, #238	; 0xee
 8005dec:	1c20      	adds	r0, r4, #0
 8005dee:	0589      	lsls	r1, r1, #22
 8005df0:	f7fa fd84 	bl	80008fc <__aeabi_fmul>
 8005df4:	f7fb f856 	bl	8000ea4 <__aeabi_f2iz>
 8005df8:	f7fb f874 	bl	8000ee4 <__aeabi_i2f>
 8005dfc:	2187      	movs	r1, #135	; 0x87
 8005dfe:	05c9      	lsls	r1, r1, #23
 8005e00:	1c05      	adds	r5, r0, #0
 8005e02:	f7fa fd7b 	bl	80008fc <__aeabi_fmul>
 8005e06:	1c01      	adds	r1, r0, #0
 8005e08:	1c20      	adds	r0, r4, #0
 8005e0a:	f7fa fe9d 	bl	8000b48 <__aeabi_fsub>
 8005e0e:	f7fb f849 	bl	8000ea4 <__aeabi_f2iz>
 8005e12:	00b7      	lsls	r7, r6, #2
 8005e14:	ab0e      	add	r3, sp, #56	; 0x38
 8005e16:	51d8      	str	r0, [r3, r7]
 8005e18:	9b01      	ldr	r3, [sp, #4]
 8005e1a:	1c28      	adds	r0, r5, #0
 8005e1c:	3308      	adds	r3, #8
 8005e1e:	9301      	str	r3, [sp, #4]
 8005e20:	f7fb f840 	bl	8000ea4 <__aeabi_f2iz>
 8005e24:	1c77      	adds	r7, r6, #1
 8005e26:	00bc      	lsls	r4, r7, #2
 8005e28:	ab0e      	add	r3, sp, #56	; 0x38
 8005e2a:	5118      	str	r0, [r3, r4]
 8005e2c:	e751      	b.n	8005cd2 <__kernel_rem_pio2f+0x236>
 8005e2e:	1c20      	adds	r0, r4, #0
 8005e30:	f7fb f838 	bl	8000ea4 <__aeabi_f2iz>
 8005e34:	00b5      	lsls	r5, r6, #2
 8005e36:	ab0e      	add	r3, sp, #56	; 0x38
 8005e38:	0037      	movs	r7, r6
 8005e3a:	5158      	str	r0, [r3, r5]
 8005e3c:	e749      	b.n	8005cd2 <__kernel_rem_pio2f+0x236>
 8005e3e:	ab0e      	add	r3, sp, #56	; 0x38
 8005e40:	00ae      	lsls	r6, r5, #2
 8005e42:	58f0      	ldr	r0, [r6, r3]
 8005e44:	f7fb f84e 	bl	8000ee4 <__aeabi_i2f>
 8005e48:	1c21      	adds	r1, r4, #0
 8005e4a:	f7fa fd57 	bl	80008fc <__aeabi_fmul>
 8005e4e:	22f0      	movs	r2, #240	; 0xf0
 8005e50:	21ee      	movs	r1, #238	; 0xee
 8005e52:	ab0e      	add	r3, sp, #56	; 0x38
 8005e54:	189b      	adds	r3, r3, r2
 8005e56:	5198      	str	r0, [r3, r6]
 8005e58:	0589      	lsls	r1, r1, #22
 8005e5a:	1c20      	adds	r0, r4, #0
 8005e5c:	f7fa fd4e 	bl	80008fc <__aeabi_fmul>
 8005e60:	3d01      	subs	r5, #1
 8005e62:	1c04      	adds	r4, r0, #0
 8005e64:	e73c      	b.n	8005ce0 <__kernel_rem_pio2f+0x244>
 8005e66:	9a06      	ldr	r2, [sp, #24]
 8005e68:	00ab      	lsls	r3, r5, #2
 8005e6a:	58d1      	ldr	r1, [r2, r3]
 8005e6c:	4a5e      	ldr	r2, [pc, #376]	; (8005fe8 <__kernel_rem_pio2f+0x54c>)
 8005e6e:	3501      	adds	r5, #1
 8005e70:	5898      	ldr	r0, [r3, r2]
 8005e72:	f7fa fd43 	bl	80008fc <__aeabi_fmul>
 8005e76:	1c01      	adds	r1, r0, #0
 8005e78:	1c30      	adds	r0, r6, #0
 8005e7a:	f7fa faf1 	bl	8000460 <__aeabi_fadd>
 8005e7e:	1c06      	adds	r6, r0, #0
 8005e80:	9b05      	ldr	r3, [sp, #20]
 8005e82:	429d      	cmp	r5, r3
 8005e84:	dc02      	bgt.n	8005e8c <__kernel_rem_pio2f+0x3f0>
 8005e86:	9b01      	ldr	r3, [sp, #4]
 8005e88:	429d      	cmp	r5, r3
 8005e8a:	ddec      	ble.n	8005e66 <__kernel_rem_pio2f+0x3ca>
 8005e8c:	21a0      	movs	r1, #160	; 0xa0
 8005e8e:	9b01      	ldr	r3, [sp, #4]
 8005e90:	aa0e      	add	r2, sp, #56	; 0x38
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	1852      	adds	r2, r2, r1
 8005e96:	50d6      	str	r6, [r2, r3]
 8005e98:	3c01      	subs	r4, #1
 8005e9a:	e725      	b.n	8005ce8 <__kernel_rem_pio2f+0x24c>
 8005e9c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	dc08      	bgt.n	8005eb4 <__kernel_rem_pio2f+0x418>
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	dc5a      	bgt.n	8005f5c <__kernel_rem_pio2f+0x4c0>
 8005ea6:	d035      	beq.n	8005f14 <__kernel_rem_pio2f+0x478>
 8005ea8:	2007      	movs	r0, #7
 8005eaa:	9b04      	ldr	r3, [sp, #16]
 8005eac:	4003      	ands	r3, r0
 8005eae:	0018      	movs	r0, r3
 8005eb0:	b05f      	add	sp, #380	; 0x17c
 8005eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eb4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8005eb6:	2b03      	cmp	r3, #3
 8005eb8:	d1f6      	bne.n	8005ea8 <__kernel_rem_pio2f+0x40c>
 8005eba:	00bb      	lsls	r3, r7, #2
 8005ebc:	aa36      	add	r2, sp, #216	; 0xd8
 8005ebe:	18d5      	adds	r5, r2, r3
 8005ec0:	002c      	movs	r4, r5
 8005ec2:	9701      	str	r7, [sp, #4]
 8005ec4:	9b01      	ldr	r3, [sp, #4]
 8005ec6:	3c04      	subs	r4, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	dc51      	bgt.n	8005f70 <__kernel_rem_pio2f+0x4d4>
 8005ecc:	9701      	str	r7, [sp, #4]
 8005ece:	9b01      	ldr	r3, [sp, #4]
 8005ed0:	3d04      	subs	r5, #4
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	dc62      	bgt.n	8005f9c <__kernel_rem_pio2f+0x500>
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	ac36      	add	r4, sp, #216	; 0xd8
 8005eda:	2f01      	cmp	r7, #1
 8005edc:	dc73      	bgt.n	8005fc6 <__kernel_rem_pio2f+0x52a>
 8005ede:	9902      	ldr	r1, [sp, #8]
 8005ee0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8005ee2:	6863      	ldr	r3, [r4, #4]
 8005ee4:	2900      	cmp	r1, #0
 8005ee6:	d174      	bne.n	8005fd2 <__kernel_rem_pio2f+0x536>
 8005ee8:	9903      	ldr	r1, [sp, #12]
 8005eea:	604b      	str	r3, [r1, #4]
 8005eec:	000b      	movs	r3, r1
 8005eee:	600a      	str	r2, [r1, #0]
 8005ef0:	6098      	str	r0, [r3, #8]
 8005ef2:	e7d9      	b.n	8005ea8 <__kernel_rem_pio2f+0x40c>
 8005ef4:	00bb      	lsls	r3, r7, #2
 8005ef6:	5919      	ldr	r1, [r3, r4]
 8005ef8:	f7fa fab2 	bl	8000460 <__aeabi_fadd>
 8005efc:	3f01      	subs	r7, #1
 8005efe:	2f00      	cmp	r7, #0
 8005f00:	daf8      	bge.n	8005ef4 <__kernel_rem_pio2f+0x458>
 8005f02:	9b02      	ldr	r3, [sp, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <__kernel_rem_pio2f+0x472>
 8005f08:	2380      	movs	r3, #128	; 0x80
 8005f0a:	061b      	lsls	r3, r3, #24
 8005f0c:	18c0      	adds	r0, r0, r3
 8005f0e:	9b03      	ldr	r3, [sp, #12]
 8005f10:	6018      	str	r0, [r3, #0]
 8005f12:	e7c9      	b.n	8005ea8 <__kernel_rem_pio2f+0x40c>
 8005f14:	2000      	movs	r0, #0
 8005f16:	ac36      	add	r4, sp, #216	; 0xd8
 8005f18:	e7f1      	b.n	8005efe <__kernel_rem_pio2f+0x462>
 8005f1a:	00a3      	lsls	r3, r4, #2
 8005f1c:	5959      	ldr	r1, [r3, r5]
 8005f1e:	f7fa fa9f 	bl	8000460 <__aeabi_fadd>
 8005f22:	3c01      	subs	r4, #1
 8005f24:	2c00      	cmp	r4, #0
 8005f26:	daf8      	bge.n	8005f1a <__kernel_rem_pio2f+0x47e>
 8005f28:	9a02      	ldr	r2, [sp, #8]
 8005f2a:	1c03      	adds	r3, r0, #0
 8005f2c:	2a00      	cmp	r2, #0
 8005f2e:	d002      	beq.n	8005f36 <__kernel_rem_pio2f+0x49a>
 8005f30:	2380      	movs	r3, #128	; 0x80
 8005f32:	061b      	lsls	r3, r3, #24
 8005f34:	18c3      	adds	r3, r0, r3
 8005f36:	9a03      	ldr	r2, [sp, #12]
 8005f38:	1c01      	adds	r1, r0, #0
 8005f3a:	6013      	str	r3, [r2, #0]
 8005f3c:	9836      	ldr	r0, [sp, #216]	; 0xd8
 8005f3e:	f7fa fe03 	bl	8000b48 <__aeabi_fsub>
 8005f42:	2401      	movs	r4, #1
 8005f44:	ad36      	add	r5, sp, #216	; 0xd8
 8005f46:	42a7      	cmp	r7, r4
 8005f48:	da0c      	bge.n	8005f64 <__kernel_rem_pio2f+0x4c8>
 8005f4a:	9b02      	ldr	r3, [sp, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d002      	beq.n	8005f56 <__kernel_rem_pio2f+0x4ba>
 8005f50:	2380      	movs	r3, #128	; 0x80
 8005f52:	061b      	lsls	r3, r3, #24
 8005f54:	18c0      	adds	r0, r0, r3
 8005f56:	9b03      	ldr	r3, [sp, #12]
 8005f58:	6058      	str	r0, [r3, #4]
 8005f5a:	e7a5      	b.n	8005ea8 <__kernel_rem_pio2f+0x40c>
 8005f5c:	003c      	movs	r4, r7
 8005f5e:	2000      	movs	r0, #0
 8005f60:	ad36      	add	r5, sp, #216	; 0xd8
 8005f62:	e7df      	b.n	8005f24 <__kernel_rem_pio2f+0x488>
 8005f64:	00a3      	lsls	r3, r4, #2
 8005f66:	5959      	ldr	r1, [r3, r5]
 8005f68:	f7fa fa7a 	bl	8000460 <__aeabi_fadd>
 8005f6c:	3401      	adds	r4, #1
 8005f6e:	e7ea      	b.n	8005f46 <__kernel_rem_pio2f+0x4aa>
 8005f70:	9b01      	ldr	r3, [sp, #4]
 8005f72:	6826      	ldr	r6, [r4, #0]
 8005f74:	3b01      	subs	r3, #1
 8005f76:	9301      	str	r3, [sp, #4]
 8005f78:	6863      	ldr	r3, [r4, #4]
 8005f7a:	1c30      	adds	r0, r6, #0
 8005f7c:	1c19      	adds	r1, r3, #0
 8005f7e:	9305      	str	r3, [sp, #20]
 8005f80:	f7fa fa6e 	bl	8000460 <__aeabi_fadd>
 8005f84:	1c01      	adds	r1, r0, #0
 8005f86:	9006      	str	r0, [sp, #24]
 8005f88:	1c30      	adds	r0, r6, #0
 8005f8a:	f7fa fddd 	bl	8000b48 <__aeabi_fsub>
 8005f8e:	9905      	ldr	r1, [sp, #20]
 8005f90:	f7fa fa66 	bl	8000460 <__aeabi_fadd>
 8005f94:	9b06      	ldr	r3, [sp, #24]
 8005f96:	6060      	str	r0, [r4, #4]
 8005f98:	6023      	str	r3, [r4, #0]
 8005f9a:	e793      	b.n	8005ec4 <__kernel_rem_pio2f+0x428>
 8005f9c:	682c      	ldr	r4, [r5, #0]
 8005f9e:	686e      	ldr	r6, [r5, #4]
 8005fa0:	9b01      	ldr	r3, [sp, #4]
 8005fa2:	1c31      	adds	r1, r6, #0
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	1c20      	adds	r0, r4, #0
 8005fa8:	9301      	str	r3, [sp, #4]
 8005faa:	f7fa fa59 	bl	8000460 <__aeabi_fadd>
 8005fae:	1c01      	adds	r1, r0, #0
 8005fb0:	9005      	str	r0, [sp, #20]
 8005fb2:	1c20      	adds	r0, r4, #0
 8005fb4:	f7fa fdc8 	bl	8000b48 <__aeabi_fsub>
 8005fb8:	1c31      	adds	r1, r6, #0
 8005fba:	f7fa fa51 	bl	8000460 <__aeabi_fadd>
 8005fbe:	9b05      	ldr	r3, [sp, #20]
 8005fc0:	6068      	str	r0, [r5, #4]
 8005fc2:	602b      	str	r3, [r5, #0]
 8005fc4:	e783      	b.n	8005ece <__kernel_rem_pio2f+0x432>
 8005fc6:	00bb      	lsls	r3, r7, #2
 8005fc8:	58e1      	ldr	r1, [r4, r3]
 8005fca:	f7fa fa49 	bl	8000460 <__aeabi_fadd>
 8005fce:	3f01      	subs	r7, #1
 8005fd0:	e783      	b.n	8005eda <__kernel_rem_pio2f+0x43e>
 8005fd2:	2180      	movs	r1, #128	; 0x80
 8005fd4:	9c03      	ldr	r4, [sp, #12]
 8005fd6:	0609      	lsls	r1, r1, #24
 8005fd8:	185b      	adds	r3, r3, r1
 8005fda:	1852      	adds	r2, r2, r1
 8005fdc:	6063      	str	r3, [r4, #4]
 8005fde:	6022      	str	r2, [r4, #0]
 8005fe0:	0023      	movs	r3, r4
 8005fe2:	1840      	adds	r0, r0, r1
 8005fe4:	e784      	b.n	8005ef0 <__kernel_rem_pio2f+0x454>
 8005fe6:	46c0      	nop			; (mov r8, r8)
 8005fe8:	080067a0 	.word	0x080067a0

08005fec <__kernel_sinf>:
 8005fec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fee:	9201      	str	r2, [sp, #4]
 8005ff0:	22c8      	movs	r2, #200	; 0xc8
 8005ff2:	0043      	lsls	r3, r0, #1
 8005ff4:	1c04      	adds	r4, r0, #0
 8005ff6:	9100      	str	r1, [sp, #0]
 8005ff8:	085b      	lsrs	r3, r3, #1
 8005ffa:	0592      	lsls	r2, r2, #22
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	da03      	bge.n	8006008 <__kernel_sinf+0x1c>
 8006000:	f7fa ff50 	bl	8000ea4 <__aeabi_f2iz>
 8006004:	2800      	cmp	r0, #0
 8006006:	d035      	beq.n	8006074 <__kernel_sinf+0x88>
 8006008:	1c21      	adds	r1, r4, #0
 800600a:	1c20      	adds	r0, r4, #0
 800600c:	f7fa fc76 	bl	80008fc <__aeabi_fmul>
 8006010:	1c05      	adds	r5, r0, #0
 8006012:	1c01      	adds	r1, r0, #0
 8006014:	1c20      	adds	r0, r4, #0
 8006016:	f7fa fc71 	bl	80008fc <__aeabi_fmul>
 800601a:	4928      	ldr	r1, [pc, #160]	; (80060bc <__kernel_sinf+0xd0>)
 800601c:	1c06      	adds	r6, r0, #0
 800601e:	1c28      	adds	r0, r5, #0
 8006020:	f7fa fc6c 	bl	80008fc <__aeabi_fmul>
 8006024:	4926      	ldr	r1, [pc, #152]	; (80060c0 <__kernel_sinf+0xd4>)
 8006026:	f7fa fd8f 	bl	8000b48 <__aeabi_fsub>
 800602a:	1c29      	adds	r1, r5, #0
 800602c:	f7fa fc66 	bl	80008fc <__aeabi_fmul>
 8006030:	4924      	ldr	r1, [pc, #144]	; (80060c4 <__kernel_sinf+0xd8>)
 8006032:	f7fa fa15 	bl	8000460 <__aeabi_fadd>
 8006036:	1c29      	adds	r1, r5, #0
 8006038:	f7fa fc60 	bl	80008fc <__aeabi_fmul>
 800603c:	4922      	ldr	r1, [pc, #136]	; (80060c8 <__kernel_sinf+0xdc>)
 800603e:	f7fa fd83 	bl	8000b48 <__aeabi_fsub>
 8006042:	1c29      	adds	r1, r5, #0
 8006044:	f7fa fc5a 	bl	80008fc <__aeabi_fmul>
 8006048:	4920      	ldr	r1, [pc, #128]	; (80060cc <__kernel_sinf+0xe0>)
 800604a:	f7fa fa09 	bl	8000460 <__aeabi_fadd>
 800604e:	9b01      	ldr	r3, [sp, #4]
 8006050:	1c07      	adds	r7, r0, #0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d110      	bne.n	8006078 <__kernel_sinf+0x8c>
 8006056:	1c01      	adds	r1, r0, #0
 8006058:	1c28      	adds	r0, r5, #0
 800605a:	f7fa fc4f 	bl	80008fc <__aeabi_fmul>
 800605e:	491c      	ldr	r1, [pc, #112]	; (80060d0 <__kernel_sinf+0xe4>)
 8006060:	f7fa fd72 	bl	8000b48 <__aeabi_fsub>
 8006064:	1c31      	adds	r1, r6, #0
 8006066:	f7fa fc49 	bl	80008fc <__aeabi_fmul>
 800606a:	1c01      	adds	r1, r0, #0
 800606c:	1c20      	adds	r0, r4, #0
 800606e:	f7fa f9f7 	bl	8000460 <__aeabi_fadd>
 8006072:	1c04      	adds	r4, r0, #0
 8006074:	1c20      	adds	r0, r4, #0
 8006076:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006078:	21fc      	movs	r1, #252	; 0xfc
 800607a:	9800      	ldr	r0, [sp, #0]
 800607c:	0589      	lsls	r1, r1, #22
 800607e:	f7fa fc3d 	bl	80008fc <__aeabi_fmul>
 8006082:	1c39      	adds	r1, r7, #0
 8006084:	9001      	str	r0, [sp, #4]
 8006086:	1c30      	adds	r0, r6, #0
 8006088:	f7fa fc38 	bl	80008fc <__aeabi_fmul>
 800608c:	1c01      	adds	r1, r0, #0
 800608e:	9801      	ldr	r0, [sp, #4]
 8006090:	f7fa fd5a 	bl	8000b48 <__aeabi_fsub>
 8006094:	1c29      	adds	r1, r5, #0
 8006096:	f7fa fc31 	bl	80008fc <__aeabi_fmul>
 800609a:	9900      	ldr	r1, [sp, #0]
 800609c:	f7fa fd54 	bl	8000b48 <__aeabi_fsub>
 80060a0:	490b      	ldr	r1, [pc, #44]	; (80060d0 <__kernel_sinf+0xe4>)
 80060a2:	1c05      	adds	r5, r0, #0
 80060a4:	1c30      	adds	r0, r6, #0
 80060a6:	f7fa fc29 	bl	80008fc <__aeabi_fmul>
 80060aa:	1c01      	adds	r1, r0, #0
 80060ac:	1c28      	adds	r0, r5, #0
 80060ae:	f7fa f9d7 	bl	8000460 <__aeabi_fadd>
 80060b2:	1c01      	adds	r1, r0, #0
 80060b4:	1c20      	adds	r0, r4, #0
 80060b6:	f7fa fd47 	bl	8000b48 <__aeabi_fsub>
 80060ba:	e7da      	b.n	8006072 <__kernel_sinf+0x86>
 80060bc:	2f2ec9d3 	.word	0x2f2ec9d3
 80060c0:	32d72f34 	.word	0x32d72f34
 80060c4:	3638ef1b 	.word	0x3638ef1b
 80060c8:	39500d01 	.word	0x39500d01
 80060cc:	3c088889 	.word	0x3c088889
 80060d0:	3e2aaaab 	.word	0x3e2aaaab

080060d4 <fabsf>:
 80060d4:	0040      	lsls	r0, r0, #1
 80060d6:	0840      	lsrs	r0, r0, #1
 80060d8:	4770      	bx	lr
	...

080060dc <floorf>:
 80060dc:	b570      	push	{r4, r5, r6, lr}
 80060de:	0045      	lsls	r5, r0, #1
 80060e0:	086e      	lsrs	r6, r5, #1
 80060e2:	0e2d      	lsrs	r5, r5, #24
 80060e4:	3d7f      	subs	r5, #127	; 0x7f
 80060e6:	0004      	movs	r4, r0
 80060e8:	2d16      	cmp	r5, #22
 80060ea:	dc24      	bgt.n	8006136 <floorf+0x5a>
 80060ec:	2d00      	cmp	r5, #0
 80060ee:	da0e      	bge.n	800610e <floorf+0x32>
 80060f0:	4916      	ldr	r1, [pc, #88]	; (800614c <floorf+0x70>)
 80060f2:	f7fa f9b5 	bl	8000460 <__aeabi_fadd>
 80060f6:	2100      	movs	r1, #0
 80060f8:	f7fa f99e 	bl	8000438 <__aeabi_fcmpgt>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d004      	beq.n	800610a <floorf+0x2e>
 8006100:	2c00      	cmp	r4, #0
 8006102:	da20      	bge.n	8006146 <floorf+0x6a>
 8006104:	2e00      	cmp	r6, #0
 8006106:	d000      	beq.n	800610a <floorf+0x2e>
 8006108:	4c11      	ldr	r4, [pc, #68]	; (8006150 <floorf+0x74>)
 800610a:	1c20      	adds	r0, r4, #0
 800610c:	e01a      	b.n	8006144 <floorf+0x68>
 800610e:	4e11      	ldr	r6, [pc, #68]	; (8006154 <floorf+0x78>)
 8006110:	412e      	asrs	r6, r5
 8006112:	4206      	tst	r6, r0
 8006114:	d016      	beq.n	8006144 <floorf+0x68>
 8006116:	490d      	ldr	r1, [pc, #52]	; (800614c <floorf+0x70>)
 8006118:	f7fa f9a2 	bl	8000460 <__aeabi_fadd>
 800611c:	2100      	movs	r1, #0
 800611e:	f7fa f98b 	bl	8000438 <__aeabi_fcmpgt>
 8006122:	2800      	cmp	r0, #0
 8006124:	d0f1      	beq.n	800610a <floorf+0x2e>
 8006126:	2c00      	cmp	r4, #0
 8006128:	da03      	bge.n	8006132 <floorf+0x56>
 800612a:	2380      	movs	r3, #128	; 0x80
 800612c:	041b      	lsls	r3, r3, #16
 800612e:	412b      	asrs	r3, r5
 8006130:	18e4      	adds	r4, r4, r3
 8006132:	43b4      	bics	r4, r6
 8006134:	e7e9      	b.n	800610a <floorf+0x2e>
 8006136:	23ff      	movs	r3, #255	; 0xff
 8006138:	05db      	lsls	r3, r3, #23
 800613a:	429e      	cmp	r6, r3
 800613c:	d302      	bcc.n	8006144 <floorf+0x68>
 800613e:	1c01      	adds	r1, r0, #0
 8006140:	f7fa f98e 	bl	8000460 <__aeabi_fadd>
 8006144:	bd70      	pop	{r4, r5, r6, pc}
 8006146:	2400      	movs	r4, #0
 8006148:	e7df      	b.n	800610a <floorf+0x2e>
 800614a:	46c0      	nop			; (mov r8, r8)
 800614c:	7149f2ca 	.word	0x7149f2ca
 8006150:	bf800000 	.word	0xbf800000
 8006154:	007fffff 	.word	0x007fffff

08006158 <scalbnf>:
 8006158:	0043      	lsls	r3, r0, #1
 800615a:	b570      	push	{r4, r5, r6, lr}
 800615c:	0002      	movs	r2, r0
 800615e:	000c      	movs	r4, r1
 8006160:	085d      	lsrs	r5, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d006      	beq.n	8006174 <scalbnf+0x1c>
 8006166:	21ff      	movs	r1, #255	; 0xff
 8006168:	05c9      	lsls	r1, r1, #23
 800616a:	428d      	cmp	r5, r1
 800616c:	d303      	bcc.n	8006176 <scalbnf+0x1e>
 800616e:	1c01      	adds	r1, r0, #0
 8006170:	f7fa f976 	bl	8000460 <__aeabi_fadd>
 8006174:	bd70      	pop	{r4, r5, r6, pc}
 8006176:	4208      	tst	r0, r1
 8006178:	d116      	bne.n	80061a8 <scalbnf+0x50>
 800617a:	2198      	movs	r1, #152	; 0x98
 800617c:	05c9      	lsls	r1, r1, #23
 800617e:	f7fa fbbd 	bl	80008fc <__aeabi_fmul>
 8006182:	4b1b      	ldr	r3, [pc, #108]	; (80061f0 <scalbnf+0x98>)
 8006184:	429c      	cmp	r4, r3
 8006186:	db29      	blt.n	80061dc <scalbnf+0x84>
 8006188:	0002      	movs	r2, r0
 800618a:	15c3      	asrs	r3, r0, #23
 800618c:	b2db      	uxtb	r3, r3
 800618e:	3b19      	subs	r3, #25
 8006190:	191b      	adds	r3, r3, r4
 8006192:	2bfe      	cmp	r3, #254	; 0xfe
 8006194:	dd0a      	ble.n	80061ac <scalbnf+0x54>
 8006196:	4b17      	ldr	r3, [pc, #92]	; (80061f4 <scalbnf+0x9c>)
 8006198:	2800      	cmp	r0, #0
 800619a:	da00      	bge.n	800619e <scalbnf+0x46>
 800619c:	4b16      	ldr	r3, [pc, #88]	; (80061f8 <scalbnf+0xa0>)
 800619e:	4915      	ldr	r1, [pc, #84]	; (80061f4 <scalbnf+0x9c>)
 80061a0:	1c18      	adds	r0, r3, #0
 80061a2:	f7fa fbab 	bl	80008fc <__aeabi_fmul>
 80061a6:	e7e5      	b.n	8006174 <scalbnf+0x1c>
 80061a8:	0e1b      	lsrs	r3, r3, #24
 80061aa:	e7f1      	b.n	8006190 <scalbnf+0x38>
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	dd04      	ble.n	80061ba <scalbnf+0x62>
 80061b0:	4812      	ldr	r0, [pc, #72]	; (80061fc <scalbnf+0xa4>)
 80061b2:	4002      	ands	r2, r0
 80061b4:	05d8      	lsls	r0, r3, #23
 80061b6:	4310      	orrs	r0, r2
 80061b8:	e7dc      	b.n	8006174 <scalbnf+0x1c>
 80061ba:	0019      	movs	r1, r3
 80061bc:	3116      	adds	r1, #22
 80061be:	da0f      	bge.n	80061e0 <scalbnf+0x88>
 80061c0:	4a0f      	ldr	r2, [pc, #60]	; (8006200 <scalbnf+0xa8>)
 80061c2:	0fc3      	lsrs	r3, r0, #31
 80061c4:	4294      	cmp	r4, r2
 80061c6:	dd05      	ble.n	80061d4 <scalbnf+0x7c>
 80061c8:	480a      	ldr	r0, [pc, #40]	; (80061f4 <scalbnf+0x9c>)
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d000      	beq.n	80061d0 <scalbnf+0x78>
 80061ce:	480a      	ldr	r0, [pc, #40]	; (80061f8 <scalbnf+0xa0>)
 80061d0:	4908      	ldr	r1, [pc, #32]	; (80061f4 <scalbnf+0x9c>)
 80061d2:	e7e6      	b.n	80061a2 <scalbnf+0x4a>
 80061d4:	480b      	ldr	r0, [pc, #44]	; (8006204 <scalbnf+0xac>)
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d000      	beq.n	80061dc <scalbnf+0x84>
 80061da:	480b      	ldr	r0, [pc, #44]	; (8006208 <scalbnf+0xb0>)
 80061dc:	4909      	ldr	r1, [pc, #36]	; (8006204 <scalbnf+0xac>)
 80061de:	e7e0      	b.n	80061a2 <scalbnf+0x4a>
 80061e0:	21cc      	movs	r1, #204	; 0xcc
 80061e2:	3319      	adds	r3, #25
 80061e4:	05d8      	lsls	r0, r3, #23
 80061e6:	4b05      	ldr	r3, [pc, #20]	; (80061fc <scalbnf+0xa4>)
 80061e8:	0589      	lsls	r1, r1, #22
 80061ea:	401a      	ands	r2, r3
 80061ec:	4310      	orrs	r0, r2
 80061ee:	e7d8      	b.n	80061a2 <scalbnf+0x4a>
 80061f0:	ffff3cb0 	.word	0xffff3cb0
 80061f4:	7149f2ca 	.word	0x7149f2ca
 80061f8:	f149f2ca 	.word	0xf149f2ca
 80061fc:	807fffff 	.word	0x807fffff
 8006200:	0000c350 	.word	0x0000c350
 8006204:	0da24260 	.word	0x0da24260
 8006208:	8da24260 	.word	0x8da24260

0800620c <__libc_init_array>:
 800620c:	b570      	push	{r4, r5, r6, lr}
 800620e:	2600      	movs	r6, #0
 8006210:	4d0c      	ldr	r5, [pc, #48]	; (8006244 <__libc_init_array+0x38>)
 8006212:	4c0d      	ldr	r4, [pc, #52]	; (8006248 <__libc_init_array+0x3c>)
 8006214:	1b64      	subs	r4, r4, r5
 8006216:	10a4      	asrs	r4, r4, #2
 8006218:	42a6      	cmp	r6, r4
 800621a:	d109      	bne.n	8006230 <__libc_init_array+0x24>
 800621c:	2600      	movs	r6, #0
 800621e:	f000 f821 	bl	8006264 <_init>
 8006222:	4d0a      	ldr	r5, [pc, #40]	; (800624c <__libc_init_array+0x40>)
 8006224:	4c0a      	ldr	r4, [pc, #40]	; (8006250 <__libc_init_array+0x44>)
 8006226:	1b64      	subs	r4, r4, r5
 8006228:	10a4      	asrs	r4, r4, #2
 800622a:	42a6      	cmp	r6, r4
 800622c:	d105      	bne.n	800623a <__libc_init_array+0x2e>
 800622e:	bd70      	pop	{r4, r5, r6, pc}
 8006230:	00b3      	lsls	r3, r6, #2
 8006232:	58eb      	ldr	r3, [r5, r3]
 8006234:	4798      	blx	r3
 8006236:	3601      	adds	r6, #1
 8006238:	e7ee      	b.n	8006218 <__libc_init_array+0xc>
 800623a:	00b3      	lsls	r3, r6, #2
 800623c:	58eb      	ldr	r3, [r5, r3]
 800623e:	4798      	blx	r3
 8006240:	3601      	adds	r6, #1
 8006242:	e7f2      	b.n	800622a <__libc_init_array+0x1e>
 8006244:	080067d8 	.word	0x080067d8
 8006248:	080067d8 	.word	0x080067d8
 800624c:	080067d8 	.word	0x080067d8
 8006250:	080067dc 	.word	0x080067dc

08006254 <memset>:
 8006254:	0003      	movs	r3, r0
 8006256:	1882      	adds	r2, r0, r2
 8006258:	4293      	cmp	r3, r2
 800625a:	d100      	bne.n	800625e <memset+0xa>
 800625c:	4770      	bx	lr
 800625e:	7019      	strb	r1, [r3, #0]
 8006260:	3301      	adds	r3, #1
 8006262:	e7f9      	b.n	8006258 <memset+0x4>

08006264 <_init>:
 8006264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006266:	46c0      	nop			; (mov r8, r8)
 8006268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800626a:	bc08      	pop	{r3}
 800626c:	469e      	mov	lr, r3
 800626e:	4770      	bx	lr

08006270 <_fini>:
 8006270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006272:	46c0      	nop			; (mov r8, r8)
 8006274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006276:	bc08      	pop	{r3}
 8006278:	469e      	mov	lr, r3
 800627a:	4770      	bx	lr
