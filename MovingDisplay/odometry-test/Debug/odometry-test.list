
odometry-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004764  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004824  08004824  00005824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800489c  0800489c  00006090  2**0
                  CONTENTS
  4 .ARM          00000000  0800489c  0800489c  00006090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800489c  0800489c  00006090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800489c  0800489c  0000589c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048a0  080048a0  000058a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  080048a4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000090  08004934  00006090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08004934  0000627c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011da8  00000000  00000000  000060b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000232f  00000000  00000000  00017e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  0001a190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cab  00000000  00000000  0001b168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014464  00000000  00000000  0001be13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001428a  00000000  00000000  00030277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081835  00000000  00000000  00044501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5d36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a50  00000000  00000000  000c5d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000c97cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000090 	.word	0x20000090
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800480c 	.word	0x0800480c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000094 	.word	0x20000094
 8000104:	0800480c 	.word	0x0800480c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <readCounter>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint64_t readCounter()
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  return (counter*65535) + TIM3->CNT;
 80003f8:	4b08      	ldr	r3, [pc, #32]	@ (800041c <readCounter+0x28>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	0013      	movs	r3, r2
 80003fe:	041b      	lsls	r3, r3, #16
 8000400:	1a9a      	subs	r2, r3, r2
 8000402:	4b07      	ldr	r3, [pc, #28]	@ (8000420 <readCounter+0x2c>)
 8000404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000406:	18d3      	adds	r3, r2, r3
 8000408:	0018      	movs	r0, r3
 800040a:	2300      	movs	r3, #0
 800040c:	0019      	movs	r1, r3
 800040e:	0002      	movs	r2, r0
 8000410:	000b      	movs	r3, r1
}
 8000412:	0010      	movs	r0, r2
 8000414:	0019      	movs	r1, r3
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			@ (mov r8, r8)
 800041c:	2000025c 	.word	0x2000025c
 8000420:	40000400 	.word	0x40000400

08000424 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
    if (htim == &htim3){
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	4b06      	ldr	r3, [pc, #24]	@ (8000448 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000430:	429a      	cmp	r2, r3
 8000432:	d104      	bne.n	800043e <HAL_TIM_PeriodElapsedCallback+0x1a>
        counter++;
 8000434:	4b05      	ldr	r3, [pc, #20]	@ (800044c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	1c5a      	adds	r2, r3, #1
 800043a:	4b04      	ldr	r3, [pc, #16]	@ (800044c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800043c:	601a      	str	r2, [r3, #0]
    }
}
 800043e:	46c0      	nop			@ (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	b002      	add	sp, #8
 8000444:	bd80      	pop	{r7, pc}
 8000446:	46c0      	nop			@ (mov r8, r8)
 8000448:	20000100 	.word	0x20000100
 800044c:	2000025c 	.word	0x2000025c

08000450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000452:	b08d      	sub	sp, #52	@ 0x34
 8000454:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000456:	f000 fe5e 	bl	8001116 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045a:	f000 fa13 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800045e:	f000 fb3d 	bl	8000adc <MX_GPIO_Init>
  MX_DMA_Init();
 8000462:	f000 fb1d 	bl	8000aa0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000466:	f000 fa51 	bl	800090c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800046a:	f000 fae5 	bl	8000a38 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800046e:	f000 fa8d 	bl	800098c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000472:	4b97      	ldr	r3, [pc, #604]	@ (80006d0 <main+0x280>)
 8000474:	0018      	movs	r0, r3
 8000476:	f002 feb9 	bl	80031ec <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t AS5600_ADDR = 0x36 << 1;
 800047a:	1dbb      	adds	r3, r7, #6
 800047c:	226c      	movs	r2, #108	@ 0x6c
 800047e:	801a      	strh	r2, [r3, #0]
  uint8_t ANGLE_ADDR = 0x0E;
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	220e      	movs	r2, #14
 8000484:	701a      	strb	r2, [r3, #0]
  uint8_t ID;

  uint64_t d_pcounter, Ltika_pcounter;
  d_pcounter = Ltika_pcounter = readCounter();
 8000486:	f7ff ffb5 	bl	80003f4 <readCounter>
 800048a:	0002      	movs	r2, r0
 800048c:	000b      	movs	r3, r1
 800048e:	60ba      	str	r2, [r7, #8]
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	68ba      	ldr	r2, [r7, #8]
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	613a      	str	r2, [r7, #16]
 8000498:	617b      	str	r3, [r7, #20]

  if(readID() < 2){
 800049a:	f000 fc59 	bl	8000d50 <readID>
 800049e:	0003      	movs	r3, r0
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d830      	bhi.n	8000506 <main+0xb6>
	  ID = readID();//自身のID
 80004a4:	1d7e      	adds	r6, r7, #5
 80004a6:	f000 fc53 	bl	8000d50 <readID>
 80004aa:	0003      	movs	r3, r0
 80004ac:	7033      	strb	r3, [r6, #0]
	    	Ltika_pcounter = readCounter();
		  }else{}
	  }
  }

  HAL_UART_Receive_DMA(&huart2,rxBufB,128);
 80004ae:	4989      	ldr	r1, [pc, #548]	@ (80006d4 <main+0x284>)
 80004b0:	4b89      	ldr	r3, [pc, #548]	@ (80006d8 <main+0x288>)
 80004b2:	2280      	movs	r2, #128	@ 0x80
 80004b4:	0018      	movs	r0, r3
 80004b6:	f003 fb6f 	bl	8003b98 <HAL_UART_Receive_DMA>

  HAL_I2C_Master_Transmit(&hi2c1, AS5600_ADDR, &ANGLE_ADDR, 1, 10);
 80004ba:	1d3a      	adds	r2, r7, #4
 80004bc:	1dbb      	adds	r3, r7, #6
 80004be:	8819      	ldrh	r1, [r3, #0]
 80004c0:	4886      	ldr	r0, [pc, #536]	@ (80006dc <main+0x28c>)
 80004c2:	230a      	movs	r3, #10
 80004c4:	9300      	str	r3, [sp, #0]
 80004c6:	2301      	movs	r3, #1
 80004c8:	f001 fc3a 	bl	8001d40 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, AS5600_ADDR, rxBufA, 2, 10);
 80004cc:	4a84      	ldr	r2, [pc, #528]	@ (80006e0 <main+0x290>)
 80004ce:	1dbb      	adds	r3, r7, #6
 80004d0:	8819      	ldrh	r1, [r3, #0]
 80004d2:	4882      	ldr	r0, [pc, #520]	@ (80006dc <main+0x28c>)
 80004d4:	230a      	movs	r3, #10
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	2302      	movs	r3, #2
 80004da:	f001 fd5b 	bl	8001f94 <HAL_I2C_Master_Receive>

  pAngle = rxBufA[0]*256 + rxBufA[1];
 80004de:	4b80      	ldr	r3, [pc, #512]	@ (80006e0 <main+0x290>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	021b      	lsls	r3, r3, #8
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	4a7e      	ldr	r2, [pc, #504]	@ (80006e0 <main+0x290>)
 80004e8:	7852      	ldrb	r2, [r2, #1]
 80004ea:	189b      	adds	r3, r3, r2
 80004ec:	b29a      	uxth	r2, r3
 80004ee:	4b7d      	ldr	r3, [pc, #500]	@ (80006e4 <main+0x294>)
 80004f0:	801a      	strh	r2, [r3, #0]
  ptotalAng = firstAng = pAngle;
 80004f2:	4b7c      	ldr	r3, [pc, #496]	@ (80006e4 <main+0x294>)
 80004f4:	881a      	ldrh	r2, [r3, #0]
 80004f6:	4b7c      	ldr	r3, [pc, #496]	@ (80006e8 <main+0x298>)
 80004f8:	801a      	strh	r2, [r3, #0]
 80004fa:	4b7b      	ldr	r3, [pc, #492]	@ (80006e8 <main+0x298>)
 80004fc:	881b      	ldrh	r3, [r3, #0]
 80004fe:	001a      	movs	r2, r3
 8000500:	4b7a      	ldr	r3, [pc, #488]	@ (80006ec <main+0x29c>)
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	e01a      	b.n	800053c <main+0xec>
		  if(readCounter() - Ltika_pcounter > 100000){
 8000506:	f7ff ff75 	bl	80003f4 <readCounter>
 800050a:	68ba      	ldr	r2, [r7, #8]
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	1a80      	subs	r0, r0, r2
 8000510:	4199      	sbcs	r1, r3
 8000512:	0002      	movs	r2, r0
 8000514:	000b      	movs	r3, r1
 8000516:	2b00      	cmp	r3, #0
 8000518:	d103      	bne.n	8000522 <main+0xd2>
 800051a:	d1f4      	bne.n	8000506 <main+0xb6>
 800051c:	4974      	ldr	r1, [pc, #464]	@ (80006f0 <main+0x2a0>)
 800051e:	428a      	cmp	r2, r1
 8000520:	d9f1      	bls.n	8000506 <main+0xb6>
		  	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000522:	23a0      	movs	r3, #160	@ 0xa0
 8000524:	05db      	lsls	r3, r3, #23
 8000526:	2110      	movs	r1, #16
 8000528:	0018      	movs	r0, r3
 800052a:	f001 fb47 	bl	8001bbc <HAL_GPIO_TogglePin>
	    	Ltika_pcounter = readCounter();
 800052e:	f7ff ff61 	bl	80003f4 <readCounter>
 8000532:	0002      	movs	r2, r0
 8000534:	000b      	movs	r3, r1
 8000536:	60ba      	str	r2, [r7, #8]
 8000538:	60fb      	str	r3, [r7, #12]
		  if(readCounter() - Ltika_pcounter > 100000){
 800053a:	e7e4      	b.n	8000506 <main+0xb6>

  while (1)
  {
	u_counter = readCounter();
 800053c:	f7ff ff5a 	bl	80003f4 <readCounter>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	496b      	ldr	r1, [pc, #428]	@ (80006f4 <main+0x2a4>)
 8000546:	600a      	str	r2, [r1, #0]
 8000548:	604b      	str	r3, [r1, #4]

	HAL_I2C_Master_Transmit(&hi2c1, AS5600_ADDR, &ANGLE_ADDR, 1, 10);
 800054a:	1d3a      	adds	r2, r7, #4
 800054c:	1dbb      	adds	r3, r7, #6
 800054e:	8819      	ldrh	r1, [r3, #0]
 8000550:	4862      	ldr	r0, [pc, #392]	@ (80006dc <main+0x28c>)
 8000552:	230a      	movs	r3, #10
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2301      	movs	r3, #1
 8000558:	f001 fbf2 	bl	8001d40 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, AS5600_ADDR, rxBufA, 2, 10);
 800055c:	4a60      	ldr	r2, [pc, #384]	@ (80006e0 <main+0x290>)
 800055e:	1dbb      	adds	r3, r7, #6
 8000560:	8819      	ldrh	r1, [r3, #0]
 8000562:	485e      	ldr	r0, [pc, #376]	@ (80006dc <main+0x28c>)
 8000564:	230a      	movs	r3, #10
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2302      	movs	r3, #2
 800056a:	f001 fd13 	bl	8001f94 <HAL_I2C_Master_Receive>

	dtime = readCounter() - d_pcounter;
 800056e:	f7ff ff41 	bl	80003f4 <readCounter>
 8000572:	0002      	movs	r2, r0
 8000574:	000b      	movs	r3, r1
 8000576:	b291      	uxth	r1, r2
 8000578:	693a      	ldr	r2, [r7, #16]
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	1c13      	adds	r3, r2, #0
 800057e:	b29b      	uxth	r3, r3
 8000580:	1acb      	subs	r3, r1, r3
 8000582:	b29a      	uxth	r2, r3
 8000584:	4b5c      	ldr	r3, [pc, #368]	@ (80006f8 <main+0x2a8>)
 8000586:	801a      	strh	r2, [r3, #0]
	d_pcounter += dtime;
 8000588:	4b5b      	ldr	r3, [pc, #364]	@ (80006f8 <main+0x2a8>)
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	001c      	movs	r4, r3
 800058e:	2300      	movs	r3, #0
 8000590:	001d      	movs	r5, r3
 8000592:	693a      	ldr	r2, [r7, #16]
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	1912      	adds	r2, r2, r4
 8000598:	416b      	adcs	r3, r5
 800059a:	613a      	str	r2, [r7, #16]
 800059c:	617b      	str	r3, [r7, #20]

	Angle = rxBufA[0]*256 + rxBufA[1];
 800059e:	4b50      	ldr	r3, [pc, #320]	@ (80006e0 <main+0x290>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	021b      	lsls	r3, r3, #8
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	4a4e      	ldr	r2, [pc, #312]	@ (80006e0 <main+0x290>)
 80005a8:	7852      	ldrb	r2, [r2, #1]
 80005aa:	189b      	adds	r3, r3, r2
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	4b53      	ldr	r3, [pc, #332]	@ (80006fc <main+0x2ac>)
 80005b0:	801a      	strh	r2, [r3, #0]

	if(Angle-pAngle>0 && abs(Angle-pAngle)<3000){
 80005b2:	4b52      	ldr	r3, [pc, #328]	@ (80006fc <main+0x2ac>)
 80005b4:	881b      	ldrh	r3, [r3, #0]
 80005b6:	001a      	movs	r2, r3
 80005b8:	4b4a      	ldr	r3, [pc, #296]	@ (80006e4 <main+0x294>)
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dd1d      	ble.n	80005fe <main+0x1ae>
 80005c2:	4b4e      	ldr	r3, [pc, #312]	@ (80006fc <main+0x2ac>)
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	001a      	movs	r2, r3
 80005c8:	4b46      	ldr	r3, [pc, #280]	@ (80006e4 <main+0x294>)
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	4a4c      	ldr	r2, [pc, #304]	@ (8000700 <main+0x2b0>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	db14      	blt.n	80005fe <main+0x1ae>
 80005d4:	4b49      	ldr	r3, [pc, #292]	@ (80006fc <main+0x2ac>)
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	001a      	movs	r2, r3
 80005da:	4b42      	ldr	r3, [pc, #264]	@ (80006e4 <main+0x294>)
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	4a48      	ldr	r2, [pc, #288]	@ (8000704 <main+0x2b4>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	dc0b      	bgt.n	80005fe <main+0x1ae>
		totalAng = ptotalAng + (Angle-pAngle);
 80005e6:	4b45      	ldr	r3, [pc, #276]	@ (80006fc <main+0x2ac>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	001a      	movs	r2, r3
 80005ec:	4b3d      	ldr	r3, [pc, #244]	@ (80006e4 <main+0x294>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	1ad2      	subs	r2, r2, r3
 80005f2:	4b3e      	ldr	r3, [pc, #248]	@ (80006ec <main+0x29c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	18d2      	adds	r2, r2, r3
 80005f8:	4b43      	ldr	r3, [pc, #268]	@ (8000708 <main+0x2b8>)
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	e08e      	b.n	800071c <main+0x2cc>
	}else if(Angle-pAngle<0 && abs(Angle-pAngle)<3000){
 80005fe:	4b3f      	ldr	r3, [pc, #252]	@ (80006fc <main+0x2ac>)
 8000600:	881b      	ldrh	r3, [r3, #0]
 8000602:	001a      	movs	r2, r3
 8000604:	4b37      	ldr	r3, [pc, #220]	@ (80006e4 <main+0x294>)
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	d51d      	bpl.n	8000648 <main+0x1f8>
 800060c:	4b3b      	ldr	r3, [pc, #236]	@ (80006fc <main+0x2ac>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	001a      	movs	r2, r3
 8000612:	4b34      	ldr	r3, [pc, #208]	@ (80006e4 <main+0x294>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	4a39      	ldr	r2, [pc, #228]	@ (8000700 <main+0x2b0>)
 800061a:	4293      	cmp	r3, r2
 800061c:	db14      	blt.n	8000648 <main+0x1f8>
 800061e:	4b37      	ldr	r3, [pc, #220]	@ (80006fc <main+0x2ac>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	001a      	movs	r2, r3
 8000624:	4b2f      	ldr	r3, [pc, #188]	@ (80006e4 <main+0x294>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	4a36      	ldr	r2, [pc, #216]	@ (8000704 <main+0x2b4>)
 800062c:	4293      	cmp	r3, r2
 800062e:	dc0b      	bgt.n	8000648 <main+0x1f8>
		totalAng = ptotalAng + (Angle-pAngle);
 8000630:	4b32      	ldr	r3, [pc, #200]	@ (80006fc <main+0x2ac>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	001a      	movs	r2, r3
 8000636:	4b2b      	ldr	r3, [pc, #172]	@ (80006e4 <main+0x294>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	1ad2      	subs	r2, r2, r3
 800063c:	4b2b      	ldr	r3, [pc, #172]	@ (80006ec <main+0x29c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	18d2      	adds	r2, r2, r3
 8000642:	4b31      	ldr	r3, [pc, #196]	@ (8000708 <main+0x2b8>)
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	e069      	b.n	800071c <main+0x2cc>
	}else if(Angle-pAngle>0 && abs(Angle-pAngle)>3000){
 8000648:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <main+0x2ac>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	001a      	movs	r2, r3
 800064e:	4b25      	ldr	r3, [pc, #148]	@ (80006e4 <main+0x294>)
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	2b00      	cmp	r3, #0
 8000656:	dd19      	ble.n	800068c <main+0x23c>
 8000658:	4b28      	ldr	r3, [pc, #160]	@ (80006fc <main+0x2ac>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	001a      	movs	r2, r3
 800065e:	4b21      	ldr	r3, [pc, #132]	@ (80006e4 <main+0x294>)
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	17da      	asrs	r2, r3, #31
 8000666:	189b      	adds	r3, r3, r2
 8000668:	4053      	eors	r3, r2
 800066a:	4a28      	ldr	r2, [pc, #160]	@ (800070c <main+0x2bc>)
 800066c:	4293      	cmp	r3, r2
 800066e:	dd0d      	ble.n	800068c <main+0x23c>
		totalAng = ptotalAng - ((4095-Angle)+pAngle);
 8000670:	4b1e      	ldr	r3, [pc, #120]	@ (80006ec <main+0x29c>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	4b21      	ldr	r3, [pc, #132]	@ (80006fc <main+0x2ac>)
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	0019      	movs	r1, r3
 800067a:	4b25      	ldr	r3, [pc, #148]	@ (8000710 <main+0x2c0>)
 800067c:	1a5b      	subs	r3, r3, r1
 800067e:	4919      	ldr	r1, [pc, #100]	@ (80006e4 <main+0x294>)
 8000680:	8809      	ldrh	r1, [r1, #0]
 8000682:	185b      	adds	r3, r3, r1
 8000684:	1ad2      	subs	r2, r2, r3
 8000686:	4b20      	ldr	r3, [pc, #128]	@ (8000708 <main+0x2b8>)
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	e047      	b.n	800071c <main+0x2cc>
	}else if(Angle-pAngle<0 && abs(Angle-pAngle)>3000){
 800068c:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <main+0x2ac>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	001a      	movs	r2, r3
 8000692:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <main+0x294>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	1ad3      	subs	r3, r2, r3
 8000698:	d53c      	bpl.n	8000714 <main+0x2c4>
 800069a:	4b18      	ldr	r3, [pc, #96]	@ (80006fc <main+0x2ac>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	001a      	movs	r2, r3
 80006a0:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <main+0x294>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	17da      	asrs	r2, r3, #31
 80006a8:	189b      	adds	r3, r3, r2
 80006aa:	4053      	eors	r3, r2
 80006ac:	4a17      	ldr	r2, [pc, #92]	@ (800070c <main+0x2bc>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	dd30      	ble.n	8000714 <main+0x2c4>
		totalAng = ptotalAng + Angle + (4095-pAngle);
 80006b2:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <main+0x2ac>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	001a      	movs	r2, r3
 80006b8:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <main+0x29c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	18d2      	adds	r2, r2, r3
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <main+0x294>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	0019      	movs	r1, r3
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <main+0x2c0>)
 80006c6:	1a5b      	subs	r3, r3, r1
 80006c8:	18d2      	adds	r2, r2, r3
 80006ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <main+0x2b8>)
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	e025      	b.n	800071c <main+0x2cc>
 80006d0:	20000100 	.word	0x20000100
 80006d4:	20000000 	.word	0x20000000
 80006d8:	2000014c 	.word	0x2000014c
 80006dc:	200000ac 	.word	0x200000ac
 80006e0:	2000023c 	.word	0x2000023c
 80006e4:	20000258 	.word	0x20000258
 80006e8:	20000254 	.word	0x20000254
 80006ec:	20000250 	.word	0x20000250
 80006f0:	000186a0 	.word	0x000186a0
 80006f4:	20000260 	.word	0x20000260
 80006f8:	20000268 	.word	0x20000268
 80006fc:	20000256 	.word	0x20000256
 8000700:	fffff449 	.word	0xfffff449
 8000704:	00000bb7 	.word	0x00000bb7
 8000708:	2000024c 	.word	0x2000024c
 800070c:	00000bb8 	.word	0x00000bb8
 8000710:	00000fff 	.word	0x00000fff
	}else{
		totalAng = ptotalAng;
 8000714:	4b48      	ldr	r3, [pc, #288]	@ (8000838 <main+0x3e8>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b48      	ldr	r3, [pc, #288]	@ (800083c <main+0x3ec>)
 800071a:	601a      	str	r2, [r3, #0]
	}

	ptotalAng = totalAng;
 800071c:	4b47      	ldr	r3, [pc, #284]	@ (800083c <main+0x3ec>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b45      	ldr	r3, [pc, #276]	@ (8000838 <main+0x3e8>)
 8000722:	601a      	str	r2, [r3, #0]
	pAngle = Angle;
 8000724:	4b46      	ldr	r3, [pc, #280]	@ (8000840 <main+0x3f0>)
 8000726:	881a      	ldrh	r2, [r3, #0]
 8000728:	4b46      	ldr	r3, [pc, #280]	@ (8000844 <main+0x3f4>)
 800072a:	801a      	strh	r2, [r3, #0]

	position = (totalAng - firstAng)*1000/25129;
 800072c:	4b43      	ldr	r3, [pc, #268]	@ (800083c <main+0x3ec>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a45      	ldr	r2, [pc, #276]	@ (8000848 <main+0x3f8>)
 8000732:	8812      	ldrh	r2, [r2, #0]
 8000734:	1a9a      	subs	r2, r3, r2
 8000736:	0013      	movs	r3, r2
 8000738:	015b      	lsls	r3, r3, #5
 800073a:	1a9b      	subs	r3, r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	189b      	adds	r3, r3, r2
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	4942      	ldr	r1, [pc, #264]	@ (800084c <main+0x3fc>)
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff fd69 	bl	800021c <__divsi3>
 800074a:	0003      	movs	r3, r0
 800074c:	b21a      	sxth	r2, r3
 800074e:	4b40      	ldr	r3, [pc, #256]	@ (8000850 <main+0x400>)
 8000750:	801a      	strh	r2, [r3, #0]


	readBuf(&huart2, rxBufB, 128, &rx_check, ID, &p_wrtptB, &p_rdptB, &stop_counter, &error_counter);
 8000752:	4a40      	ldr	r2, [pc, #256]	@ (8000854 <main+0x404>)
 8000754:	4940      	ldr	r1, [pc, #256]	@ (8000858 <main+0x408>)
 8000756:	4841      	ldr	r0, [pc, #260]	@ (800085c <main+0x40c>)
 8000758:	4b41      	ldr	r3, [pc, #260]	@ (8000860 <main+0x410>)
 800075a:	9304      	str	r3, [sp, #16]
 800075c:	4b41      	ldr	r3, [pc, #260]	@ (8000864 <main+0x414>)
 800075e:	9303      	str	r3, [sp, #12]
 8000760:	4b41      	ldr	r3, [pc, #260]	@ (8000868 <main+0x418>)
 8000762:	9302      	str	r3, [sp, #8]
 8000764:	4b41      	ldr	r3, [pc, #260]	@ (800086c <main+0x41c>)
 8000766:	9301      	str	r3, [sp, #4]
 8000768:	1d7b      	adds	r3, r7, #5
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	0013      	movs	r3, r2
 8000770:	2280      	movs	r2, #128	@ 0x80
 8000772:	f000 fa15 	bl	8000ba0 <readBuf>

	if(rx_check == 1){
 8000776:	4b37      	ldr	r3, [pc, #220]	@ (8000854 <main+0x404>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d10c      	bne.n	8000798 <main+0x348>
		buf_pcounter = readCounter();
 800077e:	f7ff fe39 	bl	80003f4 <readCounter>
 8000782:	0002      	movs	r2, r0
 8000784:	000b      	movs	r3, r1
 8000786:	493a      	ldr	r1, [pc, #232]	@ (8000870 <main+0x420>)
 8000788:	600a      	str	r2, [r1, #0]
 800078a:	604b      	str	r3, [r1, #4]
		rx_check = 0;
 800078c:	4b31      	ldr	r3, [pc, #196]	@ (8000854 <main+0x404>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
		tx_check = 0;
 8000792:	4b38      	ldr	r3, [pc, #224]	@ (8000874 <main+0x424>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
	}else{}

	if((readCounter() - buf_pcounter) > 500 && tx_check == 0){
 8000798:	f7ff fe2c 	bl	80003f4 <readCounter>
 800079c:	4b34      	ldr	r3, [pc, #208]	@ (8000870 <main+0x420>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	1a80      	subs	r0, r0, r2
 80007a4:	4199      	sbcs	r1, r3
 80007a6:	0002      	movs	r2, r0
 80007a8:	000b      	movs	r3, r1
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d105      	bne.n	80007ba <main+0x36a>
 80007ae:	d000      	beq.n	80007b2 <main+0x362>
 80007b0:	e6c4      	b.n	800053c <main+0xec>
 80007b2:	21fa      	movs	r1, #250	@ 0xfa
 80007b4:	0049      	lsls	r1, r1, #1
 80007b6:	428a      	cmp	r2, r1
 80007b8:	d93c      	bls.n	8000834 <main+0x3e4>
 80007ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000874 <main+0x424>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d000      	beq.n	80007c4 <main+0x374>
 80007c2:	e6bb      	b.n	800053c <main+0xec>
		send_position = position + 20000;
 80007c4:	4b22      	ldr	r3, [pc, #136]	@ (8000850 <main+0x400>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	5e9b      	ldrsh	r3, [r3, r2]
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	4a2a      	ldr	r2, [pc, #168]	@ (8000878 <main+0x428>)
 80007ce:	4694      	mov	ip, r2
 80007d0:	4463      	add	r3, ip
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	4b29      	ldr	r3, [pc, #164]	@ (800087c <main+0x42c>)
 80007d6:	801a      	strh	r2, [r3, #0]
		send_array[0] = 248+ID;
 80007d8:	1d7b      	adds	r3, r7, #5
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	3b08      	subs	r3, #8
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b27      	ldr	r3, [pc, #156]	@ (8000880 <main+0x430>)
 80007e2:	701a      	strb	r2, [r3, #0]
		send_array[1] = send_position % 200;
 80007e4:	4b25      	ldr	r3, [pc, #148]	@ (800087c <main+0x42c>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	21c8      	movs	r1, #200	@ 0xc8
 80007ea:	0018      	movs	r0, r3
 80007ec:	f7ff fd12 	bl	8000214 <__aeabi_uidivmod>
 80007f0:	000b      	movs	r3, r1
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <main+0x430>)
 80007f8:	705a      	strb	r2, [r3, #1]
		send_array[2] = send_position / 200;
 80007fa:	4b20      	ldr	r3, [pc, #128]	@ (800087c <main+0x42c>)
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	21c8      	movs	r1, #200	@ 0xc8
 8000800:	0018      	movs	r0, r3
 8000802:	f7ff fc81 	bl	8000108 <__udivsi3>
 8000806:	0003      	movs	r3, r0
 8000808:	b29b      	uxth	r3, r3
 800080a:	b2da      	uxtb	r2, r3
 800080c:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <main+0x430>)
 800080e:	709a      	strb	r2, [r3, #2]

		if(HAL_UART_Transmit(&huart2, send_array, 3, 1) == HAL_OK){
 8000810:	491b      	ldr	r1, [pc, #108]	@ (8000880 <main+0x430>)
 8000812:	4812      	ldr	r0, [pc, #72]	@ (800085c <main+0x40c>)
 8000814:	2301      	movs	r3, #1
 8000816:	2203      	movs	r2, #3
 8000818:	f003 f91a 	bl	8003a50 <HAL_UART_Transmit>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d000      	beq.n	8000822 <main+0x3d2>
 8000820:	e68c      	b.n	800053c <main+0xec>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000822:	23a0      	movs	r3, #160	@ 0xa0
 8000824:	05db      	lsls	r3, r3, #23
 8000826:	2110      	movs	r1, #16
 8000828:	0018      	movs	r0, r3
 800082a:	f001 f9c7 	bl	8001bbc <HAL_GPIO_TogglePin>
		tx_check = 1;
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <main+0x424>)
 8000830:	2201      	movs	r2, #1
 8000832:	701a      	strb	r2, [r3, #0]
	u_counter = readCounter();
 8000834:	e682      	b.n	800053c <main+0xec>
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	20000250 	.word	0x20000250
 800083c:	2000024c 	.word	0x2000024c
 8000840:	20000256 	.word	0x20000256
 8000844:	20000258 	.word	0x20000258
 8000848:	20000254 	.word	0x20000254
 800084c:	00006229 	.word	0x00006229
 8000850:	2000025a 	.word	0x2000025a
 8000854:	20000245 	.word	0x20000245
 8000858:	20000000 	.word	0x20000000
 800085c:	2000014c 	.word	0x2000014c
 8000860:	20000248 	.word	0x20000248
 8000864:	20000246 	.word	0x20000246
 8000868:	20000244 	.word	0x20000244
 800086c:	20000243 	.word	0x20000243
 8000870:	20000270 	.word	0x20000270
 8000874:	20000080 	.word	0x20000080
 8000878:	00004e20 	.word	0x00004e20
 800087c:	20000082 	.word	0x20000082
 8000880:	20000240 	.word	0x20000240

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b08d      	sub	sp, #52	@ 0x34
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	2414      	movs	r4, #20
 800088c:	193b      	adds	r3, r7, r4
 800088e:	0018      	movs	r0, r3
 8000890:	231c      	movs	r3, #28
 8000892:	001a      	movs	r2, r3
 8000894:	2100      	movs	r1, #0
 8000896:	f003 ff8d 	bl	80047b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089a:	003b      	movs	r3, r7
 800089c:	0018      	movs	r0, r3
 800089e:	2314      	movs	r3, #20
 80008a0:	001a      	movs	r2, r3
 80008a2:	2100      	movs	r1, #0
 80008a4:	f003 ff86 	bl	80047b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	2202      	movs	r2, #2
 80008ac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	2280      	movs	r2, #128	@ 0x80
 80008b2:	0052      	lsls	r2, r2, #1
 80008b4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	2240      	movs	r2, #64	@ 0x40
 80008c0:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	0018      	movs	r0, r3
 80008c6:	f001 ffd9 	bl	800287c <HAL_RCC_OscConfig>
 80008ca:	1e03      	subs	r3, r0, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80008ce:	f000 fa90 	bl	8000df2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d2:	003b      	movs	r3, r7
 80008d4:	2207      	movs	r2, #7
 80008d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008d8:	003b      	movs	r3, r7
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008de:	003b      	movs	r3, r7
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008e4:	003b      	movs	r3, r7
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008ea:	003b      	movs	r3, r7
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008f0:	003b      	movs	r3, r7
 80008f2:	2101      	movs	r1, #1
 80008f4:	0018      	movs	r0, r3
 80008f6:	f002 f9a5 	bl	8002c44 <HAL_RCC_ClockConfig>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80008fe:	f000 fa78 	bl	8000df2 <Error_Handler>
  }
}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b00d      	add	sp, #52	@ 0x34
 8000908:	bd90      	pop	{r4, r7, pc}
	...

0800090c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000910:	4b1b      	ldr	r3, [pc, #108]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000912:	4a1c      	ldr	r2, [pc, #112]	@ (8000984 <MX_I2C1_Init+0x78>)
 8000914:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0090194B;
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000918:	4a1b      	ldr	r2, [pc, #108]	@ (8000988 <MX_I2C1_Init+0x7c>)
 800091a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800091c:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <MX_I2C1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000922:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000924:	2201      	movs	r2, #1
 8000926:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000928:	4b15      	ldr	r3, [pc, #84]	@ (8000980 <MX_I2C1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800092e:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000934:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093a:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <MX_I2C1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000940:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000946:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000948:	0018      	movs	r0, r3
 800094a:	f001 f953 	bl	8001bf4 <HAL_I2C_Init>
 800094e:	1e03      	subs	r3, r0, #0
 8000950:	d001      	beq.n	8000956 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000952:	f000 fa4e 	bl	8000df2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000956:	4b0a      	ldr	r3, [pc, #40]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000958:	2100      	movs	r1, #0
 800095a:	0018      	movs	r0, r3
 800095c:	f001 fef6 	bl	800274c <HAL_I2CEx_ConfigAnalogFilter>
 8000960:	1e03      	subs	r3, r0, #0
 8000962:	d001      	beq.n	8000968 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000964:	f000 fa45 	bl	8000df2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000968:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <MX_I2C1_Init+0x74>)
 800096a:	2100      	movs	r1, #0
 800096c:	0018      	movs	r0, r3
 800096e:	f001 ff39 	bl	80027e4 <HAL_I2CEx_ConfigDigitalFilter>
 8000972:	1e03      	subs	r3, r0, #0
 8000974:	d001      	beq.n	800097a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000976:	f000 fa3c 	bl	8000df2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800097a:	46c0      	nop			@ (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200000ac 	.word	0x200000ac
 8000984:	40005400 	.word	0x40005400
 8000988:	0090194b 	.word	0x0090194b

0800098c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000992:	2310      	movs	r3, #16
 8000994:	18fb      	adds	r3, r7, r3
 8000996:	0018      	movs	r0, r3
 8000998:	2310      	movs	r3, #16
 800099a:	001a      	movs	r2, r3
 800099c:	2100      	movs	r1, #0
 800099e:	f003 ff09 	bl	80047b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	0018      	movs	r0, r3
 80009a6:	230c      	movs	r3, #12
 80009a8:	001a      	movs	r2, r3
 80009aa:	2100      	movs	r1, #0
 80009ac:	f003 ff02 	bl	80047b4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <MX_TIM3_Init+0xa0>)
 80009b2:	4a1f      	ldr	r2, [pc, #124]	@ (8000a30 <MX_TIM3_Init+0xa4>)
 80009b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 80009b6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a2c <MX_TIM3_Init+0xa0>)
 80009b8:	222f      	movs	r2, #47	@ 0x2f
 80009ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <MX_TIM3_Init+0xa0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <MX_TIM3_Init+0xa0>)
 80009c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a34 <MX_TIM3_Init+0xa8>)
 80009c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c8:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <MX_TIM3_Init+0xa0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ce:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <MX_TIM3_Init+0xa0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009d4:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <MX_TIM3_Init+0xa0>)
 80009d6:	0018      	movs	r0, r3
 80009d8:	f002 fbb0 	bl	800313c <HAL_TIM_Base_Init>
 80009dc:	1e03      	subs	r3, r0, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80009e0:	f000 fa07 	bl	8000df2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e4:	2110      	movs	r1, #16
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2280      	movs	r2, #128	@ 0x80
 80009ea:	0152      	lsls	r2, r2, #5
 80009ec:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009ee:	187a      	adds	r2, r7, r1
 80009f0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <MX_TIM3_Init+0xa0>)
 80009f2:	0011      	movs	r1, r2
 80009f4:	0018      	movs	r0, r3
 80009f6:	f002 fd4f 	bl	8003498 <HAL_TIM_ConfigClockSource>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80009fe:	f000 f9f8 	bl	8000df2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a0e:	1d3a      	adds	r2, r7, #4
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <MX_TIM3_Init+0xa0>)
 8000a12:	0011      	movs	r1, r2
 8000a14:	0018      	movs	r0, r3
 8000a16:	f002 ff4b 	bl	80038b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1a:	1e03      	subs	r3, r0, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000a1e:	f000 f9e8 	bl	8000df2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b008      	add	sp, #32
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			@ (mov r8, r8)
 8000a2c:	20000100 	.word	0x20000100
 8000a30:	40000400 	.word	0x40000400
 8000a34:	0000ffff 	.word	0x0000ffff

08000a38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a3c:	4b16      	ldr	r3, [pc, #88]	@ (8000a98 <MX_USART2_UART_Init+0x60>)
 8000a3e:	4a17      	ldr	r2, [pc, #92]	@ (8000a9c <MX_USART2_UART_Init+0x64>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a42:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <MX_USART2_UART_Init+0x60>)
 8000a44:	22e1      	movs	r2, #225	@ 0xe1
 8000a46:	0252      	lsls	r2, r2, #9
 8000a48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	@ (8000a98 <MX_USART2_UART_Init+0x60>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <MX_USART2_UART_Init+0x60>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b10      	ldr	r3, [pc, #64]	@ (8000a98 <MX_USART2_UART_Init+0x60>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <MX_USART2_UART_Init+0x60>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <MX_USART2_UART_Init+0x60>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <MX_USART2_UART_Init+0x60>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a98 <MX_USART2_UART_Init+0x60>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a74:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <MX_USART2_UART_Init+0x60>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a7a:	4b07      	ldr	r3, [pc, #28]	@ (8000a98 <MX_USART2_UART_Init+0x60>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a80:	4b05      	ldr	r3, [pc, #20]	@ (8000a98 <MX_USART2_UART_Init+0x60>)
 8000a82:	0018      	movs	r0, r3
 8000a84:	f002 ff8e 	bl	80039a4 <HAL_UART_Init>
 8000a88:	1e03      	subs	r3, r0, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a8c:	f000 f9b1 	bl	8000df2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a90:	46c0      	nop			@ (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	2000014c 	.word	0x2000014c
 8000a9c:	40004400 	.word	0x40004400

08000aa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <MX_DMA_Init+0x38>)
 8000aa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad8 <MX_DMA_Init+0x38>)
 8000aac:	2101      	movs	r1, #1
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ab2:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <MX_DMA_Init+0x38>)
 8000ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4013      	ands	r3, r2
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2009      	movs	r0, #9
 8000ac4:	f000 fc50 	bl	8001368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ac8:	2009      	movs	r0, #9
 8000aca:	f000 fc62 	bl	8001392 <HAL_NVIC_EnableIRQ>

}
 8000ace:	46c0      	nop			@ (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	40021000 	.word	0x40021000

08000adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b089      	sub	sp, #36	@ 0x24
 8000ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	240c      	movs	r4, #12
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	2314      	movs	r3, #20
 8000aea:	001a      	movs	r2, r3
 8000aec:	2100      	movs	r1, #0
 8000aee:	f003 fe61 	bl	80047b4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b9c <MX_GPIO_Init+0xc0>)
 8000af4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000af6:	4b29      	ldr	r3, [pc, #164]	@ (8000b9c <MX_GPIO_Init+0xc0>)
 8000af8:	2102      	movs	r1, #2
 8000afa:	430a      	orrs	r2, r1
 8000afc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000afe:	4b27      	ldr	r3, [pc, #156]	@ (8000b9c <MX_GPIO_Init+0xc0>)
 8000b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b02:	2202      	movs	r2, #2
 8000b04:	4013      	ands	r3, r2
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0a:	4b24      	ldr	r3, [pc, #144]	@ (8000b9c <MX_GPIO_Init+0xc0>)
 8000b0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b0e:	4b23      	ldr	r3, [pc, #140]	@ (8000b9c <MX_GPIO_Init+0xc0>)
 8000b10:	2104      	movs	r1, #4
 8000b12:	430a      	orrs	r2, r1
 8000b14:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b16:	4b21      	ldr	r3, [pc, #132]	@ (8000b9c <MX_GPIO_Init+0xc0>)
 8000b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b1e      	ldr	r3, [pc, #120]	@ (8000b9c <MX_GPIO_Init+0xc0>)
 8000b24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b26:	4b1d      	ldr	r3, [pc, #116]	@ (8000b9c <MX_GPIO_Init+0xc0>)
 8000b28:	2101      	movs	r1, #1
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b9c <MX_GPIO_Init+0xc0>)
 8000b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b32:	2201      	movs	r2, #1
 8000b34:	4013      	ands	r3, r2
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b3a:	23a0      	movs	r3, #160	@ 0xa0
 8000b3c:	05db      	lsls	r3, r3, #23
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2110      	movs	r1, #16
 8000b42:	0018      	movs	r0, r3
 8000b44:	f001 f81d 	bl	8001b82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	2210      	movs	r2, #16
 8000b4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	193b      	adds	r3, r7, r4
 8000b50:	2201      	movs	r2, #1
 8000b52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b60:	193a      	adds	r2, r7, r4
 8000b62:	23a0      	movs	r3, #160	@ 0xa0
 8000b64:	05db      	lsls	r3, r3, #23
 8000b66:	0011      	movs	r1, r2
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f000 fe83 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin SW4_Pin
                           SW5_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin
 8000b6e:	0021      	movs	r1, r4
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	229e      	movs	r2, #158	@ 0x9e
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	601a      	str	r2, [r3, #0]
                          |SW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	187a      	adds	r2, r7, r1
 8000b86:	23a0      	movs	r3, #160	@ 0xa0
 8000b88:	05db      	lsls	r3, r3, #23
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f000 fe71 	bl	8001874 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b009      	add	sp, #36	@ 0x24
 8000b98:	bd90      	pop	{r4, r7, pc}
 8000b9a:	46c0      	nop			@ (mov r8, r8)
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <readBuf>:

/* USER CODE BEGIN 4 */
void readBuf(UART_HandleTypeDef* uart, uint8_t* buf, int buf_size, uint8_t* data, uint8_t id, uint8_t* p_wrtpt, uint8_t* p_rdpt, uint16_t* stop_counter, uint16_t* error_counter){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
 8000bac:	603b      	str	r3, [r7, #0]
	int wrt_pt = uart->hdmarx->Instance->CNDTR;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	2280      	movs	r2, #128	@ 0x80
 8000bb2:	589b      	ldr	r3, [r3, r2]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	613b      	str	r3, [r7, #16]
	wrt_pt= buf_size - wrt_pt;
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	613b      	str	r3, [r7, #16]
	int rd_pt;

	if(wrt_pt != *p_rdpt){//wrtに追い付かれてない
 8000bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	001a      	movs	r2, r3
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d02f      	beq.n	8000c2e <readBuf+0x8e>
		if(buf[*p_rdpt] == 255){//p_rdptが書き換えられてない=追い越されてない
 8000bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	001a      	movs	r2, r3
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	189b      	adds	r3, r3, r2
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2bff      	cmp	r3, #255	@ 0xff
 8000bdc:	d116      	bne.n	8000c0c <readBuf+0x6c>
			if(wrt_pt != *p_wrtpt){//wrt_ptが進んだ=受信した
 8000bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	001a      	movs	r2, r3
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d006      	beq.n	8000bf8 <readBuf+0x58>
//正常
				*stop_counter = 0;
 8000bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bec:	2200      	movs	r2, #0
 8000bee:	801a      	strh	r2, [r3, #0]
				rd_pt = *p_rdpt;
 8000bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	61fb      	str	r3, [r7, #28]
 8000bf6:	e045      	b.n	8000c84 <readBuf+0xe4>
			}else{//wrt_ptが進んでない=受信してない
//受信してない
				(*stop_counter)++;
 8000bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c02:	801a      	strh	r2, [r3, #0]
				rd_pt = *p_rdpt;
 8000c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	61fb      	str	r3, [r7, #28]
 8000c0a:	e03b      	b.n	8000c84 <readBuf+0xe4>
			}
		}else{//p_rdptが書き換えられた=追い越された
//追い越された
			(*error_counter)++;
 8000c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c16:	801a      	strh	r2, [r3, #0]
			rd_pt = wrt_pt - 20;
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	3b14      	subs	r3, #20
 8000c1c:	61fb      	str	r3, [r7, #28]
				if(rd_pt < 0){rd_pt += buf_size;}
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	da2f      	bge.n	8000c84 <readBuf+0xe4>
 8000c24:	69fa      	ldr	r2, [r7, #28]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	18d3      	adds	r3, r2, r3
 8000c2a:	61fb      	str	r3, [r7, #28]
 8000c2c:	e02a      	b.n	8000c84 <readBuf+0xe4>
		}
	}else{//wrtに追い付かれた,追い付いた
		int front_pt = wrt_pt + 1;
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	3301      	adds	r3, #1
 8000c32:	61bb      	str	r3, [r7, #24]
			if(front_pt>buf_size-1){front_pt -= buf_size;}
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	dc03      	bgt.n	8000c44 <readBuf+0xa4>
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	61bb      	str	r3, [r7, #24]

		if(buf[front_pt] == 255){
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	18d3      	adds	r3, r2, r3
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2bff      	cmp	r3, #255	@ 0xff
 8000c4e:	d109      	bne.n	8000c64 <readBuf+0xc4>
//追い付いた
			(*stop_counter)++;
 8000c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	3301      	adds	r3, #1
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c5a:	801a      	strh	r2, [r3, #0]
			rd_pt = *p_rdpt;
 8000c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	61fb      	str	r3, [r7, #28]
 8000c62:	e00f      	b.n	8000c84 <readBuf+0xe4>
		}else{
//追い付かれた
			(*error_counter)++;
 8000c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c6e:	801a      	strh	r2, [r3, #0]
			rd_pt = wrt_pt - 20;
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	3b14      	subs	r3, #20
 8000c74:	61fb      	str	r3, [r7, #28]
				if(rd_pt < 0){rd_pt += buf_size;}
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	da03      	bge.n	8000c84 <readBuf+0xe4>
 8000c7c:	69fa      	ldr	r2, [r7, #28]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	18d3      	adds	r3, r2, r3
 8000c82:	61fb      	str	r3, [r7, #28]
		}
	}

	if(*stop_counter > 65500){*stop_counter = 65500;}
 8000c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	4a30      	ldr	r2, [pc, #192]	@ (8000d4c <readBuf+0x1ac>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d903      	bls.n	8000c96 <readBuf+0xf6>
 8000c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c90:	2224      	movs	r2, #36	@ 0x24
 8000c92:	4252      	negs	r2, r2
 8000c94:	801a      	strh	r2, [r3, #0]
	if(*error_counter > 65500){*error_counter = 65500;}
 8000c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	4a2c      	ldr	r2, [pc, #176]	@ (8000d4c <readBuf+0x1ac>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d903      	bls.n	8000ca8 <readBuf+0x108>
 8000ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ca2:	2224      	movs	r2, #36	@ 0x24
 8000ca4:	4252      	negs	r2, r2
 8000ca6:	801a      	strh	r2, [r3, #0]

//特別
	*data = 0;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
//特別

	while(1){
		int dif_pt = wrt_pt - rd_pt;
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	617b      	str	r3, [r7, #20]
			if(dif_pt < 0){dif_pt += buf_size;}
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	da03      	bge.n	8000cc4 <readBuf+0x124>
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	18d3      	adds	r3, r2, r3
 8000cc2:	617b      	str	r3, [r7, #20]
		if(dif_pt <= 1){break;}
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	dd30      	ble.n	8000d2c <readBuf+0x18c>

		rd_pt++;
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	61fb      	str	r3, [r7, #28]
			if(rd_pt>buf_size-1){rd_pt -= buf_size;}
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	dc03      	bgt.n	8000ce0 <readBuf+0x140>
 8000cd8:	69fa      	ldr	r2, [r7, #28]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	61fb      	str	r3, [r7, #28]
//				if(dif_pt < 0){dif_pt += buf_size;}
//			if(dif_pt >= buf_size/2){}
//			else{break;}
//		}else{buf[rd_pt] = 255;}

		if(buf[rd_pt] == 248+id){
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	18d3      	adds	r3, r2, r3
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	001a      	movs	r2, r3
 8000cea:	2328      	movs	r3, #40	@ 0x28
 8000cec:	18fb      	adds	r3, r7, r3
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	33f8      	adds	r3, #248	@ 0xf8
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d114      	bne.n	8000d20 <readBuf+0x180>
			*data = 1;
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	701a      	strb	r2, [r3, #0]
			buf[rd_pt] = 255;
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	18d3      	adds	r3, r2, r3
 8000d02:	22ff      	movs	r2, #255	@ 0xff
 8000d04:	701a      	strb	r2, [r3, #0]

			dif_pt = wrt_pt - rd_pt;
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	617b      	str	r3, [r7, #20]
				if(dif_pt < 0){dif_pt += buf_size;}
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	da03      	bge.n	8000d1c <readBuf+0x17c>
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	18d3      	adds	r3, r2, r3
 8000d1a:	617b      	str	r3, [r7, #20]
			if(dif_pt >= buf_size/2){}
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	e007      	b.n	8000d30 <readBuf+0x190>
			else{break;}
			break;
		}else{buf[rd_pt] = 255;}
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	18d3      	adds	r3, r2, r3
 8000d26:	22ff      	movs	r2, #255	@ 0xff
 8000d28:	701a      	strb	r2, [r3, #0]
	while(1){
 8000d2a:	e7c0      	b.n	8000cae <readBuf+0x10e>
		if(dif_pt <= 1){break;}
 8000d2c:	46c0      	nop			@ (mov r8, r8)
 8000d2e:	e000      	b.n	8000d32 <readBuf+0x192>
			break;
 8000d30:	46c0      	nop			@ (mov r8, r8)
	}

	*p_rdpt = rd_pt;
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d38:	701a      	strb	r2, [r3, #0]
//	*p_wrtpt = buf_size - (uart->hdmarx->Instance->CNDTR);
	*p_wrtpt = wrt_pt;
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d40:	701a      	strb	r2, [r3, #0]
}
 8000d42:	46c0      	nop			@ (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b008      	add	sp, #32
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	0000ffdc 	.word	0x0000ffdc

08000d50 <readID>:
	int index = uart->hdmarx->Instance->CNDTR;
	index = buf_size - index;
	return index;
}

uint8_t readID(){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
	uint8_t id;
	if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin)==1){id=0;}
 8000d56:	23a0      	movs	r3, #160	@ 0xa0
 8000d58:	05db      	lsls	r3, r3, #23
 8000d5a:	2120      	movs	r1, #32
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f000 fef3 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000d62:	0003      	movs	r3, r0
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d103      	bne.n	8000d70 <readID+0x20>
 8000d68:	1dfb      	adds	r3, r7, #7
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
 8000d6e:	e03a      	b.n	8000de6 <readID+0x96>
	else if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin)==1){id=1;}
 8000d70:	23a0      	movs	r3, #160	@ 0xa0
 8000d72:	05db      	lsls	r3, r3, #23
 8000d74:	2140      	movs	r1, #64	@ 0x40
 8000d76:	0018      	movs	r0, r3
 8000d78:	f000 fee6 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d103      	bne.n	8000d8a <readID+0x3a>
 8000d82:	1dfb      	adds	r3, r7, #7
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	e02d      	b.n	8000de6 <readID+0x96>
	else if(HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin)==1){id=2;}
 8000d8a:	23a0      	movs	r3, #160	@ 0xa0
 8000d8c:	05db      	lsls	r3, r3, #23
 8000d8e:	2180      	movs	r1, #128	@ 0x80
 8000d90:	0018      	movs	r0, r3
 8000d92:	f000 fed9 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000d96:	0003      	movs	r3, r0
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d103      	bne.n	8000da4 <readID+0x54>
 8000d9c:	1dfb      	adds	r3, r7, #7
 8000d9e:	2202      	movs	r2, #2
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	e020      	b.n	8000de6 <readID+0x96>
	else if(HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin)==1){id=3;}
 8000da4:	2380      	movs	r3, #128	@ 0x80
 8000da6:	005a      	lsls	r2, r3, #1
 8000da8:	23a0      	movs	r3, #160	@ 0xa0
 8000daa:	05db      	lsls	r3, r3, #23
 8000dac:	0011      	movs	r1, r2
 8000dae:	0018      	movs	r0, r3
 8000db0:	f000 feca 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000db4:	0003      	movs	r3, r0
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d103      	bne.n	8000dc2 <readID+0x72>
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	701a      	strb	r2, [r3, #0]
 8000dc0:	e011      	b.n	8000de6 <readID+0x96>
	else if(HAL_GPIO_ReadPin(SW5_GPIO_Port, SW5_Pin)==1){id=4;}
 8000dc2:	2380      	movs	r3, #128	@ 0x80
 8000dc4:	011a      	lsls	r2, r3, #4
 8000dc6:	23a0      	movs	r3, #160	@ 0xa0
 8000dc8:	05db      	lsls	r3, r3, #23
 8000dca:	0011      	movs	r1, r2
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f000 febb 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000dd2:	0003      	movs	r3, r0
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d103      	bne.n	8000de0 <readID+0x90>
 8000dd8:	1dfb      	adds	r3, r7, #7
 8000dda:	2204      	movs	r2, #4
 8000ddc:	701a      	strb	r2, [r3, #0]
 8000dde:	e002      	b.n	8000de6 <readID+0x96>
	else{id=5;}
 8000de0:	1dfb      	adds	r3, r7, #7
 8000de2:	2205      	movs	r2, #5
 8000de4:	701a      	strb	r2, [r3, #0]
	return id;
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	781b      	ldrb	r3, [r3, #0]
}
 8000dea:	0018      	movs	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b002      	add	sp, #8
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df6:	b672      	cpsid	i
}
 8000df8:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	e7fd      	b.n	8000dfa <Error_Handler+0x8>
	...

08000e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	4b0f      	ldr	r3, [pc, #60]	@ (8000e44 <HAL_MspInit+0x44>)
 8000e08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e44 <HAL_MspInit+0x44>)
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e12:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <HAL_MspInit+0x44>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e16:	2201      	movs	r2, #1
 8000e18:	4013      	ands	r3, r2
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <HAL_MspInit+0x44>)
 8000e20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e22:	4b08      	ldr	r3, [pc, #32]	@ (8000e44 <HAL_MspInit+0x44>)
 8000e24:	2180      	movs	r1, #128	@ 0x80
 8000e26:	0549      	lsls	r1, r1, #21
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e2c:	4b05      	ldr	r3, [pc, #20]	@ (8000e44 <HAL_MspInit+0x44>)
 8000e2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e30:	2380      	movs	r3, #128	@ 0x80
 8000e32:	055b      	lsls	r3, r3, #21
 8000e34:	4013      	ands	r3, r2
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3a:	46c0      	nop			@ (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b002      	add	sp, #8
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			@ (mov r8, r8)
 8000e44:	40021000 	.word	0x40021000

08000e48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b091      	sub	sp, #68	@ 0x44
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	232c      	movs	r3, #44	@ 0x2c
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	0018      	movs	r0, r3
 8000e56:	2314      	movs	r3, #20
 8000e58:	001a      	movs	r2, r3
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	f003 fcaa 	bl	80047b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e60:	2410      	movs	r4, #16
 8000e62:	193b      	adds	r3, r7, r4
 8000e64:	0018      	movs	r0, r3
 8000e66:	231c      	movs	r3, #28
 8000e68:	001a      	movs	r2, r3
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	f003 fca2 	bl	80047b4 <memset>
  if(hi2c->Instance==I2C1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a22      	ldr	r2, [pc, #136]	@ (8000f00 <HAL_I2C_MspInit+0xb8>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d13d      	bne.n	8000ef6 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e7a:	193b      	adds	r3, r7, r4
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e80:	193b      	adds	r3, r7, r4
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e86:	193b      	adds	r3, r7, r4
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f002 f86b 	bl	8002f64 <HAL_RCCEx_PeriphCLKConfig>
 8000e8e:	1e03      	subs	r3, r0, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e92:	f7ff ffae 	bl	8000df2 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <HAL_I2C_MspInit+0xbc>)
 8000e98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f04 <HAL_I2C_MspInit+0xbc>)
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ea2:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <HAL_I2C_MspInit+0xbc>)
 8000ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000eae:	212c      	movs	r1, #44	@ 0x2c
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	22c0      	movs	r2, #192	@ 0xc0
 8000eb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2212      	movs	r2, #18
 8000eba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	2206      	movs	r2, #6
 8000ecc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f08 <HAL_I2C_MspInit+0xc0>)
 8000ed2:	0019      	movs	r1, r3
 8000ed4:	0010      	movs	r0, r2
 8000ed6:	f000 fccd 	bl	8001874 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eda:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <HAL_I2C_MspInit+0xbc>)
 8000edc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ede:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <HAL_I2C_MspInit+0xbc>)
 8000ee0:	2180      	movs	r1, #128	@ 0x80
 8000ee2:	0389      	lsls	r1, r1, #14
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ee8:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <HAL_I2C_MspInit+0xbc>)
 8000eea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000eec:	2380      	movs	r3, #128	@ 0x80
 8000eee:	039b      	lsls	r3, r3, #14
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ef6:	46c0      	nop			@ (mov r8, r8)
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b011      	add	sp, #68	@ 0x44
 8000efc:	bd90      	pop	{r4, r7, pc}
 8000efe:	46c0      	nop			@ (mov r8, r8)
 8000f00:	40005400 	.word	0x40005400
 8000f04:	40021000 	.word	0x40021000
 8000f08:	50000400 	.word	0x50000400

08000f0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0d      	ldr	r2, [pc, #52]	@ (8000f50 <HAL_TIM_Base_MspInit+0x44>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d113      	bne.n	8000f46 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f54 <HAL_TIM_Base_MspInit+0x48>)
 8000f20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f22:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <HAL_TIM_Base_MspInit+0x48>)
 8000f24:	2102      	movs	r1, #2
 8000f26:	430a      	orrs	r2, r1
 8000f28:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <HAL_TIM_Base_MspInit+0x48>)
 8000f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f2e:	2202      	movs	r2, #2
 8000f30:	4013      	ands	r3, r2
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2010      	movs	r0, #16
 8000f3c:	f000 fa14 	bl	8001368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f40:	2010      	movs	r0, #16
 8000f42:	f000 fa26 	bl	8001392 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b004      	add	sp, #16
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			@ (mov r8, r8)
 8000f50:	40000400 	.word	0x40000400
 8000f54:	40021000 	.word	0x40021000

08000f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b08b      	sub	sp, #44	@ 0x2c
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	2414      	movs	r4, #20
 8000f62:	193b      	adds	r3, r7, r4
 8000f64:	0018      	movs	r0, r3
 8000f66:	2314      	movs	r3, #20
 8000f68:	001a      	movs	r2, r3
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	f003 fc22 	bl	80047b4 <memset>
  if(huart->Instance==USART2)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a30      	ldr	r2, [pc, #192]	@ (8001038 <HAL_UART_MspInit+0xe0>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d15a      	bne.n	8001030 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f7a:	4b30      	ldr	r3, [pc, #192]	@ (800103c <HAL_UART_MspInit+0xe4>)
 8000f7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f7e:	4b2f      	ldr	r3, [pc, #188]	@ (800103c <HAL_UART_MspInit+0xe4>)
 8000f80:	2180      	movs	r1, #128	@ 0x80
 8000f82:	0289      	lsls	r1, r1, #10
 8000f84:	430a      	orrs	r2, r1
 8000f86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f88:	4b2c      	ldr	r3, [pc, #176]	@ (800103c <HAL_UART_MspInit+0xe4>)
 8000f8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f8c:	2380      	movs	r3, #128	@ 0x80
 8000f8e:	029b      	lsls	r3, r3, #10
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b29      	ldr	r3, [pc, #164]	@ (800103c <HAL_UART_MspInit+0xe4>)
 8000f98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f9a:	4b28      	ldr	r3, [pc, #160]	@ (800103c <HAL_UART_MspInit+0xe4>)
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fa2:	4b26      	ldr	r3, [pc, #152]	@ (800103c <HAL_UART_MspInit+0xe4>)
 8000fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fae:	0021      	movs	r1, r4
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	2202      	movs	r2, #2
 8000fba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	2201      	movs	r2, #1
 8000fcc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	187a      	adds	r2, r7, r1
 8000fd0:	23a0      	movs	r3, #160	@ 0xa0
 8000fd2:	05db      	lsls	r3, r3, #23
 8000fd4:	0011      	movs	r1, r2
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f000 fc4c 	bl	8001874 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <HAL_UART_MspInit+0xe8>)
 8000fde:	4a19      	ldr	r2, [pc, #100]	@ (8001044 <HAL_UART_MspInit+0xec>)
 8000fe0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	@ (8001040 <HAL_UART_MspInit+0xe8>)
 8000fe4:	2234      	movs	r2, #52	@ 0x34
 8000fe6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fe8:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <HAL_UART_MspInit+0xe8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fee:	4b14      	ldr	r3, [pc, #80]	@ (8001040 <HAL_UART_MspInit+0xe8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <HAL_UART_MspInit+0xe8>)
 8000ff6:	2280      	movs	r2, #128	@ 0x80
 8000ff8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <HAL_UART_MspInit+0xe8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001000:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <HAL_UART_MspInit+0xe8>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001006:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <HAL_UART_MspInit+0xe8>)
 8001008:	2220      	movs	r2, #32
 800100a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800100c:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <HAL_UART_MspInit+0xe8>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001012:	4b0b      	ldr	r3, [pc, #44]	@ (8001040 <HAL_UART_MspInit+0xe8>)
 8001014:	0018      	movs	r0, r3
 8001016:	f000 f9d9 	bl	80013cc <HAL_DMA_Init>
 800101a:	1e03      	subs	r3, r0, #0
 800101c:	d001      	beq.n	8001022 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800101e:	f7ff fee8 	bl	8000df2 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2180      	movs	r1, #128	@ 0x80
 8001026:	4a06      	ldr	r2, [pc, #24]	@ (8001040 <HAL_UART_MspInit+0xe8>)
 8001028:	505a      	str	r2, [r3, r1]
 800102a:	4b05      	ldr	r3, [pc, #20]	@ (8001040 <HAL_UART_MspInit+0xe8>)
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001030:	46c0      	nop			@ (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	b00b      	add	sp, #44	@ 0x2c
 8001036:	bd90      	pop	{r4, r7, pc}
 8001038:	40004400 	.word	0x40004400
 800103c:	40021000 	.word	0x40021000
 8001040:	200001e0 	.word	0x200001e0
 8001044:	40020008 	.word	0x40020008

08001048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800104c:	46c0      	nop			@ (mov r8, r8)
 800104e:	e7fd      	b.n	800104c <NMI_Handler+0x4>

08001050 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001054:	46c0      	nop			@ (mov r8, r8)
 8001056:	e7fd      	b.n	8001054 <HardFault_Handler+0x4>

08001058 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800105c:	46c0      	nop			@ (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001070:	f000 f8b2 	bl	80011d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001074:	46c0      	nop			@ (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001080:	4b03      	ldr	r3, [pc, #12]	@ (8001090 <DMA1_Channel1_IRQHandler+0x14>)
 8001082:	0018      	movs	r0, r3
 8001084:	f000 fab4 	bl	80015f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001088:	46c0      	nop			@ (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			@ (mov r8, r8)
 8001090:	200001e0 	.word	0x200001e0

08001094 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001098:	4b03      	ldr	r3, [pc, #12]	@ (80010a8 <TIM3_IRQHandler+0x14>)
 800109a:	0018      	movs	r0, r3
 800109c:	f002 f8f4 	bl	8003288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010a0:	46c0      	nop			@ (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	20000100 	.word	0x20000100

080010ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010b0:	4b03      	ldr	r3, [pc, #12]	@ (80010c0 <SystemInit+0x14>)
 80010b2:	2280      	movs	r2, #128	@ 0x80
 80010b4:	0512      	lsls	r2, r2, #20
 80010b6:	609a      	str	r2, [r3, #8]
#endif
}
 80010b8:	46c0      	nop			@ (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			@ (mov r8, r8)
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010c4:	480d      	ldr	r0, [pc, #52]	@ (80010fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010c8:	f7ff fff0 	bl	80010ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010ce:	e003      	b.n	80010d8 <LoopCopyDataInit>

080010d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80010d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010d6:	3104      	adds	r1, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010d8:	480a      	ldr	r0, [pc, #40]	@ (8001104 <LoopForever+0xa>)
  ldr r3, =_edata
 80010da:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <LoopForever+0xe>)
  adds r2, r0, r1
 80010dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010e0:	d3f6      	bcc.n	80010d0 <CopyDataInit>
  ldr r2, =_sbss
 80010e2:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <LoopForever+0x12>)
  b LoopFillZerobss
 80010e4:	e002      	b.n	80010ec <LoopFillZerobss>

080010e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  str  r3, [r2]
 80010e8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ea:	3204      	adds	r2, #4

080010ec <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80010ec:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <LoopForever+0x16>)
  cmp r2, r3
 80010ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80010f0:	d3f9      	bcc.n	80010e6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80010f2:	f003 fb67 	bl	80047c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010f6:	f7ff f9ab 	bl	8000450 <main>

080010fa <LoopForever>:

LoopForever:
    b LoopForever
 80010fa:	e7fe      	b.n	80010fa <LoopForever>
  ldr   r0, =_estack
 80010fc:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8001100:	080048a4 	.word	0x080048a4
  ldr r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001108:	20000090 	.word	0x20000090
  ldr r2, =_sbss
 800110c:	20000090 	.word	0x20000090
  ldr r3, = _ebss
 8001110:	2000027c 	.word	0x2000027c

08001114 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC1_IRQHandler>

08001116 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800111c:	1dfb      	adds	r3, r7, #7
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001122:	2003      	movs	r0, #3
 8001124:	f000 f80e 	bl	8001144 <HAL_InitTick>
 8001128:	1e03      	subs	r3, r0, #0
 800112a:	d003      	beq.n	8001134 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800112c:	1dfb      	adds	r3, r7, #7
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
 8001132:	e001      	b.n	8001138 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001134:	f7ff fe64 	bl	8000e00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	781b      	ldrb	r3, [r3, #0]
}
 800113c:	0018      	movs	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	b002      	add	sp, #8
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800114c:	230f      	movs	r3, #15
 800114e:	18fb      	adds	r3, r7, r3
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001154:	4b1d      	ldr	r3, [pc, #116]	@ (80011cc <HAL_InitTick+0x88>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d02b      	beq.n	80011b4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 800115c:	4b1c      	ldr	r3, [pc, #112]	@ (80011d0 <HAL_InitTick+0x8c>)
 800115e:	681c      	ldr	r4, [r3, #0]
 8001160:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <HAL_InitTick+0x88>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	0019      	movs	r1, r3
 8001166:	23fa      	movs	r3, #250	@ 0xfa
 8001168:	0098      	lsls	r0, r3, #2
 800116a:	f7fe ffcd 	bl	8000108 <__udivsi3>
 800116e:	0003      	movs	r3, r0
 8001170:	0019      	movs	r1, r3
 8001172:	0020      	movs	r0, r4
 8001174:	f7fe ffc8 	bl	8000108 <__udivsi3>
 8001178:	0003      	movs	r3, r0
 800117a:	0018      	movs	r0, r3
 800117c:	f000 f919 	bl	80013b2 <HAL_SYSTICK_Config>
 8001180:	1e03      	subs	r3, r0, #0
 8001182:	d112      	bne.n	80011aa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b03      	cmp	r3, #3
 8001188:	d80a      	bhi.n	80011a0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	2301      	movs	r3, #1
 800118e:	425b      	negs	r3, r3
 8001190:	2200      	movs	r2, #0
 8001192:	0018      	movs	r0, r3
 8001194:	f000 f8e8 	bl	8001368 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001198:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <HAL_InitTick+0x90>)
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	e00d      	b.n	80011bc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011a0:	230f      	movs	r3, #15
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
 80011a8:	e008      	b.n	80011bc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011aa:	230f      	movs	r3, #15
 80011ac:	18fb      	adds	r3, r7, r3
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
 80011b2:	e003      	b.n	80011bc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011b4:	230f      	movs	r3, #15
 80011b6:	18fb      	adds	r3, r7, r3
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011bc:	230f      	movs	r3, #15
 80011be:	18fb      	adds	r3, r7, r3
 80011c0:	781b      	ldrb	r3, [r3, #0]
}
 80011c2:	0018      	movs	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b005      	add	sp, #20
 80011c8:	bd90      	pop	{r4, r7, pc}
 80011ca:	46c0      	nop			@ (mov r8, r8)
 80011cc:	2000008c 	.word	0x2000008c
 80011d0:	20000084 	.word	0x20000084
 80011d4:	20000088 	.word	0x20000088

080011d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011dc:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <HAL_IncTick+0x1c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	001a      	movs	r2, r3
 80011e2:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <HAL_IncTick+0x20>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	18d2      	adds	r2, r2, r3
 80011e8:	4b03      	ldr	r3, [pc, #12]	@ (80011f8 <HAL_IncTick+0x20>)
 80011ea:	601a      	str	r2, [r3, #0]
}
 80011ec:	46c0      	nop			@ (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			@ (mov r8, r8)
 80011f4:	2000008c 	.word	0x2000008c
 80011f8:	20000278 	.word	0x20000278

080011fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b02      	ldr	r3, [pc, #8]	@ (800120c <HAL_GetTick+0x10>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	0018      	movs	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	20000278 	.word	0x20000278

08001210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	0002      	movs	r2, r0
 8001218:	1dfb      	adds	r3, r7, #7
 800121a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800121c:	1dfb      	adds	r3, r7, #7
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b7f      	cmp	r3, #127	@ 0x7f
 8001222:	d809      	bhi.n	8001238 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001224:	1dfb      	adds	r3, r7, #7
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	001a      	movs	r2, r3
 800122a:	231f      	movs	r3, #31
 800122c:	401a      	ands	r2, r3
 800122e:	4b04      	ldr	r3, [pc, #16]	@ (8001240 <__NVIC_EnableIRQ+0x30>)
 8001230:	2101      	movs	r1, #1
 8001232:	4091      	lsls	r1, r2
 8001234:	000a      	movs	r2, r1
 8001236:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001238:	46c0      	nop			@ (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	b002      	add	sp, #8
 800123e:	bd80      	pop	{r7, pc}
 8001240:	e000e100 	.word	0xe000e100

08001244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	0002      	movs	r2, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	1dfb      	adds	r3, r7, #7
 8001250:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b7f      	cmp	r3, #127	@ 0x7f
 8001258:	d828      	bhi.n	80012ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800125a:	4a2f      	ldr	r2, [pc, #188]	@ (8001318 <__NVIC_SetPriority+0xd4>)
 800125c:	1dfb      	adds	r3, r7, #7
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b25b      	sxtb	r3, r3
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	33c0      	adds	r3, #192	@ 0xc0
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	589b      	ldr	r3, [r3, r2]
 800126a:	1dfa      	adds	r2, r7, #7
 800126c:	7812      	ldrb	r2, [r2, #0]
 800126e:	0011      	movs	r1, r2
 8001270:	2203      	movs	r2, #3
 8001272:	400a      	ands	r2, r1
 8001274:	00d2      	lsls	r2, r2, #3
 8001276:	21ff      	movs	r1, #255	@ 0xff
 8001278:	4091      	lsls	r1, r2
 800127a:	000a      	movs	r2, r1
 800127c:	43d2      	mvns	r2, r2
 800127e:	401a      	ands	r2, r3
 8001280:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	019b      	lsls	r3, r3, #6
 8001286:	22ff      	movs	r2, #255	@ 0xff
 8001288:	401a      	ands	r2, r3
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	0018      	movs	r0, r3
 8001290:	2303      	movs	r3, #3
 8001292:	4003      	ands	r3, r0
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001298:	481f      	ldr	r0, [pc, #124]	@ (8001318 <__NVIC_SetPriority+0xd4>)
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	430a      	orrs	r2, r1
 80012a4:	33c0      	adds	r3, #192	@ 0xc0
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012aa:	e031      	b.n	8001310 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ac:	4a1b      	ldr	r2, [pc, #108]	@ (800131c <__NVIC_SetPriority+0xd8>)
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	0019      	movs	r1, r3
 80012b4:	230f      	movs	r3, #15
 80012b6:	400b      	ands	r3, r1
 80012b8:	3b08      	subs	r3, #8
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	3306      	adds	r3, #6
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	18d3      	adds	r3, r2, r3
 80012c2:	3304      	adds	r3, #4
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	1dfa      	adds	r2, r7, #7
 80012c8:	7812      	ldrb	r2, [r2, #0]
 80012ca:	0011      	movs	r1, r2
 80012cc:	2203      	movs	r2, #3
 80012ce:	400a      	ands	r2, r1
 80012d0:	00d2      	lsls	r2, r2, #3
 80012d2:	21ff      	movs	r1, #255	@ 0xff
 80012d4:	4091      	lsls	r1, r2
 80012d6:	000a      	movs	r2, r1
 80012d8:	43d2      	mvns	r2, r2
 80012da:	401a      	ands	r2, r3
 80012dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	019b      	lsls	r3, r3, #6
 80012e2:	22ff      	movs	r2, #255	@ 0xff
 80012e4:	401a      	ands	r2, r3
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	0018      	movs	r0, r3
 80012ec:	2303      	movs	r3, #3
 80012ee:	4003      	ands	r3, r0
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f4:	4809      	ldr	r0, [pc, #36]	@ (800131c <__NVIC_SetPriority+0xd8>)
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	001c      	movs	r4, r3
 80012fc:	230f      	movs	r3, #15
 80012fe:	4023      	ands	r3, r4
 8001300:	3b08      	subs	r3, #8
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	430a      	orrs	r2, r1
 8001306:	3306      	adds	r3, #6
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	18c3      	adds	r3, r0, r3
 800130c:	3304      	adds	r3, #4
 800130e:	601a      	str	r2, [r3, #0]
}
 8001310:	46c0      	nop			@ (mov r8, r8)
 8001312:	46bd      	mov	sp, r7
 8001314:	b003      	add	sp, #12
 8001316:	bd90      	pop	{r4, r7, pc}
 8001318:	e000e100 	.word	0xe000e100
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	1e5a      	subs	r2, r3, #1
 800132c:	2380      	movs	r3, #128	@ 0x80
 800132e:	045b      	lsls	r3, r3, #17
 8001330:	429a      	cmp	r2, r3
 8001332:	d301      	bcc.n	8001338 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001334:	2301      	movs	r3, #1
 8001336:	e010      	b.n	800135a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001338:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <SysTick_Config+0x44>)
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	3a01      	subs	r2, #1
 800133e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001340:	2301      	movs	r3, #1
 8001342:	425b      	negs	r3, r3
 8001344:	2103      	movs	r1, #3
 8001346:	0018      	movs	r0, r3
 8001348:	f7ff ff7c 	bl	8001244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800134c:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <SysTick_Config+0x44>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001352:	4b04      	ldr	r3, [pc, #16]	@ (8001364 <SysTick_Config+0x44>)
 8001354:	2207      	movs	r2, #7
 8001356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001358:	2300      	movs	r3, #0
}
 800135a:	0018      	movs	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	b002      	add	sp, #8
 8001360:	bd80      	pop	{r7, pc}
 8001362:	46c0      	nop			@ (mov r8, r8)
 8001364:	e000e010 	.word	0xe000e010

08001368 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	210f      	movs	r1, #15
 8001374:	187b      	adds	r3, r7, r1
 8001376:	1c02      	adds	r2, r0, #0
 8001378:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	187b      	adds	r3, r7, r1
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b25b      	sxtb	r3, r3
 8001382:	0011      	movs	r1, r2
 8001384:	0018      	movs	r0, r3
 8001386:	f7ff ff5d 	bl	8001244 <__NVIC_SetPriority>
}
 800138a:	46c0      	nop			@ (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b004      	add	sp, #16
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	0002      	movs	r2, r0
 800139a:	1dfb      	adds	r3, r7, #7
 800139c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b25b      	sxtb	r3, r3
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7ff ff33 	bl	8001210 <__NVIC_EnableIRQ>
}
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	46bd      	mov	sp, r7
 80013ae:	b002      	add	sp, #8
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	0018      	movs	r0, r3
 80013be:	f7ff ffaf 	bl	8001320 <SysTick_Config>
 80013c2:	0003      	movs	r3, r0
}
 80013c4:	0018      	movs	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b002      	add	sp, #8
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e077      	b.n	80014ce <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a3d      	ldr	r2, [pc, #244]	@ (80014d8 <HAL_DMA_Init+0x10c>)
 80013e4:	4694      	mov	ip, r2
 80013e6:	4463      	add	r3, ip
 80013e8:	2114      	movs	r1, #20
 80013ea:	0018      	movs	r0, r3
 80013ec:	f7fe fe8c 	bl	8000108 <__udivsi3>
 80013f0:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 80013f2:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2225      	movs	r2, #37	@ 0x25
 80013fc:	2102      	movs	r1, #2
 80013fe:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4934      	ldr	r1, [pc, #208]	@ (80014dc <HAL_DMA_Init+0x110>)
 800140c:	400a      	ands	r2, r1
 800140e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6819      	ldr	r1, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	431a      	orrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	431a      	orrs	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	431a      	orrs	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	0018      	movs	r0, r3
 800144a:	f000 f9c3 	bl	80017d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	2380      	movs	r3, #128	@ 0x80
 8001454:	01db      	lsls	r3, r3, #7
 8001456:	429a      	cmp	r2, r3
 8001458:	d102      	bne.n	8001460 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001468:	21ff      	movs	r1, #255	@ 0xff
 800146a:	400a      	ands	r2, r1
 800146c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001476:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d011      	beq.n	80014a4 <HAL_DMA_Init+0xd8>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b04      	cmp	r3, #4
 8001486:	d80d      	bhi.n	80014a4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	0018      	movs	r0, r3
 800148c:	f000 f9ce 	bl	800182c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	e008      	b.n	80014b6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2225      	movs	r2, #37	@ 0x25
 80014c0:	2101      	movs	r1, #1
 80014c2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2224      	movs	r2, #36	@ 0x24
 80014c8:	2100      	movs	r1, #0
 80014ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	0018      	movs	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	b002      	add	sp, #8
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	46c0      	nop			@ (mov r8, r8)
 80014d8:	bffdfff8 	.word	0xbffdfff8
 80014dc:	ffff800f 	.word	0xffff800f

080014e0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014ee:	2317      	movs	r3, #23
 80014f0:	18fb      	adds	r3, r7, r3
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2224      	movs	r2, #36	@ 0x24
 80014fa:	5c9b      	ldrb	r3, [r3, r2]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <HAL_DMA_Start_IT+0x24>
 8001500:	2302      	movs	r3, #2
 8001502:	e070      	b.n	80015e6 <HAL_DMA_Start_IT+0x106>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2224      	movs	r2, #36	@ 0x24
 8001508:	2101      	movs	r1, #1
 800150a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2225      	movs	r2, #37	@ 0x25
 8001510:	5c9b      	ldrb	r3, [r3, r2]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b01      	cmp	r3, #1
 8001516:	d157      	bne.n	80015c8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2225      	movs	r2, #37	@ 0x25
 800151c:	2102      	movs	r1, #2
 800151e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2101      	movs	r1, #1
 8001532:	438a      	bics	r2, r1
 8001534:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	68b9      	ldr	r1, [r7, #8]
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 f909 	bl	8001754 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	2b00      	cmp	r3, #0
 8001548:	d008      	beq.n	800155c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	210e      	movs	r1, #14
 8001556:	430a      	orrs	r2, r1
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	e00f      	b.n	800157c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2104      	movs	r1, #4
 8001568:	438a      	bics	r2, r1
 800156a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	210a      	movs	r1, #10
 8001578:	430a      	orrs	r2, r1
 800157a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	2380      	movs	r3, #128	@ 0x80
 8001584:	025b      	lsls	r3, r3, #9
 8001586:	4013      	ands	r3, r2
 8001588:	d008      	beq.n	800159c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001594:	2180      	movs	r1, #128	@ 0x80
 8001596:	0049      	lsls	r1, r1, #1
 8001598:	430a      	orrs	r2, r1
 800159a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d008      	beq.n	80015b6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ae:	2180      	movs	r1, #128	@ 0x80
 80015b0:	0049      	lsls	r1, r1, #1
 80015b2:	430a      	orrs	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2101      	movs	r1, #1
 80015c2:	430a      	orrs	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	e007      	b.n	80015d8 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2224      	movs	r2, #36	@ 0x24
 80015cc:	2100      	movs	r1, #0
 80015ce:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80015d0:	2317      	movs	r3, #23
 80015d2:	18fb      	adds	r3, r7, r3
 80015d4:	2202      	movs	r2, #2
 80015d6:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2224      	movs	r2, #36	@ 0x24
 80015dc:	2100      	movs	r1, #0
 80015de:	5499      	strb	r1, [r3, r2]

  return status;
 80015e0:	2317      	movs	r3, #23
 80015e2:	18fb      	adds	r3, r7, r3
 80015e4:	781b      	ldrb	r3, [r3, #0]
}
 80015e6:	0018      	movs	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	b006      	add	sp, #24
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 80015f8:	4b55      	ldr	r3, [pc, #340]	@ (8001750 <HAL_DMA_IRQHandler+0x160>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	221c      	movs	r2, #28
 800160c:	4013      	ands	r3, r2
 800160e:	2204      	movs	r2, #4
 8001610:	409a      	lsls	r2, r3
 8001612:	0013      	movs	r3, r2
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	4013      	ands	r3, r2
 8001618:	d027      	beq.n	800166a <HAL_DMA_IRQHandler+0x7a>
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	2204      	movs	r2, #4
 800161e:	4013      	ands	r3, r2
 8001620:	d023      	beq.n	800166a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2220      	movs	r2, #32
 800162a:	4013      	ands	r3, r2
 800162c:	d107      	bne.n	800163e <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2104      	movs	r1, #4
 800163a:	438a      	bics	r2, r1
 800163c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800163e:	4b44      	ldr	r3, [pc, #272]	@ (8001750 <HAL_DMA_IRQHandler+0x160>)
 8001640:	6859      	ldr	r1, [r3, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	221c      	movs	r2, #28
 8001648:	4013      	ands	r3, r2
 800164a:	2204      	movs	r2, #4
 800164c:	409a      	lsls	r2, r3
 800164e:	4b40      	ldr	r3, [pc, #256]	@ (8001750 <HAL_DMA_IRQHandler+0x160>)
 8001650:	430a      	orrs	r2, r1
 8001652:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001658:	2b00      	cmp	r3, #0
 800165a:	d100      	bne.n	800165e <HAL_DMA_IRQHandler+0x6e>
 800165c:	e073      	b.n	8001746 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	0010      	movs	r0, r2
 8001666:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001668:	e06d      	b.n	8001746 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	221c      	movs	r2, #28
 8001670:	4013      	ands	r3, r2
 8001672:	2202      	movs	r2, #2
 8001674:	409a      	lsls	r2, r3
 8001676:	0013      	movs	r3, r2
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	4013      	ands	r3, r2
 800167c:	d02e      	beq.n	80016dc <HAL_DMA_IRQHandler+0xec>
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	2202      	movs	r2, #2
 8001682:	4013      	ands	r3, r2
 8001684:	d02a      	beq.n	80016dc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2220      	movs	r2, #32
 800168e:	4013      	ands	r3, r2
 8001690:	d10b      	bne.n	80016aa <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	210a      	movs	r1, #10
 800169e:	438a      	bics	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2225      	movs	r2, #37	@ 0x25
 80016a6:	2101      	movs	r1, #1
 80016a8:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80016aa:	4b29      	ldr	r3, [pc, #164]	@ (8001750 <HAL_DMA_IRQHandler+0x160>)
 80016ac:	6859      	ldr	r1, [r3, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b2:	221c      	movs	r2, #28
 80016b4:	4013      	ands	r3, r2
 80016b6:	2202      	movs	r2, #2
 80016b8:	409a      	lsls	r2, r3
 80016ba:	4b25      	ldr	r3, [pc, #148]	@ (8001750 <HAL_DMA_IRQHandler+0x160>)
 80016bc:	430a      	orrs	r2, r1
 80016be:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2224      	movs	r2, #36	@ 0x24
 80016c4:	2100      	movs	r1, #0
 80016c6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d03a      	beq.n	8001746 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	0010      	movs	r0, r2
 80016d8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80016da:	e034      	b.n	8001746 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e0:	221c      	movs	r2, #28
 80016e2:	4013      	ands	r3, r2
 80016e4:	2208      	movs	r2, #8
 80016e6:	409a      	lsls	r2, r3
 80016e8:	0013      	movs	r3, r2
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	4013      	ands	r3, r2
 80016ee:	d02b      	beq.n	8001748 <HAL_DMA_IRQHandler+0x158>
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2208      	movs	r2, #8
 80016f4:	4013      	ands	r3, r2
 80016f6:	d027      	beq.n	8001748 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	210e      	movs	r1, #14
 8001704:	438a      	bics	r2, r1
 8001706:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001708:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <HAL_DMA_IRQHandler+0x160>)
 800170a:	6859      	ldr	r1, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001710:	221c      	movs	r2, #28
 8001712:	4013      	ands	r3, r2
 8001714:	2201      	movs	r2, #1
 8001716:	409a      	lsls	r2, r3
 8001718:	4b0d      	ldr	r3, [pc, #52]	@ (8001750 <HAL_DMA_IRQHandler+0x160>)
 800171a:	430a      	orrs	r2, r1
 800171c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2225      	movs	r2, #37	@ 0x25
 8001728:	2101      	movs	r1, #1
 800172a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2224      	movs	r2, #36	@ 0x24
 8001730:	2100      	movs	r1, #0
 8001732:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	0010      	movs	r0, r2
 8001744:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	46c0      	nop			@ (mov r8, r8)
}
 800174a:	46bd      	mov	sp, r7
 800174c:	b004      	add	sp, #16
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40020000 	.word	0x40020000

08001754 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800176a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001770:	2b00      	cmp	r3, #0
 8001772:	d004      	beq.n	800177e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800177c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800177e:	4b14      	ldr	r3, [pc, #80]	@ (80017d0 <DMA_SetConfig+0x7c>)
 8001780:	6859      	ldr	r1, [r3, #4]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	221c      	movs	r2, #28
 8001788:	4013      	ands	r3, r2
 800178a:	2201      	movs	r2, #1
 800178c:	409a      	lsls	r2, r3
 800178e:	4b10      	ldr	r3, [pc, #64]	@ (80017d0 <DMA_SetConfig+0x7c>)
 8001790:	430a      	orrs	r2, r1
 8001792:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b10      	cmp	r3, #16
 80017a2:	d108      	bne.n	80017b6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017b4:	e007      	b.n	80017c6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	60da      	str	r2, [r3, #12]
}
 80017c6:	46c0      	nop			@ (mov r8, r8)
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b004      	add	sp, #16
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	46c0      	nop			@ (mov r8, r8)
 80017d0:	40020000 	.word	0x40020000

080017d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	001a      	movs	r2, r3
 80017e2:	23ff      	movs	r3, #255	@ 0xff
 80017e4:	4013      	ands	r3, r2
 80017e6:	3b08      	subs	r3, #8
 80017e8:	2114      	movs	r1, #20
 80017ea:	0018      	movs	r0, r3
 80017ec:	f7fe fc8c 	bl	8000108 <__udivsi3>
 80017f0:	0003      	movs	r3, r0
 80017f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f8:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 80017fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001824 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80017fc:	4694      	mov	ip, r2
 80017fe:	4463      	add	r3, ip
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	001a      	movs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a07      	ldr	r2, [pc, #28]	@ (8001828 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800180c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	221c      	movs	r2, #28
 8001812:	4013      	ands	r3, r2
 8001814:	2201      	movs	r2, #1
 8001816:	409a      	lsls	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800181c:	46c0      	nop			@ (mov r8, r8)
 800181e:	46bd      	mov	sp, r7
 8001820:	b004      	add	sp, #16
 8001822:	bd80      	pop	{r7, pc}
 8001824:	10008200 	.word	0x10008200
 8001828:	40020880 	.word	0x40020880

0800182c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	22ff      	movs	r2, #255	@ 0xff
 800183a:	4013      	ands	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4a0a      	ldr	r2, [pc, #40]	@ (800186c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001842:	4694      	mov	ip, r2
 8001844:	4463      	add	r3, ip
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	001a      	movs	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a07      	ldr	r2, [pc, #28]	@ (8001870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001852:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3b01      	subs	r3, #1
 8001858:	2203      	movs	r2, #3
 800185a:	4013      	ands	r3, r2
 800185c:	2201      	movs	r2, #1
 800185e:	409a      	lsls	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001864:	46c0      	nop			@ (mov r8, r8)
 8001866:	46bd      	mov	sp, r7
 8001868:	b004      	add	sp, #16
 800186a:	bd80      	pop	{r7, pc}
 800186c:	1000823f 	.word	0x1000823f
 8001870:	40020940 	.word	0x40020940

08001874 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001882:	e14d      	b.n	8001b20 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2101      	movs	r1, #1
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4091      	lsls	r1, r2
 800188e:	000a      	movs	r2, r1
 8001890:	4013      	ands	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d100      	bne.n	800189c <HAL_GPIO_Init+0x28>
 800189a:	e13e      	b.n	8001b1a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_Init+0x38>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b12      	cmp	r3, #18
 80018aa:	d125      	bne.n	80018f8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	08da      	lsrs	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3208      	adds	r2, #8
 80018b4:	0092      	lsls	r2, r2, #2
 80018b6:	58d3      	ldr	r3, [r2, r3]
 80018b8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	2207      	movs	r2, #7
 80018be:	4013      	ands	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	220f      	movs	r2, #15
 80018c4:	409a      	lsls	r2, r3
 80018c6:	0013      	movs	r3, r2
 80018c8:	43da      	mvns	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	4013      	ands	r3, r2
 80018ce:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	220f      	movs	r2, #15
 80018d6:	401a      	ands	r2, r3
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	2107      	movs	r1, #7
 80018dc:	400b      	ands	r3, r1
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	409a      	lsls	r2, r3
 80018e2:	0013      	movs	r3, r2
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3208      	adds	r2, #8
 80018f2:	0092      	lsls	r2, r2, #2
 80018f4:	6979      	ldr	r1, [r7, #20]
 80018f6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	2203      	movs	r2, #3
 8001904:	409a      	lsls	r2, r3
 8001906:	0013      	movs	r3, r2
 8001908:	43da      	mvns	r2, r3
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	4013      	ands	r3, r2
 800190e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2203      	movs	r2, #3
 8001916:	401a      	ands	r2, r3
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	409a      	lsls	r2, r3
 800191e:	0013      	movs	r3, r2
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	4313      	orrs	r3, r2
 8001924:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d00b      	beq.n	800194c <HAL_GPIO_Init+0xd8>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d007      	beq.n	800194c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001940:	2b11      	cmp	r3, #17
 8001942:	d003      	beq.n	800194c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b12      	cmp	r3, #18
 800194a:	d130      	bne.n	80019ae <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	409a      	lsls	r2, r3
 800195a:	0013      	movs	r3, r2
 800195c:	43da      	mvns	r2, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	4013      	ands	r3, r2
 8001962:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	409a      	lsls	r2, r3
 800196e:	0013      	movs	r3, r2
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	4313      	orrs	r3, r2
 8001974:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001982:	2201      	movs	r2, #1
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	409a      	lsls	r2, r3
 8001988:	0013      	movs	r3, r2
 800198a:	43da      	mvns	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	4013      	ands	r3, r2
 8001990:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	091b      	lsrs	r3, r3, #4
 8001998:	2201      	movs	r2, #1
 800199a:	401a      	ands	r2, r3
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	409a      	lsls	r2, r3
 80019a0:	0013      	movs	r3, r2
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	d017      	beq.n	80019e6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	2203      	movs	r2, #3
 80019c2:	409a      	lsls	r2, r3
 80019c4:	0013      	movs	r3, r2
 80019c6:	43da      	mvns	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	4013      	ands	r3, r2
 80019cc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	409a      	lsls	r2, r3
 80019d8:	0013      	movs	r3, r2
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4313      	orrs	r3, r2
 80019de:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	2380      	movs	r3, #128	@ 0x80
 80019ec:	055b      	lsls	r3, r3, #21
 80019ee:	4013      	ands	r3, r2
 80019f0:	d100      	bne.n	80019f4 <HAL_GPIO_Init+0x180>
 80019f2:	e092      	b.n	8001b1a <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80019f4:	4a50      	ldr	r2, [pc, #320]	@ (8001b38 <HAL_GPIO_Init+0x2c4>)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	089b      	lsrs	r3, r3, #2
 80019fa:	3318      	adds	r3, #24
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	589b      	ldr	r3, [r3, r2]
 8001a00:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	2203      	movs	r2, #3
 8001a06:	4013      	ands	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	220f      	movs	r2, #15
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	0013      	movs	r3, r2
 8001a10:	43da      	mvns	r2, r3
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	4013      	ands	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	23a0      	movs	r3, #160	@ 0xa0
 8001a1c:	05db      	lsls	r3, r3, #23
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d013      	beq.n	8001a4a <HAL_GPIO_Init+0x1d6>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a45      	ldr	r2, [pc, #276]	@ (8001b3c <HAL_GPIO_Init+0x2c8>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d00d      	beq.n	8001a46 <HAL_GPIO_Init+0x1d2>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a44      	ldr	r2, [pc, #272]	@ (8001b40 <HAL_GPIO_Init+0x2cc>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d007      	beq.n	8001a42 <HAL_GPIO_Init+0x1ce>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a43      	ldr	r2, [pc, #268]	@ (8001b44 <HAL_GPIO_Init+0x2d0>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d101      	bne.n	8001a3e <HAL_GPIO_Init+0x1ca>
 8001a3a:	2305      	movs	r3, #5
 8001a3c:	e006      	b.n	8001a4c <HAL_GPIO_Init+0x1d8>
 8001a3e:	2306      	movs	r3, #6
 8001a40:	e004      	b.n	8001a4c <HAL_GPIO_Init+0x1d8>
 8001a42:	2302      	movs	r3, #2
 8001a44:	e002      	b.n	8001a4c <HAL_GPIO_Init+0x1d8>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_GPIO_Init+0x1d8>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	2103      	movs	r1, #3
 8001a50:	400a      	ands	r2, r1
 8001a52:	00d2      	lsls	r2, r2, #3
 8001a54:	4093      	lsls	r3, r2
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001a5c:	4936      	ldr	r1, [pc, #216]	@ (8001b38 <HAL_GPIO_Init+0x2c4>)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	089b      	lsrs	r3, r3, #2
 8001a62:	3318      	adds	r3, #24
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001a6a:	4a33      	ldr	r2, [pc, #204]	@ (8001b38 <HAL_GPIO_Init+0x2c4>)
 8001a6c:	2380      	movs	r3, #128	@ 0x80
 8001a6e:	58d3      	ldr	r3, [r2, r3]
 8001a70:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	43da      	mvns	r2, r3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	2380      	movs	r3, #128	@ 0x80
 8001a82:	025b      	lsls	r3, r3, #9
 8001a84:	4013      	ands	r3, r2
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001a90:	4929      	ldr	r1, [pc, #164]	@ (8001b38 <HAL_GPIO_Init+0x2c4>)
 8001a92:	2280      	movs	r2, #128	@ 0x80
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001a98:	4a27      	ldr	r2, [pc, #156]	@ (8001b38 <HAL_GPIO_Init+0x2c4>)
 8001a9a:	2384      	movs	r3, #132	@ 0x84
 8001a9c:	58d3      	ldr	r3, [r2, r3]
 8001a9e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	2380      	movs	r3, #128	@ 0x80
 8001ab0:	029b      	lsls	r3, r3, #10
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001abe:	491e      	ldr	r1, [pc, #120]	@ (8001b38 <HAL_GPIO_Init+0x2c4>)
 8001ac0:	2284      	movs	r2, #132	@ 0x84
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b38 <HAL_GPIO_Init+0x2c4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	43da      	mvns	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	2380      	movs	r3, #128	@ 0x80
 8001adc:	035b      	lsls	r3, r3, #13
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001aea:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <HAL_GPIO_Init+0x2c4>)
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001af0:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <HAL_GPIO_Init+0x2c4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	43da      	mvns	r2, r3
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	4013      	ands	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	2380      	movs	r3, #128	@ 0x80
 8001b06:	039b      	lsls	r3, r3, #14
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001b14:	4b08      	ldr	r3, [pc, #32]	@ (8001b38 <HAL_GPIO_Init+0x2c4>)
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	40da      	lsrs	r2, r3
 8001b28:	1e13      	subs	r3, r2, #0
 8001b2a:	d000      	beq.n	8001b2e <HAL_GPIO_Init+0x2ba>
 8001b2c:	e6aa      	b.n	8001884 <HAL_GPIO_Init+0x10>
  }
}
 8001b2e:	46c0      	nop			@ (mov r8, r8)
 8001b30:	46c0      	nop			@ (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b006      	add	sp, #24
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40021800 	.word	0x40021800
 8001b3c:	50000400 	.word	0x50000400
 8001b40:	50000800 	.word	0x50000800
 8001b44:	50001400 	.word	0x50001400

08001b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	000a      	movs	r2, r1
 8001b52:	1cbb      	adds	r3, r7, #2
 8001b54:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	1cba      	adds	r2, r7, #2
 8001b5c:	8812      	ldrh	r2, [r2, #0]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d004      	beq.n	8001b6c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b62:	230f      	movs	r3, #15
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	2201      	movs	r2, #1
 8001b68:	701a      	strb	r2, [r3, #0]
 8001b6a:	e003      	b.n	8001b74 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b6c:	230f      	movs	r3, #15
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001b74:	230f      	movs	r3, #15
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	781b      	ldrb	r3, [r3, #0]
}
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b004      	add	sp, #16
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	0008      	movs	r0, r1
 8001b8c:	0011      	movs	r1, r2
 8001b8e:	1cbb      	adds	r3, r7, #2
 8001b90:	1c02      	adds	r2, r0, #0
 8001b92:	801a      	strh	r2, [r3, #0]
 8001b94:	1c7b      	adds	r3, r7, #1
 8001b96:	1c0a      	adds	r2, r1, #0
 8001b98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b9a:	1c7b      	adds	r3, r7, #1
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d004      	beq.n	8001bac <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ba2:	1cbb      	adds	r3, r7, #2
 8001ba4:	881a      	ldrh	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001baa:	e003      	b.n	8001bb4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bac:	1cbb      	adds	r3, r7, #2
 8001bae:	881a      	ldrh	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bb4:	46c0      	nop			@ (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b002      	add	sp, #8
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	000a      	movs	r2, r1
 8001bc6:	1cbb      	adds	r3, r7, #2
 8001bc8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bd0:	1cbb      	adds	r3, r7, #2
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	041a      	lsls	r2, r3, #16
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	1cb9      	adds	r1, r7, #2
 8001be0:	8809      	ldrh	r1, [r1, #0]
 8001be2:	400b      	ands	r3, r1
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	619a      	str	r2, [r3, #24]
}
 8001bea:	46c0      	nop			@ (mov r8, r8)
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b004      	add	sp, #16
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e08f      	b.n	8001d26 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2241      	movs	r2, #65	@ 0x41
 8001c0a:	5c9b      	ldrb	r3, [r3, r2]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d107      	bne.n	8001c22 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2240      	movs	r2, #64	@ 0x40
 8001c16:	2100      	movs	r1, #0
 8001c18:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f7ff f913 	bl	8000e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2241      	movs	r2, #65	@ 0x41
 8001c26:	2124      	movs	r1, #36	@ 0x24
 8001c28:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2101      	movs	r1, #1
 8001c36:	438a      	bics	r2, r1
 8001c38:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	493b      	ldr	r1, [pc, #236]	@ (8001d30 <HAL_I2C_Init+0x13c>)
 8001c44:	400a      	ands	r2, r1
 8001c46:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4938      	ldr	r1, [pc, #224]	@ (8001d34 <HAL_I2C_Init+0x140>)
 8001c54:	400a      	ands	r2, r1
 8001c56:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d108      	bne.n	8001c72 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2180      	movs	r1, #128	@ 0x80
 8001c6a:	0209      	lsls	r1, r1, #8
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	e007      	b.n	8001c82 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2184      	movs	r1, #132	@ 0x84
 8001c7c:	0209      	lsls	r1, r1, #8
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d109      	bne.n	8001c9e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2180      	movs	r1, #128	@ 0x80
 8001c96:	0109      	lsls	r1, r1, #4
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	e007      	b.n	8001cae <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4923      	ldr	r1, [pc, #140]	@ (8001d38 <HAL_I2C_Init+0x144>)
 8001caa:	400a      	ands	r2, r1
 8001cac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4920      	ldr	r1, [pc, #128]	@ (8001d3c <HAL_I2C_Init+0x148>)
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	491a      	ldr	r1, [pc, #104]	@ (8001d34 <HAL_I2C_Init+0x140>)
 8001cca:	400a      	ands	r2, r1
 8001ccc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691a      	ldr	r2, [r3, #16]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69d9      	ldr	r1, [r3, #28]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a1a      	ldr	r2, [r3, #32]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2101      	movs	r1, #1
 8001d04:	430a      	orrs	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2241      	movs	r2, #65	@ 0x41
 8001d12:	2120      	movs	r1, #32
 8001d14:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2242      	movs	r2, #66	@ 0x42
 8001d20:	2100      	movs	r1, #0
 8001d22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	0018      	movs	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b002      	add	sp, #8
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	f0ffffff 	.word	0xf0ffffff
 8001d34:	ffff7fff 	.word	0xffff7fff
 8001d38:	fffff7ff 	.word	0xfffff7ff
 8001d3c:	02008000 	.word	0x02008000

08001d40 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b089      	sub	sp, #36	@ 0x24
 8001d44:	af02      	add	r7, sp, #8
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	0008      	movs	r0, r1
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	0019      	movs	r1, r3
 8001d4e:	230a      	movs	r3, #10
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	1c02      	adds	r2, r0, #0
 8001d54:	801a      	strh	r2, [r3, #0]
 8001d56:	2308      	movs	r3, #8
 8001d58:	18fb      	adds	r3, r7, r3
 8001d5a:	1c0a      	adds	r2, r1, #0
 8001d5c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2241      	movs	r2, #65	@ 0x41
 8001d62:	5c9b      	ldrb	r3, [r3, r2]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b20      	cmp	r3, #32
 8001d68:	d000      	beq.n	8001d6c <HAL_I2C_Master_Transmit+0x2c>
 8001d6a:	e10a      	b.n	8001f82 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2240      	movs	r2, #64	@ 0x40
 8001d70:	5c9b      	ldrb	r3, [r3, r2]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_I2C_Master_Transmit+0x3a>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e104      	b.n	8001f84 <HAL_I2C_Master_Transmit+0x244>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2240      	movs	r2, #64	@ 0x40
 8001d7e:	2101      	movs	r1, #1
 8001d80:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d82:	f7ff fa3b 	bl	80011fc <HAL_GetTick>
 8001d86:	0003      	movs	r3, r0
 8001d88:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d8a:	2380      	movs	r3, #128	@ 0x80
 8001d8c:	0219      	lsls	r1, r3, #8
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	2319      	movs	r3, #25
 8001d96:	2201      	movs	r2, #1
 8001d98:	f000 fa26 	bl	80021e8 <I2C_WaitOnFlagUntilTimeout>
 8001d9c:	1e03      	subs	r3, r0, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0ef      	b.n	8001f84 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2241      	movs	r2, #65	@ 0x41
 8001da8:	2121      	movs	r1, #33	@ 0x21
 8001daa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2242      	movs	r2, #66	@ 0x42
 8001db0:	2110      	movs	r1, #16
 8001db2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2208      	movs	r2, #8
 8001dc4:	18ba      	adds	r2, r7, r2
 8001dc6:	8812      	ldrh	r2, [r2, #0]
 8001dc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	2bff      	cmp	r3, #255	@ 0xff
 8001dd8:	d906      	bls.n	8001de8 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	22ff      	movs	r2, #255	@ 0xff
 8001dde:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001de0:	2380      	movs	r3, #128	@ 0x80
 8001de2:	045b      	lsls	r3, r3, #17
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	e007      	b.n	8001df8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001df2:	2380      	movs	r3, #128	@ 0x80
 8001df4:	049b      	lsls	r3, r3, #18
 8001df6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d027      	beq.n	8001e50 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e04:	781a      	ldrb	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	3301      	adds	r3, #1
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	697c      	ldr	r4, [r7, #20]
 8001e3c:	230a      	movs	r3, #10
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	8819      	ldrh	r1, [r3, #0]
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	4b51      	ldr	r3, [pc, #324]	@ (8001f8c <HAL_I2C_Master_Transmit+0x24c>)
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	0023      	movs	r3, r4
 8001e4a:	f000 fc45 	bl	80026d8 <I2C_TransferConfig>
 8001e4e:	e06f      	b.n	8001f30 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	697c      	ldr	r4, [r7, #20]
 8001e58:	230a      	movs	r3, #10
 8001e5a:	18fb      	adds	r3, r7, r3
 8001e5c:	8819      	ldrh	r1, [r3, #0]
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	4b4a      	ldr	r3, [pc, #296]	@ (8001f8c <HAL_I2C_Master_Transmit+0x24c>)
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	0023      	movs	r3, r4
 8001e66:	f000 fc37 	bl	80026d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001e6a:	e061      	b.n	8001f30 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	0018      	movs	r0, r3
 8001e74:	f000 fa10 	bl	8002298 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e78:	1e03      	subs	r3, r0, #0
 8001e7a:	d001      	beq.n	8001e80 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e081      	b.n	8001f84 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e84:	781a      	ldrb	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d03a      	beq.n	8001f30 <HAL_I2C_Master_Transmit+0x1f0>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d136      	bne.n	8001f30 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ec2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	0013      	movs	r3, r2
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2180      	movs	r1, #128	@ 0x80
 8001ed0:	f000 f98a 	bl	80021e8 <I2C_WaitOnFlagUntilTimeout>
 8001ed4:	1e03      	subs	r3, r0, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e053      	b.n	8001f84 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	2bff      	cmp	r3, #255	@ 0xff
 8001ee4:	d911      	bls.n	8001f0a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	22ff      	movs	r2, #255	@ 0xff
 8001eea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	2380      	movs	r3, #128	@ 0x80
 8001ef4:	045c      	lsls	r4, r3, #17
 8001ef6:	230a      	movs	r3, #10
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	8819      	ldrh	r1, [r3, #0]
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	2300      	movs	r3, #0
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	0023      	movs	r3, r4
 8001f04:	f000 fbe8 	bl	80026d8 <I2C_TransferConfig>
 8001f08:	e012      	b.n	8001f30 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	2380      	movs	r3, #128	@ 0x80
 8001f1c:	049c      	lsls	r4, r3, #18
 8001f1e:	230a      	movs	r3, #10
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	8819      	ldrh	r1, [r3, #0]
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	2300      	movs	r3, #0
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	0023      	movs	r3, r4
 8001f2c:	f000 fbd4 	bl	80026d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d198      	bne.n	8001e6c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	0018      	movs	r0, r3
 8001f42:	f000 f9ef 	bl	8002324 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f46:	1e03      	subs	r3, r0, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e01a      	b.n	8001f84 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2220      	movs	r2, #32
 8001f54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	490b      	ldr	r1, [pc, #44]	@ (8001f90 <HAL_I2C_Master_Transmit+0x250>)
 8001f62:	400a      	ands	r2, r1
 8001f64:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2241      	movs	r2, #65	@ 0x41
 8001f6a:	2120      	movs	r1, #32
 8001f6c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2242      	movs	r2, #66	@ 0x42
 8001f72:	2100      	movs	r1, #0
 8001f74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2240      	movs	r2, #64	@ 0x40
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e000      	b.n	8001f84 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8001f82:	2302      	movs	r3, #2
  }
}
 8001f84:	0018      	movs	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b007      	add	sp, #28
 8001f8a:	bd90      	pop	{r4, r7, pc}
 8001f8c:	80002000 	.word	0x80002000
 8001f90:	fe00e800 	.word	0xfe00e800

08001f94 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b089      	sub	sp, #36	@ 0x24
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	0008      	movs	r0, r1
 8001f9e:	607a      	str	r2, [r7, #4]
 8001fa0:	0019      	movs	r1, r3
 8001fa2:	230a      	movs	r3, #10
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	1c02      	adds	r2, r0, #0
 8001fa8:	801a      	strh	r2, [r3, #0]
 8001faa:	2308      	movs	r3, #8
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	1c0a      	adds	r2, r1, #0
 8001fb0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2241      	movs	r2, #65	@ 0x41
 8001fb6:	5c9b      	ldrb	r3, [r3, r2]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	d000      	beq.n	8001fc0 <HAL_I2C_Master_Receive+0x2c>
 8001fbe:	e0e8      	b.n	8002192 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2240      	movs	r2, #64	@ 0x40
 8001fc4:	5c9b      	ldrb	r3, [r3, r2]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_I2C_Master_Receive+0x3a>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e0e2      	b.n	8002194 <HAL_I2C_Master_Receive+0x200>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2240      	movs	r2, #64	@ 0x40
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fd6:	f7ff f911 	bl	80011fc <HAL_GetTick>
 8001fda:	0003      	movs	r3, r0
 8001fdc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fde:	2380      	movs	r3, #128	@ 0x80
 8001fe0:	0219      	lsls	r1, r3, #8
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	2319      	movs	r3, #25
 8001fea:	2201      	movs	r2, #1
 8001fec:	f000 f8fc 	bl	80021e8 <I2C_WaitOnFlagUntilTimeout>
 8001ff0:	1e03      	subs	r3, r0, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0cd      	b.n	8002194 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2241      	movs	r2, #65	@ 0x41
 8001ffc:	2122      	movs	r1, #34	@ 0x22
 8001ffe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2242      	movs	r2, #66	@ 0x42
 8002004:	2110      	movs	r1, #16
 8002006:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2208      	movs	r2, #8
 8002018:	18ba      	adds	r2, r7, r2
 800201a:	8812      	ldrh	r2, [r2, #0]
 800201c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002028:	b29b      	uxth	r3, r3
 800202a:	2bff      	cmp	r3, #255	@ 0xff
 800202c:	d911      	bls.n	8002052 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	22ff      	movs	r2, #255	@ 0xff
 8002032:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002038:	b2da      	uxtb	r2, r3
 800203a:	2380      	movs	r3, #128	@ 0x80
 800203c:	045c      	lsls	r4, r3, #17
 800203e:	230a      	movs	r3, #10
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	8819      	ldrh	r1, [r3, #0]
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	4b55      	ldr	r3, [pc, #340]	@ (800219c <HAL_I2C_Master_Receive+0x208>)
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	0023      	movs	r3, r4
 800204c:	f000 fb44 	bl	80026d8 <I2C_TransferConfig>
 8002050:	e076      	b.n	8002140 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002060:	b2da      	uxtb	r2, r3
 8002062:	2380      	movs	r3, #128	@ 0x80
 8002064:	049c      	lsls	r4, r3, #18
 8002066:	230a      	movs	r3, #10
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	8819      	ldrh	r1, [r3, #0]
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	4b4b      	ldr	r3, [pc, #300]	@ (800219c <HAL_I2C_Master_Receive+0x208>)
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	0023      	movs	r3, r4
 8002074:	f000 fb30 	bl	80026d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002078:	e062      	b.n	8002140 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	0018      	movs	r0, r3
 8002082:	f000 f993 	bl	80023ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002086:	1e03      	subs	r3, r0, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e082      	b.n	8002194 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d03a      	beq.n	8002140 <HAL_I2C_Master_Receive+0x1ac>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d136      	bne.n	8002140 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	0013      	movs	r3, r2
 80020dc:	2200      	movs	r2, #0
 80020de:	2180      	movs	r1, #128	@ 0x80
 80020e0:	f000 f882 	bl	80021e8 <I2C_WaitOnFlagUntilTimeout>
 80020e4:	1e03      	subs	r3, r0, #0
 80020e6:	d001      	beq.n	80020ec <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e053      	b.n	8002194 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2bff      	cmp	r3, #255	@ 0xff
 80020f4:	d911      	bls.n	800211a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	22ff      	movs	r2, #255	@ 0xff
 80020fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002100:	b2da      	uxtb	r2, r3
 8002102:	2380      	movs	r3, #128	@ 0x80
 8002104:	045c      	lsls	r4, r3, #17
 8002106:	230a      	movs	r3, #10
 8002108:	18fb      	adds	r3, r7, r3
 800210a:	8819      	ldrh	r1, [r3, #0]
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	2300      	movs	r3, #0
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	0023      	movs	r3, r4
 8002114:	f000 fae0 	bl	80026d8 <I2C_TransferConfig>
 8002118:	e012      	b.n	8002140 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002128:	b2da      	uxtb	r2, r3
 800212a:	2380      	movs	r3, #128	@ 0x80
 800212c:	049c      	lsls	r4, r3, #18
 800212e:	230a      	movs	r3, #10
 8002130:	18fb      	adds	r3, r7, r3
 8002132:	8819      	ldrh	r1, [r3, #0]
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	2300      	movs	r3, #0
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	0023      	movs	r3, r4
 800213c:	f000 facc 	bl	80026d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002144:	b29b      	uxth	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d197      	bne.n	800207a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	0018      	movs	r0, r3
 8002152:	f000 f8e7 	bl	8002324 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002156:	1e03      	subs	r3, r0, #0
 8002158:	d001      	beq.n	800215e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e01a      	b.n	8002194 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2220      	movs	r2, #32
 8002164:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	490b      	ldr	r1, [pc, #44]	@ (80021a0 <HAL_I2C_Master_Receive+0x20c>)
 8002172:	400a      	ands	r2, r1
 8002174:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2241      	movs	r2, #65	@ 0x41
 800217a:	2120      	movs	r1, #32
 800217c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2242      	movs	r2, #66	@ 0x42
 8002182:	2100      	movs	r1, #0
 8002184:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2240      	movs	r2, #64	@ 0x40
 800218a:	2100      	movs	r1, #0
 800218c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	e000      	b.n	8002194 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002192:	2302      	movs	r3, #2
  }
}
 8002194:	0018      	movs	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	b007      	add	sp, #28
 800219a:	bd90      	pop	{r4, r7, pc}
 800219c:	80002400 	.word	0x80002400
 80021a0:	fe00e800 	.word	0xfe00e800

080021a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	2202      	movs	r2, #2
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d103      	bne.n	80021c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2200      	movs	r2, #0
 80021c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	2201      	movs	r2, #1
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d007      	beq.n	80021e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2101      	movs	r1, #1
 80021dc:	430a      	orrs	r2, r1
 80021de:	619a      	str	r2, [r3, #24]
  }
}
 80021e0:	46c0      	nop			@ (mov r8, r8)
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b002      	add	sp, #8
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	1dfb      	adds	r3, r7, #7
 80021f6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021f8:	e03a      	b.n	8002270 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	6839      	ldr	r1, [r7, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	0018      	movs	r0, r3
 8002202:	f000 f971 	bl	80024e8 <I2C_IsErrorOccurred>
 8002206:	1e03      	subs	r3, r0, #0
 8002208:	d001      	beq.n	800220e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e040      	b.n	8002290 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	3301      	adds	r3, #1
 8002212:	d02d      	beq.n	8002270 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002214:	f7fe fff2 	bl	80011fc <HAL_GetTick>
 8002218:	0002      	movs	r2, r0
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d302      	bcc.n	800222a <I2C_WaitOnFlagUntilTimeout+0x42>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d122      	bne.n	8002270 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	4013      	ands	r3, r2
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	425a      	negs	r2, r3
 800223a:	4153      	adcs	r3, r2
 800223c:	b2db      	uxtb	r3, r3
 800223e:	001a      	movs	r2, r3
 8002240:	1dfb      	adds	r3, r7, #7
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d113      	bne.n	8002270 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224c:	2220      	movs	r2, #32
 800224e:	431a      	orrs	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2241      	movs	r2, #65	@ 0x41
 8002258:	2120      	movs	r1, #32
 800225a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2242      	movs	r2, #66	@ 0x42
 8002260:	2100      	movs	r1, #0
 8002262:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2240      	movs	r2, #64	@ 0x40
 8002268:	2100      	movs	r1, #0
 800226a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e00f      	b.n	8002290 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	4013      	ands	r3, r2
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	425a      	negs	r2, r3
 8002280:	4153      	adcs	r3, r2
 8002282:	b2db      	uxtb	r3, r3
 8002284:	001a      	movs	r2, r3
 8002286:	1dfb      	adds	r3, r7, #7
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d0b5      	beq.n	80021fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	b004      	add	sp, #16
 8002296:	bd80      	pop	{r7, pc}

08002298 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022a4:	e032      	b.n	800230c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	0018      	movs	r0, r3
 80022ae:	f000 f91b 	bl	80024e8 <I2C_IsErrorOccurred>
 80022b2:	1e03      	subs	r3, r0, #0
 80022b4:	d001      	beq.n	80022ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e030      	b.n	800231c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	3301      	adds	r3, #1
 80022be:	d025      	beq.n	800230c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c0:	f7fe ff9c 	bl	80011fc <HAL_GetTick>
 80022c4:	0002      	movs	r2, r0
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d302      	bcc.n	80022d6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d11a      	bne.n	800230c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	2202      	movs	r2, #2
 80022de:	4013      	ands	r3, r2
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d013      	beq.n	800230c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e8:	2220      	movs	r2, #32
 80022ea:	431a      	orrs	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2241      	movs	r2, #65	@ 0x41
 80022f4:	2120      	movs	r1, #32
 80022f6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2242      	movs	r2, #66	@ 0x42
 80022fc:	2100      	movs	r1, #0
 80022fe:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2240      	movs	r2, #64	@ 0x40
 8002304:	2100      	movs	r1, #0
 8002306:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e007      	b.n	800231c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2202      	movs	r2, #2
 8002314:	4013      	ands	r3, r2
 8002316:	2b02      	cmp	r3, #2
 8002318:	d1c5      	bne.n	80022a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	b004      	add	sp, #16
 8002322:	bd80      	pop	{r7, pc}

08002324 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002330:	e02f      	b.n	8002392 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	0018      	movs	r0, r3
 800233a:	f000 f8d5 	bl	80024e8 <I2C_IsErrorOccurred>
 800233e:	1e03      	subs	r3, r0, #0
 8002340:	d001      	beq.n	8002346 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e02d      	b.n	80023a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002346:	f7fe ff59 	bl	80011fc <HAL_GetTick>
 800234a:	0002      	movs	r2, r0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	429a      	cmp	r2, r3
 8002354:	d302      	bcc.n	800235c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d11a      	bne.n	8002392 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2220      	movs	r2, #32
 8002364:	4013      	ands	r3, r2
 8002366:	2b20      	cmp	r3, #32
 8002368:	d013      	beq.n	8002392 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236e:	2220      	movs	r2, #32
 8002370:	431a      	orrs	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2241      	movs	r2, #65	@ 0x41
 800237a:	2120      	movs	r1, #32
 800237c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2242      	movs	r2, #66	@ 0x42
 8002382:	2100      	movs	r1, #0
 8002384:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2240      	movs	r2, #64	@ 0x40
 800238a:	2100      	movs	r1, #0
 800238c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e007      	b.n	80023a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	2220      	movs	r2, #32
 800239a:	4013      	ands	r3, r2
 800239c:	2b20      	cmp	r3, #32
 800239e:	d1c8      	bne.n	8002332 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	0018      	movs	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b004      	add	sp, #16
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b8:	2317      	movs	r3, #23
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80023c0:	e07b      	b.n	80024ba <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68b9      	ldr	r1, [r7, #8]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	0018      	movs	r0, r3
 80023ca:	f000 f88d 	bl	80024e8 <I2C_IsErrorOccurred>
 80023ce:	1e03      	subs	r3, r0, #0
 80023d0:	d003      	beq.n	80023da <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80023d2:	2317      	movs	r3, #23
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	2201      	movs	r2, #1
 80023d8:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	2220      	movs	r2, #32
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	d140      	bne.n	800246a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80023e8:	2117      	movs	r1, #23
 80023ea:	187b      	adds	r3, r7, r1
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d13b      	bne.n	800246a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	2204      	movs	r2, #4
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d106      	bne.n	800240e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002408:	187b      	adds	r3, r7, r1
 800240a:	2200      	movs	r2, #0
 800240c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	2210      	movs	r2, #16
 8002416:	4013      	ands	r3, r2
 8002418:	2b10      	cmp	r3, #16
 800241a:	d123      	bne.n	8002464 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2210      	movs	r2, #16
 8002422:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2204      	movs	r2, #4
 8002428:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2220      	movs	r2, #32
 8002430:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4929      	ldr	r1, [pc, #164]	@ (80024e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800243e:	400a      	ands	r2, r1
 8002440:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2241      	movs	r2, #65	@ 0x41
 8002446:	2120      	movs	r1, #32
 8002448:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2242      	movs	r2, #66	@ 0x42
 800244e:	2100      	movs	r1, #0
 8002450:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2240      	movs	r2, #64	@ 0x40
 8002456:	2100      	movs	r1, #0
 8002458:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800245a:	2317      	movs	r3, #23
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	2201      	movs	r2, #1
 8002460:	701a      	strb	r2, [r3, #0]
 8002462:	e002      	b.n	800246a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800246a:	f7fe fec7 	bl	80011fc <HAL_GetTick>
 800246e:	0002      	movs	r2, r0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	429a      	cmp	r2, r3
 8002478:	d302      	bcc.n	8002480 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d11c      	bne.n	80024ba <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8002480:	2017      	movs	r0, #23
 8002482:	183b      	adds	r3, r7, r0
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d117      	bne.n	80024ba <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2204      	movs	r2, #4
 8002492:	4013      	ands	r3, r2
 8002494:	2b04      	cmp	r3, #4
 8002496:	d010      	beq.n	80024ba <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249c:	2220      	movs	r2, #32
 800249e:	431a      	orrs	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2241      	movs	r2, #65	@ 0x41
 80024a8:	2120      	movs	r1, #32
 80024aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2240      	movs	r2, #64	@ 0x40
 80024b0:	2100      	movs	r1, #0
 80024b2:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80024b4:	183b      	adds	r3, r7, r0
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	2204      	movs	r2, #4
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d005      	beq.n	80024d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80024c8:	2317      	movs	r3, #23
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d100      	bne.n	80024d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80024d2:	e776      	b.n	80023c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80024d4:	2317      	movs	r3, #23
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	781b      	ldrb	r3, [r3, #0]
}
 80024da:	0018      	movs	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	b006      	add	sp, #24
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	fe00e800 	.word	0xfe00e800

080024e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	@ 0x28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024f4:	2327      	movs	r3, #39	@ 0x27
 80024f6:	18fb      	adds	r3, r7, r3
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2210      	movs	r2, #16
 8002510:	4013      	ands	r3, r2
 8002512:	d100      	bne.n	8002516 <I2C_IsErrorOccurred+0x2e>
 8002514:	e079      	b.n	800260a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2210      	movs	r2, #16
 800251c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800251e:	e057      	b.n	80025d0 <I2C_IsErrorOccurred+0xe8>
 8002520:	2227      	movs	r2, #39	@ 0x27
 8002522:	18bb      	adds	r3, r7, r2
 8002524:	18ba      	adds	r2, r7, r2
 8002526:	7812      	ldrb	r2, [r2, #0]
 8002528:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	3301      	adds	r3, #1
 800252e:	d04f      	beq.n	80025d0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002530:	f7fe fe64 	bl	80011fc <HAL_GetTick>
 8002534:	0002      	movs	r2, r0
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	429a      	cmp	r2, r3
 800253e:	d302      	bcc.n	8002546 <I2C_IsErrorOccurred+0x5e>
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d144      	bne.n	80025d0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	2380      	movs	r3, #128	@ 0x80
 800254e:	01db      	lsls	r3, r3, #7
 8002550:	4013      	ands	r3, r2
 8002552:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002554:	2013      	movs	r0, #19
 8002556:	183b      	adds	r3, r7, r0
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	2142      	movs	r1, #66	@ 0x42
 800255c:	5c52      	ldrb	r2, [r2, r1]
 800255e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	2380      	movs	r3, #128	@ 0x80
 8002568:	021b      	lsls	r3, r3, #8
 800256a:	401a      	ands	r2, r3
 800256c:	2380      	movs	r3, #128	@ 0x80
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	429a      	cmp	r2, r3
 8002572:	d126      	bne.n	80025c2 <I2C_IsErrorOccurred+0xda>
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	2380      	movs	r3, #128	@ 0x80
 8002578:	01db      	lsls	r3, r3, #7
 800257a:	429a      	cmp	r2, r3
 800257c:	d021      	beq.n	80025c2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800257e:	183b      	adds	r3, r7, r0
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b20      	cmp	r3, #32
 8002584:	d01d      	beq.n	80025c2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2180      	movs	r1, #128	@ 0x80
 8002592:	01c9      	lsls	r1, r1, #7
 8002594:	430a      	orrs	r2, r1
 8002596:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002598:	f7fe fe30 	bl	80011fc <HAL_GetTick>
 800259c:	0003      	movs	r3, r0
 800259e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025a0:	e00f      	b.n	80025c2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80025a2:	f7fe fe2b 	bl	80011fc <HAL_GetTick>
 80025a6:	0002      	movs	r2, r0
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b19      	cmp	r3, #25
 80025ae:	d908      	bls.n	80025c2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	2220      	movs	r2, #32
 80025b4:	4313      	orrs	r3, r2
 80025b6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80025b8:	2327      	movs	r3, #39	@ 0x27
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]

              break;
 80025c0:	e006      	b.n	80025d0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	2220      	movs	r2, #32
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	d1e8      	bne.n	80025a2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2220      	movs	r2, #32
 80025d8:	4013      	ands	r3, r2
 80025da:	2b20      	cmp	r3, #32
 80025dc:	d004      	beq.n	80025e8 <I2C_IsErrorOccurred+0x100>
 80025de:	2327      	movs	r3, #39	@ 0x27
 80025e0:	18fb      	adds	r3, r7, r3
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d09b      	beq.n	8002520 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025e8:	2327      	movs	r3, #39	@ 0x27
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d103      	bne.n	80025fa <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2220      	movs	r2, #32
 80025f8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	2204      	movs	r2, #4
 80025fe:	4313      	orrs	r3, r2
 8002600:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002602:	2327      	movs	r3, #39	@ 0x27
 8002604:	18fb      	adds	r3, r7, r3
 8002606:	2201      	movs	r2, #1
 8002608:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	2380      	movs	r3, #128	@ 0x80
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4013      	ands	r3, r2
 800261a:	d00c      	beq.n	8002636 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	2201      	movs	r2, #1
 8002620:	4313      	orrs	r3, r2
 8002622:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2280      	movs	r2, #128	@ 0x80
 800262a:	0052      	lsls	r2, r2, #1
 800262c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800262e:	2327      	movs	r3, #39	@ 0x27
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	2380      	movs	r3, #128	@ 0x80
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4013      	ands	r3, r2
 800263e:	d00c      	beq.n	800265a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002640:	6a3b      	ldr	r3, [r7, #32]
 8002642:	2208      	movs	r2, #8
 8002644:	4313      	orrs	r3, r2
 8002646:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2280      	movs	r2, #128	@ 0x80
 800264e:	00d2      	lsls	r2, r2, #3
 8002650:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002652:	2327      	movs	r3, #39	@ 0x27
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	2380      	movs	r3, #128	@ 0x80
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4013      	ands	r3, r2
 8002662:	d00c      	beq.n	800267e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	2202      	movs	r2, #2
 8002668:	4313      	orrs	r3, r2
 800266a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2280      	movs	r2, #128	@ 0x80
 8002672:	0092      	lsls	r2, r2, #2
 8002674:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002676:	2327      	movs	r3, #39	@ 0x27
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	2201      	movs	r2, #1
 800267c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800267e:	2327      	movs	r3, #39	@ 0x27
 8002680:	18fb      	adds	r3, r7, r3
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d01d      	beq.n	80026c4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	0018      	movs	r0, r3
 800268c:	f7ff fd8a 	bl	80021a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	490e      	ldr	r1, [pc, #56]	@ (80026d4 <I2C_IsErrorOccurred+0x1ec>)
 800269c:	400a      	ands	r2, r1
 800269e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2241      	movs	r2, #65	@ 0x41
 80026b0:	2120      	movs	r1, #32
 80026b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2242      	movs	r2, #66	@ 0x42
 80026b8:	2100      	movs	r1, #0
 80026ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2240      	movs	r2, #64	@ 0x40
 80026c0:	2100      	movs	r1, #0
 80026c2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80026c4:	2327      	movs	r3, #39	@ 0x27
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	781b      	ldrb	r3, [r3, #0]
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b00a      	add	sp, #40	@ 0x28
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	46c0      	nop			@ (mov r8, r8)
 80026d4:	fe00e800 	.word	0xfe00e800

080026d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	0008      	movs	r0, r1
 80026e2:	0011      	movs	r1, r2
 80026e4:	607b      	str	r3, [r7, #4]
 80026e6:	240a      	movs	r4, #10
 80026e8:	193b      	adds	r3, r7, r4
 80026ea:	1c02      	adds	r2, r0, #0
 80026ec:	801a      	strh	r2, [r3, #0]
 80026ee:	2009      	movs	r0, #9
 80026f0:	183b      	adds	r3, r7, r0
 80026f2:	1c0a      	adds	r2, r1, #0
 80026f4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026f6:	193b      	adds	r3, r7, r4
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	059b      	lsls	r3, r3, #22
 80026fc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026fe:	183b      	adds	r3, r7, r0
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	0419      	lsls	r1, r3, #16
 8002704:	23ff      	movs	r3, #255	@ 0xff
 8002706:	041b      	lsls	r3, r3, #16
 8002708:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800270a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002712:	4313      	orrs	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	085b      	lsrs	r3, r3, #1
 8002718:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002722:	0d51      	lsrs	r1, r2, #21
 8002724:	2280      	movs	r2, #128	@ 0x80
 8002726:	00d2      	lsls	r2, r2, #3
 8002728:	400a      	ands	r2, r1
 800272a:	4907      	ldr	r1, [pc, #28]	@ (8002748 <I2C_TransferConfig+0x70>)
 800272c:	430a      	orrs	r2, r1
 800272e:	43d2      	mvns	r2, r2
 8002730:	401a      	ands	r2, r3
 8002732:	0011      	movs	r1, r2
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	430a      	orrs	r2, r1
 800273c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800273e:	46c0      	nop			@ (mov r8, r8)
 8002740:	46bd      	mov	sp, r7
 8002742:	b007      	add	sp, #28
 8002744:	bd90      	pop	{r4, r7, pc}
 8002746:	46c0      	nop			@ (mov r8, r8)
 8002748:	03ff63ff 	.word	0x03ff63ff

0800274c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2241      	movs	r2, #65	@ 0x41
 800275a:	5c9b      	ldrb	r3, [r3, r2]
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b20      	cmp	r3, #32
 8002760:	d138      	bne.n	80027d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2240      	movs	r2, #64	@ 0x40
 8002766:	5c9b      	ldrb	r3, [r3, r2]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800276c:	2302      	movs	r3, #2
 800276e:	e032      	b.n	80027d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2240      	movs	r2, #64	@ 0x40
 8002774:	2101      	movs	r1, #1
 8002776:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2241      	movs	r2, #65	@ 0x41
 800277c:	2124      	movs	r1, #36	@ 0x24
 800277e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2101      	movs	r1, #1
 800278c:	438a      	bics	r2, r1
 800278e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4911      	ldr	r1, [pc, #68]	@ (80027e0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800279c:	400a      	ands	r2, r1
 800279e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6819      	ldr	r1, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2101      	movs	r1, #1
 80027bc:	430a      	orrs	r2, r1
 80027be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2241      	movs	r2, #65	@ 0x41
 80027c4:	2120      	movs	r1, #32
 80027c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2240      	movs	r2, #64	@ 0x40
 80027cc:	2100      	movs	r1, #0
 80027ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	e000      	b.n	80027d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027d4:	2302      	movs	r3, #2
  }
}
 80027d6:	0018      	movs	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	b002      	add	sp, #8
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	46c0      	nop			@ (mov r8, r8)
 80027e0:	ffffefff 	.word	0xffffefff

080027e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2241      	movs	r2, #65	@ 0x41
 80027f2:	5c9b      	ldrb	r3, [r3, r2]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b20      	cmp	r3, #32
 80027f8:	d139      	bne.n	800286e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2240      	movs	r2, #64	@ 0x40
 80027fe:	5c9b      	ldrb	r3, [r3, r2]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002804:	2302      	movs	r3, #2
 8002806:	e033      	b.n	8002870 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2240      	movs	r2, #64	@ 0x40
 800280c:	2101      	movs	r1, #1
 800280e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2241      	movs	r2, #65	@ 0x41
 8002814:	2124      	movs	r1, #36	@ 0x24
 8002816:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2101      	movs	r1, #1
 8002824:	438a      	bics	r2, r1
 8002826:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4a11      	ldr	r2, [pc, #68]	@ (8002878 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002834:	4013      	ands	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2101      	movs	r1, #1
 8002856:	430a      	orrs	r2, r1
 8002858:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2241      	movs	r2, #65	@ 0x41
 800285e:	2120      	movs	r1, #32
 8002860:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2240      	movs	r2, #64	@ 0x40
 8002866:	2100      	movs	r1, #0
 8002868:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	e000      	b.n	8002870 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800286e:	2302      	movs	r3, #2
  }
}
 8002870:	0018      	movs	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	b004      	add	sp, #16
 8002876:	bd80      	pop	{r7, pc}
 8002878:	fffff0ff 	.word	0xfffff0ff

0800287c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e1d0      	b.n	8002c30 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2201      	movs	r2, #1
 8002894:	4013      	ands	r3, r2
 8002896:	d100      	bne.n	800289a <HAL_RCC_OscConfig+0x1e>
 8002898:	e069      	b.n	800296e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800289a:	4bc8      	ldr	r3, [pc, #800]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2238      	movs	r2, #56	@ 0x38
 80028a0:	4013      	ands	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d105      	bne.n	80028b6 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d15d      	bne.n	800296e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e1bc      	b.n	8002c30 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	2380      	movs	r3, #128	@ 0x80
 80028bc:	025b      	lsls	r3, r3, #9
 80028be:	429a      	cmp	r2, r3
 80028c0:	d107      	bne.n	80028d2 <HAL_RCC_OscConfig+0x56>
 80028c2:	4bbe      	ldr	r3, [pc, #760]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	4bbd      	ldr	r3, [pc, #756]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 80028c8:	2180      	movs	r1, #128	@ 0x80
 80028ca:	0249      	lsls	r1, r1, #9
 80028cc:	430a      	orrs	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	e020      	b.n	8002914 <HAL_RCC_OscConfig+0x98>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	23a0      	movs	r3, #160	@ 0xa0
 80028d8:	02db      	lsls	r3, r3, #11
 80028da:	429a      	cmp	r2, r3
 80028dc:	d10e      	bne.n	80028fc <HAL_RCC_OscConfig+0x80>
 80028de:	4bb7      	ldr	r3, [pc, #732]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4bb6      	ldr	r3, [pc, #728]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 80028e4:	2180      	movs	r1, #128	@ 0x80
 80028e6:	02c9      	lsls	r1, r1, #11
 80028e8:	430a      	orrs	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	4bb3      	ldr	r3, [pc, #716]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4bb2      	ldr	r3, [pc, #712]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 80028f2:	2180      	movs	r1, #128	@ 0x80
 80028f4:	0249      	lsls	r1, r1, #9
 80028f6:	430a      	orrs	r2, r1
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	e00b      	b.n	8002914 <HAL_RCC_OscConfig+0x98>
 80028fc:	4baf      	ldr	r3, [pc, #700]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4bae      	ldr	r3, [pc, #696]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002902:	49af      	ldr	r1, [pc, #700]	@ (8002bc0 <HAL_RCC_OscConfig+0x344>)
 8002904:	400a      	ands	r2, r1
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	4bac      	ldr	r3, [pc, #688]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4bab      	ldr	r3, [pc, #684]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 800290e:	49ad      	ldr	r1, [pc, #692]	@ (8002bc4 <HAL_RCC_OscConfig+0x348>)
 8002910:	400a      	ands	r2, r1
 8002912:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d014      	beq.n	8002946 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7fe fc6e 	bl	80011fc <HAL_GetTick>
 8002920:	0003      	movs	r3, r0
 8002922:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002926:	f7fe fc69 	bl	80011fc <HAL_GetTick>
 800292a:	0002      	movs	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b64      	cmp	r3, #100	@ 0x64
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e17b      	b.n	8002c30 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002938:	4ba0      	ldr	r3, [pc, #640]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	2380      	movs	r3, #128	@ 0x80
 800293e:	029b      	lsls	r3, r3, #10
 8002940:	4013      	ands	r3, r2
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0xaa>
 8002944:	e013      	b.n	800296e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002946:	f7fe fc59 	bl	80011fc <HAL_GetTick>
 800294a:	0003      	movs	r3, r0
 800294c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002950:	f7fe fc54 	bl	80011fc <HAL_GetTick>
 8002954:	0002      	movs	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	@ 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e166      	b.n	8002c30 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002962:	4b96      	ldr	r3, [pc, #600]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	2380      	movs	r3, #128	@ 0x80
 8002968:	029b      	lsls	r3, r3, #10
 800296a:	4013      	ands	r3, r2
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2202      	movs	r2, #2
 8002974:	4013      	ands	r3, r2
 8002976:	d100      	bne.n	800297a <HAL_RCC_OscConfig+0xfe>
 8002978:	e086      	b.n	8002a88 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800297a:	4b90      	ldr	r3, [pc, #576]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2238      	movs	r2, #56	@ 0x38
 8002980:	4013      	ands	r3, r2
 8002982:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d12f      	bne.n	80029ea <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e14c      	b.n	8002c30 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002996:	4b89      	ldr	r3, [pc, #548]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	4a8b      	ldr	r2, [pc, #556]	@ (8002bc8 <HAL_RCC_OscConfig+0x34c>)
 800299c:	4013      	ands	r3, r2
 800299e:	0019      	movs	r1, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	021a      	lsls	r2, r3, #8
 80029a6:	4b85      	ldr	r3, [pc, #532]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 80029a8:	430a      	orrs	r2, r1
 80029aa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d112      	bne.n	80029d8 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80029b2:	4b82      	ldr	r3, [pc, #520]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a85      	ldr	r2, [pc, #532]	@ (8002bcc <HAL_RCC_OscConfig+0x350>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	0019      	movs	r1, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	4b7e      	ldr	r3, [pc, #504]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 80029c2:	430a      	orrs	r2, r1
 80029c4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80029c6:	4b7d      	ldr	r3, [pc, #500]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	0adb      	lsrs	r3, r3, #11
 80029cc:	2207      	movs	r2, #7
 80029ce:	4013      	ands	r3, r2
 80029d0:	4a7f      	ldr	r2, [pc, #508]	@ (8002bd0 <HAL_RCC_OscConfig+0x354>)
 80029d2:	40da      	lsrs	r2, r3
 80029d4:	4b7f      	ldr	r3, [pc, #508]	@ (8002bd4 <HAL_RCC_OscConfig+0x358>)
 80029d6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80029d8:	4b7f      	ldr	r3, [pc, #508]	@ (8002bd8 <HAL_RCC_OscConfig+0x35c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	0018      	movs	r0, r3
 80029de:	f7fe fbb1 	bl	8001144 <HAL_InitTick>
 80029e2:	1e03      	subs	r3, r0, #0
 80029e4:	d050      	beq.n	8002a88 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e122      	b.n	8002c30 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d030      	beq.n	8002a54 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80029f2:	4b72      	ldr	r3, [pc, #456]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a75      	ldr	r2, [pc, #468]	@ (8002bcc <HAL_RCC_OscConfig+0x350>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	0019      	movs	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	4b6e      	ldr	r3, [pc, #440]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002a02:	430a      	orrs	r2, r1
 8002a04:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002a06:	4b6d      	ldr	r3, [pc, #436]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	4b6c      	ldr	r3, [pc, #432]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002a0c:	2180      	movs	r1, #128	@ 0x80
 8002a0e:	0049      	lsls	r1, r1, #1
 8002a10:	430a      	orrs	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe fbf2 	bl	80011fc <HAL_GetTick>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002a1e:	f7fe fbed 	bl	80011fc <HAL_GetTick>
 8002a22:	0002      	movs	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e0ff      	b.n	8002c30 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a30:	4b62      	ldr	r3, [pc, #392]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	2380      	movs	r3, #128	@ 0x80
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3c:	4b5f      	ldr	r3, [pc, #380]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4a61      	ldr	r2, [pc, #388]	@ (8002bc8 <HAL_RCC_OscConfig+0x34c>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	0019      	movs	r1, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	021a      	lsls	r2, r3, #8
 8002a4c:	4b5b      	ldr	r3, [pc, #364]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	e019      	b.n	8002a88 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002a54:	4b59      	ldr	r3, [pc, #356]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4b58      	ldr	r3, [pc, #352]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002a5a:	4960      	ldr	r1, [pc, #384]	@ (8002bdc <HAL_RCC_OscConfig+0x360>)
 8002a5c:	400a      	ands	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7fe fbcc 	bl	80011fc <HAL_GetTick>
 8002a64:	0003      	movs	r3, r0
 8002a66:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002a6a:	f7fe fbc7 	bl	80011fc <HAL_GetTick>
 8002a6e:	0002      	movs	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e0d9      	b.n	8002c30 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a7c:	4b4f      	ldr	r3, [pc, #316]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	2380      	movs	r3, #128	@ 0x80
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4013      	ands	r3, r2
 8002a86:	d1f0      	bne.n	8002a6a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2208      	movs	r2, #8
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d042      	beq.n	8002b18 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002a92:	4b4a      	ldr	r3, [pc, #296]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2238      	movs	r2, #56	@ 0x38
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b18      	cmp	r3, #24
 8002a9c:	d105      	bne.n	8002aaa <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d138      	bne.n	8002b18 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e0c2      	b.n	8002c30 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d019      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002ab2:	4b42      	ldr	r3, [pc, #264]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002ab4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ab6:	4b41      	ldr	r3, [pc, #260]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002ab8:	2101      	movs	r1, #1
 8002aba:	430a      	orrs	r2, r1
 8002abc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7fe fb9d 	bl	80011fc <HAL_GetTick>
 8002ac2:	0003      	movs	r3, r0
 8002ac4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002ac8:	f7fe fb98 	bl	80011fc <HAL_GetTick>
 8002acc:	0002      	movs	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e0aa      	b.n	8002c30 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002ada:	4b38      	ldr	r3, [pc, #224]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ade:	2202      	movs	r2, #2
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d0f1      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x24c>
 8002ae4:	e018      	b.n	8002b18 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002ae6:	4b35      	ldr	r3, [pc, #212]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002ae8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002aea:	4b34      	ldr	r3, [pc, #208]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002aec:	2101      	movs	r1, #1
 8002aee:	438a      	bics	r2, r1
 8002af0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af2:	f7fe fb83 	bl	80011fc <HAL_GetTick>
 8002af6:	0003      	movs	r3, r0
 8002af8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002afc:	f7fe fb7e 	bl	80011fc <HAL_GetTick>
 8002b00:	0002      	movs	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e090      	b.n	8002c30 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002b0e:	4b2b      	ldr	r3, [pc, #172]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b12:	2202      	movs	r2, #2
 8002b14:	4013      	ands	r3, r2
 8002b16:	d1f1      	bne.n	8002afc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d100      	bne.n	8002b24 <HAL_RCC_OscConfig+0x2a8>
 8002b22:	e084      	b.n	8002c2e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b24:	230f      	movs	r3, #15
 8002b26:	18fb      	adds	r3, r7, r3
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002b2c:	4b23      	ldr	r3, [pc, #140]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2238      	movs	r2, #56	@ 0x38
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d106      	bne.n	8002b46 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d000      	beq.n	8002b42 <HAL_RCC_OscConfig+0x2c6>
 8002b40:	e075      	b.n	8002c2e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e074      	b.n	8002c30 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d106      	bne.n	8002b5c <HAL_RCC_OscConfig+0x2e0>
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002b50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b52:	4b1a      	ldr	r3, [pc, #104]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002b54:	2101      	movs	r1, #1
 8002b56:	430a      	orrs	r2, r1
 8002b58:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b5a:	e01c      	b.n	8002b96 <HAL_RCC_OscConfig+0x31a>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b05      	cmp	r3, #5
 8002b62:	d10c      	bne.n	8002b7e <HAL_RCC_OscConfig+0x302>
 8002b64:	4b15      	ldr	r3, [pc, #84]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002b66:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b68:	4b14      	ldr	r3, [pc, #80]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002b6a:	2104      	movs	r1, #4
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b70:	4b12      	ldr	r3, [pc, #72]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002b72:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b74:	4b11      	ldr	r3, [pc, #68]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002b76:	2101      	movs	r1, #1
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b7c:	e00b      	b.n	8002b96 <HAL_RCC_OscConfig+0x31a>
 8002b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002b80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b82:	4b0e      	ldr	r3, [pc, #56]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002b84:	2101      	movs	r1, #1
 8002b86:	438a      	bics	r2, r1
 8002b88:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002b8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002b90:	2104      	movs	r1, #4
 8002b92:	438a      	bics	r2, r1
 8002b94:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d028      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9e:	f7fe fb2d 	bl	80011fc <HAL_GetTick>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002ba6:	e01d      	b.n	8002be4 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7fe fb28 	bl	80011fc <HAL_GetTick>
 8002bac:	0002      	movs	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	4a0b      	ldr	r2, [pc, #44]	@ (8002be0 <HAL_RCC_OscConfig+0x364>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d915      	bls.n	8002be4 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e039      	b.n	8002c30 <HAL_RCC_OscConfig+0x3b4>
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	fffeffff 	.word	0xfffeffff
 8002bc4:	fffbffff 	.word	0xfffbffff
 8002bc8:	ffff80ff 	.word	0xffff80ff
 8002bcc:	ffffc7ff 	.word	0xffffc7ff
 8002bd0:	02dc6c00 	.word	0x02dc6c00
 8002bd4:	20000084 	.word	0x20000084
 8002bd8:	20000088 	.word	0x20000088
 8002bdc:	fffffeff 	.word	0xfffffeff
 8002be0:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002be4:	4b14      	ldr	r3, [pc, #80]	@ (8002c38 <HAL_RCC_OscConfig+0x3bc>)
 8002be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be8:	2202      	movs	r2, #2
 8002bea:	4013      	ands	r3, r2
 8002bec:	d0dc      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x32c>
 8002bee:	e013      	b.n	8002c18 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fb04 	bl	80011fc <HAL_GetTick>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002bf8:	e009      	b.n	8002c0e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfa:	f7fe faff 	bl	80011fc <HAL_GetTick>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	4a0d      	ldr	r2, [pc, #52]	@ (8002c3c <HAL_RCC_OscConfig+0x3c0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e010      	b.n	8002c30 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <HAL_RCC_OscConfig+0x3bc>)
 8002c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c12:	2202      	movs	r2, #2
 8002c14:	4013      	ands	r3, r2
 8002c16:	d1f0      	bne.n	8002bfa <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002c18:	230f      	movs	r3, #15
 8002c1a:	18fb      	adds	r3, r7, r3
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d105      	bne.n	8002c2e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002c22:	4b05      	ldr	r3, [pc, #20]	@ (8002c38 <HAL_RCC_OscConfig+0x3bc>)
 8002c24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c26:	4b04      	ldr	r3, [pc, #16]	@ (8002c38 <HAL_RCC_OscConfig+0x3bc>)
 8002c28:	4905      	ldr	r1, [pc, #20]	@ (8002c40 <HAL_RCC_OscConfig+0x3c4>)
 8002c2a:	400a      	ands	r2, r1
 8002c2c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	0018      	movs	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b006      	add	sp, #24
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	00001388 	.word	0x00001388
 8002c40:	efffffff 	.word	0xefffffff

08002c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0e9      	b.n	8002e2c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c58:	4b76      	ldr	r3, [pc, #472]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f0>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2207      	movs	r2, #7
 8002c5e:	4013      	ands	r3, r2
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d91e      	bls.n	8002ca4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b73      	ldr	r3, [pc, #460]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2207      	movs	r2, #7
 8002c6c:	4393      	bics	r3, r2
 8002c6e:	0019      	movs	r1, r3
 8002c70:	4b70      	ldr	r3, [pc, #448]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f0>)
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c78:	f7fe fac0 	bl	80011fc <HAL_GetTick>
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c80:	e009      	b.n	8002c96 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c82:	f7fe fabb 	bl	80011fc <HAL_GetTick>
 8002c86:	0002      	movs	r2, r0
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	4a6a      	ldr	r2, [pc, #424]	@ (8002e38 <HAL_RCC_ClockConfig+0x1f4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e0ca      	b.n	8002e2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c96:	4b67      	ldr	r3, [pc, #412]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2207      	movs	r2, #7
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d1ee      	bne.n	8002c82 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2202      	movs	r2, #2
 8002caa:	4013      	ands	r3, r2
 8002cac:	d017      	beq.n	8002cde <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d008      	beq.n	8002cca <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002cb8:	4b60      	ldr	r3, [pc, #384]	@ (8002e3c <HAL_RCC_ClockConfig+0x1f8>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	4a60      	ldr	r2, [pc, #384]	@ (8002e40 <HAL_RCC_ClockConfig+0x1fc>)
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e3c <HAL_RCC_ClockConfig+0x1f8>)
 8002cc2:	21b0      	movs	r1, #176	@ 0xb0
 8002cc4:	0109      	lsls	r1, r1, #4
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cca:	4b5c      	ldr	r3, [pc, #368]	@ (8002e3c <HAL_RCC_ClockConfig+0x1f8>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	4a5d      	ldr	r2, [pc, #372]	@ (8002e44 <HAL_RCC_ClockConfig+0x200>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	4b58      	ldr	r3, [pc, #352]	@ (8002e3c <HAL_RCC_ClockConfig+0x1f8>)
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d055      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002ce8:	4b54      	ldr	r3, [pc, #336]	@ (8002e3c <HAL_RCC_ClockConfig+0x1f8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	221c      	movs	r2, #28
 8002cee:	4393      	bics	r3, r2
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	4b51      	ldr	r3, [pc, #324]	@ (8002e3c <HAL_RCC_ClockConfig+0x1f8>)
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d107      	bne.n	8002d14 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d04:	4b4d      	ldr	r3, [pc, #308]	@ (8002e3c <HAL_RCC_ClockConfig+0x1f8>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	2380      	movs	r3, #128	@ 0x80
 8002d0a:	029b      	lsls	r3, r3, #10
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d11f      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e08b      	b.n	8002e2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d107      	bne.n	8002d2c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d1c:	4b47      	ldr	r3, [pc, #284]	@ (8002e3c <HAL_RCC_ClockConfig+0x1f8>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	2380      	movs	r3, #128	@ 0x80
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4013      	ands	r3, r2
 8002d26:	d113      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e07f      	b.n	8002e2c <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d106      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002d34:	4b41      	ldr	r3, [pc, #260]	@ (8002e3c <HAL_RCC_ClockConfig+0x1f8>)
 8002d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d38:	2202      	movs	r2, #2
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d108      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e074      	b.n	8002e2c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002d42:	4b3e      	ldr	r3, [pc, #248]	@ (8002e3c <HAL_RCC_ClockConfig+0x1f8>)
 8002d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d46:	2202      	movs	r2, #2
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e06d      	b.n	8002e2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d50:	4b3a      	ldr	r3, [pc, #232]	@ (8002e3c <HAL_RCC_ClockConfig+0x1f8>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2207      	movs	r2, #7
 8002d56:	4393      	bics	r3, r2
 8002d58:	0019      	movs	r1, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	4b37      	ldr	r3, [pc, #220]	@ (8002e3c <HAL_RCC_ClockConfig+0x1f8>)
 8002d60:	430a      	orrs	r2, r1
 8002d62:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d64:	f7fe fa4a 	bl	80011fc <HAL_GetTick>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6c:	e009      	b.n	8002d82 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6e:	f7fe fa45 	bl	80011fc <HAL_GetTick>
 8002d72:	0002      	movs	r2, r0
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	4a2f      	ldr	r2, [pc, #188]	@ (8002e38 <HAL_RCC_ClockConfig+0x1f4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e054      	b.n	8002e2c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d82:	4b2e      	ldr	r3, [pc, #184]	@ (8002e3c <HAL_RCC_ClockConfig+0x1f8>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2238      	movs	r2, #56	@ 0x38
 8002d88:	401a      	ands	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d1ec      	bne.n	8002d6e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d94:	4b27      	ldr	r3, [pc, #156]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f0>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2207      	movs	r2, #7
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d21e      	bcs.n	8002de0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	4b24      	ldr	r3, [pc, #144]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2207      	movs	r2, #7
 8002da8:	4393      	bics	r3, r2
 8002daa:	0019      	movs	r1, r3
 8002dac:	4b21      	ldr	r3, [pc, #132]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f0>)
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002db4:	f7fe fa22 	bl	80011fc <HAL_GetTick>
 8002db8:	0003      	movs	r3, r0
 8002dba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002dbc:	e009      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002dbe:	f7fe fa1d 	bl	80011fc <HAL_GetTick>
 8002dc2:	0002      	movs	r2, r0
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	4a1b      	ldr	r2, [pc, #108]	@ (8002e38 <HAL_RCC_ClockConfig+0x1f4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e02c      	b.n	8002e2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002dd2:	4b18      	ldr	r3, [pc, #96]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2207      	movs	r2, #7
 8002dd8:	4013      	ands	r3, r2
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d1ee      	bne.n	8002dbe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2204      	movs	r2, #4
 8002de6:	4013      	ands	r3, r2
 8002de8:	d009      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002dea:	4b14      	ldr	r3, [pc, #80]	@ (8002e3c <HAL_RCC_ClockConfig+0x1f8>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	4a16      	ldr	r2, [pc, #88]	@ (8002e48 <HAL_RCC_ClockConfig+0x204>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	0019      	movs	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	4b10      	ldr	r3, [pc, #64]	@ (8002e3c <HAL_RCC_ClockConfig+0x1f8>)
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002dfe:	f000 f82b 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8002e02:	0001      	movs	r1, r0
 8002e04:	4b0d      	ldr	r3, [pc, #52]	@ (8002e3c <HAL_RCC_ClockConfig+0x1f8>)
 8002e06:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e08:	0a1b      	lsrs	r3, r3, #8
 8002e0a:	220f      	movs	r2, #15
 8002e0c:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e4c <HAL_RCC_ClockConfig+0x208>)
 8002e10:	0092      	lsls	r2, r2, #2
 8002e12:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e14:	221f      	movs	r2, #31
 8002e16:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002e18:	000a      	movs	r2, r1
 8002e1a:	40da      	lsrs	r2, r3
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e50 <HAL_RCC_ClockConfig+0x20c>)
 8002e1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e20:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <HAL_RCC_ClockConfig+0x210>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0018      	movs	r0, r3
 8002e26:	f7fe f98d 	bl	8001144 <HAL_InitTick>
 8002e2a:	0003      	movs	r3, r0
}
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b004      	add	sp, #16
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40022000 	.word	0x40022000
 8002e38:	00001388 	.word	0x00001388
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	ffff84ff 	.word	0xffff84ff
 8002e44:	fffff0ff 	.word	0xfffff0ff
 8002e48:	ffff8fff 	.word	0xffff8fff
 8002e4c:	08004824 	.word	0x08004824
 8002e50:	20000084 	.word	0x20000084
 8002e54:	20000088 	.word	0x20000088

08002e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8002e5e:	4b23      	ldr	r3, [pc, #140]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x94>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	089b      	lsrs	r3, r3, #2
 8002e64:	2207      	movs	r2, #7
 8002e66:	4013      	ands	r3, r2
 8002e68:	3301      	adds	r3, #1
 8002e6a:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x94>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2238      	movs	r2, #56	@ 0x38
 8002e72:	4013      	ands	r3, r2
 8002e74:	d10f      	bne.n	8002e96 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002e76:	4b1d      	ldr	r3, [pc, #116]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x94>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	0adb      	lsrs	r3, r3, #11
 8002e7c:	2207      	movs	r2, #7
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2201      	movs	r2, #1
 8002e82:	409a      	lsls	r2, r3
 8002e84:	0013      	movs	r3, r2
 8002e86:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4819      	ldr	r0, [pc, #100]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e8c:	f7fd f93c 	bl	8000108 <__udivsi3>
 8002e90:	0003      	movs	r3, r0
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	e01e      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e96:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x94>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2238      	movs	r2, #56	@ 0x38
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d102      	bne.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ea2:	4b14      	ldr	r3, [pc, #80]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	e015      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002ea8:	4b10      	ldr	r3, [pc, #64]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x94>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2238      	movs	r2, #56	@ 0x38
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	d103      	bne.n	8002ebc <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002eb4:	2380      	movs	r3, #128	@ 0x80
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	e00b      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x94>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2238      	movs	r2, #56	@ 0x38
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b18      	cmp	r3, #24
 8002ec6:	d103      	bne.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002ec8:	23fa      	movs	r3, #250	@ 0xfa
 8002eca:	01db      	lsls	r3, r3, #7
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	e001      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f7fd f916 	bl	8000108 <__udivsi3>
 8002edc:	0003      	movs	r3, r0
 8002ede:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
}
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	b004      	add	sp, #16
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	46c0      	nop			@ (mov r8, r8)
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	02dc6c00 	.word	0x02dc6c00
 8002ef4:	00f42400 	.word	0x00f42400

08002ef8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002efc:	f7ff ffac 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8002f00:	0001      	movs	r1, r0
 8002f02:	4b09      	ldr	r3, [pc, #36]	@ (8002f28 <HAL_RCC_GetHCLKFreq+0x30>)
 8002f04:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002f06:	0a1b      	lsrs	r3, r3, #8
 8002f08:	220f      	movs	r2, #15
 8002f0a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002f0c:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <HAL_RCC_GetHCLKFreq+0x34>)
 8002f0e:	0092      	lsls	r2, r2, #2
 8002f10:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002f12:	221f      	movs	r2, #31
 8002f14:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002f16:	000a      	movs	r2, r1
 8002f18:	40da      	lsrs	r2, r3
 8002f1a:	4b05      	ldr	r3, [pc, #20]	@ (8002f30 <HAL_RCC_GetHCLKFreq+0x38>)
 8002f1c:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8002f1e:	4b04      	ldr	r3, [pc, #16]	@ (8002f30 <HAL_RCC_GetHCLKFreq+0x38>)
 8002f20:	681b      	ldr	r3, [r3, #0]
}
 8002f22:	0018      	movs	r0, r3
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	08004824 	.word	0x08004824
 8002f30:	20000084 	.word	0x20000084

08002f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002f38:	f7ff ffde 	bl	8002ef8 <HAL_RCC_GetHCLKFreq>
 8002f3c:	0001      	movs	r1, r0
 8002f3e:	4b07      	ldr	r3, [pc, #28]	@ (8002f5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	0b1b      	lsrs	r3, r3, #12
 8002f44:	2207      	movs	r2, #7
 8002f46:	401a      	ands	r2, r3
 8002f48:	4b05      	ldr	r3, [pc, #20]	@ (8002f60 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002f4a:	0092      	lsls	r2, r2, #2
 8002f4c:	58d3      	ldr	r3, [r2, r3]
 8002f4e:	221f      	movs	r2, #31
 8002f50:	4013      	ands	r3, r2
 8002f52:	40d9      	lsrs	r1, r3
 8002f54:	000b      	movs	r3, r1
}
 8002f56:	0018      	movs	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	08004864 	.word	0x08004864

08002f64 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002f6c:	2313      	movs	r3, #19
 8002f6e:	18fb      	adds	r3, r7, r3
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f74:	2312      	movs	r3, #18
 8002f76:	18fb      	adds	r3, r7, r3
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2240      	movs	r2, #64	@ 0x40
 8002f82:	4013      	ands	r3, r2
 8002f84:	d100      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8002f86:	e079      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f88:	2011      	movs	r0, #17
 8002f8a:	183b      	adds	r3, r7, r0
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f90:	4b63      	ldr	r3, [pc, #396]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f94:	2380      	movs	r3, #128	@ 0x80
 8002f96:	055b      	lsls	r3, r3, #21
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d110      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f9c:	4b60      	ldr	r3, [pc, #384]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fa0:	4b5f      	ldr	r3, [pc, #380]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fa2:	2180      	movs	r1, #128	@ 0x80
 8002fa4:	0549      	lsls	r1, r1, #21
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002faa:	4b5d      	ldr	r3, [pc, #372]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fae:	2380      	movs	r3, #128	@ 0x80
 8002fb0:	055b      	lsls	r3, r3, #21
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb8:	183b      	adds	r3, r7, r0
 8002fba:	2201      	movs	r2, #1
 8002fbc:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002fbe:	4b58      	ldr	r3, [pc, #352]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fc0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002fc2:	23c0      	movs	r3, #192	@ 0xc0
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d019      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d014      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002fda:	4b51      	ldr	r3, [pc, #324]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fde:	4a51      	ldr	r2, [pc, #324]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fe4:	4b4e      	ldr	r3, [pc, #312]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fe6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002fe8:	4b4d      	ldr	r3, [pc, #308]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fea:	2180      	movs	r1, #128	@ 0x80
 8002fec:	0249      	lsls	r1, r1, #9
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ff2:	4b4b      	ldr	r3, [pc, #300]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ff4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ff8:	494b      	ldr	r1, [pc, #300]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ffa:	400a      	ands	r2, r1
 8002ffc:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002ffe:	4b48      	ldr	r3, [pc, #288]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2201      	movs	r2, #1
 8003008:	4013      	ands	r3, r2
 800300a:	d016      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300c:	f7fe f8f6 	bl	80011fc <HAL_GetTick>
 8003010:	0003      	movs	r3, r0
 8003012:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003014:	e00c      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7fe f8f1 	bl	80011fc <HAL_GetTick>
 800301a:	0002      	movs	r2, r0
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	4a42      	ldr	r2, [pc, #264]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d904      	bls.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8003026:	2313      	movs	r3, #19
 8003028:	18fb      	adds	r3, r7, r3
 800302a:	2203      	movs	r2, #3
 800302c:	701a      	strb	r2, [r3, #0]
          break;
 800302e:	e004      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003030:	4b3b      	ldr	r3, [pc, #236]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003034:	2202      	movs	r2, #2
 8003036:	4013      	ands	r3, r2
 8003038:	d0ed      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 800303a:	2313      	movs	r3, #19
 800303c:	18fb      	adds	r3, r7, r3
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10a      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003044:	4b36      	ldr	r3, [pc, #216]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003048:	4a36      	ldr	r2, [pc, #216]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800304a:	4013      	ands	r3, r2
 800304c:	0019      	movs	r1, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	4b33      	ldr	r3, [pc, #204]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003054:	430a      	orrs	r2, r1
 8003056:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003058:	e005      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305a:	2312      	movs	r3, #18
 800305c:	18fb      	adds	r3, r7, r3
 800305e:	2213      	movs	r2, #19
 8003060:	18ba      	adds	r2, r7, r2
 8003062:	7812      	ldrb	r2, [r2, #0]
 8003064:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003066:	2311      	movs	r3, #17
 8003068:	18fb      	adds	r3, r7, r3
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d105      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003070:	4b2b      	ldr	r3, [pc, #172]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003072:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003074:	4b2a      	ldr	r3, [pc, #168]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003076:	492e      	ldr	r1, [pc, #184]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003078:	400a      	ands	r2, r1
 800307a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2201      	movs	r2, #1
 8003082:	4013      	ands	r3, r2
 8003084:	d009      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003086:	4b26      	ldr	r3, [pc, #152]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800308a:	2203      	movs	r2, #3
 800308c:	4393      	bics	r3, r2
 800308e:	0019      	movs	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	4b22      	ldr	r3, [pc, #136]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003096:	430a      	orrs	r2, r1
 8003098:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2202      	movs	r2, #2
 80030a0:	4013      	ands	r3, r2
 80030a2:	d009      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a8:	4a22      	ldr	r2, [pc, #136]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	0019      	movs	r1, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030b4:	430a      	orrs	r2, r1
 80030b6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2220      	movs	r2, #32
 80030be:	4013      	ands	r3, r2
 80030c0:	d008      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030c2:	4b17      	ldr	r3, [pc, #92]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	0899      	lsrs	r1, r3, #2
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	4b14      	ldr	r3, [pc, #80]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030d0:	430a      	orrs	r2, r1
 80030d2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2204      	movs	r2, #4
 80030da:	4013      	ands	r3, r2
 80030dc:	d009      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80030de:	4b10      	ldr	r3, [pc, #64]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e2:	4a15      	ldr	r2, [pc, #84]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	0019      	movs	r1, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030ee:	430a      	orrs	r2, r1
 80030f0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2280      	movs	r2, #128	@ 0x80
 80030f8:	4013      	ands	r3, r2
 80030fa:	d009      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80030fc:	4b08      	ldr	r3, [pc, #32]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	22e0      	movs	r2, #224	@ 0xe0
 8003102:	4393      	bics	r3, r2
 8003104:	0019      	movs	r1, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	4b05      	ldr	r3, [pc, #20]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800310c:	430a      	orrs	r2, r1
 800310e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003110:	2312      	movs	r3, #18
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	781b      	ldrb	r3, [r3, #0]
}
 8003116:	0018      	movs	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	b006      	add	sp, #24
 800311c:	bd80      	pop	{r7, pc}
 800311e:	46c0      	nop			@ (mov r8, r8)
 8003120:	40021000 	.word	0x40021000
 8003124:	fffffcff 	.word	0xfffffcff
 8003128:	fffeffff 	.word	0xfffeffff
 800312c:	00001388 	.word	0x00001388
 8003130:	efffffff 	.word	0xefffffff
 8003134:	ffffcfff 	.word	0xffffcfff
 8003138:	ffff3fff 	.word	0xffff3fff

0800313c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e04a      	b.n	80031e4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	223d      	movs	r2, #61	@ 0x3d
 8003152:	5c9b      	ldrb	r3, [r3, r2]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d107      	bne.n	800316a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	223c      	movs	r2, #60	@ 0x3c
 800315e:	2100      	movs	r1, #0
 8003160:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	0018      	movs	r0, r3
 8003166:	f7fd fed1 	bl	8000f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	223d      	movs	r2, #61	@ 0x3d
 800316e:	2102      	movs	r1, #2
 8003170:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3304      	adds	r3, #4
 800317a:	0019      	movs	r1, r3
 800317c:	0010      	movs	r0, r2
 800317e:	f000 fa81 	bl	8003684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2248      	movs	r2, #72	@ 0x48
 8003186:	2101      	movs	r1, #1
 8003188:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	223e      	movs	r2, #62	@ 0x3e
 800318e:	2101      	movs	r1, #1
 8003190:	5499      	strb	r1, [r3, r2]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	223f      	movs	r2, #63	@ 0x3f
 8003196:	2101      	movs	r1, #1
 8003198:	5499      	strb	r1, [r3, r2]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2240      	movs	r2, #64	@ 0x40
 800319e:	2101      	movs	r1, #1
 80031a0:	5499      	strb	r1, [r3, r2]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2241      	movs	r2, #65	@ 0x41
 80031a6:	2101      	movs	r1, #1
 80031a8:	5499      	strb	r1, [r3, r2]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2242      	movs	r2, #66	@ 0x42
 80031ae:	2101      	movs	r1, #1
 80031b0:	5499      	strb	r1, [r3, r2]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2243      	movs	r2, #67	@ 0x43
 80031b6:	2101      	movs	r1, #1
 80031b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2244      	movs	r2, #68	@ 0x44
 80031be:	2101      	movs	r1, #1
 80031c0:	5499      	strb	r1, [r3, r2]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2245      	movs	r2, #69	@ 0x45
 80031c6:	2101      	movs	r1, #1
 80031c8:	5499      	strb	r1, [r3, r2]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2246      	movs	r2, #70	@ 0x46
 80031ce:	2101      	movs	r1, #1
 80031d0:	5499      	strb	r1, [r3, r2]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2247      	movs	r2, #71	@ 0x47
 80031d6:	2101      	movs	r1, #1
 80031d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	223d      	movs	r2, #61	@ 0x3d
 80031de:	2101      	movs	r1, #1
 80031e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	0018      	movs	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b002      	add	sp, #8
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	223d      	movs	r2, #61	@ 0x3d
 80031f8:	5c9b      	ldrb	r3, [r3, r2]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d001      	beq.n	8003204 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e037      	b.n	8003274 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	223d      	movs	r2, #61	@ 0x3d
 8003208:	2102      	movs	r1, #2
 800320a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2101      	movs	r1, #1
 8003218:	430a      	orrs	r2, r1
 800321a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a16      	ldr	r2, [pc, #88]	@ (800327c <HAL_TIM_Base_Start_IT+0x90>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d004      	beq.n	8003230 <HAL_TIM_Base_Start_IT+0x44>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a15      	ldr	r2, [pc, #84]	@ (8003280 <HAL_TIM_Base_Start_IT+0x94>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d116      	bne.n	800325e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	4a13      	ldr	r2, [pc, #76]	@ (8003284 <HAL_TIM_Base_Start_IT+0x98>)
 8003238:	4013      	ands	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b06      	cmp	r3, #6
 8003240:	d016      	beq.n	8003270 <HAL_TIM_Base_Start_IT+0x84>
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	2380      	movs	r3, #128	@ 0x80
 8003246:	025b      	lsls	r3, r3, #9
 8003248:	429a      	cmp	r2, r3
 800324a:	d011      	beq.n	8003270 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2101      	movs	r1, #1
 8003258:	430a      	orrs	r2, r1
 800325a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325c:	e008      	b.n	8003270 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2101      	movs	r1, #1
 800326a:	430a      	orrs	r2, r1
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	e000      	b.n	8003272 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003270:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	0018      	movs	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	b004      	add	sp, #16
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40012c00 	.word	0x40012c00
 8003280:	40000400 	.word	0x40000400
 8003284:	00010007 	.word	0x00010007

08003288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2202      	movs	r2, #2
 80032a4:	4013      	ands	r3, r2
 80032a6:	d021      	beq.n	80032ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2202      	movs	r2, #2
 80032ac:	4013      	ands	r3, r2
 80032ae:	d01d      	beq.n	80032ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2203      	movs	r2, #3
 80032b6:	4252      	negs	r2, r2
 80032b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	2203      	movs	r2, #3
 80032c8:	4013      	ands	r3, r2
 80032ca:	d004      	beq.n	80032d6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	0018      	movs	r0, r3
 80032d0:	f000 f9c0 	bl	8003654 <HAL_TIM_IC_CaptureCallback>
 80032d4:	e007      	b.n	80032e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	0018      	movs	r0, r3
 80032da:	f000 f9b3 	bl	8003644 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	0018      	movs	r0, r3
 80032e2:	f000 f9bf 	bl	8003664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2204      	movs	r2, #4
 80032f0:	4013      	ands	r3, r2
 80032f2:	d022      	beq.n	800333a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2204      	movs	r2, #4
 80032f8:	4013      	ands	r3, r2
 80032fa:	d01e      	beq.n	800333a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2205      	movs	r2, #5
 8003302:	4252      	negs	r2, r2
 8003304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2202      	movs	r2, #2
 800330a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	23c0      	movs	r3, #192	@ 0xc0
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4013      	ands	r3, r2
 8003318:	d004      	beq.n	8003324 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	0018      	movs	r0, r3
 800331e:	f000 f999 	bl	8003654 <HAL_TIM_IC_CaptureCallback>
 8003322:	e007      	b.n	8003334 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	0018      	movs	r0, r3
 8003328:	f000 f98c 	bl	8003644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	0018      	movs	r0, r3
 8003330:	f000 f998 	bl	8003664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2208      	movs	r2, #8
 800333e:	4013      	ands	r3, r2
 8003340:	d021      	beq.n	8003386 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2208      	movs	r2, #8
 8003346:	4013      	ands	r3, r2
 8003348:	d01d      	beq.n	8003386 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2209      	movs	r2, #9
 8003350:	4252      	negs	r2, r2
 8003352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2204      	movs	r2, #4
 8003358:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	2203      	movs	r2, #3
 8003362:	4013      	ands	r3, r2
 8003364:	d004      	beq.n	8003370 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	0018      	movs	r0, r3
 800336a:	f000 f973 	bl	8003654 <HAL_TIM_IC_CaptureCallback>
 800336e:	e007      	b.n	8003380 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	0018      	movs	r0, r3
 8003374:	f000 f966 	bl	8003644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	0018      	movs	r0, r3
 800337c:	f000 f972 	bl	8003664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2210      	movs	r2, #16
 800338a:	4013      	ands	r3, r2
 800338c:	d022      	beq.n	80033d4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2210      	movs	r2, #16
 8003392:	4013      	ands	r3, r2
 8003394:	d01e      	beq.n	80033d4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2211      	movs	r2, #17
 800339c:	4252      	negs	r2, r2
 800339e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2208      	movs	r2, #8
 80033a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	23c0      	movs	r3, #192	@ 0xc0
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4013      	ands	r3, r2
 80033b2:	d004      	beq.n	80033be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	0018      	movs	r0, r3
 80033b8:	f000 f94c 	bl	8003654 <HAL_TIM_IC_CaptureCallback>
 80033bc:	e007      	b.n	80033ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	0018      	movs	r0, r3
 80033c2:	f000 f93f 	bl	8003644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	0018      	movs	r0, r3
 80033ca:	f000 f94b 	bl	8003664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2201      	movs	r2, #1
 80033d8:	4013      	ands	r3, r2
 80033da:	d00c      	beq.n	80033f6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	4013      	ands	r3, r2
 80033e2:	d008      	beq.n	80033f6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2202      	movs	r2, #2
 80033ea:	4252      	negs	r2, r2
 80033ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f7fd f817 	bl	8000424 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2280      	movs	r2, #128	@ 0x80
 80033fa:	4013      	ands	r3, r2
 80033fc:	d104      	bne.n	8003408 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	2380      	movs	r3, #128	@ 0x80
 8003402:	019b      	lsls	r3, r3, #6
 8003404:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003406:	d00b      	beq.n	8003420 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2280      	movs	r2, #128	@ 0x80
 800340c:	4013      	ands	r3, r2
 800340e:	d007      	beq.n	8003420 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a1e      	ldr	r2, [pc, #120]	@ (8003490 <HAL_TIM_IRQHandler+0x208>)
 8003416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	0018      	movs	r0, r3
 800341c:	f000 fab2 	bl	8003984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	2380      	movs	r3, #128	@ 0x80
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	4013      	ands	r3, r2
 8003428:	d00b      	beq.n	8003442 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2280      	movs	r2, #128	@ 0x80
 800342e:	4013      	ands	r3, r2
 8003430:	d007      	beq.n	8003442 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a17      	ldr	r2, [pc, #92]	@ (8003494 <HAL_TIM_IRQHandler+0x20c>)
 8003438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	0018      	movs	r0, r3
 800343e:	f000 faa9 	bl	8003994 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2240      	movs	r2, #64	@ 0x40
 8003446:	4013      	ands	r3, r2
 8003448:	d00c      	beq.n	8003464 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2240      	movs	r2, #64	@ 0x40
 800344e:	4013      	ands	r3, r2
 8003450:	d008      	beq.n	8003464 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2241      	movs	r2, #65	@ 0x41
 8003458:	4252      	negs	r2, r2
 800345a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	0018      	movs	r0, r3
 8003460:	f000 f908 	bl	8003674 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2220      	movs	r2, #32
 8003468:	4013      	ands	r3, r2
 800346a:	d00c      	beq.n	8003486 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	4013      	ands	r3, r2
 8003472:	d008      	beq.n	8003486 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2221      	movs	r2, #33	@ 0x21
 800347a:	4252      	negs	r2, r2
 800347c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	0018      	movs	r0, r3
 8003482:	f000 fa77 	bl	8003974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003486:	46c0      	nop			@ (mov r8, r8)
 8003488:	46bd      	mov	sp, r7
 800348a:	b004      	add	sp, #16
 800348c:	bd80      	pop	{r7, pc}
 800348e:	46c0      	nop			@ (mov r8, r8)
 8003490:	ffffdf7f 	.word	0xffffdf7f
 8003494:	fffffeff 	.word	0xfffffeff

08003498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034a2:	230f      	movs	r3, #15
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	223c      	movs	r2, #60	@ 0x3c
 80034ae:	5c9b      	ldrb	r3, [r3, r2]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_TIM_ConfigClockSource+0x20>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e0bc      	b.n	8003632 <HAL_TIM_ConfigClockSource+0x19a>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	223c      	movs	r2, #60	@ 0x3c
 80034bc:	2101      	movs	r1, #1
 80034be:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	223d      	movs	r2, #61	@ 0x3d
 80034c4:	2102      	movs	r1, #2
 80034c6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	4a5a      	ldr	r2, [pc, #360]	@ (800363c <HAL_TIM_ConfigClockSource+0x1a4>)
 80034d4:	4013      	ands	r3, r2
 80034d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4a59      	ldr	r2, [pc, #356]	@ (8003640 <HAL_TIM_ConfigClockSource+0x1a8>)
 80034dc:	4013      	ands	r3, r2
 80034de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2280      	movs	r2, #128	@ 0x80
 80034ee:	0192      	lsls	r2, r2, #6
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d040      	beq.n	8003576 <HAL_TIM_ConfigClockSource+0xde>
 80034f4:	2280      	movs	r2, #128	@ 0x80
 80034f6:	0192      	lsls	r2, r2, #6
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d900      	bls.n	80034fe <HAL_TIM_ConfigClockSource+0x66>
 80034fc:	e088      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x178>
 80034fe:	2280      	movs	r2, #128	@ 0x80
 8003500:	0152      	lsls	r2, r2, #5
 8003502:	4293      	cmp	r3, r2
 8003504:	d100      	bne.n	8003508 <HAL_TIM_ConfigClockSource+0x70>
 8003506:	e088      	b.n	800361a <HAL_TIM_ConfigClockSource+0x182>
 8003508:	2280      	movs	r2, #128	@ 0x80
 800350a:	0152      	lsls	r2, r2, #5
 800350c:	4293      	cmp	r3, r2
 800350e:	d900      	bls.n	8003512 <HAL_TIM_ConfigClockSource+0x7a>
 8003510:	e07e      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x178>
 8003512:	2b70      	cmp	r3, #112	@ 0x70
 8003514:	d018      	beq.n	8003548 <HAL_TIM_ConfigClockSource+0xb0>
 8003516:	d900      	bls.n	800351a <HAL_TIM_ConfigClockSource+0x82>
 8003518:	e07a      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x178>
 800351a:	2b60      	cmp	r3, #96	@ 0x60
 800351c:	d04f      	beq.n	80035be <HAL_TIM_ConfigClockSource+0x126>
 800351e:	d900      	bls.n	8003522 <HAL_TIM_ConfigClockSource+0x8a>
 8003520:	e076      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x178>
 8003522:	2b50      	cmp	r3, #80	@ 0x50
 8003524:	d03b      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x106>
 8003526:	d900      	bls.n	800352a <HAL_TIM_ConfigClockSource+0x92>
 8003528:	e072      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x178>
 800352a:	2b40      	cmp	r3, #64	@ 0x40
 800352c:	d057      	beq.n	80035de <HAL_TIM_ConfigClockSource+0x146>
 800352e:	d900      	bls.n	8003532 <HAL_TIM_ConfigClockSource+0x9a>
 8003530:	e06e      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x178>
 8003532:	2b30      	cmp	r3, #48	@ 0x30
 8003534:	d063      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x166>
 8003536:	d86b      	bhi.n	8003610 <HAL_TIM_ConfigClockSource+0x178>
 8003538:	2b20      	cmp	r3, #32
 800353a:	d060      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x166>
 800353c:	d868      	bhi.n	8003610 <HAL_TIM_ConfigClockSource+0x178>
 800353e:	2b00      	cmp	r3, #0
 8003540:	d05d      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x166>
 8003542:	2b10      	cmp	r3, #16
 8003544:	d05b      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x166>
 8003546:	e063      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003558:	f000 f98a 	bl	8003870 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2277      	movs	r2, #119	@ 0x77
 8003568:	4313      	orrs	r3, r2
 800356a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	609a      	str	r2, [r3, #8]
      break;
 8003574:	e052      	b.n	800361c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003586:	f000 f973 	bl	8003870 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2180      	movs	r1, #128	@ 0x80
 8003596:	01c9      	lsls	r1, r1, #7
 8003598:	430a      	orrs	r2, r1
 800359a:	609a      	str	r2, [r3, #8]
      break;
 800359c:	e03e      	b.n	800361c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035aa:	001a      	movs	r2, r3
 80035ac:	f000 f8e4 	bl	8003778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2150      	movs	r1, #80	@ 0x50
 80035b6:	0018      	movs	r0, r3
 80035b8:	f000 f93e 	bl	8003838 <TIM_ITRx_SetConfig>
      break;
 80035bc:	e02e      	b.n	800361c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ca:	001a      	movs	r2, r3
 80035cc:	f000 f902 	bl	80037d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2160      	movs	r1, #96	@ 0x60
 80035d6:	0018      	movs	r0, r3
 80035d8:	f000 f92e 	bl	8003838 <TIM_ITRx_SetConfig>
      break;
 80035dc:	e01e      	b.n	800361c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ea:	001a      	movs	r2, r3
 80035ec:	f000 f8c4 	bl	8003778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2140      	movs	r1, #64	@ 0x40
 80035f6:	0018      	movs	r0, r3
 80035f8:	f000 f91e 	bl	8003838 <TIM_ITRx_SetConfig>
      break;
 80035fc:	e00e      	b.n	800361c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	0019      	movs	r1, r3
 8003608:	0010      	movs	r0, r2
 800360a:	f000 f915 	bl	8003838 <TIM_ITRx_SetConfig>
      break;
 800360e:	e005      	b.n	800361c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003610:	230f      	movs	r3, #15
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	2201      	movs	r2, #1
 8003616:	701a      	strb	r2, [r3, #0]
      break;
 8003618:	e000      	b.n	800361c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800361a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	223d      	movs	r2, #61	@ 0x3d
 8003620:	2101      	movs	r1, #1
 8003622:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	223c      	movs	r2, #60	@ 0x3c
 8003628:	2100      	movs	r1, #0
 800362a:	5499      	strb	r1, [r3, r2]

  return status;
 800362c:	230f      	movs	r3, #15
 800362e:	18fb      	adds	r3, r7, r3
 8003630:	781b      	ldrb	r3, [r3, #0]
}
 8003632:	0018      	movs	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	b004      	add	sp, #16
 8003638:	bd80      	pop	{r7, pc}
 800363a:	46c0      	nop			@ (mov r8, r8)
 800363c:	ffceff88 	.word	0xffceff88
 8003640:	ffff00ff 	.word	0xffff00ff

08003644 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800364c:	46c0      	nop			@ (mov r8, r8)
 800364e:	46bd      	mov	sp, r7
 8003650:	b002      	add	sp, #8
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800365c:	46c0      	nop			@ (mov r8, r8)
 800365e:	46bd      	mov	sp, r7
 8003660:	b002      	add	sp, #8
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800366c:	46c0      	nop			@ (mov r8, r8)
 800366e:	46bd      	mov	sp, r7
 8003670:	b002      	add	sp, #8
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800367c:	46c0      	nop			@ (mov r8, r8)
 800367e:	46bd      	mov	sp, r7
 8003680:	b002      	add	sp, #8
 8003682:	bd80      	pop	{r7, pc}

08003684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a32      	ldr	r2, [pc, #200]	@ (8003760 <TIM_Base_SetConfig+0xdc>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d003      	beq.n	80036a4 <TIM_Base_SetConfig+0x20>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a31      	ldr	r2, [pc, #196]	@ (8003764 <TIM_Base_SetConfig+0xe0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d108      	bne.n	80036b6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2270      	movs	r2, #112	@ 0x70
 80036a8:	4393      	bics	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a29      	ldr	r2, [pc, #164]	@ (8003760 <TIM_Base_SetConfig+0xdc>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00f      	beq.n	80036de <TIM_Base_SetConfig+0x5a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a28      	ldr	r2, [pc, #160]	@ (8003764 <TIM_Base_SetConfig+0xe0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00b      	beq.n	80036de <TIM_Base_SetConfig+0x5a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a27      	ldr	r2, [pc, #156]	@ (8003768 <TIM_Base_SetConfig+0xe4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d007      	beq.n	80036de <TIM_Base_SetConfig+0x5a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a26      	ldr	r2, [pc, #152]	@ (800376c <TIM_Base_SetConfig+0xe8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d003      	beq.n	80036de <TIM_Base_SetConfig+0x5a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a25      	ldr	r2, [pc, #148]	@ (8003770 <TIM_Base_SetConfig+0xec>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d108      	bne.n	80036f0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4a24      	ldr	r2, [pc, #144]	@ (8003774 <TIM_Base_SetConfig+0xf0>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2280      	movs	r2, #128	@ 0x80
 80036f4:	4393      	bics	r3, r2
 80036f6:	001a      	movs	r2, r3
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a11      	ldr	r2, [pc, #68]	@ (8003760 <TIM_Base_SetConfig+0xdc>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d007      	beq.n	800372e <TIM_Base_SetConfig+0xaa>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a12      	ldr	r2, [pc, #72]	@ (800376c <TIM_Base_SetConfig+0xe8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d003      	beq.n	800372e <TIM_Base_SetConfig+0xaa>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a11      	ldr	r2, [pc, #68]	@ (8003770 <TIM_Base_SetConfig+0xec>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d103      	bne.n	8003736 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	2201      	movs	r2, #1
 8003742:	4013      	ands	r3, r2
 8003744:	2b01      	cmp	r3, #1
 8003746:	d106      	bne.n	8003756 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	2201      	movs	r2, #1
 800374e:	4393      	bics	r3, r2
 8003750:	001a      	movs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	611a      	str	r2, [r3, #16]
  }
}
 8003756:	46c0      	nop			@ (mov r8, r8)
 8003758:	46bd      	mov	sp, r7
 800375a:	b004      	add	sp, #16
 800375c:	bd80      	pop	{r7, pc}
 800375e:	46c0      	nop			@ (mov r8, r8)
 8003760:	40012c00 	.word	0x40012c00
 8003764:	40000400 	.word	0x40000400
 8003768:	40002000 	.word	0x40002000
 800376c:	40014400 	.word	0x40014400
 8003770:	40014800 	.word	0x40014800
 8003774:	fffffcff 	.word	0xfffffcff

08003778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	2201      	movs	r2, #1
 8003790:	4393      	bics	r3, r2
 8003792:	001a      	movs	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	22f0      	movs	r2, #240	@ 0xf0
 80037a2:	4393      	bics	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	220a      	movs	r2, #10
 80037b4:	4393      	bics	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	621a      	str	r2, [r3, #32]
}
 80037cc:	46c0      	nop			@ (mov r8, r8)
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b006      	add	sp, #24
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	2210      	movs	r2, #16
 80037ec:	4393      	bics	r3, r2
 80037ee:	001a      	movs	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003834 <TIM_TI2_ConfigInputStage+0x60>)
 80037fe:	4013      	ands	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	031b      	lsls	r3, r3, #12
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	22a0      	movs	r2, #160	@ 0xa0
 8003810:	4393      	bics	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4313      	orrs	r3, r2
 800381c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	621a      	str	r2, [r3, #32]
}
 800382a:	46c0      	nop			@ (mov r8, r8)
 800382c:	46bd      	mov	sp, r7
 800382e:	b006      	add	sp, #24
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	ffff0fff 	.word	0xffff0fff

08003838 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4a08      	ldr	r2, [pc, #32]	@ (800386c <TIM_ITRx_SetConfig+0x34>)
 800384c:	4013      	ands	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4313      	orrs	r3, r2
 8003856:	2207      	movs	r2, #7
 8003858:	4313      	orrs	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	609a      	str	r2, [r3, #8]
}
 8003862:	46c0      	nop			@ (mov r8, r8)
 8003864:	46bd      	mov	sp, r7
 8003866:	b004      	add	sp, #16
 8003868:	bd80      	pop	{r7, pc}
 800386a:	46c0      	nop			@ (mov r8, r8)
 800386c:	ffcfff8f 	.word	0xffcfff8f

08003870 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	4a09      	ldr	r2, [pc, #36]	@ (80038ac <TIM_ETR_SetConfig+0x3c>)
 8003888:	4013      	ands	r3, r2
 800388a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	021a      	lsls	r2, r3, #8
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	431a      	orrs	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4313      	orrs	r3, r2
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	4313      	orrs	r3, r2
 800389c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	609a      	str	r2, [r3, #8]
}
 80038a4:	46c0      	nop			@ (mov r8, r8)
 80038a6:	46bd      	mov	sp, r7
 80038a8:	b006      	add	sp, #24
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	ffff00ff 	.word	0xffff00ff

080038b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	223c      	movs	r2, #60	@ 0x3c
 80038be:	5c9b      	ldrb	r3, [r3, r2]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e04a      	b.n	800395e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	223c      	movs	r2, #60	@ 0x3c
 80038cc:	2101      	movs	r1, #1
 80038ce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	223d      	movs	r2, #61	@ 0x3d
 80038d4:	2102      	movs	r1, #2
 80038d6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1e      	ldr	r2, [pc, #120]	@ (8003968 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d108      	bne.n	8003904 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4a1d      	ldr	r2, [pc, #116]	@ (800396c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2270      	movs	r2, #112	@ 0x70
 8003908:	4393      	bics	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a11      	ldr	r2, [pc, #68]	@ (8003968 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d004      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a10      	ldr	r2, [pc, #64]	@ (8003970 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d10c      	bne.n	800394c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2280      	movs	r2, #128	@ 0x80
 8003936:	4393      	bics	r3, r2
 8003938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	4313      	orrs	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	223d      	movs	r2, #61	@ 0x3d
 8003950:	2101      	movs	r1, #1
 8003952:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	223c      	movs	r2, #60	@ 0x3c
 8003958:	2100      	movs	r1, #0
 800395a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	0018      	movs	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	b004      	add	sp, #16
 8003964:	bd80      	pop	{r7, pc}
 8003966:	46c0      	nop			@ (mov r8, r8)
 8003968:	40012c00 	.word	0x40012c00
 800396c:	ff0fffff 	.word	0xff0fffff
 8003970:	40000400 	.word	0x40000400

08003974 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800397c:	46c0      	nop			@ (mov r8, r8)
 800397e:	46bd      	mov	sp, r7
 8003980:	b002      	add	sp, #8
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800398c:	46c0      	nop			@ (mov r8, r8)
 800398e:	46bd      	mov	sp, r7
 8003990:	b002      	add	sp, #8
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800399c:	46c0      	nop			@ (mov r8, r8)
 800399e:	46bd      	mov	sp, r7
 80039a0:	b002      	add	sp, #8
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e046      	b.n	8003a44 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2288      	movs	r2, #136	@ 0x88
 80039ba:	589b      	ldr	r3, [r3, r2]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d107      	bne.n	80039d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2284      	movs	r2, #132	@ 0x84
 80039c4:	2100      	movs	r1, #0
 80039c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	0018      	movs	r0, r3
 80039cc:	f7fd fac4 	bl	8000f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2288      	movs	r2, #136	@ 0x88
 80039d4:	2124      	movs	r1, #36	@ 0x24
 80039d6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2101      	movs	r1, #1
 80039e4:	438a      	bics	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	0018      	movs	r0, r3
 80039f4:	f000 fac8 	bl	8003f88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	0018      	movs	r0, r3
 80039fc:	f000 f946 	bl	8003c8c <UART_SetConfig>
 8003a00:	0003      	movs	r3, r0
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e01c      	b.n	8003a44 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	490d      	ldr	r1, [pc, #52]	@ (8003a4c <HAL_UART_Init+0xa8>)
 8003a16:	400a      	ands	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	212a      	movs	r1, #42	@ 0x2a
 8003a26:	438a      	bics	r2, r1
 8003a28:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2101      	movs	r1, #1
 8003a36:	430a      	orrs	r2, r1
 8003a38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f000 fb57 	bl	80040f0 <UART_CheckIdleState>
 8003a42:	0003      	movs	r3, r0
}
 8003a44:	0018      	movs	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b002      	add	sp, #8
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	ffffb7ff 	.word	0xffffb7ff

08003a50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08a      	sub	sp, #40	@ 0x28
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	1dbb      	adds	r3, r7, #6
 8003a5e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2288      	movs	r2, #136	@ 0x88
 8003a64:	589b      	ldr	r3, [r3, r2]
 8003a66:	2b20      	cmp	r3, #32
 8003a68:	d000      	beq.n	8003a6c <HAL_UART_Transmit+0x1c>
 8003a6a:	e090      	b.n	8003b8e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_UART_Transmit+0x2a>
 8003a72:	1dbb      	adds	r3, r7, #6
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e088      	b.n	8003b90 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	2380      	movs	r3, #128	@ 0x80
 8003a84:	015b      	lsls	r3, r3, #5
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d109      	bne.n	8003a9e <HAL_UART_Transmit+0x4e>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d105      	bne.n	8003a9e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2201      	movs	r2, #1
 8003a96:	4013      	ands	r3, r2
 8003a98:	d001      	beq.n	8003a9e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e078      	b.n	8003b90 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2290      	movs	r2, #144	@ 0x90
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2288      	movs	r2, #136	@ 0x88
 8003aaa:	2121      	movs	r1, #33	@ 0x21
 8003aac:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aae:	f7fd fba5 	bl	80011fc <HAL_GetTick>
 8003ab2:	0003      	movs	r3, r0
 8003ab4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1dba      	adds	r2, r7, #6
 8003aba:	2154      	movs	r1, #84	@ 0x54
 8003abc:	8812      	ldrh	r2, [r2, #0]
 8003abe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	1dba      	adds	r2, r7, #6
 8003ac4:	2156      	movs	r1, #86	@ 0x56
 8003ac6:	8812      	ldrh	r2, [r2, #0]
 8003ac8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	2380      	movs	r3, #128	@ 0x80
 8003ad0:	015b      	lsls	r3, r3, #5
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d108      	bne.n	8003ae8 <HAL_UART_Transmit+0x98>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d104      	bne.n	8003ae8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	e003      	b.n	8003af0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003af0:	e030      	b.n	8003b54 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	0013      	movs	r3, r2
 8003afc:	2200      	movs	r2, #0
 8003afe:	2180      	movs	r1, #128	@ 0x80
 8003b00:	f000 fba0 	bl	8004244 <UART_WaitOnFlagUntilTimeout>
 8003b04:	1e03      	subs	r3, r0, #0
 8003b06:	d005      	beq.n	8003b14 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2288      	movs	r2, #136	@ 0x88
 8003b0c:	2120      	movs	r1, #32
 8003b0e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e03d      	b.n	8003b90 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10b      	bne.n	8003b32 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	001a      	movs	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	05d2      	lsls	r2, r2, #23
 8003b26:	0dd2      	lsrs	r2, r2, #23
 8003b28:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	3302      	adds	r3, #2
 8003b2e:	61bb      	str	r3, [r7, #24]
 8003b30:	e007      	b.n	8003b42 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	781a      	ldrb	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2256      	movs	r2, #86	@ 0x56
 8003b46:	5a9b      	ldrh	r3, [r3, r2]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b299      	uxth	r1, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2256      	movs	r2, #86	@ 0x56
 8003b52:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2256      	movs	r2, #86	@ 0x56
 8003b58:	5a9b      	ldrh	r3, [r3, r2]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1c8      	bne.n	8003af2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	0013      	movs	r3, r2
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2140      	movs	r1, #64	@ 0x40
 8003b6e:	f000 fb69 	bl	8004244 <UART_WaitOnFlagUntilTimeout>
 8003b72:	1e03      	subs	r3, r0, #0
 8003b74:	d005      	beq.n	8003b82 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2288      	movs	r2, #136	@ 0x88
 8003b7a:	2120      	movs	r1, #32
 8003b7c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e006      	b.n	8003b90 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2288      	movs	r2, #136	@ 0x88
 8003b86:	2120      	movs	r1, #32
 8003b88:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e000      	b.n	8003b90 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003b8e:	2302      	movs	r3, #2
  }
}
 8003b90:	0018      	movs	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b008      	add	sp, #32
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	1dbb      	adds	r3, r7, #6
 8003ba4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	228c      	movs	r2, #140	@ 0x8c
 8003baa:	589b      	ldr	r3, [r3, r2]
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d145      	bne.n	8003c3c <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_UART_Receive_DMA+0x26>
 8003bb6:	1dbb      	adds	r3, r7, #6
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e03d      	b.n	8003c3e <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	2380      	movs	r3, #128	@ 0x80
 8003bc8:	015b      	lsls	r3, r3, #5
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d109      	bne.n	8003be2 <HAL_UART_Receive_DMA+0x4a>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d105      	bne.n	8003be2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d001      	beq.n	8003be2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e02d      	b.n	8003c3e <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	2380      	movs	r3, #128	@ 0x80
 8003bf0:	041b      	lsls	r3, r3, #16
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d019      	beq.n	8003c2a <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bfa:	613b      	str	r3, [r7, #16]
  return(result);
 8003bfc:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bfe:	61fb      	str	r3, [r7, #28]
 8003c00:	2301      	movs	r3, #1
 8003c02:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f383 8810 	msr	PRIMASK, r3
}
 8003c0a:	46c0      	nop			@ (mov r8, r8)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2180      	movs	r1, #128	@ 0x80
 8003c18:	04c9      	lsls	r1, r1, #19
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f383 8810 	msr	PRIMASK, r3
}
 8003c28:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003c2a:	1dbb      	adds	r3, r7, #6
 8003c2c:	881a      	ldrh	r2, [r3, #0]
 8003c2e:	68b9      	ldr	r1, [r7, #8]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	0018      	movs	r0, r3
 8003c34:	f000 fb76 	bl	8004324 <UART_Start_Receive_DMA>
 8003c38:	0003      	movs	r3, r0
 8003c3a:	e000      	b.n	8003c3e <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003c3c:	2302      	movs	r3, #2
  }
}
 8003c3e:	0018      	movs	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	b008      	add	sp, #32
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003c4e:	46c0      	nop			@ (mov r8, r8)
 8003c50:	46bd      	mov	sp, r7
 8003c52:	b002      	add	sp, #8
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b082      	sub	sp, #8
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003c5e:	46c0      	nop			@ (mov r8, r8)
 8003c60:	46bd      	mov	sp, r7
 8003c62:	b002      	add	sp, #8
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b082      	sub	sp, #8
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c6e:	46c0      	nop			@ (mov r8, r8)
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b002      	add	sp, #8
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	000a      	movs	r2, r1
 8003c80:	1cbb      	adds	r3, r7, #2
 8003c82:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c84:	46c0      	nop			@ (mov r8, r8)
 8003c86:	46bd      	mov	sp, r7
 8003c88:	b002      	add	sp, #8
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c94:	231e      	movs	r3, #30
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	2200      	movs	r2, #0
 8003c9a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4aab      	ldr	r2, [pc, #684]	@ (8003f68 <UART_SetConfig+0x2dc>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	0019      	movs	r1, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4aa6      	ldr	r2, [pc, #664]	@ (8003f6c <UART_SetConfig+0x2e0>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	0019      	movs	r1, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	4a9d      	ldr	r2, [pc, #628]	@ (8003f70 <UART_SetConfig+0x2e4>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0e:	220f      	movs	r2, #15
 8003d10:	4393      	bics	r3, r2
 8003d12:	0019      	movs	r1, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a93      	ldr	r2, [pc, #588]	@ (8003f74 <UART_SetConfig+0x2e8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d127      	bne.n	8003d7a <UART_SetConfig+0xee>
 8003d2a:	4b93      	ldr	r3, [pc, #588]	@ (8003f78 <UART_SetConfig+0x2ec>)
 8003d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2e:	2203      	movs	r2, #3
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d017      	beq.n	8003d66 <UART_SetConfig+0xda>
 8003d36:	d81b      	bhi.n	8003d70 <UART_SetConfig+0xe4>
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d00a      	beq.n	8003d52 <UART_SetConfig+0xc6>
 8003d3c:	d818      	bhi.n	8003d70 <UART_SetConfig+0xe4>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <UART_SetConfig+0xbc>
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d00a      	beq.n	8003d5c <UART_SetConfig+0xd0>
 8003d46:	e013      	b.n	8003d70 <UART_SetConfig+0xe4>
 8003d48:	231f      	movs	r3, #31
 8003d4a:	18fb      	adds	r3, r7, r3
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	701a      	strb	r2, [r3, #0]
 8003d50:	e021      	b.n	8003d96 <UART_SetConfig+0x10a>
 8003d52:	231f      	movs	r3, #31
 8003d54:	18fb      	adds	r3, r7, r3
 8003d56:	2202      	movs	r2, #2
 8003d58:	701a      	strb	r2, [r3, #0]
 8003d5a:	e01c      	b.n	8003d96 <UART_SetConfig+0x10a>
 8003d5c:	231f      	movs	r3, #31
 8003d5e:	18fb      	adds	r3, r7, r3
 8003d60:	2204      	movs	r2, #4
 8003d62:	701a      	strb	r2, [r3, #0]
 8003d64:	e017      	b.n	8003d96 <UART_SetConfig+0x10a>
 8003d66:	231f      	movs	r3, #31
 8003d68:	18fb      	adds	r3, r7, r3
 8003d6a:	2208      	movs	r2, #8
 8003d6c:	701a      	strb	r2, [r3, #0]
 8003d6e:	e012      	b.n	8003d96 <UART_SetConfig+0x10a>
 8003d70:	231f      	movs	r3, #31
 8003d72:	18fb      	adds	r3, r7, r3
 8003d74:	2210      	movs	r2, #16
 8003d76:	701a      	strb	r2, [r3, #0]
 8003d78:	e00d      	b.n	8003d96 <UART_SetConfig+0x10a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a7f      	ldr	r2, [pc, #508]	@ (8003f7c <UART_SetConfig+0x2f0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d104      	bne.n	8003d8e <UART_SetConfig+0x102>
 8003d84:	231f      	movs	r3, #31
 8003d86:	18fb      	adds	r3, r7, r3
 8003d88:	2200      	movs	r2, #0
 8003d8a:	701a      	strb	r2, [r3, #0]
 8003d8c:	e003      	b.n	8003d96 <UART_SetConfig+0x10a>
 8003d8e:	231f      	movs	r3, #31
 8003d90:	18fb      	adds	r3, r7, r3
 8003d92:	2210      	movs	r2, #16
 8003d94:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69da      	ldr	r2, [r3, #28]
 8003d9a:	2380      	movs	r3, #128	@ 0x80
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d000      	beq.n	8003da4 <UART_SetConfig+0x118>
 8003da2:	e06f      	b.n	8003e84 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8003da4:	231f      	movs	r3, #31
 8003da6:	18fb      	adds	r3, r7, r3
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d01f      	beq.n	8003dee <UART_SetConfig+0x162>
 8003dae:	dc22      	bgt.n	8003df6 <UART_SetConfig+0x16a>
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d017      	beq.n	8003de4 <UART_SetConfig+0x158>
 8003db4:	dc1f      	bgt.n	8003df6 <UART_SetConfig+0x16a>
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <UART_SetConfig+0x134>
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d005      	beq.n	8003dca <UART_SetConfig+0x13e>
 8003dbe:	e01a      	b.n	8003df6 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc0:	f7ff f8b8 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	61bb      	str	r3, [r7, #24]
        break;
 8003dc8:	e01c      	b.n	8003e04 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003dca:	4b6b      	ldr	r3, [pc, #428]	@ (8003f78 <UART_SetConfig+0x2ec>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	2207      	movs	r2, #7
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	4869      	ldr	r0, [pc, #420]	@ (8003f80 <UART_SetConfig+0x2f4>)
 8003dda:	f7fc f995 	bl	8000108 <__udivsi3>
 8003dde:	0003      	movs	r3, r0
 8003de0:	61bb      	str	r3, [r7, #24]
        break;
 8003de2:	e00f      	b.n	8003e04 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003de4:	f7ff f838 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8003de8:	0003      	movs	r3, r0
 8003dea:	61bb      	str	r3, [r7, #24]
        break;
 8003dec:	e00a      	b.n	8003e04 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dee:	2380      	movs	r3, #128	@ 0x80
 8003df0:	021b      	lsls	r3, r3, #8
 8003df2:	61bb      	str	r3, [r7, #24]
        break;
 8003df4:	e006      	b.n	8003e04 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dfa:	231e      	movs	r3, #30
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	2201      	movs	r2, #1
 8003e00:	701a      	strb	r2, [r3, #0]
        break;
 8003e02:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d100      	bne.n	8003e0c <UART_SetConfig+0x180>
 8003e0a:	e097      	b.n	8003f3c <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e10:	4b5c      	ldr	r3, [pc, #368]	@ (8003f84 <UART_SetConfig+0x2f8>)
 8003e12:	0052      	lsls	r2, r2, #1
 8003e14:	5ad3      	ldrh	r3, [r2, r3]
 8003e16:	0019      	movs	r1, r3
 8003e18:	69b8      	ldr	r0, [r7, #24]
 8003e1a:	f7fc f975 	bl	8000108 <__udivsi3>
 8003e1e:	0003      	movs	r3, r0
 8003e20:	005a      	lsls	r2, r3, #1
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	085b      	lsrs	r3, r3, #1
 8003e28:	18d2      	adds	r2, r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	0019      	movs	r1, r3
 8003e30:	0010      	movs	r0, r2
 8003e32:	f7fc f969 	bl	8000108 <__udivsi3>
 8003e36:	0003      	movs	r3, r0
 8003e38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b0f      	cmp	r3, #15
 8003e3e:	d91c      	bls.n	8003e7a <UART_SetConfig+0x1ee>
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	2380      	movs	r3, #128	@ 0x80
 8003e44:	025b      	lsls	r3, r3, #9
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d217      	bcs.n	8003e7a <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	200e      	movs	r0, #14
 8003e50:	183b      	adds	r3, r7, r0
 8003e52:	210f      	movs	r1, #15
 8003e54:	438a      	bics	r2, r1
 8003e56:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	085b      	lsrs	r3, r3, #1
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2207      	movs	r2, #7
 8003e60:	4013      	ands	r3, r2
 8003e62:	b299      	uxth	r1, r3
 8003e64:	183b      	adds	r3, r7, r0
 8003e66:	183a      	adds	r2, r7, r0
 8003e68:	8812      	ldrh	r2, [r2, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	183a      	adds	r2, r7, r0
 8003e74:	8812      	ldrh	r2, [r2, #0]
 8003e76:	60da      	str	r2, [r3, #12]
 8003e78:	e060      	b.n	8003f3c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003e7a:	231e      	movs	r3, #30
 8003e7c:	18fb      	adds	r3, r7, r3
 8003e7e:	2201      	movs	r2, #1
 8003e80:	701a      	strb	r2, [r3, #0]
 8003e82:	e05b      	b.n	8003f3c <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e84:	231f      	movs	r3, #31
 8003e86:	18fb      	adds	r3, r7, r3
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d01f      	beq.n	8003ece <UART_SetConfig+0x242>
 8003e8e:	dc22      	bgt.n	8003ed6 <UART_SetConfig+0x24a>
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d017      	beq.n	8003ec4 <UART_SetConfig+0x238>
 8003e94:	dc1f      	bgt.n	8003ed6 <UART_SetConfig+0x24a>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <UART_SetConfig+0x214>
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d005      	beq.n	8003eaa <UART_SetConfig+0x21e>
 8003e9e:	e01a      	b.n	8003ed6 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ea0:	f7ff f848 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	61bb      	str	r3, [r7, #24]
        break;
 8003ea8:	e01c      	b.n	8003ee4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003eaa:	4b33      	ldr	r3, [pc, #204]	@ (8003f78 <UART_SetConfig+0x2ec>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	2207      	movs	r2, #7
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	0019      	movs	r1, r3
 8003eb8:	4831      	ldr	r0, [pc, #196]	@ (8003f80 <UART_SetConfig+0x2f4>)
 8003eba:	f7fc f925 	bl	8000108 <__udivsi3>
 8003ebe:	0003      	movs	r3, r0
 8003ec0:	61bb      	str	r3, [r7, #24]
        break;
 8003ec2:	e00f      	b.n	8003ee4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ec4:	f7fe ffc8 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8003ec8:	0003      	movs	r3, r0
 8003eca:	61bb      	str	r3, [r7, #24]
        break;
 8003ecc:	e00a      	b.n	8003ee4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ece:	2380      	movs	r3, #128	@ 0x80
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	61bb      	str	r3, [r7, #24]
        break;
 8003ed4:	e006      	b.n	8003ee4 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003eda:	231e      	movs	r3, #30
 8003edc:	18fb      	adds	r3, r7, r3
 8003ede:	2201      	movs	r2, #1
 8003ee0:	701a      	strb	r2, [r3, #0]
        break;
 8003ee2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d028      	beq.n	8003f3c <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eee:	4b25      	ldr	r3, [pc, #148]	@ (8003f84 <UART_SetConfig+0x2f8>)
 8003ef0:	0052      	lsls	r2, r2, #1
 8003ef2:	5ad3      	ldrh	r3, [r2, r3]
 8003ef4:	0019      	movs	r1, r3
 8003ef6:	69b8      	ldr	r0, [r7, #24]
 8003ef8:	f7fc f906 	bl	8000108 <__udivsi3>
 8003efc:	0003      	movs	r3, r0
 8003efe:	001a      	movs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	085b      	lsrs	r3, r3, #1
 8003f06:	18d2      	adds	r2, r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	0019      	movs	r1, r3
 8003f0e:	0010      	movs	r0, r2
 8003f10:	f7fc f8fa 	bl	8000108 <__udivsi3>
 8003f14:	0003      	movs	r3, r0
 8003f16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	2b0f      	cmp	r3, #15
 8003f1c:	d90a      	bls.n	8003f34 <UART_SetConfig+0x2a8>
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	2380      	movs	r3, #128	@ 0x80
 8003f22:	025b      	lsls	r3, r3, #9
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d205      	bcs.n	8003f34 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	60da      	str	r2, [r3, #12]
 8003f32:	e003      	b.n	8003f3c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003f34:	231e      	movs	r3, #30
 8003f36:	18fb      	adds	r3, r7, r3
 8003f38:	2201      	movs	r2, #1
 8003f3a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	226a      	movs	r2, #106	@ 0x6a
 8003f40:	2101      	movs	r1, #1
 8003f42:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2268      	movs	r2, #104	@ 0x68
 8003f48:	2101      	movs	r1, #1
 8003f4a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003f58:	231e      	movs	r3, #30
 8003f5a:	18fb      	adds	r3, r7, r3
 8003f5c:	781b      	ldrb	r3, [r3, #0]
}
 8003f5e:	0018      	movs	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	b008      	add	sp, #32
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	46c0      	nop			@ (mov r8, r8)
 8003f68:	cfff69f3 	.word	0xcfff69f3
 8003f6c:	ffffcfff 	.word	0xffffcfff
 8003f70:	11fff4ff 	.word	0x11fff4ff
 8003f74:	40013800 	.word	0x40013800
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40004400 	.word	0x40004400
 8003f80:	02dc6c00 	.word	0x02dc6c00
 8003f84:	08004884 	.word	0x08004884

08003f88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f94:	2208      	movs	r2, #8
 8003f96:	4013      	ands	r3, r2
 8003f98:	d00b      	beq.n	8003fb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	4a4a      	ldr	r2, [pc, #296]	@ (80040cc <UART_AdvFeatureConfig+0x144>)
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	0019      	movs	r1, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	4013      	ands	r3, r2
 8003fba:	d00b      	beq.n	8003fd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	4a43      	ldr	r2, [pc, #268]	@ (80040d0 <UART_AdvFeatureConfig+0x148>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	0019      	movs	r1, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd8:	2202      	movs	r2, #2
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d00b      	beq.n	8003ff6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	4a3b      	ldr	r2, [pc, #236]	@ (80040d4 <UART_AdvFeatureConfig+0x14c>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	0019      	movs	r1, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffa:	2204      	movs	r2, #4
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	d00b      	beq.n	8004018 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4a34      	ldr	r2, [pc, #208]	@ (80040d8 <UART_AdvFeatureConfig+0x150>)
 8004008:	4013      	ands	r3, r2
 800400a:	0019      	movs	r1, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401c:	2210      	movs	r2, #16
 800401e:	4013      	ands	r3, r2
 8004020:	d00b      	beq.n	800403a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4a2c      	ldr	r2, [pc, #176]	@ (80040dc <UART_AdvFeatureConfig+0x154>)
 800402a:	4013      	ands	r3, r2
 800402c:	0019      	movs	r1, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403e:	2220      	movs	r2, #32
 8004040:	4013      	ands	r3, r2
 8004042:	d00b      	beq.n	800405c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	4a25      	ldr	r2, [pc, #148]	@ (80040e0 <UART_AdvFeatureConfig+0x158>)
 800404c:	4013      	ands	r3, r2
 800404e:	0019      	movs	r1, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004060:	2240      	movs	r2, #64	@ 0x40
 8004062:	4013      	ands	r3, r2
 8004064:	d01d      	beq.n	80040a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	4a1d      	ldr	r2, [pc, #116]	@ (80040e4 <UART_AdvFeatureConfig+0x15c>)
 800406e:	4013      	ands	r3, r2
 8004070:	0019      	movs	r1, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004082:	2380      	movs	r3, #128	@ 0x80
 8004084:	035b      	lsls	r3, r3, #13
 8004086:	429a      	cmp	r2, r3
 8004088:	d10b      	bne.n	80040a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	4a15      	ldr	r2, [pc, #84]	@ (80040e8 <UART_AdvFeatureConfig+0x160>)
 8004092:	4013      	ands	r3, r2
 8004094:	0019      	movs	r1, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a6:	2280      	movs	r2, #128	@ 0x80
 80040a8:	4013      	ands	r3, r2
 80040aa:	d00b      	beq.n	80040c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	4a0e      	ldr	r2, [pc, #56]	@ (80040ec <UART_AdvFeatureConfig+0x164>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	0019      	movs	r1, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	605a      	str	r2, [r3, #4]
  }
}
 80040c4:	46c0      	nop			@ (mov r8, r8)
 80040c6:	46bd      	mov	sp, r7
 80040c8:	b002      	add	sp, #8
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	ffff7fff 	.word	0xffff7fff
 80040d0:	fffdffff 	.word	0xfffdffff
 80040d4:	fffeffff 	.word	0xfffeffff
 80040d8:	fffbffff 	.word	0xfffbffff
 80040dc:	ffffefff 	.word	0xffffefff
 80040e0:	ffffdfff 	.word	0xffffdfff
 80040e4:	ffefffff 	.word	0xffefffff
 80040e8:	ff9fffff 	.word	0xff9fffff
 80040ec:	fff7ffff 	.word	0xfff7ffff

080040f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b092      	sub	sp, #72	@ 0x48
 80040f4:	af02      	add	r7, sp, #8
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2290      	movs	r2, #144	@ 0x90
 80040fc:	2100      	movs	r1, #0
 80040fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004100:	f7fd f87c 	bl	80011fc <HAL_GetTick>
 8004104:	0003      	movs	r3, r0
 8004106:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2208      	movs	r2, #8
 8004110:	4013      	ands	r3, r2
 8004112:	2b08      	cmp	r3, #8
 8004114:	d12d      	bne.n	8004172 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004118:	2280      	movs	r2, #128	@ 0x80
 800411a:	0391      	lsls	r1, r2, #14
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	4a47      	ldr	r2, [pc, #284]	@ (800423c <UART_CheckIdleState+0x14c>)
 8004120:	9200      	str	r2, [sp, #0]
 8004122:	2200      	movs	r2, #0
 8004124:	f000 f88e 	bl	8004244 <UART_WaitOnFlagUntilTimeout>
 8004128:	1e03      	subs	r3, r0, #0
 800412a:	d022      	beq.n	8004172 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800412c:	f3ef 8310 	mrs	r3, PRIMASK
 8004130:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004134:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004136:	2301      	movs	r3, #1
 8004138:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800413a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413c:	f383 8810 	msr	PRIMASK, r3
}
 8004140:	46c0      	nop			@ (mov r8, r8)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2180      	movs	r1, #128	@ 0x80
 800414e:	438a      	bics	r2, r1
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004154:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004158:	f383 8810 	msr	PRIMASK, r3
}
 800415c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2288      	movs	r2, #136	@ 0x88
 8004162:	2120      	movs	r1, #32
 8004164:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2284      	movs	r2, #132	@ 0x84
 800416a:	2100      	movs	r1, #0
 800416c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e060      	b.n	8004234 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2204      	movs	r2, #4
 800417a:	4013      	ands	r3, r2
 800417c:	2b04      	cmp	r3, #4
 800417e:	d146      	bne.n	800420e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004182:	2280      	movs	r2, #128	@ 0x80
 8004184:	03d1      	lsls	r1, r2, #15
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	4a2c      	ldr	r2, [pc, #176]	@ (800423c <UART_CheckIdleState+0x14c>)
 800418a:	9200      	str	r2, [sp, #0]
 800418c:	2200      	movs	r2, #0
 800418e:	f000 f859 	bl	8004244 <UART_WaitOnFlagUntilTimeout>
 8004192:	1e03      	subs	r3, r0, #0
 8004194:	d03b      	beq.n	800420e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004196:	f3ef 8310 	mrs	r3, PRIMASK
 800419a:	60fb      	str	r3, [r7, #12]
  return(result);
 800419c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800419e:	637b      	str	r3, [r7, #52]	@ 0x34
 80041a0:	2301      	movs	r3, #1
 80041a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f383 8810 	msr	PRIMASK, r3
}
 80041aa:	46c0      	nop			@ (mov r8, r8)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4922      	ldr	r1, [pc, #136]	@ (8004240 <UART_CheckIdleState+0x150>)
 80041b8:	400a      	ands	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f383 8810 	msr	PRIMASK, r3
}
 80041c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80041c8:	f3ef 8310 	mrs	r3, PRIMASK
 80041cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80041ce:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80041d2:	2301      	movs	r3, #1
 80041d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	f383 8810 	msr	PRIMASK, r3
}
 80041dc:	46c0      	nop			@ (mov r8, r8)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2101      	movs	r1, #1
 80041ea:	438a      	bics	r2, r1
 80041ec:	609a      	str	r2, [r3, #8]
 80041ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	f383 8810 	msr	PRIMASK, r3
}
 80041f8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	228c      	movs	r2, #140	@ 0x8c
 80041fe:	2120      	movs	r1, #32
 8004200:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2284      	movs	r2, #132	@ 0x84
 8004206:	2100      	movs	r1, #0
 8004208:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e012      	b.n	8004234 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2288      	movs	r2, #136	@ 0x88
 8004212:	2120      	movs	r1, #32
 8004214:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	228c      	movs	r2, #140	@ 0x8c
 800421a:	2120      	movs	r1, #32
 800421c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2284      	movs	r2, #132	@ 0x84
 800422e:	2100      	movs	r1, #0
 8004230:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	0018      	movs	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	b010      	add	sp, #64	@ 0x40
 800423a:	bd80      	pop	{r7, pc}
 800423c:	01ffffff 	.word	0x01ffffff
 8004240:	fffffedf 	.word	0xfffffedf

08004244 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	603b      	str	r3, [r7, #0]
 8004250:	1dfb      	adds	r3, r7, #7
 8004252:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004254:	e051      	b.n	80042fa <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	3301      	adds	r3, #1
 800425a:	d04e      	beq.n	80042fa <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425c:	f7fc ffce 	bl	80011fc <HAL_GetTick>
 8004260:	0002      	movs	r2, r0
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	429a      	cmp	r2, r3
 800426a:	d302      	bcc.n	8004272 <UART_WaitOnFlagUntilTimeout+0x2e>
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e051      	b.n	800431a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2204      	movs	r2, #4
 800427e:	4013      	ands	r3, r2
 8004280:	d03b      	beq.n	80042fa <UART_WaitOnFlagUntilTimeout+0xb6>
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b80      	cmp	r3, #128	@ 0x80
 8004286:	d038      	beq.n	80042fa <UART_WaitOnFlagUntilTimeout+0xb6>
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2b40      	cmp	r3, #64	@ 0x40
 800428c:	d035      	beq.n	80042fa <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	2208      	movs	r2, #8
 8004296:	4013      	ands	r3, r2
 8004298:	2b08      	cmp	r3, #8
 800429a:	d111      	bne.n	80042c0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2208      	movs	r2, #8
 80042a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	0018      	movs	r0, r3
 80042a8:	f000 f922 	bl	80044f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2290      	movs	r2, #144	@ 0x90
 80042b0:	2108      	movs	r1, #8
 80042b2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2284      	movs	r2, #132	@ 0x84
 80042b8:	2100      	movs	r1, #0
 80042ba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e02c      	b.n	800431a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	69da      	ldr	r2, [r3, #28]
 80042c6:	2380      	movs	r3, #128	@ 0x80
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	401a      	ands	r2, r3
 80042cc:	2380      	movs	r3, #128	@ 0x80
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d112      	bne.n	80042fa <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2280      	movs	r2, #128	@ 0x80
 80042da:	0112      	lsls	r2, r2, #4
 80042dc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	0018      	movs	r0, r3
 80042e2:	f000 f905 	bl	80044f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2290      	movs	r2, #144	@ 0x90
 80042ea:	2120      	movs	r1, #32
 80042ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2284      	movs	r2, #132	@ 0x84
 80042f2:	2100      	movs	r1, #0
 80042f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e00f      	b.n	800431a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	4013      	ands	r3, r2
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	425a      	negs	r2, r3
 800430a:	4153      	adcs	r3, r2
 800430c:	b2db      	uxtb	r3, r3
 800430e:	001a      	movs	r2, r3
 8004310:	1dfb      	adds	r3, r7, #7
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d09e      	beq.n	8004256 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	0018      	movs	r0, r3
 800431c:	46bd      	mov	sp, r7
 800431e:	b004      	add	sp, #16
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b090      	sub	sp, #64	@ 0x40
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	1dbb      	adds	r3, r7, #6
 8004330:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	1dba      	adds	r2, r7, #6
 800433c:	215c      	movs	r1, #92	@ 0x5c
 800433e:	8812      	ldrh	r2, [r2, #0]
 8004340:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2290      	movs	r2, #144	@ 0x90
 8004346:	2100      	movs	r1, #0
 8004348:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	228c      	movs	r2, #140	@ 0x8c
 800434e:	2122      	movs	r1, #34	@ 0x22
 8004350:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2280      	movs	r2, #128	@ 0x80
 8004356:	589b      	ldr	r3, [r3, r2]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d02d      	beq.n	80043b8 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2280      	movs	r2, #128	@ 0x80
 8004360:	589b      	ldr	r3, [r3, r2]
 8004362:	4a40      	ldr	r2, [pc, #256]	@ (8004464 <UART_Start_Receive_DMA+0x140>)
 8004364:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2280      	movs	r2, #128	@ 0x80
 800436a:	589b      	ldr	r3, [r3, r2]
 800436c:	4a3e      	ldr	r2, [pc, #248]	@ (8004468 <UART_Start_Receive_DMA+0x144>)
 800436e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2280      	movs	r2, #128	@ 0x80
 8004374:	589b      	ldr	r3, [r3, r2]
 8004376:	4a3d      	ldr	r2, [pc, #244]	@ (800446c <UART_Start_Receive_DMA+0x148>)
 8004378:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2280      	movs	r2, #128	@ 0x80
 800437e:	589b      	ldr	r3, [r3, r2]
 8004380:	2200      	movs	r2, #0
 8004382:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2280      	movs	r2, #128	@ 0x80
 8004388:	5898      	ldr	r0, [r3, r2]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3324      	adds	r3, #36	@ 0x24
 8004390:	0019      	movs	r1, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004396:	001a      	movs	r2, r3
 8004398:	1dbb      	adds	r3, r7, #6
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	f7fd f8a0 	bl	80014e0 <HAL_DMA_Start_IT>
 80043a0:	1e03      	subs	r3, r0, #0
 80043a2:	d009      	beq.n	80043b8 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2290      	movs	r2, #144	@ 0x90
 80043a8:	2110      	movs	r1, #16
 80043aa:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	228c      	movs	r2, #140	@ 0x8c
 80043b0:	2120      	movs	r1, #32
 80043b2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e050      	b.n	800445a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d019      	beq.n	80043f4 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043c0:	f3ef 8310 	mrs	r3, PRIMASK
 80043c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80043c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043ca:	2301      	movs	r3, #1
 80043cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d0:	f383 8810 	msr	PRIMASK, r3
}
 80043d4:	46c0      	nop			@ (mov r8, r8)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2180      	movs	r1, #128	@ 0x80
 80043e2:	0049      	lsls	r1, r1, #1
 80043e4:	430a      	orrs	r2, r1
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ea:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ee:	f383 8810 	msr	PRIMASK, r3
}
 80043f2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043f4:	f3ef 8310 	mrs	r3, PRIMASK
 80043f8:	613b      	str	r3, [r7, #16]
  return(result);
 80043fa:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043fe:	2301      	movs	r3, #1
 8004400:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f383 8810 	msr	PRIMASK, r3
}
 8004408:	46c0      	nop			@ (mov r8, r8)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2101      	movs	r1, #1
 8004416:	430a      	orrs	r2, r1
 8004418:	609a      	str	r2, [r3, #8]
 800441a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800441c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	f383 8810 	msr	PRIMASK, r3
}
 8004424:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004426:	f3ef 8310 	mrs	r3, PRIMASK
 800442a:	61fb      	str	r3, [r7, #28]
  return(result);
 800442c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800442e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004430:	2301      	movs	r3, #1
 8004432:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	f383 8810 	msr	PRIMASK, r3
}
 800443a:	46c0      	nop			@ (mov r8, r8)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2140      	movs	r1, #64	@ 0x40
 8004448:	430a      	orrs	r2, r1
 800444a:	609a      	str	r2, [r3, #8]
 800444c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800444e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004452:	f383 8810 	msr	PRIMASK, r3
}
 8004456:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	0018      	movs	r0, r3
 800445c:	46bd      	mov	sp, r7
 800445e:	b010      	add	sp, #64	@ 0x40
 8004460:	bd80      	pop	{r7, pc}
 8004462:	46c0      	nop			@ (mov r8, r8)
 8004464:	080045bd 	.word	0x080045bd
 8004468:	080046ed 	.word	0x080046ed
 800446c:	0800472f 	.word	0x0800472f

08004470 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b08a      	sub	sp, #40	@ 0x28
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004478:	f3ef 8310 	mrs	r3, PRIMASK
 800447c:	60bb      	str	r3, [r7, #8]
  return(result);
 800447e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004480:	627b      	str	r3, [r7, #36]	@ 0x24
 8004482:	2301      	movs	r3, #1
 8004484:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f383 8810 	msr	PRIMASK, r3
}
 800448c:	46c0      	nop			@ (mov r8, r8)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	21c0      	movs	r1, #192	@ 0xc0
 800449a:	438a      	bics	r2, r1
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f383 8810 	msr	PRIMASK, r3
}
 80044a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80044aa:	f3ef 8310 	mrs	r3, PRIMASK
 80044ae:	617b      	str	r3, [r7, #20]
  return(result);
 80044b0:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80044b2:	623b      	str	r3, [r7, #32]
 80044b4:	2301      	movs	r3, #1
 80044b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	f383 8810 	msr	PRIMASK, r3
}
 80044be:	46c0      	nop			@ (mov r8, r8)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4908      	ldr	r1, [pc, #32]	@ (80044ec <UART_EndTxTransfer+0x7c>)
 80044cc:	400a      	ands	r2, r1
 80044ce:	609a      	str	r2, [r3, #8]
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	f383 8810 	msr	PRIMASK, r3
}
 80044da:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2288      	movs	r2, #136	@ 0x88
 80044e0:	2120      	movs	r1, #32
 80044e2:	5099      	str	r1, [r3, r2]
}
 80044e4:	46c0      	nop			@ (mov r8, r8)
 80044e6:	46bd      	mov	sp, r7
 80044e8:	b00a      	add	sp, #40	@ 0x28
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	ff7fffff 	.word	0xff7fffff

080044f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08e      	sub	sp, #56	@ 0x38
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80044f8:	f3ef 8310 	mrs	r3, PRIMASK
 80044fc:	617b      	str	r3, [r7, #20]
  return(result);
 80044fe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004500:	637b      	str	r3, [r7, #52]	@ 0x34
 8004502:	2301      	movs	r3, #1
 8004504:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	f383 8810 	msr	PRIMASK, r3
}
 800450c:	46c0      	nop			@ (mov r8, r8)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4926      	ldr	r1, [pc, #152]	@ (80045b4 <UART_EndRxTransfer+0xc4>)
 800451a:	400a      	ands	r2, r1
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004520:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	f383 8810 	msr	PRIMASK, r3
}
 8004528:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800452a:	f3ef 8310 	mrs	r3, PRIMASK
 800452e:	623b      	str	r3, [r7, #32]
  return(result);
 8004530:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004532:	633b      	str	r3, [r7, #48]	@ 0x30
 8004534:	2301      	movs	r3, #1
 8004536:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453a:	f383 8810 	msr	PRIMASK, r3
}
 800453e:	46c0      	nop			@ (mov r8, r8)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	491b      	ldr	r1, [pc, #108]	@ (80045b8 <UART_EndRxTransfer+0xc8>)
 800454c:	400a      	ands	r2, r1
 800454e:	609a      	str	r2, [r3, #8]
 8004550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004552:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004556:	f383 8810 	msr	PRIMASK, r3
}
 800455a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004560:	2b01      	cmp	r3, #1
 8004562:	d118      	bne.n	8004596 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004564:	f3ef 8310 	mrs	r3, PRIMASK
 8004568:	60bb      	str	r3, [r7, #8]
  return(result);
 800456a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800456c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800456e:	2301      	movs	r3, #1
 8004570:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f383 8810 	msr	PRIMASK, r3
}
 8004578:	46c0      	nop			@ (mov r8, r8)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2110      	movs	r1, #16
 8004586:	438a      	bics	r2, r1
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800458c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f383 8810 	msr	PRIMASK, r3
}
 8004594:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	228c      	movs	r2, #140	@ 0x8c
 800459a:	2120      	movs	r1, #32
 800459c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80045aa:	46c0      	nop			@ (mov r8, r8)
 80045ac:	46bd      	mov	sp, r7
 80045ae:	b00e      	add	sp, #56	@ 0x38
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	46c0      	nop			@ (mov r8, r8)
 80045b4:	fffffedf 	.word	0xfffffedf
 80045b8:	effffffe 	.word	0xeffffffe

080045bc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b094      	sub	sp, #80	@ 0x50
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2220      	movs	r2, #32
 80045d2:	4013      	ands	r3, r2
 80045d4:	d16f      	bne.n	80046b6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80045d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045d8:	225e      	movs	r2, #94	@ 0x5e
 80045da:	2100      	movs	r1, #0
 80045dc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80045de:	f3ef 8310 	mrs	r3, PRIMASK
 80045e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80045e4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045e8:	2301      	movs	r3, #1
 80045ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	f383 8810 	msr	PRIMASK, r3
}
 80045f2:	46c0      	nop			@ (mov r8, r8)
 80045f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	493a      	ldr	r1, [pc, #232]	@ (80046e8 <UART_DMAReceiveCplt+0x12c>)
 8004600:	400a      	ands	r2, r1
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004606:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	f383 8810 	msr	PRIMASK, r3
}
 800460e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004610:	f3ef 8310 	mrs	r3, PRIMASK
 8004614:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004618:	647b      	str	r3, [r7, #68]	@ 0x44
 800461a:	2301      	movs	r3, #1
 800461c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004620:	f383 8810 	msr	PRIMASK, r3
}
 8004624:	46c0      	nop			@ (mov r8, r8)
 8004626:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2101      	movs	r1, #1
 8004632:	438a      	bics	r2, r1
 8004634:	609a      	str	r2, [r3, #8]
 8004636:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004638:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800463a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800463c:	f383 8810 	msr	PRIMASK, r3
}
 8004640:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004642:	f3ef 8310 	mrs	r3, PRIMASK
 8004646:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800464a:	643b      	str	r3, [r7, #64]	@ 0x40
 800464c:	2301      	movs	r3, #1
 800464e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004652:	f383 8810 	msr	PRIMASK, r3
}
 8004656:	46c0      	nop			@ (mov r8, r8)
 8004658:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689a      	ldr	r2, [r3, #8]
 800465e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2140      	movs	r1, #64	@ 0x40
 8004664:	438a      	bics	r2, r1
 8004666:	609a      	str	r2, [r3, #8]
 8004668:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800466a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800466e:	f383 8810 	msr	PRIMASK, r3
}
 8004672:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004674:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004676:	228c      	movs	r2, #140	@ 0x8c
 8004678:	2120      	movs	r1, #32
 800467a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800467c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800467e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004680:	2b01      	cmp	r3, #1
 8004682:	d118      	bne.n	80046b6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004684:	f3ef 8310 	mrs	r3, PRIMASK
 8004688:	60fb      	str	r3, [r7, #12]
  return(result);
 800468a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800468c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800468e:	2301      	movs	r3, #1
 8004690:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f383 8810 	msr	PRIMASK, r3
}
 8004698:	46c0      	nop			@ (mov r8, r8)
 800469a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2110      	movs	r1, #16
 80046a6:	438a      	bics	r2, r1
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f383 8810 	msr	PRIMASK, r3
}
 80046b4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046b8:	2200      	movs	r2, #0
 80046ba:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d108      	bne.n	80046d6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046c6:	225c      	movs	r2, #92	@ 0x5c
 80046c8:	5a9a      	ldrh	r2, [r3, r2]
 80046ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046cc:	0011      	movs	r1, r2
 80046ce:	0018      	movs	r0, r3
 80046d0:	f7ff fad1 	bl	8003c76 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80046d4:	e003      	b.n	80046de <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 80046d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046d8:	0018      	movs	r0, r3
 80046da:	f7ff fab4 	bl	8003c46 <HAL_UART_RxCpltCallback>
}
 80046de:	46c0      	nop			@ (mov r8, r8)
 80046e0:	46bd      	mov	sp, r7
 80046e2:	b014      	add	sp, #80	@ 0x50
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	46c0      	nop			@ (mov r8, r8)
 80046e8:	fffffeff 	.word	0xfffffeff

080046ec <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2201      	movs	r2, #1
 80046fe:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004704:	2b01      	cmp	r3, #1
 8004706:	d10a      	bne.n	800471e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	225c      	movs	r2, #92	@ 0x5c
 800470c:	5a9b      	ldrh	r3, [r3, r2]
 800470e:	085b      	lsrs	r3, r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	0011      	movs	r1, r2
 8004716:	0018      	movs	r0, r3
 8004718:	f7ff faad 	bl	8003c76 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800471c:	e003      	b.n	8004726 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	0018      	movs	r0, r3
 8004722:	f7ff fa98 	bl	8003c56 <HAL_UART_RxHalfCpltCallback>
}
 8004726:	46c0      	nop			@ (mov r8, r8)
 8004728:	46bd      	mov	sp, r7
 800472a:	b004      	add	sp, #16
 800472c:	bd80      	pop	{r7, pc}

0800472e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b086      	sub	sp, #24
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2288      	movs	r2, #136	@ 0x88
 8004740:	589b      	ldr	r3, [r3, r2]
 8004742:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	228c      	movs	r2, #140	@ 0x8c
 8004748:	589b      	ldr	r3, [r3, r2]
 800474a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2280      	movs	r2, #128	@ 0x80
 8004754:	4013      	ands	r3, r2
 8004756:	2b80      	cmp	r3, #128	@ 0x80
 8004758:	d10a      	bne.n	8004770 <UART_DMAError+0x42>
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	2b21      	cmp	r3, #33	@ 0x21
 800475e:	d107      	bne.n	8004770 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2256      	movs	r2, #86	@ 0x56
 8004764:	2100      	movs	r1, #0
 8004766:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	0018      	movs	r0, r3
 800476c:	f7ff fe80 	bl	8004470 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	2240      	movs	r2, #64	@ 0x40
 8004778:	4013      	ands	r3, r2
 800477a:	2b40      	cmp	r3, #64	@ 0x40
 800477c:	d10a      	bne.n	8004794 <UART_DMAError+0x66>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2b22      	cmp	r3, #34	@ 0x22
 8004782:	d107      	bne.n	8004794 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	225e      	movs	r2, #94	@ 0x5e
 8004788:	2100      	movs	r1, #0
 800478a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	0018      	movs	r0, r3
 8004790:	f7ff feae 	bl	80044f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2290      	movs	r2, #144	@ 0x90
 8004798:	589b      	ldr	r3, [r3, r2]
 800479a:	2210      	movs	r2, #16
 800479c:	431a      	orrs	r2, r3
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2190      	movs	r1, #144	@ 0x90
 80047a2:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	0018      	movs	r0, r3
 80047a8:	f7ff fa5d 	bl	8003c66 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047ac:	46c0      	nop			@ (mov r8, r8)
 80047ae:	46bd      	mov	sp, r7
 80047b0:	b006      	add	sp, #24
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <memset>:
 80047b4:	0003      	movs	r3, r0
 80047b6:	1882      	adds	r2, r0, r2
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d100      	bne.n	80047be <memset+0xa>
 80047bc:	4770      	bx	lr
 80047be:	7019      	strb	r1, [r3, #0]
 80047c0:	3301      	adds	r3, #1
 80047c2:	e7f9      	b.n	80047b8 <memset+0x4>

080047c4 <__libc_init_array>:
 80047c4:	b570      	push	{r4, r5, r6, lr}
 80047c6:	2600      	movs	r6, #0
 80047c8:	4c0c      	ldr	r4, [pc, #48]	@ (80047fc <__libc_init_array+0x38>)
 80047ca:	4d0d      	ldr	r5, [pc, #52]	@ (8004800 <__libc_init_array+0x3c>)
 80047cc:	1b64      	subs	r4, r4, r5
 80047ce:	10a4      	asrs	r4, r4, #2
 80047d0:	42a6      	cmp	r6, r4
 80047d2:	d109      	bne.n	80047e8 <__libc_init_array+0x24>
 80047d4:	2600      	movs	r6, #0
 80047d6:	f000 f819 	bl	800480c <_init>
 80047da:	4c0a      	ldr	r4, [pc, #40]	@ (8004804 <__libc_init_array+0x40>)
 80047dc:	4d0a      	ldr	r5, [pc, #40]	@ (8004808 <__libc_init_array+0x44>)
 80047de:	1b64      	subs	r4, r4, r5
 80047e0:	10a4      	asrs	r4, r4, #2
 80047e2:	42a6      	cmp	r6, r4
 80047e4:	d105      	bne.n	80047f2 <__libc_init_array+0x2e>
 80047e6:	bd70      	pop	{r4, r5, r6, pc}
 80047e8:	00b3      	lsls	r3, r6, #2
 80047ea:	58eb      	ldr	r3, [r5, r3]
 80047ec:	4798      	blx	r3
 80047ee:	3601      	adds	r6, #1
 80047f0:	e7ee      	b.n	80047d0 <__libc_init_array+0xc>
 80047f2:	00b3      	lsls	r3, r6, #2
 80047f4:	58eb      	ldr	r3, [r5, r3]
 80047f6:	4798      	blx	r3
 80047f8:	3601      	adds	r6, #1
 80047fa:	e7f2      	b.n	80047e2 <__libc_init_array+0x1e>
 80047fc:	0800489c 	.word	0x0800489c
 8004800:	0800489c 	.word	0x0800489c
 8004804:	080048a0 	.word	0x080048a0
 8004808:	0800489c 	.word	0x0800489c

0800480c <_init>:
 800480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480e:	46c0      	nop			@ (mov r8, r8)
 8004810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004812:	bc08      	pop	{r3}
 8004814:	469e      	mov	lr, r3
 8004816:	4770      	bx	lr

08004818 <_fini>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	46c0      	nop			@ (mov r8, r8)
 800481c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481e:	bc08      	pop	{r3}
 8004820:	469e      	mov	lr, r3
 8004822:	4770      	bx	lr
