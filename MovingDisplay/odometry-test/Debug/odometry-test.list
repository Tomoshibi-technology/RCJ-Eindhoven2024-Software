
odometry-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004704  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080047c4  080047c4  000057c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800483c  0800483c  00006090  2**0
                  CONTENTS
  4 .ARM          00000000  0800483c  0800483c  00006090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800483c  0800483c  00006090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800483c  0800483c  0000583c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004840  08004840  00005840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08004844  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000090  080048d4  00006090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  080048d4  00006270  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d8c  00000000  00000000  000060b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000232f  00000000  00000000  00017e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  0001a178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cab  00000000  00000000  0001b150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014464  00000000  00000000  0001bdfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001425d  00000000  00000000  0003025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008182c  00000000  00000000  000444bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5ce8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a50  00000000  00000000  000c5d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000c977c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000090 	.word	0x20000090
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080047ac 	.word	0x080047ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000094 	.word	0x20000094
 8000104:	080047ac 	.word	0x080047ac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <readCounter>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint64_t readCounter()
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  return (counter*65535) + TIM3->CNT;
 80003f8:	4b08      	ldr	r3, [pc, #32]	@ (800041c <readCounter+0x28>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	0013      	movs	r3, r2
 80003fe:	041b      	lsls	r3, r3, #16
 8000400:	1a9a      	subs	r2, r3, r2
 8000402:	4b07      	ldr	r3, [pc, #28]	@ (8000420 <readCounter+0x2c>)
 8000404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000406:	18d3      	adds	r3, r2, r3
 8000408:	0018      	movs	r0, r3
 800040a:	2300      	movs	r3, #0
 800040c:	0019      	movs	r1, r3
 800040e:	0002      	movs	r2, r0
 8000410:	000b      	movs	r3, r1
}
 8000412:	0010      	movs	r0, r2
 8000414:	0019      	movs	r1, r3
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			@ (mov r8, r8)
 800041c:	20000258 	.word	0x20000258
 8000420:	40000400 	.word	0x40000400

08000424 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
    if (htim == &htim3){
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	4b06      	ldr	r3, [pc, #24]	@ (8000448 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000430:	429a      	cmp	r2, r3
 8000432:	d104      	bne.n	800043e <HAL_TIM_PeriodElapsedCallback+0x1a>
        counter++;
 8000434:	4b05      	ldr	r3, [pc, #20]	@ (800044c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	1c5a      	adds	r2, r3, #1
 800043a:	4b04      	ldr	r3, [pc, #16]	@ (800044c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800043c:	601a      	str	r2, [r3, #0]
    }
}
 800043e:	46c0      	nop			@ (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	b002      	add	sp, #8
 8000444:	bd80      	pop	{r7, pc}
 8000446:	46c0      	nop			@ (mov r8, r8)
 8000448:	20000100 	.word	0x20000100
 800044c:	20000258 	.word	0x20000258

08000450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000452:	b08d      	sub	sp, #52	@ 0x34
 8000454:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000456:	f000 fe2e 	bl	80010b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045a:	f000 fa05 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800045e:	f000 fb2f 	bl	8000ac0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000462:	f000 fb0f 	bl	8000a84 <MX_DMA_Init>
  MX_I2C1_Init();
 8000466:	f000 fa43 	bl	80008f0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800046a:	f000 fad7 	bl	8000a1c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800046e:	f000 fa7f 	bl	8000970 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000472:	4b98      	ldr	r3, [pc, #608]	@ (80006d4 <main+0x284>)
 8000474:	0018      	movs	r0, r3
 8000476:	f002 fe89 	bl	800318c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t AS5600_ADDR = 0x36 << 1;
 800047a:	260a      	movs	r6, #10
 800047c:	19bb      	adds	r3, r7, r6
 800047e:	226c      	movs	r2, #108	@ 0x6c
 8000480:	801a      	strh	r2, [r3, #0]
  uint8_t ANGLE_ADDR = 0x0E;
 8000482:	2308      	movs	r3, #8
 8000484:	18fb      	adds	r3, r7, r3
 8000486:	220e      	movs	r2, #14
 8000488:	701a      	strb	r2, [r3, #0]
  uint8_t ID;

  uint32_t d_pcounter, Ltika_pcounter, buf_pcounter;
  d_pcounter = Ltika_pcounter = readCounter();
 800048a:	f7ff ffb3 	bl	80003f4 <readCounter>
 800048e:	0002      	movs	r2, r0
 8000490:	000b      	movs	r3, r1
 8000492:	0013      	movs	r3, r2
 8000494:	613b      	str	r3, [r7, #16]
 8000496:	693b      	ldr	r3, [r7, #16]
 8000498:	617b      	str	r3, [r7, #20]

  if(readID() < 2){
 800049a:	f000 fc2a 	bl	8000cf2 <readID>
 800049e:	0003      	movs	r3, r0
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d833      	bhi.n	800050c <main+0xbc>
	  ID = readID();//自身のID
 80004a4:	2209      	movs	r2, #9
 80004a6:	18be      	adds	r6, r7, r2
 80004a8:	f000 fc23 	bl	8000cf2 <readID>
 80004ac:	0003      	movs	r3, r0
 80004ae:	7033      	strb	r3, [r6, #0]
	    	Ltika_pcounter = readCounter();
		  }else{}
	  }
  }

  HAL_UART_Receive_DMA(&huart2,rxBufB,128);
 80004b0:	4989      	ldr	r1, [pc, #548]	@ (80006d8 <main+0x288>)
 80004b2:	4b8a      	ldr	r3, [pc, #552]	@ (80006dc <main+0x28c>)
 80004b4:	2280      	movs	r2, #128	@ 0x80
 80004b6:	0018      	movs	r0, r3
 80004b8:	f003 fb3e 	bl	8003b38 <HAL_UART_Receive_DMA>

  HAL_I2C_Master_Transmit(&hi2c1, AS5600_ADDR, &ANGLE_ADDR, 1, 10);
 80004bc:	2308      	movs	r3, #8
 80004be:	18fa      	adds	r2, r7, r3
 80004c0:	260a      	movs	r6, #10
 80004c2:	19bb      	adds	r3, r7, r6
 80004c4:	8819      	ldrh	r1, [r3, #0]
 80004c6:	4886      	ldr	r0, [pc, #536]	@ (80006e0 <main+0x290>)
 80004c8:	230a      	movs	r3, #10
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2301      	movs	r3, #1
 80004ce:	f001 fc07 	bl	8001ce0 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, AS5600_ADDR, rxBufA, 2, 10);
 80004d2:	4a84      	ldr	r2, [pc, #528]	@ (80006e4 <main+0x294>)
 80004d4:	19bb      	adds	r3, r7, r6
 80004d6:	8819      	ldrh	r1, [r3, #0]
 80004d8:	4881      	ldr	r0, [pc, #516]	@ (80006e0 <main+0x290>)
 80004da:	230a      	movs	r3, #10
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2302      	movs	r3, #2
 80004e0:	f001 fd28 	bl	8001f34 <HAL_I2C_Master_Receive>

  pAngle = rxBufA[0]*256 + rxBufA[1];
 80004e4:	4b7f      	ldr	r3, [pc, #508]	@ (80006e4 <main+0x294>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	021b      	lsls	r3, r3, #8
 80004ea:	b29b      	uxth	r3, r3
 80004ec:	4a7d      	ldr	r2, [pc, #500]	@ (80006e4 <main+0x294>)
 80004ee:	7852      	ldrb	r2, [r2, #1]
 80004f0:	189b      	adds	r3, r3, r2
 80004f2:	b29a      	uxth	r2, r3
 80004f4:	4b7c      	ldr	r3, [pc, #496]	@ (80006e8 <main+0x298>)
 80004f6:	801a      	strh	r2, [r3, #0]
  ptotalAng = firstAng = pAngle;
 80004f8:	4b7b      	ldr	r3, [pc, #492]	@ (80006e8 <main+0x298>)
 80004fa:	881a      	ldrh	r2, [r3, #0]
 80004fc:	4b7b      	ldr	r3, [pc, #492]	@ (80006ec <main+0x29c>)
 80004fe:	801a      	strh	r2, [r3, #0]
 8000500:	4b7a      	ldr	r3, [pc, #488]	@ (80006ec <main+0x29c>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	001a      	movs	r2, r3
 8000506:	4b7a      	ldr	r3, [pc, #488]	@ (80006f0 <main+0x2a0>)
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	e01e      	b.n	800054a <main+0xfa>
		  if(readCounter() - Ltika_pcounter > 10000){
 800050c:	f7ff ff72 	bl	80003f4 <readCounter>
 8000510:	0002      	movs	r2, r0
 8000512:	000b      	movs	r3, r1
 8000514:	6939      	ldr	r1, [r7, #16]
 8000516:	6039      	str	r1, [r7, #0]
 8000518:	2100      	movs	r1, #0
 800051a:	6079      	str	r1, [r7, #4]
 800051c:	6838      	ldr	r0, [r7, #0]
 800051e:	6879      	ldr	r1, [r7, #4]
 8000520:	1a12      	subs	r2, r2, r0
 8000522:	418b      	sbcs	r3, r1
 8000524:	2b00      	cmp	r3, #0
 8000526:	d103      	bne.n	8000530 <main+0xe0>
 8000528:	d1f0      	bne.n	800050c <main+0xbc>
 800052a:	4972      	ldr	r1, [pc, #456]	@ (80006f4 <main+0x2a4>)
 800052c:	428a      	cmp	r2, r1
 800052e:	d9ed      	bls.n	800050c <main+0xbc>
		  	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000530:	23a0      	movs	r3, #160	@ 0xa0
 8000532:	05db      	lsls	r3, r3, #23
 8000534:	2110      	movs	r1, #16
 8000536:	0018      	movs	r0, r3
 8000538:	f001 fb10 	bl	8001b5c <HAL_GPIO_TogglePin>
	    	Ltika_pcounter = readCounter();
 800053c:	f7ff ff5a 	bl	80003f4 <readCounter>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0013      	movs	r3, r2
 8000546:	613b      	str	r3, [r7, #16]
		  if(readCounter() - Ltika_pcounter > 10000){
 8000548:	e7e0      	b.n	800050c <main+0xbc>

  while (1)
  {
	u_counter = readCounter();
 800054a:	f7ff ff53 	bl	80003f4 <readCounter>
 800054e:	0002      	movs	r2, r0
 8000550:	000b      	movs	r3, r1
 8000552:	4969      	ldr	r1, [pc, #420]	@ (80006f8 <main+0x2a8>)
 8000554:	600a      	str	r2, [r1, #0]
 8000556:	604b      	str	r3, [r1, #4]

	HAL_I2C_Master_Transmit(&hi2c1, AS5600_ADDR, &ANGLE_ADDR, 1, 10);
 8000558:	2308      	movs	r3, #8
 800055a:	18fa      	adds	r2, r7, r3
 800055c:	260a      	movs	r6, #10
 800055e:	19bb      	adds	r3, r7, r6
 8000560:	8819      	ldrh	r1, [r3, #0]
 8000562:	485f      	ldr	r0, [pc, #380]	@ (80006e0 <main+0x290>)
 8000564:	230a      	movs	r3, #10
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2301      	movs	r3, #1
 800056a:	f001 fbb9 	bl	8001ce0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, AS5600_ADDR, rxBufA, 2, 10);
 800056e:	4a5d      	ldr	r2, [pc, #372]	@ (80006e4 <main+0x294>)
 8000570:	19bb      	adds	r3, r7, r6
 8000572:	8819      	ldrh	r1, [r3, #0]
 8000574:	485a      	ldr	r0, [pc, #360]	@ (80006e0 <main+0x290>)
 8000576:	230a      	movs	r3, #10
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2302      	movs	r3, #2
 800057c:	f001 fcda 	bl	8001f34 <HAL_I2C_Master_Receive>

	dtime = readCounter() - d_pcounter;
 8000580:	f7ff ff38 	bl	80003f4 <readCounter>
 8000584:	0002      	movs	r2, r0
 8000586:	000b      	movs	r3, r1
 8000588:	b292      	uxth	r2, r2
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	b29b      	uxth	r3, r3
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	b29a      	uxth	r2, r3
 8000592:	4b5a      	ldr	r3, [pc, #360]	@ (80006fc <main+0x2ac>)
 8000594:	801a      	strh	r2, [r3, #0]
	d_pcounter = d_pcounter + dtime;
 8000596:	4b59      	ldr	r3, [pc, #356]	@ (80006fc <main+0x2ac>)
 8000598:	881b      	ldrh	r3, [r3, #0]
 800059a:	001a      	movs	r2, r3
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	189b      	adds	r3, r3, r2
 80005a0:	617b      	str	r3, [r7, #20]

	Angle = rxBufA[0]*256 + rxBufA[1];
 80005a2:	4b50      	ldr	r3, [pc, #320]	@ (80006e4 <main+0x294>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	021b      	lsls	r3, r3, #8
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	4a4e      	ldr	r2, [pc, #312]	@ (80006e4 <main+0x294>)
 80005ac:	7852      	ldrb	r2, [r2, #1]
 80005ae:	189b      	adds	r3, r3, r2
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	4b53      	ldr	r3, [pc, #332]	@ (8000700 <main+0x2b0>)
 80005b4:	801a      	strh	r2, [r3, #0]

	if(Angle-pAngle>0 && abs(Angle-pAngle)<3000){
 80005b6:	4b52      	ldr	r3, [pc, #328]	@ (8000700 <main+0x2b0>)
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	001a      	movs	r2, r3
 80005bc:	4b4a      	ldr	r3, [pc, #296]	@ (80006e8 <main+0x298>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	dd1d      	ble.n	8000602 <main+0x1b2>
 80005c6:	4b4e      	ldr	r3, [pc, #312]	@ (8000700 <main+0x2b0>)
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	001a      	movs	r2, r3
 80005cc:	4b46      	ldr	r3, [pc, #280]	@ (80006e8 <main+0x298>)
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	4a4c      	ldr	r2, [pc, #304]	@ (8000704 <main+0x2b4>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	db14      	blt.n	8000602 <main+0x1b2>
 80005d8:	4b49      	ldr	r3, [pc, #292]	@ (8000700 <main+0x2b0>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	001a      	movs	r2, r3
 80005de:	4b42      	ldr	r3, [pc, #264]	@ (80006e8 <main+0x298>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	4a48      	ldr	r2, [pc, #288]	@ (8000708 <main+0x2b8>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	dc0b      	bgt.n	8000602 <main+0x1b2>
		totalAng = ptotalAng + (Angle-pAngle);
 80005ea:	4b45      	ldr	r3, [pc, #276]	@ (8000700 <main+0x2b0>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	001a      	movs	r2, r3
 80005f0:	4b3d      	ldr	r3, [pc, #244]	@ (80006e8 <main+0x298>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	1ad2      	subs	r2, r2, r3
 80005f6:	4b3e      	ldr	r3, [pc, #248]	@ (80006f0 <main+0x2a0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	18d2      	adds	r2, r2, r3
 80005fc:	4b43      	ldr	r3, [pc, #268]	@ (800070c <main+0x2bc>)
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	e08e      	b.n	8000720 <main+0x2d0>
	}else if(Angle-pAngle<0 && abs(Angle-pAngle)<3000){
 8000602:	4b3f      	ldr	r3, [pc, #252]	@ (8000700 <main+0x2b0>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	001a      	movs	r2, r3
 8000608:	4b37      	ldr	r3, [pc, #220]	@ (80006e8 <main+0x298>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	d51d      	bpl.n	800064c <main+0x1fc>
 8000610:	4b3b      	ldr	r3, [pc, #236]	@ (8000700 <main+0x2b0>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	001a      	movs	r2, r3
 8000616:	4b34      	ldr	r3, [pc, #208]	@ (80006e8 <main+0x298>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	1ad3      	subs	r3, r2, r3
 800061c:	4a39      	ldr	r2, [pc, #228]	@ (8000704 <main+0x2b4>)
 800061e:	4293      	cmp	r3, r2
 8000620:	db14      	blt.n	800064c <main+0x1fc>
 8000622:	4b37      	ldr	r3, [pc, #220]	@ (8000700 <main+0x2b0>)
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	001a      	movs	r2, r3
 8000628:	4b2f      	ldr	r3, [pc, #188]	@ (80006e8 <main+0x298>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	4a36      	ldr	r2, [pc, #216]	@ (8000708 <main+0x2b8>)
 8000630:	4293      	cmp	r3, r2
 8000632:	dc0b      	bgt.n	800064c <main+0x1fc>
		totalAng = ptotalAng + (Angle-pAngle);
 8000634:	4b32      	ldr	r3, [pc, #200]	@ (8000700 <main+0x2b0>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	001a      	movs	r2, r3
 800063a:	4b2b      	ldr	r3, [pc, #172]	@ (80006e8 <main+0x298>)
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	1ad2      	subs	r2, r2, r3
 8000640:	4b2b      	ldr	r3, [pc, #172]	@ (80006f0 <main+0x2a0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	18d2      	adds	r2, r2, r3
 8000646:	4b31      	ldr	r3, [pc, #196]	@ (800070c <main+0x2bc>)
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	e069      	b.n	8000720 <main+0x2d0>
	}else if(Angle-pAngle>0 && abs(Angle-pAngle)>3000){
 800064c:	4b2c      	ldr	r3, [pc, #176]	@ (8000700 <main+0x2b0>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	001a      	movs	r2, r3
 8000652:	4b25      	ldr	r3, [pc, #148]	@ (80006e8 <main+0x298>)
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	dd19      	ble.n	8000690 <main+0x240>
 800065c:	4b28      	ldr	r3, [pc, #160]	@ (8000700 <main+0x2b0>)
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	001a      	movs	r2, r3
 8000662:	4b21      	ldr	r3, [pc, #132]	@ (80006e8 <main+0x298>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	17da      	asrs	r2, r3, #31
 800066a:	189b      	adds	r3, r3, r2
 800066c:	4053      	eors	r3, r2
 800066e:	4a28      	ldr	r2, [pc, #160]	@ (8000710 <main+0x2c0>)
 8000670:	4293      	cmp	r3, r2
 8000672:	dd0d      	ble.n	8000690 <main+0x240>
		totalAng = ptotalAng - ((4095-Angle)+pAngle);
 8000674:	4b1e      	ldr	r3, [pc, #120]	@ (80006f0 <main+0x2a0>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	4b21      	ldr	r3, [pc, #132]	@ (8000700 <main+0x2b0>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	0019      	movs	r1, r3
 800067e:	4b25      	ldr	r3, [pc, #148]	@ (8000714 <main+0x2c4>)
 8000680:	1a5b      	subs	r3, r3, r1
 8000682:	4919      	ldr	r1, [pc, #100]	@ (80006e8 <main+0x298>)
 8000684:	8809      	ldrh	r1, [r1, #0]
 8000686:	185b      	adds	r3, r3, r1
 8000688:	1ad2      	subs	r2, r2, r3
 800068a:	4b20      	ldr	r3, [pc, #128]	@ (800070c <main+0x2bc>)
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	e047      	b.n	8000720 <main+0x2d0>
	}else if(Angle-pAngle<0 && abs(Angle-pAngle)>3000){
 8000690:	4b1b      	ldr	r3, [pc, #108]	@ (8000700 <main+0x2b0>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	001a      	movs	r2, r3
 8000696:	4b14      	ldr	r3, [pc, #80]	@ (80006e8 <main+0x298>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	d53c      	bpl.n	8000718 <main+0x2c8>
 800069e:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <main+0x2b0>)
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	001a      	movs	r2, r3
 80006a4:	4b10      	ldr	r3, [pc, #64]	@ (80006e8 <main+0x298>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	17da      	asrs	r2, r3, #31
 80006ac:	189b      	adds	r3, r3, r2
 80006ae:	4053      	eors	r3, r2
 80006b0:	4a17      	ldr	r2, [pc, #92]	@ (8000710 <main+0x2c0>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	dd30      	ble.n	8000718 <main+0x2c8>
		totalAng = ptotalAng + Angle + (4095-pAngle);
 80006b6:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <main+0x2b0>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	001a      	movs	r2, r3
 80006bc:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <main+0x2a0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	18d2      	adds	r2, r2, r3
 80006c2:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <main+0x298>)
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	0019      	movs	r1, r3
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <main+0x2c4>)
 80006ca:	1a5b      	subs	r3, r3, r1
 80006cc:	18d2      	adds	r2, r2, r3
 80006ce:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <main+0x2bc>)
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	e025      	b.n	8000720 <main+0x2d0>
 80006d4:	20000100 	.word	0x20000100
 80006d8:	20000000 	.word	0x20000000
 80006dc:	2000014c 	.word	0x2000014c
 80006e0:	200000ac 	.word	0x200000ac
 80006e4:	2000023c 	.word	0x2000023c
 80006e8:	20000254 	.word	0x20000254
 80006ec:	20000250 	.word	0x20000250
 80006f0:	2000024c 	.word	0x2000024c
 80006f4:	00002710 	.word	0x00002710
 80006f8:	20000260 	.word	0x20000260
 80006fc:	20000268 	.word	0x20000268
 8000700:	20000252 	.word	0x20000252
 8000704:	fffff449 	.word	0xfffff449
 8000708:	00000bb7 	.word	0x00000bb7
 800070c:	20000248 	.word	0x20000248
 8000710:	00000bb8 	.word	0x00000bb8
 8000714:	00000fff 	.word	0x00000fff
	}else{
		totalAng = ptotalAng;
 8000718:	4b41      	ldr	r3, [pc, #260]	@ (8000820 <main+0x3d0>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b41      	ldr	r3, [pc, #260]	@ (8000824 <main+0x3d4>)
 800071e:	601a      	str	r2, [r3, #0]
	}

	ptotalAng = totalAng;
 8000720:	4b40      	ldr	r3, [pc, #256]	@ (8000824 <main+0x3d4>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b3e      	ldr	r3, [pc, #248]	@ (8000820 <main+0x3d0>)
 8000726:	601a      	str	r2, [r3, #0]
	pAngle = Angle;
 8000728:	4b3f      	ldr	r3, [pc, #252]	@ (8000828 <main+0x3d8>)
 800072a:	881a      	ldrh	r2, [r3, #0]
 800072c:	4b3f      	ldr	r3, [pc, #252]	@ (800082c <main+0x3dc>)
 800072e:	801a      	strh	r2, [r3, #0]

	position = (totalAng - firstAng)*1000/25129;
 8000730:	4b3c      	ldr	r3, [pc, #240]	@ (8000824 <main+0x3d4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a3e      	ldr	r2, [pc, #248]	@ (8000830 <main+0x3e0>)
 8000736:	8812      	ldrh	r2, [r2, #0]
 8000738:	1a9a      	subs	r2, r3, r2
 800073a:	0013      	movs	r3, r2
 800073c:	015b      	lsls	r3, r3, #5
 800073e:	1a9b      	subs	r3, r3, r2
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	189b      	adds	r3, r3, r2
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	493b      	ldr	r1, [pc, #236]	@ (8000834 <main+0x3e4>)
 8000748:	0018      	movs	r0, r3
 800074a:	f7ff fd67 	bl	800021c <__divsi3>
 800074e:	0003      	movs	r3, r0
 8000750:	b21a      	sxth	r2, r3
 8000752:	4b39      	ldr	r3, [pc, #228]	@ (8000838 <main+0x3e8>)
 8000754:	801a      	strh	r2, [r3, #0]


	readBuf(&huart2, rxBufB, 128, &rx_check, ID, &p_wrtptB, &p_rdptB, &stop_counter, &error_counter);
 8000756:	4a39      	ldr	r2, [pc, #228]	@ (800083c <main+0x3ec>)
 8000758:	4939      	ldr	r1, [pc, #228]	@ (8000840 <main+0x3f0>)
 800075a:	483a      	ldr	r0, [pc, #232]	@ (8000844 <main+0x3f4>)
 800075c:	4b3a      	ldr	r3, [pc, #232]	@ (8000848 <main+0x3f8>)
 800075e:	9304      	str	r3, [sp, #16]
 8000760:	4b3a      	ldr	r3, [pc, #232]	@ (800084c <main+0x3fc>)
 8000762:	9303      	str	r3, [sp, #12]
 8000764:	4b3a      	ldr	r3, [pc, #232]	@ (8000850 <main+0x400>)
 8000766:	9302      	str	r3, [sp, #8]
 8000768:	4b3a      	ldr	r3, [pc, #232]	@ (8000854 <main+0x404>)
 800076a:	9301      	str	r3, [sp, #4]
 800076c:	2309      	movs	r3, #9
 800076e:	18fb      	adds	r3, r7, r3
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	0013      	movs	r3, r2
 8000776:	2280      	movs	r2, #128	@ 0x80
 8000778:	f000 fa04 	bl	8000b84 <readBuf>

	if(rx_check == 1){buf_pcounter = readCounter(); rx_check = 0;}
 800077c:	4b2f      	ldr	r3, [pc, #188]	@ (800083c <main+0x3ec>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d108      	bne.n	8000796 <main+0x346>
 8000784:	f7ff fe36 	bl	80003f4 <readCounter>
 8000788:	0002      	movs	r2, r0
 800078a:	000b      	movs	r3, r1
 800078c:	0013      	movs	r3, r2
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	4b2a      	ldr	r3, [pc, #168]	@ (800083c <main+0x3ec>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]

	if((u_counter - buf_pcounter) > 800){
 8000796:	4b30      	ldr	r3, [pc, #192]	@ (8000858 <main+0x408>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	68f9      	ldr	r1, [r7, #12]
 800079e:	000c      	movs	r4, r1
 80007a0:	2100      	movs	r1, #0
 80007a2:	000d      	movs	r5, r1
 80007a4:	1b12      	subs	r2, r2, r4
 80007a6:	41ab      	sbcs	r3, r5
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d105      	bne.n	80007b8 <main+0x368>
 80007ac:	d000      	beq.n	80007b0 <main+0x360>
 80007ae:	e6cc      	b.n	800054a <main+0xfa>
 80007b0:	21c8      	movs	r1, #200	@ 0xc8
 80007b2:	0089      	lsls	r1, r1, #2
 80007b4:	428a      	cmp	r2, r1
 80007b6:	d931      	bls.n	800081c <main+0x3cc>
		send_position = position + 20000;
 80007b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <main+0x3e8>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	5e9b      	ldrsh	r3, [r3, r2]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	4a26      	ldr	r2, [pc, #152]	@ (800085c <main+0x40c>)
 80007c2:	4694      	mov	ip, r2
 80007c4:	4463      	add	r3, ip
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b25      	ldr	r3, [pc, #148]	@ (8000860 <main+0x410>)
 80007ca:	801a      	strh	r2, [r3, #0]
		send_array[0] = 254;
 80007cc:	4b25      	ldr	r3, [pc, #148]	@ (8000864 <main+0x414>)
 80007ce:	22fe      	movs	r2, #254	@ 0xfe
 80007d0:	701a      	strb	r2, [r3, #0]
		send_array[1] = send_position % 200;
 80007d2:	4b23      	ldr	r3, [pc, #140]	@ (8000860 <main+0x410>)
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	21c8      	movs	r1, #200	@ 0xc8
 80007d8:	0018      	movs	r0, r3
 80007da:	f7ff fd1b 	bl	8000214 <__aeabi_uidivmod>
 80007de:	000b      	movs	r3, r1
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000864 <main+0x414>)
 80007e6:	705a      	strb	r2, [r3, #1]
		send_array[2] = send_position / 200;
 80007e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000860 <main+0x410>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	21c8      	movs	r1, #200	@ 0xc8
 80007ee:	0018      	movs	r0, r3
 80007f0:	f7ff fc8a 	bl	8000108 <__udivsi3>
 80007f4:	0003      	movs	r3, r0
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000864 <main+0x414>)
 80007fc:	709a      	strb	r2, [r3, #2]

		if(HAL_UART_Transmit(&huart2, send_array, 3, 1) == HAL_OK){
 80007fe:	4919      	ldr	r1, [pc, #100]	@ (8000864 <main+0x414>)
 8000800:	4810      	ldr	r0, [pc, #64]	@ (8000844 <main+0x3f4>)
 8000802:	2301      	movs	r3, #1
 8000804:	2203      	movs	r2, #3
 8000806:	f003 f8f3 	bl	80039f0 <HAL_UART_Transmit>
 800080a:	1e03      	subs	r3, r0, #0
 800080c:	d000      	beq.n	8000810 <main+0x3c0>
 800080e:	e69c      	b.n	800054a <main+0xfa>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000810:	23a0      	movs	r3, #160	@ 0xa0
 8000812:	05db      	lsls	r3, r3, #23
 8000814:	2110      	movs	r1, #16
 8000816:	0018      	movs	r0, r3
 8000818:	f001 f9a0 	bl	8001b5c <HAL_GPIO_TogglePin>
	u_counter = readCounter();
 800081c:	e695      	b.n	800054a <main+0xfa>
 800081e:	46c0      	nop			@ (mov r8, r8)
 8000820:	2000024c 	.word	0x2000024c
 8000824:	20000248 	.word	0x20000248
 8000828:	20000252 	.word	0x20000252
 800082c:	20000254 	.word	0x20000254
 8000830:	20000250 	.word	0x20000250
 8000834:	00006229 	.word	0x00006229
 8000838:	20000256 	.word	0x20000256
 800083c:	20000245 	.word	0x20000245
 8000840:	20000000 	.word	0x20000000
 8000844:	2000014c 	.word	0x2000014c
 8000848:	20000247 	.word	0x20000247
 800084c:	20000246 	.word	0x20000246
 8000850:	20000244 	.word	0x20000244
 8000854:	20000243 	.word	0x20000243
 8000858:	20000260 	.word	0x20000260
 800085c:	00004e20 	.word	0x00004e20
 8000860:	20000080 	.word	0x20000080
 8000864:	20000240 	.word	0x20000240

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b08d      	sub	sp, #52	@ 0x34
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	2414      	movs	r4, #20
 8000870:	193b      	adds	r3, r7, r4
 8000872:	0018      	movs	r0, r3
 8000874:	231c      	movs	r3, #28
 8000876:	001a      	movs	r2, r3
 8000878:	2100      	movs	r1, #0
 800087a:	f003 ff6b 	bl	8004754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087e:	003b      	movs	r3, r7
 8000880:	0018      	movs	r0, r3
 8000882:	2314      	movs	r3, #20
 8000884:	001a      	movs	r2, r3
 8000886:	2100      	movs	r1, #0
 8000888:	f003 ff64 	bl	8004754 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800088c:	193b      	adds	r3, r7, r4
 800088e:	2202      	movs	r2, #2
 8000890:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000892:	193b      	adds	r3, r7, r4
 8000894:	2280      	movs	r2, #128	@ 0x80
 8000896:	0052      	lsls	r2, r2, #1
 8000898:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800089a:	193b      	adds	r3, r7, r4
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	2240      	movs	r2, #64	@ 0x40
 80008a4:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	0018      	movs	r0, r3
 80008aa:	f001 ffb7 	bl	800281c <HAL_RCC_OscConfig>
 80008ae:	1e03      	subs	r3, r0, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80008b2:	f000 fa6f 	bl	8000d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b6:	003b      	movs	r3, r7
 80008b8:	2207      	movs	r2, #7
 80008ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008bc:	003b      	movs	r3, r7
 80008be:	2200      	movs	r2, #0
 80008c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	003b      	movs	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008c8:	003b      	movs	r3, r7
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008ce:	003b      	movs	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008d4:	003b      	movs	r3, r7
 80008d6:	2101      	movs	r1, #1
 80008d8:	0018      	movs	r0, r3
 80008da:	f002 f983 	bl	8002be4 <HAL_RCC_ClockConfig>
 80008de:	1e03      	subs	r3, r0, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80008e2:	f000 fa57 	bl	8000d94 <Error_Handler>
  }
}
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b00d      	add	sp, #52	@ 0x34
 80008ec:	bd90      	pop	{r4, r7, pc}
	...

080008f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <MX_I2C1_Init+0x74>)
 80008f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000968 <MX_I2C1_Init+0x78>)
 80008f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0090194B;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <MX_I2C1_Init+0x74>)
 80008fc:	4a1b      	ldr	r2, [pc, #108]	@ (800096c <MX_I2C1_Init+0x7c>)
 80008fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000900:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <MX_I2C1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000906:	4b17      	ldr	r3, [pc, #92]	@ (8000964 <MX_I2C1_Init+0x74>)
 8000908:	2201      	movs	r2, #1
 800090a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800090c:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_I2C1_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000912:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <MX_I2C1_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <MX_I2C1_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091e:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <MX_I2C1_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <MX_I2C1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800092a:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <MX_I2C1_Init+0x74>)
 800092c:	0018      	movs	r0, r3
 800092e:	f001 f931 	bl	8001b94 <HAL_I2C_Init>
 8000932:	1e03      	subs	r3, r0, #0
 8000934:	d001      	beq.n	800093a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000936:	f000 fa2d 	bl	8000d94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800093a:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <MX_I2C1_Init+0x74>)
 800093c:	2100      	movs	r1, #0
 800093e:	0018      	movs	r0, r3
 8000940:	f001 fed4 	bl	80026ec <HAL_I2CEx_ConfigAnalogFilter>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d001      	beq.n	800094c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000948:	f000 fa24 	bl	8000d94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800094c:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <MX_I2C1_Init+0x74>)
 800094e:	2100      	movs	r1, #0
 8000950:	0018      	movs	r0, r3
 8000952:	f001 ff17 	bl	8002784 <HAL_I2CEx_ConfigDigitalFilter>
 8000956:	1e03      	subs	r3, r0, #0
 8000958:	d001      	beq.n	800095e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800095a:	f000 fa1b 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200000ac 	.word	0x200000ac
 8000968:	40005400 	.word	0x40005400
 800096c:	0090194b 	.word	0x0090194b

08000970 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000976:	2310      	movs	r3, #16
 8000978:	18fb      	adds	r3, r7, r3
 800097a:	0018      	movs	r0, r3
 800097c:	2310      	movs	r3, #16
 800097e:	001a      	movs	r2, r3
 8000980:	2100      	movs	r1, #0
 8000982:	f003 fee7 	bl	8004754 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	0018      	movs	r0, r3
 800098a:	230c      	movs	r3, #12
 800098c:	001a      	movs	r2, r3
 800098e:	2100      	movs	r1, #0
 8000990:	f003 fee0 	bl	8004754 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000994:	4b1e      	ldr	r3, [pc, #120]	@ (8000a10 <MX_TIM3_Init+0xa0>)
 8000996:	4a1f      	ldr	r2, [pc, #124]	@ (8000a14 <MX_TIM3_Init+0xa4>)
 8000998:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 800099a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <MX_TIM3_Init+0xa0>)
 800099c:	222f      	movs	r2, #47	@ 0x2f
 800099e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <MX_TIM3_Init+0xa0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <MX_TIM3_Init+0xa0>)
 80009a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a18 <MX_TIM3_Init+0xa8>)
 80009aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ac:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <MX_TIM3_Init+0xa0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b2:	4b17      	ldr	r3, [pc, #92]	@ (8000a10 <MX_TIM3_Init+0xa0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009b8:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <MX_TIM3_Init+0xa0>)
 80009ba:	0018      	movs	r0, r3
 80009bc:	f002 fb8e 	bl	80030dc <HAL_TIM_Base_Init>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80009c4:	f000 f9e6 	bl	8000d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c8:	2110      	movs	r1, #16
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2280      	movs	r2, #128	@ 0x80
 80009ce:	0152      	lsls	r2, r2, #5
 80009d0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009d2:	187a      	adds	r2, r7, r1
 80009d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <MX_TIM3_Init+0xa0>)
 80009d6:	0011      	movs	r1, r2
 80009d8:	0018      	movs	r0, r3
 80009da:	f002 fd2d 	bl	8003438 <HAL_TIM_ConfigClockSource>
 80009de:	1e03      	subs	r3, r0, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80009e2:	f000 f9d7 	bl	8000d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009f2:	1d3a      	adds	r2, r7, #4
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <MX_TIM3_Init+0xa0>)
 80009f6:	0011      	movs	r1, r2
 80009f8:	0018      	movs	r0, r3
 80009fa:	f002 ff29 	bl	8003850 <HAL_TIMEx_MasterConfigSynchronization>
 80009fe:	1e03      	subs	r3, r0, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000a02:	f000 f9c7 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b008      	add	sp, #32
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	20000100 	.word	0x20000100
 8000a14:	40000400 	.word	0x40000400
 8000a18:	0000ffff 	.word	0x0000ffff

08000a1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a20:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <MX_USART2_UART_Init+0x60>)
 8000a22:	4a17      	ldr	r2, [pc, #92]	@ (8000a80 <MX_USART2_UART_Init+0x64>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a26:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <MX_USART2_UART_Init+0x60>)
 8000a28:	22e1      	movs	r2, #225	@ 0xe1
 8000a2a:	0252      	lsls	r2, r2, #9
 8000a2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <MX_USART2_UART_Init+0x60>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <MX_USART2_UART_Init+0x60>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <MX_USART2_UART_Init+0x60>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <MX_USART2_UART_Init+0x60>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b0d      	ldr	r3, [pc, #52]	@ (8000a7c <MX_USART2_UART_Init+0x60>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a7c <MX_USART2_UART_Init+0x60>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a52:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <MX_USART2_UART_Init+0x60>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a58:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <MX_USART2_UART_Init+0x60>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a5e:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <MX_USART2_UART_Init+0x60>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a64:	4b05      	ldr	r3, [pc, #20]	@ (8000a7c <MX_USART2_UART_Init+0x60>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f002 ff6c 	bl	8003944 <HAL_UART_Init>
 8000a6c:	1e03      	subs	r3, r0, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a70:	f000 f990 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			@ (mov r8, r8)
 8000a7c:	2000014c 	.word	0x2000014c
 8000a80:	40004400 	.word	0x40004400

08000a84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <MX_DMA_Init+0x38>)
 8000a8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <MX_DMA_Init+0x38>)
 8000a90:	2101      	movs	r1, #1
 8000a92:	430a      	orrs	r2, r1
 8000a94:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a96:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <MX_DMA_Init+0x38>)
 8000a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2009      	movs	r0, #9
 8000aa8:	f000 fc2e 	bl	8001308 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000aac:	2009      	movs	r0, #9
 8000aae:	f000 fc40 	bl	8001332 <HAL_NVIC_EnableIRQ>

}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b002      	add	sp, #8
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			@ (mov r8, r8)
 8000abc:	40021000 	.word	0x40021000

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b590      	push	{r4, r7, lr}
 8000ac2:	b089      	sub	sp, #36	@ 0x24
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	240c      	movs	r4, #12
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	0018      	movs	r0, r3
 8000acc:	2314      	movs	r3, #20
 8000ace:	001a      	movs	r2, r3
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	f003 fe3f 	bl	8004754 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b80 <MX_GPIO_Init+0xc0>)
 8000ad8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ada:	4b29      	ldr	r3, [pc, #164]	@ (8000b80 <MX_GPIO_Init+0xc0>)
 8000adc:	2102      	movs	r1, #2
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ae2:	4b27      	ldr	r3, [pc, #156]	@ (8000b80 <MX_GPIO_Init+0xc0>)
 8000ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aee:	4b24      	ldr	r3, [pc, #144]	@ (8000b80 <MX_GPIO_Init+0xc0>)
 8000af0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000af2:	4b23      	ldr	r3, [pc, #140]	@ (8000b80 <MX_GPIO_Init+0xc0>)
 8000af4:	2104      	movs	r1, #4
 8000af6:	430a      	orrs	r2, r1
 8000af8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000afa:	4b21      	ldr	r3, [pc, #132]	@ (8000b80 <MX_GPIO_Init+0xc0>)
 8000afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000afe:	2204      	movs	r2, #4
 8000b00:	4013      	ands	r3, r2
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	4b1e      	ldr	r3, [pc, #120]	@ (8000b80 <MX_GPIO_Init+0xc0>)
 8000b08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b80 <MX_GPIO_Init+0xc0>)
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b12:	4b1b      	ldr	r3, [pc, #108]	@ (8000b80 <MX_GPIO_Init+0xc0>)
 8000b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b16:	2201      	movs	r2, #1
 8000b18:	4013      	ands	r3, r2
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b1e:	23a0      	movs	r3, #160	@ 0xa0
 8000b20:	05db      	lsls	r3, r3, #23
 8000b22:	2200      	movs	r2, #0
 8000b24:	2110      	movs	r1, #16
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 fffb 	bl	8001b22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	2210      	movs	r2, #16
 8000b30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	193b      	adds	r3, r7, r4
 8000b34:	2201      	movs	r2, #1
 8000b36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	193b      	adds	r3, r7, r4
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b44:	193a      	adds	r2, r7, r4
 8000b46:	23a0      	movs	r3, #160	@ 0xa0
 8000b48:	05db      	lsls	r3, r3, #23
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f000 fe61 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin SW4_Pin
                           SW5_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin
 8000b52:	0021      	movs	r1, r4
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	229e      	movs	r2, #158	@ 0x9e
 8000b58:	0112      	lsls	r2, r2, #4
 8000b5a:	601a      	str	r2, [r3, #0]
                          |SW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	2200      	movs	r2, #0
 8000b60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	187a      	adds	r2, r7, r1
 8000b6a:	23a0      	movs	r3, #160	@ 0xa0
 8000b6c:	05db      	lsls	r3, r3, #23
 8000b6e:	0011      	movs	r1, r2
 8000b70:	0018      	movs	r0, r3
 8000b72:	f000 fe4f 	bl	8001814 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b009      	add	sp, #36	@ 0x24
 8000b7c:	bd90      	pop	{r4, r7, pc}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	40021000 	.word	0x40021000

08000b84 <readBuf>:

/* USER CODE BEGIN 4 */
void readBuf(UART_HandleTypeDef* uart, uint8_t* buf, int buf_size, uint8_t* data, uint8_t id, uint8_t* p_wrtpt, uint8_t* p_rdpt, uint8_t* stop_counter, uint8_t* error_counter){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	603b      	str	r3, [r7, #0]
	int wrt_pt = uart->hdmarx->Instance->CNDTR;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2280      	movs	r2, #128	@ 0x80
 8000b96:	589b      	ldr	r3, [r3, r2]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	613b      	str	r3, [r7, #16]
	wrt_pt= buf_size - wrt_pt;
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	613b      	str	r3, [r7, #16]
	int rd_pt;

	if(wrt_pt != *p_rdpt){//wrtに追い付かれてない
 8000ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	001a      	movs	r2, r3
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d02c      	beq.n	8000c0c <readBuf+0x88>
		if(buf[*p_rdpt] == 255){//p_rdptが書き換えられてない=追い越されてない
 8000bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	001a      	movs	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	189b      	adds	r3, r3, r2
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2bff      	cmp	r3, #255	@ 0xff
 8000bc0:	d113      	bne.n	8000bea <readBuf+0x66>
			if(wrt_pt != *p_wrtpt){//wrt_ptが進んだ=受信した
 8000bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	001a      	movs	r2, r3
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d003      	beq.n	8000bd6 <readBuf+0x52>
//正常
				rd_pt = *p_rdpt;
 8000bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	61fb      	str	r3, [r7, #28]
 8000bd4:	e03c      	b.n	8000c50 <readBuf+0xcc>
			}else{//wrt_ptが進んでない=受信してない
//受信してない
				(*stop_counter)++;
 8000bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000be0:	701a      	strb	r2, [r3, #0]
				rd_pt = *p_rdpt;
 8000be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	61fb      	str	r3, [r7, #28]
 8000be8:	e032      	b.n	8000c50 <readBuf+0xcc>
			}
		}else{//p_rdptが書き換えられた=追い越された
//追い越された
			rd_pt = wrt_pt - 40;
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	3b28      	subs	r3, #40	@ 0x28
 8000bee:	61fb      	str	r3, [r7, #28]
				if(rd_pt < 0){rd_pt += buf_size;}
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	da03      	bge.n	8000bfe <readBuf+0x7a>
 8000bf6:	69fa      	ldr	r2, [r7, #28]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	18d3      	adds	r3, r2, r3
 8000bfc:	61fb      	str	r3, [r7, #28]
			(*error_counter)++;
 8000bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	3301      	adds	r3, #1
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	e021      	b.n	8000c50 <readBuf+0xcc>
		}
	}else{//wrtに追い付かれた,追い付いた
		int front_pt = wrt_pt + 1;
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	61bb      	str	r3, [r7, #24]
			if(front_pt>buf_size-1){front_pt -= buf_size;}
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	dc03      	bgt.n	8000c22 <readBuf+0x9e>
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	61bb      	str	r3, [r7, #24]
		if(front_pt == 255){//追い付いた
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	2bff      	cmp	r3, #255	@ 0xff
 8000c26:	d103      	bne.n	8000c30 <readBuf+0xac>
			rd_pt = *p_rdpt;
 8000c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	e00f      	b.n	8000c50 <readBuf+0xcc>
		}else{//追い付かれた
			rd_pt = wrt_pt - 40;
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	3b28      	subs	r3, #40	@ 0x28
 8000c34:	61fb      	str	r3, [r7, #28]
				if(rd_pt < 0){rd_pt += buf_size;}
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	da03      	bge.n	8000c44 <readBuf+0xc0>
 8000c3c:	69fa      	ldr	r2, [r7, #28]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	18d3      	adds	r3, r2, r3
 8000c42:	61fb      	str	r3, [r7, #28]
			(*error_counter)++;
 8000c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c4e:	701a      	strb	r2, [r3, #0]
		}
	}

	*data = 0;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]

	while(1){
		int dif_pt = wrt_pt - rd_pt;
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	617b      	str	r3, [r7, #20]
			if(dif_pt < 0){dif_pt += buf_size;}
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	da03      	bge.n	8000c6c <readBuf+0xe8>
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	18d3      	adds	r3, r2, r3
 8000c6a:	617b      	str	r3, [r7, #20]
		if(dif_pt <= 20){break;}
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	2b14      	cmp	r3, #20
 8000c70:	dd30      	ble.n	8000cd4 <readBuf+0x150>

		rd_pt++;
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3301      	adds	r3, #1
 8000c76:	61fb      	str	r3, [r7, #28]
			if(rd_pt>buf_size-1){rd_pt -= buf_size;}
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dc03      	bgt.n	8000c88 <readBuf+0x104>
 8000c80:	69fa      	ldr	r2, [r7, #28]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	61fb      	str	r3, [r7, #28]
//				if(dif_pt < 0){dif_pt += buf_size;}
//			if(dif_pt >= buf_size/2){}
//			else{break;}
//		}else{buf[rd_pt] = 255;}

		if(buf[rd_pt] == 248+id){
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	18d3      	adds	r3, r2, r3
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	001a      	movs	r2, r3
 8000c92:	2328      	movs	r3, #40	@ 0x28
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	33f8      	adds	r3, #248	@ 0xf8
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d114      	bne.n	8000cc8 <readBuf+0x144>
			*data = 1;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	701a      	strb	r2, [r3, #0]
			buf[rd_pt] = 255;
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	18d3      	adds	r3, r2, r3
 8000caa:	22ff      	movs	r2, #255	@ 0xff
 8000cac:	701a      	strb	r2, [r3, #0]

			dif_pt = wrt_pt - rd_pt;
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	617b      	str	r3, [r7, #20]
				if(dif_pt < 0){dif_pt += buf_size;}
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	da03      	bge.n	8000cc4 <readBuf+0x140>
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	18d3      	adds	r3, r2, r3
 8000cc2:	617b      	str	r3, [r7, #20]
			if(dif_pt >= buf_size/2){}
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	e007      	b.n	8000cd8 <readBuf+0x154>
			else{break;}
			break;
		}else{buf[rd_pt] = 255;}
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	18d3      	adds	r3, r2, r3
 8000cce:	22ff      	movs	r2, #255	@ 0xff
 8000cd0:	701a      	strb	r2, [r3, #0]
	while(1){
 8000cd2:	e7c0      	b.n	8000c56 <readBuf+0xd2>
		if(dif_pt <= 20){break;}
 8000cd4:	46c0      	nop			@ (mov r8, r8)
 8000cd6:	e000      	b.n	8000cda <readBuf+0x156>
			break;
 8000cd8:	46c0      	nop			@ (mov r8, r8)
	}

	*p_rdpt = rd_pt;
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ce0:	701a      	strb	r2, [r3, #0]
//	*p_wrtpt = buf_size - (uart->hdmarx->Instance->CNDTR);
	*p_wrtpt = wrt_pt;
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ce8:	701a      	strb	r2, [r3, #0]
}
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b008      	add	sp, #32
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <readID>:
	int index = uart->hdmarx->Instance->CNDTR;
	index = buf_size - index;
	return index;
}

uint8_t readID(){
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
	uint8_t id;
	if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin)==1){id=0;}
 8000cf8:	23a0      	movs	r3, #160	@ 0xa0
 8000cfa:	05db      	lsls	r3, r3, #23
 8000cfc:	2120      	movs	r1, #32
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f000 fef2 	bl	8001ae8 <HAL_GPIO_ReadPin>
 8000d04:	0003      	movs	r3, r0
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d103      	bne.n	8000d12 <readID+0x20>
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	e03a      	b.n	8000d88 <readID+0x96>
	else if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin)==1){id=1;}
 8000d12:	23a0      	movs	r3, #160	@ 0xa0
 8000d14:	05db      	lsls	r3, r3, #23
 8000d16:	2140      	movs	r1, #64	@ 0x40
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f000 fee5 	bl	8001ae8 <HAL_GPIO_ReadPin>
 8000d1e:	0003      	movs	r3, r0
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d103      	bne.n	8000d2c <readID+0x3a>
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	e02d      	b.n	8000d88 <readID+0x96>
	else if(HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin)==1){id=2;}
 8000d2c:	23a0      	movs	r3, #160	@ 0xa0
 8000d2e:	05db      	lsls	r3, r3, #23
 8000d30:	2180      	movs	r1, #128	@ 0x80
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 fed8 	bl	8001ae8 <HAL_GPIO_ReadPin>
 8000d38:	0003      	movs	r3, r0
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d103      	bne.n	8000d46 <readID+0x54>
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	2202      	movs	r2, #2
 8000d42:	701a      	strb	r2, [r3, #0]
 8000d44:	e020      	b.n	8000d88 <readID+0x96>
	else if(HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin)==1){id=3;}
 8000d46:	2380      	movs	r3, #128	@ 0x80
 8000d48:	005a      	lsls	r2, r3, #1
 8000d4a:	23a0      	movs	r3, #160	@ 0xa0
 8000d4c:	05db      	lsls	r3, r3, #23
 8000d4e:	0011      	movs	r1, r2
 8000d50:	0018      	movs	r0, r3
 8000d52:	f000 fec9 	bl	8001ae8 <HAL_GPIO_ReadPin>
 8000d56:	0003      	movs	r3, r0
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d103      	bne.n	8000d64 <readID+0x72>
 8000d5c:	1dfb      	adds	r3, r7, #7
 8000d5e:	2203      	movs	r2, #3
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	e011      	b.n	8000d88 <readID+0x96>
	else if(HAL_GPIO_ReadPin(SW5_GPIO_Port, SW5_Pin)==1){id=4;}
 8000d64:	2380      	movs	r3, #128	@ 0x80
 8000d66:	011a      	lsls	r2, r3, #4
 8000d68:	23a0      	movs	r3, #160	@ 0xa0
 8000d6a:	05db      	lsls	r3, r3, #23
 8000d6c:	0011      	movs	r1, r2
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f000 feba 	bl	8001ae8 <HAL_GPIO_ReadPin>
 8000d74:	0003      	movs	r3, r0
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d103      	bne.n	8000d82 <readID+0x90>
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	2204      	movs	r2, #4
 8000d7e:	701a      	strb	r2, [r3, #0]
 8000d80:	e002      	b.n	8000d88 <readID+0x96>
	else{id=5;}
 8000d82:	1dfb      	adds	r3, r7, #7
 8000d84:	2205      	movs	r2, #5
 8000d86:	701a      	strb	r2, [r3, #0]
	return id;
 8000d88:	1dfb      	adds	r3, r7, #7
 8000d8a:	781b      	ldrb	r3, [r3, #0]
}
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b002      	add	sp, #8
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9c:	46c0      	nop			@ (mov r8, r8)
 8000d9e:	e7fd      	b.n	8000d9c <Error_Handler+0x8>

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <HAL_MspInit+0x44>)
 8000da8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000daa:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <HAL_MspInit+0x44>)
 8000dac:	2101      	movs	r1, #1
 8000dae:	430a      	orrs	r2, r1
 8000db0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <HAL_MspInit+0x44>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	2201      	movs	r2, #1
 8000db8:	4013      	ands	r3, r2
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <HAL_MspInit+0x44>)
 8000dc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dc2:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <HAL_MspInit+0x44>)
 8000dc4:	2180      	movs	r1, #128	@ 0x80
 8000dc6:	0549      	lsls	r1, r1, #21
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dcc:	4b05      	ldr	r3, [pc, #20]	@ (8000de4 <HAL_MspInit+0x44>)
 8000dce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dd0:	2380      	movs	r3, #128	@ 0x80
 8000dd2:	055b      	lsls	r3, r3, #21
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b002      	add	sp, #8
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	40021000 	.word	0x40021000

08000de8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000de8:	b590      	push	{r4, r7, lr}
 8000dea:	b091      	sub	sp, #68	@ 0x44
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	232c      	movs	r3, #44	@ 0x2c
 8000df2:	18fb      	adds	r3, r7, r3
 8000df4:	0018      	movs	r0, r3
 8000df6:	2314      	movs	r3, #20
 8000df8:	001a      	movs	r2, r3
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	f003 fcaa 	bl	8004754 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e00:	2410      	movs	r4, #16
 8000e02:	193b      	adds	r3, r7, r4
 8000e04:	0018      	movs	r0, r3
 8000e06:	231c      	movs	r3, #28
 8000e08:	001a      	movs	r2, r3
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	f003 fca2 	bl	8004754 <memset>
  if(hi2c->Instance==I2C1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a22      	ldr	r2, [pc, #136]	@ (8000ea0 <HAL_I2C_MspInit+0xb8>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d13d      	bne.n	8000e96 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e1a:	193b      	adds	r3, r7, r4
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e20:	193b      	adds	r3, r7, r4
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e26:	193b      	adds	r3, r7, r4
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f002 f86b 	bl	8002f04 <HAL_RCCEx_PeriphCLKConfig>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e32:	f7ff ffaf 	bl	8000d94 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <HAL_I2C_MspInit+0xbc>)
 8000e38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <HAL_I2C_MspInit+0xbc>)
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e42:	4b18      	ldr	r3, [pc, #96]	@ (8000ea4 <HAL_I2C_MspInit+0xbc>)
 8000e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e46:	2202      	movs	r2, #2
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000e4e:	212c      	movs	r1, #44	@ 0x2c
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	22c0      	movs	r2, #192	@ 0xc0
 8000e54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	2212      	movs	r2, #18
 8000e5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	2206      	movs	r2, #6
 8000e6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea8 <HAL_I2C_MspInit+0xc0>)
 8000e72:	0019      	movs	r1, r3
 8000e74:	0010      	movs	r0, r2
 8000e76:	f000 fccd 	bl	8001814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <HAL_I2C_MspInit+0xbc>)
 8000e7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <HAL_I2C_MspInit+0xbc>)
 8000e80:	2180      	movs	r1, #128	@ 0x80
 8000e82:	0389      	lsls	r1, r1, #14
 8000e84:	430a      	orrs	r2, r1
 8000e86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <HAL_I2C_MspInit+0xbc>)
 8000e8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e8c:	2380      	movs	r3, #128	@ 0x80
 8000e8e:	039b      	lsls	r3, r3, #14
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e96:	46c0      	nop			@ (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b011      	add	sp, #68	@ 0x44
 8000e9c:	bd90      	pop	{r4, r7, pc}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	40005400 	.word	0x40005400
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	50000400 	.word	0x50000400

08000eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef0 <HAL_TIM_Base_MspInit+0x44>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d113      	bne.n	8000ee6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef4 <HAL_TIM_Base_MspInit+0x48>)
 8000ec0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <HAL_TIM_Base_MspInit+0x48>)
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000eca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <HAL_TIM_Base_MspInit+0x48>)
 8000ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ece:	2202      	movs	r2, #2
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2010      	movs	r0, #16
 8000edc:	f000 fa14 	bl	8001308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ee0:	2010      	movs	r0, #16
 8000ee2:	f000 fa26 	bl	8001332 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b004      	add	sp, #16
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			@ (mov r8, r8)
 8000ef0:	40000400 	.word	0x40000400
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b08b      	sub	sp, #44	@ 0x2c
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	2414      	movs	r4, #20
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	0018      	movs	r0, r3
 8000f06:	2314      	movs	r3, #20
 8000f08:	001a      	movs	r2, r3
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	f003 fc22 	bl	8004754 <memset>
  if(huart->Instance==USART2)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a30      	ldr	r2, [pc, #192]	@ (8000fd8 <HAL_UART_MspInit+0xe0>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d15a      	bne.n	8000fd0 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f1a:	4b30      	ldr	r3, [pc, #192]	@ (8000fdc <HAL_UART_MspInit+0xe4>)
 8000f1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8000fdc <HAL_UART_MspInit+0xe4>)
 8000f20:	2180      	movs	r1, #128	@ 0x80
 8000f22:	0289      	lsls	r1, r1, #10
 8000f24:	430a      	orrs	r2, r1
 8000f26:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f28:	4b2c      	ldr	r3, [pc, #176]	@ (8000fdc <HAL_UART_MspInit+0xe4>)
 8000f2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f2c:	2380      	movs	r3, #128	@ 0x80
 8000f2e:	029b      	lsls	r3, r3, #10
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	4b29      	ldr	r3, [pc, #164]	@ (8000fdc <HAL_UART_MspInit+0xe4>)
 8000f38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f3a:	4b28      	ldr	r3, [pc, #160]	@ (8000fdc <HAL_UART_MspInit+0xe4>)
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f42:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <HAL_UART_MspInit+0xe4>)
 8000f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f46:	2201      	movs	r2, #1
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f4e:	0021      	movs	r1, r4
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	220c      	movs	r2, #12
 8000f54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2202      	movs	r2, #2
 8000f5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	187a      	adds	r2, r7, r1
 8000f70:	23a0      	movs	r3, #160	@ 0xa0
 8000f72:	05db      	lsls	r3, r3, #23
 8000f74:	0011      	movs	r1, r2
 8000f76:	0018      	movs	r0, r3
 8000f78:	f000 fc4c 	bl	8001814 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000f7c:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <HAL_UART_MspInit+0xe8>)
 8000f7e:	4a19      	ldr	r2, [pc, #100]	@ (8000fe4 <HAL_UART_MspInit+0xec>)
 8000f80:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000f82:	4b17      	ldr	r3, [pc, #92]	@ (8000fe0 <HAL_UART_MspInit+0xe8>)
 8000f84:	2234      	movs	r2, #52	@ 0x34
 8000f86:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f88:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <HAL_UART_MspInit+0xe8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <HAL_UART_MspInit+0xe8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f94:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <HAL_UART_MspInit+0xe8>)
 8000f96:	2280      	movs	r2, #128	@ 0x80
 8000f98:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <HAL_UART_MspInit+0xe8>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <HAL_UART_MspInit+0xe8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <HAL_UART_MspInit+0xe8>)
 8000fa8:	2220      	movs	r2, #32
 8000faa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <HAL_UART_MspInit+0xe8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <HAL_UART_MspInit+0xe8>)
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f000 f9d9 	bl	800136c <HAL_DMA_Init>
 8000fba:	1e03      	subs	r3, r0, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000fbe:	f7ff fee9 	bl	8000d94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2180      	movs	r1, #128	@ 0x80
 8000fc6:	4a06      	ldr	r2, [pc, #24]	@ (8000fe0 <HAL_UART_MspInit+0xe8>)
 8000fc8:	505a      	str	r2, [r3, r1]
 8000fca:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <HAL_UART_MspInit+0xe8>)
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000fd0:	46c0      	nop			@ (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b00b      	add	sp, #44	@ 0x2c
 8000fd6:	bd90      	pop	{r4, r7, pc}
 8000fd8:	40004400 	.word	0x40004400
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	200001e0 	.word	0x200001e0
 8000fe4:	40020008 	.word	0x40020008

08000fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fec:	46c0      	nop			@ (mov r8, r8)
 8000fee:	e7fd      	b.n	8000fec <NMI_Handler+0x4>

08000ff0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff4:	46c0      	nop			@ (mov r8, r8)
 8000ff6:	e7fd      	b.n	8000ff4 <HardFault_Handler+0x4>

08000ff8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ffc:	46c0      	nop			@ (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f8b2 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	46c0      	nop			@ (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001020:	4b03      	ldr	r3, [pc, #12]	@ (8001030 <DMA1_Channel1_IRQHandler+0x14>)
 8001022:	0018      	movs	r0, r3
 8001024:	f000 fab4 	bl	8001590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001028:	46c0      	nop			@ (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	200001e0 	.word	0x200001e0

08001034 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001038:	4b03      	ldr	r3, [pc, #12]	@ (8001048 <TIM3_IRQHandler+0x14>)
 800103a:	0018      	movs	r0, r3
 800103c:	f002 f8f4 	bl	8003228 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001040:	46c0      	nop			@ (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	46c0      	nop			@ (mov r8, r8)
 8001048:	20000100 	.word	0x20000100

0800104c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001050:	4b03      	ldr	r3, [pc, #12]	@ (8001060 <SystemInit+0x14>)
 8001052:	2280      	movs	r2, #128	@ 0x80
 8001054:	0512      	lsls	r2, r2, #20
 8001056:	609a      	str	r2, [r3, #8]
#endif
}
 8001058:	46c0      	nop			@ (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	46c0      	nop			@ (mov r8, r8)
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001064:	480d      	ldr	r0, [pc, #52]	@ (800109c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001066:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001068:	f7ff fff0 	bl	800104c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800106c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800106e:	e003      	b.n	8001078 <LoopCopyDataInit>

08001070 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001070:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001072:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001074:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001076:	3104      	adds	r1, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001078:	480a      	ldr	r0, [pc, #40]	@ (80010a4 <LoopForever+0xa>)
  ldr r3, =_edata
 800107a:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <LoopForever+0xe>)
  adds r2, r0, r1
 800107c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800107e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001080:	d3f6      	bcc.n	8001070 <CopyDataInit>
  ldr r2, =_sbss
 8001082:	4a0a      	ldr	r2, [pc, #40]	@ (80010ac <LoopForever+0x12>)
  b LoopFillZerobss
 8001084:	e002      	b.n	800108c <LoopFillZerobss>

08001086 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  str  r3, [r2]
 8001088:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108a:	3204      	adds	r2, #4

0800108c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800108c:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <LoopForever+0x16>)
  cmp r2, r3
 800108e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001090:	d3f9      	bcc.n	8001086 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001092:	f003 fb67 	bl	8004764 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001096:	f7ff f9db 	bl	8000450 <main>

0800109a <LoopForever>:

LoopForever:
    b LoopForever
 800109a:	e7fe      	b.n	800109a <LoopForever>
  ldr   r0, =_estack
 800109c:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80010a0:	08004844 	.word	0x08004844
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80010a8:	20000090 	.word	0x20000090
  ldr r2, =_sbss
 80010ac:	20000090 	.word	0x20000090
  ldr r3, = _ebss
 80010b0:	20000270 	.word	0x20000270

080010b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC1_IRQHandler>

080010b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010bc:	1dfb      	adds	r3, r7, #7
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010c2:	2003      	movs	r0, #3
 80010c4:	f000 f80e 	bl	80010e4 <HAL_InitTick>
 80010c8:	1e03      	subs	r3, r0, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80010cc:	1dfb      	adds	r3, r7, #7
 80010ce:	2201      	movs	r2, #1
 80010d0:	701a      	strb	r2, [r3, #0]
 80010d2:	e001      	b.n	80010d8 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010d4:	f7ff fe64 	bl	8000da0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010d8:	1dfb      	adds	r3, r7, #7
 80010da:	781b      	ldrb	r3, [r3, #0]
}
 80010dc:	0018      	movs	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	b002      	add	sp, #8
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010ec:	230f      	movs	r3, #15
 80010ee:	18fb      	adds	r3, r7, r3
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80010f4:	4b1d      	ldr	r3, [pc, #116]	@ (800116c <HAL_InitTick+0x88>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d02b      	beq.n	8001154 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80010fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001170 <HAL_InitTick+0x8c>)
 80010fe:	681c      	ldr	r4, [r3, #0]
 8001100:	4b1a      	ldr	r3, [pc, #104]	@ (800116c <HAL_InitTick+0x88>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	0019      	movs	r1, r3
 8001106:	23fa      	movs	r3, #250	@ 0xfa
 8001108:	0098      	lsls	r0, r3, #2
 800110a:	f7fe fffd 	bl	8000108 <__udivsi3>
 800110e:	0003      	movs	r3, r0
 8001110:	0019      	movs	r1, r3
 8001112:	0020      	movs	r0, r4
 8001114:	f7fe fff8 	bl	8000108 <__udivsi3>
 8001118:	0003      	movs	r3, r0
 800111a:	0018      	movs	r0, r3
 800111c:	f000 f919 	bl	8001352 <HAL_SYSTICK_Config>
 8001120:	1e03      	subs	r3, r0, #0
 8001122:	d112      	bne.n	800114a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b03      	cmp	r3, #3
 8001128:	d80a      	bhi.n	8001140 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	2301      	movs	r3, #1
 800112e:	425b      	negs	r3, r3
 8001130:	2200      	movs	r2, #0
 8001132:	0018      	movs	r0, r3
 8001134:	f000 f8e8 	bl	8001308 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001138:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <HAL_InitTick+0x90>)
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	e00d      	b.n	800115c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001140:	230f      	movs	r3, #15
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
 8001148:	e008      	b.n	800115c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800114a:	230f      	movs	r3, #15
 800114c:	18fb      	adds	r3, r7, r3
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
 8001152:	e003      	b.n	800115c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001154:	230f      	movs	r3, #15
 8001156:	18fb      	adds	r3, r7, r3
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800115c:	230f      	movs	r3, #15
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	781b      	ldrb	r3, [r3, #0]
}
 8001162:	0018      	movs	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	b005      	add	sp, #20
 8001168:	bd90      	pop	{r4, r7, pc}
 800116a:	46c0      	nop			@ (mov r8, r8)
 800116c:	2000008c 	.word	0x2000008c
 8001170:	20000084 	.word	0x20000084
 8001174:	20000088 	.word	0x20000088

08001178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800117c:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <HAL_IncTick+0x1c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	001a      	movs	r2, r3
 8001182:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <HAL_IncTick+0x20>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	18d2      	adds	r2, r2, r3
 8001188:	4b03      	ldr	r3, [pc, #12]	@ (8001198 <HAL_IncTick+0x20>)
 800118a:	601a      	str	r2, [r3, #0]
}
 800118c:	46c0      	nop			@ (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			@ (mov r8, r8)
 8001194:	2000008c 	.word	0x2000008c
 8001198:	2000026c 	.word	0x2000026c

0800119c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b02      	ldr	r3, [pc, #8]	@ (80011ac <HAL_GetTick+0x10>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	0018      	movs	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			@ (mov r8, r8)
 80011ac:	2000026c 	.word	0x2000026c

080011b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	0002      	movs	r2, r0
 80011b8:	1dfb      	adds	r3, r7, #7
 80011ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011bc:	1dfb      	adds	r3, r7, #7
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80011c2:	d809      	bhi.n	80011d8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c4:	1dfb      	adds	r3, r7, #7
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	001a      	movs	r2, r3
 80011ca:	231f      	movs	r3, #31
 80011cc:	401a      	ands	r2, r3
 80011ce:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <__NVIC_EnableIRQ+0x30>)
 80011d0:	2101      	movs	r1, #1
 80011d2:	4091      	lsls	r1, r2
 80011d4:	000a      	movs	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80011d8:	46c0      	nop			@ (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b002      	add	sp, #8
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	0002      	movs	r2, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	1dfb      	adds	r3, r7, #7
 80011f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011f2:	1dfb      	adds	r3, r7, #7
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80011f8:	d828      	bhi.n	800124c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011fa:	4a2f      	ldr	r2, [pc, #188]	@ (80012b8 <__NVIC_SetPriority+0xd4>)
 80011fc:	1dfb      	adds	r3, r7, #7
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b25b      	sxtb	r3, r3
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	33c0      	adds	r3, #192	@ 0xc0
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	589b      	ldr	r3, [r3, r2]
 800120a:	1dfa      	adds	r2, r7, #7
 800120c:	7812      	ldrb	r2, [r2, #0]
 800120e:	0011      	movs	r1, r2
 8001210:	2203      	movs	r2, #3
 8001212:	400a      	ands	r2, r1
 8001214:	00d2      	lsls	r2, r2, #3
 8001216:	21ff      	movs	r1, #255	@ 0xff
 8001218:	4091      	lsls	r1, r2
 800121a:	000a      	movs	r2, r1
 800121c:	43d2      	mvns	r2, r2
 800121e:	401a      	ands	r2, r3
 8001220:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	019b      	lsls	r3, r3, #6
 8001226:	22ff      	movs	r2, #255	@ 0xff
 8001228:	401a      	ands	r2, r3
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	0018      	movs	r0, r3
 8001230:	2303      	movs	r3, #3
 8001232:	4003      	ands	r3, r0
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001238:	481f      	ldr	r0, [pc, #124]	@ (80012b8 <__NVIC_SetPriority+0xd4>)
 800123a:	1dfb      	adds	r3, r7, #7
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b25b      	sxtb	r3, r3
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	430a      	orrs	r2, r1
 8001244:	33c0      	adds	r3, #192	@ 0xc0
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800124a:	e031      	b.n	80012b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800124c:	4a1b      	ldr	r2, [pc, #108]	@ (80012bc <__NVIC_SetPriority+0xd8>)
 800124e:	1dfb      	adds	r3, r7, #7
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	0019      	movs	r1, r3
 8001254:	230f      	movs	r3, #15
 8001256:	400b      	ands	r3, r1
 8001258:	3b08      	subs	r3, #8
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	3306      	adds	r3, #6
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	18d3      	adds	r3, r2, r3
 8001262:	3304      	adds	r3, #4
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	1dfa      	adds	r2, r7, #7
 8001268:	7812      	ldrb	r2, [r2, #0]
 800126a:	0011      	movs	r1, r2
 800126c:	2203      	movs	r2, #3
 800126e:	400a      	ands	r2, r1
 8001270:	00d2      	lsls	r2, r2, #3
 8001272:	21ff      	movs	r1, #255	@ 0xff
 8001274:	4091      	lsls	r1, r2
 8001276:	000a      	movs	r2, r1
 8001278:	43d2      	mvns	r2, r2
 800127a:	401a      	ands	r2, r3
 800127c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	019b      	lsls	r3, r3, #6
 8001282:	22ff      	movs	r2, #255	@ 0xff
 8001284:	401a      	ands	r2, r3
 8001286:	1dfb      	adds	r3, r7, #7
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	0018      	movs	r0, r3
 800128c:	2303      	movs	r3, #3
 800128e:	4003      	ands	r3, r0
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001294:	4809      	ldr	r0, [pc, #36]	@ (80012bc <__NVIC_SetPriority+0xd8>)
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	001c      	movs	r4, r3
 800129c:	230f      	movs	r3, #15
 800129e:	4023      	ands	r3, r4
 80012a0:	3b08      	subs	r3, #8
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	430a      	orrs	r2, r1
 80012a6:	3306      	adds	r3, #6
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	18c3      	adds	r3, r0, r3
 80012ac:	3304      	adds	r3, #4
 80012ae:	601a      	str	r2, [r3, #0]
}
 80012b0:	46c0      	nop			@ (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b003      	add	sp, #12
 80012b6:	bd90      	pop	{r4, r7, pc}
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	1e5a      	subs	r2, r3, #1
 80012cc:	2380      	movs	r3, #128	@ 0x80
 80012ce:	045b      	lsls	r3, r3, #17
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d301      	bcc.n	80012d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d4:	2301      	movs	r3, #1
 80012d6:	e010      	b.n	80012fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <SysTick_Config+0x44>)
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	3a01      	subs	r2, #1
 80012de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e0:	2301      	movs	r3, #1
 80012e2:	425b      	negs	r3, r3
 80012e4:	2103      	movs	r1, #3
 80012e6:	0018      	movs	r0, r3
 80012e8:	f7ff ff7c 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ec:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <SysTick_Config+0x44>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f2:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <SysTick_Config+0x44>)
 80012f4:	2207      	movs	r2, #7
 80012f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	0018      	movs	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b002      	add	sp, #8
 8001300:	bd80      	pop	{r7, pc}
 8001302:	46c0      	nop			@ (mov r8, r8)
 8001304:	e000e010 	.word	0xe000e010

08001308 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	210f      	movs	r1, #15
 8001314:	187b      	adds	r3, r7, r1
 8001316:	1c02      	adds	r2, r0, #0
 8001318:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	187b      	adds	r3, r7, r1
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b25b      	sxtb	r3, r3
 8001322:	0011      	movs	r1, r2
 8001324:	0018      	movs	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	46c0      	nop			@ (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	b004      	add	sp, #16
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	0002      	movs	r2, r0
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133e:	1dfb      	adds	r3, r7, #7
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	b25b      	sxtb	r3, r3
 8001344:	0018      	movs	r0, r3
 8001346:	f7ff ff33 	bl	80011b0 <__NVIC_EnableIRQ>
}
 800134a:	46c0      	nop			@ (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	b002      	add	sp, #8
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	0018      	movs	r0, r3
 800135e:	f7ff ffaf 	bl	80012c0 <SysTick_Config>
 8001362:	0003      	movs	r3, r0
}
 8001364:	0018      	movs	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	b002      	add	sp, #8
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e077      	b.n	800146e <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a3d      	ldr	r2, [pc, #244]	@ (8001478 <HAL_DMA_Init+0x10c>)
 8001384:	4694      	mov	ip, r2
 8001386:	4463      	add	r3, ip
 8001388:	2114      	movs	r1, #20
 800138a:	0018      	movs	r0, r3
 800138c:	f7fe febc 	bl	8000108 <__udivsi3>
 8001390:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8001392:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2225      	movs	r2, #37	@ 0x25
 800139c:	2102      	movs	r1, #2
 800139e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4934      	ldr	r1, [pc, #208]	@ (800147c <HAL_DMA_Init+0x110>)
 80013ac:	400a      	ands	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6819      	ldr	r1, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	431a      	orrs	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	431a      	orrs	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	0018      	movs	r0, r3
 80013ea:	f000 f9c3 	bl	8001774 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	2380      	movs	r3, #128	@ 0x80
 80013f4:	01db      	lsls	r3, r3, #7
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d102      	bne.n	8001400 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001408:	21ff      	movs	r1, #255	@ 0xff
 800140a:	400a      	ands	r2, r1
 800140c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001416:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d011      	beq.n	8001444 <HAL_DMA_Init+0xd8>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b04      	cmp	r3, #4
 8001426:	d80d      	bhi.n	8001444 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	0018      	movs	r0, r3
 800142c:	f000 f9ce 	bl	80017cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	e008      	b.n	8001456 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2225      	movs	r2, #37	@ 0x25
 8001460:	2101      	movs	r1, #1
 8001462:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2224      	movs	r2, #36	@ 0x24
 8001468:	2100      	movs	r1, #0
 800146a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	0018      	movs	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	b002      	add	sp, #8
 8001474:	bd80      	pop	{r7, pc}
 8001476:	46c0      	nop			@ (mov r8, r8)
 8001478:	bffdfff8 	.word	0xbffdfff8
 800147c:	ffff800f 	.word	0xffff800f

08001480 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
 800148c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800148e:	2317      	movs	r3, #23
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2224      	movs	r2, #36	@ 0x24
 800149a:	5c9b      	ldrb	r3, [r3, r2]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d101      	bne.n	80014a4 <HAL_DMA_Start_IT+0x24>
 80014a0:	2302      	movs	r3, #2
 80014a2:	e070      	b.n	8001586 <HAL_DMA_Start_IT+0x106>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2224      	movs	r2, #36	@ 0x24
 80014a8:	2101      	movs	r1, #1
 80014aa:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2225      	movs	r2, #37	@ 0x25
 80014b0:	5c9b      	ldrb	r3, [r3, r2]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d157      	bne.n	8001568 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2225      	movs	r2, #37	@ 0x25
 80014bc:	2102      	movs	r1, #2
 80014be:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2200      	movs	r2, #0
 80014c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2101      	movs	r1, #1
 80014d2:	438a      	bics	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	68b9      	ldr	r1, [r7, #8]
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f000 f909 	bl	80016f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d008      	beq.n	80014fc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	210e      	movs	r1, #14
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	e00f      	b.n	800151c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2104      	movs	r1, #4
 8001508:	438a      	bics	r2, r1
 800150a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	210a      	movs	r1, #10
 8001518:	430a      	orrs	r2, r1
 800151a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	2380      	movs	r3, #128	@ 0x80
 8001524:	025b      	lsls	r3, r3, #9
 8001526:	4013      	ands	r3, r2
 8001528:	d008      	beq.n	800153c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001534:	2180      	movs	r1, #128	@ 0x80
 8001536:	0049      	lsls	r1, r1, #1
 8001538:	430a      	orrs	r2, r1
 800153a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001540:	2b00      	cmp	r3, #0
 8001542:	d008      	beq.n	8001556 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800154e:	2180      	movs	r1, #128	@ 0x80
 8001550:	0049      	lsls	r1, r1, #1
 8001552:	430a      	orrs	r2, r1
 8001554:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2101      	movs	r1, #1
 8001562:	430a      	orrs	r2, r1
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	e007      	b.n	8001578 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2224      	movs	r2, #36	@ 0x24
 800156c:	2100      	movs	r1, #0
 800156e:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001570:	2317      	movs	r3, #23
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	2202      	movs	r2, #2
 8001576:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2224      	movs	r2, #36	@ 0x24
 800157c:	2100      	movs	r1, #0
 800157e:	5499      	strb	r1, [r3, r2]

  return status;
 8001580:	2317      	movs	r3, #23
 8001582:	18fb      	adds	r3, r7, r3
 8001584:	781b      	ldrb	r3, [r3, #0]
}
 8001586:	0018      	movs	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	b006      	add	sp, #24
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8001598:	4b55      	ldr	r3, [pc, #340]	@ (80016f0 <HAL_DMA_IRQHandler+0x160>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	221c      	movs	r2, #28
 80015ac:	4013      	ands	r3, r2
 80015ae:	2204      	movs	r2, #4
 80015b0:	409a      	lsls	r2, r3
 80015b2:	0013      	movs	r3, r2
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4013      	ands	r3, r2
 80015b8:	d027      	beq.n	800160a <HAL_DMA_IRQHandler+0x7a>
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	2204      	movs	r2, #4
 80015be:	4013      	ands	r3, r2
 80015c0:	d023      	beq.n	800160a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2220      	movs	r2, #32
 80015ca:	4013      	ands	r3, r2
 80015cc:	d107      	bne.n	80015de <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2104      	movs	r1, #4
 80015da:	438a      	bics	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 80015de:	4b44      	ldr	r3, [pc, #272]	@ (80016f0 <HAL_DMA_IRQHandler+0x160>)
 80015e0:	6859      	ldr	r1, [r3, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	221c      	movs	r2, #28
 80015e8:	4013      	ands	r3, r2
 80015ea:	2204      	movs	r2, #4
 80015ec:	409a      	lsls	r2, r3
 80015ee:	4b40      	ldr	r3, [pc, #256]	@ (80016f0 <HAL_DMA_IRQHandler+0x160>)
 80015f0:	430a      	orrs	r2, r1
 80015f2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d100      	bne.n	80015fe <HAL_DMA_IRQHandler+0x6e>
 80015fc:	e073      	b.n	80016e6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	0010      	movs	r0, r2
 8001606:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001608:	e06d      	b.n	80016e6 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	221c      	movs	r2, #28
 8001610:	4013      	ands	r3, r2
 8001612:	2202      	movs	r2, #2
 8001614:	409a      	lsls	r2, r3
 8001616:	0013      	movs	r3, r2
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	4013      	ands	r3, r2
 800161c:	d02e      	beq.n	800167c <HAL_DMA_IRQHandler+0xec>
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	2202      	movs	r2, #2
 8001622:	4013      	ands	r3, r2
 8001624:	d02a      	beq.n	800167c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2220      	movs	r2, #32
 800162e:	4013      	ands	r3, r2
 8001630:	d10b      	bne.n	800164a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	210a      	movs	r1, #10
 800163e:	438a      	bics	r2, r1
 8001640:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2225      	movs	r2, #37	@ 0x25
 8001646:	2101      	movs	r1, #1
 8001648:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800164a:	4b29      	ldr	r3, [pc, #164]	@ (80016f0 <HAL_DMA_IRQHandler+0x160>)
 800164c:	6859      	ldr	r1, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	221c      	movs	r2, #28
 8001654:	4013      	ands	r3, r2
 8001656:	2202      	movs	r2, #2
 8001658:	409a      	lsls	r2, r3
 800165a:	4b25      	ldr	r3, [pc, #148]	@ (80016f0 <HAL_DMA_IRQHandler+0x160>)
 800165c:	430a      	orrs	r2, r1
 800165e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2224      	movs	r2, #36	@ 0x24
 8001664:	2100      	movs	r1, #0
 8001666:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166c:	2b00      	cmp	r3, #0
 800166e:	d03a      	beq.n	80016e6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	0010      	movs	r0, r2
 8001678:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800167a:	e034      	b.n	80016e6 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001680:	221c      	movs	r2, #28
 8001682:	4013      	ands	r3, r2
 8001684:	2208      	movs	r2, #8
 8001686:	409a      	lsls	r2, r3
 8001688:	0013      	movs	r3, r2
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	4013      	ands	r3, r2
 800168e:	d02b      	beq.n	80016e8 <HAL_DMA_IRQHandler+0x158>
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	2208      	movs	r2, #8
 8001694:	4013      	ands	r3, r2
 8001696:	d027      	beq.n	80016e8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	210e      	movs	r1, #14
 80016a4:	438a      	bics	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80016a8:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <HAL_DMA_IRQHandler+0x160>)
 80016aa:	6859      	ldr	r1, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b0:	221c      	movs	r2, #28
 80016b2:	4013      	ands	r3, r2
 80016b4:	2201      	movs	r2, #1
 80016b6:	409a      	lsls	r2, r3
 80016b8:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <HAL_DMA_IRQHandler+0x160>)
 80016ba:	430a      	orrs	r2, r1
 80016bc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2225      	movs	r2, #37	@ 0x25
 80016c8:	2101      	movs	r1, #1
 80016ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2224      	movs	r2, #36	@ 0x24
 80016d0:	2100      	movs	r1, #0
 80016d2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	0010      	movs	r0, r2
 80016e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80016e6:	46c0      	nop			@ (mov r8, r8)
 80016e8:	46c0      	nop			@ (mov r8, r8)
}
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b004      	add	sp, #16
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40020000 	.word	0x40020000

080016f4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800170a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001710:	2b00      	cmp	r3, #0
 8001712:	d004      	beq.n	800171e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800171c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800171e:	4b14      	ldr	r3, [pc, #80]	@ (8001770 <DMA_SetConfig+0x7c>)
 8001720:	6859      	ldr	r1, [r3, #4]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001726:	221c      	movs	r2, #28
 8001728:	4013      	ands	r3, r2
 800172a:	2201      	movs	r2, #1
 800172c:	409a      	lsls	r2, r3
 800172e:	4b10      	ldr	r3, [pc, #64]	@ (8001770 <DMA_SetConfig+0x7c>)
 8001730:	430a      	orrs	r2, r1
 8001732:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b10      	cmp	r3, #16
 8001742:	d108      	bne.n	8001756 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001754:	e007      	b.n	8001766 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	60da      	str	r2, [r3, #12]
}
 8001766:	46c0      	nop			@ (mov r8, r8)
 8001768:	46bd      	mov	sp, r7
 800176a:	b004      	add	sp, #16
 800176c:	bd80      	pop	{r7, pc}
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	40020000 	.word	0x40020000

08001774 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	001a      	movs	r2, r3
 8001782:	23ff      	movs	r3, #255	@ 0xff
 8001784:	4013      	ands	r3, r2
 8001786:	3b08      	subs	r3, #8
 8001788:	2114      	movs	r1, #20
 800178a:	0018      	movs	r0, r3
 800178c:	f7fe fcbc 	bl	8000108 <__udivsi3>
 8001790:	0003      	movs	r3, r0
 8001792:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001798:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800179a:	4a0a      	ldr	r2, [pc, #40]	@ (80017c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800179c:	4694      	mov	ip, r2
 800179e:	4463      	add	r3, ip
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	001a      	movs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a07      	ldr	r2, [pc, #28]	@ (80017c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80017ac:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	221c      	movs	r2, #28
 80017b2:	4013      	ands	r3, r2
 80017b4:	2201      	movs	r2, #1
 80017b6:	409a      	lsls	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80017bc:	46c0      	nop			@ (mov r8, r8)
 80017be:	46bd      	mov	sp, r7
 80017c0:	b004      	add	sp, #16
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	10008200 	.word	0x10008200
 80017c8:	40020880 	.word	0x40020880

080017cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	22ff      	movs	r2, #255	@ 0xff
 80017da:	4013      	ands	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80017e2:	4694      	mov	ip, r2
 80017e4:	4463      	add	r3, ip
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	001a      	movs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a07      	ldr	r2, [pc, #28]	@ (8001810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80017f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	2203      	movs	r2, #3
 80017fa:	4013      	ands	r3, r2
 80017fc:	2201      	movs	r2, #1
 80017fe:	409a      	lsls	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001804:	46c0      	nop			@ (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	b004      	add	sp, #16
 800180a:	bd80      	pop	{r7, pc}
 800180c:	1000823f 	.word	0x1000823f
 8001810:	40020940 	.word	0x40020940

08001814 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001822:	e14d      	b.n	8001ac0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2101      	movs	r1, #1
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4091      	lsls	r1, r2
 800182e:	000a      	movs	r2, r1
 8001830:	4013      	ands	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d100      	bne.n	800183c <HAL_GPIO_Init+0x28>
 800183a:	e13e      	b.n	8001aba <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b02      	cmp	r3, #2
 8001842:	d003      	beq.n	800184c <HAL_GPIO_Init+0x38>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b12      	cmp	r3, #18
 800184a:	d125      	bne.n	8001898 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	08da      	lsrs	r2, r3, #3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3208      	adds	r2, #8
 8001854:	0092      	lsls	r2, r2, #2
 8001856:	58d3      	ldr	r3, [r2, r3]
 8001858:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	2207      	movs	r2, #7
 800185e:	4013      	ands	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	220f      	movs	r2, #15
 8001864:	409a      	lsls	r2, r3
 8001866:	0013      	movs	r3, r2
 8001868:	43da      	mvns	r2, r3
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	4013      	ands	r3, r2
 800186e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	220f      	movs	r2, #15
 8001876:	401a      	ands	r2, r3
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	2107      	movs	r1, #7
 800187c:	400b      	ands	r3, r1
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	409a      	lsls	r2, r3
 8001882:	0013      	movs	r3, r2
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	4313      	orrs	r3, r2
 8001888:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	08da      	lsrs	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3208      	adds	r2, #8
 8001892:	0092      	lsls	r2, r2, #2
 8001894:	6979      	ldr	r1, [r7, #20]
 8001896:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2203      	movs	r2, #3
 80018a4:	409a      	lsls	r2, r3
 80018a6:	0013      	movs	r3, r2
 80018a8:	43da      	mvns	r2, r3
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	4013      	ands	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2203      	movs	r2, #3
 80018b6:	401a      	ands	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	409a      	lsls	r2, r3
 80018be:	0013      	movs	r3, r2
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d00b      	beq.n	80018ec <HAL_GPIO_Init+0xd8>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d007      	beq.n	80018ec <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018e0:	2b11      	cmp	r3, #17
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b12      	cmp	r3, #18
 80018ea:	d130      	bne.n	800194e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	409a      	lsls	r2, r3
 80018fa:	0013      	movs	r3, r2
 80018fc:	43da      	mvns	r2, r3
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	4013      	ands	r3, r2
 8001902:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	409a      	lsls	r2, r3
 800190e:	0013      	movs	r3, r2
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	4313      	orrs	r3, r2
 8001914:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001922:	2201      	movs	r2, #1
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	409a      	lsls	r2, r3
 8001928:	0013      	movs	r3, r2
 800192a:	43da      	mvns	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	4013      	ands	r3, r2
 8001930:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	091b      	lsrs	r3, r3, #4
 8001938:	2201      	movs	r2, #1
 800193a:	401a      	ands	r2, r3
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	409a      	lsls	r2, r3
 8001940:	0013      	movs	r3, r2
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4313      	orrs	r3, r2
 8001946:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b03      	cmp	r3, #3
 8001954:	d017      	beq.n	8001986 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	2203      	movs	r2, #3
 8001962:	409a      	lsls	r2, r3
 8001964:	0013      	movs	r3, r2
 8001966:	43da      	mvns	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	4013      	ands	r3, r2
 800196c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	409a      	lsls	r2, r3
 8001978:	0013      	movs	r3, r2
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4313      	orrs	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	2380      	movs	r3, #128	@ 0x80
 800198c:	055b      	lsls	r3, r3, #21
 800198e:	4013      	ands	r3, r2
 8001990:	d100      	bne.n	8001994 <HAL_GPIO_Init+0x180>
 8001992:	e092      	b.n	8001aba <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001994:	4a50      	ldr	r2, [pc, #320]	@ (8001ad8 <HAL_GPIO_Init+0x2c4>)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	089b      	lsrs	r3, r3, #2
 800199a:	3318      	adds	r3, #24
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	589b      	ldr	r3, [r3, r2]
 80019a0:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	2203      	movs	r2, #3
 80019a6:	4013      	ands	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	220f      	movs	r2, #15
 80019ac:	409a      	lsls	r2, r3
 80019ae:	0013      	movs	r3, r2
 80019b0:	43da      	mvns	r2, r3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	4013      	ands	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	23a0      	movs	r3, #160	@ 0xa0
 80019bc:	05db      	lsls	r3, r3, #23
 80019be:	429a      	cmp	r2, r3
 80019c0:	d013      	beq.n	80019ea <HAL_GPIO_Init+0x1d6>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a45      	ldr	r2, [pc, #276]	@ (8001adc <HAL_GPIO_Init+0x2c8>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d00d      	beq.n	80019e6 <HAL_GPIO_Init+0x1d2>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a44      	ldr	r2, [pc, #272]	@ (8001ae0 <HAL_GPIO_Init+0x2cc>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d007      	beq.n	80019e2 <HAL_GPIO_Init+0x1ce>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a43      	ldr	r2, [pc, #268]	@ (8001ae4 <HAL_GPIO_Init+0x2d0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d101      	bne.n	80019de <HAL_GPIO_Init+0x1ca>
 80019da:	2305      	movs	r3, #5
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x1d8>
 80019de:	2306      	movs	r3, #6
 80019e0:	e004      	b.n	80019ec <HAL_GPIO_Init+0x1d8>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e002      	b.n	80019ec <HAL_GPIO_Init+0x1d8>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_GPIO_Init+0x1d8>
 80019ea:	2300      	movs	r3, #0
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	2103      	movs	r1, #3
 80019f0:	400a      	ands	r2, r1
 80019f2:	00d2      	lsls	r2, r2, #3
 80019f4:	4093      	lsls	r3, r2
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80019fc:	4936      	ldr	r1, [pc, #216]	@ (8001ad8 <HAL_GPIO_Init+0x2c4>)
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	3318      	adds	r3, #24
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001a0a:	4a33      	ldr	r2, [pc, #204]	@ (8001ad8 <HAL_GPIO_Init+0x2c4>)
 8001a0c:	2380      	movs	r3, #128	@ 0x80
 8001a0e:	58d3      	ldr	r3, [r2, r3]
 8001a10:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	43da      	mvns	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	2380      	movs	r3, #128	@ 0x80
 8001a22:	025b      	lsls	r3, r3, #9
 8001a24:	4013      	ands	r3, r2
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001a30:	4929      	ldr	r1, [pc, #164]	@ (8001ad8 <HAL_GPIO_Init+0x2c4>)
 8001a32:	2280      	movs	r2, #128	@ 0x80
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001a38:	4a27      	ldr	r2, [pc, #156]	@ (8001ad8 <HAL_GPIO_Init+0x2c4>)
 8001a3a:	2384      	movs	r3, #132	@ 0x84
 8001a3c:	58d3      	ldr	r3, [r2, r3]
 8001a3e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	43da      	mvns	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	4013      	ands	r3, r2
 8001a48:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	2380      	movs	r3, #128	@ 0x80
 8001a50:	029b      	lsls	r3, r3, #10
 8001a52:	4013      	ands	r3, r2
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001a5e:	491e      	ldr	r1, [pc, #120]	@ (8001ad8 <HAL_GPIO_Init+0x2c4>)
 8001a60:	2284      	movs	r2, #132	@ 0x84
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad8 <HAL_GPIO_Init+0x2c4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	4013      	ands	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	2380      	movs	r3, #128	@ 0x80
 8001a7c:	035b      	lsls	r3, r3, #13
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001a8a:	4b13      	ldr	r3, [pc, #76]	@ (8001ad8 <HAL_GPIO_Init+0x2c4>)
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001a90:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <HAL_GPIO_Init+0x2c4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	43da      	mvns	r2, r3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	2380      	movs	r3, #128	@ 0x80
 8001aa6:	039b      	lsls	r3, r3, #14
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001ab4:	4b08      	ldr	r3, [pc, #32]	@ (8001ad8 <HAL_GPIO_Init+0x2c4>)
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	3301      	adds	r3, #1
 8001abe:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	40da      	lsrs	r2, r3
 8001ac8:	1e13      	subs	r3, r2, #0
 8001aca:	d000      	beq.n	8001ace <HAL_GPIO_Init+0x2ba>
 8001acc:	e6aa      	b.n	8001824 <HAL_GPIO_Init+0x10>
  }
}
 8001ace:	46c0      	nop			@ (mov r8, r8)
 8001ad0:	46c0      	nop			@ (mov r8, r8)
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b006      	add	sp, #24
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021800 	.word	0x40021800
 8001adc:	50000400 	.word	0x50000400
 8001ae0:	50000800 	.word	0x50000800
 8001ae4:	50001400 	.word	0x50001400

08001ae8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	000a      	movs	r2, r1
 8001af2:	1cbb      	adds	r3, r7, #2
 8001af4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	1cba      	adds	r2, r7, #2
 8001afc:	8812      	ldrh	r2, [r2, #0]
 8001afe:	4013      	ands	r3, r2
 8001b00:	d004      	beq.n	8001b0c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b02:	230f      	movs	r3, #15
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	2201      	movs	r2, #1
 8001b08:	701a      	strb	r2, [r3, #0]
 8001b0a:	e003      	b.n	8001b14 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b0c:	230f      	movs	r3, #15
 8001b0e:	18fb      	adds	r3, r7, r3
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001b14:	230f      	movs	r3, #15
 8001b16:	18fb      	adds	r3, r7, r3
 8001b18:	781b      	ldrb	r3, [r3, #0]
}
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	b004      	add	sp, #16
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	0008      	movs	r0, r1
 8001b2c:	0011      	movs	r1, r2
 8001b2e:	1cbb      	adds	r3, r7, #2
 8001b30:	1c02      	adds	r2, r0, #0
 8001b32:	801a      	strh	r2, [r3, #0]
 8001b34:	1c7b      	adds	r3, r7, #1
 8001b36:	1c0a      	adds	r2, r1, #0
 8001b38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b3a:	1c7b      	adds	r3, r7, #1
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d004      	beq.n	8001b4c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b42:	1cbb      	adds	r3, r7, #2
 8001b44:	881a      	ldrh	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b4a:	e003      	b.n	8001b54 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b4c:	1cbb      	adds	r3, r7, #2
 8001b4e:	881a      	ldrh	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b54:	46c0      	nop			@ (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b002      	add	sp, #8
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	000a      	movs	r2, r1
 8001b66:	1cbb      	adds	r3, r7, #2
 8001b68:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b70:	1cbb      	adds	r3, r7, #2
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	4013      	ands	r3, r2
 8001b78:	041a      	lsls	r2, r3, #16
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	1cb9      	adds	r1, r7, #2
 8001b80:	8809      	ldrh	r1, [r1, #0]
 8001b82:	400b      	ands	r3, r1
 8001b84:	431a      	orrs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	619a      	str	r2, [r3, #24]
}
 8001b8a:	46c0      	nop			@ (mov r8, r8)
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b004      	add	sp, #16
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e08f      	b.n	8001cc6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2241      	movs	r2, #65	@ 0x41
 8001baa:	5c9b      	ldrb	r3, [r3, r2]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d107      	bne.n	8001bc2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2240      	movs	r2, #64	@ 0x40
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f7ff f913 	bl	8000de8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2241      	movs	r2, #65	@ 0x41
 8001bc6:	2124      	movs	r1, #36	@ 0x24
 8001bc8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	438a      	bics	r2, r1
 8001bd8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	493b      	ldr	r1, [pc, #236]	@ (8001cd0 <HAL_I2C_Init+0x13c>)
 8001be4:	400a      	ands	r2, r1
 8001be6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4938      	ldr	r1, [pc, #224]	@ (8001cd4 <HAL_I2C_Init+0x140>)
 8001bf4:	400a      	ands	r2, r1
 8001bf6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d108      	bne.n	8001c12 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2180      	movs	r1, #128	@ 0x80
 8001c0a:	0209      	lsls	r1, r1, #8
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	e007      	b.n	8001c22 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2184      	movs	r1, #132	@ 0x84
 8001c1c:	0209      	lsls	r1, r1, #8
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d109      	bne.n	8001c3e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2180      	movs	r1, #128	@ 0x80
 8001c36:	0109      	lsls	r1, r1, #4
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	e007      	b.n	8001c4e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4923      	ldr	r1, [pc, #140]	@ (8001cd8 <HAL_I2C_Init+0x144>)
 8001c4a:	400a      	ands	r2, r1
 8001c4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4920      	ldr	r1, [pc, #128]	@ (8001cdc <HAL_I2C_Init+0x148>)
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	491a      	ldr	r1, [pc, #104]	@ (8001cd4 <HAL_I2C_Init+0x140>)
 8001c6a:	400a      	ands	r2, r1
 8001c6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	431a      	orrs	r2, r3
 8001c78:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69d9      	ldr	r1, [r3, #28]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1a      	ldr	r2, [r3, #32]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2241      	movs	r2, #65	@ 0x41
 8001cb2:	2120      	movs	r1, #32
 8001cb4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2242      	movs	r2, #66	@ 0x42
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b002      	add	sp, #8
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	46c0      	nop			@ (mov r8, r8)
 8001cd0:	f0ffffff 	.word	0xf0ffffff
 8001cd4:	ffff7fff 	.word	0xffff7fff
 8001cd8:	fffff7ff 	.word	0xfffff7ff
 8001cdc:	02008000 	.word	0x02008000

08001ce0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b089      	sub	sp, #36	@ 0x24
 8001ce4:	af02      	add	r7, sp, #8
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	0008      	movs	r0, r1
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	0019      	movs	r1, r3
 8001cee:	230a      	movs	r3, #10
 8001cf0:	18fb      	adds	r3, r7, r3
 8001cf2:	1c02      	adds	r2, r0, #0
 8001cf4:	801a      	strh	r2, [r3, #0]
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	1c0a      	adds	r2, r1, #0
 8001cfc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2241      	movs	r2, #65	@ 0x41
 8001d02:	5c9b      	ldrb	r3, [r3, r2]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b20      	cmp	r3, #32
 8001d08:	d000      	beq.n	8001d0c <HAL_I2C_Master_Transmit+0x2c>
 8001d0a:	e10a      	b.n	8001f22 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2240      	movs	r2, #64	@ 0x40
 8001d10:	5c9b      	ldrb	r3, [r3, r2]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_I2C_Master_Transmit+0x3a>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e104      	b.n	8001f24 <HAL_I2C_Master_Transmit+0x244>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2240      	movs	r2, #64	@ 0x40
 8001d1e:	2101      	movs	r1, #1
 8001d20:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d22:	f7ff fa3b 	bl	800119c <HAL_GetTick>
 8001d26:	0003      	movs	r3, r0
 8001d28:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d2a:	2380      	movs	r3, #128	@ 0x80
 8001d2c:	0219      	lsls	r1, r3, #8
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	2319      	movs	r3, #25
 8001d36:	2201      	movs	r2, #1
 8001d38:	f000 fa26 	bl	8002188 <I2C_WaitOnFlagUntilTimeout>
 8001d3c:	1e03      	subs	r3, r0, #0
 8001d3e:	d001      	beq.n	8001d44 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0ef      	b.n	8001f24 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2241      	movs	r2, #65	@ 0x41
 8001d48:	2121      	movs	r1, #33	@ 0x21
 8001d4a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2242      	movs	r2, #66	@ 0x42
 8001d50:	2110      	movs	r1, #16
 8001d52:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2208      	movs	r2, #8
 8001d64:	18ba      	adds	r2, r7, r2
 8001d66:	8812      	ldrh	r2, [r2, #0]
 8001d68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	2bff      	cmp	r3, #255	@ 0xff
 8001d78:	d906      	bls.n	8001d88 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	22ff      	movs	r2, #255	@ 0xff
 8001d7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001d80:	2380      	movs	r3, #128	@ 0x80
 8001d82:	045b      	lsls	r3, r3, #17
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	e007      	b.n	8001d98 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001d92:	2380      	movs	r3, #128	@ 0x80
 8001d94:	049b      	lsls	r3, r3, #18
 8001d96:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d027      	beq.n	8001df0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da4:	781a      	ldrb	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	697c      	ldr	r4, [r7, #20]
 8001ddc:	230a      	movs	r3, #10
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	8819      	ldrh	r1, [r3, #0]
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	4b51      	ldr	r3, [pc, #324]	@ (8001f2c <HAL_I2C_Master_Transmit+0x24c>)
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	0023      	movs	r3, r4
 8001dea:	f000 fc45 	bl	8002678 <I2C_TransferConfig>
 8001dee:	e06f      	b.n	8001ed0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	697c      	ldr	r4, [r7, #20]
 8001df8:	230a      	movs	r3, #10
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	8819      	ldrh	r1, [r3, #0]
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	4b4a      	ldr	r3, [pc, #296]	@ (8001f2c <HAL_I2C_Master_Transmit+0x24c>)
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	0023      	movs	r3, r4
 8001e06:	f000 fc37 	bl	8002678 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001e0a:	e061      	b.n	8001ed0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	0018      	movs	r0, r3
 8001e14:	f000 fa10 	bl	8002238 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e18:	1e03      	subs	r3, r0, #0
 8001e1a:	d001      	beq.n	8001e20 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e081      	b.n	8001f24 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e24:	781a      	ldrb	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d03a      	beq.n	8001ed0 <HAL_I2C_Master_Transmit+0x1f0>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d136      	bne.n	8001ed0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	0013      	movs	r3, r2
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2180      	movs	r1, #128	@ 0x80
 8001e70:	f000 f98a 	bl	8002188 <I2C_WaitOnFlagUntilTimeout>
 8001e74:	1e03      	subs	r3, r0, #0
 8001e76:	d001      	beq.n	8001e7c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e053      	b.n	8001f24 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	2bff      	cmp	r3, #255	@ 0xff
 8001e84:	d911      	bls.n	8001eaa <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	22ff      	movs	r2, #255	@ 0xff
 8001e8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	2380      	movs	r3, #128	@ 0x80
 8001e94:	045c      	lsls	r4, r3, #17
 8001e96:	230a      	movs	r3, #10
 8001e98:	18fb      	adds	r3, r7, r3
 8001e9a:	8819      	ldrh	r1, [r3, #0]
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	0023      	movs	r3, r4
 8001ea4:	f000 fbe8 	bl	8002678 <I2C_TransferConfig>
 8001ea8:	e012      	b.n	8001ed0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	2380      	movs	r3, #128	@ 0x80
 8001ebc:	049c      	lsls	r4, r3, #18
 8001ebe:	230a      	movs	r3, #10
 8001ec0:	18fb      	adds	r3, r7, r3
 8001ec2:	8819      	ldrh	r1, [r3, #0]
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	0023      	movs	r3, r4
 8001ecc:	f000 fbd4 	bl	8002678 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d198      	bne.n	8001e0c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f000 f9ef 	bl	80022c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ee6:	1e03      	subs	r3, r0, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e01a      	b.n	8001f24 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	490b      	ldr	r1, [pc, #44]	@ (8001f30 <HAL_I2C_Master_Transmit+0x250>)
 8001f02:	400a      	ands	r2, r1
 8001f04:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2241      	movs	r2, #65	@ 0x41
 8001f0a:	2120      	movs	r1, #32
 8001f0c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2242      	movs	r2, #66	@ 0x42
 8001f12:	2100      	movs	r1, #0
 8001f14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2240      	movs	r2, #64	@ 0x40
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e000      	b.n	8001f24 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8001f22:	2302      	movs	r3, #2
  }
}
 8001f24:	0018      	movs	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b007      	add	sp, #28
 8001f2a:	bd90      	pop	{r4, r7, pc}
 8001f2c:	80002000 	.word	0x80002000
 8001f30:	fe00e800 	.word	0xfe00e800

08001f34 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b089      	sub	sp, #36	@ 0x24
 8001f38:	af02      	add	r7, sp, #8
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	0008      	movs	r0, r1
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	0019      	movs	r1, r3
 8001f42:	230a      	movs	r3, #10
 8001f44:	18fb      	adds	r3, r7, r3
 8001f46:	1c02      	adds	r2, r0, #0
 8001f48:	801a      	strh	r2, [r3, #0]
 8001f4a:	2308      	movs	r3, #8
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	1c0a      	adds	r2, r1, #0
 8001f50:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2241      	movs	r2, #65	@ 0x41
 8001f56:	5c9b      	ldrb	r3, [r3, r2]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b20      	cmp	r3, #32
 8001f5c:	d000      	beq.n	8001f60 <HAL_I2C_Master_Receive+0x2c>
 8001f5e:	e0e8      	b.n	8002132 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2240      	movs	r2, #64	@ 0x40
 8001f64:	5c9b      	ldrb	r3, [r3, r2]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_I2C_Master_Receive+0x3a>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e0e2      	b.n	8002134 <HAL_I2C_Master_Receive+0x200>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2240      	movs	r2, #64	@ 0x40
 8001f72:	2101      	movs	r1, #1
 8001f74:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f76:	f7ff f911 	bl	800119c <HAL_GetTick>
 8001f7a:	0003      	movs	r3, r0
 8001f7c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f7e:	2380      	movs	r3, #128	@ 0x80
 8001f80:	0219      	lsls	r1, r3, #8
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	2319      	movs	r3, #25
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f000 f8fc 	bl	8002188 <I2C_WaitOnFlagUntilTimeout>
 8001f90:	1e03      	subs	r3, r0, #0
 8001f92:	d001      	beq.n	8001f98 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0cd      	b.n	8002134 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2241      	movs	r2, #65	@ 0x41
 8001f9c:	2122      	movs	r1, #34	@ 0x22
 8001f9e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2242      	movs	r2, #66	@ 0x42
 8001fa4:	2110      	movs	r1, #16
 8001fa6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2208      	movs	r2, #8
 8001fb8:	18ba      	adds	r2, r7, r2
 8001fba:	8812      	ldrh	r2, [r2, #0]
 8001fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	2bff      	cmp	r3, #255	@ 0xff
 8001fcc:	d911      	bls.n	8001ff2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	22ff      	movs	r2, #255	@ 0xff
 8001fd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	2380      	movs	r3, #128	@ 0x80
 8001fdc:	045c      	lsls	r4, r3, #17
 8001fde:	230a      	movs	r3, #10
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	8819      	ldrh	r1, [r3, #0]
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	4b55      	ldr	r3, [pc, #340]	@ (800213c <HAL_I2C_Master_Receive+0x208>)
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	0023      	movs	r3, r4
 8001fec:	f000 fb44 	bl	8002678 <I2C_TransferConfig>
 8001ff0:	e076      	b.n	80020e0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002000:	b2da      	uxtb	r2, r3
 8002002:	2380      	movs	r3, #128	@ 0x80
 8002004:	049c      	lsls	r4, r3, #18
 8002006:	230a      	movs	r3, #10
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	8819      	ldrh	r1, [r3, #0]
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	4b4b      	ldr	r3, [pc, #300]	@ (800213c <HAL_I2C_Master_Receive+0x208>)
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	0023      	movs	r3, r4
 8002014:	f000 fb30 	bl	8002678 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002018:	e062      	b.n	80020e0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	0018      	movs	r0, r3
 8002022:	f000 f993 	bl	800234c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002026:	1e03      	subs	r3, r0, #0
 8002028:	d001      	beq.n	800202e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e082      	b.n	8002134 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800204a:	3b01      	subs	r3, #1
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002056:	b29b      	uxth	r3, r3
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002064:	b29b      	uxth	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d03a      	beq.n	80020e0 <HAL_I2C_Master_Receive+0x1ac>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800206e:	2b00      	cmp	r3, #0
 8002070:	d136      	bne.n	80020e0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002072:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	0013      	movs	r3, r2
 800207c:	2200      	movs	r2, #0
 800207e:	2180      	movs	r1, #128	@ 0x80
 8002080:	f000 f882 	bl	8002188 <I2C_WaitOnFlagUntilTimeout>
 8002084:	1e03      	subs	r3, r0, #0
 8002086:	d001      	beq.n	800208c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e053      	b.n	8002134 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002090:	b29b      	uxth	r3, r3
 8002092:	2bff      	cmp	r3, #255	@ 0xff
 8002094:	d911      	bls.n	80020ba <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	22ff      	movs	r2, #255	@ 0xff
 800209a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	2380      	movs	r3, #128	@ 0x80
 80020a4:	045c      	lsls	r4, r3, #17
 80020a6:	230a      	movs	r3, #10
 80020a8:	18fb      	adds	r3, r7, r3
 80020aa:	8819      	ldrh	r1, [r3, #0]
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	2300      	movs	r3, #0
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	0023      	movs	r3, r4
 80020b4:	f000 fae0 	bl	8002678 <I2C_TransferConfig>
 80020b8:	e012      	b.n	80020e0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020be:	b29a      	uxth	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	2380      	movs	r3, #128	@ 0x80
 80020cc:	049c      	lsls	r4, r3, #18
 80020ce:	230a      	movs	r3, #10
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	8819      	ldrh	r1, [r3, #0]
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	2300      	movs	r3, #0
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	0023      	movs	r3, r4
 80020dc:	f000 facc 	bl	8002678 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d197      	bne.n	800201a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	0018      	movs	r0, r3
 80020f2:	f000 f8e7 	bl	80022c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020f6:	1e03      	subs	r3, r0, #0
 80020f8:	d001      	beq.n	80020fe <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e01a      	b.n	8002134 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2220      	movs	r2, #32
 8002104:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	490b      	ldr	r1, [pc, #44]	@ (8002140 <HAL_I2C_Master_Receive+0x20c>)
 8002112:	400a      	ands	r2, r1
 8002114:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2241      	movs	r2, #65	@ 0x41
 800211a:	2120      	movs	r1, #32
 800211c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2242      	movs	r2, #66	@ 0x42
 8002122:	2100      	movs	r1, #0
 8002124:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2240      	movs	r2, #64	@ 0x40
 800212a:	2100      	movs	r1, #0
 800212c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	e000      	b.n	8002134 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002132:	2302      	movs	r3, #2
  }
}
 8002134:	0018      	movs	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	b007      	add	sp, #28
 800213a:	bd90      	pop	{r4, r7, pc}
 800213c:	80002400 	.word	0x80002400
 8002140:	fe00e800 	.word	0xfe00e800

08002144 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	2202      	movs	r2, #2
 8002154:	4013      	ands	r3, r2
 8002156:	2b02      	cmp	r3, #2
 8002158:	d103      	bne.n	8002162 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2200      	movs	r2, #0
 8002160:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	2201      	movs	r2, #1
 800216a:	4013      	ands	r3, r2
 800216c:	2b01      	cmp	r3, #1
 800216e:	d007      	beq.n	8002180 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699a      	ldr	r2, [r3, #24]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2101      	movs	r1, #1
 800217c:	430a      	orrs	r2, r1
 800217e:	619a      	str	r2, [r3, #24]
  }
}
 8002180:	46c0      	nop			@ (mov r8, r8)
 8002182:	46bd      	mov	sp, r7
 8002184:	b002      	add	sp, #8
 8002186:	bd80      	pop	{r7, pc}

08002188 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	1dfb      	adds	r3, r7, #7
 8002196:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002198:	e03a      	b.n	8002210 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	6839      	ldr	r1, [r7, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	0018      	movs	r0, r3
 80021a2:	f000 f971 	bl	8002488 <I2C_IsErrorOccurred>
 80021a6:	1e03      	subs	r3, r0, #0
 80021a8:	d001      	beq.n	80021ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e040      	b.n	8002230 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	3301      	adds	r3, #1
 80021b2:	d02d      	beq.n	8002210 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b4:	f7fe fff2 	bl	800119c <HAL_GetTick>
 80021b8:	0002      	movs	r2, r0
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d302      	bcc.n	80021ca <I2C_WaitOnFlagUntilTimeout+0x42>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d122      	bne.n	8002210 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	4013      	ands	r3, r2
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	425a      	negs	r2, r3
 80021da:	4153      	adcs	r3, r2
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	001a      	movs	r2, r3
 80021e0:	1dfb      	adds	r3, r7, #7
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d113      	bne.n	8002210 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ec:	2220      	movs	r2, #32
 80021ee:	431a      	orrs	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2241      	movs	r2, #65	@ 0x41
 80021f8:	2120      	movs	r1, #32
 80021fa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2242      	movs	r2, #66	@ 0x42
 8002200:	2100      	movs	r1, #0
 8002202:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2240      	movs	r2, #64	@ 0x40
 8002208:	2100      	movs	r1, #0
 800220a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e00f      	b.n	8002230 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	4013      	ands	r3, r2
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	425a      	negs	r2, r3
 8002220:	4153      	adcs	r3, r2
 8002222:	b2db      	uxtb	r3, r3
 8002224:	001a      	movs	r2, r3
 8002226:	1dfb      	adds	r3, r7, #7
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d0b5      	beq.n	800219a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	0018      	movs	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	b004      	add	sp, #16
 8002236:	bd80      	pop	{r7, pc}

08002238 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002244:	e032      	b.n	80022ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	0018      	movs	r0, r3
 800224e:	f000 f91b 	bl	8002488 <I2C_IsErrorOccurred>
 8002252:	1e03      	subs	r3, r0, #0
 8002254:	d001      	beq.n	800225a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e030      	b.n	80022bc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	3301      	adds	r3, #1
 800225e:	d025      	beq.n	80022ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002260:	f7fe ff9c 	bl	800119c <HAL_GetTick>
 8002264:	0002      	movs	r2, r0
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	429a      	cmp	r2, r3
 800226e:	d302      	bcc.n	8002276 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d11a      	bne.n	80022ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	2202      	movs	r2, #2
 800227e:	4013      	ands	r3, r2
 8002280:	2b02      	cmp	r3, #2
 8002282:	d013      	beq.n	80022ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002288:	2220      	movs	r2, #32
 800228a:	431a      	orrs	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2241      	movs	r2, #65	@ 0x41
 8002294:	2120      	movs	r1, #32
 8002296:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2242      	movs	r2, #66	@ 0x42
 800229c:	2100      	movs	r1, #0
 800229e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2240      	movs	r2, #64	@ 0x40
 80022a4:	2100      	movs	r1, #0
 80022a6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e007      	b.n	80022bc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	2202      	movs	r2, #2
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d1c5      	bne.n	8002246 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	0018      	movs	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	b004      	add	sp, #16
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022d0:	e02f      	b.n	8002332 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	0018      	movs	r0, r3
 80022da:	f000 f8d5 	bl	8002488 <I2C_IsErrorOccurred>
 80022de:	1e03      	subs	r3, r0, #0
 80022e0:	d001      	beq.n	80022e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e02d      	b.n	8002342 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e6:	f7fe ff59 	bl	800119c <HAL_GetTick>
 80022ea:	0002      	movs	r2, r0
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d302      	bcc.n	80022fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d11a      	bne.n	8002332 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	2220      	movs	r2, #32
 8002304:	4013      	ands	r3, r2
 8002306:	2b20      	cmp	r3, #32
 8002308:	d013      	beq.n	8002332 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230e:	2220      	movs	r2, #32
 8002310:	431a      	orrs	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2241      	movs	r2, #65	@ 0x41
 800231a:	2120      	movs	r1, #32
 800231c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2242      	movs	r2, #66	@ 0x42
 8002322:	2100      	movs	r1, #0
 8002324:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2240      	movs	r2, #64	@ 0x40
 800232a:	2100      	movs	r1, #0
 800232c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e007      	b.n	8002342 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	2220      	movs	r2, #32
 800233a:	4013      	ands	r3, r2
 800233c:	2b20      	cmp	r3, #32
 800233e:	d1c8      	bne.n	80022d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	0018      	movs	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	b004      	add	sp, #16
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002358:	2317      	movs	r3, #23
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002360:	e07b      	b.n	800245a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	0018      	movs	r0, r3
 800236a:	f000 f88d 	bl	8002488 <I2C_IsErrorOccurred>
 800236e:	1e03      	subs	r3, r0, #0
 8002370:	d003      	beq.n	800237a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8002372:	2317      	movs	r3, #23
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	2220      	movs	r2, #32
 8002382:	4013      	ands	r3, r2
 8002384:	2b20      	cmp	r3, #32
 8002386:	d140      	bne.n	800240a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8002388:	2117      	movs	r1, #23
 800238a:	187b      	adds	r3, r7, r1
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d13b      	bne.n	800240a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	2204      	movs	r2, #4
 800239a:	4013      	ands	r3, r2
 800239c:	2b04      	cmp	r3, #4
 800239e:	d106      	bne.n	80023ae <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80023a8:	187b      	adds	r3, r7, r1
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	2210      	movs	r2, #16
 80023b6:	4013      	ands	r3, r2
 80023b8:	2b10      	cmp	r3, #16
 80023ba:	d123      	bne.n	8002404 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2210      	movs	r2, #16
 80023c2:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2204      	movs	r2, #4
 80023c8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2220      	movs	r2, #32
 80023d0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4929      	ldr	r1, [pc, #164]	@ (8002484 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80023de:	400a      	ands	r2, r1
 80023e0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2241      	movs	r2, #65	@ 0x41
 80023e6:	2120      	movs	r1, #32
 80023e8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2242      	movs	r2, #66	@ 0x42
 80023ee:	2100      	movs	r1, #0
 80023f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2240      	movs	r2, #64	@ 0x40
 80023f6:	2100      	movs	r1, #0
 80023f8:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80023fa:	2317      	movs	r3, #23
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	2201      	movs	r2, #1
 8002400:	701a      	strb	r2, [r3, #0]
 8002402:	e002      	b.n	800240a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800240a:	f7fe fec7 	bl	800119c <HAL_GetTick>
 800240e:	0002      	movs	r2, r0
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	429a      	cmp	r2, r3
 8002418:	d302      	bcc.n	8002420 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d11c      	bne.n	800245a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8002420:	2017      	movs	r0, #23
 8002422:	183b      	adds	r3, r7, r0
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d117      	bne.n	800245a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	2204      	movs	r2, #4
 8002432:	4013      	ands	r3, r2
 8002434:	2b04      	cmp	r3, #4
 8002436:	d010      	beq.n	800245a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243c:	2220      	movs	r2, #32
 800243e:	431a      	orrs	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2241      	movs	r2, #65	@ 0x41
 8002448:	2120      	movs	r1, #32
 800244a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2240      	movs	r2, #64	@ 0x40
 8002450:	2100      	movs	r1, #0
 8002452:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002454:	183b      	adds	r3, r7, r0
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	2204      	movs	r2, #4
 8002462:	4013      	ands	r3, r2
 8002464:	2b04      	cmp	r3, #4
 8002466:	d005      	beq.n	8002474 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002468:	2317      	movs	r3, #23
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d100      	bne.n	8002474 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002472:	e776      	b.n	8002362 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8002474:	2317      	movs	r3, #23
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	781b      	ldrb	r3, [r3, #0]
}
 800247a:	0018      	movs	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	b006      	add	sp, #24
 8002480:	bd80      	pop	{r7, pc}
 8002482:	46c0      	nop			@ (mov r8, r8)
 8002484:	fe00e800 	.word	0xfe00e800

08002488 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	@ 0x28
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002494:	2327      	movs	r3, #39	@ 0x27
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	2210      	movs	r2, #16
 80024b0:	4013      	ands	r3, r2
 80024b2:	d100      	bne.n	80024b6 <I2C_IsErrorOccurred+0x2e>
 80024b4:	e079      	b.n	80025aa <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2210      	movs	r2, #16
 80024bc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024be:	e057      	b.n	8002570 <I2C_IsErrorOccurred+0xe8>
 80024c0:	2227      	movs	r2, #39	@ 0x27
 80024c2:	18bb      	adds	r3, r7, r2
 80024c4:	18ba      	adds	r2, r7, r2
 80024c6:	7812      	ldrb	r2, [r2, #0]
 80024c8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	3301      	adds	r3, #1
 80024ce:	d04f      	beq.n	8002570 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024d0:	f7fe fe64 	bl	800119c <HAL_GetTick>
 80024d4:	0002      	movs	r2, r0
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d302      	bcc.n	80024e6 <I2C_IsErrorOccurred+0x5e>
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d144      	bne.n	8002570 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	2380      	movs	r3, #128	@ 0x80
 80024ee:	01db      	lsls	r3, r3, #7
 80024f0:	4013      	ands	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80024f4:	2013      	movs	r0, #19
 80024f6:	183b      	adds	r3, r7, r0
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	2142      	movs	r1, #66	@ 0x42
 80024fc:	5c52      	ldrb	r2, [r2, r1]
 80024fe:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699a      	ldr	r2, [r3, #24]
 8002506:	2380      	movs	r3, #128	@ 0x80
 8002508:	021b      	lsls	r3, r3, #8
 800250a:	401a      	ands	r2, r3
 800250c:	2380      	movs	r3, #128	@ 0x80
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	429a      	cmp	r2, r3
 8002512:	d126      	bne.n	8002562 <I2C_IsErrorOccurred+0xda>
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	2380      	movs	r3, #128	@ 0x80
 8002518:	01db      	lsls	r3, r3, #7
 800251a:	429a      	cmp	r2, r3
 800251c:	d021      	beq.n	8002562 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800251e:	183b      	adds	r3, r7, r0
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b20      	cmp	r3, #32
 8002524:	d01d      	beq.n	8002562 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2180      	movs	r1, #128	@ 0x80
 8002532:	01c9      	lsls	r1, r1, #7
 8002534:	430a      	orrs	r2, r1
 8002536:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002538:	f7fe fe30 	bl	800119c <HAL_GetTick>
 800253c:	0003      	movs	r3, r0
 800253e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002540:	e00f      	b.n	8002562 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002542:	f7fe fe2b 	bl	800119c <HAL_GetTick>
 8002546:	0002      	movs	r2, r0
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b19      	cmp	r3, #25
 800254e:	d908      	bls.n	8002562 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	2220      	movs	r2, #32
 8002554:	4313      	orrs	r3, r2
 8002556:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002558:	2327      	movs	r3, #39	@ 0x27
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	2201      	movs	r2, #1
 800255e:	701a      	strb	r2, [r3, #0]

              break;
 8002560:	e006      	b.n	8002570 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	2220      	movs	r2, #32
 800256a:	4013      	ands	r3, r2
 800256c:	2b20      	cmp	r3, #32
 800256e:	d1e8      	bne.n	8002542 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	2220      	movs	r2, #32
 8002578:	4013      	ands	r3, r2
 800257a:	2b20      	cmp	r3, #32
 800257c:	d004      	beq.n	8002588 <I2C_IsErrorOccurred+0x100>
 800257e:	2327      	movs	r3, #39	@ 0x27
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d09b      	beq.n	80024c0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002588:	2327      	movs	r3, #39	@ 0x27
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d103      	bne.n	800259a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2220      	movs	r2, #32
 8002598:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	2204      	movs	r2, #4
 800259e:	4313      	orrs	r3, r2
 80025a0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80025a2:	2327      	movs	r3, #39	@ 0x27
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	2201      	movs	r2, #1
 80025a8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	2380      	movs	r3, #128	@ 0x80
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4013      	ands	r3, r2
 80025ba:	d00c      	beq.n	80025d6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	2201      	movs	r2, #1
 80025c0:	4313      	orrs	r3, r2
 80025c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2280      	movs	r2, #128	@ 0x80
 80025ca:	0052      	lsls	r2, r2, #1
 80025cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025ce:	2327      	movs	r3, #39	@ 0x27
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	2380      	movs	r3, #128	@ 0x80
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4013      	ands	r3, r2
 80025de:	d00c      	beq.n	80025fa <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	2208      	movs	r2, #8
 80025e4:	4313      	orrs	r3, r2
 80025e6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2280      	movs	r2, #128	@ 0x80
 80025ee:	00d2      	lsls	r2, r2, #3
 80025f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025f2:	2327      	movs	r3, #39	@ 0x27
 80025f4:	18fb      	adds	r3, r7, r3
 80025f6:	2201      	movs	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	2380      	movs	r3, #128	@ 0x80
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4013      	ands	r3, r2
 8002602:	d00c      	beq.n	800261e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	2202      	movs	r2, #2
 8002608:	4313      	orrs	r3, r2
 800260a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2280      	movs	r2, #128	@ 0x80
 8002612:	0092      	lsls	r2, r2, #2
 8002614:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002616:	2327      	movs	r3, #39	@ 0x27
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	2201      	movs	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800261e:	2327      	movs	r3, #39	@ 0x27
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d01d      	beq.n	8002664 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	0018      	movs	r0, r3
 800262c:	f7ff fd8a 	bl	8002144 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	490e      	ldr	r1, [pc, #56]	@ (8002674 <I2C_IsErrorOccurred+0x1ec>)
 800263c:	400a      	ands	r2, r1
 800263e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	431a      	orrs	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2241      	movs	r2, #65	@ 0x41
 8002650:	2120      	movs	r1, #32
 8002652:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2242      	movs	r2, #66	@ 0x42
 8002658:	2100      	movs	r1, #0
 800265a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2240      	movs	r2, #64	@ 0x40
 8002660:	2100      	movs	r1, #0
 8002662:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002664:	2327      	movs	r3, #39	@ 0x27
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	781b      	ldrb	r3, [r3, #0]
}
 800266a:	0018      	movs	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	b00a      	add	sp, #40	@ 0x28
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			@ (mov r8, r8)
 8002674:	fe00e800 	.word	0xfe00e800

08002678 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	0008      	movs	r0, r1
 8002682:	0011      	movs	r1, r2
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	240a      	movs	r4, #10
 8002688:	193b      	adds	r3, r7, r4
 800268a:	1c02      	adds	r2, r0, #0
 800268c:	801a      	strh	r2, [r3, #0]
 800268e:	2009      	movs	r0, #9
 8002690:	183b      	adds	r3, r7, r0
 8002692:	1c0a      	adds	r2, r1, #0
 8002694:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002696:	193b      	adds	r3, r7, r4
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	059b      	lsls	r3, r3, #22
 800269c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800269e:	183b      	adds	r3, r7, r0
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	0419      	lsls	r1, r3, #16
 80026a4:	23ff      	movs	r3, #255	@ 0xff
 80026a6:	041b      	lsls	r3, r3, #16
 80026a8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026aa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b2:	4313      	orrs	r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	085b      	lsrs	r3, r3, #1
 80026b8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026c2:	0d51      	lsrs	r1, r2, #21
 80026c4:	2280      	movs	r2, #128	@ 0x80
 80026c6:	00d2      	lsls	r2, r2, #3
 80026c8:	400a      	ands	r2, r1
 80026ca:	4907      	ldr	r1, [pc, #28]	@ (80026e8 <I2C_TransferConfig+0x70>)
 80026cc:	430a      	orrs	r2, r1
 80026ce:	43d2      	mvns	r2, r2
 80026d0:	401a      	ands	r2, r3
 80026d2:	0011      	movs	r1, r2
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	430a      	orrs	r2, r1
 80026dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80026de:	46c0      	nop			@ (mov r8, r8)
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b007      	add	sp, #28
 80026e4:	bd90      	pop	{r4, r7, pc}
 80026e6:	46c0      	nop			@ (mov r8, r8)
 80026e8:	03ff63ff 	.word	0x03ff63ff

080026ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2241      	movs	r2, #65	@ 0x41
 80026fa:	5c9b      	ldrb	r3, [r3, r2]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b20      	cmp	r3, #32
 8002700:	d138      	bne.n	8002774 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2240      	movs	r2, #64	@ 0x40
 8002706:	5c9b      	ldrb	r3, [r3, r2]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800270c:	2302      	movs	r3, #2
 800270e:	e032      	b.n	8002776 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2240      	movs	r2, #64	@ 0x40
 8002714:	2101      	movs	r1, #1
 8002716:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2241      	movs	r2, #65	@ 0x41
 800271c:	2124      	movs	r1, #36	@ 0x24
 800271e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2101      	movs	r1, #1
 800272c:	438a      	bics	r2, r1
 800272e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4911      	ldr	r1, [pc, #68]	@ (8002780 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800273c:	400a      	ands	r2, r1
 800273e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6819      	ldr	r1, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2101      	movs	r1, #1
 800275c:	430a      	orrs	r2, r1
 800275e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2241      	movs	r2, #65	@ 0x41
 8002764:	2120      	movs	r1, #32
 8002766:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2240      	movs	r2, #64	@ 0x40
 800276c:	2100      	movs	r1, #0
 800276e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	e000      	b.n	8002776 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002774:	2302      	movs	r3, #2
  }
}
 8002776:	0018      	movs	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	b002      	add	sp, #8
 800277c:	bd80      	pop	{r7, pc}
 800277e:	46c0      	nop			@ (mov r8, r8)
 8002780:	ffffefff 	.word	0xffffefff

08002784 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2241      	movs	r2, #65	@ 0x41
 8002792:	5c9b      	ldrb	r3, [r3, r2]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b20      	cmp	r3, #32
 8002798:	d139      	bne.n	800280e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2240      	movs	r2, #64	@ 0x40
 800279e:	5c9b      	ldrb	r3, [r3, r2]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e033      	b.n	8002810 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2240      	movs	r2, #64	@ 0x40
 80027ac:	2101      	movs	r1, #1
 80027ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2241      	movs	r2, #65	@ 0x41
 80027b4:	2124      	movs	r1, #36	@ 0x24
 80027b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2101      	movs	r1, #1
 80027c4:	438a      	bics	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a11      	ldr	r2, [pc, #68]	@ (8002818 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2101      	movs	r1, #1
 80027f6:	430a      	orrs	r2, r1
 80027f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2241      	movs	r2, #65	@ 0x41
 80027fe:	2120      	movs	r1, #32
 8002800:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2240      	movs	r2, #64	@ 0x40
 8002806:	2100      	movs	r1, #0
 8002808:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	e000      	b.n	8002810 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800280e:	2302      	movs	r3, #2
  }
}
 8002810:	0018      	movs	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	b004      	add	sp, #16
 8002816:	bd80      	pop	{r7, pc}
 8002818:	fffff0ff 	.word	0xfffff0ff

0800281c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e1d0      	b.n	8002bd0 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2201      	movs	r2, #1
 8002834:	4013      	ands	r3, r2
 8002836:	d100      	bne.n	800283a <HAL_RCC_OscConfig+0x1e>
 8002838:	e069      	b.n	800290e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800283a:	4bc8      	ldr	r3, [pc, #800]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2238      	movs	r2, #56	@ 0x38
 8002840:	4013      	ands	r3, r2
 8002842:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	2b08      	cmp	r3, #8
 8002848:	d105      	bne.n	8002856 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d15d      	bne.n	800290e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e1bc      	b.n	8002bd0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	2380      	movs	r3, #128	@ 0x80
 800285c:	025b      	lsls	r3, r3, #9
 800285e:	429a      	cmp	r2, r3
 8002860:	d107      	bne.n	8002872 <HAL_RCC_OscConfig+0x56>
 8002862:	4bbe      	ldr	r3, [pc, #760]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	4bbd      	ldr	r3, [pc, #756]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002868:	2180      	movs	r1, #128	@ 0x80
 800286a:	0249      	lsls	r1, r1, #9
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	e020      	b.n	80028b4 <HAL_RCC_OscConfig+0x98>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	23a0      	movs	r3, #160	@ 0xa0
 8002878:	02db      	lsls	r3, r3, #11
 800287a:	429a      	cmp	r2, r3
 800287c:	d10e      	bne.n	800289c <HAL_RCC_OscConfig+0x80>
 800287e:	4bb7      	ldr	r3, [pc, #732]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	4bb6      	ldr	r3, [pc, #728]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002884:	2180      	movs	r1, #128	@ 0x80
 8002886:	02c9      	lsls	r1, r1, #11
 8002888:	430a      	orrs	r2, r1
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	4bb3      	ldr	r3, [pc, #716]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4bb2      	ldr	r3, [pc, #712]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002892:	2180      	movs	r1, #128	@ 0x80
 8002894:	0249      	lsls	r1, r1, #9
 8002896:	430a      	orrs	r2, r1
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	e00b      	b.n	80028b4 <HAL_RCC_OscConfig+0x98>
 800289c:	4baf      	ldr	r3, [pc, #700]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4bae      	ldr	r3, [pc, #696]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 80028a2:	49af      	ldr	r1, [pc, #700]	@ (8002b60 <HAL_RCC_OscConfig+0x344>)
 80028a4:	400a      	ands	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	4bac      	ldr	r3, [pc, #688]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4bab      	ldr	r3, [pc, #684]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 80028ae:	49ad      	ldr	r1, [pc, #692]	@ (8002b64 <HAL_RCC_OscConfig+0x348>)
 80028b0:	400a      	ands	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d014      	beq.n	80028e6 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7fe fc6e 	bl	800119c <HAL_GetTick>
 80028c0:	0003      	movs	r3, r0
 80028c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80028c6:	f7fe fc69 	bl	800119c <HAL_GetTick>
 80028ca:	0002      	movs	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b64      	cmp	r3, #100	@ 0x64
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e17b      	b.n	8002bd0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028d8:	4ba0      	ldr	r3, [pc, #640]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	2380      	movs	r3, #128	@ 0x80
 80028de:	029b      	lsls	r3, r3, #10
 80028e0:	4013      	ands	r3, r2
 80028e2:	d0f0      	beq.n	80028c6 <HAL_RCC_OscConfig+0xaa>
 80028e4:	e013      	b.n	800290e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e6:	f7fe fc59 	bl	800119c <HAL_GetTick>
 80028ea:	0003      	movs	r3, r0
 80028ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80028f0:	f7fe fc54 	bl	800119c <HAL_GetTick>
 80028f4:	0002      	movs	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	@ 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e166      	b.n	8002bd0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002902:	4b96      	ldr	r3, [pc, #600]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	2380      	movs	r3, #128	@ 0x80
 8002908:	029b      	lsls	r3, r3, #10
 800290a:	4013      	ands	r3, r2
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2202      	movs	r2, #2
 8002914:	4013      	ands	r3, r2
 8002916:	d100      	bne.n	800291a <HAL_RCC_OscConfig+0xfe>
 8002918:	e086      	b.n	8002a28 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800291a:	4b90      	ldr	r3, [pc, #576]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2238      	movs	r2, #56	@ 0x38
 8002920:	4013      	ands	r3, r2
 8002922:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d12f      	bne.n	800298a <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e14c      	b.n	8002bd0 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002936:	4b89      	ldr	r3, [pc, #548]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4a8b      	ldr	r2, [pc, #556]	@ (8002b68 <HAL_RCC_OscConfig+0x34c>)
 800293c:	4013      	ands	r3, r2
 800293e:	0019      	movs	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	021a      	lsls	r2, r3, #8
 8002946:	4b85      	ldr	r3, [pc, #532]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002948:	430a      	orrs	r2, r1
 800294a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d112      	bne.n	8002978 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002952:	4b82      	ldr	r3, [pc, #520]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a85      	ldr	r2, [pc, #532]	@ (8002b6c <HAL_RCC_OscConfig+0x350>)
 8002958:	4013      	ands	r3, r2
 800295a:	0019      	movs	r1, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	4b7e      	ldr	r3, [pc, #504]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002962:	430a      	orrs	r2, r1
 8002964:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002966:	4b7d      	ldr	r3, [pc, #500]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	0adb      	lsrs	r3, r3, #11
 800296c:	2207      	movs	r2, #7
 800296e:	4013      	ands	r3, r2
 8002970:	4a7f      	ldr	r2, [pc, #508]	@ (8002b70 <HAL_RCC_OscConfig+0x354>)
 8002972:	40da      	lsrs	r2, r3
 8002974:	4b7f      	ldr	r3, [pc, #508]	@ (8002b74 <HAL_RCC_OscConfig+0x358>)
 8002976:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002978:	4b7f      	ldr	r3, [pc, #508]	@ (8002b78 <HAL_RCC_OscConfig+0x35c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0018      	movs	r0, r3
 800297e:	f7fe fbb1 	bl	80010e4 <HAL_InitTick>
 8002982:	1e03      	subs	r3, r0, #0
 8002984:	d050      	beq.n	8002a28 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e122      	b.n	8002bd0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d030      	beq.n	80029f4 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002992:	4b72      	ldr	r3, [pc, #456]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a75      	ldr	r2, [pc, #468]	@ (8002b6c <HAL_RCC_OscConfig+0x350>)
 8002998:	4013      	ands	r3, r2
 800299a:	0019      	movs	r1, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	4b6e      	ldr	r3, [pc, #440]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 80029a2:	430a      	orrs	r2, r1
 80029a4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80029a6:	4b6d      	ldr	r3, [pc, #436]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4b6c      	ldr	r3, [pc, #432]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 80029ac:	2180      	movs	r1, #128	@ 0x80
 80029ae:	0049      	lsls	r1, r1, #1
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe fbf2 	bl	800119c <HAL_GetTick>
 80029b8:	0003      	movs	r3, r0
 80029ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80029be:	f7fe fbed 	bl	800119c <HAL_GetTick>
 80029c2:	0002      	movs	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e0ff      	b.n	8002bd0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029d0:	4b62      	ldr	r3, [pc, #392]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2380      	movs	r3, #128	@ 0x80
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4013      	ands	r3, r2
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029dc:	4b5f      	ldr	r3, [pc, #380]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4a61      	ldr	r2, [pc, #388]	@ (8002b68 <HAL_RCC_OscConfig+0x34c>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	0019      	movs	r1, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	021a      	lsls	r2, r3, #8
 80029ec:	4b5b      	ldr	r3, [pc, #364]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 80029ee:	430a      	orrs	r2, r1
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	e019      	b.n	8002a28 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80029f4:	4b59      	ldr	r3, [pc, #356]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4b58      	ldr	r3, [pc, #352]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 80029fa:	4960      	ldr	r1, [pc, #384]	@ (8002b7c <HAL_RCC_OscConfig+0x360>)
 80029fc:	400a      	ands	r2, r1
 80029fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7fe fbcc 	bl	800119c <HAL_GetTick>
 8002a04:	0003      	movs	r3, r0
 8002a06:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002a0a:	f7fe fbc7 	bl	800119c <HAL_GetTick>
 8002a0e:	0002      	movs	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e0d9      	b.n	8002bd0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a1c:	4b4f      	ldr	r3, [pc, #316]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	2380      	movs	r3, #128	@ 0x80
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4013      	ands	r3, r2
 8002a26:	d1f0      	bne.n	8002a0a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d042      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002a32:	4b4a      	ldr	r3, [pc, #296]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2238      	movs	r2, #56	@ 0x38
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b18      	cmp	r3, #24
 8002a3c:	d105      	bne.n	8002a4a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d138      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e0c2      	b.n	8002bd0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d019      	beq.n	8002a86 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002a52:	4b42      	ldr	r3, [pc, #264]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002a54:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a56:	4b41      	ldr	r3, [pc, #260]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002a58:	2101      	movs	r1, #1
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5e:	f7fe fb9d 	bl	800119c <HAL_GetTick>
 8002a62:	0003      	movs	r3, r0
 8002a64:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002a68:	f7fe fb98 	bl	800119c <HAL_GetTick>
 8002a6c:	0002      	movs	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e0aa      	b.n	8002bd0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002a7a:	4b38      	ldr	r3, [pc, #224]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a7e:	2202      	movs	r2, #2
 8002a80:	4013      	ands	r3, r2
 8002a82:	d0f1      	beq.n	8002a68 <HAL_RCC_OscConfig+0x24c>
 8002a84:	e018      	b.n	8002ab8 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002a86:	4b35      	ldr	r3, [pc, #212]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002a88:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a8a:	4b34      	ldr	r3, [pc, #208]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	438a      	bics	r2, r1
 8002a90:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a92:	f7fe fb83 	bl	800119c <HAL_GetTick>
 8002a96:	0003      	movs	r3, r0
 8002a98:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002a9c:	f7fe fb7e 	bl	800119c <HAL_GetTick>
 8002aa0:	0002      	movs	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e090      	b.n	8002bd0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002aae:	4b2b      	ldr	r3, [pc, #172]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d1f1      	bne.n	8002a9c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2204      	movs	r2, #4
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d100      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x2a8>
 8002ac2:	e084      	b.n	8002bce <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac4:	230f      	movs	r3, #15
 8002ac6:	18fb      	adds	r3, r7, r3
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002acc:	4b23      	ldr	r3, [pc, #140]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2238      	movs	r2, #56	@ 0x38
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d106      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d000      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x2c6>
 8002ae0:	e075      	b.n	8002bce <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e074      	b.n	8002bd0 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d106      	bne.n	8002afc <HAL_RCC_OscConfig+0x2e0>
 8002aee:	4b1b      	ldr	r3, [pc, #108]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002af0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002af2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002af4:	2101      	movs	r1, #1
 8002af6:	430a      	orrs	r2, r1
 8002af8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002afa:	e01c      	b.n	8002b36 <HAL_RCC_OscConfig+0x31a>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b05      	cmp	r3, #5
 8002b02:	d10c      	bne.n	8002b1e <HAL_RCC_OscConfig+0x302>
 8002b04:	4b15      	ldr	r3, [pc, #84]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002b06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b08:	4b14      	ldr	r3, [pc, #80]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002b0a:	2104      	movs	r1, #4
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b10:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002b12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b14:	4b11      	ldr	r3, [pc, #68]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002b16:	2101      	movs	r1, #1
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b1c:	e00b      	b.n	8002b36 <HAL_RCC_OscConfig+0x31a>
 8002b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002b20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b22:	4b0e      	ldr	r3, [pc, #56]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002b24:	2101      	movs	r1, #1
 8002b26:	438a      	bics	r2, r1
 8002b28:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002b2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <HAL_RCC_OscConfig+0x340>)
 8002b30:	2104      	movs	r1, #4
 8002b32:	438a      	bics	r2, r1
 8002b34:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d028      	beq.n	8002b90 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3e:	f7fe fb2d 	bl	800119c <HAL_GetTick>
 8002b42:	0003      	movs	r3, r0
 8002b44:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002b46:	e01d      	b.n	8002b84 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b48:	f7fe fb28 	bl	800119c <HAL_GetTick>
 8002b4c:	0002      	movs	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	4a0b      	ldr	r2, [pc, #44]	@ (8002b80 <HAL_RCC_OscConfig+0x364>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d915      	bls.n	8002b84 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e039      	b.n	8002bd0 <HAL_RCC_OscConfig+0x3b4>
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	fffeffff 	.word	0xfffeffff
 8002b64:	fffbffff 	.word	0xfffbffff
 8002b68:	ffff80ff 	.word	0xffff80ff
 8002b6c:	ffffc7ff 	.word	0xffffc7ff
 8002b70:	02dc6c00 	.word	0x02dc6c00
 8002b74:	20000084 	.word	0x20000084
 8002b78:	20000088 	.word	0x20000088
 8002b7c:	fffffeff 	.word	0xfffffeff
 8002b80:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002b84:	4b14      	ldr	r3, [pc, #80]	@ (8002bd8 <HAL_RCC_OscConfig+0x3bc>)
 8002b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b88:	2202      	movs	r2, #2
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d0dc      	beq.n	8002b48 <HAL_RCC_OscConfig+0x32c>
 8002b8e:	e013      	b.n	8002bb8 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7fe fb04 	bl	800119c <HAL_GetTick>
 8002b94:	0003      	movs	r3, r0
 8002b96:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002b98:	e009      	b.n	8002bae <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9a:	f7fe faff 	bl	800119c <HAL_GetTick>
 8002b9e:	0002      	movs	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8002bdc <HAL_RCC_OscConfig+0x3c0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e010      	b.n	8002bd0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002bae:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd8 <HAL_RCC_OscConfig+0x3bc>)
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d1f0      	bne.n	8002b9a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002bb8:	230f      	movs	r3, #15
 8002bba:	18fb      	adds	r3, r7, r3
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d105      	bne.n	8002bce <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002bc2:	4b05      	ldr	r3, [pc, #20]	@ (8002bd8 <HAL_RCC_OscConfig+0x3bc>)
 8002bc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bc6:	4b04      	ldr	r3, [pc, #16]	@ (8002bd8 <HAL_RCC_OscConfig+0x3bc>)
 8002bc8:	4905      	ldr	r1, [pc, #20]	@ (8002be0 <HAL_RCC_OscConfig+0x3c4>)
 8002bca:	400a      	ands	r2, r1
 8002bcc:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b006      	add	sp, #24
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	00001388 	.word	0x00001388
 8002be0:	efffffff 	.word	0xefffffff

08002be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0e9      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b76      	ldr	r3, [pc, #472]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2207      	movs	r2, #7
 8002bfe:	4013      	ands	r3, r2
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d91e      	bls.n	8002c44 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b73      	ldr	r3, [pc, #460]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2207      	movs	r2, #7
 8002c0c:	4393      	bics	r3, r2
 8002c0e:	0019      	movs	r1, r3
 8002c10:	4b70      	ldr	r3, [pc, #448]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c18:	f7fe fac0 	bl	800119c <HAL_GetTick>
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c20:	e009      	b.n	8002c36 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c22:	f7fe fabb 	bl	800119c <HAL_GetTick>
 8002c26:	0002      	movs	r2, r0
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	4a6a      	ldr	r2, [pc, #424]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e0ca      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c36:	4b67      	ldr	r3, [pc, #412]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2207      	movs	r2, #7
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d1ee      	bne.n	8002c22 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d017      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2204      	movs	r2, #4
 8002c54:	4013      	ands	r3, r2
 8002c56:	d008      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c58:	4b60      	ldr	r3, [pc, #384]	@ (8002ddc <HAL_RCC_ClockConfig+0x1f8>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	4a60      	ldr	r2, [pc, #384]	@ (8002de0 <HAL_RCC_ClockConfig+0x1fc>)
 8002c5e:	401a      	ands	r2, r3
 8002c60:	4b5e      	ldr	r3, [pc, #376]	@ (8002ddc <HAL_RCC_ClockConfig+0x1f8>)
 8002c62:	21b0      	movs	r1, #176	@ 0xb0
 8002c64:	0109      	lsls	r1, r1, #4
 8002c66:	430a      	orrs	r2, r1
 8002c68:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c6a:	4b5c      	ldr	r3, [pc, #368]	@ (8002ddc <HAL_RCC_ClockConfig+0x1f8>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	4a5d      	ldr	r2, [pc, #372]	@ (8002de4 <HAL_RCC_ClockConfig+0x200>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	0019      	movs	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	4b58      	ldr	r3, [pc, #352]	@ (8002ddc <HAL_RCC_ClockConfig+0x1f8>)
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2201      	movs	r2, #1
 8002c84:	4013      	ands	r3, r2
 8002c86:	d055      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002c88:	4b54      	ldr	r3, [pc, #336]	@ (8002ddc <HAL_RCC_ClockConfig+0x1f8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	221c      	movs	r2, #28
 8002c8e:	4393      	bics	r3, r2
 8002c90:	0019      	movs	r1, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	4b51      	ldr	r3, [pc, #324]	@ (8002ddc <HAL_RCC_ClockConfig+0x1f8>)
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d107      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ca4:	4b4d      	ldr	r3, [pc, #308]	@ (8002ddc <HAL_RCC_ClockConfig+0x1f8>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	2380      	movs	r3, #128	@ 0x80
 8002caa:	029b      	lsls	r3, r3, #10
 8002cac:	4013      	ands	r3, r2
 8002cae:	d11f      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e08b      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d107      	bne.n	8002ccc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cbc:	4b47      	ldr	r3, [pc, #284]	@ (8002ddc <HAL_RCC_ClockConfig+0x1f8>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	2380      	movs	r3, #128	@ 0x80
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d113      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e07f      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d106      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002cd4:	4b41      	ldr	r3, [pc, #260]	@ (8002ddc <HAL_RCC_ClockConfig+0x1f8>)
 8002cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd8:	2202      	movs	r2, #2
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d108      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e074      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002ce2:	4b3e      	ldr	r3, [pc, #248]	@ (8002ddc <HAL_RCC_ClockConfig+0x1f8>)
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e06d      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cf0:	4b3a      	ldr	r3, [pc, #232]	@ (8002ddc <HAL_RCC_ClockConfig+0x1f8>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2207      	movs	r2, #7
 8002cf6:	4393      	bics	r3, r2
 8002cf8:	0019      	movs	r1, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	4b37      	ldr	r3, [pc, #220]	@ (8002ddc <HAL_RCC_ClockConfig+0x1f8>)
 8002d00:	430a      	orrs	r2, r1
 8002d02:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d04:	f7fe fa4a 	bl	800119c <HAL_GetTick>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0c:	e009      	b.n	8002d22 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0e:	f7fe fa45 	bl	800119c <HAL_GetTick>
 8002d12:	0002      	movs	r2, r0
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	4a2f      	ldr	r2, [pc, #188]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f4>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e054      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	4b2e      	ldr	r3, [pc, #184]	@ (8002ddc <HAL_RCC_ClockConfig+0x1f8>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2238      	movs	r2, #56	@ 0x38
 8002d28:	401a      	ands	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d1ec      	bne.n	8002d0e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d34:	4b27      	ldr	r3, [pc, #156]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2207      	movs	r2, #7
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d21e      	bcs.n	8002d80 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d42:	4b24      	ldr	r3, [pc, #144]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2207      	movs	r2, #7
 8002d48:	4393      	bics	r3, r2
 8002d4a:	0019      	movs	r1, r3
 8002d4c:	4b21      	ldr	r3, [pc, #132]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d54:	f7fe fa22 	bl	800119c <HAL_GetTick>
 8002d58:	0003      	movs	r3, r0
 8002d5a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d5c:	e009      	b.n	8002d72 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5e:	f7fe fa1d 	bl	800119c <HAL_GetTick>
 8002d62:	0002      	movs	r2, r0
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	4a1b      	ldr	r2, [pc, #108]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e02c      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d72:	4b18      	ldr	r3, [pc, #96]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2207      	movs	r2, #7
 8002d78:	4013      	ands	r3, r2
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d1ee      	bne.n	8002d5e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2204      	movs	r2, #4
 8002d86:	4013      	ands	r3, r2
 8002d88:	d009      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d8a:	4b14      	ldr	r3, [pc, #80]	@ (8002ddc <HAL_RCC_ClockConfig+0x1f8>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	4a16      	ldr	r2, [pc, #88]	@ (8002de8 <HAL_RCC_ClockConfig+0x204>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	0019      	movs	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	4b10      	ldr	r3, [pc, #64]	@ (8002ddc <HAL_RCC_ClockConfig+0x1f8>)
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002d9e:	f000 f82b 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8002da2:	0001      	movs	r1, r0
 8002da4:	4b0d      	ldr	r3, [pc, #52]	@ (8002ddc <HAL_RCC_ClockConfig+0x1f8>)
 8002da6:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002da8:	0a1b      	lsrs	r3, r3, #8
 8002daa:	220f      	movs	r2, #15
 8002dac:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002dae:	4b0f      	ldr	r3, [pc, #60]	@ (8002dec <HAL_RCC_ClockConfig+0x208>)
 8002db0:	0092      	lsls	r2, r2, #2
 8002db2:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002db4:	221f      	movs	r2, #31
 8002db6:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002db8:	000a      	movs	r2, r1
 8002dba:	40da      	lsrs	r2, r3
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002df0 <HAL_RCC_ClockConfig+0x20c>)
 8002dbe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002df4 <HAL_RCC_ClockConfig+0x210>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f7fe f98d 	bl	80010e4 <HAL_InitTick>
 8002dca:	0003      	movs	r3, r0
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b004      	add	sp, #16
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40022000 	.word	0x40022000
 8002dd8:	00001388 	.word	0x00001388
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	ffff84ff 	.word	0xffff84ff
 8002de4:	fffff0ff 	.word	0xfffff0ff
 8002de8:	ffff8fff 	.word	0xffff8fff
 8002dec:	080047c4 	.word	0x080047c4
 8002df0:	20000084 	.word	0x20000084
 8002df4:	20000088 	.word	0x20000088

08002df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8002dfe:	4b23      	ldr	r3, [pc, #140]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	089b      	lsrs	r3, r3, #2
 8002e04:	2207      	movs	r2, #7
 8002e06:	4013      	ands	r3, r2
 8002e08:	3301      	adds	r3, #1
 8002e0a:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2238      	movs	r2, #56	@ 0x38
 8002e12:	4013      	ands	r3, r2
 8002e14:	d10f      	bne.n	8002e36 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002e16:	4b1d      	ldr	r3, [pc, #116]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	0adb      	lsrs	r3, r3, #11
 8002e1c:	2207      	movs	r2, #7
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2201      	movs	r2, #1
 8002e22:	409a      	lsls	r2, r3
 8002e24:	0013      	movs	r3, r2
 8002e26:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4819      	ldr	r0, [pc, #100]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e2c:	f7fd f96c 	bl	8000108 <__udivsi3>
 8002e30:	0003      	movs	r3, r0
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	e01e      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e36:	4b15      	ldr	r3, [pc, #84]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2238      	movs	r2, #56	@ 0x38
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d102      	bne.n	8002e48 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e42:	4b14      	ldr	r3, [pc, #80]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	e015      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002e48:	4b10      	ldr	r3, [pc, #64]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2238      	movs	r2, #56	@ 0x38
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	d103      	bne.n	8002e5c <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002e54:	2380      	movs	r3, #128	@ 0x80
 8002e56:	021b      	lsls	r3, r3, #8
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	e00b      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2238      	movs	r2, #56	@ 0x38
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b18      	cmp	r3, #24
 8002e66:	d103      	bne.n	8002e70 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002e68:	23fa      	movs	r3, #250	@ 0xfa
 8002e6a:	01db      	lsls	r3, r3, #7
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	e001      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f7fd f946 	bl	8000108 <__udivsi3>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8002e80:	68fb      	ldr	r3, [r7, #12]
}
 8002e82:	0018      	movs	r0, r3
 8002e84:	46bd      	mov	sp, r7
 8002e86:	b004      	add	sp, #16
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	46c0      	nop			@ (mov r8, r8)
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	02dc6c00 	.word	0x02dc6c00
 8002e94:	00f42400 	.word	0x00f42400

08002e98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002e9c:	f7ff ffac 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8002ea0:	0001      	movs	r1, r0
 8002ea2:	4b09      	ldr	r3, [pc, #36]	@ (8002ec8 <HAL_RCC_GetHCLKFreq+0x30>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002ea6:	0a1b      	lsrs	r3, r3, #8
 8002ea8:	220f      	movs	r2, #15
 8002eaa:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002eac:	4b07      	ldr	r3, [pc, #28]	@ (8002ecc <HAL_RCC_GetHCLKFreq+0x34>)
 8002eae:	0092      	lsls	r2, r2, #2
 8002eb0:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002eb2:	221f      	movs	r2, #31
 8002eb4:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002eb6:	000a      	movs	r2, r1
 8002eb8:	40da      	lsrs	r2, r3
 8002eba:	4b05      	ldr	r3, [pc, #20]	@ (8002ed0 <HAL_RCC_GetHCLKFreq+0x38>)
 8002ebc:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8002ebe:	4b04      	ldr	r3, [pc, #16]	@ (8002ed0 <HAL_RCC_GetHCLKFreq+0x38>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
}
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	080047c4 	.word	0x080047c4
 8002ed0:	20000084 	.word	0x20000084

08002ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002ed8:	f7ff ffde 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002edc:	0001      	movs	r1, r0
 8002ede:	4b07      	ldr	r3, [pc, #28]	@ (8002efc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	0b1b      	lsrs	r3, r3, #12
 8002ee4:	2207      	movs	r2, #7
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	4b05      	ldr	r3, [pc, #20]	@ (8002f00 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002eea:	0092      	lsls	r2, r2, #2
 8002eec:	58d3      	ldr	r3, [r2, r3]
 8002eee:	221f      	movs	r2, #31
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	40d9      	lsrs	r1, r3
 8002ef4:	000b      	movs	r3, r1
}
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40021000 	.word	0x40021000
 8002f00:	08004804 	.word	0x08004804

08002f04 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002f0c:	2313      	movs	r3, #19
 8002f0e:	18fb      	adds	r3, r7, r3
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f14:	2312      	movs	r3, #18
 8002f16:	18fb      	adds	r3, r7, r3
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2240      	movs	r2, #64	@ 0x40
 8002f22:	4013      	ands	r3, r2
 8002f24:	d100      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8002f26:	e079      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f28:	2011      	movs	r0, #17
 8002f2a:	183b      	adds	r3, r7, r0
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f30:	4b63      	ldr	r3, [pc, #396]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f34:	2380      	movs	r3, #128	@ 0x80
 8002f36:	055b      	lsls	r3, r3, #21
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d110      	bne.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f3c:	4b60      	ldr	r3, [pc, #384]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f40:	4b5f      	ldr	r3, [pc, #380]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f42:	2180      	movs	r1, #128	@ 0x80
 8002f44:	0549      	lsls	r1, r1, #21
 8002f46:	430a      	orrs	r2, r1
 8002f48:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002f4a:	4b5d      	ldr	r3, [pc, #372]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f4e:	2380      	movs	r3, #128	@ 0x80
 8002f50:	055b      	lsls	r3, r3, #21
 8002f52:	4013      	ands	r3, r2
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f58:	183b      	adds	r3, r7, r0
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002f5e:	4b58      	ldr	r3, [pc, #352]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f62:	23c0      	movs	r3, #192	@ 0xc0
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4013      	ands	r3, r2
 8002f68:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d019      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d014      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002f7a:	4b51      	ldr	r3, [pc, #324]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7e:	4a51      	ldr	r2, [pc, #324]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f84:	4b4e      	ldr	r3, [pc, #312]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f86:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f88:	4b4d      	ldr	r3, [pc, #308]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f8a:	2180      	movs	r1, #128	@ 0x80
 8002f8c:	0249      	lsls	r1, r1, #9
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f92:	4b4b      	ldr	r3, [pc, #300]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f96:	4b4a      	ldr	r3, [pc, #296]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f98:	494b      	ldr	r1, [pc, #300]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f9a:	400a      	ands	r2, r1
 8002f9c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002f9e:	4b48      	ldr	r3, [pc, #288]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d016      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fac:	f7fe f8f6 	bl	800119c <HAL_GetTick>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002fb4:	e00c      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb6:	f7fe f8f1 	bl	800119c <HAL_GetTick>
 8002fba:	0002      	movs	r2, r0
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	4a42      	ldr	r2, [pc, #264]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d904      	bls.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8002fc6:	2313      	movs	r3, #19
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	2203      	movs	r2, #3
 8002fcc:	701a      	strb	r2, [r3, #0]
          break;
 8002fce:	e004      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d0ed      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8002fda:	2313      	movs	r3, #19
 8002fdc:	18fb      	adds	r3, r7, r3
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10a      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fe4:	4b36      	ldr	r3, [pc, #216]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe8:	4a36      	ldr	r2, [pc, #216]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	0019      	movs	r1, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	4b33      	ldr	r3, [pc, #204]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ff8:	e005      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ffa:	2312      	movs	r3, #18
 8002ffc:	18fb      	adds	r3, r7, r3
 8002ffe:	2213      	movs	r2, #19
 8003000:	18ba      	adds	r2, r7, r2
 8003002:	7812      	ldrb	r2, [r2, #0]
 8003004:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003006:	2311      	movs	r3, #17
 8003008:	18fb      	adds	r3, r7, r3
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d105      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003010:	4b2b      	ldr	r3, [pc, #172]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003012:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003014:	4b2a      	ldr	r3, [pc, #168]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003016:	492e      	ldr	r1, [pc, #184]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003018:	400a      	ands	r2, r1
 800301a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2201      	movs	r2, #1
 8003022:	4013      	ands	r3, r2
 8003024:	d009      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003026:	4b26      	ldr	r3, [pc, #152]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302a:	2203      	movs	r2, #3
 800302c:	4393      	bics	r3, r2
 800302e:	0019      	movs	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	4b22      	ldr	r3, [pc, #136]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003036:	430a      	orrs	r2, r1
 8003038:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2202      	movs	r2, #2
 8003040:	4013      	ands	r3, r2
 8003042:	d009      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003044:	4b1e      	ldr	r3, [pc, #120]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003048:	4a22      	ldr	r2, [pc, #136]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800304a:	4013      	ands	r3, r2
 800304c:	0019      	movs	r1, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	4b1b      	ldr	r3, [pc, #108]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003054:	430a      	orrs	r2, r1
 8003056:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2220      	movs	r2, #32
 800305e:	4013      	ands	r3, r2
 8003060:	d008      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003062:	4b17      	ldr	r3, [pc, #92]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	0899      	lsrs	r1, r3, #2
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695a      	ldr	r2, [r3, #20]
 800306e:	4b14      	ldr	r3, [pc, #80]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003070:	430a      	orrs	r2, r1
 8003072:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2204      	movs	r2, #4
 800307a:	4013      	ands	r3, r2
 800307c:	d009      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800307e:	4b10      	ldr	r3, [pc, #64]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003082:	4a15      	ldr	r2, [pc, #84]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003084:	4013      	ands	r3, r2
 8003086:	0019      	movs	r1, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691a      	ldr	r2, [r3, #16]
 800308c:	4b0c      	ldr	r3, [pc, #48]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800308e:	430a      	orrs	r2, r1
 8003090:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2280      	movs	r2, #128	@ 0x80
 8003098:	4013      	ands	r3, r2
 800309a:	d009      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800309c:	4b08      	ldr	r3, [pc, #32]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	22e0      	movs	r2, #224	@ 0xe0
 80030a2:	4393      	bics	r3, r2
 80030a4:	0019      	movs	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	4b05      	ldr	r3, [pc, #20]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030ac:	430a      	orrs	r2, r1
 80030ae:	601a      	str	r2, [r3, #0]
  }
  return status;
 80030b0:	2312      	movs	r3, #18
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	781b      	ldrb	r3, [r3, #0]
}
 80030b6:	0018      	movs	r0, r3
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b006      	add	sp, #24
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	46c0      	nop			@ (mov r8, r8)
 80030c0:	40021000 	.word	0x40021000
 80030c4:	fffffcff 	.word	0xfffffcff
 80030c8:	fffeffff 	.word	0xfffeffff
 80030cc:	00001388 	.word	0x00001388
 80030d0:	efffffff 	.word	0xefffffff
 80030d4:	ffffcfff 	.word	0xffffcfff
 80030d8:	ffff3fff 	.word	0xffff3fff

080030dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e04a      	b.n	8003184 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	223d      	movs	r2, #61	@ 0x3d
 80030f2:	5c9b      	ldrb	r3, [r3, r2]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d107      	bne.n	800310a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	223c      	movs	r2, #60	@ 0x3c
 80030fe:	2100      	movs	r1, #0
 8003100:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	0018      	movs	r0, r3
 8003106:	f7fd fed1 	bl	8000eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	223d      	movs	r2, #61	@ 0x3d
 800310e:	2102      	movs	r1, #2
 8003110:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3304      	adds	r3, #4
 800311a:	0019      	movs	r1, r3
 800311c:	0010      	movs	r0, r2
 800311e:	f000 fa81 	bl	8003624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2248      	movs	r2, #72	@ 0x48
 8003126:	2101      	movs	r1, #1
 8003128:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	223e      	movs	r2, #62	@ 0x3e
 800312e:	2101      	movs	r1, #1
 8003130:	5499      	strb	r1, [r3, r2]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	223f      	movs	r2, #63	@ 0x3f
 8003136:	2101      	movs	r1, #1
 8003138:	5499      	strb	r1, [r3, r2]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2240      	movs	r2, #64	@ 0x40
 800313e:	2101      	movs	r1, #1
 8003140:	5499      	strb	r1, [r3, r2]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2241      	movs	r2, #65	@ 0x41
 8003146:	2101      	movs	r1, #1
 8003148:	5499      	strb	r1, [r3, r2]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2242      	movs	r2, #66	@ 0x42
 800314e:	2101      	movs	r1, #1
 8003150:	5499      	strb	r1, [r3, r2]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2243      	movs	r2, #67	@ 0x43
 8003156:	2101      	movs	r1, #1
 8003158:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2244      	movs	r2, #68	@ 0x44
 800315e:	2101      	movs	r1, #1
 8003160:	5499      	strb	r1, [r3, r2]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2245      	movs	r2, #69	@ 0x45
 8003166:	2101      	movs	r1, #1
 8003168:	5499      	strb	r1, [r3, r2]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2246      	movs	r2, #70	@ 0x46
 800316e:	2101      	movs	r1, #1
 8003170:	5499      	strb	r1, [r3, r2]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2247      	movs	r2, #71	@ 0x47
 8003176:	2101      	movs	r1, #1
 8003178:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	223d      	movs	r2, #61	@ 0x3d
 800317e:	2101      	movs	r1, #1
 8003180:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	0018      	movs	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	b002      	add	sp, #8
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	223d      	movs	r2, #61	@ 0x3d
 8003198:	5c9b      	ldrb	r3, [r3, r2]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b01      	cmp	r3, #1
 800319e:	d001      	beq.n	80031a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e037      	b.n	8003214 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	223d      	movs	r2, #61	@ 0x3d
 80031a8:	2102      	movs	r1, #2
 80031aa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2101      	movs	r1, #1
 80031b8:	430a      	orrs	r2, r1
 80031ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a16      	ldr	r2, [pc, #88]	@ (800321c <HAL_TIM_Base_Start_IT+0x90>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d004      	beq.n	80031d0 <HAL_TIM_Base_Start_IT+0x44>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a15      	ldr	r2, [pc, #84]	@ (8003220 <HAL_TIM_Base_Start_IT+0x94>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d116      	bne.n	80031fe <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	4a13      	ldr	r2, [pc, #76]	@ (8003224 <HAL_TIM_Base_Start_IT+0x98>)
 80031d8:	4013      	ands	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b06      	cmp	r3, #6
 80031e0:	d016      	beq.n	8003210 <HAL_TIM_Base_Start_IT+0x84>
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	2380      	movs	r3, #128	@ 0x80
 80031e6:	025b      	lsls	r3, r3, #9
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d011      	beq.n	8003210 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2101      	movs	r1, #1
 80031f8:	430a      	orrs	r2, r1
 80031fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031fc:	e008      	b.n	8003210 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2101      	movs	r1, #1
 800320a:	430a      	orrs	r2, r1
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	e000      	b.n	8003212 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003210:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	0018      	movs	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	b004      	add	sp, #16
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40012c00 	.word	0x40012c00
 8003220:	40000400 	.word	0x40000400
 8003224:	00010007 	.word	0x00010007

08003228 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2202      	movs	r2, #2
 8003244:	4013      	ands	r3, r2
 8003246:	d021      	beq.n	800328c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2202      	movs	r2, #2
 800324c:	4013      	ands	r3, r2
 800324e:	d01d      	beq.n	800328c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2203      	movs	r2, #3
 8003256:	4252      	negs	r2, r2
 8003258:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	2203      	movs	r2, #3
 8003268:	4013      	ands	r3, r2
 800326a:	d004      	beq.n	8003276 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	0018      	movs	r0, r3
 8003270:	f000 f9c0 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 8003274:	e007      	b.n	8003286 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	0018      	movs	r0, r3
 800327a:	f000 f9b3 	bl	80035e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	0018      	movs	r0, r3
 8003282:	f000 f9bf 	bl	8003604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2204      	movs	r2, #4
 8003290:	4013      	ands	r3, r2
 8003292:	d022      	beq.n	80032da <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2204      	movs	r2, #4
 8003298:	4013      	ands	r3, r2
 800329a:	d01e      	beq.n	80032da <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2205      	movs	r2, #5
 80032a2:	4252      	negs	r2, r2
 80032a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2202      	movs	r2, #2
 80032aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	23c0      	movs	r3, #192	@ 0xc0
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4013      	ands	r3, r2
 80032b8:	d004      	beq.n	80032c4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	0018      	movs	r0, r3
 80032be:	f000 f999 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 80032c2:	e007      	b.n	80032d4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	0018      	movs	r0, r3
 80032c8:	f000 f98c 	bl	80035e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	0018      	movs	r0, r3
 80032d0:	f000 f998 	bl	8003604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2208      	movs	r2, #8
 80032de:	4013      	ands	r3, r2
 80032e0:	d021      	beq.n	8003326 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2208      	movs	r2, #8
 80032e6:	4013      	ands	r3, r2
 80032e8:	d01d      	beq.n	8003326 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2209      	movs	r2, #9
 80032f0:	4252      	negs	r2, r2
 80032f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2204      	movs	r2, #4
 80032f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	2203      	movs	r2, #3
 8003302:	4013      	ands	r3, r2
 8003304:	d004      	beq.n	8003310 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	0018      	movs	r0, r3
 800330a:	f000 f973 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 800330e:	e007      	b.n	8003320 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	0018      	movs	r0, r3
 8003314:	f000 f966 	bl	80035e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	0018      	movs	r0, r3
 800331c:	f000 f972 	bl	8003604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2210      	movs	r2, #16
 800332a:	4013      	ands	r3, r2
 800332c:	d022      	beq.n	8003374 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2210      	movs	r2, #16
 8003332:	4013      	ands	r3, r2
 8003334:	d01e      	beq.n	8003374 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2211      	movs	r2, #17
 800333c:	4252      	negs	r2, r2
 800333e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2208      	movs	r2, #8
 8003344:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69da      	ldr	r2, [r3, #28]
 800334c:	23c0      	movs	r3, #192	@ 0xc0
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4013      	ands	r3, r2
 8003352:	d004      	beq.n	800335e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	0018      	movs	r0, r3
 8003358:	f000 f94c 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 800335c:	e007      	b.n	800336e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	0018      	movs	r0, r3
 8003362:	f000 f93f 	bl	80035e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	0018      	movs	r0, r3
 800336a:	f000 f94b 	bl	8003604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2201      	movs	r2, #1
 8003378:	4013      	ands	r3, r2
 800337a:	d00c      	beq.n	8003396 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	4013      	ands	r3, r2
 8003382:	d008      	beq.n	8003396 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2202      	movs	r2, #2
 800338a:	4252      	negs	r2, r2
 800338c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	0018      	movs	r0, r3
 8003392:	f7fd f847 	bl	8000424 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2280      	movs	r2, #128	@ 0x80
 800339a:	4013      	ands	r3, r2
 800339c:	d104      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	2380      	movs	r3, #128	@ 0x80
 80033a2:	019b      	lsls	r3, r3, #6
 80033a4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033a6:	d00b      	beq.n	80033c0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2280      	movs	r2, #128	@ 0x80
 80033ac:	4013      	ands	r3, r2
 80033ae:	d007      	beq.n	80033c0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003430 <HAL_TIM_IRQHandler+0x208>)
 80033b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	0018      	movs	r0, r3
 80033bc:	f000 fab2 	bl	8003924 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	2380      	movs	r3, #128	@ 0x80
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	4013      	ands	r3, r2
 80033c8:	d00b      	beq.n	80033e2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2280      	movs	r2, #128	@ 0x80
 80033ce:	4013      	ands	r3, r2
 80033d0:	d007      	beq.n	80033e2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a17      	ldr	r2, [pc, #92]	@ (8003434 <HAL_TIM_IRQHandler+0x20c>)
 80033d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	0018      	movs	r0, r3
 80033de:	f000 faa9 	bl	8003934 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2240      	movs	r2, #64	@ 0x40
 80033e6:	4013      	ands	r3, r2
 80033e8:	d00c      	beq.n	8003404 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2240      	movs	r2, #64	@ 0x40
 80033ee:	4013      	ands	r3, r2
 80033f0:	d008      	beq.n	8003404 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2241      	movs	r2, #65	@ 0x41
 80033f8:	4252      	negs	r2, r2
 80033fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	0018      	movs	r0, r3
 8003400:	f000 f908 	bl	8003614 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2220      	movs	r2, #32
 8003408:	4013      	ands	r3, r2
 800340a:	d00c      	beq.n	8003426 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	4013      	ands	r3, r2
 8003412:	d008      	beq.n	8003426 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2221      	movs	r2, #33	@ 0x21
 800341a:	4252      	negs	r2, r2
 800341c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	0018      	movs	r0, r3
 8003422:	f000 fa77 	bl	8003914 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	46bd      	mov	sp, r7
 800342a:	b004      	add	sp, #16
 800342c:	bd80      	pop	{r7, pc}
 800342e:	46c0      	nop			@ (mov r8, r8)
 8003430:	ffffdf7f 	.word	0xffffdf7f
 8003434:	fffffeff 	.word	0xfffffeff

08003438 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003442:	230f      	movs	r3, #15
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	2200      	movs	r2, #0
 8003448:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	223c      	movs	r2, #60	@ 0x3c
 800344e:	5c9b      	ldrb	r3, [r3, r2]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_TIM_ConfigClockSource+0x20>
 8003454:	2302      	movs	r3, #2
 8003456:	e0bc      	b.n	80035d2 <HAL_TIM_ConfigClockSource+0x19a>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	223c      	movs	r2, #60	@ 0x3c
 800345c:	2101      	movs	r1, #1
 800345e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	223d      	movs	r2, #61	@ 0x3d
 8003464:	2102      	movs	r1, #2
 8003466:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	4a5a      	ldr	r2, [pc, #360]	@ (80035dc <HAL_TIM_ConfigClockSource+0x1a4>)
 8003474:	4013      	ands	r3, r2
 8003476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4a59      	ldr	r2, [pc, #356]	@ (80035e0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800347c:	4013      	ands	r3, r2
 800347e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2280      	movs	r2, #128	@ 0x80
 800348e:	0192      	lsls	r2, r2, #6
 8003490:	4293      	cmp	r3, r2
 8003492:	d040      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0xde>
 8003494:	2280      	movs	r2, #128	@ 0x80
 8003496:	0192      	lsls	r2, r2, #6
 8003498:	4293      	cmp	r3, r2
 800349a:	d900      	bls.n	800349e <HAL_TIM_ConfigClockSource+0x66>
 800349c:	e088      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x178>
 800349e:	2280      	movs	r2, #128	@ 0x80
 80034a0:	0152      	lsls	r2, r2, #5
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d100      	bne.n	80034a8 <HAL_TIM_ConfigClockSource+0x70>
 80034a6:	e088      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x182>
 80034a8:	2280      	movs	r2, #128	@ 0x80
 80034aa:	0152      	lsls	r2, r2, #5
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d900      	bls.n	80034b2 <HAL_TIM_ConfigClockSource+0x7a>
 80034b0:	e07e      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x178>
 80034b2:	2b70      	cmp	r3, #112	@ 0x70
 80034b4:	d018      	beq.n	80034e8 <HAL_TIM_ConfigClockSource+0xb0>
 80034b6:	d900      	bls.n	80034ba <HAL_TIM_ConfigClockSource+0x82>
 80034b8:	e07a      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x178>
 80034ba:	2b60      	cmp	r3, #96	@ 0x60
 80034bc:	d04f      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x126>
 80034be:	d900      	bls.n	80034c2 <HAL_TIM_ConfigClockSource+0x8a>
 80034c0:	e076      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x178>
 80034c2:	2b50      	cmp	r3, #80	@ 0x50
 80034c4:	d03b      	beq.n	800353e <HAL_TIM_ConfigClockSource+0x106>
 80034c6:	d900      	bls.n	80034ca <HAL_TIM_ConfigClockSource+0x92>
 80034c8:	e072      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x178>
 80034ca:	2b40      	cmp	r3, #64	@ 0x40
 80034cc:	d057      	beq.n	800357e <HAL_TIM_ConfigClockSource+0x146>
 80034ce:	d900      	bls.n	80034d2 <HAL_TIM_ConfigClockSource+0x9a>
 80034d0:	e06e      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x178>
 80034d2:	2b30      	cmp	r3, #48	@ 0x30
 80034d4:	d063      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x166>
 80034d6:	d86b      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x178>
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d060      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x166>
 80034dc:	d868      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x178>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d05d      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x166>
 80034e2:	2b10      	cmp	r3, #16
 80034e4:	d05b      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x166>
 80034e6:	e063      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034f8:	f000 f98a 	bl	8003810 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2277      	movs	r2, #119	@ 0x77
 8003508:	4313      	orrs	r3, r2
 800350a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	609a      	str	r2, [r3, #8]
      break;
 8003514:	e052      	b.n	80035bc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003526:	f000 f973 	bl	8003810 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2180      	movs	r1, #128	@ 0x80
 8003536:	01c9      	lsls	r1, r1, #7
 8003538:	430a      	orrs	r2, r1
 800353a:	609a      	str	r2, [r3, #8]
      break;
 800353c:	e03e      	b.n	80035bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800354a:	001a      	movs	r2, r3
 800354c:	f000 f8e4 	bl	8003718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2150      	movs	r1, #80	@ 0x50
 8003556:	0018      	movs	r0, r3
 8003558:	f000 f93e 	bl	80037d8 <TIM_ITRx_SetConfig>
      break;
 800355c:	e02e      	b.n	80035bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800356a:	001a      	movs	r2, r3
 800356c:	f000 f902 	bl	8003774 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2160      	movs	r1, #96	@ 0x60
 8003576:	0018      	movs	r0, r3
 8003578:	f000 f92e 	bl	80037d8 <TIM_ITRx_SetConfig>
      break;
 800357c:	e01e      	b.n	80035bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800358a:	001a      	movs	r2, r3
 800358c:	f000 f8c4 	bl	8003718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2140      	movs	r1, #64	@ 0x40
 8003596:	0018      	movs	r0, r3
 8003598:	f000 f91e 	bl	80037d8 <TIM_ITRx_SetConfig>
      break;
 800359c:	e00e      	b.n	80035bc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	0019      	movs	r1, r3
 80035a8:	0010      	movs	r0, r2
 80035aa:	f000 f915 	bl	80037d8 <TIM_ITRx_SetConfig>
      break;
 80035ae:	e005      	b.n	80035bc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80035b0:	230f      	movs	r3, #15
 80035b2:	18fb      	adds	r3, r7, r3
 80035b4:	2201      	movs	r2, #1
 80035b6:	701a      	strb	r2, [r3, #0]
      break;
 80035b8:	e000      	b.n	80035bc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80035ba:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	223d      	movs	r2, #61	@ 0x3d
 80035c0:	2101      	movs	r1, #1
 80035c2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	223c      	movs	r2, #60	@ 0x3c
 80035c8:	2100      	movs	r1, #0
 80035ca:	5499      	strb	r1, [r3, r2]

  return status;
 80035cc:	230f      	movs	r3, #15
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	781b      	ldrb	r3, [r3, #0]
}
 80035d2:	0018      	movs	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b004      	add	sp, #16
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	46c0      	nop			@ (mov r8, r8)
 80035dc:	ffceff88 	.word	0xffceff88
 80035e0:	ffff00ff 	.word	0xffff00ff

080035e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035ec:	46c0      	nop			@ (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b002      	add	sp, #8
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035fc:	46c0      	nop			@ (mov r8, r8)
 80035fe:	46bd      	mov	sp, r7
 8003600:	b002      	add	sp, #8
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800360c:	46c0      	nop			@ (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b002      	add	sp, #8
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800361c:	46c0      	nop			@ (mov r8, r8)
 800361e:	46bd      	mov	sp, r7
 8003620:	b002      	add	sp, #8
 8003622:	bd80      	pop	{r7, pc}

08003624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a32      	ldr	r2, [pc, #200]	@ (8003700 <TIM_Base_SetConfig+0xdc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d003      	beq.n	8003644 <TIM_Base_SetConfig+0x20>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a31      	ldr	r2, [pc, #196]	@ (8003704 <TIM_Base_SetConfig+0xe0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d108      	bne.n	8003656 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2270      	movs	r2, #112	@ 0x70
 8003648:	4393      	bics	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a29      	ldr	r2, [pc, #164]	@ (8003700 <TIM_Base_SetConfig+0xdc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00f      	beq.n	800367e <TIM_Base_SetConfig+0x5a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a28      	ldr	r2, [pc, #160]	@ (8003704 <TIM_Base_SetConfig+0xe0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00b      	beq.n	800367e <TIM_Base_SetConfig+0x5a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a27      	ldr	r2, [pc, #156]	@ (8003708 <TIM_Base_SetConfig+0xe4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d007      	beq.n	800367e <TIM_Base_SetConfig+0x5a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a26      	ldr	r2, [pc, #152]	@ (800370c <TIM_Base_SetConfig+0xe8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d003      	beq.n	800367e <TIM_Base_SetConfig+0x5a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a25      	ldr	r2, [pc, #148]	@ (8003710 <TIM_Base_SetConfig+0xec>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d108      	bne.n	8003690 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4a24      	ldr	r2, [pc, #144]	@ (8003714 <TIM_Base_SetConfig+0xf0>)
 8003682:	4013      	ands	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4313      	orrs	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2280      	movs	r2, #128	@ 0x80
 8003694:	4393      	bics	r3, r2
 8003696:	001a      	movs	r2, r3
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a11      	ldr	r2, [pc, #68]	@ (8003700 <TIM_Base_SetConfig+0xdc>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d007      	beq.n	80036ce <TIM_Base_SetConfig+0xaa>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a12      	ldr	r2, [pc, #72]	@ (800370c <TIM_Base_SetConfig+0xe8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d003      	beq.n	80036ce <TIM_Base_SetConfig+0xaa>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a11      	ldr	r2, [pc, #68]	@ (8003710 <TIM_Base_SetConfig+0xec>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d103      	bne.n	80036d6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	2201      	movs	r2, #1
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d106      	bne.n	80036f6 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	2201      	movs	r2, #1
 80036ee:	4393      	bics	r3, r2
 80036f0:	001a      	movs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	611a      	str	r2, [r3, #16]
  }
}
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b004      	add	sp, #16
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	46c0      	nop			@ (mov r8, r8)
 8003700:	40012c00 	.word	0x40012c00
 8003704:	40000400 	.word	0x40000400
 8003708:	40002000 	.word	0x40002000
 800370c:	40014400 	.word	0x40014400
 8003710:	40014800 	.word	0x40014800
 8003714:	fffffcff 	.word	0xfffffcff

08003718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	2201      	movs	r2, #1
 8003730:	4393      	bics	r3, r2
 8003732:	001a      	movs	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	22f0      	movs	r2, #240	@ 0xf0
 8003742:	4393      	bics	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	220a      	movs	r2, #10
 8003754:	4393      	bics	r3, r2
 8003756:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	621a      	str	r2, [r3, #32]
}
 800376c:	46c0      	nop			@ (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	b006      	add	sp, #24
 8003772:	bd80      	pop	{r7, pc}

08003774 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	2210      	movs	r2, #16
 800378c:	4393      	bics	r3, r2
 800378e:	001a      	movs	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4a0d      	ldr	r2, [pc, #52]	@ (80037d4 <TIM_TI2_ConfigInputStage+0x60>)
 800379e:	4013      	ands	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	031b      	lsls	r3, r3, #12
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	22a0      	movs	r2, #160	@ 0xa0
 80037b0:	4393      	bics	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	621a      	str	r2, [r3, #32]
}
 80037ca:	46c0      	nop			@ (mov r8, r8)
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b006      	add	sp, #24
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	46c0      	nop			@ (mov r8, r8)
 80037d4:	ffff0fff 	.word	0xffff0fff

080037d8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4a08      	ldr	r2, [pc, #32]	@ (800380c <TIM_ITRx_SetConfig+0x34>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	2207      	movs	r2, #7
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	609a      	str	r2, [r3, #8]
}
 8003802:	46c0      	nop			@ (mov r8, r8)
 8003804:	46bd      	mov	sp, r7
 8003806:	b004      	add	sp, #16
 8003808:	bd80      	pop	{r7, pc}
 800380a:	46c0      	nop			@ (mov r8, r8)
 800380c:	ffcfff8f 	.word	0xffcfff8f

08003810 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	4a09      	ldr	r2, [pc, #36]	@ (800384c <TIM_ETR_SetConfig+0x3c>)
 8003828:	4013      	ands	r3, r2
 800382a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	021a      	lsls	r2, r3, #8
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	431a      	orrs	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	4313      	orrs	r3, r2
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	4313      	orrs	r3, r2
 800383c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	609a      	str	r2, [r3, #8]
}
 8003844:	46c0      	nop			@ (mov r8, r8)
 8003846:	46bd      	mov	sp, r7
 8003848:	b006      	add	sp, #24
 800384a:	bd80      	pop	{r7, pc}
 800384c:	ffff00ff 	.word	0xffff00ff

08003850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	223c      	movs	r2, #60	@ 0x3c
 800385e:	5c9b      	ldrb	r3, [r3, r2]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003864:	2302      	movs	r3, #2
 8003866:	e04a      	b.n	80038fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	223c      	movs	r2, #60	@ 0x3c
 800386c:	2101      	movs	r1, #1
 800386e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	223d      	movs	r2, #61	@ 0x3d
 8003874:	2102      	movs	r1, #2
 8003876:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a1e      	ldr	r2, [pc, #120]	@ (8003908 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d108      	bne.n	80038a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4a1d      	ldr	r2, [pc, #116]	@ (800390c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003896:	4013      	ands	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2270      	movs	r2, #112	@ 0x70
 80038a8:	4393      	bics	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a11      	ldr	r2, [pc, #68]	@ (8003908 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d004      	beq.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a10      	ldr	r2, [pc, #64]	@ (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d10c      	bne.n	80038ec <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2280      	movs	r2, #128	@ 0x80
 80038d6:	4393      	bics	r3, r2
 80038d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	223d      	movs	r2, #61	@ 0x3d
 80038f0:	2101      	movs	r1, #1
 80038f2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	223c      	movs	r2, #60	@ 0x3c
 80038f8:	2100      	movs	r1, #0
 80038fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	0018      	movs	r0, r3
 8003900:	46bd      	mov	sp, r7
 8003902:	b004      	add	sp, #16
 8003904:	bd80      	pop	{r7, pc}
 8003906:	46c0      	nop			@ (mov r8, r8)
 8003908:	40012c00 	.word	0x40012c00
 800390c:	ff0fffff 	.word	0xff0fffff
 8003910:	40000400 	.word	0x40000400

08003914 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800391c:	46c0      	nop			@ (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	b002      	add	sp, #8
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800392c:	46c0      	nop			@ (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	b002      	add	sp, #8
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800393c:	46c0      	nop			@ (mov r8, r8)
 800393e:	46bd      	mov	sp, r7
 8003940:	b002      	add	sp, #8
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e046      	b.n	80039e4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2288      	movs	r2, #136	@ 0x88
 800395a:	589b      	ldr	r3, [r3, r2]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d107      	bne.n	8003970 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2284      	movs	r2, #132	@ 0x84
 8003964:	2100      	movs	r1, #0
 8003966:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	0018      	movs	r0, r3
 800396c:	f7fd fac4 	bl	8000ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2288      	movs	r2, #136	@ 0x88
 8003974:	2124      	movs	r1, #36	@ 0x24
 8003976:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2101      	movs	r1, #1
 8003984:	438a      	bics	r2, r1
 8003986:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	0018      	movs	r0, r3
 8003994:	f000 fac8 	bl	8003f28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	0018      	movs	r0, r3
 800399c:	f000 f946 	bl	8003c2c <UART_SetConfig>
 80039a0:	0003      	movs	r3, r0
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e01c      	b.n	80039e4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	490d      	ldr	r1, [pc, #52]	@ (80039ec <HAL_UART_Init+0xa8>)
 80039b6:	400a      	ands	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	212a      	movs	r1, #42	@ 0x2a
 80039c6:	438a      	bics	r2, r1
 80039c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2101      	movs	r1, #1
 80039d6:	430a      	orrs	r2, r1
 80039d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	0018      	movs	r0, r3
 80039de:	f000 fb57 	bl	8004090 <UART_CheckIdleState>
 80039e2:	0003      	movs	r3, r0
}
 80039e4:	0018      	movs	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b002      	add	sp, #8
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	ffffb7ff 	.word	0xffffb7ff

080039f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08a      	sub	sp, #40	@ 0x28
 80039f4:	af02      	add	r7, sp, #8
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	603b      	str	r3, [r7, #0]
 80039fc:	1dbb      	adds	r3, r7, #6
 80039fe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2288      	movs	r2, #136	@ 0x88
 8003a04:	589b      	ldr	r3, [r3, r2]
 8003a06:	2b20      	cmp	r3, #32
 8003a08:	d000      	beq.n	8003a0c <HAL_UART_Transmit+0x1c>
 8003a0a:	e090      	b.n	8003b2e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_UART_Transmit+0x2a>
 8003a12:	1dbb      	adds	r3, r7, #6
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e088      	b.n	8003b30 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	2380      	movs	r3, #128	@ 0x80
 8003a24:	015b      	lsls	r3, r3, #5
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d109      	bne.n	8003a3e <HAL_UART_Transmit+0x4e>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d105      	bne.n	8003a3e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2201      	movs	r2, #1
 8003a36:	4013      	ands	r3, r2
 8003a38:	d001      	beq.n	8003a3e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e078      	b.n	8003b30 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2290      	movs	r2, #144	@ 0x90
 8003a42:	2100      	movs	r1, #0
 8003a44:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2288      	movs	r2, #136	@ 0x88
 8003a4a:	2121      	movs	r1, #33	@ 0x21
 8003a4c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a4e:	f7fd fba5 	bl	800119c <HAL_GetTick>
 8003a52:	0003      	movs	r3, r0
 8003a54:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	1dba      	adds	r2, r7, #6
 8003a5a:	2154      	movs	r1, #84	@ 0x54
 8003a5c:	8812      	ldrh	r2, [r2, #0]
 8003a5e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1dba      	adds	r2, r7, #6
 8003a64:	2156      	movs	r1, #86	@ 0x56
 8003a66:	8812      	ldrh	r2, [r2, #0]
 8003a68:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	2380      	movs	r3, #128	@ 0x80
 8003a70:	015b      	lsls	r3, r3, #5
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d108      	bne.n	8003a88 <HAL_UART_Transmit+0x98>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d104      	bne.n	8003a88 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	e003      	b.n	8003a90 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a90:	e030      	b.n	8003af4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	0013      	movs	r3, r2
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2180      	movs	r1, #128	@ 0x80
 8003aa0:	f000 fba0 	bl	80041e4 <UART_WaitOnFlagUntilTimeout>
 8003aa4:	1e03      	subs	r3, r0, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2288      	movs	r2, #136	@ 0x88
 8003aac:	2120      	movs	r1, #32
 8003aae:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e03d      	b.n	8003b30 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10b      	bne.n	8003ad2 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	001a      	movs	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	05d2      	lsls	r2, r2, #23
 8003ac6:	0dd2      	lsrs	r2, r2, #23
 8003ac8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	3302      	adds	r3, #2
 8003ace:	61bb      	str	r3, [r7, #24]
 8003ad0:	e007      	b.n	8003ae2 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	781a      	ldrb	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2256      	movs	r2, #86	@ 0x56
 8003ae6:	5a9b      	ldrh	r3, [r3, r2]
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b299      	uxth	r1, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2256      	movs	r2, #86	@ 0x56
 8003af2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2256      	movs	r2, #86	@ 0x56
 8003af8:	5a9b      	ldrh	r3, [r3, r2]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1c8      	bne.n	8003a92 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	0013      	movs	r3, r2
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2140      	movs	r1, #64	@ 0x40
 8003b0e:	f000 fb69 	bl	80041e4 <UART_WaitOnFlagUntilTimeout>
 8003b12:	1e03      	subs	r3, r0, #0
 8003b14:	d005      	beq.n	8003b22 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2288      	movs	r2, #136	@ 0x88
 8003b1a:	2120      	movs	r1, #32
 8003b1c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e006      	b.n	8003b30 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2288      	movs	r2, #136	@ 0x88
 8003b26:	2120      	movs	r1, #32
 8003b28:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	e000      	b.n	8003b30 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003b2e:	2302      	movs	r3, #2
  }
}
 8003b30:	0018      	movs	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b008      	add	sp, #32
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	1dbb      	adds	r3, r7, #6
 8003b44:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	228c      	movs	r2, #140	@ 0x8c
 8003b4a:	589b      	ldr	r3, [r3, r2]
 8003b4c:	2b20      	cmp	r3, #32
 8003b4e:	d145      	bne.n	8003bdc <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_UART_Receive_DMA+0x26>
 8003b56:	1dbb      	adds	r3, r7, #6
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e03d      	b.n	8003bde <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	2380      	movs	r3, #128	@ 0x80
 8003b68:	015b      	lsls	r3, r3, #5
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d109      	bne.n	8003b82 <HAL_UART_Receive_DMA+0x4a>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d105      	bne.n	8003b82 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d001      	beq.n	8003b82 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e02d      	b.n	8003bde <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	2380      	movs	r3, #128	@ 0x80
 8003b90:	041b      	lsls	r3, r3, #16
 8003b92:	4013      	ands	r3, r2
 8003b94:	d019      	beq.n	8003bca <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b96:	f3ef 8310 	mrs	r3, PRIMASK
 8003b9a:	613b      	str	r3, [r7, #16]
  return(result);
 8003b9c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b9e:	61fb      	str	r3, [r7, #28]
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f383 8810 	msr	PRIMASK, r3
}
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2180      	movs	r1, #128	@ 0x80
 8003bb8:	04c9      	lsls	r1, r1, #19
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	f383 8810 	msr	PRIMASK, r3
}
 8003bc8:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003bca:	1dbb      	adds	r3, r7, #6
 8003bcc:	881a      	ldrh	r2, [r3, #0]
 8003bce:	68b9      	ldr	r1, [r7, #8]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f000 fb76 	bl	80042c4 <UART_Start_Receive_DMA>
 8003bd8:	0003      	movs	r3, r0
 8003bda:	e000      	b.n	8003bde <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003bdc:	2302      	movs	r3, #2
  }
}
 8003bde:	0018      	movs	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b008      	add	sp, #32
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003bee:	46c0      	nop			@ (mov r8, r8)
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b002      	add	sp, #8
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b082      	sub	sp, #8
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003bfe:	46c0      	nop			@ (mov r8, r8)
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b002      	add	sp, #8
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c0e:	46c0      	nop			@ (mov r8, r8)
 8003c10:	46bd      	mov	sp, r7
 8003c12:	b002      	add	sp, #8
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b082      	sub	sp, #8
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	000a      	movs	r2, r1
 8003c20:	1cbb      	adds	r3, r7, #2
 8003c22:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c24:	46c0      	nop			@ (mov r8, r8)
 8003c26:	46bd      	mov	sp, r7
 8003c28:	b002      	add	sp, #8
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c34:	231e      	movs	r3, #30
 8003c36:	18fb      	adds	r3, r7, r3
 8003c38:	2200      	movs	r2, #0
 8003c3a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4aab      	ldr	r2, [pc, #684]	@ (8003f08 <UART_SetConfig+0x2dc>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	0019      	movs	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	4aa6      	ldr	r2, [pc, #664]	@ (8003f0c <UART_SetConfig+0x2e0>)
 8003c72:	4013      	ands	r3, r2
 8003c74:	0019      	movs	r1, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	4a9d      	ldr	r2, [pc, #628]	@ (8003f10 <UART_SetConfig+0x2e4>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	0019      	movs	r1, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cae:	220f      	movs	r2, #15
 8003cb0:	4393      	bics	r3, r2
 8003cb2:	0019      	movs	r1, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a93      	ldr	r2, [pc, #588]	@ (8003f14 <UART_SetConfig+0x2e8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d127      	bne.n	8003d1a <UART_SetConfig+0xee>
 8003cca:	4b93      	ldr	r3, [pc, #588]	@ (8003f18 <UART_SetConfig+0x2ec>)
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cce:	2203      	movs	r2, #3
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	d017      	beq.n	8003d06 <UART_SetConfig+0xda>
 8003cd6:	d81b      	bhi.n	8003d10 <UART_SetConfig+0xe4>
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d00a      	beq.n	8003cf2 <UART_SetConfig+0xc6>
 8003cdc:	d818      	bhi.n	8003d10 <UART_SetConfig+0xe4>
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <UART_SetConfig+0xbc>
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d00a      	beq.n	8003cfc <UART_SetConfig+0xd0>
 8003ce6:	e013      	b.n	8003d10 <UART_SetConfig+0xe4>
 8003ce8:	231f      	movs	r3, #31
 8003cea:	18fb      	adds	r3, r7, r3
 8003cec:	2200      	movs	r2, #0
 8003cee:	701a      	strb	r2, [r3, #0]
 8003cf0:	e021      	b.n	8003d36 <UART_SetConfig+0x10a>
 8003cf2:	231f      	movs	r3, #31
 8003cf4:	18fb      	adds	r3, r7, r3
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	701a      	strb	r2, [r3, #0]
 8003cfa:	e01c      	b.n	8003d36 <UART_SetConfig+0x10a>
 8003cfc:	231f      	movs	r3, #31
 8003cfe:	18fb      	adds	r3, r7, r3
 8003d00:	2204      	movs	r2, #4
 8003d02:	701a      	strb	r2, [r3, #0]
 8003d04:	e017      	b.n	8003d36 <UART_SetConfig+0x10a>
 8003d06:	231f      	movs	r3, #31
 8003d08:	18fb      	adds	r3, r7, r3
 8003d0a:	2208      	movs	r2, #8
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	e012      	b.n	8003d36 <UART_SetConfig+0x10a>
 8003d10:	231f      	movs	r3, #31
 8003d12:	18fb      	adds	r3, r7, r3
 8003d14:	2210      	movs	r2, #16
 8003d16:	701a      	strb	r2, [r3, #0]
 8003d18:	e00d      	b.n	8003d36 <UART_SetConfig+0x10a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a7f      	ldr	r2, [pc, #508]	@ (8003f1c <UART_SetConfig+0x2f0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d104      	bne.n	8003d2e <UART_SetConfig+0x102>
 8003d24:	231f      	movs	r3, #31
 8003d26:	18fb      	adds	r3, r7, r3
 8003d28:	2200      	movs	r2, #0
 8003d2a:	701a      	strb	r2, [r3, #0]
 8003d2c:	e003      	b.n	8003d36 <UART_SetConfig+0x10a>
 8003d2e:	231f      	movs	r3, #31
 8003d30:	18fb      	adds	r3, r7, r3
 8003d32:	2210      	movs	r2, #16
 8003d34:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69da      	ldr	r2, [r3, #28]
 8003d3a:	2380      	movs	r3, #128	@ 0x80
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d000      	beq.n	8003d44 <UART_SetConfig+0x118>
 8003d42:	e06f      	b.n	8003e24 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8003d44:	231f      	movs	r3, #31
 8003d46:	18fb      	adds	r3, r7, r3
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d01f      	beq.n	8003d8e <UART_SetConfig+0x162>
 8003d4e:	dc22      	bgt.n	8003d96 <UART_SetConfig+0x16a>
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d017      	beq.n	8003d84 <UART_SetConfig+0x158>
 8003d54:	dc1f      	bgt.n	8003d96 <UART_SetConfig+0x16a>
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <UART_SetConfig+0x134>
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d005      	beq.n	8003d6a <UART_SetConfig+0x13e>
 8003d5e:	e01a      	b.n	8003d96 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d60:	f7ff f8b8 	bl	8002ed4 <HAL_RCC_GetPCLK1Freq>
 8003d64:	0003      	movs	r3, r0
 8003d66:	61bb      	str	r3, [r7, #24]
        break;
 8003d68:	e01c      	b.n	8003da4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003d6a:	4b6b      	ldr	r3, [pc, #428]	@ (8003f18 <UART_SetConfig+0x2ec>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	095b      	lsrs	r3, r3, #5
 8003d70:	2207      	movs	r2, #7
 8003d72:	4013      	ands	r3, r2
 8003d74:	3301      	adds	r3, #1
 8003d76:	0019      	movs	r1, r3
 8003d78:	4869      	ldr	r0, [pc, #420]	@ (8003f20 <UART_SetConfig+0x2f4>)
 8003d7a:	f7fc f9c5 	bl	8000108 <__udivsi3>
 8003d7e:	0003      	movs	r3, r0
 8003d80:	61bb      	str	r3, [r7, #24]
        break;
 8003d82:	e00f      	b.n	8003da4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d84:	f7ff f838 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8003d88:	0003      	movs	r3, r0
 8003d8a:	61bb      	str	r3, [r7, #24]
        break;
 8003d8c:	e00a      	b.n	8003da4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d8e:	2380      	movs	r3, #128	@ 0x80
 8003d90:	021b      	lsls	r3, r3, #8
 8003d92:	61bb      	str	r3, [r7, #24]
        break;
 8003d94:	e006      	b.n	8003da4 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d9a:	231e      	movs	r3, #30
 8003d9c:	18fb      	adds	r3, r7, r3
 8003d9e:	2201      	movs	r2, #1
 8003da0:	701a      	strb	r2, [r3, #0]
        break;
 8003da2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d100      	bne.n	8003dac <UART_SetConfig+0x180>
 8003daa:	e097      	b.n	8003edc <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003db0:	4b5c      	ldr	r3, [pc, #368]	@ (8003f24 <UART_SetConfig+0x2f8>)
 8003db2:	0052      	lsls	r2, r2, #1
 8003db4:	5ad3      	ldrh	r3, [r2, r3]
 8003db6:	0019      	movs	r1, r3
 8003db8:	69b8      	ldr	r0, [r7, #24]
 8003dba:	f7fc f9a5 	bl	8000108 <__udivsi3>
 8003dbe:	0003      	movs	r3, r0
 8003dc0:	005a      	lsls	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	085b      	lsrs	r3, r3, #1
 8003dc8:	18d2      	adds	r2, r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	0019      	movs	r1, r3
 8003dd0:	0010      	movs	r0, r2
 8003dd2:	f7fc f999 	bl	8000108 <__udivsi3>
 8003dd6:	0003      	movs	r3, r0
 8003dd8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	2b0f      	cmp	r3, #15
 8003dde:	d91c      	bls.n	8003e1a <UART_SetConfig+0x1ee>
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	2380      	movs	r3, #128	@ 0x80
 8003de4:	025b      	lsls	r3, r3, #9
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d217      	bcs.n	8003e1a <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	200e      	movs	r0, #14
 8003df0:	183b      	adds	r3, r7, r0
 8003df2:	210f      	movs	r1, #15
 8003df4:	438a      	bics	r2, r1
 8003df6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	085b      	lsrs	r3, r3, #1
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2207      	movs	r2, #7
 8003e00:	4013      	ands	r3, r2
 8003e02:	b299      	uxth	r1, r3
 8003e04:	183b      	adds	r3, r7, r0
 8003e06:	183a      	adds	r2, r7, r0
 8003e08:	8812      	ldrh	r2, [r2, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	183a      	adds	r2, r7, r0
 8003e14:	8812      	ldrh	r2, [r2, #0]
 8003e16:	60da      	str	r2, [r3, #12]
 8003e18:	e060      	b.n	8003edc <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003e1a:	231e      	movs	r3, #30
 8003e1c:	18fb      	adds	r3, r7, r3
 8003e1e:	2201      	movs	r2, #1
 8003e20:	701a      	strb	r2, [r3, #0]
 8003e22:	e05b      	b.n	8003edc <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e24:	231f      	movs	r3, #31
 8003e26:	18fb      	adds	r3, r7, r3
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d01f      	beq.n	8003e6e <UART_SetConfig+0x242>
 8003e2e:	dc22      	bgt.n	8003e76 <UART_SetConfig+0x24a>
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d017      	beq.n	8003e64 <UART_SetConfig+0x238>
 8003e34:	dc1f      	bgt.n	8003e76 <UART_SetConfig+0x24a>
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <UART_SetConfig+0x214>
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d005      	beq.n	8003e4a <UART_SetConfig+0x21e>
 8003e3e:	e01a      	b.n	8003e76 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e40:	f7ff f848 	bl	8002ed4 <HAL_RCC_GetPCLK1Freq>
 8003e44:	0003      	movs	r3, r0
 8003e46:	61bb      	str	r3, [r7, #24]
        break;
 8003e48:	e01c      	b.n	8003e84 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003e4a:	4b33      	ldr	r3, [pc, #204]	@ (8003f18 <UART_SetConfig+0x2ec>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	2207      	movs	r2, #7
 8003e52:	4013      	ands	r3, r2
 8003e54:	3301      	adds	r3, #1
 8003e56:	0019      	movs	r1, r3
 8003e58:	4831      	ldr	r0, [pc, #196]	@ (8003f20 <UART_SetConfig+0x2f4>)
 8003e5a:	f7fc f955 	bl	8000108 <__udivsi3>
 8003e5e:	0003      	movs	r3, r0
 8003e60:	61bb      	str	r3, [r7, #24]
        break;
 8003e62:	e00f      	b.n	8003e84 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e64:	f7fe ffc8 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8003e68:	0003      	movs	r3, r0
 8003e6a:	61bb      	str	r3, [r7, #24]
        break;
 8003e6c:	e00a      	b.n	8003e84 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e6e:	2380      	movs	r3, #128	@ 0x80
 8003e70:	021b      	lsls	r3, r3, #8
 8003e72:	61bb      	str	r3, [r7, #24]
        break;
 8003e74:	e006      	b.n	8003e84 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e7a:	231e      	movs	r3, #30
 8003e7c:	18fb      	adds	r3, r7, r3
 8003e7e:	2201      	movs	r2, #1
 8003e80:	701a      	strb	r2, [r3, #0]
        break;
 8003e82:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d028      	beq.n	8003edc <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e8e:	4b25      	ldr	r3, [pc, #148]	@ (8003f24 <UART_SetConfig+0x2f8>)
 8003e90:	0052      	lsls	r2, r2, #1
 8003e92:	5ad3      	ldrh	r3, [r2, r3]
 8003e94:	0019      	movs	r1, r3
 8003e96:	69b8      	ldr	r0, [r7, #24]
 8003e98:	f7fc f936 	bl	8000108 <__udivsi3>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	085b      	lsrs	r3, r3, #1
 8003ea6:	18d2      	adds	r2, r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	0019      	movs	r1, r3
 8003eae:	0010      	movs	r0, r2
 8003eb0:	f7fc f92a 	bl	8000108 <__udivsi3>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	2b0f      	cmp	r3, #15
 8003ebc:	d90a      	bls.n	8003ed4 <UART_SetConfig+0x2a8>
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	2380      	movs	r3, #128	@ 0x80
 8003ec2:	025b      	lsls	r3, r3, #9
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d205      	bcs.n	8003ed4 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	60da      	str	r2, [r3, #12]
 8003ed2:	e003      	b.n	8003edc <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003ed4:	231e      	movs	r3, #30
 8003ed6:	18fb      	adds	r3, r7, r3
 8003ed8:	2201      	movs	r2, #1
 8003eda:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	226a      	movs	r2, #106	@ 0x6a
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2268      	movs	r2, #104	@ 0x68
 8003ee8:	2101      	movs	r1, #1
 8003eea:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003ef8:	231e      	movs	r3, #30
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	781b      	ldrb	r3, [r3, #0]
}
 8003efe:	0018      	movs	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	b008      	add	sp, #32
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	46c0      	nop			@ (mov r8, r8)
 8003f08:	cfff69f3 	.word	0xcfff69f3
 8003f0c:	ffffcfff 	.word	0xffffcfff
 8003f10:	11fff4ff 	.word	0x11fff4ff
 8003f14:	40013800 	.word	0x40013800
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	40004400 	.word	0x40004400
 8003f20:	02dc6c00 	.word	0x02dc6c00
 8003f24:	08004824 	.word	0x08004824

08003f28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f34:	2208      	movs	r2, #8
 8003f36:	4013      	ands	r3, r2
 8003f38:	d00b      	beq.n	8003f52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	4a4a      	ldr	r2, [pc, #296]	@ (800406c <UART_AdvFeatureConfig+0x144>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	0019      	movs	r1, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f56:	2201      	movs	r2, #1
 8003f58:	4013      	ands	r3, r2
 8003f5a:	d00b      	beq.n	8003f74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	4a43      	ldr	r2, [pc, #268]	@ (8004070 <UART_AdvFeatureConfig+0x148>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	0019      	movs	r1, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f78:	2202      	movs	r2, #2
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	d00b      	beq.n	8003f96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	4a3b      	ldr	r2, [pc, #236]	@ (8004074 <UART_AdvFeatureConfig+0x14c>)
 8003f86:	4013      	ands	r3, r2
 8003f88:	0019      	movs	r1, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d00b      	beq.n	8003fb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	4a34      	ldr	r2, [pc, #208]	@ (8004078 <UART_AdvFeatureConfig+0x150>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	0019      	movs	r1, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbc:	2210      	movs	r2, #16
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d00b      	beq.n	8003fda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	4a2c      	ldr	r2, [pc, #176]	@ (800407c <UART_AdvFeatureConfig+0x154>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	0019      	movs	r1, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fde:	2220      	movs	r2, #32
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	d00b      	beq.n	8003ffc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	4a25      	ldr	r2, [pc, #148]	@ (8004080 <UART_AdvFeatureConfig+0x158>)
 8003fec:	4013      	ands	r3, r2
 8003fee:	0019      	movs	r1, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004000:	2240      	movs	r2, #64	@ 0x40
 8004002:	4013      	ands	r3, r2
 8004004:	d01d      	beq.n	8004042 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	4a1d      	ldr	r2, [pc, #116]	@ (8004084 <UART_AdvFeatureConfig+0x15c>)
 800400e:	4013      	ands	r3, r2
 8004010:	0019      	movs	r1, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004022:	2380      	movs	r3, #128	@ 0x80
 8004024:	035b      	lsls	r3, r3, #13
 8004026:	429a      	cmp	r2, r3
 8004028:	d10b      	bne.n	8004042 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4a15      	ldr	r2, [pc, #84]	@ (8004088 <UART_AdvFeatureConfig+0x160>)
 8004032:	4013      	ands	r3, r2
 8004034:	0019      	movs	r1, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004046:	2280      	movs	r2, #128	@ 0x80
 8004048:	4013      	ands	r3, r2
 800404a:	d00b      	beq.n	8004064 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	4a0e      	ldr	r2, [pc, #56]	@ (800408c <UART_AdvFeatureConfig+0x164>)
 8004054:	4013      	ands	r3, r2
 8004056:	0019      	movs	r1, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	605a      	str	r2, [r3, #4]
  }
}
 8004064:	46c0      	nop			@ (mov r8, r8)
 8004066:	46bd      	mov	sp, r7
 8004068:	b002      	add	sp, #8
 800406a:	bd80      	pop	{r7, pc}
 800406c:	ffff7fff 	.word	0xffff7fff
 8004070:	fffdffff 	.word	0xfffdffff
 8004074:	fffeffff 	.word	0xfffeffff
 8004078:	fffbffff 	.word	0xfffbffff
 800407c:	ffffefff 	.word	0xffffefff
 8004080:	ffffdfff 	.word	0xffffdfff
 8004084:	ffefffff 	.word	0xffefffff
 8004088:	ff9fffff 	.word	0xff9fffff
 800408c:	fff7ffff 	.word	0xfff7ffff

08004090 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b092      	sub	sp, #72	@ 0x48
 8004094:	af02      	add	r7, sp, #8
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2290      	movs	r2, #144	@ 0x90
 800409c:	2100      	movs	r1, #0
 800409e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040a0:	f7fd f87c 	bl	800119c <HAL_GetTick>
 80040a4:	0003      	movs	r3, r0
 80040a6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2208      	movs	r2, #8
 80040b0:	4013      	ands	r3, r2
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d12d      	bne.n	8004112 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040b8:	2280      	movs	r2, #128	@ 0x80
 80040ba:	0391      	lsls	r1, r2, #14
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	4a47      	ldr	r2, [pc, #284]	@ (80041dc <UART_CheckIdleState+0x14c>)
 80040c0:	9200      	str	r2, [sp, #0]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f000 f88e 	bl	80041e4 <UART_WaitOnFlagUntilTimeout>
 80040c8:	1e03      	subs	r3, r0, #0
 80040ca:	d022      	beq.n	8004112 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80040cc:	f3ef 8310 	mrs	r3, PRIMASK
 80040d0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80040d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80040d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040d6:	2301      	movs	r3, #1
 80040d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040dc:	f383 8810 	msr	PRIMASK, r3
}
 80040e0:	46c0      	nop			@ (mov r8, r8)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2180      	movs	r1, #128	@ 0x80
 80040ee:	438a      	bics	r2, r1
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f8:	f383 8810 	msr	PRIMASK, r3
}
 80040fc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2288      	movs	r2, #136	@ 0x88
 8004102:	2120      	movs	r1, #32
 8004104:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2284      	movs	r2, #132	@ 0x84
 800410a:	2100      	movs	r1, #0
 800410c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e060      	b.n	80041d4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2204      	movs	r2, #4
 800411a:	4013      	ands	r3, r2
 800411c:	2b04      	cmp	r3, #4
 800411e:	d146      	bne.n	80041ae <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004122:	2280      	movs	r2, #128	@ 0x80
 8004124:	03d1      	lsls	r1, r2, #15
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	4a2c      	ldr	r2, [pc, #176]	@ (80041dc <UART_CheckIdleState+0x14c>)
 800412a:	9200      	str	r2, [sp, #0]
 800412c:	2200      	movs	r2, #0
 800412e:	f000 f859 	bl	80041e4 <UART_WaitOnFlagUntilTimeout>
 8004132:	1e03      	subs	r3, r0, #0
 8004134:	d03b      	beq.n	80041ae <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004136:	f3ef 8310 	mrs	r3, PRIMASK
 800413a:	60fb      	str	r3, [r7, #12]
  return(result);
 800413c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800413e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004140:	2301      	movs	r3, #1
 8004142:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f383 8810 	msr	PRIMASK, r3
}
 800414a:	46c0      	nop			@ (mov r8, r8)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4922      	ldr	r1, [pc, #136]	@ (80041e0 <UART_CheckIdleState+0x150>)
 8004158:	400a      	ands	r2, r1
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800415e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f383 8810 	msr	PRIMASK, r3
}
 8004166:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004168:	f3ef 8310 	mrs	r3, PRIMASK
 800416c:	61bb      	str	r3, [r7, #24]
  return(result);
 800416e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004170:	633b      	str	r3, [r7, #48]	@ 0x30
 8004172:	2301      	movs	r3, #1
 8004174:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	f383 8810 	msr	PRIMASK, r3
}
 800417c:	46c0      	nop			@ (mov r8, r8)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2101      	movs	r1, #1
 800418a:	438a      	bics	r2, r1
 800418c:	609a      	str	r2, [r3, #8]
 800418e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004190:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	f383 8810 	msr	PRIMASK, r3
}
 8004198:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	228c      	movs	r2, #140	@ 0x8c
 800419e:	2120      	movs	r1, #32
 80041a0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2284      	movs	r2, #132	@ 0x84
 80041a6:	2100      	movs	r1, #0
 80041a8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e012      	b.n	80041d4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2288      	movs	r2, #136	@ 0x88
 80041b2:	2120      	movs	r1, #32
 80041b4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	228c      	movs	r2, #140	@ 0x8c
 80041ba:	2120      	movs	r1, #32
 80041bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2284      	movs	r2, #132	@ 0x84
 80041ce:	2100      	movs	r1, #0
 80041d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	0018      	movs	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b010      	add	sp, #64	@ 0x40
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	01ffffff 	.word	0x01ffffff
 80041e0:	fffffedf 	.word	0xfffffedf

080041e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	1dfb      	adds	r3, r7, #7
 80041f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f4:	e051      	b.n	800429a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	3301      	adds	r3, #1
 80041fa:	d04e      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fc:	f7fc ffce 	bl	800119c <HAL_GetTick>
 8004200:	0002      	movs	r2, r0
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	429a      	cmp	r2, r3
 800420a:	d302      	bcc.n	8004212 <UART_WaitOnFlagUntilTimeout+0x2e>
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e051      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2204      	movs	r2, #4
 800421e:	4013      	ands	r3, r2
 8004220:	d03b      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b80      	cmp	r3, #128	@ 0x80
 8004226:	d038      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b40      	cmp	r3, #64	@ 0x40
 800422c:	d035      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	2208      	movs	r2, #8
 8004236:	4013      	ands	r3, r2
 8004238:	2b08      	cmp	r3, #8
 800423a:	d111      	bne.n	8004260 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2208      	movs	r2, #8
 8004242:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	0018      	movs	r0, r3
 8004248:	f000 f922 	bl	8004490 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2290      	movs	r2, #144	@ 0x90
 8004250:	2108      	movs	r1, #8
 8004252:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2284      	movs	r2, #132	@ 0x84
 8004258:	2100      	movs	r1, #0
 800425a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e02c      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	69da      	ldr	r2, [r3, #28]
 8004266:	2380      	movs	r3, #128	@ 0x80
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	401a      	ands	r2, r3
 800426c:	2380      	movs	r3, #128	@ 0x80
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	429a      	cmp	r2, r3
 8004272:	d112      	bne.n	800429a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2280      	movs	r2, #128	@ 0x80
 800427a:	0112      	lsls	r2, r2, #4
 800427c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	0018      	movs	r0, r3
 8004282:	f000 f905 	bl	8004490 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2290      	movs	r2, #144	@ 0x90
 800428a:	2120      	movs	r1, #32
 800428c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2284      	movs	r2, #132	@ 0x84
 8004292:	2100      	movs	r1, #0
 8004294:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e00f      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	4013      	ands	r3, r2
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	425a      	negs	r2, r3
 80042aa:	4153      	adcs	r3, r2
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	001a      	movs	r2, r3
 80042b0:	1dfb      	adds	r3, r7, #7
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d09e      	beq.n	80041f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	0018      	movs	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	b004      	add	sp, #16
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b090      	sub	sp, #64	@ 0x40
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	1dbb      	adds	r3, r7, #6
 80042d0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	1dba      	adds	r2, r7, #6
 80042dc:	215c      	movs	r1, #92	@ 0x5c
 80042de:	8812      	ldrh	r2, [r2, #0]
 80042e0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2290      	movs	r2, #144	@ 0x90
 80042e6:	2100      	movs	r1, #0
 80042e8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	228c      	movs	r2, #140	@ 0x8c
 80042ee:	2122      	movs	r1, #34	@ 0x22
 80042f0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2280      	movs	r2, #128	@ 0x80
 80042f6:	589b      	ldr	r3, [r3, r2]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d02d      	beq.n	8004358 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2280      	movs	r2, #128	@ 0x80
 8004300:	589b      	ldr	r3, [r3, r2]
 8004302:	4a40      	ldr	r2, [pc, #256]	@ (8004404 <UART_Start_Receive_DMA+0x140>)
 8004304:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2280      	movs	r2, #128	@ 0x80
 800430a:	589b      	ldr	r3, [r3, r2]
 800430c:	4a3e      	ldr	r2, [pc, #248]	@ (8004408 <UART_Start_Receive_DMA+0x144>)
 800430e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2280      	movs	r2, #128	@ 0x80
 8004314:	589b      	ldr	r3, [r3, r2]
 8004316:	4a3d      	ldr	r2, [pc, #244]	@ (800440c <UART_Start_Receive_DMA+0x148>)
 8004318:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2280      	movs	r2, #128	@ 0x80
 800431e:	589b      	ldr	r3, [r3, r2]
 8004320:	2200      	movs	r2, #0
 8004322:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2280      	movs	r2, #128	@ 0x80
 8004328:	5898      	ldr	r0, [r3, r2]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3324      	adds	r3, #36	@ 0x24
 8004330:	0019      	movs	r1, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004336:	001a      	movs	r2, r3
 8004338:	1dbb      	adds	r3, r7, #6
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	f7fd f8a0 	bl	8001480 <HAL_DMA_Start_IT>
 8004340:	1e03      	subs	r3, r0, #0
 8004342:	d009      	beq.n	8004358 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2290      	movs	r2, #144	@ 0x90
 8004348:	2110      	movs	r1, #16
 800434a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	228c      	movs	r2, #140	@ 0x8c
 8004350:	2120      	movs	r1, #32
 8004352:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e050      	b.n	80043fa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d019      	beq.n	8004394 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004360:	f3ef 8310 	mrs	r3, PRIMASK
 8004364:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004368:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800436a:	2301      	movs	r3, #1
 800436c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800436e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004370:	f383 8810 	msr	PRIMASK, r3
}
 8004374:	46c0      	nop			@ (mov r8, r8)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2180      	movs	r1, #128	@ 0x80
 8004382:	0049      	lsls	r1, r1, #1
 8004384:	430a      	orrs	r2, r1
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800438a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800438c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438e:	f383 8810 	msr	PRIMASK, r3
}
 8004392:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004394:	f3ef 8310 	mrs	r3, PRIMASK
 8004398:	613b      	str	r3, [r7, #16]
  return(result);
 800439a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800439e:	2301      	movs	r3, #1
 80043a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f383 8810 	msr	PRIMASK, r3
}
 80043a8:	46c0      	nop			@ (mov r8, r8)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2101      	movs	r1, #1
 80043b6:	430a      	orrs	r2, r1
 80043b8:	609a      	str	r2, [r3, #8]
 80043ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	f383 8810 	msr	PRIMASK, r3
}
 80043c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043c6:	f3ef 8310 	mrs	r3, PRIMASK
 80043ca:	61fb      	str	r3, [r7, #28]
  return(result);
 80043cc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80043d0:	2301      	movs	r3, #1
 80043d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	f383 8810 	msr	PRIMASK, r3
}
 80043da:	46c0      	nop			@ (mov r8, r8)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2140      	movs	r1, #64	@ 0x40
 80043e8:	430a      	orrs	r2, r1
 80043ea:	609a      	str	r2, [r3, #8]
 80043ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f2:	f383 8810 	msr	PRIMASK, r3
}
 80043f6:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	0018      	movs	r0, r3
 80043fc:	46bd      	mov	sp, r7
 80043fe:	b010      	add	sp, #64	@ 0x40
 8004400:	bd80      	pop	{r7, pc}
 8004402:	46c0      	nop			@ (mov r8, r8)
 8004404:	0800455d 	.word	0x0800455d
 8004408:	0800468d 	.word	0x0800468d
 800440c:	080046cf 	.word	0x080046cf

08004410 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08a      	sub	sp, #40	@ 0x28
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004418:	f3ef 8310 	mrs	r3, PRIMASK
 800441c:	60bb      	str	r3, [r7, #8]
  return(result);
 800441e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004420:	627b      	str	r3, [r7, #36]	@ 0x24
 8004422:	2301      	movs	r3, #1
 8004424:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f383 8810 	msr	PRIMASK, r3
}
 800442c:	46c0      	nop			@ (mov r8, r8)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	21c0      	movs	r1, #192	@ 0xc0
 800443a:	438a      	bics	r2, r1
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004440:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f383 8810 	msr	PRIMASK, r3
}
 8004448:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800444a:	f3ef 8310 	mrs	r3, PRIMASK
 800444e:	617b      	str	r3, [r7, #20]
  return(result);
 8004450:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004452:	623b      	str	r3, [r7, #32]
 8004454:	2301      	movs	r3, #1
 8004456:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	f383 8810 	msr	PRIMASK, r3
}
 800445e:	46c0      	nop			@ (mov r8, r8)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4908      	ldr	r1, [pc, #32]	@ (800448c <UART_EndTxTransfer+0x7c>)
 800446c:	400a      	ands	r2, r1
 800446e:	609a      	str	r2, [r3, #8]
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f383 8810 	msr	PRIMASK, r3
}
 800447a:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2288      	movs	r2, #136	@ 0x88
 8004480:	2120      	movs	r1, #32
 8004482:	5099      	str	r1, [r3, r2]
}
 8004484:	46c0      	nop			@ (mov r8, r8)
 8004486:	46bd      	mov	sp, r7
 8004488:	b00a      	add	sp, #40	@ 0x28
 800448a:	bd80      	pop	{r7, pc}
 800448c:	ff7fffff 	.word	0xff7fffff

08004490 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08e      	sub	sp, #56	@ 0x38
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004498:	f3ef 8310 	mrs	r3, PRIMASK
 800449c:	617b      	str	r3, [r7, #20]
  return(result);
 800449e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80044a2:	2301      	movs	r3, #1
 80044a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	f383 8810 	msr	PRIMASK, r3
}
 80044ac:	46c0      	nop			@ (mov r8, r8)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4926      	ldr	r1, [pc, #152]	@ (8004554 <UART_EndRxTransfer+0xc4>)
 80044ba:	400a      	ands	r2, r1
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f383 8810 	msr	PRIMASK, r3
}
 80044c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80044ca:	f3ef 8310 	mrs	r3, PRIMASK
 80044ce:	623b      	str	r3, [r7, #32]
  return(result);
 80044d0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80044d4:	2301      	movs	r3, #1
 80044d6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044da:	f383 8810 	msr	PRIMASK, r3
}
 80044de:	46c0      	nop			@ (mov r8, r8)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689a      	ldr	r2, [r3, #8]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	491b      	ldr	r1, [pc, #108]	@ (8004558 <UART_EndRxTransfer+0xc8>)
 80044ec:	400a      	ands	r2, r1
 80044ee:	609a      	str	r2, [r3, #8]
 80044f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f6:	f383 8810 	msr	PRIMASK, r3
}
 80044fa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004500:	2b01      	cmp	r3, #1
 8004502:	d118      	bne.n	8004536 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004504:	f3ef 8310 	mrs	r3, PRIMASK
 8004508:	60bb      	str	r3, [r7, #8]
  return(result);
 800450a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800450c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800450e:	2301      	movs	r3, #1
 8004510:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f383 8810 	msr	PRIMASK, r3
}
 8004518:	46c0      	nop			@ (mov r8, r8)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2110      	movs	r1, #16
 8004526:	438a      	bics	r2, r1
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800452c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f383 8810 	msr	PRIMASK, r3
}
 8004534:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	228c      	movs	r2, #140	@ 0x8c
 800453a:	2120      	movs	r1, #32
 800453c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800454a:	46c0      	nop			@ (mov r8, r8)
 800454c:	46bd      	mov	sp, r7
 800454e:	b00e      	add	sp, #56	@ 0x38
 8004550:	bd80      	pop	{r7, pc}
 8004552:	46c0      	nop			@ (mov r8, r8)
 8004554:	fffffedf 	.word	0xfffffedf
 8004558:	effffffe 	.word	0xeffffffe

0800455c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b094      	sub	sp, #80	@ 0x50
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004568:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2220      	movs	r2, #32
 8004572:	4013      	ands	r3, r2
 8004574:	d16f      	bne.n	8004656 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004576:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004578:	225e      	movs	r2, #94	@ 0x5e
 800457a:	2100      	movs	r1, #0
 800457c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800457e:	f3ef 8310 	mrs	r3, PRIMASK
 8004582:	61bb      	str	r3, [r7, #24]
  return(result);
 8004584:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004586:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004588:	2301      	movs	r3, #1
 800458a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f383 8810 	msr	PRIMASK, r3
}
 8004592:	46c0      	nop			@ (mov r8, r8)
 8004594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	493a      	ldr	r1, [pc, #232]	@ (8004688 <UART_DMAReceiveCplt+0x12c>)
 80045a0:	400a      	ands	r2, r1
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	f383 8810 	msr	PRIMASK, r3
}
 80045ae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80045b0:	f3ef 8310 	mrs	r3, PRIMASK
 80045b4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ba:	2301      	movs	r3, #1
 80045bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c0:	f383 8810 	msr	PRIMASK, r3
}
 80045c4:	46c0      	nop			@ (mov r8, r8)
 80045c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2101      	movs	r1, #1
 80045d2:	438a      	bics	r2, r1
 80045d4:	609a      	str	r2, [r3, #8]
 80045d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045dc:	f383 8810 	msr	PRIMASK, r3
}
 80045e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80045e2:	f3ef 8310 	mrs	r3, PRIMASK
 80045e6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80045e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80045ec:	2301      	movs	r3, #1
 80045ee:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f2:	f383 8810 	msr	PRIMASK, r3
}
 80045f6:	46c0      	nop			@ (mov r8, r8)
 80045f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2140      	movs	r1, #64	@ 0x40
 8004604:	438a      	bics	r2, r1
 8004606:	609a      	str	r2, [r3, #8]
 8004608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800460a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800460c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800460e:	f383 8810 	msr	PRIMASK, r3
}
 8004612:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004616:	228c      	movs	r2, #140	@ 0x8c
 8004618:	2120      	movs	r1, #32
 800461a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800461c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800461e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004620:	2b01      	cmp	r3, #1
 8004622:	d118      	bne.n	8004656 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004624:	f3ef 8310 	mrs	r3, PRIMASK
 8004628:	60fb      	str	r3, [r7, #12]
  return(result);
 800462a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800462c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800462e:	2301      	movs	r3, #1
 8004630:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f383 8810 	msr	PRIMASK, r3
}
 8004638:	46c0      	nop			@ (mov r8, r8)
 800463a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2110      	movs	r1, #16
 8004646:	438a      	bics	r2, r1
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800464c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f383 8810 	msr	PRIMASK, r3
}
 8004654:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004656:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004658:	2200      	movs	r2, #0
 800465a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800465c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800465e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004660:	2b01      	cmp	r3, #1
 8004662:	d108      	bne.n	8004676 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004664:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004666:	225c      	movs	r2, #92	@ 0x5c
 8004668:	5a9a      	ldrh	r2, [r3, r2]
 800466a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800466c:	0011      	movs	r1, r2
 800466e:	0018      	movs	r0, r3
 8004670:	f7ff fad1 	bl	8003c16 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004674:	e003      	b.n	800467e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8004676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004678:	0018      	movs	r0, r3
 800467a:	f7ff fab4 	bl	8003be6 <HAL_UART_RxCpltCallback>
}
 800467e:	46c0      	nop			@ (mov r8, r8)
 8004680:	46bd      	mov	sp, r7
 8004682:	b014      	add	sp, #80	@ 0x50
 8004684:	bd80      	pop	{r7, pc}
 8004686:	46c0      	nop			@ (mov r8, r8)
 8004688:	fffffeff 	.word	0xfffffeff

0800468c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004698:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2201      	movs	r2, #1
 800469e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d10a      	bne.n	80046be <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	225c      	movs	r2, #92	@ 0x5c
 80046ac:	5a9b      	ldrh	r3, [r3, r2]
 80046ae:	085b      	lsrs	r3, r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	0011      	movs	r1, r2
 80046b6:	0018      	movs	r0, r3
 80046b8:	f7ff faad 	bl	8003c16 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80046bc:	e003      	b.n	80046c6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	0018      	movs	r0, r3
 80046c2:	f7ff fa98 	bl	8003bf6 <HAL_UART_RxHalfCpltCallback>
}
 80046c6:	46c0      	nop			@ (mov r8, r8)
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b004      	add	sp, #16
 80046cc:	bd80      	pop	{r7, pc}

080046ce <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b086      	sub	sp, #24
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046da:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2288      	movs	r2, #136	@ 0x88
 80046e0:	589b      	ldr	r3, [r3, r2]
 80046e2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	228c      	movs	r2, #140	@ 0x8c
 80046e8:	589b      	ldr	r3, [r3, r2]
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2280      	movs	r2, #128	@ 0x80
 80046f4:	4013      	ands	r3, r2
 80046f6:	2b80      	cmp	r3, #128	@ 0x80
 80046f8:	d10a      	bne.n	8004710 <UART_DMAError+0x42>
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	2b21      	cmp	r3, #33	@ 0x21
 80046fe:	d107      	bne.n	8004710 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	2256      	movs	r2, #86	@ 0x56
 8004704:	2100      	movs	r1, #0
 8004706:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	0018      	movs	r0, r3
 800470c:	f7ff fe80 	bl	8004410 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2240      	movs	r2, #64	@ 0x40
 8004718:	4013      	ands	r3, r2
 800471a:	2b40      	cmp	r3, #64	@ 0x40
 800471c:	d10a      	bne.n	8004734 <UART_DMAError+0x66>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b22      	cmp	r3, #34	@ 0x22
 8004722:	d107      	bne.n	8004734 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	225e      	movs	r2, #94	@ 0x5e
 8004728:	2100      	movs	r1, #0
 800472a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	0018      	movs	r0, r3
 8004730:	f7ff feae 	bl	8004490 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2290      	movs	r2, #144	@ 0x90
 8004738:	589b      	ldr	r3, [r3, r2]
 800473a:	2210      	movs	r2, #16
 800473c:	431a      	orrs	r2, r3
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2190      	movs	r1, #144	@ 0x90
 8004742:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	0018      	movs	r0, r3
 8004748:	f7ff fa5d 	bl	8003c06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800474c:	46c0      	nop			@ (mov r8, r8)
 800474e:	46bd      	mov	sp, r7
 8004750:	b006      	add	sp, #24
 8004752:	bd80      	pop	{r7, pc}

08004754 <memset>:
 8004754:	0003      	movs	r3, r0
 8004756:	1882      	adds	r2, r0, r2
 8004758:	4293      	cmp	r3, r2
 800475a:	d100      	bne.n	800475e <memset+0xa>
 800475c:	4770      	bx	lr
 800475e:	7019      	strb	r1, [r3, #0]
 8004760:	3301      	adds	r3, #1
 8004762:	e7f9      	b.n	8004758 <memset+0x4>

08004764 <__libc_init_array>:
 8004764:	b570      	push	{r4, r5, r6, lr}
 8004766:	2600      	movs	r6, #0
 8004768:	4c0c      	ldr	r4, [pc, #48]	@ (800479c <__libc_init_array+0x38>)
 800476a:	4d0d      	ldr	r5, [pc, #52]	@ (80047a0 <__libc_init_array+0x3c>)
 800476c:	1b64      	subs	r4, r4, r5
 800476e:	10a4      	asrs	r4, r4, #2
 8004770:	42a6      	cmp	r6, r4
 8004772:	d109      	bne.n	8004788 <__libc_init_array+0x24>
 8004774:	2600      	movs	r6, #0
 8004776:	f000 f819 	bl	80047ac <_init>
 800477a:	4c0a      	ldr	r4, [pc, #40]	@ (80047a4 <__libc_init_array+0x40>)
 800477c:	4d0a      	ldr	r5, [pc, #40]	@ (80047a8 <__libc_init_array+0x44>)
 800477e:	1b64      	subs	r4, r4, r5
 8004780:	10a4      	asrs	r4, r4, #2
 8004782:	42a6      	cmp	r6, r4
 8004784:	d105      	bne.n	8004792 <__libc_init_array+0x2e>
 8004786:	bd70      	pop	{r4, r5, r6, pc}
 8004788:	00b3      	lsls	r3, r6, #2
 800478a:	58eb      	ldr	r3, [r5, r3]
 800478c:	4798      	blx	r3
 800478e:	3601      	adds	r6, #1
 8004790:	e7ee      	b.n	8004770 <__libc_init_array+0xc>
 8004792:	00b3      	lsls	r3, r6, #2
 8004794:	58eb      	ldr	r3, [r5, r3]
 8004796:	4798      	blx	r3
 8004798:	3601      	adds	r6, #1
 800479a:	e7f2      	b.n	8004782 <__libc_init_array+0x1e>
 800479c:	0800483c 	.word	0x0800483c
 80047a0:	0800483c 	.word	0x0800483c
 80047a4:	08004840 	.word	0x08004840
 80047a8:	0800483c 	.word	0x0800483c

080047ac <_init>:
 80047ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ae:	46c0      	nop			@ (mov r8, r8)
 80047b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b2:	bc08      	pop	{r3}
 80047b4:	469e      	mov	lr, r3
 80047b6:	4770      	bx	lr

080047b8 <_fini>:
 80047b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ba:	46c0      	nop			@ (mov r8, r8)
 80047bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047be:	bc08      	pop	{r3}
 80047c0:	469e      	mov	lr, r3
 80047c2:	4770      	bx	lr
