
odometry-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000475c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800481c  0800481c  0000581c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004894  08004894  00006090  2**0
                  CONTENTS
  4 .ARM          00000000  08004894  08004894  00006090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004894  08004894  00006090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004894  08004894  00005894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004898  08004898  00005898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0800489c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000090  0800492c  00006090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  0800492c  0000627c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011da5  00000000  00000000  000060b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000232f  00000000  00000000  00017e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  0001a190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cab  00000000  00000000  0001b168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014464  00000000  00000000  0001be13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014293  00000000  00000000  00030277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081835  00000000  00000000  0004450a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5d3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a50  00000000  00000000  000c5d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000c97d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000090 	.word	0x20000090
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004804 	.word	0x08004804

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000094 	.word	0x20000094
 8000104:	08004804 	.word	0x08004804

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <readCounter>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint64_t readCounter()
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  return (counter*65535) + TIM3->CNT;
 80003f8:	4b08      	ldr	r3, [pc, #32]	@ (800041c <readCounter+0x28>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	0013      	movs	r3, r2
 80003fe:	041b      	lsls	r3, r3, #16
 8000400:	1a9a      	subs	r2, r3, r2
 8000402:	4b07      	ldr	r3, [pc, #28]	@ (8000420 <readCounter+0x2c>)
 8000404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000406:	18d3      	adds	r3, r2, r3
 8000408:	0018      	movs	r0, r3
 800040a:	2300      	movs	r3, #0
 800040c:	0019      	movs	r1, r3
 800040e:	0002      	movs	r2, r0
 8000410:	000b      	movs	r3, r1
}
 8000412:	0010      	movs	r0, r2
 8000414:	0019      	movs	r1, r3
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			@ (mov r8, r8)
 800041c:	2000025c 	.word	0x2000025c
 8000420:	40000400 	.word	0x40000400

08000424 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
    if (htim == &htim3){
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	4b06      	ldr	r3, [pc, #24]	@ (8000448 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000430:	429a      	cmp	r2, r3
 8000432:	d104      	bne.n	800043e <HAL_TIM_PeriodElapsedCallback+0x1a>
        counter++;
 8000434:	4b05      	ldr	r3, [pc, #20]	@ (800044c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	1c5a      	adds	r2, r3, #1
 800043a:	4b04      	ldr	r3, [pc, #16]	@ (800044c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800043c:	601a      	str	r2, [r3, #0]
    }
}
 800043e:	46c0      	nop			@ (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	b002      	add	sp, #8
 8000444:	bd80      	pop	{r7, pc}
 8000446:	46c0      	nop			@ (mov r8, r8)
 8000448:	20000100 	.word	0x20000100
 800044c:	2000025c 	.word	0x2000025c

08000450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000452:	b08d      	sub	sp, #52	@ 0x34
 8000454:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000456:	f000 fe5a 	bl	800110e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045a:	f000 fa0f 	bl	800087c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800045e:	f000 fb39 	bl	8000ad4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000462:	f000 fb19 	bl	8000a98 <MX_DMA_Init>
  MX_I2C1_Init();
 8000466:	f000 fa4d 	bl	8000904 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800046a:	f000 fae1 	bl	8000a30 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800046e:	f000 fa89 	bl	8000984 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000472:	4b97      	ldr	r3, [pc, #604]	@ (80006d0 <main+0x280>)
 8000474:	0018      	movs	r0, r3
 8000476:	f002 feb5 	bl	80031e4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t AS5600_ADDR = 0x36 << 1;
 800047a:	1dbb      	adds	r3, r7, #6
 800047c:	226c      	movs	r2, #108	@ 0x6c
 800047e:	801a      	strh	r2, [r3, #0]
  uint8_t ANGLE_ADDR = 0x0E;
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	220e      	movs	r2, #14
 8000484:	701a      	strb	r2, [r3, #0]
  uint8_t ID;

  uint64_t d_pcounter, Ltika_pcounter;
  d_pcounter = Ltika_pcounter = readCounter();
 8000486:	f7ff ffb5 	bl	80003f4 <readCounter>
 800048a:	0002      	movs	r2, r0
 800048c:	000b      	movs	r3, r1
 800048e:	60ba      	str	r2, [r7, #8]
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	68ba      	ldr	r2, [r7, #8]
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	613a      	str	r2, [r7, #16]
 8000498:	617b      	str	r3, [r7, #20]

  if(readID() < 2){
 800049a:	f000 fc55 	bl	8000d48 <readID>
 800049e:	0003      	movs	r3, r0
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d830      	bhi.n	8000506 <main+0xb6>
	  ID = readID();//自身のID
 80004a4:	1d7e      	adds	r6, r7, #5
 80004a6:	f000 fc4f 	bl	8000d48 <readID>
 80004aa:	0003      	movs	r3, r0
 80004ac:	7033      	strb	r3, [r6, #0]
	    	Ltika_pcounter = readCounter();
		  }else{}
	  }
  }

  HAL_UART_Receive_DMA(&huart2,rxBufB,128);
 80004ae:	4989      	ldr	r1, [pc, #548]	@ (80006d4 <main+0x284>)
 80004b0:	4b89      	ldr	r3, [pc, #548]	@ (80006d8 <main+0x288>)
 80004b2:	2280      	movs	r2, #128	@ 0x80
 80004b4:	0018      	movs	r0, r3
 80004b6:	f003 fb6b 	bl	8003b90 <HAL_UART_Receive_DMA>

  HAL_I2C_Master_Transmit(&hi2c1, AS5600_ADDR, &ANGLE_ADDR, 1, 10);
 80004ba:	1d3a      	adds	r2, r7, #4
 80004bc:	1dbb      	adds	r3, r7, #6
 80004be:	8819      	ldrh	r1, [r3, #0]
 80004c0:	4886      	ldr	r0, [pc, #536]	@ (80006dc <main+0x28c>)
 80004c2:	230a      	movs	r3, #10
 80004c4:	9300      	str	r3, [sp, #0]
 80004c6:	2301      	movs	r3, #1
 80004c8:	f001 fc36 	bl	8001d38 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, AS5600_ADDR, rxBufA, 2, 10);
 80004cc:	4a84      	ldr	r2, [pc, #528]	@ (80006e0 <main+0x290>)
 80004ce:	1dbb      	adds	r3, r7, #6
 80004d0:	8819      	ldrh	r1, [r3, #0]
 80004d2:	4882      	ldr	r0, [pc, #520]	@ (80006dc <main+0x28c>)
 80004d4:	230a      	movs	r3, #10
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	2302      	movs	r3, #2
 80004da:	f001 fd57 	bl	8001f8c <HAL_I2C_Master_Receive>

  pAngle = rxBufA[0]*256 + rxBufA[1];
 80004de:	4b80      	ldr	r3, [pc, #512]	@ (80006e0 <main+0x290>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	021b      	lsls	r3, r3, #8
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	4a7e      	ldr	r2, [pc, #504]	@ (80006e0 <main+0x290>)
 80004e8:	7852      	ldrb	r2, [r2, #1]
 80004ea:	189b      	adds	r3, r3, r2
 80004ec:	b29a      	uxth	r2, r3
 80004ee:	4b7d      	ldr	r3, [pc, #500]	@ (80006e4 <main+0x294>)
 80004f0:	801a      	strh	r2, [r3, #0]
  ptotalAng = firstAng = pAngle;
 80004f2:	4b7c      	ldr	r3, [pc, #496]	@ (80006e4 <main+0x294>)
 80004f4:	881a      	ldrh	r2, [r3, #0]
 80004f6:	4b7c      	ldr	r3, [pc, #496]	@ (80006e8 <main+0x298>)
 80004f8:	801a      	strh	r2, [r3, #0]
 80004fa:	4b7b      	ldr	r3, [pc, #492]	@ (80006e8 <main+0x298>)
 80004fc:	881b      	ldrh	r3, [r3, #0]
 80004fe:	001a      	movs	r2, r3
 8000500:	4b7a      	ldr	r3, [pc, #488]	@ (80006ec <main+0x29c>)
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	e01a      	b.n	800053c <main+0xec>
		  if(readCounter() - Ltika_pcounter > 100000){
 8000506:	f7ff ff75 	bl	80003f4 <readCounter>
 800050a:	68ba      	ldr	r2, [r7, #8]
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	1a80      	subs	r0, r0, r2
 8000510:	4199      	sbcs	r1, r3
 8000512:	0002      	movs	r2, r0
 8000514:	000b      	movs	r3, r1
 8000516:	2b00      	cmp	r3, #0
 8000518:	d103      	bne.n	8000522 <main+0xd2>
 800051a:	d1f4      	bne.n	8000506 <main+0xb6>
 800051c:	4974      	ldr	r1, [pc, #464]	@ (80006f0 <main+0x2a0>)
 800051e:	428a      	cmp	r2, r1
 8000520:	d9f1      	bls.n	8000506 <main+0xb6>
		  	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000522:	23a0      	movs	r3, #160	@ 0xa0
 8000524:	05db      	lsls	r3, r3, #23
 8000526:	2110      	movs	r1, #16
 8000528:	0018      	movs	r0, r3
 800052a:	f001 fb43 	bl	8001bb4 <HAL_GPIO_TogglePin>
	    	Ltika_pcounter = readCounter();
 800052e:	f7ff ff61 	bl	80003f4 <readCounter>
 8000532:	0002      	movs	r2, r0
 8000534:	000b      	movs	r3, r1
 8000536:	60ba      	str	r2, [r7, #8]
 8000538:	60fb      	str	r3, [r7, #12]
		  if(readCounter() - Ltika_pcounter > 100000){
 800053a:	e7e4      	b.n	8000506 <main+0xb6>

  while (1)
  {
	u_counter = readCounter();
 800053c:	f7ff ff5a 	bl	80003f4 <readCounter>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	496b      	ldr	r1, [pc, #428]	@ (80006f4 <main+0x2a4>)
 8000546:	600a      	str	r2, [r1, #0]
 8000548:	604b      	str	r3, [r1, #4]

	HAL_I2C_Master_Transmit(&hi2c1, AS5600_ADDR, &ANGLE_ADDR, 1, 10);
 800054a:	1d3a      	adds	r2, r7, #4
 800054c:	1dbb      	adds	r3, r7, #6
 800054e:	8819      	ldrh	r1, [r3, #0]
 8000550:	4862      	ldr	r0, [pc, #392]	@ (80006dc <main+0x28c>)
 8000552:	230a      	movs	r3, #10
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2301      	movs	r3, #1
 8000558:	f001 fbee 	bl	8001d38 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, AS5600_ADDR, rxBufA, 2, 10);
 800055c:	4a60      	ldr	r2, [pc, #384]	@ (80006e0 <main+0x290>)
 800055e:	1dbb      	adds	r3, r7, #6
 8000560:	8819      	ldrh	r1, [r3, #0]
 8000562:	485e      	ldr	r0, [pc, #376]	@ (80006dc <main+0x28c>)
 8000564:	230a      	movs	r3, #10
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2302      	movs	r3, #2
 800056a:	f001 fd0f 	bl	8001f8c <HAL_I2C_Master_Receive>

	dtime = readCounter() - d_pcounter;
 800056e:	f7ff ff41 	bl	80003f4 <readCounter>
 8000572:	0002      	movs	r2, r0
 8000574:	000b      	movs	r3, r1
 8000576:	b291      	uxth	r1, r2
 8000578:	693a      	ldr	r2, [r7, #16]
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	1c13      	adds	r3, r2, #0
 800057e:	b29b      	uxth	r3, r3
 8000580:	1acb      	subs	r3, r1, r3
 8000582:	b29a      	uxth	r2, r3
 8000584:	4b5c      	ldr	r3, [pc, #368]	@ (80006f8 <main+0x2a8>)
 8000586:	801a      	strh	r2, [r3, #0]
	d_pcounter += dtime;
 8000588:	4b5b      	ldr	r3, [pc, #364]	@ (80006f8 <main+0x2a8>)
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	001c      	movs	r4, r3
 800058e:	2300      	movs	r3, #0
 8000590:	001d      	movs	r5, r3
 8000592:	693a      	ldr	r2, [r7, #16]
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	1912      	adds	r2, r2, r4
 8000598:	416b      	adcs	r3, r5
 800059a:	613a      	str	r2, [r7, #16]
 800059c:	617b      	str	r3, [r7, #20]

	Angle = rxBufA[0]*256 + rxBufA[1];
 800059e:	4b50      	ldr	r3, [pc, #320]	@ (80006e0 <main+0x290>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	021b      	lsls	r3, r3, #8
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	4a4e      	ldr	r2, [pc, #312]	@ (80006e0 <main+0x290>)
 80005a8:	7852      	ldrb	r2, [r2, #1]
 80005aa:	189b      	adds	r3, r3, r2
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	4b53      	ldr	r3, [pc, #332]	@ (80006fc <main+0x2ac>)
 80005b0:	801a      	strh	r2, [r3, #0]

	if(Angle-pAngle>0 && abs(Angle-pAngle)<3000){
 80005b2:	4b52      	ldr	r3, [pc, #328]	@ (80006fc <main+0x2ac>)
 80005b4:	881b      	ldrh	r3, [r3, #0]
 80005b6:	001a      	movs	r2, r3
 80005b8:	4b4a      	ldr	r3, [pc, #296]	@ (80006e4 <main+0x294>)
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dd1d      	ble.n	80005fe <main+0x1ae>
 80005c2:	4b4e      	ldr	r3, [pc, #312]	@ (80006fc <main+0x2ac>)
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	001a      	movs	r2, r3
 80005c8:	4b46      	ldr	r3, [pc, #280]	@ (80006e4 <main+0x294>)
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	4a4c      	ldr	r2, [pc, #304]	@ (8000700 <main+0x2b0>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	db14      	blt.n	80005fe <main+0x1ae>
 80005d4:	4b49      	ldr	r3, [pc, #292]	@ (80006fc <main+0x2ac>)
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	001a      	movs	r2, r3
 80005da:	4b42      	ldr	r3, [pc, #264]	@ (80006e4 <main+0x294>)
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	4a48      	ldr	r2, [pc, #288]	@ (8000704 <main+0x2b4>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	dc0b      	bgt.n	80005fe <main+0x1ae>
		totalAng = ptotalAng + (Angle-pAngle);
 80005e6:	4b45      	ldr	r3, [pc, #276]	@ (80006fc <main+0x2ac>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	001a      	movs	r2, r3
 80005ec:	4b3d      	ldr	r3, [pc, #244]	@ (80006e4 <main+0x294>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	1ad2      	subs	r2, r2, r3
 80005f2:	4b3e      	ldr	r3, [pc, #248]	@ (80006ec <main+0x29c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	18d2      	adds	r2, r2, r3
 80005f8:	4b43      	ldr	r3, [pc, #268]	@ (8000708 <main+0x2b8>)
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	e08e      	b.n	800071c <main+0x2cc>
	}else if(Angle-pAngle<0 && abs(Angle-pAngle)<3000){
 80005fe:	4b3f      	ldr	r3, [pc, #252]	@ (80006fc <main+0x2ac>)
 8000600:	881b      	ldrh	r3, [r3, #0]
 8000602:	001a      	movs	r2, r3
 8000604:	4b37      	ldr	r3, [pc, #220]	@ (80006e4 <main+0x294>)
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	d51d      	bpl.n	8000648 <main+0x1f8>
 800060c:	4b3b      	ldr	r3, [pc, #236]	@ (80006fc <main+0x2ac>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	001a      	movs	r2, r3
 8000612:	4b34      	ldr	r3, [pc, #208]	@ (80006e4 <main+0x294>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	4a39      	ldr	r2, [pc, #228]	@ (8000700 <main+0x2b0>)
 800061a:	4293      	cmp	r3, r2
 800061c:	db14      	blt.n	8000648 <main+0x1f8>
 800061e:	4b37      	ldr	r3, [pc, #220]	@ (80006fc <main+0x2ac>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	001a      	movs	r2, r3
 8000624:	4b2f      	ldr	r3, [pc, #188]	@ (80006e4 <main+0x294>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	4a36      	ldr	r2, [pc, #216]	@ (8000704 <main+0x2b4>)
 800062c:	4293      	cmp	r3, r2
 800062e:	dc0b      	bgt.n	8000648 <main+0x1f8>
		totalAng = ptotalAng + (Angle-pAngle);
 8000630:	4b32      	ldr	r3, [pc, #200]	@ (80006fc <main+0x2ac>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	001a      	movs	r2, r3
 8000636:	4b2b      	ldr	r3, [pc, #172]	@ (80006e4 <main+0x294>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	1ad2      	subs	r2, r2, r3
 800063c:	4b2b      	ldr	r3, [pc, #172]	@ (80006ec <main+0x29c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	18d2      	adds	r2, r2, r3
 8000642:	4b31      	ldr	r3, [pc, #196]	@ (8000708 <main+0x2b8>)
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	e069      	b.n	800071c <main+0x2cc>
	}else if(Angle-pAngle>0 && abs(Angle-pAngle)>3000){
 8000648:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <main+0x2ac>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	001a      	movs	r2, r3
 800064e:	4b25      	ldr	r3, [pc, #148]	@ (80006e4 <main+0x294>)
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	2b00      	cmp	r3, #0
 8000656:	dd19      	ble.n	800068c <main+0x23c>
 8000658:	4b28      	ldr	r3, [pc, #160]	@ (80006fc <main+0x2ac>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	001a      	movs	r2, r3
 800065e:	4b21      	ldr	r3, [pc, #132]	@ (80006e4 <main+0x294>)
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	17da      	asrs	r2, r3, #31
 8000666:	189b      	adds	r3, r3, r2
 8000668:	4053      	eors	r3, r2
 800066a:	4a28      	ldr	r2, [pc, #160]	@ (800070c <main+0x2bc>)
 800066c:	4293      	cmp	r3, r2
 800066e:	dd0d      	ble.n	800068c <main+0x23c>
		totalAng = ptotalAng - ((4095-Angle)+pAngle);
 8000670:	4b1e      	ldr	r3, [pc, #120]	@ (80006ec <main+0x29c>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	4b21      	ldr	r3, [pc, #132]	@ (80006fc <main+0x2ac>)
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	0019      	movs	r1, r3
 800067a:	4b25      	ldr	r3, [pc, #148]	@ (8000710 <main+0x2c0>)
 800067c:	1a5b      	subs	r3, r3, r1
 800067e:	4919      	ldr	r1, [pc, #100]	@ (80006e4 <main+0x294>)
 8000680:	8809      	ldrh	r1, [r1, #0]
 8000682:	185b      	adds	r3, r3, r1
 8000684:	1ad2      	subs	r2, r2, r3
 8000686:	4b20      	ldr	r3, [pc, #128]	@ (8000708 <main+0x2b8>)
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	e047      	b.n	800071c <main+0x2cc>
	}else if(Angle-pAngle<0 && abs(Angle-pAngle)>3000){
 800068c:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <main+0x2ac>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	001a      	movs	r2, r3
 8000692:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <main+0x294>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	1ad3      	subs	r3, r2, r3
 8000698:	d53c      	bpl.n	8000714 <main+0x2c4>
 800069a:	4b18      	ldr	r3, [pc, #96]	@ (80006fc <main+0x2ac>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	001a      	movs	r2, r3
 80006a0:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <main+0x294>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	17da      	asrs	r2, r3, #31
 80006a8:	189b      	adds	r3, r3, r2
 80006aa:	4053      	eors	r3, r2
 80006ac:	4a17      	ldr	r2, [pc, #92]	@ (800070c <main+0x2bc>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	dd30      	ble.n	8000714 <main+0x2c4>
		totalAng = ptotalAng + Angle + (4095-pAngle);
 80006b2:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <main+0x2ac>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	001a      	movs	r2, r3
 80006b8:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <main+0x29c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	18d2      	adds	r2, r2, r3
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <main+0x294>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	0019      	movs	r1, r3
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <main+0x2c0>)
 80006c6:	1a5b      	subs	r3, r3, r1
 80006c8:	18d2      	adds	r2, r2, r3
 80006ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <main+0x2b8>)
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	e025      	b.n	800071c <main+0x2cc>
 80006d0:	20000100 	.word	0x20000100
 80006d4:	20000000 	.word	0x20000000
 80006d8:	2000014c 	.word	0x2000014c
 80006dc:	200000ac 	.word	0x200000ac
 80006e0:	2000023c 	.word	0x2000023c
 80006e4:	20000258 	.word	0x20000258
 80006e8:	20000254 	.word	0x20000254
 80006ec:	20000250 	.word	0x20000250
 80006f0:	000186a0 	.word	0x000186a0
 80006f4:	20000260 	.word	0x20000260
 80006f8:	20000268 	.word	0x20000268
 80006fc:	20000256 	.word	0x20000256
 8000700:	fffff449 	.word	0xfffff449
 8000704:	00000bb7 	.word	0x00000bb7
 8000708:	2000024c 	.word	0x2000024c
 800070c:	00000bb8 	.word	0x00000bb8
 8000710:	00000fff 	.word	0x00000fff
	}else{
		totalAng = ptotalAng;
 8000714:	4b46      	ldr	r3, [pc, #280]	@ (8000830 <main+0x3e0>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b46      	ldr	r3, [pc, #280]	@ (8000834 <main+0x3e4>)
 800071a:	601a      	str	r2, [r3, #0]
	}

	ptotalAng = totalAng;
 800071c:	4b45      	ldr	r3, [pc, #276]	@ (8000834 <main+0x3e4>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b43      	ldr	r3, [pc, #268]	@ (8000830 <main+0x3e0>)
 8000722:	601a      	str	r2, [r3, #0]
	pAngle = Angle;
 8000724:	4b44      	ldr	r3, [pc, #272]	@ (8000838 <main+0x3e8>)
 8000726:	881a      	ldrh	r2, [r3, #0]
 8000728:	4b44      	ldr	r3, [pc, #272]	@ (800083c <main+0x3ec>)
 800072a:	801a      	strh	r2, [r3, #0]

	position = (totalAng - firstAng)*1000/25129;
 800072c:	4b41      	ldr	r3, [pc, #260]	@ (8000834 <main+0x3e4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a43      	ldr	r2, [pc, #268]	@ (8000840 <main+0x3f0>)
 8000732:	8812      	ldrh	r2, [r2, #0]
 8000734:	1a9a      	subs	r2, r3, r2
 8000736:	0013      	movs	r3, r2
 8000738:	015b      	lsls	r3, r3, #5
 800073a:	1a9b      	subs	r3, r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	189b      	adds	r3, r3, r2
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	4940      	ldr	r1, [pc, #256]	@ (8000844 <main+0x3f4>)
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff fd69 	bl	800021c <__divsi3>
 800074a:	0003      	movs	r3, r0
 800074c:	b21a      	sxth	r2, r3
 800074e:	4b3e      	ldr	r3, [pc, #248]	@ (8000848 <main+0x3f8>)
 8000750:	801a      	strh	r2, [r3, #0]


	readBuf(&huart2, rxBufB, 128, &rx_check, ID, &p_wrtptB, &p_rdptB, &stop_counter, &error_counter);
 8000752:	4a3e      	ldr	r2, [pc, #248]	@ (800084c <main+0x3fc>)
 8000754:	493e      	ldr	r1, [pc, #248]	@ (8000850 <main+0x400>)
 8000756:	483f      	ldr	r0, [pc, #252]	@ (8000854 <main+0x404>)
 8000758:	4b3f      	ldr	r3, [pc, #252]	@ (8000858 <main+0x408>)
 800075a:	9304      	str	r3, [sp, #16]
 800075c:	4b3f      	ldr	r3, [pc, #252]	@ (800085c <main+0x40c>)
 800075e:	9303      	str	r3, [sp, #12]
 8000760:	4b3f      	ldr	r3, [pc, #252]	@ (8000860 <main+0x410>)
 8000762:	9302      	str	r3, [sp, #8]
 8000764:	4b3f      	ldr	r3, [pc, #252]	@ (8000864 <main+0x414>)
 8000766:	9301      	str	r3, [sp, #4]
 8000768:	1d7b      	adds	r3, r7, #5
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	0013      	movs	r3, r2
 8000770:	2280      	movs	r2, #128	@ 0x80
 8000772:	f000 fa11 	bl	8000b98 <readBuf>

	if(rx_check == 1){buf_pcounter = readCounter(); rx_check = 0; tx_check = 0;}
 8000776:	4b35      	ldr	r3, [pc, #212]	@ (800084c <main+0x3fc>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d10c      	bne.n	8000798 <main+0x348>
 800077e:	f7ff fe39 	bl	80003f4 <readCounter>
 8000782:	0002      	movs	r2, r0
 8000784:	000b      	movs	r3, r1
 8000786:	4938      	ldr	r1, [pc, #224]	@ (8000868 <main+0x418>)
 8000788:	600a      	str	r2, [r1, #0]
 800078a:	604b      	str	r3, [r1, #4]
 800078c:	4b2f      	ldr	r3, [pc, #188]	@ (800084c <main+0x3fc>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
 8000792:	4b36      	ldr	r3, [pc, #216]	@ (800086c <main+0x41c>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]

	if((readCounter() - buf_pcounter) > 500 && tx_check == 0){
 8000798:	f7ff fe2c 	bl	80003f4 <readCounter>
 800079c:	4b32      	ldr	r3, [pc, #200]	@ (8000868 <main+0x418>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	1a80      	subs	r0, r0, r2
 80007a4:	4199      	sbcs	r1, r3
 80007a6:	0002      	movs	r2, r0
 80007a8:	000b      	movs	r3, r1
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d105      	bne.n	80007ba <main+0x36a>
 80007ae:	d000      	beq.n	80007b2 <main+0x362>
 80007b0:	e6c4      	b.n	800053c <main+0xec>
 80007b2:	21fa      	movs	r1, #250	@ 0xfa
 80007b4:	0049      	lsls	r1, r1, #1
 80007b6:	428a      	cmp	r2, r1
 80007b8:	d939      	bls.n	800082e <main+0x3de>
 80007ba:	4b2c      	ldr	r3, [pc, #176]	@ (800086c <main+0x41c>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d000      	beq.n	80007c4 <main+0x374>
 80007c2:	e6bb      	b.n	800053c <main+0xec>
		send_position = position + 20000;
 80007c4:	4b20      	ldr	r3, [pc, #128]	@ (8000848 <main+0x3f8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	5e9b      	ldrsh	r3, [r3, r2]
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	4a28      	ldr	r2, [pc, #160]	@ (8000870 <main+0x420>)
 80007ce:	4694      	mov	ip, r2
 80007d0:	4463      	add	r3, ip
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	4b27      	ldr	r3, [pc, #156]	@ (8000874 <main+0x424>)
 80007d6:	801a      	strh	r2, [r3, #0]
		send_array[0] = 254;
 80007d8:	4b27      	ldr	r3, [pc, #156]	@ (8000878 <main+0x428>)
 80007da:	22fe      	movs	r2, #254	@ 0xfe
 80007dc:	701a      	strb	r2, [r3, #0]
		send_array[1] = send_position % 200;
 80007de:	4b25      	ldr	r3, [pc, #148]	@ (8000874 <main+0x424>)
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	21c8      	movs	r1, #200	@ 0xc8
 80007e4:	0018      	movs	r0, r3
 80007e6:	f7ff fd15 	bl	8000214 <__aeabi_uidivmod>
 80007ea:	000b      	movs	r3, r1
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b21      	ldr	r3, [pc, #132]	@ (8000878 <main+0x428>)
 80007f2:	705a      	strb	r2, [r3, #1]
		send_array[2] = send_position / 200;
 80007f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000874 <main+0x424>)
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	21c8      	movs	r1, #200	@ 0xc8
 80007fa:	0018      	movs	r0, r3
 80007fc:	f7ff fc84 	bl	8000108 <__udivsi3>
 8000800:	0003      	movs	r3, r0
 8000802:	b29b      	uxth	r3, r3
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <main+0x428>)
 8000808:	709a      	strb	r2, [r3, #2]

		if(HAL_UART_Transmit(&huart2, send_array, 3, 1) == HAL_OK){
 800080a:	491b      	ldr	r1, [pc, #108]	@ (8000878 <main+0x428>)
 800080c:	4811      	ldr	r0, [pc, #68]	@ (8000854 <main+0x404>)
 800080e:	2301      	movs	r3, #1
 8000810:	2203      	movs	r2, #3
 8000812:	f003 f919 	bl	8003a48 <HAL_UART_Transmit>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d000      	beq.n	800081c <main+0x3cc>
 800081a:	e68f      	b.n	800053c <main+0xec>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800081c:	23a0      	movs	r3, #160	@ 0xa0
 800081e:	05db      	lsls	r3, r3, #23
 8000820:	2110      	movs	r1, #16
 8000822:	0018      	movs	r0, r3
 8000824:	f001 f9c6 	bl	8001bb4 <HAL_GPIO_TogglePin>
		tx_check = 1;
 8000828:	4b10      	ldr	r3, [pc, #64]	@ (800086c <main+0x41c>)
 800082a:	2201      	movs	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
	u_counter = readCounter();
 800082e:	e685      	b.n	800053c <main+0xec>
 8000830:	20000250 	.word	0x20000250
 8000834:	2000024c 	.word	0x2000024c
 8000838:	20000256 	.word	0x20000256
 800083c:	20000258 	.word	0x20000258
 8000840:	20000254 	.word	0x20000254
 8000844:	00006229 	.word	0x00006229
 8000848:	2000025a 	.word	0x2000025a
 800084c:	20000245 	.word	0x20000245
 8000850:	20000000 	.word	0x20000000
 8000854:	2000014c 	.word	0x2000014c
 8000858:	20000248 	.word	0x20000248
 800085c:	20000246 	.word	0x20000246
 8000860:	20000244 	.word	0x20000244
 8000864:	20000243 	.word	0x20000243
 8000868:	20000270 	.word	0x20000270
 800086c:	20000080 	.word	0x20000080
 8000870:	00004e20 	.word	0x00004e20
 8000874:	20000082 	.word	0x20000082
 8000878:	20000240 	.word	0x20000240

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b08d      	sub	sp, #52	@ 0x34
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	2414      	movs	r4, #20
 8000884:	193b      	adds	r3, r7, r4
 8000886:	0018      	movs	r0, r3
 8000888:	231c      	movs	r3, #28
 800088a:	001a      	movs	r2, r3
 800088c:	2100      	movs	r1, #0
 800088e:	f003 ff8d 	bl	80047ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000892:	003b      	movs	r3, r7
 8000894:	0018      	movs	r0, r3
 8000896:	2314      	movs	r3, #20
 8000898:	001a      	movs	r2, r3
 800089a:	2100      	movs	r1, #0
 800089c:	f003 ff86 	bl	80047ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	2202      	movs	r2, #2
 80008a4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	2280      	movs	r2, #128	@ 0x80
 80008aa:	0052      	lsls	r2, r2, #1
 80008ac:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	2240      	movs	r2, #64	@ 0x40
 80008b8:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	0018      	movs	r0, r3
 80008be:	f001 ffd9 	bl	8002874 <HAL_RCC_OscConfig>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80008c6:	f000 fa90 	bl	8000dea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ca:	003b      	movs	r3, r7
 80008cc:	2207      	movs	r2, #7
 80008ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008d0:	003b      	movs	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008d6:	003b      	movs	r3, r7
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008dc:	003b      	movs	r3, r7
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008e2:	003b      	movs	r3, r7
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008e8:	003b      	movs	r3, r7
 80008ea:	2101      	movs	r1, #1
 80008ec:	0018      	movs	r0, r3
 80008ee:	f002 f9a5 	bl	8002c3c <HAL_RCC_ClockConfig>
 80008f2:	1e03      	subs	r3, r0, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80008f6:	f000 fa78 	bl	8000dea <Error_Handler>
  }
}
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b00d      	add	sp, #52	@ 0x34
 8000900:	bd90      	pop	{r4, r7, pc}
	...

08000904 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000908:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <MX_I2C1_Init+0x74>)
 800090a:	4a1c      	ldr	r2, [pc, #112]	@ (800097c <MX_I2C1_Init+0x78>)
 800090c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0090194B;
 800090e:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000910:	4a1b      	ldr	r2, [pc, #108]	@ (8000980 <MX_I2C1_Init+0x7c>)
 8000912:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000914:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800091a:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <MX_I2C1_Init+0x74>)
 800091c:	2201      	movs	r2, #1
 800091e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000920:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000926:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_I2C1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000940:	0018      	movs	r0, r3
 8000942:	f001 f953 	bl	8001bec <HAL_I2C_Init>
 8000946:	1e03      	subs	r3, r0, #0
 8000948:	d001      	beq.n	800094e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800094a:	f000 fa4e 	bl	8000dea <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800094e:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000950:	2100      	movs	r1, #0
 8000952:	0018      	movs	r0, r3
 8000954:	f001 fef6 	bl	8002744 <HAL_I2CEx_ConfigAnalogFilter>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d001      	beq.n	8000960 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800095c:	f000 fa45 	bl	8000dea <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000960:	4b05      	ldr	r3, [pc, #20]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000962:	2100      	movs	r1, #0
 8000964:	0018      	movs	r0, r3
 8000966:	f001 ff39 	bl	80027dc <HAL_I2CEx_ConfigDigitalFilter>
 800096a:	1e03      	subs	r3, r0, #0
 800096c:	d001      	beq.n	8000972 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800096e:	f000 fa3c 	bl	8000dea <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000972:	46c0      	nop			@ (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200000ac 	.word	0x200000ac
 800097c:	40005400 	.word	0x40005400
 8000980:	0090194b 	.word	0x0090194b

08000984 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800098a:	2310      	movs	r3, #16
 800098c:	18fb      	adds	r3, r7, r3
 800098e:	0018      	movs	r0, r3
 8000990:	2310      	movs	r3, #16
 8000992:	001a      	movs	r2, r3
 8000994:	2100      	movs	r1, #0
 8000996:	f003 ff09 	bl	80047ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	0018      	movs	r0, r3
 800099e:	230c      	movs	r3, #12
 80009a0:	001a      	movs	r2, r3
 80009a2:	2100      	movs	r1, #0
 80009a4:	f003 ff02 	bl	80047ac <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a24 <MX_TIM3_Init+0xa0>)
 80009aa:	4a1f      	ldr	r2, [pc, #124]	@ (8000a28 <MX_TIM3_Init+0xa4>)
 80009ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 80009ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000a24 <MX_TIM3_Init+0xa0>)
 80009b0:	222f      	movs	r2, #47	@ 0x2f
 80009b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <MX_TIM3_Init+0xa0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000a24 <MX_TIM3_Init+0xa0>)
 80009bc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a2c <MX_TIM3_Init+0xa8>)
 80009be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c0:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <MX_TIM3_Init+0xa0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c6:	4b17      	ldr	r3, [pc, #92]	@ (8000a24 <MX_TIM3_Init+0xa0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009cc:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <MX_TIM3_Init+0xa0>)
 80009ce:	0018      	movs	r0, r3
 80009d0:	f002 fbb0 	bl	8003134 <HAL_TIM_Base_Init>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80009d8:	f000 fa07 	bl	8000dea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009dc:	2110      	movs	r1, #16
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2280      	movs	r2, #128	@ 0x80
 80009e2:	0152      	lsls	r2, r2, #5
 80009e4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009e6:	187a      	adds	r2, r7, r1
 80009e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <MX_TIM3_Init+0xa0>)
 80009ea:	0011      	movs	r1, r2
 80009ec:	0018      	movs	r0, r3
 80009ee:	f002 fd4f 	bl	8003490 <HAL_TIM_ConfigClockSource>
 80009f2:	1e03      	subs	r3, r0, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80009f6:	f000 f9f8 	bl	8000dea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a06:	1d3a      	adds	r2, r7, #4
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <MX_TIM3_Init+0xa0>)
 8000a0a:	0011      	movs	r1, r2
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f002 ff4b 	bl	80038a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a12:	1e03      	subs	r3, r0, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000a16:	f000 f9e8 	bl	8000dea <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b008      	add	sp, #32
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	20000100 	.word	0x20000100
 8000a28:	40000400 	.word	0x40000400
 8000a2c:	0000ffff 	.word	0x0000ffff

08000a30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a34:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <MX_USART2_UART_Init+0x60>)
 8000a36:	4a17      	ldr	r2, [pc, #92]	@ (8000a94 <MX_USART2_UART_Init+0x64>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <MX_USART2_UART_Init+0x60>)
 8000a3c:	22e1      	movs	r2, #225	@ 0xe1
 8000a3e:	0252      	lsls	r2, r2, #9
 8000a40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <MX_USART2_UART_Init+0x60>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <MX_USART2_UART_Init+0x60>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	@ (8000a90 <MX_USART2_UART_Init+0x60>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <MX_USART2_UART_Init+0x60>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a90 <MX_USART2_UART_Init+0x60>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <MX_USART2_UART_Init+0x60>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a66:	4b0a      	ldr	r3, [pc, #40]	@ (8000a90 <MX_USART2_UART_Init+0x60>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a6c:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <MX_USART2_UART_Init+0x60>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a72:	4b07      	ldr	r3, [pc, #28]	@ (8000a90 <MX_USART2_UART_Init+0x60>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a78:	4b05      	ldr	r3, [pc, #20]	@ (8000a90 <MX_USART2_UART_Init+0x60>)
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f002 ff8e 	bl	800399c <HAL_UART_Init>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a84:	f000 f9b1 	bl	8000dea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a88:	46c0      	nop			@ (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	2000014c 	.word	0x2000014c
 8000a94:	40004400 	.word	0x40004400

08000a98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <MX_DMA_Init+0x38>)
 8000aa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad0 <MX_DMA_Init+0x38>)
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000aaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <MX_DMA_Init+0x38>)
 8000aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2009      	movs	r0, #9
 8000abc:	f000 fc50 	bl	8001360 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ac0:	2009      	movs	r0, #9
 8000ac2:	f000 fc62 	bl	800138a <HAL_NVIC_EnableIRQ>

}
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b002      	add	sp, #8
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			@ (mov r8, r8)
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b089      	sub	sp, #36	@ 0x24
 8000ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	240c      	movs	r4, #12
 8000adc:	193b      	adds	r3, r7, r4
 8000ade:	0018      	movs	r0, r3
 8000ae0:	2314      	movs	r3, #20
 8000ae2:	001a      	movs	r2, r3
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	f003 fe61 	bl	80047ac <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	4b2a      	ldr	r3, [pc, #168]	@ (8000b94 <MX_GPIO_Init+0xc0>)
 8000aec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000aee:	4b29      	ldr	r3, [pc, #164]	@ (8000b94 <MX_GPIO_Init+0xc0>)
 8000af0:	2102      	movs	r1, #2
 8000af2:	430a      	orrs	r2, r1
 8000af4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000af6:	4b27      	ldr	r3, [pc, #156]	@ (8000b94 <MX_GPIO_Init+0xc0>)
 8000af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000afa:	2202      	movs	r2, #2
 8000afc:	4013      	ands	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	4b24      	ldr	r3, [pc, #144]	@ (8000b94 <MX_GPIO_Init+0xc0>)
 8000b04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b06:	4b23      	ldr	r3, [pc, #140]	@ (8000b94 <MX_GPIO_Init+0xc0>)
 8000b08:	2104      	movs	r1, #4
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b0e:	4b21      	ldr	r3, [pc, #132]	@ (8000b94 <MX_GPIO_Init+0xc0>)
 8000b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b12:	2204      	movs	r2, #4
 8000b14:	4013      	ands	r3, r2
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b94 <MX_GPIO_Init+0xc0>)
 8000b1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b94 <MX_GPIO_Init+0xc0>)
 8000b20:	2101      	movs	r1, #1
 8000b22:	430a      	orrs	r2, r1
 8000b24:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b26:	4b1b      	ldr	r3, [pc, #108]	@ (8000b94 <MX_GPIO_Init+0xc0>)
 8000b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b32:	23a0      	movs	r3, #160	@ 0xa0
 8000b34:	05db      	lsls	r3, r3, #23
 8000b36:	2200      	movs	r2, #0
 8000b38:	2110      	movs	r1, #16
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f001 f81d 	bl	8001b7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	2210      	movs	r2, #16
 8000b44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	2201      	movs	r2, #1
 8000b4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	193b      	adds	r3, r7, r4
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	193b      	adds	r3, r7, r4
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b58:	193a      	adds	r2, r7, r4
 8000b5a:	23a0      	movs	r3, #160	@ 0xa0
 8000b5c:	05db      	lsls	r3, r3, #23
 8000b5e:	0011      	movs	r1, r2
 8000b60:	0018      	movs	r0, r3
 8000b62:	f000 fe83 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin SW4_Pin
                           SW5_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin
 8000b66:	0021      	movs	r1, r4
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	229e      	movs	r2, #158	@ 0x9e
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	601a      	str	r2, [r3, #0]
                          |SW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2200      	movs	r2, #0
 8000b74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	187a      	adds	r2, r7, r1
 8000b7e:	23a0      	movs	r3, #160	@ 0xa0
 8000b80:	05db      	lsls	r3, r3, #23
 8000b82:	0011      	movs	r1, r2
 8000b84:	0018      	movs	r0, r3
 8000b86:	f000 fe71 	bl	800186c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b009      	add	sp, #36	@ 0x24
 8000b90:	bd90      	pop	{r4, r7, pc}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	40021000 	.word	0x40021000

08000b98 <readBuf>:

/* USER CODE BEGIN 4 */
void readBuf(UART_HandleTypeDef* uart, uint8_t* buf, int buf_size, uint8_t* data, uint8_t id, uint8_t* p_wrtpt, uint8_t* p_rdpt, uint16_t* stop_counter, uint16_t* error_counter){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
 8000ba4:	603b      	str	r3, [r7, #0]
	int wrt_pt = uart->hdmarx->Instance->CNDTR;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	2280      	movs	r2, #128	@ 0x80
 8000baa:	589b      	ldr	r3, [r3, r2]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	613b      	str	r3, [r7, #16]
	wrt_pt= buf_size - wrt_pt;
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	1ad3      	subs	r3, r2, r3
 8000bb8:	613b      	str	r3, [r7, #16]
	int rd_pt;

	if(wrt_pt != *p_rdpt){//wrtに追い付かれてない
 8000bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	001a      	movs	r2, r3
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d02f      	beq.n	8000c26 <readBuf+0x8e>
		if(buf[*p_rdpt] == 255){//p_rdptが書き換えられてない=追い越されてない
 8000bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	001a      	movs	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	189b      	adds	r3, r3, r2
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2bff      	cmp	r3, #255	@ 0xff
 8000bd4:	d116      	bne.n	8000c04 <readBuf+0x6c>
			if(wrt_pt != *p_wrtpt){//wrt_ptが進んだ=受信した
 8000bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	001a      	movs	r2, r3
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d006      	beq.n	8000bf0 <readBuf+0x58>
//正常
				*stop_counter = 0;
 8000be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000be4:	2200      	movs	r2, #0
 8000be6:	801a      	strh	r2, [r3, #0]
				rd_pt = *p_rdpt;
 8000be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	61fb      	str	r3, [r7, #28]
 8000bee:	e045      	b.n	8000c7c <readBuf+0xe4>
			}else{//wrt_ptが進んでない=受信してない
//受信してない
				(*stop_counter)++;
 8000bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bfa:	801a      	strh	r2, [r3, #0]
				rd_pt = *p_rdpt;
 8000bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	61fb      	str	r3, [r7, #28]
 8000c02:	e03b      	b.n	8000c7c <readBuf+0xe4>
			}
		}else{//p_rdptが書き換えられた=追い越された
//追い越された
			(*error_counter)++;
 8000c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c0e:	801a      	strh	r2, [r3, #0]
			rd_pt = wrt_pt - 40;
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	3b28      	subs	r3, #40	@ 0x28
 8000c14:	61fb      	str	r3, [r7, #28]
				if(rd_pt < 0){rd_pt += buf_size;}
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	da2f      	bge.n	8000c7c <readBuf+0xe4>
 8000c1c:	69fa      	ldr	r2, [r7, #28]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	18d3      	adds	r3, r2, r3
 8000c22:	61fb      	str	r3, [r7, #28]
 8000c24:	e02a      	b.n	8000c7c <readBuf+0xe4>
		}
	}else{//wrtに追い付かれた,追い付いた
		int front_pt = wrt_pt + 1;
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	61bb      	str	r3, [r7, #24]
			if(front_pt>buf_size-1){front_pt -= buf_size;}
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dc03      	bgt.n	8000c3c <readBuf+0xa4>
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	61bb      	str	r3, [r7, #24]

		if(buf[front_pt] == 255){
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	18d3      	adds	r3, r2, r3
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2bff      	cmp	r3, #255	@ 0xff
 8000c46:	d109      	bne.n	8000c5c <readBuf+0xc4>
//追い付いた
			(*stop_counter)++;
 8000c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c52:	801a      	strh	r2, [r3, #0]
			rd_pt = *p_rdpt;
 8000c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	61fb      	str	r3, [r7, #28]
 8000c5a:	e00f      	b.n	8000c7c <readBuf+0xe4>
		}else{
//追い付かれた
			(*error_counter)++;
 8000c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	3301      	adds	r3, #1
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c66:	801a      	strh	r2, [r3, #0]
			rd_pt = wrt_pt - 40;
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	3b28      	subs	r3, #40	@ 0x28
 8000c6c:	61fb      	str	r3, [r7, #28]
				if(rd_pt < 0){rd_pt += buf_size;}
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	da03      	bge.n	8000c7c <readBuf+0xe4>
 8000c74:	69fa      	ldr	r2, [r7, #28]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	18d3      	adds	r3, r2, r3
 8000c7a:	61fb      	str	r3, [r7, #28]
		}
	}

	if(*stop_counter > 65500){*stop_counter = 65500;}
 8000c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	4a30      	ldr	r2, [pc, #192]	@ (8000d44 <readBuf+0x1ac>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d903      	bls.n	8000c8e <readBuf+0xf6>
 8000c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c88:	2224      	movs	r2, #36	@ 0x24
 8000c8a:	4252      	negs	r2, r2
 8000c8c:	801a      	strh	r2, [r3, #0]
	if(*error_counter > 65500){*error_counter = 65500;}
 8000c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	4a2c      	ldr	r2, [pc, #176]	@ (8000d44 <readBuf+0x1ac>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d903      	bls.n	8000ca0 <readBuf+0x108>
 8000c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c9a:	2224      	movs	r2, #36	@ 0x24
 8000c9c:	4252      	negs	r2, r2
 8000c9e:	801a      	strh	r2, [r3, #0]

//特別
	*data = 0;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
//特別

	while(1){
		int dif_pt = wrt_pt - rd_pt;
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	617b      	str	r3, [r7, #20]
			if(dif_pt < 0){dif_pt += buf_size;}
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	da03      	bge.n	8000cbc <readBuf+0x124>
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	18d3      	adds	r3, r2, r3
 8000cba:	617b      	str	r3, [r7, #20]
		if(dif_pt <= 20){break;}
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	2b14      	cmp	r3, #20
 8000cc0:	dd30      	ble.n	8000d24 <readBuf+0x18c>

		rd_pt++;
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	61fb      	str	r3, [r7, #28]
			if(rd_pt>buf_size-1){rd_pt -= buf_size;}
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	dc03      	bgt.n	8000cd8 <readBuf+0x140>
 8000cd0:	69fa      	ldr	r2, [r7, #28]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	61fb      	str	r3, [r7, #28]
//				if(dif_pt < 0){dif_pt += buf_size;}
//			if(dif_pt >= buf_size/2){}
//			else{break;}
//		}else{buf[rd_pt] = 255;}

		if(buf[rd_pt] == 248+id){
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	18d3      	adds	r3, r2, r3
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	2328      	movs	r3, #40	@ 0x28
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	33f8      	adds	r3, #248	@ 0xf8
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d114      	bne.n	8000d18 <readBuf+0x180>
			*data = 1;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
			buf[rd_pt] = 255;
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	18d3      	adds	r3, r2, r3
 8000cfa:	22ff      	movs	r2, #255	@ 0xff
 8000cfc:	701a      	strb	r2, [r3, #0]

			dif_pt = wrt_pt - rd_pt;
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	617b      	str	r3, [r7, #20]
				if(dif_pt < 0){dif_pt += buf_size;}
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	da03      	bge.n	8000d14 <readBuf+0x17c>
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	18d3      	adds	r3, r2, r3
 8000d12:	617b      	str	r3, [r7, #20]
			if(dif_pt >= buf_size/2){}
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	e007      	b.n	8000d28 <readBuf+0x190>
			else{break;}
			break;
		}else{buf[rd_pt] = 255;}
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	18d3      	adds	r3, r2, r3
 8000d1e:	22ff      	movs	r2, #255	@ 0xff
 8000d20:	701a      	strb	r2, [r3, #0]
	while(1){
 8000d22:	e7c0      	b.n	8000ca6 <readBuf+0x10e>
		if(dif_pt <= 20){break;}
 8000d24:	46c0      	nop			@ (mov r8, r8)
 8000d26:	e000      	b.n	8000d2a <readBuf+0x192>
			break;
 8000d28:	46c0      	nop			@ (mov r8, r8)
	}

	*p_rdpt = rd_pt;
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d30:	701a      	strb	r2, [r3, #0]
//	*p_wrtpt = buf_size - (uart->hdmarx->Instance->CNDTR);
	*p_wrtpt = wrt_pt;
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d38:	701a      	strb	r2, [r3, #0]
}
 8000d3a:	46c0      	nop			@ (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b008      	add	sp, #32
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			@ (mov r8, r8)
 8000d44:	0000ffdc 	.word	0x0000ffdc

08000d48 <readID>:
	int index = uart->hdmarx->Instance->CNDTR;
	index = buf_size - index;
	return index;
}

uint8_t readID(){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
	uint8_t id;
	if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin)==1){id=0;}
 8000d4e:	23a0      	movs	r3, #160	@ 0xa0
 8000d50:	05db      	lsls	r3, r3, #23
 8000d52:	2120      	movs	r1, #32
 8000d54:	0018      	movs	r0, r3
 8000d56:	f000 fef3 	bl	8001b40 <HAL_GPIO_ReadPin>
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d103      	bne.n	8000d68 <readID+0x20>
 8000d60:	1dfb      	adds	r3, r7, #7
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
 8000d66:	e03a      	b.n	8000dde <readID+0x96>
	else if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin)==1){id=1;}
 8000d68:	23a0      	movs	r3, #160	@ 0xa0
 8000d6a:	05db      	lsls	r3, r3, #23
 8000d6c:	2140      	movs	r1, #64	@ 0x40
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f000 fee6 	bl	8001b40 <HAL_GPIO_ReadPin>
 8000d74:	0003      	movs	r3, r0
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d103      	bne.n	8000d82 <readID+0x3a>
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	701a      	strb	r2, [r3, #0]
 8000d80:	e02d      	b.n	8000dde <readID+0x96>
	else if(HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin)==1){id=2;}
 8000d82:	23a0      	movs	r3, #160	@ 0xa0
 8000d84:	05db      	lsls	r3, r3, #23
 8000d86:	2180      	movs	r1, #128	@ 0x80
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f000 fed9 	bl	8001b40 <HAL_GPIO_ReadPin>
 8000d8e:	0003      	movs	r3, r0
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d103      	bne.n	8000d9c <readID+0x54>
 8000d94:	1dfb      	adds	r3, r7, #7
 8000d96:	2202      	movs	r2, #2
 8000d98:	701a      	strb	r2, [r3, #0]
 8000d9a:	e020      	b.n	8000dde <readID+0x96>
	else if(HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin)==1){id=3;}
 8000d9c:	2380      	movs	r3, #128	@ 0x80
 8000d9e:	005a      	lsls	r2, r3, #1
 8000da0:	23a0      	movs	r3, #160	@ 0xa0
 8000da2:	05db      	lsls	r3, r3, #23
 8000da4:	0011      	movs	r1, r2
 8000da6:	0018      	movs	r0, r3
 8000da8:	f000 feca 	bl	8001b40 <HAL_GPIO_ReadPin>
 8000dac:	0003      	movs	r3, r0
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d103      	bne.n	8000dba <readID+0x72>
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	2203      	movs	r2, #3
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e011      	b.n	8000dde <readID+0x96>
	else if(HAL_GPIO_ReadPin(SW5_GPIO_Port, SW5_Pin)==1){id=4;}
 8000dba:	2380      	movs	r3, #128	@ 0x80
 8000dbc:	011a      	lsls	r2, r3, #4
 8000dbe:	23a0      	movs	r3, #160	@ 0xa0
 8000dc0:	05db      	lsls	r3, r3, #23
 8000dc2:	0011      	movs	r1, r2
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f000 febb 	bl	8001b40 <HAL_GPIO_ReadPin>
 8000dca:	0003      	movs	r3, r0
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d103      	bne.n	8000dd8 <readID+0x90>
 8000dd0:	1dfb      	adds	r3, r7, #7
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	701a      	strb	r2, [r3, #0]
 8000dd6:	e002      	b.n	8000dde <readID+0x96>
	else{id=5;}
 8000dd8:	1dfb      	adds	r3, r7, #7
 8000dda:	2205      	movs	r2, #5
 8000ddc:	701a      	strb	r2, [r3, #0]
	return id;
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	781b      	ldrb	r3, [r3, #0]
}
 8000de2:	0018      	movs	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b002      	add	sp, #8
 8000de8:	bd80      	pop	{r7, pc}

08000dea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dee:	b672      	cpsid	i
}
 8000df0:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df2:	46c0      	nop			@ (mov r8, r8)
 8000df4:	e7fd      	b.n	8000df2 <Error_Handler+0x8>
	...

08000df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000e3c <HAL_MspInit+0x44>)
 8000e00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e02:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <HAL_MspInit+0x44>)
 8000e04:	2101      	movs	r1, #1
 8000e06:	430a      	orrs	r2, r1
 8000e08:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <HAL_MspInit+0x44>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4013      	ands	r3, r2
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <HAL_MspInit+0x44>)
 8000e18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e1a:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <HAL_MspInit+0x44>)
 8000e1c:	2180      	movs	r1, #128	@ 0x80
 8000e1e:	0549      	lsls	r1, r1, #21
 8000e20:	430a      	orrs	r2, r1
 8000e22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e24:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <HAL_MspInit+0x44>)
 8000e26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e28:	2380      	movs	r3, #128	@ 0x80
 8000e2a:	055b      	lsls	r3, r3, #21
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e32:	46c0      	nop			@ (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b002      	add	sp, #8
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	46c0      	nop			@ (mov r8, r8)
 8000e3c:	40021000 	.word	0x40021000

08000e40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b091      	sub	sp, #68	@ 0x44
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	232c      	movs	r3, #44	@ 0x2c
 8000e4a:	18fb      	adds	r3, r7, r3
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	2314      	movs	r3, #20
 8000e50:	001a      	movs	r2, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	f003 fcaa 	bl	80047ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e58:	2410      	movs	r4, #16
 8000e5a:	193b      	adds	r3, r7, r4
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	231c      	movs	r3, #28
 8000e60:	001a      	movs	r2, r3
 8000e62:	2100      	movs	r1, #0
 8000e64:	f003 fca2 	bl	80047ac <memset>
  if(hi2c->Instance==I2C1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a22      	ldr	r2, [pc, #136]	@ (8000ef8 <HAL_I2C_MspInit+0xb8>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d13d      	bne.n	8000eee <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e72:	193b      	adds	r3, r7, r4
 8000e74:	2202      	movs	r2, #2
 8000e76:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e78:	193b      	adds	r3, r7, r4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	0018      	movs	r0, r3
 8000e82:	f002 f86b 	bl	8002f5c <HAL_RCCEx_PeriphCLKConfig>
 8000e86:	1e03      	subs	r3, r0, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e8a:	f7ff ffae 	bl	8000dea <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000efc <HAL_I2C_MspInit+0xbc>)
 8000e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e92:	4b1a      	ldr	r3, [pc, #104]	@ (8000efc <HAL_I2C_MspInit+0xbc>)
 8000e94:	2102      	movs	r1, #2
 8000e96:	430a      	orrs	r2, r1
 8000e98:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e9a:	4b18      	ldr	r3, [pc, #96]	@ (8000efc <HAL_I2C_MspInit+0xbc>)
 8000e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000ea6:	212c      	movs	r1, #44	@ 0x2c
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	22c0      	movs	r2, #192	@ 0xc0
 8000eac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	2212      	movs	r2, #18
 8000eb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2206      	movs	r2, #6
 8000ec4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f00 <HAL_I2C_MspInit+0xc0>)
 8000eca:	0019      	movs	r1, r3
 8000ecc:	0010      	movs	r0, r2
 8000ece:	f000 fccd 	bl	800186c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <HAL_I2C_MspInit+0xbc>)
 8000ed4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ed6:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <HAL_I2C_MspInit+0xbc>)
 8000ed8:	2180      	movs	r1, #128	@ 0x80
 8000eda:	0389      	lsls	r1, r1, #14
 8000edc:	430a      	orrs	r2, r1
 8000ede:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_I2C_MspInit+0xbc>)
 8000ee2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ee4:	2380      	movs	r3, #128	@ 0x80
 8000ee6:	039b      	lsls	r3, r3, #14
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000eee:	46c0      	nop			@ (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b011      	add	sp, #68	@ 0x44
 8000ef4:	bd90      	pop	{r4, r7, pc}
 8000ef6:	46c0      	nop			@ (mov r8, r8)
 8000ef8:	40005400 	.word	0x40005400
 8000efc:	40021000 	.word	0x40021000
 8000f00:	50000400 	.word	0x50000400

08000f04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0d      	ldr	r2, [pc, #52]	@ (8000f48 <HAL_TIM_Base_MspInit+0x44>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d113      	bne.n	8000f3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f16:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <HAL_TIM_Base_MspInit+0x48>)
 8000f18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <HAL_TIM_Base_MspInit+0x48>)
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f22:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <HAL_TIM_Base_MspInit+0x48>)
 8000f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f26:	2202      	movs	r2, #2
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	2010      	movs	r0, #16
 8000f34:	f000 fa14 	bl	8001360 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f38:	2010      	movs	r0, #16
 8000f3a:	f000 fa26 	bl	800138a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000f3e:	46c0      	nop			@ (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b004      	add	sp, #16
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	40000400 	.word	0x40000400
 8000f4c:	40021000 	.word	0x40021000

08000f50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b08b      	sub	sp, #44	@ 0x2c
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	2414      	movs	r4, #20
 8000f5a:	193b      	adds	r3, r7, r4
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	2314      	movs	r3, #20
 8000f60:	001a      	movs	r2, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	f003 fc22 	bl	80047ac <memset>
  if(huart->Instance==USART2)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a30      	ldr	r2, [pc, #192]	@ (8001030 <HAL_UART_MspInit+0xe0>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d15a      	bne.n	8001028 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f72:	4b30      	ldr	r3, [pc, #192]	@ (8001034 <HAL_UART_MspInit+0xe4>)
 8000f74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f76:	4b2f      	ldr	r3, [pc, #188]	@ (8001034 <HAL_UART_MspInit+0xe4>)
 8000f78:	2180      	movs	r1, #128	@ 0x80
 8000f7a:	0289      	lsls	r1, r1, #10
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f80:	4b2c      	ldr	r3, [pc, #176]	@ (8001034 <HAL_UART_MspInit+0xe4>)
 8000f82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f84:	2380      	movs	r3, #128	@ 0x80
 8000f86:	029b      	lsls	r3, r3, #10
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b29      	ldr	r3, [pc, #164]	@ (8001034 <HAL_UART_MspInit+0xe4>)
 8000f90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f92:	4b28      	ldr	r3, [pc, #160]	@ (8001034 <HAL_UART_MspInit+0xe4>)
 8000f94:	2101      	movs	r1, #1
 8000f96:	430a      	orrs	r2, r1
 8000f98:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f9a:	4b26      	ldr	r3, [pc, #152]	@ (8001034 <HAL_UART_MspInit+0xe4>)
 8000f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fa6:	0021      	movs	r1, r4
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	220c      	movs	r2, #12
 8000fac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	187a      	adds	r2, r7, r1
 8000fc8:	23a0      	movs	r3, #160	@ 0xa0
 8000fca:	05db      	lsls	r3, r3, #23
 8000fcc:	0011      	movs	r1, r2
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f000 fc4c 	bl	800186c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000fd4:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <HAL_UART_MspInit+0xe8>)
 8000fd6:	4a19      	ldr	r2, [pc, #100]	@ (800103c <HAL_UART_MspInit+0xec>)
 8000fd8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000fda:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <HAL_UART_MspInit+0xe8>)
 8000fdc:	2234      	movs	r2, #52	@ 0x34
 8000fde:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fe0:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <HAL_UART_MspInit+0xe8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <HAL_UART_MspInit+0xe8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <HAL_UART_MspInit+0xe8>)
 8000fee:	2280      	movs	r2, #128	@ 0x80
 8000ff0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <HAL_UART_MspInit+0xe8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <HAL_UART_MspInit+0xe8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <HAL_UART_MspInit+0xe8>)
 8001000:	2220      	movs	r2, #32
 8001002:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <HAL_UART_MspInit+0xe8>)
 8001006:	2200      	movs	r2, #0
 8001008:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <HAL_UART_MspInit+0xe8>)
 800100c:	0018      	movs	r0, r3
 800100e:	f000 f9d9 	bl	80013c4 <HAL_DMA_Init>
 8001012:	1e03      	subs	r3, r0, #0
 8001014:	d001      	beq.n	800101a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001016:	f7ff fee8 	bl	8000dea <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2180      	movs	r1, #128	@ 0x80
 800101e:	4a06      	ldr	r2, [pc, #24]	@ (8001038 <HAL_UART_MspInit+0xe8>)
 8001020:	505a      	str	r2, [r3, r1]
 8001022:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <HAL_UART_MspInit+0xe8>)
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001028:	46c0      	nop			@ (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	b00b      	add	sp, #44	@ 0x2c
 800102e:	bd90      	pop	{r4, r7, pc}
 8001030:	40004400 	.word	0x40004400
 8001034:	40021000 	.word	0x40021000
 8001038:	200001e0 	.word	0x200001e0
 800103c:	40020008 	.word	0x40020008

08001040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001044:	46c0      	nop			@ (mov r8, r8)
 8001046:	e7fd      	b.n	8001044 <NMI_Handler+0x4>

08001048 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104c:	46c0      	nop			@ (mov r8, r8)
 800104e:	e7fd      	b.n	800104c <HardFault_Handler+0x4>

08001050 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001054:	46c0      	nop			@ (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105e:	46c0      	nop			@ (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001068:	f000 f8b2 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800106c:	46c0      	nop			@ (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001078:	4b03      	ldr	r3, [pc, #12]	@ (8001088 <DMA1_Channel1_IRQHandler+0x14>)
 800107a:	0018      	movs	r0, r3
 800107c:	f000 fab4 	bl	80015e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001080:	46c0      	nop			@ (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	46c0      	nop			@ (mov r8, r8)
 8001088:	200001e0 	.word	0x200001e0

0800108c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001090:	4b03      	ldr	r3, [pc, #12]	@ (80010a0 <TIM3_IRQHandler+0x14>)
 8001092:	0018      	movs	r0, r3
 8001094:	f002 f8f4 	bl	8003280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001098:	46c0      	nop			@ (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			@ (mov r8, r8)
 80010a0:	20000100 	.word	0x20000100

080010a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010a8:	4b03      	ldr	r3, [pc, #12]	@ (80010b8 <SystemInit+0x14>)
 80010aa:	2280      	movs	r2, #128	@ 0x80
 80010ac:	0512      	lsls	r2, r2, #20
 80010ae:	609a      	str	r2, [r3, #8]
#endif
}
 80010b0:	46c0      	nop			@ (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	46c0      	nop			@ (mov r8, r8)
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010bc:	480d      	ldr	r0, [pc, #52]	@ (80010f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010c0:	f7ff fff0 	bl	80010a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010c6:	e003      	b.n	80010d0 <LoopCopyDataInit>

080010c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010c8:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80010ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010ce:	3104      	adds	r1, #4

080010d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010d0:	480a      	ldr	r0, [pc, #40]	@ (80010fc <LoopForever+0xa>)
  ldr r3, =_edata
 80010d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <LoopForever+0xe>)
  adds r2, r0, r1
 80010d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010d8:	d3f6      	bcc.n	80010c8 <CopyDataInit>
  ldr r2, =_sbss
 80010da:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <LoopForever+0x12>)
  b LoopFillZerobss
 80010dc:	e002      	b.n	80010e4 <LoopFillZerobss>

080010de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  str  r3, [r2]
 80010e0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e2:	3204      	adds	r2, #4

080010e4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80010e4:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <LoopForever+0x16>)
  cmp r2, r3
 80010e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80010e8:	d3f9      	bcc.n	80010de <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80010ea:	f003 fb67 	bl	80047bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ee:	f7ff f9af 	bl	8000450 <main>

080010f2 <LoopForever>:

LoopForever:
    b LoopForever
 80010f2:	e7fe      	b.n	80010f2 <LoopForever>
  ldr   r0, =_estack
 80010f4:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80010f8:	0800489c 	.word	0x0800489c
  ldr r0, =_sdata
 80010fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001100:	20000090 	.word	0x20000090
  ldr r2, =_sbss
 8001104:	20000090 	.word	0x20000090
  ldr r3, = _ebss
 8001108:	2000027c 	.word	0x2000027c

0800110c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC1_IRQHandler>

0800110e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800111a:	2003      	movs	r0, #3
 800111c:	f000 f80e 	bl	800113c <HAL_InitTick>
 8001120:	1e03      	subs	r3, r0, #0
 8001122:	d003      	beq.n	800112c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001124:	1dfb      	adds	r3, r7, #7
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
 800112a:	e001      	b.n	8001130 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800112c:	f7ff fe64 	bl	8000df8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001130:	1dfb      	adds	r3, r7, #7
 8001132:	781b      	ldrb	r3, [r3, #0]
}
 8001134:	0018      	movs	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	b002      	add	sp, #8
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001144:	230f      	movs	r3, #15
 8001146:	18fb      	adds	r3, r7, r3
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 800114c:	4b1d      	ldr	r3, [pc, #116]	@ (80011c4 <HAL_InitTick+0x88>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d02b      	beq.n	80011ac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001154:	4b1c      	ldr	r3, [pc, #112]	@ (80011c8 <HAL_InitTick+0x8c>)
 8001156:	681c      	ldr	r4, [r3, #0]
 8001158:	4b1a      	ldr	r3, [pc, #104]	@ (80011c4 <HAL_InitTick+0x88>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	0019      	movs	r1, r3
 800115e:	23fa      	movs	r3, #250	@ 0xfa
 8001160:	0098      	lsls	r0, r3, #2
 8001162:	f7fe ffd1 	bl	8000108 <__udivsi3>
 8001166:	0003      	movs	r3, r0
 8001168:	0019      	movs	r1, r3
 800116a:	0020      	movs	r0, r4
 800116c:	f7fe ffcc 	bl	8000108 <__udivsi3>
 8001170:	0003      	movs	r3, r0
 8001172:	0018      	movs	r0, r3
 8001174:	f000 f919 	bl	80013aa <HAL_SYSTICK_Config>
 8001178:	1e03      	subs	r3, r0, #0
 800117a:	d112      	bne.n	80011a2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b03      	cmp	r3, #3
 8001180:	d80a      	bhi.n	8001198 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	2301      	movs	r3, #1
 8001186:	425b      	negs	r3, r3
 8001188:	2200      	movs	r2, #0
 800118a:	0018      	movs	r0, r3
 800118c:	f000 f8e8 	bl	8001360 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001190:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <HAL_InitTick+0x90>)
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	e00d      	b.n	80011b4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001198:	230f      	movs	r3, #15
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
 80011a0:	e008      	b.n	80011b4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011a2:	230f      	movs	r3, #15
 80011a4:	18fb      	adds	r3, r7, r3
 80011a6:	2201      	movs	r2, #1
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	e003      	b.n	80011b4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011ac:	230f      	movs	r3, #15
 80011ae:	18fb      	adds	r3, r7, r3
 80011b0:	2201      	movs	r2, #1
 80011b2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011b4:	230f      	movs	r3, #15
 80011b6:	18fb      	adds	r3, r7, r3
 80011b8:	781b      	ldrb	r3, [r3, #0]
}
 80011ba:	0018      	movs	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	b005      	add	sp, #20
 80011c0:	bd90      	pop	{r4, r7, pc}
 80011c2:	46c0      	nop			@ (mov r8, r8)
 80011c4:	2000008c 	.word	0x2000008c
 80011c8:	20000084 	.word	0x20000084
 80011cc:	20000088 	.word	0x20000088

080011d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011d4:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <HAL_IncTick+0x1c>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	001a      	movs	r2, r3
 80011da:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <HAL_IncTick+0x20>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	18d2      	adds	r2, r2, r3
 80011e0:	4b03      	ldr	r3, [pc, #12]	@ (80011f0 <HAL_IncTick+0x20>)
 80011e2:	601a      	str	r2, [r3, #0]
}
 80011e4:	46c0      	nop			@ (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	2000008c 	.word	0x2000008c
 80011f0:	20000278 	.word	0x20000278

080011f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b02      	ldr	r3, [pc, #8]	@ (8001204 <HAL_GetTick+0x10>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	0018      	movs	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	20000278 	.word	0x20000278

08001208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	0002      	movs	r2, r0
 8001210:	1dfb      	adds	r3, r7, #7
 8001212:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001214:	1dfb      	adds	r3, r7, #7
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b7f      	cmp	r3, #127	@ 0x7f
 800121a:	d809      	bhi.n	8001230 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121c:	1dfb      	adds	r3, r7, #7
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	001a      	movs	r2, r3
 8001222:	231f      	movs	r3, #31
 8001224:	401a      	ands	r2, r3
 8001226:	4b04      	ldr	r3, [pc, #16]	@ (8001238 <__NVIC_EnableIRQ+0x30>)
 8001228:	2101      	movs	r1, #1
 800122a:	4091      	lsls	r1, r2
 800122c:	000a      	movs	r2, r1
 800122e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001230:	46c0      	nop			@ (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	b002      	add	sp, #8
 8001236:	bd80      	pop	{r7, pc}
 8001238:	e000e100 	.word	0xe000e100

0800123c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	0002      	movs	r2, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001250:	d828      	bhi.n	80012a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001252:	4a2f      	ldr	r2, [pc, #188]	@ (8001310 <__NVIC_SetPriority+0xd4>)
 8001254:	1dfb      	adds	r3, r7, #7
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b25b      	sxtb	r3, r3
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	33c0      	adds	r3, #192	@ 0xc0
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	589b      	ldr	r3, [r3, r2]
 8001262:	1dfa      	adds	r2, r7, #7
 8001264:	7812      	ldrb	r2, [r2, #0]
 8001266:	0011      	movs	r1, r2
 8001268:	2203      	movs	r2, #3
 800126a:	400a      	ands	r2, r1
 800126c:	00d2      	lsls	r2, r2, #3
 800126e:	21ff      	movs	r1, #255	@ 0xff
 8001270:	4091      	lsls	r1, r2
 8001272:	000a      	movs	r2, r1
 8001274:	43d2      	mvns	r2, r2
 8001276:	401a      	ands	r2, r3
 8001278:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	019b      	lsls	r3, r3, #6
 800127e:	22ff      	movs	r2, #255	@ 0xff
 8001280:	401a      	ands	r2, r3
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	0018      	movs	r0, r3
 8001288:	2303      	movs	r3, #3
 800128a:	4003      	ands	r3, r0
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001290:	481f      	ldr	r0, [pc, #124]	@ (8001310 <__NVIC_SetPriority+0xd4>)
 8001292:	1dfb      	adds	r3, r7, #7
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	b25b      	sxtb	r3, r3
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	430a      	orrs	r2, r1
 800129c:	33c0      	adds	r3, #192	@ 0xc0
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012a2:	e031      	b.n	8001308 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001314 <__NVIC_SetPriority+0xd8>)
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	0019      	movs	r1, r3
 80012ac:	230f      	movs	r3, #15
 80012ae:	400b      	ands	r3, r1
 80012b0:	3b08      	subs	r3, #8
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	3306      	adds	r3, #6
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	18d3      	adds	r3, r2, r3
 80012ba:	3304      	adds	r3, #4
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	1dfa      	adds	r2, r7, #7
 80012c0:	7812      	ldrb	r2, [r2, #0]
 80012c2:	0011      	movs	r1, r2
 80012c4:	2203      	movs	r2, #3
 80012c6:	400a      	ands	r2, r1
 80012c8:	00d2      	lsls	r2, r2, #3
 80012ca:	21ff      	movs	r1, #255	@ 0xff
 80012cc:	4091      	lsls	r1, r2
 80012ce:	000a      	movs	r2, r1
 80012d0:	43d2      	mvns	r2, r2
 80012d2:	401a      	ands	r2, r3
 80012d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	019b      	lsls	r3, r3, #6
 80012da:	22ff      	movs	r2, #255	@ 0xff
 80012dc:	401a      	ands	r2, r3
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	0018      	movs	r0, r3
 80012e4:	2303      	movs	r3, #3
 80012e6:	4003      	ands	r3, r0
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ec:	4809      	ldr	r0, [pc, #36]	@ (8001314 <__NVIC_SetPriority+0xd8>)
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	001c      	movs	r4, r3
 80012f4:	230f      	movs	r3, #15
 80012f6:	4023      	ands	r3, r4
 80012f8:	3b08      	subs	r3, #8
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	430a      	orrs	r2, r1
 80012fe:	3306      	adds	r3, #6
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	18c3      	adds	r3, r0, r3
 8001304:	3304      	adds	r3, #4
 8001306:	601a      	str	r2, [r3, #0]
}
 8001308:	46c0      	nop			@ (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b003      	add	sp, #12
 800130e:	bd90      	pop	{r4, r7, pc}
 8001310:	e000e100 	.word	0xe000e100
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	1e5a      	subs	r2, r3, #1
 8001324:	2380      	movs	r3, #128	@ 0x80
 8001326:	045b      	lsls	r3, r3, #17
 8001328:	429a      	cmp	r2, r3
 800132a:	d301      	bcc.n	8001330 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132c:	2301      	movs	r3, #1
 800132e:	e010      	b.n	8001352 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001330:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <SysTick_Config+0x44>)
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	3a01      	subs	r2, #1
 8001336:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001338:	2301      	movs	r3, #1
 800133a:	425b      	negs	r3, r3
 800133c:	2103      	movs	r1, #3
 800133e:	0018      	movs	r0, r3
 8001340:	f7ff ff7c 	bl	800123c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001344:	4b05      	ldr	r3, [pc, #20]	@ (800135c <SysTick_Config+0x44>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134a:	4b04      	ldr	r3, [pc, #16]	@ (800135c <SysTick_Config+0x44>)
 800134c:	2207      	movs	r2, #7
 800134e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001350:	2300      	movs	r3, #0
}
 8001352:	0018      	movs	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	b002      	add	sp, #8
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			@ (mov r8, r8)
 800135c:	e000e010 	.word	0xe000e010

08001360 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	210f      	movs	r1, #15
 800136c:	187b      	adds	r3, r7, r1
 800136e:	1c02      	adds	r2, r0, #0
 8001370:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	187b      	adds	r3, r7, r1
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b25b      	sxtb	r3, r3
 800137a:	0011      	movs	r1, r2
 800137c:	0018      	movs	r0, r3
 800137e:	f7ff ff5d 	bl	800123c <__NVIC_SetPriority>
}
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	46bd      	mov	sp, r7
 8001386:	b004      	add	sp, #16
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	0002      	movs	r2, r0
 8001392:	1dfb      	adds	r3, r7, #7
 8001394:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001396:	1dfb      	adds	r3, r7, #7
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	b25b      	sxtb	r3, r3
 800139c:	0018      	movs	r0, r3
 800139e:	f7ff ff33 	bl	8001208 <__NVIC_EnableIRQ>
}
 80013a2:	46c0      	nop			@ (mov r8, r8)
 80013a4:	46bd      	mov	sp, r7
 80013a6:	b002      	add	sp, #8
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	0018      	movs	r0, r3
 80013b6:	f7ff ffaf 	bl	8001318 <SysTick_Config>
 80013ba:	0003      	movs	r3, r0
}
 80013bc:	0018      	movs	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	b002      	add	sp, #8
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e077      	b.n	80014c6 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a3d      	ldr	r2, [pc, #244]	@ (80014d0 <HAL_DMA_Init+0x10c>)
 80013dc:	4694      	mov	ip, r2
 80013de:	4463      	add	r3, ip
 80013e0:	2114      	movs	r1, #20
 80013e2:	0018      	movs	r0, r3
 80013e4:	f7fe fe90 	bl	8000108 <__udivsi3>
 80013e8:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 80013ea:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2225      	movs	r2, #37	@ 0x25
 80013f4:	2102      	movs	r1, #2
 80013f6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4934      	ldr	r1, [pc, #208]	@ (80014d4 <HAL_DMA_Init+0x110>)
 8001404:	400a      	ands	r2, r1
 8001406:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6819      	ldr	r1, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	431a      	orrs	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	431a      	orrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	0018      	movs	r0, r3
 8001442:	f000 f9c3 	bl	80017cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	2380      	movs	r3, #128	@ 0x80
 800144c:	01db      	lsls	r3, r3, #7
 800144e:	429a      	cmp	r2, r3
 8001450:	d102      	bne.n	8001458 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001460:	21ff      	movs	r1, #255	@ 0xff
 8001462:	400a      	ands	r2, r1
 8001464:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800146e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d011      	beq.n	800149c <HAL_DMA_Init+0xd8>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b04      	cmp	r3, #4
 800147e:	d80d      	bhi.n	800149c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	0018      	movs	r0, r3
 8001484:	f000 f9ce 	bl	8001824 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	e008      	b.n	80014ae <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2225      	movs	r2, #37	@ 0x25
 80014b8:	2101      	movs	r1, #1
 80014ba:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2224      	movs	r2, #36	@ 0x24
 80014c0:	2100      	movs	r1, #0
 80014c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	0018      	movs	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b002      	add	sp, #8
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	46c0      	nop			@ (mov r8, r8)
 80014d0:	bffdfff8 	.word	0xbffdfff8
 80014d4:	ffff800f 	.word	0xffff800f

080014d8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014e6:	2317      	movs	r3, #23
 80014e8:	18fb      	adds	r3, r7, r3
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2224      	movs	r2, #36	@ 0x24
 80014f2:	5c9b      	ldrb	r3, [r3, r2]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d101      	bne.n	80014fc <HAL_DMA_Start_IT+0x24>
 80014f8:	2302      	movs	r3, #2
 80014fa:	e070      	b.n	80015de <HAL_DMA_Start_IT+0x106>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2224      	movs	r2, #36	@ 0x24
 8001500:	2101      	movs	r1, #1
 8001502:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2225      	movs	r2, #37	@ 0x25
 8001508:	5c9b      	ldrb	r3, [r3, r2]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b01      	cmp	r3, #1
 800150e:	d157      	bne.n	80015c0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2225      	movs	r2, #37	@ 0x25
 8001514:	2102      	movs	r1, #2
 8001516:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2101      	movs	r1, #1
 800152a:	438a      	bics	r2, r1
 800152c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f000 f909 	bl	800174c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	2b00      	cmp	r3, #0
 8001540:	d008      	beq.n	8001554 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	210e      	movs	r1, #14
 800154e:	430a      	orrs	r2, r1
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	e00f      	b.n	8001574 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2104      	movs	r1, #4
 8001560:	438a      	bics	r2, r1
 8001562:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	210a      	movs	r1, #10
 8001570:	430a      	orrs	r2, r1
 8001572:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	2380      	movs	r3, #128	@ 0x80
 800157c:	025b      	lsls	r3, r3, #9
 800157e:	4013      	ands	r3, r2
 8001580:	d008      	beq.n	8001594 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158c:	2180      	movs	r1, #128	@ 0x80
 800158e:	0049      	lsls	r1, r1, #1
 8001590:	430a      	orrs	r2, r1
 8001592:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001598:	2b00      	cmp	r3, #0
 800159a:	d008      	beq.n	80015ae <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015a6:	2180      	movs	r1, #128	@ 0x80
 80015a8:	0049      	lsls	r1, r1, #1
 80015aa:	430a      	orrs	r2, r1
 80015ac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2101      	movs	r1, #1
 80015ba:	430a      	orrs	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	e007      	b.n	80015d0 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2224      	movs	r2, #36	@ 0x24
 80015c4:	2100      	movs	r1, #0
 80015c6:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80015c8:	2317      	movs	r3, #23
 80015ca:	18fb      	adds	r3, r7, r3
 80015cc:	2202      	movs	r2, #2
 80015ce:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2224      	movs	r2, #36	@ 0x24
 80015d4:	2100      	movs	r1, #0
 80015d6:	5499      	strb	r1, [r3, r2]

  return status;
 80015d8:	2317      	movs	r3, #23
 80015da:	18fb      	adds	r3, r7, r3
 80015dc:	781b      	ldrb	r3, [r3, #0]
}
 80015de:	0018      	movs	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b006      	add	sp, #24
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 80015f0:	4b55      	ldr	r3, [pc, #340]	@ (8001748 <HAL_DMA_IRQHandler+0x160>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	221c      	movs	r2, #28
 8001604:	4013      	ands	r3, r2
 8001606:	2204      	movs	r2, #4
 8001608:	409a      	lsls	r2, r3
 800160a:	0013      	movs	r3, r2
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	4013      	ands	r3, r2
 8001610:	d027      	beq.n	8001662 <HAL_DMA_IRQHandler+0x7a>
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	2204      	movs	r2, #4
 8001616:	4013      	ands	r3, r2
 8001618:	d023      	beq.n	8001662 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2220      	movs	r2, #32
 8001622:	4013      	ands	r3, r2
 8001624:	d107      	bne.n	8001636 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2104      	movs	r1, #4
 8001632:	438a      	bics	r2, r1
 8001634:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8001636:	4b44      	ldr	r3, [pc, #272]	@ (8001748 <HAL_DMA_IRQHandler+0x160>)
 8001638:	6859      	ldr	r1, [r3, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	221c      	movs	r2, #28
 8001640:	4013      	ands	r3, r2
 8001642:	2204      	movs	r2, #4
 8001644:	409a      	lsls	r2, r3
 8001646:	4b40      	ldr	r3, [pc, #256]	@ (8001748 <HAL_DMA_IRQHandler+0x160>)
 8001648:	430a      	orrs	r2, r1
 800164a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001650:	2b00      	cmp	r3, #0
 8001652:	d100      	bne.n	8001656 <HAL_DMA_IRQHandler+0x6e>
 8001654:	e073      	b.n	800173e <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	0010      	movs	r0, r2
 800165e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001660:	e06d      	b.n	800173e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	221c      	movs	r2, #28
 8001668:	4013      	ands	r3, r2
 800166a:	2202      	movs	r2, #2
 800166c:	409a      	lsls	r2, r3
 800166e:	0013      	movs	r3, r2
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	4013      	ands	r3, r2
 8001674:	d02e      	beq.n	80016d4 <HAL_DMA_IRQHandler+0xec>
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	2202      	movs	r2, #2
 800167a:	4013      	ands	r3, r2
 800167c:	d02a      	beq.n	80016d4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2220      	movs	r2, #32
 8001686:	4013      	ands	r3, r2
 8001688:	d10b      	bne.n	80016a2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	210a      	movs	r1, #10
 8001696:	438a      	bics	r2, r1
 8001698:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2225      	movs	r2, #37	@ 0x25
 800169e:	2101      	movs	r1, #1
 80016a0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80016a2:	4b29      	ldr	r3, [pc, #164]	@ (8001748 <HAL_DMA_IRQHandler+0x160>)
 80016a4:	6859      	ldr	r1, [r3, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	221c      	movs	r2, #28
 80016ac:	4013      	ands	r3, r2
 80016ae:	2202      	movs	r2, #2
 80016b0:	409a      	lsls	r2, r3
 80016b2:	4b25      	ldr	r3, [pc, #148]	@ (8001748 <HAL_DMA_IRQHandler+0x160>)
 80016b4:	430a      	orrs	r2, r1
 80016b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2224      	movs	r2, #36	@ 0x24
 80016bc:	2100      	movs	r1, #0
 80016be:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d03a      	beq.n	800173e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	0010      	movs	r0, r2
 80016d0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80016d2:	e034      	b.n	800173e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d8:	221c      	movs	r2, #28
 80016da:	4013      	ands	r3, r2
 80016dc:	2208      	movs	r2, #8
 80016de:	409a      	lsls	r2, r3
 80016e0:	0013      	movs	r3, r2
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	4013      	ands	r3, r2
 80016e6:	d02b      	beq.n	8001740 <HAL_DMA_IRQHandler+0x158>
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	2208      	movs	r2, #8
 80016ec:	4013      	ands	r3, r2
 80016ee:	d027      	beq.n	8001740 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	210e      	movs	r1, #14
 80016fc:	438a      	bics	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001700:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <HAL_DMA_IRQHandler+0x160>)
 8001702:	6859      	ldr	r1, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001708:	221c      	movs	r2, #28
 800170a:	4013      	ands	r3, r2
 800170c:	2201      	movs	r2, #1
 800170e:	409a      	lsls	r2, r3
 8001710:	4b0d      	ldr	r3, [pc, #52]	@ (8001748 <HAL_DMA_IRQHandler+0x160>)
 8001712:	430a      	orrs	r2, r1
 8001714:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2225      	movs	r2, #37	@ 0x25
 8001720:	2101      	movs	r1, #1
 8001722:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2224      	movs	r2, #36	@ 0x24
 8001728:	2100      	movs	r1, #0
 800172a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	0010      	movs	r0, r2
 800173c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800173e:	46c0      	nop			@ (mov r8, r8)
 8001740:	46c0      	nop			@ (mov r8, r8)
}
 8001742:	46bd      	mov	sp, r7
 8001744:	b004      	add	sp, #16
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40020000 	.word	0x40020000

0800174c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
 8001758:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001762:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001768:	2b00      	cmp	r3, #0
 800176a:	d004      	beq.n	8001776 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001774:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001776:	4b14      	ldr	r3, [pc, #80]	@ (80017c8 <DMA_SetConfig+0x7c>)
 8001778:	6859      	ldr	r1, [r3, #4]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	221c      	movs	r2, #28
 8001780:	4013      	ands	r3, r2
 8001782:	2201      	movs	r2, #1
 8001784:	409a      	lsls	r2, r3
 8001786:	4b10      	ldr	r3, [pc, #64]	@ (80017c8 <DMA_SetConfig+0x7c>)
 8001788:	430a      	orrs	r2, r1
 800178a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b10      	cmp	r3, #16
 800179a:	d108      	bne.n	80017ae <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017ac:	e007      	b.n	80017be <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	60da      	str	r2, [r3, #12]
}
 80017be:	46c0      	nop			@ (mov r8, r8)
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b004      	add	sp, #16
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	46c0      	nop			@ (mov r8, r8)
 80017c8:	40020000 	.word	0x40020000

080017cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	001a      	movs	r2, r3
 80017da:	23ff      	movs	r3, #255	@ 0xff
 80017dc:	4013      	ands	r3, r2
 80017de:	3b08      	subs	r3, #8
 80017e0:	2114      	movs	r1, #20
 80017e2:	0018      	movs	r0, r3
 80017e4:	f7fe fc90 	bl	8000108 <__udivsi3>
 80017e8:	0003      	movs	r3, r0
 80017ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f0:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 80017f2:	4a0a      	ldr	r2, [pc, #40]	@ (800181c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80017f4:	4694      	mov	ip, r2
 80017f6:	4463      	add	r3, ip
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	001a      	movs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a07      	ldr	r2, [pc, #28]	@ (8001820 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001804:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	221c      	movs	r2, #28
 800180a:	4013      	ands	r3, r2
 800180c:	2201      	movs	r2, #1
 800180e:	409a      	lsls	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001814:	46c0      	nop			@ (mov r8, r8)
 8001816:	46bd      	mov	sp, r7
 8001818:	b004      	add	sp, #16
 800181a:	bd80      	pop	{r7, pc}
 800181c:	10008200 	.word	0x10008200
 8001820:	40020880 	.word	0x40020880

08001824 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	22ff      	movs	r2, #255	@ 0xff
 8001832:	4013      	ands	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4a0a      	ldr	r2, [pc, #40]	@ (8001864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800183a:	4694      	mov	ip, r2
 800183c:	4463      	add	r3, ip
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	001a      	movs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a07      	ldr	r2, [pc, #28]	@ (8001868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800184a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	3b01      	subs	r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	4013      	ands	r3, r2
 8001854:	2201      	movs	r2, #1
 8001856:	409a      	lsls	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800185c:	46c0      	nop			@ (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	b004      	add	sp, #16
 8001862:	bd80      	pop	{r7, pc}
 8001864:	1000823f 	.word	0x1000823f
 8001868:	40020940 	.word	0x40020940

0800186c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800187a:	e14d      	b.n	8001b18 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2101      	movs	r1, #1
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4091      	lsls	r1, r2
 8001886:	000a      	movs	r2, r1
 8001888:	4013      	ands	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d100      	bne.n	8001894 <HAL_GPIO_Init+0x28>
 8001892:	e13e      	b.n	8001b12 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x38>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b12      	cmp	r3, #18
 80018a2:	d125      	bne.n	80018f0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	08da      	lsrs	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3208      	adds	r2, #8
 80018ac:	0092      	lsls	r2, r2, #2
 80018ae:	58d3      	ldr	r3, [r2, r3]
 80018b0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	2207      	movs	r2, #7
 80018b6:	4013      	ands	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	220f      	movs	r2, #15
 80018bc:	409a      	lsls	r2, r3
 80018be:	0013      	movs	r3, r2
 80018c0:	43da      	mvns	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	4013      	ands	r3, r2
 80018c6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	220f      	movs	r2, #15
 80018ce:	401a      	ands	r2, r3
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	2107      	movs	r1, #7
 80018d4:	400b      	ands	r3, r1
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	409a      	lsls	r2, r3
 80018da:	0013      	movs	r3, r2
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	4313      	orrs	r3, r2
 80018e0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	08da      	lsrs	r2, r3, #3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3208      	adds	r2, #8
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	6979      	ldr	r1, [r7, #20]
 80018ee:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	409a      	lsls	r2, r3
 80018fe:	0013      	movs	r3, r2
 8001900:	43da      	mvns	r2, r3
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	4013      	ands	r3, r2
 8001906:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2203      	movs	r2, #3
 800190e:	401a      	ands	r2, r3
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	409a      	lsls	r2, r3
 8001916:	0013      	movs	r3, r2
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	4313      	orrs	r3, r2
 800191c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d00b      	beq.n	8001944 <HAL_GPIO_Init+0xd8>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b02      	cmp	r3, #2
 8001932:	d007      	beq.n	8001944 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001938:	2b11      	cmp	r3, #17
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b12      	cmp	r3, #18
 8001942:	d130      	bne.n	80019a6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	2203      	movs	r2, #3
 8001950:	409a      	lsls	r2, r3
 8001952:	0013      	movs	r3, r2
 8001954:	43da      	mvns	r2, r3
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	4013      	ands	r3, r2
 800195a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	409a      	lsls	r2, r3
 8001966:	0013      	movs	r3, r2
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	4313      	orrs	r3, r2
 800196c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800197a:	2201      	movs	r2, #1
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	409a      	lsls	r2, r3
 8001980:	0013      	movs	r3, r2
 8001982:	43da      	mvns	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	4013      	ands	r3, r2
 8001988:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	091b      	lsrs	r3, r3, #4
 8001990:	2201      	movs	r2, #1
 8001992:	401a      	ands	r2, r3
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	409a      	lsls	r2, r3
 8001998:	0013      	movs	r3, r2
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4313      	orrs	r3, r2
 800199e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d017      	beq.n	80019de <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	2203      	movs	r2, #3
 80019ba:	409a      	lsls	r2, r3
 80019bc:	0013      	movs	r3, r2
 80019be:	43da      	mvns	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	4013      	ands	r3, r2
 80019c4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	409a      	lsls	r2, r3
 80019d0:	0013      	movs	r3, r2
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	2380      	movs	r3, #128	@ 0x80
 80019e4:	055b      	lsls	r3, r3, #21
 80019e6:	4013      	ands	r3, r2
 80019e8:	d100      	bne.n	80019ec <HAL_GPIO_Init+0x180>
 80019ea:	e092      	b.n	8001b12 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80019ec:	4a50      	ldr	r2, [pc, #320]	@ (8001b30 <HAL_GPIO_Init+0x2c4>)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3318      	adds	r3, #24
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	589b      	ldr	r3, [r3, r2]
 80019f8:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	2203      	movs	r2, #3
 80019fe:	4013      	ands	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	220f      	movs	r2, #15
 8001a04:	409a      	lsls	r2, r3
 8001a06:	0013      	movs	r3, r2
 8001a08:	43da      	mvns	r2, r3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	23a0      	movs	r3, #160	@ 0xa0
 8001a14:	05db      	lsls	r3, r3, #23
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d013      	beq.n	8001a42 <HAL_GPIO_Init+0x1d6>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a45      	ldr	r2, [pc, #276]	@ (8001b34 <HAL_GPIO_Init+0x2c8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d00d      	beq.n	8001a3e <HAL_GPIO_Init+0x1d2>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a44      	ldr	r2, [pc, #272]	@ (8001b38 <HAL_GPIO_Init+0x2cc>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d007      	beq.n	8001a3a <HAL_GPIO_Init+0x1ce>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a43      	ldr	r2, [pc, #268]	@ (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d101      	bne.n	8001a36 <HAL_GPIO_Init+0x1ca>
 8001a32:	2305      	movs	r3, #5
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x1d8>
 8001a36:	2306      	movs	r3, #6
 8001a38:	e004      	b.n	8001a44 <HAL_GPIO_Init+0x1d8>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_Init+0x1d8>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_GPIO_Init+0x1d8>
 8001a42:	2300      	movs	r3, #0
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	2103      	movs	r1, #3
 8001a48:	400a      	ands	r2, r1
 8001a4a:	00d2      	lsls	r2, r2, #3
 8001a4c:	4093      	lsls	r3, r2
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001a54:	4936      	ldr	r1, [pc, #216]	@ (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3318      	adds	r3, #24
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001a62:	4a33      	ldr	r2, [pc, #204]	@ (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001a64:	2380      	movs	r3, #128	@ 0x80
 8001a66:	58d3      	ldr	r3, [r2, r3]
 8001a68:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	43da      	mvns	r2, r3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	4013      	ands	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	2380      	movs	r3, #128	@ 0x80
 8001a7a:	025b      	lsls	r3, r3, #9
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d003      	beq.n	8001a88 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001a88:	4929      	ldr	r1, [pc, #164]	@ (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001a8a:	2280      	movs	r2, #128	@ 0x80
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001a90:	4a27      	ldr	r2, [pc, #156]	@ (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001a92:	2384      	movs	r3, #132	@ 0x84
 8001a94:	58d3      	ldr	r3, [r2, r3]
 8001a96:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	2380      	movs	r3, #128	@ 0x80
 8001aa8:	029b      	lsls	r3, r3, #10
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001ab6:	491e      	ldr	r1, [pc, #120]	@ (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001ab8:	2284      	movs	r2, #132	@ 0x84
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001abe:	4b1c      	ldr	r3, [pc, #112]	@ (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	4013      	ands	r3, r2
 8001acc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	2380      	movs	r3, #128	@ 0x80
 8001ad4:	035b      	lsls	r3, r3, #13
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001ae2:	4b13      	ldr	r3, [pc, #76]	@ (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	43da      	mvns	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	4013      	ands	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	2380      	movs	r3, #128	@ 0x80
 8001afe:	039b      	lsls	r3, r3, #14
 8001b00:	4013      	ands	r3, r2
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001b0c:	4b08      	ldr	r3, [pc, #32]	@ (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	3301      	adds	r3, #1
 8001b16:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	40da      	lsrs	r2, r3
 8001b20:	1e13      	subs	r3, r2, #0
 8001b22:	d000      	beq.n	8001b26 <HAL_GPIO_Init+0x2ba>
 8001b24:	e6aa      	b.n	800187c <HAL_GPIO_Init+0x10>
  }
}
 8001b26:	46c0      	nop			@ (mov r8, r8)
 8001b28:	46c0      	nop			@ (mov r8, r8)
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b006      	add	sp, #24
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40021800 	.word	0x40021800
 8001b34:	50000400 	.word	0x50000400
 8001b38:	50000800 	.word	0x50000800
 8001b3c:	50001400 	.word	0x50001400

08001b40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	000a      	movs	r2, r1
 8001b4a:	1cbb      	adds	r3, r7, #2
 8001b4c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	1cba      	adds	r2, r7, #2
 8001b54:	8812      	ldrh	r2, [r2, #0]
 8001b56:	4013      	ands	r3, r2
 8001b58:	d004      	beq.n	8001b64 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b5a:	230f      	movs	r3, #15
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
 8001b62:	e003      	b.n	8001b6c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b64:	230f      	movs	r3, #15
 8001b66:	18fb      	adds	r3, r7, r3
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001b6c:	230f      	movs	r3, #15
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	781b      	ldrb	r3, [r3, #0]
}
 8001b72:	0018      	movs	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b004      	add	sp, #16
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	0008      	movs	r0, r1
 8001b84:	0011      	movs	r1, r2
 8001b86:	1cbb      	adds	r3, r7, #2
 8001b88:	1c02      	adds	r2, r0, #0
 8001b8a:	801a      	strh	r2, [r3, #0]
 8001b8c:	1c7b      	adds	r3, r7, #1
 8001b8e:	1c0a      	adds	r2, r1, #0
 8001b90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b92:	1c7b      	adds	r3, r7, #1
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d004      	beq.n	8001ba4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b9a:	1cbb      	adds	r3, r7, #2
 8001b9c:	881a      	ldrh	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ba2:	e003      	b.n	8001bac <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ba4:	1cbb      	adds	r3, r7, #2
 8001ba6:	881a      	ldrh	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bac:	46c0      	nop			@ (mov r8, r8)
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b002      	add	sp, #8
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	000a      	movs	r2, r1
 8001bbe:	1cbb      	adds	r3, r7, #2
 8001bc0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bc8:	1cbb      	adds	r3, r7, #2
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	041a      	lsls	r2, r3, #16
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	1cb9      	adds	r1, r7, #2
 8001bd8:	8809      	ldrh	r1, [r1, #0]
 8001bda:	400b      	ands	r3, r1
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	619a      	str	r2, [r3, #24]
}
 8001be2:	46c0      	nop			@ (mov r8, r8)
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b004      	add	sp, #16
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e08f      	b.n	8001d1e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2241      	movs	r2, #65	@ 0x41
 8001c02:	5c9b      	ldrb	r3, [r3, r2]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d107      	bne.n	8001c1a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2240      	movs	r2, #64	@ 0x40
 8001c0e:	2100      	movs	r1, #0
 8001c10:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	0018      	movs	r0, r3
 8001c16:	f7ff f913 	bl	8000e40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2241      	movs	r2, #65	@ 0x41
 8001c1e:	2124      	movs	r1, #36	@ 0x24
 8001c20:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	438a      	bics	r2, r1
 8001c30:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	493b      	ldr	r1, [pc, #236]	@ (8001d28 <HAL_I2C_Init+0x13c>)
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4938      	ldr	r1, [pc, #224]	@ (8001d2c <HAL_I2C_Init+0x140>)
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d108      	bne.n	8001c6a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2180      	movs	r1, #128	@ 0x80
 8001c62:	0209      	lsls	r1, r1, #8
 8001c64:	430a      	orrs	r2, r1
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	e007      	b.n	8001c7a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2184      	movs	r1, #132	@ 0x84
 8001c74:	0209      	lsls	r1, r1, #8
 8001c76:	430a      	orrs	r2, r1
 8001c78:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d109      	bne.n	8001c96 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2180      	movs	r1, #128	@ 0x80
 8001c8e:	0109      	lsls	r1, r1, #4
 8001c90:	430a      	orrs	r2, r1
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	e007      	b.n	8001ca6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4923      	ldr	r1, [pc, #140]	@ (8001d30 <HAL_I2C_Init+0x144>)
 8001ca2:	400a      	ands	r2, r1
 8001ca4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4920      	ldr	r1, [pc, #128]	@ (8001d34 <HAL_I2C_Init+0x148>)
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	491a      	ldr	r1, [pc, #104]	@ (8001d2c <HAL_I2C_Init+0x140>)
 8001cc2:	400a      	ands	r2, r1
 8001cc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69d9      	ldr	r1, [r3, #28]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a1a      	ldr	r2, [r3, #32]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2241      	movs	r2, #65	@ 0x41
 8001d0a:	2120      	movs	r1, #32
 8001d0c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2242      	movs	r2, #66	@ 0x42
 8001d18:	2100      	movs	r1, #0
 8001d1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	0018      	movs	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b002      	add	sp, #8
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	f0ffffff 	.word	0xf0ffffff
 8001d2c:	ffff7fff 	.word	0xffff7fff
 8001d30:	fffff7ff 	.word	0xfffff7ff
 8001d34:	02008000 	.word	0x02008000

08001d38 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b089      	sub	sp, #36	@ 0x24
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	0008      	movs	r0, r1
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	0019      	movs	r1, r3
 8001d46:	230a      	movs	r3, #10
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	1c02      	adds	r2, r0, #0
 8001d4c:	801a      	strh	r2, [r3, #0]
 8001d4e:	2308      	movs	r3, #8
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	1c0a      	adds	r2, r1, #0
 8001d54:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2241      	movs	r2, #65	@ 0x41
 8001d5a:	5c9b      	ldrb	r3, [r3, r2]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b20      	cmp	r3, #32
 8001d60:	d000      	beq.n	8001d64 <HAL_I2C_Master_Transmit+0x2c>
 8001d62:	e10a      	b.n	8001f7a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2240      	movs	r2, #64	@ 0x40
 8001d68:	5c9b      	ldrb	r3, [r3, r2]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_I2C_Master_Transmit+0x3a>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e104      	b.n	8001f7c <HAL_I2C_Master_Transmit+0x244>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2240      	movs	r2, #64	@ 0x40
 8001d76:	2101      	movs	r1, #1
 8001d78:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d7a:	f7ff fa3b 	bl	80011f4 <HAL_GetTick>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d82:	2380      	movs	r3, #128	@ 0x80
 8001d84:	0219      	lsls	r1, r3, #8
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	2319      	movs	r3, #25
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f000 fa26 	bl	80021e0 <I2C_WaitOnFlagUntilTimeout>
 8001d94:	1e03      	subs	r3, r0, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0ef      	b.n	8001f7c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2241      	movs	r2, #65	@ 0x41
 8001da0:	2121      	movs	r1, #33	@ 0x21
 8001da2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2242      	movs	r2, #66	@ 0x42
 8001da8:	2110      	movs	r1, #16
 8001daa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2208      	movs	r2, #8
 8001dbc:	18ba      	adds	r2, r7, r2
 8001dbe:	8812      	ldrh	r2, [r2, #0]
 8001dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	2bff      	cmp	r3, #255	@ 0xff
 8001dd0:	d906      	bls.n	8001de0 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	22ff      	movs	r2, #255	@ 0xff
 8001dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001dd8:	2380      	movs	r3, #128	@ 0x80
 8001dda:	045b      	lsls	r3, r3, #17
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	e007      	b.n	8001df0 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001dea:	2380      	movs	r3, #128	@ 0x80
 8001dec:	049b      	lsls	r3, r3, #18
 8001dee:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d027      	beq.n	8001e48 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfc:	781a      	ldrb	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e20:	3b01      	subs	r3, #1
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	3301      	adds	r3, #1
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	697c      	ldr	r4, [r7, #20]
 8001e34:	230a      	movs	r3, #10
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	8819      	ldrh	r1, [r3, #0]
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	4b51      	ldr	r3, [pc, #324]	@ (8001f84 <HAL_I2C_Master_Transmit+0x24c>)
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	0023      	movs	r3, r4
 8001e42:	f000 fc45 	bl	80026d0 <I2C_TransferConfig>
 8001e46:	e06f      	b.n	8001f28 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	697c      	ldr	r4, [r7, #20]
 8001e50:	230a      	movs	r3, #10
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	8819      	ldrh	r1, [r3, #0]
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	4b4a      	ldr	r3, [pc, #296]	@ (8001f84 <HAL_I2C_Master_Transmit+0x24c>)
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	0023      	movs	r3, r4
 8001e5e:	f000 fc37 	bl	80026d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001e62:	e061      	b.n	8001f28 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f000 fa10 	bl	8002290 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e70:	1e03      	subs	r3, r0, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e081      	b.n	8001f7c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d03a      	beq.n	8001f28 <HAL_I2C_Master_Transmit+0x1f0>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d136      	bne.n	8001f28 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001eba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	0013      	movs	r3, r2
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2180      	movs	r1, #128	@ 0x80
 8001ec8:	f000 f98a 	bl	80021e0 <I2C_WaitOnFlagUntilTimeout>
 8001ecc:	1e03      	subs	r3, r0, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e053      	b.n	8001f7c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2bff      	cmp	r3, #255	@ 0xff
 8001edc:	d911      	bls.n	8001f02 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	22ff      	movs	r2, #255	@ 0xff
 8001ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	2380      	movs	r3, #128	@ 0x80
 8001eec:	045c      	lsls	r4, r3, #17
 8001eee:	230a      	movs	r3, #10
 8001ef0:	18fb      	adds	r3, r7, r3
 8001ef2:	8819      	ldrh	r1, [r3, #0]
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	0023      	movs	r3, r4
 8001efc:	f000 fbe8 	bl	80026d0 <I2C_TransferConfig>
 8001f00:	e012      	b.n	8001f28 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	2380      	movs	r3, #128	@ 0x80
 8001f14:	049c      	lsls	r4, r3, #18
 8001f16:	230a      	movs	r3, #10
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	8819      	ldrh	r1, [r3, #0]
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	0023      	movs	r3, r4
 8001f24:	f000 fbd4 	bl	80026d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d198      	bne.n	8001e64 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f000 f9ef 	bl	800231c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f3e:	1e03      	subs	r3, r0, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e01a      	b.n	8001f7c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	490b      	ldr	r1, [pc, #44]	@ (8001f88 <HAL_I2C_Master_Transmit+0x250>)
 8001f5a:	400a      	ands	r2, r1
 8001f5c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2241      	movs	r2, #65	@ 0x41
 8001f62:	2120      	movs	r1, #32
 8001f64:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2242      	movs	r2, #66	@ 0x42
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2240      	movs	r2, #64	@ 0x40
 8001f72:	2100      	movs	r1, #0
 8001f74:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e000      	b.n	8001f7c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8001f7a:	2302      	movs	r3, #2
  }
}
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b007      	add	sp, #28
 8001f82:	bd90      	pop	{r4, r7, pc}
 8001f84:	80002000 	.word	0x80002000
 8001f88:	fe00e800 	.word	0xfe00e800

08001f8c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b089      	sub	sp, #36	@ 0x24
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	0008      	movs	r0, r1
 8001f96:	607a      	str	r2, [r7, #4]
 8001f98:	0019      	movs	r1, r3
 8001f9a:	230a      	movs	r3, #10
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	1c02      	adds	r2, r0, #0
 8001fa0:	801a      	strh	r2, [r3, #0]
 8001fa2:	2308      	movs	r3, #8
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	1c0a      	adds	r2, r1, #0
 8001fa8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2241      	movs	r2, #65	@ 0x41
 8001fae:	5c9b      	ldrb	r3, [r3, r2]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b20      	cmp	r3, #32
 8001fb4:	d000      	beq.n	8001fb8 <HAL_I2C_Master_Receive+0x2c>
 8001fb6:	e0e8      	b.n	800218a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2240      	movs	r2, #64	@ 0x40
 8001fbc:	5c9b      	ldrb	r3, [r3, r2]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_I2C_Master_Receive+0x3a>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e0e2      	b.n	800218c <HAL_I2C_Master_Receive+0x200>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2240      	movs	r2, #64	@ 0x40
 8001fca:	2101      	movs	r1, #1
 8001fcc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fce:	f7ff f911 	bl	80011f4 <HAL_GetTick>
 8001fd2:	0003      	movs	r3, r0
 8001fd4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fd6:	2380      	movs	r3, #128	@ 0x80
 8001fd8:	0219      	lsls	r1, r3, #8
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2319      	movs	r3, #25
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f000 f8fc 	bl	80021e0 <I2C_WaitOnFlagUntilTimeout>
 8001fe8:	1e03      	subs	r3, r0, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0cd      	b.n	800218c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2241      	movs	r2, #65	@ 0x41
 8001ff4:	2122      	movs	r1, #34	@ 0x22
 8001ff6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2242      	movs	r2, #66	@ 0x42
 8001ffc:	2110      	movs	r1, #16
 8001ffe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2208      	movs	r2, #8
 8002010:	18ba      	adds	r2, r7, r2
 8002012:	8812      	ldrh	r2, [r2, #0]
 8002014:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002020:	b29b      	uxth	r3, r3
 8002022:	2bff      	cmp	r3, #255	@ 0xff
 8002024:	d911      	bls.n	800204a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	22ff      	movs	r2, #255	@ 0xff
 800202a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002030:	b2da      	uxtb	r2, r3
 8002032:	2380      	movs	r3, #128	@ 0x80
 8002034:	045c      	lsls	r4, r3, #17
 8002036:	230a      	movs	r3, #10
 8002038:	18fb      	adds	r3, r7, r3
 800203a:	8819      	ldrh	r1, [r3, #0]
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	4b55      	ldr	r3, [pc, #340]	@ (8002194 <HAL_I2C_Master_Receive+0x208>)
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	0023      	movs	r3, r4
 8002044:	f000 fb44 	bl	80026d0 <I2C_TransferConfig>
 8002048:	e076      	b.n	8002138 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800204e:	b29a      	uxth	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002058:	b2da      	uxtb	r2, r3
 800205a:	2380      	movs	r3, #128	@ 0x80
 800205c:	049c      	lsls	r4, r3, #18
 800205e:	230a      	movs	r3, #10
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	8819      	ldrh	r1, [r3, #0]
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	4b4b      	ldr	r3, [pc, #300]	@ (8002194 <HAL_I2C_Master_Receive+0x208>)
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	0023      	movs	r3, r4
 800206c:	f000 fb30 	bl	80026d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002070:	e062      	b.n	8002138 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	0018      	movs	r0, r3
 800207a:	f000 f993 	bl	80023a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800207e:	1e03      	subs	r3, r0, #0
 8002080:	d001      	beq.n	8002086 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e082      	b.n	800218c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002098:	1c5a      	adds	r2, r3, #1
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	3b01      	subs	r3, #1
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020bc:	b29b      	uxth	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d03a      	beq.n	8002138 <HAL_I2C_Master_Receive+0x1ac>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d136      	bne.n	8002138 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	0013      	movs	r3, r2
 80020d4:	2200      	movs	r2, #0
 80020d6:	2180      	movs	r1, #128	@ 0x80
 80020d8:	f000 f882 	bl	80021e0 <I2C_WaitOnFlagUntilTimeout>
 80020dc:	1e03      	subs	r3, r0, #0
 80020de:	d001      	beq.n	80020e4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e053      	b.n	800218c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	2bff      	cmp	r3, #255	@ 0xff
 80020ec:	d911      	bls.n	8002112 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	22ff      	movs	r2, #255	@ 0xff
 80020f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	2380      	movs	r3, #128	@ 0x80
 80020fc:	045c      	lsls	r4, r3, #17
 80020fe:	230a      	movs	r3, #10
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	8819      	ldrh	r1, [r3, #0]
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	2300      	movs	r3, #0
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	0023      	movs	r3, r4
 800210c:	f000 fae0 	bl	80026d0 <I2C_TransferConfig>
 8002110:	e012      	b.n	8002138 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002120:	b2da      	uxtb	r2, r3
 8002122:	2380      	movs	r3, #128	@ 0x80
 8002124:	049c      	lsls	r4, r3, #18
 8002126:	230a      	movs	r3, #10
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	8819      	ldrh	r1, [r3, #0]
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	2300      	movs	r3, #0
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	0023      	movs	r3, r4
 8002134:	f000 facc 	bl	80026d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800213c:	b29b      	uxth	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d197      	bne.n	8002072 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	0018      	movs	r0, r3
 800214a:	f000 f8e7 	bl	800231c <I2C_WaitOnSTOPFlagUntilTimeout>
 800214e:	1e03      	subs	r3, r0, #0
 8002150:	d001      	beq.n	8002156 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e01a      	b.n	800218c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2220      	movs	r2, #32
 800215c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	490b      	ldr	r1, [pc, #44]	@ (8002198 <HAL_I2C_Master_Receive+0x20c>)
 800216a:	400a      	ands	r2, r1
 800216c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2241      	movs	r2, #65	@ 0x41
 8002172:	2120      	movs	r1, #32
 8002174:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2242      	movs	r2, #66	@ 0x42
 800217a:	2100      	movs	r1, #0
 800217c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2240      	movs	r2, #64	@ 0x40
 8002182:	2100      	movs	r1, #0
 8002184:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	e000      	b.n	800218c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800218a:	2302      	movs	r3, #2
  }
}
 800218c:	0018      	movs	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	b007      	add	sp, #28
 8002192:	bd90      	pop	{r4, r7, pc}
 8002194:	80002400 	.word	0x80002400
 8002198:	fe00e800 	.word	0xfe00e800

0800219c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	2202      	movs	r2, #2
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d103      	bne.n	80021ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2200      	movs	r2, #0
 80021b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2201      	movs	r2, #1
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d007      	beq.n	80021d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2101      	movs	r1, #1
 80021d4:	430a      	orrs	r2, r1
 80021d6:	619a      	str	r2, [r3, #24]
  }
}
 80021d8:	46c0      	nop			@ (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	b002      	add	sp, #8
 80021de:	bd80      	pop	{r7, pc}

080021e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	1dfb      	adds	r3, r7, #7
 80021ee:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021f0:	e03a      	b.n	8002268 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	6839      	ldr	r1, [r7, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	0018      	movs	r0, r3
 80021fa:	f000 f971 	bl	80024e0 <I2C_IsErrorOccurred>
 80021fe:	1e03      	subs	r3, r0, #0
 8002200:	d001      	beq.n	8002206 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e040      	b.n	8002288 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	3301      	adds	r3, #1
 800220a:	d02d      	beq.n	8002268 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800220c:	f7fe fff2 	bl	80011f4 <HAL_GetTick>
 8002210:	0002      	movs	r2, r0
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d302      	bcc.n	8002222 <I2C_WaitOnFlagUntilTimeout+0x42>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d122      	bne.n	8002268 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	4013      	ands	r3, r2
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	425a      	negs	r2, r3
 8002232:	4153      	adcs	r3, r2
 8002234:	b2db      	uxtb	r3, r3
 8002236:	001a      	movs	r2, r3
 8002238:	1dfb      	adds	r3, r7, #7
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d113      	bne.n	8002268 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002244:	2220      	movs	r2, #32
 8002246:	431a      	orrs	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2241      	movs	r2, #65	@ 0x41
 8002250:	2120      	movs	r1, #32
 8002252:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2242      	movs	r2, #66	@ 0x42
 8002258:	2100      	movs	r1, #0
 800225a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2240      	movs	r2, #64	@ 0x40
 8002260:	2100      	movs	r1, #0
 8002262:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e00f      	b.n	8002288 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	4013      	ands	r3, r2
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	425a      	negs	r2, r3
 8002278:	4153      	adcs	r3, r2
 800227a:	b2db      	uxtb	r3, r3
 800227c:	001a      	movs	r2, r3
 800227e:	1dfb      	adds	r3, r7, #7
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d0b5      	beq.n	80021f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	0018      	movs	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	b004      	add	sp, #16
 800228e:	bd80      	pop	{r7, pc}

08002290 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800229c:	e032      	b.n	8002304 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	0018      	movs	r0, r3
 80022a6:	f000 f91b 	bl	80024e0 <I2C_IsErrorOccurred>
 80022aa:	1e03      	subs	r3, r0, #0
 80022ac:	d001      	beq.n	80022b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e030      	b.n	8002314 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	3301      	adds	r3, #1
 80022b6:	d025      	beq.n	8002304 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022b8:	f7fe ff9c 	bl	80011f4 <HAL_GetTick>
 80022bc:	0002      	movs	r2, r0
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d302      	bcc.n	80022ce <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d11a      	bne.n	8002304 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	2202      	movs	r2, #2
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d013      	beq.n	8002304 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e0:	2220      	movs	r2, #32
 80022e2:	431a      	orrs	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2241      	movs	r2, #65	@ 0x41
 80022ec:	2120      	movs	r1, #32
 80022ee:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2242      	movs	r2, #66	@ 0x42
 80022f4:	2100      	movs	r1, #0
 80022f6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2240      	movs	r2, #64	@ 0x40
 80022fc:	2100      	movs	r1, #0
 80022fe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e007      	b.n	8002314 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2202      	movs	r2, #2
 800230c:	4013      	ands	r3, r2
 800230e:	2b02      	cmp	r3, #2
 8002310:	d1c5      	bne.n	800229e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	0018      	movs	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	b004      	add	sp, #16
 800231a:	bd80      	pop	{r7, pc}

0800231c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002328:	e02f      	b.n	800238a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	0018      	movs	r0, r3
 8002332:	f000 f8d5 	bl	80024e0 <I2C_IsErrorOccurred>
 8002336:	1e03      	subs	r3, r0, #0
 8002338:	d001      	beq.n	800233e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e02d      	b.n	800239a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800233e:	f7fe ff59 	bl	80011f4 <HAL_GetTick>
 8002342:	0002      	movs	r2, r0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	429a      	cmp	r2, r3
 800234c:	d302      	bcc.n	8002354 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d11a      	bne.n	800238a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2220      	movs	r2, #32
 800235c:	4013      	ands	r3, r2
 800235e:	2b20      	cmp	r3, #32
 8002360:	d013      	beq.n	800238a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002366:	2220      	movs	r2, #32
 8002368:	431a      	orrs	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2241      	movs	r2, #65	@ 0x41
 8002372:	2120      	movs	r1, #32
 8002374:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2242      	movs	r2, #66	@ 0x42
 800237a:	2100      	movs	r1, #0
 800237c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2240      	movs	r2, #64	@ 0x40
 8002382:	2100      	movs	r1, #0
 8002384:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e007      	b.n	800239a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	2220      	movs	r2, #32
 8002392:	4013      	ands	r3, r2
 8002394:	2b20      	cmp	r3, #32
 8002396:	d1c8      	bne.n	800232a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	0018      	movs	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	b004      	add	sp, #16
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b0:	2317      	movs	r3, #23
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80023b8:	e07b      	b.n	80024b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	0018      	movs	r0, r3
 80023c2:	f000 f88d 	bl	80024e0 <I2C_IsErrorOccurred>
 80023c6:	1e03      	subs	r3, r0, #0
 80023c8:	d003      	beq.n	80023d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80023ca:	2317      	movs	r3, #23
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	2201      	movs	r2, #1
 80023d0:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	2220      	movs	r2, #32
 80023da:	4013      	ands	r3, r2
 80023dc:	2b20      	cmp	r3, #32
 80023de:	d140      	bne.n	8002462 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80023e0:	2117      	movs	r1, #23
 80023e2:	187b      	adds	r3, r7, r1
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d13b      	bne.n	8002462 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	2204      	movs	r2, #4
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d106      	bne.n	8002406 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002400:	187b      	adds	r3, r7, r1
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	2210      	movs	r2, #16
 800240e:	4013      	ands	r3, r2
 8002410:	2b10      	cmp	r3, #16
 8002412:	d123      	bne.n	800245c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2210      	movs	r2, #16
 800241a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2204      	movs	r2, #4
 8002420:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2220      	movs	r2, #32
 8002428:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4929      	ldr	r1, [pc, #164]	@ (80024dc <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8002436:	400a      	ands	r2, r1
 8002438:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2241      	movs	r2, #65	@ 0x41
 800243e:	2120      	movs	r1, #32
 8002440:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2242      	movs	r2, #66	@ 0x42
 8002446:	2100      	movs	r1, #0
 8002448:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2240      	movs	r2, #64	@ 0x40
 800244e:	2100      	movs	r1, #0
 8002450:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002452:	2317      	movs	r3, #23
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]
 800245a:	e002      	b.n	8002462 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002462:	f7fe fec7 	bl	80011f4 <HAL_GetTick>
 8002466:	0002      	movs	r2, r0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	429a      	cmp	r2, r3
 8002470:	d302      	bcc.n	8002478 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d11c      	bne.n	80024b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8002478:	2017      	movs	r0, #23
 800247a:	183b      	adds	r3, r7, r0
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d117      	bne.n	80024b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	2204      	movs	r2, #4
 800248a:	4013      	ands	r3, r2
 800248c:	2b04      	cmp	r3, #4
 800248e:	d010      	beq.n	80024b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002494:	2220      	movs	r2, #32
 8002496:	431a      	orrs	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2241      	movs	r2, #65	@ 0x41
 80024a0:	2120      	movs	r1, #32
 80024a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2240      	movs	r2, #64	@ 0x40
 80024a8:	2100      	movs	r1, #0
 80024aa:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80024ac:	183b      	adds	r3, r7, r0
 80024ae:	2201      	movs	r2, #1
 80024b0:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	2204      	movs	r2, #4
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d005      	beq.n	80024cc <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80024c0:	2317      	movs	r3, #23
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d100      	bne.n	80024cc <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80024ca:	e776      	b.n	80023ba <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80024cc:	2317      	movs	r3, #23
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	781b      	ldrb	r3, [r3, #0]
}
 80024d2:	0018      	movs	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b006      	add	sp, #24
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			@ (mov r8, r8)
 80024dc:	fe00e800 	.word	0xfe00e800

080024e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	@ 0x28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024ec:	2327      	movs	r3, #39	@ 0x27
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	2210      	movs	r2, #16
 8002508:	4013      	ands	r3, r2
 800250a:	d100      	bne.n	800250e <I2C_IsErrorOccurred+0x2e>
 800250c:	e079      	b.n	8002602 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2210      	movs	r2, #16
 8002514:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002516:	e057      	b.n	80025c8 <I2C_IsErrorOccurred+0xe8>
 8002518:	2227      	movs	r2, #39	@ 0x27
 800251a:	18bb      	adds	r3, r7, r2
 800251c:	18ba      	adds	r2, r7, r2
 800251e:	7812      	ldrb	r2, [r2, #0]
 8002520:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	3301      	adds	r3, #1
 8002526:	d04f      	beq.n	80025c8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002528:	f7fe fe64 	bl	80011f4 <HAL_GetTick>
 800252c:	0002      	movs	r2, r0
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	429a      	cmp	r2, r3
 8002536:	d302      	bcc.n	800253e <I2C_IsErrorOccurred+0x5e>
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d144      	bne.n	80025c8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	2380      	movs	r3, #128	@ 0x80
 8002546:	01db      	lsls	r3, r3, #7
 8002548:	4013      	ands	r3, r2
 800254a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800254c:	2013      	movs	r0, #19
 800254e:	183b      	adds	r3, r7, r0
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	2142      	movs	r1, #66	@ 0x42
 8002554:	5c52      	ldrb	r2, [r2, r1]
 8002556:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699a      	ldr	r2, [r3, #24]
 800255e:	2380      	movs	r3, #128	@ 0x80
 8002560:	021b      	lsls	r3, r3, #8
 8002562:	401a      	ands	r2, r3
 8002564:	2380      	movs	r3, #128	@ 0x80
 8002566:	021b      	lsls	r3, r3, #8
 8002568:	429a      	cmp	r2, r3
 800256a:	d126      	bne.n	80025ba <I2C_IsErrorOccurred+0xda>
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	2380      	movs	r3, #128	@ 0x80
 8002570:	01db      	lsls	r3, r3, #7
 8002572:	429a      	cmp	r2, r3
 8002574:	d021      	beq.n	80025ba <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002576:	183b      	adds	r3, r7, r0
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b20      	cmp	r3, #32
 800257c:	d01d      	beq.n	80025ba <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2180      	movs	r1, #128	@ 0x80
 800258a:	01c9      	lsls	r1, r1, #7
 800258c:	430a      	orrs	r2, r1
 800258e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002590:	f7fe fe30 	bl	80011f4 <HAL_GetTick>
 8002594:	0003      	movs	r3, r0
 8002596:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002598:	e00f      	b.n	80025ba <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800259a:	f7fe fe2b 	bl	80011f4 <HAL_GetTick>
 800259e:	0002      	movs	r2, r0
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b19      	cmp	r3, #25
 80025a6:	d908      	bls.n	80025ba <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	2220      	movs	r2, #32
 80025ac:	4313      	orrs	r3, r2
 80025ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80025b0:	2327      	movs	r3, #39	@ 0x27
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]

              break;
 80025b8:	e006      	b.n	80025c8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	2220      	movs	r2, #32
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b20      	cmp	r3, #32
 80025c6:	d1e8      	bne.n	800259a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2220      	movs	r2, #32
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	d004      	beq.n	80025e0 <I2C_IsErrorOccurred+0x100>
 80025d6:	2327      	movs	r3, #39	@ 0x27
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d09b      	beq.n	8002518 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025e0:	2327      	movs	r3, #39	@ 0x27
 80025e2:	18fb      	adds	r3, r7, r3
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d103      	bne.n	80025f2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2220      	movs	r2, #32
 80025f0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	2204      	movs	r2, #4
 80025f6:	4313      	orrs	r3, r2
 80025f8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80025fa:	2327      	movs	r3, #39	@ 0x27
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	2201      	movs	r2, #1
 8002600:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	2380      	movs	r3, #128	@ 0x80
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4013      	ands	r3, r2
 8002612:	d00c      	beq.n	800262e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	2201      	movs	r2, #1
 8002618:	4313      	orrs	r3, r2
 800261a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2280      	movs	r2, #128	@ 0x80
 8002622:	0052      	lsls	r2, r2, #1
 8002624:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002626:	2327      	movs	r3, #39	@ 0x27
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	2201      	movs	r2, #1
 800262c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	2380      	movs	r3, #128	@ 0x80
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4013      	ands	r3, r2
 8002636:	d00c      	beq.n	8002652 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	2208      	movs	r2, #8
 800263c:	4313      	orrs	r3, r2
 800263e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2280      	movs	r2, #128	@ 0x80
 8002646:	00d2      	lsls	r2, r2, #3
 8002648:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800264a:	2327      	movs	r3, #39	@ 0x27
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	2201      	movs	r2, #1
 8002650:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	2380      	movs	r3, #128	@ 0x80
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4013      	ands	r3, r2
 800265a:	d00c      	beq.n	8002676 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	2202      	movs	r2, #2
 8002660:	4313      	orrs	r3, r2
 8002662:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2280      	movs	r2, #128	@ 0x80
 800266a:	0092      	lsls	r2, r2, #2
 800266c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800266e:	2327      	movs	r3, #39	@ 0x27
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002676:	2327      	movs	r3, #39	@ 0x27
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d01d      	beq.n	80026bc <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	0018      	movs	r0, r3
 8002684:	f7ff fd8a 	bl	800219c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	490e      	ldr	r1, [pc, #56]	@ (80026cc <I2C_IsErrorOccurred+0x1ec>)
 8002694:	400a      	ands	r2, r1
 8002696:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	431a      	orrs	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2241      	movs	r2, #65	@ 0x41
 80026a8:	2120      	movs	r1, #32
 80026aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2242      	movs	r2, #66	@ 0x42
 80026b0:	2100      	movs	r1, #0
 80026b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2240      	movs	r2, #64	@ 0x40
 80026b8:	2100      	movs	r1, #0
 80026ba:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80026bc:	2327      	movs	r3, #39	@ 0x27
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	781b      	ldrb	r3, [r3, #0]
}
 80026c2:	0018      	movs	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b00a      	add	sp, #40	@ 0x28
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	46c0      	nop			@ (mov r8, r8)
 80026cc:	fe00e800 	.word	0xfe00e800

080026d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026d0:	b590      	push	{r4, r7, lr}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	0008      	movs	r0, r1
 80026da:	0011      	movs	r1, r2
 80026dc:	607b      	str	r3, [r7, #4]
 80026de:	240a      	movs	r4, #10
 80026e0:	193b      	adds	r3, r7, r4
 80026e2:	1c02      	adds	r2, r0, #0
 80026e4:	801a      	strh	r2, [r3, #0]
 80026e6:	2009      	movs	r0, #9
 80026e8:	183b      	adds	r3, r7, r0
 80026ea:	1c0a      	adds	r2, r1, #0
 80026ec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026ee:	193b      	adds	r3, r7, r4
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	059b      	lsls	r3, r3, #22
 80026f4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026f6:	183b      	adds	r3, r7, r0
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	0419      	lsls	r1, r3, #16
 80026fc:	23ff      	movs	r3, #255	@ 0xff
 80026fe:	041b      	lsls	r3, r3, #16
 8002700:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002702:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800270a:	4313      	orrs	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	085b      	lsrs	r3, r3, #1
 8002710:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800271a:	0d51      	lsrs	r1, r2, #21
 800271c:	2280      	movs	r2, #128	@ 0x80
 800271e:	00d2      	lsls	r2, r2, #3
 8002720:	400a      	ands	r2, r1
 8002722:	4907      	ldr	r1, [pc, #28]	@ (8002740 <I2C_TransferConfig+0x70>)
 8002724:	430a      	orrs	r2, r1
 8002726:	43d2      	mvns	r2, r2
 8002728:	401a      	ands	r2, r3
 800272a:	0011      	movs	r1, r2
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	430a      	orrs	r2, r1
 8002734:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002736:	46c0      	nop			@ (mov r8, r8)
 8002738:	46bd      	mov	sp, r7
 800273a:	b007      	add	sp, #28
 800273c:	bd90      	pop	{r4, r7, pc}
 800273e:	46c0      	nop			@ (mov r8, r8)
 8002740:	03ff63ff 	.word	0x03ff63ff

08002744 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2241      	movs	r2, #65	@ 0x41
 8002752:	5c9b      	ldrb	r3, [r3, r2]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b20      	cmp	r3, #32
 8002758:	d138      	bne.n	80027cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2240      	movs	r2, #64	@ 0x40
 800275e:	5c9b      	ldrb	r3, [r3, r2]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002764:	2302      	movs	r3, #2
 8002766:	e032      	b.n	80027ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2240      	movs	r2, #64	@ 0x40
 800276c:	2101      	movs	r1, #1
 800276e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2241      	movs	r2, #65	@ 0x41
 8002774:	2124      	movs	r1, #36	@ 0x24
 8002776:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2101      	movs	r1, #1
 8002784:	438a      	bics	r2, r1
 8002786:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4911      	ldr	r1, [pc, #68]	@ (80027d8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002794:	400a      	ands	r2, r1
 8002796:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6819      	ldr	r1, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2101      	movs	r1, #1
 80027b4:	430a      	orrs	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2241      	movs	r2, #65	@ 0x41
 80027bc:	2120      	movs	r1, #32
 80027be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2240      	movs	r2, #64	@ 0x40
 80027c4:	2100      	movs	r1, #0
 80027c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	e000      	b.n	80027ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027cc:	2302      	movs	r3, #2
  }
}
 80027ce:	0018      	movs	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b002      	add	sp, #8
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	46c0      	nop			@ (mov r8, r8)
 80027d8:	ffffefff 	.word	0xffffefff

080027dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2241      	movs	r2, #65	@ 0x41
 80027ea:	5c9b      	ldrb	r3, [r3, r2]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b20      	cmp	r3, #32
 80027f0:	d139      	bne.n	8002866 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2240      	movs	r2, #64	@ 0x40
 80027f6:	5c9b      	ldrb	r3, [r3, r2]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e033      	b.n	8002868 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2240      	movs	r2, #64	@ 0x40
 8002804:	2101      	movs	r1, #1
 8002806:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2241      	movs	r2, #65	@ 0x41
 800280c:	2124      	movs	r1, #36	@ 0x24
 800280e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2101      	movs	r1, #1
 800281c:	438a      	bics	r2, r1
 800281e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4a11      	ldr	r2, [pc, #68]	@ (8002870 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800282c:	4013      	ands	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	021b      	lsls	r3, r3, #8
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2101      	movs	r1, #1
 800284e:	430a      	orrs	r2, r1
 8002850:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2241      	movs	r2, #65	@ 0x41
 8002856:	2120      	movs	r1, #32
 8002858:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2240      	movs	r2, #64	@ 0x40
 800285e:	2100      	movs	r1, #0
 8002860:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	e000      	b.n	8002868 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002866:	2302      	movs	r3, #2
  }
}
 8002868:	0018      	movs	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	b004      	add	sp, #16
 800286e:	bd80      	pop	{r7, pc}
 8002870:	fffff0ff 	.word	0xfffff0ff

08002874 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e1d0      	b.n	8002c28 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2201      	movs	r2, #1
 800288c:	4013      	ands	r3, r2
 800288e:	d100      	bne.n	8002892 <HAL_RCC_OscConfig+0x1e>
 8002890:	e069      	b.n	8002966 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002892:	4bc8      	ldr	r3, [pc, #800]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2238      	movs	r2, #56	@ 0x38
 8002898:	4013      	ands	r3, r2
 800289a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d105      	bne.n	80028ae <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d15d      	bne.n	8002966 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e1bc      	b.n	8002c28 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	2380      	movs	r3, #128	@ 0x80
 80028b4:	025b      	lsls	r3, r3, #9
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_OscConfig+0x56>
 80028ba:	4bbe      	ldr	r3, [pc, #760]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4bbd      	ldr	r3, [pc, #756]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 80028c0:	2180      	movs	r1, #128	@ 0x80
 80028c2:	0249      	lsls	r1, r1, #9
 80028c4:	430a      	orrs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	e020      	b.n	800290c <HAL_RCC_OscConfig+0x98>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	23a0      	movs	r3, #160	@ 0xa0
 80028d0:	02db      	lsls	r3, r3, #11
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d10e      	bne.n	80028f4 <HAL_RCC_OscConfig+0x80>
 80028d6:	4bb7      	ldr	r3, [pc, #732]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	4bb6      	ldr	r3, [pc, #728]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 80028dc:	2180      	movs	r1, #128	@ 0x80
 80028de:	02c9      	lsls	r1, r1, #11
 80028e0:	430a      	orrs	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	4bb3      	ldr	r3, [pc, #716]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4bb2      	ldr	r3, [pc, #712]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 80028ea:	2180      	movs	r1, #128	@ 0x80
 80028ec:	0249      	lsls	r1, r1, #9
 80028ee:	430a      	orrs	r2, r1
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	e00b      	b.n	800290c <HAL_RCC_OscConfig+0x98>
 80028f4:	4baf      	ldr	r3, [pc, #700]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4bae      	ldr	r3, [pc, #696]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 80028fa:	49af      	ldr	r1, [pc, #700]	@ (8002bb8 <HAL_RCC_OscConfig+0x344>)
 80028fc:	400a      	ands	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	4bac      	ldr	r3, [pc, #688]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4bab      	ldr	r3, [pc, #684]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002906:	49ad      	ldr	r1, [pc, #692]	@ (8002bbc <HAL_RCC_OscConfig+0x348>)
 8002908:	400a      	ands	r2, r1
 800290a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d014      	beq.n	800293e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fe fc6e 	bl	80011f4 <HAL_GetTick>
 8002918:	0003      	movs	r3, r0
 800291a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800291e:	f7fe fc69 	bl	80011f4 <HAL_GetTick>
 8002922:	0002      	movs	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b64      	cmp	r3, #100	@ 0x64
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e17b      	b.n	8002c28 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002930:	4ba0      	ldr	r3, [pc, #640]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	2380      	movs	r3, #128	@ 0x80
 8002936:	029b      	lsls	r3, r3, #10
 8002938:	4013      	ands	r3, r2
 800293a:	d0f0      	beq.n	800291e <HAL_RCC_OscConfig+0xaa>
 800293c:	e013      	b.n	8002966 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293e:	f7fe fc59 	bl	80011f4 <HAL_GetTick>
 8002942:	0003      	movs	r3, r0
 8002944:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002948:	f7fe fc54 	bl	80011f4 <HAL_GetTick>
 800294c:	0002      	movs	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	@ 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e166      	b.n	8002c28 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800295a:	4b96      	ldr	r3, [pc, #600]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	2380      	movs	r3, #128	@ 0x80
 8002960:	029b      	lsls	r3, r3, #10
 8002962:	4013      	ands	r3, r2
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2202      	movs	r2, #2
 800296c:	4013      	ands	r3, r2
 800296e:	d100      	bne.n	8002972 <HAL_RCC_OscConfig+0xfe>
 8002970:	e086      	b.n	8002a80 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002972:	4b90      	ldr	r3, [pc, #576]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2238      	movs	r2, #56	@ 0x38
 8002978:	4013      	ands	r3, r2
 800297a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d12f      	bne.n	80029e2 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e14c      	b.n	8002c28 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298e:	4b89      	ldr	r3, [pc, #548]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	4a8b      	ldr	r2, [pc, #556]	@ (8002bc0 <HAL_RCC_OscConfig+0x34c>)
 8002994:	4013      	ands	r3, r2
 8002996:	0019      	movs	r1, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	021a      	lsls	r2, r3, #8
 800299e:	4b85      	ldr	r3, [pc, #532]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 80029a0:	430a      	orrs	r2, r1
 80029a2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d112      	bne.n	80029d0 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80029aa:	4b82      	ldr	r3, [pc, #520]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a85      	ldr	r2, [pc, #532]	@ (8002bc4 <HAL_RCC_OscConfig+0x350>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	0019      	movs	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	4b7e      	ldr	r3, [pc, #504]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80029be:	4b7d      	ldr	r3, [pc, #500]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	0adb      	lsrs	r3, r3, #11
 80029c4:	2207      	movs	r2, #7
 80029c6:	4013      	ands	r3, r2
 80029c8:	4a7f      	ldr	r2, [pc, #508]	@ (8002bc8 <HAL_RCC_OscConfig+0x354>)
 80029ca:	40da      	lsrs	r2, r3
 80029cc:	4b7f      	ldr	r3, [pc, #508]	@ (8002bcc <HAL_RCC_OscConfig+0x358>)
 80029ce:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80029d0:	4b7f      	ldr	r3, [pc, #508]	@ (8002bd0 <HAL_RCC_OscConfig+0x35c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	0018      	movs	r0, r3
 80029d6:	f7fe fbb1 	bl	800113c <HAL_InitTick>
 80029da:	1e03      	subs	r3, r0, #0
 80029dc:	d050      	beq.n	8002a80 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e122      	b.n	8002c28 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d030      	beq.n	8002a4c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80029ea:	4b72      	ldr	r3, [pc, #456]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a75      	ldr	r2, [pc, #468]	@ (8002bc4 <HAL_RCC_OscConfig+0x350>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	0019      	movs	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	4b6e      	ldr	r3, [pc, #440]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 80029fa:	430a      	orrs	r2, r1
 80029fc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80029fe:	4b6d      	ldr	r3, [pc, #436]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002a04:	2180      	movs	r1, #128	@ 0x80
 8002a06:	0049      	lsls	r1, r1, #1
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fbf2 	bl	80011f4 <HAL_GetTick>
 8002a10:	0003      	movs	r3, r0
 8002a12:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002a16:	f7fe fbed 	bl	80011f4 <HAL_GetTick>
 8002a1a:	0002      	movs	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e0ff      	b.n	8002c28 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a28:	4b62      	ldr	r3, [pc, #392]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	2380      	movs	r3, #128	@ 0x80
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4013      	ands	r3, r2
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a34:	4b5f      	ldr	r3, [pc, #380]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	4a61      	ldr	r2, [pc, #388]	@ (8002bc0 <HAL_RCC_OscConfig+0x34c>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	0019      	movs	r1, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	021a      	lsls	r2, r3, #8
 8002a44:	4b5b      	ldr	r3, [pc, #364]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002a46:	430a      	orrs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	e019      	b.n	8002a80 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002a4c:	4b59      	ldr	r3, [pc, #356]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4b58      	ldr	r3, [pc, #352]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002a52:	4960      	ldr	r1, [pc, #384]	@ (8002bd4 <HAL_RCC_OscConfig+0x360>)
 8002a54:	400a      	ands	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7fe fbcc 	bl	80011f4 <HAL_GetTick>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002a62:	f7fe fbc7 	bl	80011f4 <HAL_GetTick>
 8002a66:	0002      	movs	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e0d9      	b.n	8002c28 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a74:	4b4f      	ldr	r3, [pc, #316]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	2380      	movs	r3, #128	@ 0x80
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d1f0      	bne.n	8002a62 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2208      	movs	r2, #8
 8002a86:	4013      	ands	r3, r2
 8002a88:	d042      	beq.n	8002b10 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2238      	movs	r2, #56	@ 0x38
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b18      	cmp	r3, #24
 8002a94:	d105      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d138      	bne.n	8002b10 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e0c2      	b.n	8002c28 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d019      	beq.n	8002ade <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002aaa:	4b42      	ldr	r3, [pc, #264]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002aac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002aae:	4b41      	ldr	r3, [pc, #260]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab6:	f7fe fb9d 	bl	80011f4 <HAL_GetTick>
 8002aba:	0003      	movs	r3, r0
 8002abc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002ac0:	f7fe fb98 	bl	80011f4 <HAL_GetTick>
 8002ac4:	0002      	movs	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e0aa      	b.n	8002c28 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002ad2:	4b38      	ldr	r3, [pc, #224]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d0f1      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x24c>
 8002adc:	e018      	b.n	8002b10 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002ade:	4b35      	ldr	r3, [pc, #212]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002ae0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ae2:	4b34      	ldr	r3, [pc, #208]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	438a      	bics	r2, r1
 8002ae8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aea:	f7fe fb83 	bl	80011f4 <HAL_GetTick>
 8002aee:	0003      	movs	r3, r0
 8002af0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002af4:	f7fe fb7e 	bl	80011f4 <HAL_GetTick>
 8002af8:	0002      	movs	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e090      	b.n	8002c28 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002b06:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d1f1      	bne.n	8002af4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2204      	movs	r2, #4
 8002b16:	4013      	ands	r3, r2
 8002b18:	d100      	bne.n	8002b1c <HAL_RCC_OscConfig+0x2a8>
 8002b1a:	e084      	b.n	8002c26 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b1c:	230f      	movs	r3, #15
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002b24:	4b23      	ldr	r3, [pc, #140]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2238      	movs	r2, #56	@ 0x38
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b20      	cmp	r3, #32
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d000      	beq.n	8002b3a <HAL_RCC_OscConfig+0x2c6>
 8002b38:	e075      	b.n	8002c26 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e074      	b.n	8002c28 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d106      	bne.n	8002b54 <HAL_RCC_OscConfig+0x2e0>
 8002b46:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002b48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b52:	e01c      	b.n	8002b8e <HAL_RCC_OscConfig+0x31a>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b05      	cmp	r3, #5
 8002b5a:	d10c      	bne.n	8002b76 <HAL_RCC_OscConfig+0x302>
 8002b5c:	4b15      	ldr	r3, [pc, #84]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002b5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b60:	4b14      	ldr	r3, [pc, #80]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002b62:	2104      	movs	r1, #4
 8002b64:	430a      	orrs	r2, r1
 8002b66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b68:	4b12      	ldr	r3, [pc, #72]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002b6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b6c:	4b11      	ldr	r3, [pc, #68]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002b6e:	2101      	movs	r1, #1
 8002b70:	430a      	orrs	r2, r1
 8002b72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b74:	e00b      	b.n	8002b8e <HAL_RCC_OscConfig+0x31a>
 8002b76:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002b78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	438a      	bics	r2, r1
 8002b80:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b82:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002b84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b86:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <HAL_RCC_OscConfig+0x340>)
 8002b88:	2104      	movs	r1, #4
 8002b8a:	438a      	bics	r2, r1
 8002b8c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d028      	beq.n	8002be8 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b96:	f7fe fb2d 	bl	80011f4 <HAL_GetTick>
 8002b9a:	0003      	movs	r3, r0
 8002b9c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002b9e:	e01d      	b.n	8002bdc <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba0:	f7fe fb28 	bl	80011f4 <HAL_GetTick>
 8002ba4:	0002      	movs	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	4a0b      	ldr	r2, [pc, #44]	@ (8002bd8 <HAL_RCC_OscConfig+0x364>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d915      	bls.n	8002bdc <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e039      	b.n	8002c28 <HAL_RCC_OscConfig+0x3b4>
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	fffeffff 	.word	0xfffeffff
 8002bbc:	fffbffff 	.word	0xfffbffff
 8002bc0:	ffff80ff 	.word	0xffff80ff
 8002bc4:	ffffc7ff 	.word	0xffffc7ff
 8002bc8:	02dc6c00 	.word	0x02dc6c00
 8002bcc:	20000084 	.word	0x20000084
 8002bd0:	20000088 	.word	0x20000088
 8002bd4:	fffffeff 	.word	0xfffffeff
 8002bd8:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002bdc:	4b14      	ldr	r3, [pc, #80]	@ (8002c30 <HAL_RCC_OscConfig+0x3bc>)
 8002bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be0:	2202      	movs	r2, #2
 8002be2:	4013      	ands	r3, r2
 8002be4:	d0dc      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x32c>
 8002be6:	e013      	b.n	8002c10 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be8:	f7fe fb04 	bl	80011f4 <HAL_GetTick>
 8002bec:	0003      	movs	r3, r0
 8002bee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002bf0:	e009      	b.n	8002c06 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf2:	f7fe faff 	bl	80011f4 <HAL_GetTick>
 8002bf6:	0002      	movs	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002c34 <HAL_RCC_OscConfig+0x3c0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e010      	b.n	8002c28 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002c06:	4b0a      	ldr	r3, [pc, #40]	@ (8002c30 <HAL_RCC_OscConfig+0x3bc>)
 8002c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d1f0      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002c10:	230f      	movs	r3, #15
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d105      	bne.n	8002c26 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002c1a:	4b05      	ldr	r3, [pc, #20]	@ (8002c30 <HAL_RCC_OscConfig+0x3bc>)
 8002c1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c1e:	4b04      	ldr	r3, [pc, #16]	@ (8002c30 <HAL_RCC_OscConfig+0x3bc>)
 8002c20:	4905      	ldr	r1, [pc, #20]	@ (8002c38 <HAL_RCC_OscConfig+0x3c4>)
 8002c22:	400a      	ands	r2, r1
 8002c24:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	0018      	movs	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b006      	add	sp, #24
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021000 	.word	0x40021000
 8002c34:	00001388 	.word	0x00001388
 8002c38:	efffffff 	.word	0xefffffff

08002c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0e9      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c50:	4b76      	ldr	r3, [pc, #472]	@ (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2207      	movs	r2, #7
 8002c56:	4013      	ands	r3, r2
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d91e      	bls.n	8002c9c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b73      	ldr	r3, [pc, #460]	@ (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2207      	movs	r2, #7
 8002c64:	4393      	bics	r3, r2
 8002c66:	0019      	movs	r1, r3
 8002c68:	4b70      	ldr	r3, [pc, #448]	@ (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c70:	f7fe fac0 	bl	80011f4 <HAL_GetTick>
 8002c74:	0003      	movs	r3, r0
 8002c76:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c78:	e009      	b.n	8002c8e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c7a:	f7fe fabb 	bl	80011f4 <HAL_GetTick>
 8002c7e:	0002      	movs	r2, r0
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	4a6a      	ldr	r2, [pc, #424]	@ (8002e30 <HAL_RCC_ClockConfig+0x1f4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e0ca      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c8e:	4b67      	ldr	r3, [pc, #412]	@ (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2207      	movs	r2, #7
 8002c94:	4013      	ands	r3, r2
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d1ee      	bne.n	8002c7a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d017      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2204      	movs	r2, #4
 8002cac:	4013      	ands	r3, r2
 8002cae:	d008      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002cb0:	4b60      	ldr	r3, [pc, #384]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f8>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4a60      	ldr	r2, [pc, #384]	@ (8002e38 <HAL_RCC_ClockConfig+0x1fc>)
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	4b5e      	ldr	r3, [pc, #376]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f8>)
 8002cba:	21b0      	movs	r1, #176	@ 0xb0
 8002cbc:	0109      	lsls	r1, r1, #4
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc2:	4b5c      	ldr	r3, [pc, #368]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f8>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	4a5d      	ldr	r2, [pc, #372]	@ (8002e3c <HAL_RCC_ClockConfig+0x200>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	0019      	movs	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	4b58      	ldr	r3, [pc, #352]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f8>)
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d055      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002ce0:	4b54      	ldr	r3, [pc, #336]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	221c      	movs	r2, #28
 8002ce6:	4393      	bics	r3, r2
 8002ce8:	0019      	movs	r1, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	4b51      	ldr	r3, [pc, #324]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f8>)
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d107      	bne.n	8002d0c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cfc:	4b4d      	ldr	r3, [pc, #308]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f8>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	2380      	movs	r3, #128	@ 0x80
 8002d02:	029b      	lsls	r3, r3, #10
 8002d04:	4013      	ands	r3, r2
 8002d06:	d11f      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e08b      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d14:	4b47      	ldr	r3, [pc, #284]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f8>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	2380      	movs	r3, #128	@ 0x80
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d113      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e07f      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002d2c:	4b41      	ldr	r3, [pc, #260]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f8>)
 8002d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d30:	2202      	movs	r2, #2
 8002d32:	4013      	ands	r3, r2
 8002d34:	d108      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e074      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f8>)
 8002d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3e:	2202      	movs	r2, #2
 8002d40:	4013      	ands	r3, r2
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e06d      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d48:	4b3a      	ldr	r3, [pc, #232]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f8>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2207      	movs	r2, #7
 8002d4e:	4393      	bics	r3, r2
 8002d50:	0019      	movs	r1, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	4b37      	ldr	r3, [pc, #220]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f8>)
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d5c:	f7fe fa4a 	bl	80011f4 <HAL_GetTick>
 8002d60:	0003      	movs	r3, r0
 8002d62:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d64:	e009      	b.n	8002d7a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002d66:	f7fe fa45 	bl	80011f4 <HAL_GetTick>
 8002d6a:	0002      	movs	r2, r0
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	4a2f      	ldr	r2, [pc, #188]	@ (8002e30 <HAL_RCC_ClockConfig+0x1f4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e054      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	4b2e      	ldr	r3, [pc, #184]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f8>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2238      	movs	r2, #56	@ 0x38
 8002d80:	401a      	ands	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d1ec      	bne.n	8002d66 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d8c:	4b27      	ldr	r3, [pc, #156]	@ (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2207      	movs	r2, #7
 8002d92:	4013      	ands	r3, r2
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d21e      	bcs.n	8002dd8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9a:	4b24      	ldr	r3, [pc, #144]	@ (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2207      	movs	r2, #7
 8002da0:	4393      	bics	r3, r2
 8002da2:	0019      	movs	r1, r3
 8002da4:	4b21      	ldr	r3, [pc, #132]	@ (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002dac:	f7fe fa22 	bl	80011f4 <HAL_GetTick>
 8002db0:	0003      	movs	r3, r0
 8002db2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002db4:	e009      	b.n	8002dca <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002db6:	f7fe fa1d 	bl	80011f4 <HAL_GetTick>
 8002dba:	0002      	movs	r2, r0
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8002e30 <HAL_RCC_ClockConfig+0x1f4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e02c      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002dca:	4b18      	ldr	r3, [pc, #96]	@ (8002e2c <HAL_RCC_ClockConfig+0x1f0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2207      	movs	r2, #7
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d1ee      	bne.n	8002db6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2204      	movs	r2, #4
 8002dde:	4013      	ands	r3, r2
 8002de0:	d009      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002de2:	4b14      	ldr	r3, [pc, #80]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f8>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	4a16      	ldr	r2, [pc, #88]	@ (8002e40 <HAL_RCC_ClockConfig+0x204>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	0019      	movs	r1, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	4b10      	ldr	r3, [pc, #64]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f8>)
 8002df2:	430a      	orrs	r2, r1
 8002df4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002df6:	f000 f82b 	bl	8002e50 <HAL_RCC_GetSysClockFreq>
 8002dfa:	0001      	movs	r1, r0
 8002dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8002e34 <HAL_RCC_ClockConfig+0x1f8>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e00:	0a1b      	lsrs	r3, r3, #8
 8002e02:	220f      	movs	r2, #15
 8002e04:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002e06:	4b0f      	ldr	r3, [pc, #60]	@ (8002e44 <HAL_RCC_ClockConfig+0x208>)
 8002e08:	0092      	lsls	r2, r2, #2
 8002e0a:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e0c:	221f      	movs	r2, #31
 8002e0e:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002e10:	000a      	movs	r2, r1
 8002e12:	40da      	lsrs	r2, r3
 8002e14:	4b0c      	ldr	r3, [pc, #48]	@ (8002e48 <HAL_RCC_ClockConfig+0x20c>)
 8002e16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e18:	4b0c      	ldr	r3, [pc, #48]	@ (8002e4c <HAL_RCC_ClockConfig+0x210>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f7fe f98d 	bl	800113c <HAL_InitTick>
 8002e22:	0003      	movs	r3, r0
}
 8002e24:	0018      	movs	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b004      	add	sp, #16
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40022000 	.word	0x40022000
 8002e30:	00001388 	.word	0x00001388
 8002e34:	40021000 	.word	0x40021000
 8002e38:	ffff84ff 	.word	0xffff84ff
 8002e3c:	fffff0ff 	.word	0xfffff0ff
 8002e40:	ffff8fff 	.word	0xffff8fff
 8002e44:	0800481c 	.word	0x0800481c
 8002e48:	20000084 	.word	0x20000084
 8002e4c:	20000088 	.word	0x20000088

08002e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8002e56:	4b23      	ldr	r3, [pc, #140]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	089b      	lsrs	r3, r3, #2
 8002e5c:	2207      	movs	r2, #7
 8002e5e:	4013      	ands	r3, r2
 8002e60:	3301      	adds	r3, #1
 8002e62:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002e64:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	2238      	movs	r2, #56	@ 0x38
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d10f      	bne.n	8002e8e <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	0adb      	lsrs	r3, r3, #11
 8002e74:	2207      	movs	r2, #7
 8002e76:	4013      	ands	r3, r2
 8002e78:	2201      	movs	r2, #1
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	0013      	movs	r3, r2
 8002e7e:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4819      	ldr	r0, [pc, #100]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e84:	f7fd f940 	bl	8000108 <__udivsi3>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	e01e      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2238      	movs	r2, #56	@ 0x38
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d102      	bne.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e9a:	4b14      	ldr	r3, [pc, #80]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	e015      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002ea0:	4b10      	ldr	r3, [pc, #64]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2238      	movs	r2, #56	@ 0x38
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d103      	bne.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002eac:	2380      	movs	r3, #128	@ 0x80
 8002eae:	021b      	lsls	r3, r3, #8
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	e00b      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2238      	movs	r2, #56	@ 0x38
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b18      	cmp	r3, #24
 8002ebe:	d103      	bne.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002ec0:	23fa      	movs	r3, #250	@ 0xfa
 8002ec2:	01db      	lsls	r3, r3, #7
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	e001      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f7fd f91a 	bl	8000108 <__udivsi3>
 8002ed4:	0003      	movs	r3, r0
 8002ed6:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
}
 8002eda:	0018      	movs	r0, r3
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b004      	add	sp, #16
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	46c0      	nop			@ (mov r8, r8)
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	02dc6c00 	.word	0x02dc6c00
 8002eec:	00f42400 	.word	0x00f42400

08002ef0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002ef4:	f7ff ffac 	bl	8002e50 <HAL_RCC_GetSysClockFreq>
 8002ef8:	0001      	movs	r1, r0
 8002efa:	4b09      	ldr	r3, [pc, #36]	@ (8002f20 <HAL_RCC_GetHCLKFreq+0x30>)
 8002efc:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002efe:	0a1b      	lsrs	r3, r3, #8
 8002f00:	220f      	movs	r2, #15
 8002f02:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002f04:	4b07      	ldr	r3, [pc, #28]	@ (8002f24 <HAL_RCC_GetHCLKFreq+0x34>)
 8002f06:	0092      	lsls	r2, r2, #2
 8002f08:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002f0a:	221f      	movs	r2, #31
 8002f0c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002f0e:	000a      	movs	r2, r1
 8002f10:	40da      	lsrs	r2, r3
 8002f12:	4b05      	ldr	r3, [pc, #20]	@ (8002f28 <HAL_RCC_GetHCLKFreq+0x38>)
 8002f14:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8002f16:	4b04      	ldr	r3, [pc, #16]	@ (8002f28 <HAL_RCC_GetHCLKFreq+0x38>)
 8002f18:	681b      	ldr	r3, [r3, #0]
}
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000
 8002f24:	0800481c 	.word	0x0800481c
 8002f28:	20000084 	.word	0x20000084

08002f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002f30:	f7ff ffde 	bl	8002ef0 <HAL_RCC_GetHCLKFreq>
 8002f34:	0001      	movs	r1, r0
 8002f36:	4b07      	ldr	r3, [pc, #28]	@ (8002f54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	0b1b      	lsrs	r3, r3, #12
 8002f3c:	2207      	movs	r2, #7
 8002f3e:	401a      	ands	r2, r3
 8002f40:	4b05      	ldr	r3, [pc, #20]	@ (8002f58 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002f42:	0092      	lsls	r2, r2, #2
 8002f44:	58d3      	ldr	r3, [r2, r3]
 8002f46:	221f      	movs	r2, #31
 8002f48:	4013      	ands	r3, r2
 8002f4a:	40d9      	lsrs	r1, r3
 8002f4c:	000b      	movs	r3, r1
}
 8002f4e:	0018      	movs	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40021000 	.word	0x40021000
 8002f58:	0800485c 	.word	0x0800485c

08002f5c <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002f64:	2313      	movs	r3, #19
 8002f66:	18fb      	adds	r3, r7, r3
 8002f68:	2200      	movs	r2, #0
 8002f6a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f6c:	2312      	movs	r3, #18
 8002f6e:	18fb      	adds	r3, r7, r3
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2240      	movs	r2, #64	@ 0x40
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d100      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8002f7e:	e079      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f80:	2011      	movs	r0, #17
 8002f82:	183b      	adds	r3, r7, r0
 8002f84:	2200      	movs	r2, #0
 8002f86:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f88:	4b63      	ldr	r3, [pc, #396]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f8c:	2380      	movs	r3, #128	@ 0x80
 8002f8e:	055b      	lsls	r3, r3, #21
 8002f90:	4013      	ands	r3, r2
 8002f92:	d110      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f94:	4b60      	ldr	r3, [pc, #384]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f98:	4b5f      	ldr	r3, [pc, #380]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f9a:	2180      	movs	r1, #128	@ 0x80
 8002f9c:	0549      	lsls	r1, r1, #21
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002fa2:	4b5d      	ldr	r3, [pc, #372]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fa6:	2380      	movs	r3, #128	@ 0x80
 8002fa8:	055b      	lsls	r3, r3, #21
 8002faa:	4013      	ands	r3, r2
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb0:	183b      	adds	r3, r7, r0
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002fb6:	4b58      	ldr	r3, [pc, #352]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fb8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002fba:	23c0      	movs	r3, #192	@ 0xc0
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d019      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d014      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002fd2:	4b51      	ldr	r3, [pc, #324]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd6:	4a51      	ldr	r2, [pc, #324]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fdc:	4b4e      	ldr	r3, [pc, #312]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fde:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002fe0:	4b4d      	ldr	r3, [pc, #308]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fe2:	2180      	movs	r1, #128	@ 0x80
 8002fe4:	0249      	lsls	r1, r1, #9
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fea:	4b4b      	ldr	r3, [pc, #300]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002fee:	4b4a      	ldr	r3, [pc, #296]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ff0:	494b      	ldr	r1, [pc, #300]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ff2:	400a      	ands	r2, r1
 8002ff4:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002ff6:	4b48      	ldr	r3, [pc, #288]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2201      	movs	r2, #1
 8003000:	4013      	ands	r3, r2
 8003002:	d016      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003004:	f7fe f8f6 	bl	80011f4 <HAL_GetTick>
 8003008:	0003      	movs	r3, r0
 800300a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800300c:	e00c      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300e:	f7fe f8f1 	bl	80011f4 <HAL_GetTick>
 8003012:	0002      	movs	r2, r0
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	4a42      	ldr	r2, [pc, #264]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d904      	bls.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 800301e:	2313      	movs	r3, #19
 8003020:	18fb      	adds	r3, r7, r3
 8003022:	2203      	movs	r2, #3
 8003024:	701a      	strb	r2, [r3, #0]
          break;
 8003026:	e004      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003028:	4b3b      	ldr	r3, [pc, #236]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800302a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302c:	2202      	movs	r2, #2
 800302e:	4013      	ands	r3, r2
 8003030:	d0ed      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8003032:	2313      	movs	r3, #19
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10a      	bne.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800303c:	4b36      	ldr	r3, [pc, #216]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800303e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003040:	4a36      	ldr	r2, [pc, #216]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003042:	4013      	ands	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	4b33      	ldr	r3, [pc, #204]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800304c:	430a      	orrs	r2, r1
 800304e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003050:	e005      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003052:	2312      	movs	r3, #18
 8003054:	18fb      	adds	r3, r7, r3
 8003056:	2213      	movs	r2, #19
 8003058:	18ba      	adds	r2, r7, r2
 800305a:	7812      	ldrb	r2, [r2, #0]
 800305c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800305e:	2311      	movs	r3, #17
 8003060:	18fb      	adds	r3, r7, r3
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d105      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003068:	4b2b      	ldr	r3, [pc, #172]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800306a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800306c:	4b2a      	ldr	r3, [pc, #168]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800306e:	492e      	ldr	r1, [pc, #184]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003070:	400a      	ands	r2, r1
 8003072:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2201      	movs	r2, #1
 800307a:	4013      	ands	r3, r2
 800307c:	d009      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800307e:	4b26      	ldr	r3, [pc, #152]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003082:	2203      	movs	r2, #3
 8003084:	4393      	bics	r3, r2
 8003086:	0019      	movs	r1, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	4b22      	ldr	r3, [pc, #136]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800308e:	430a      	orrs	r2, r1
 8003090:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2202      	movs	r2, #2
 8003098:	4013      	ands	r3, r2
 800309a:	d009      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800309c:	4b1e      	ldr	r3, [pc, #120]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800309e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a0:	4a22      	ldr	r2, [pc, #136]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	0019      	movs	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030ac:	430a      	orrs	r2, r1
 80030ae:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2220      	movs	r2, #32
 80030b6:	4013      	ands	r3, r2
 80030b8:	d008      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030ba:	4b17      	ldr	r3, [pc, #92]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	0899      	lsrs	r1, r3, #2
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	4b14      	ldr	r3, [pc, #80]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030c8:	430a      	orrs	r2, r1
 80030ca:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2204      	movs	r2, #4
 80030d2:	4013      	ands	r3, r2
 80030d4:	d009      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80030d6:	4b10      	ldr	r3, [pc, #64]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030da:	4a15      	ldr	r2, [pc, #84]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030dc:	4013      	ands	r3, r2
 80030de:	0019      	movs	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030e6:	430a      	orrs	r2, r1
 80030e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2280      	movs	r2, #128	@ 0x80
 80030f0:	4013      	ands	r3, r2
 80030f2:	d009      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80030f4:	4b08      	ldr	r3, [pc, #32]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	22e0      	movs	r2, #224	@ 0xe0
 80030fa:	4393      	bics	r3, r2
 80030fc:	0019      	movs	r1, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	4b05      	ldr	r3, [pc, #20]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003104:	430a      	orrs	r2, r1
 8003106:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003108:	2312      	movs	r3, #18
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	781b      	ldrb	r3, [r3, #0]
}
 800310e:	0018      	movs	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	b006      	add	sp, #24
 8003114:	bd80      	pop	{r7, pc}
 8003116:	46c0      	nop			@ (mov r8, r8)
 8003118:	40021000 	.word	0x40021000
 800311c:	fffffcff 	.word	0xfffffcff
 8003120:	fffeffff 	.word	0xfffeffff
 8003124:	00001388 	.word	0x00001388
 8003128:	efffffff 	.word	0xefffffff
 800312c:	ffffcfff 	.word	0xffffcfff
 8003130:	ffff3fff 	.word	0xffff3fff

08003134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e04a      	b.n	80031dc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	223d      	movs	r2, #61	@ 0x3d
 800314a:	5c9b      	ldrb	r3, [r3, r2]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d107      	bne.n	8003162 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	223c      	movs	r2, #60	@ 0x3c
 8003156:	2100      	movs	r1, #0
 8003158:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	0018      	movs	r0, r3
 800315e:	f7fd fed1 	bl	8000f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	223d      	movs	r2, #61	@ 0x3d
 8003166:	2102      	movs	r1, #2
 8003168:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3304      	adds	r3, #4
 8003172:	0019      	movs	r1, r3
 8003174:	0010      	movs	r0, r2
 8003176:	f000 fa81 	bl	800367c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2248      	movs	r2, #72	@ 0x48
 800317e:	2101      	movs	r1, #1
 8003180:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	223e      	movs	r2, #62	@ 0x3e
 8003186:	2101      	movs	r1, #1
 8003188:	5499      	strb	r1, [r3, r2]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	223f      	movs	r2, #63	@ 0x3f
 800318e:	2101      	movs	r1, #1
 8003190:	5499      	strb	r1, [r3, r2]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2240      	movs	r2, #64	@ 0x40
 8003196:	2101      	movs	r1, #1
 8003198:	5499      	strb	r1, [r3, r2]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2241      	movs	r2, #65	@ 0x41
 800319e:	2101      	movs	r1, #1
 80031a0:	5499      	strb	r1, [r3, r2]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2242      	movs	r2, #66	@ 0x42
 80031a6:	2101      	movs	r1, #1
 80031a8:	5499      	strb	r1, [r3, r2]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2243      	movs	r2, #67	@ 0x43
 80031ae:	2101      	movs	r1, #1
 80031b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2244      	movs	r2, #68	@ 0x44
 80031b6:	2101      	movs	r1, #1
 80031b8:	5499      	strb	r1, [r3, r2]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2245      	movs	r2, #69	@ 0x45
 80031be:	2101      	movs	r1, #1
 80031c0:	5499      	strb	r1, [r3, r2]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2246      	movs	r2, #70	@ 0x46
 80031c6:	2101      	movs	r1, #1
 80031c8:	5499      	strb	r1, [r3, r2]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2247      	movs	r2, #71	@ 0x47
 80031ce:	2101      	movs	r1, #1
 80031d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	223d      	movs	r2, #61	@ 0x3d
 80031d6:	2101      	movs	r1, #1
 80031d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	0018      	movs	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	b002      	add	sp, #8
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	223d      	movs	r2, #61	@ 0x3d
 80031f0:	5c9b      	ldrb	r3, [r3, r2]
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d001      	beq.n	80031fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e037      	b.n	800326c <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	223d      	movs	r2, #61	@ 0x3d
 8003200:	2102      	movs	r1, #2
 8003202:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2101      	movs	r1, #1
 8003210:	430a      	orrs	r2, r1
 8003212:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a16      	ldr	r2, [pc, #88]	@ (8003274 <HAL_TIM_Base_Start_IT+0x90>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d004      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0x44>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a15      	ldr	r2, [pc, #84]	@ (8003278 <HAL_TIM_Base_Start_IT+0x94>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d116      	bne.n	8003256 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	4a13      	ldr	r2, [pc, #76]	@ (800327c <HAL_TIM_Base_Start_IT+0x98>)
 8003230:	4013      	ands	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2b06      	cmp	r3, #6
 8003238:	d016      	beq.n	8003268 <HAL_TIM_Base_Start_IT+0x84>
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	2380      	movs	r3, #128	@ 0x80
 800323e:	025b      	lsls	r3, r3, #9
 8003240:	429a      	cmp	r2, r3
 8003242:	d011      	beq.n	8003268 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2101      	movs	r1, #1
 8003250:	430a      	orrs	r2, r1
 8003252:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003254:	e008      	b.n	8003268 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2101      	movs	r1, #1
 8003262:	430a      	orrs	r2, r1
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	e000      	b.n	800326a <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003268:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	0018      	movs	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	b004      	add	sp, #16
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40012c00 	.word	0x40012c00
 8003278:	40000400 	.word	0x40000400
 800327c:	00010007 	.word	0x00010007

08003280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2202      	movs	r2, #2
 800329c:	4013      	ands	r3, r2
 800329e:	d021      	beq.n	80032e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2202      	movs	r2, #2
 80032a4:	4013      	ands	r3, r2
 80032a6:	d01d      	beq.n	80032e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2203      	movs	r2, #3
 80032ae:	4252      	negs	r2, r2
 80032b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2203      	movs	r2, #3
 80032c0:	4013      	ands	r3, r2
 80032c2:	d004      	beq.n	80032ce <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	0018      	movs	r0, r3
 80032c8:	f000 f9c0 	bl	800364c <HAL_TIM_IC_CaptureCallback>
 80032cc:	e007      	b.n	80032de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	0018      	movs	r0, r3
 80032d2:	f000 f9b3 	bl	800363c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	0018      	movs	r0, r3
 80032da:	f000 f9bf 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2204      	movs	r2, #4
 80032e8:	4013      	ands	r3, r2
 80032ea:	d022      	beq.n	8003332 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2204      	movs	r2, #4
 80032f0:	4013      	ands	r3, r2
 80032f2:	d01e      	beq.n	8003332 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2205      	movs	r2, #5
 80032fa:	4252      	negs	r2, r2
 80032fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2202      	movs	r2, #2
 8003302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	23c0      	movs	r3, #192	@ 0xc0
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4013      	ands	r3, r2
 8003310:	d004      	beq.n	800331c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	0018      	movs	r0, r3
 8003316:	f000 f999 	bl	800364c <HAL_TIM_IC_CaptureCallback>
 800331a:	e007      	b.n	800332c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	0018      	movs	r0, r3
 8003320:	f000 f98c 	bl	800363c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	0018      	movs	r0, r3
 8003328:	f000 f998 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2208      	movs	r2, #8
 8003336:	4013      	ands	r3, r2
 8003338:	d021      	beq.n	800337e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2208      	movs	r2, #8
 800333e:	4013      	ands	r3, r2
 8003340:	d01d      	beq.n	800337e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2209      	movs	r2, #9
 8003348:	4252      	negs	r2, r2
 800334a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2204      	movs	r2, #4
 8003350:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	2203      	movs	r2, #3
 800335a:	4013      	ands	r3, r2
 800335c:	d004      	beq.n	8003368 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	0018      	movs	r0, r3
 8003362:	f000 f973 	bl	800364c <HAL_TIM_IC_CaptureCallback>
 8003366:	e007      	b.n	8003378 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	0018      	movs	r0, r3
 800336c:	f000 f966 	bl	800363c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	0018      	movs	r0, r3
 8003374:	f000 f972 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2210      	movs	r2, #16
 8003382:	4013      	ands	r3, r2
 8003384:	d022      	beq.n	80033cc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2210      	movs	r2, #16
 800338a:	4013      	ands	r3, r2
 800338c:	d01e      	beq.n	80033cc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2211      	movs	r2, #17
 8003394:	4252      	negs	r2, r2
 8003396:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2208      	movs	r2, #8
 800339c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69da      	ldr	r2, [r3, #28]
 80033a4:	23c0      	movs	r3, #192	@ 0xc0
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4013      	ands	r3, r2
 80033aa:	d004      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	0018      	movs	r0, r3
 80033b0:	f000 f94c 	bl	800364c <HAL_TIM_IC_CaptureCallback>
 80033b4:	e007      	b.n	80033c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	0018      	movs	r0, r3
 80033ba:	f000 f93f 	bl	800363c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	0018      	movs	r0, r3
 80033c2:	f000 f94b 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2201      	movs	r2, #1
 80033d0:	4013      	ands	r3, r2
 80033d2:	d00c      	beq.n	80033ee <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	4013      	ands	r3, r2
 80033da:	d008      	beq.n	80033ee <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2202      	movs	r2, #2
 80033e2:	4252      	negs	r2, r2
 80033e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	0018      	movs	r0, r3
 80033ea:	f7fd f81b 	bl	8000424 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2280      	movs	r2, #128	@ 0x80
 80033f2:	4013      	ands	r3, r2
 80033f4:	d104      	bne.n	8003400 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	2380      	movs	r3, #128	@ 0x80
 80033fa:	019b      	lsls	r3, r3, #6
 80033fc:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033fe:	d00b      	beq.n	8003418 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2280      	movs	r2, #128	@ 0x80
 8003404:	4013      	ands	r3, r2
 8003406:	d007      	beq.n	8003418 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a1e      	ldr	r2, [pc, #120]	@ (8003488 <HAL_TIM_IRQHandler+0x208>)
 800340e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	0018      	movs	r0, r3
 8003414:	f000 fab2 	bl	800397c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	2380      	movs	r3, #128	@ 0x80
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4013      	ands	r3, r2
 8003420:	d00b      	beq.n	800343a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2280      	movs	r2, #128	@ 0x80
 8003426:	4013      	ands	r3, r2
 8003428:	d007      	beq.n	800343a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a17      	ldr	r2, [pc, #92]	@ (800348c <HAL_TIM_IRQHandler+0x20c>)
 8003430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	0018      	movs	r0, r3
 8003436:	f000 faa9 	bl	800398c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2240      	movs	r2, #64	@ 0x40
 800343e:	4013      	ands	r3, r2
 8003440:	d00c      	beq.n	800345c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2240      	movs	r2, #64	@ 0x40
 8003446:	4013      	ands	r3, r2
 8003448:	d008      	beq.n	800345c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2241      	movs	r2, #65	@ 0x41
 8003450:	4252      	negs	r2, r2
 8003452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	0018      	movs	r0, r3
 8003458:	f000 f908 	bl	800366c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2220      	movs	r2, #32
 8003460:	4013      	ands	r3, r2
 8003462:	d00c      	beq.n	800347e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2220      	movs	r2, #32
 8003468:	4013      	ands	r3, r2
 800346a:	d008      	beq.n	800347e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2221      	movs	r2, #33	@ 0x21
 8003472:	4252      	negs	r2, r2
 8003474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	0018      	movs	r0, r3
 800347a:	f000 fa77 	bl	800396c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800347e:	46c0      	nop			@ (mov r8, r8)
 8003480:	46bd      	mov	sp, r7
 8003482:	b004      	add	sp, #16
 8003484:	bd80      	pop	{r7, pc}
 8003486:	46c0      	nop			@ (mov r8, r8)
 8003488:	ffffdf7f 	.word	0xffffdf7f
 800348c:	fffffeff 	.word	0xfffffeff

08003490 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800349a:	230f      	movs	r3, #15
 800349c:	18fb      	adds	r3, r7, r3
 800349e:	2200      	movs	r2, #0
 80034a0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	223c      	movs	r2, #60	@ 0x3c
 80034a6:	5c9b      	ldrb	r3, [r3, r2]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_TIM_ConfigClockSource+0x20>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e0bc      	b.n	800362a <HAL_TIM_ConfigClockSource+0x19a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	223c      	movs	r2, #60	@ 0x3c
 80034b4:	2101      	movs	r1, #1
 80034b6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	223d      	movs	r2, #61	@ 0x3d
 80034bc:	2102      	movs	r1, #2
 80034be:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4a5a      	ldr	r2, [pc, #360]	@ (8003634 <HAL_TIM_ConfigClockSource+0x1a4>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	4a59      	ldr	r2, [pc, #356]	@ (8003638 <HAL_TIM_ConfigClockSource+0x1a8>)
 80034d4:	4013      	ands	r3, r2
 80034d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2280      	movs	r2, #128	@ 0x80
 80034e6:	0192      	lsls	r2, r2, #6
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d040      	beq.n	800356e <HAL_TIM_ConfigClockSource+0xde>
 80034ec:	2280      	movs	r2, #128	@ 0x80
 80034ee:	0192      	lsls	r2, r2, #6
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d900      	bls.n	80034f6 <HAL_TIM_ConfigClockSource+0x66>
 80034f4:	e088      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x178>
 80034f6:	2280      	movs	r2, #128	@ 0x80
 80034f8:	0152      	lsls	r2, r2, #5
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d100      	bne.n	8003500 <HAL_TIM_ConfigClockSource+0x70>
 80034fe:	e088      	b.n	8003612 <HAL_TIM_ConfigClockSource+0x182>
 8003500:	2280      	movs	r2, #128	@ 0x80
 8003502:	0152      	lsls	r2, r2, #5
 8003504:	4293      	cmp	r3, r2
 8003506:	d900      	bls.n	800350a <HAL_TIM_ConfigClockSource+0x7a>
 8003508:	e07e      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x178>
 800350a:	2b70      	cmp	r3, #112	@ 0x70
 800350c:	d018      	beq.n	8003540 <HAL_TIM_ConfigClockSource+0xb0>
 800350e:	d900      	bls.n	8003512 <HAL_TIM_ConfigClockSource+0x82>
 8003510:	e07a      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x178>
 8003512:	2b60      	cmp	r3, #96	@ 0x60
 8003514:	d04f      	beq.n	80035b6 <HAL_TIM_ConfigClockSource+0x126>
 8003516:	d900      	bls.n	800351a <HAL_TIM_ConfigClockSource+0x8a>
 8003518:	e076      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x178>
 800351a:	2b50      	cmp	r3, #80	@ 0x50
 800351c:	d03b      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0x106>
 800351e:	d900      	bls.n	8003522 <HAL_TIM_ConfigClockSource+0x92>
 8003520:	e072      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x178>
 8003522:	2b40      	cmp	r3, #64	@ 0x40
 8003524:	d057      	beq.n	80035d6 <HAL_TIM_ConfigClockSource+0x146>
 8003526:	d900      	bls.n	800352a <HAL_TIM_ConfigClockSource+0x9a>
 8003528:	e06e      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x178>
 800352a:	2b30      	cmp	r3, #48	@ 0x30
 800352c:	d063      	beq.n	80035f6 <HAL_TIM_ConfigClockSource+0x166>
 800352e:	d86b      	bhi.n	8003608 <HAL_TIM_ConfigClockSource+0x178>
 8003530:	2b20      	cmp	r3, #32
 8003532:	d060      	beq.n	80035f6 <HAL_TIM_ConfigClockSource+0x166>
 8003534:	d868      	bhi.n	8003608 <HAL_TIM_ConfigClockSource+0x178>
 8003536:	2b00      	cmp	r3, #0
 8003538:	d05d      	beq.n	80035f6 <HAL_TIM_ConfigClockSource+0x166>
 800353a:	2b10      	cmp	r3, #16
 800353c:	d05b      	beq.n	80035f6 <HAL_TIM_ConfigClockSource+0x166>
 800353e:	e063      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003550:	f000 f98a 	bl	8003868 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2277      	movs	r2, #119	@ 0x77
 8003560:	4313      	orrs	r3, r2
 8003562:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	609a      	str	r2, [r3, #8]
      break;
 800356c:	e052      	b.n	8003614 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800357e:	f000 f973 	bl	8003868 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2180      	movs	r1, #128	@ 0x80
 800358e:	01c9      	lsls	r1, r1, #7
 8003590:	430a      	orrs	r2, r1
 8003592:	609a      	str	r2, [r3, #8]
      break;
 8003594:	e03e      	b.n	8003614 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035a2:	001a      	movs	r2, r3
 80035a4:	f000 f8e4 	bl	8003770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2150      	movs	r1, #80	@ 0x50
 80035ae:	0018      	movs	r0, r3
 80035b0:	f000 f93e 	bl	8003830 <TIM_ITRx_SetConfig>
      break;
 80035b4:	e02e      	b.n	8003614 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035c2:	001a      	movs	r2, r3
 80035c4:	f000 f902 	bl	80037cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2160      	movs	r1, #96	@ 0x60
 80035ce:	0018      	movs	r0, r3
 80035d0:	f000 f92e 	bl	8003830 <TIM_ITRx_SetConfig>
      break;
 80035d4:	e01e      	b.n	8003614 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035e2:	001a      	movs	r2, r3
 80035e4:	f000 f8c4 	bl	8003770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2140      	movs	r1, #64	@ 0x40
 80035ee:	0018      	movs	r0, r3
 80035f0:	f000 f91e 	bl	8003830 <TIM_ITRx_SetConfig>
      break;
 80035f4:	e00e      	b.n	8003614 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	0019      	movs	r1, r3
 8003600:	0010      	movs	r0, r2
 8003602:	f000 f915 	bl	8003830 <TIM_ITRx_SetConfig>
      break;
 8003606:	e005      	b.n	8003614 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003608:	230f      	movs	r3, #15
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	2201      	movs	r2, #1
 800360e:	701a      	strb	r2, [r3, #0]
      break;
 8003610:	e000      	b.n	8003614 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003612:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	223d      	movs	r2, #61	@ 0x3d
 8003618:	2101      	movs	r1, #1
 800361a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	223c      	movs	r2, #60	@ 0x3c
 8003620:	2100      	movs	r1, #0
 8003622:	5499      	strb	r1, [r3, r2]

  return status;
 8003624:	230f      	movs	r3, #15
 8003626:	18fb      	adds	r3, r7, r3
 8003628:	781b      	ldrb	r3, [r3, #0]
}
 800362a:	0018      	movs	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	b004      	add	sp, #16
 8003630:	bd80      	pop	{r7, pc}
 8003632:	46c0      	nop			@ (mov r8, r8)
 8003634:	ffceff88 	.word	0xffceff88
 8003638:	ffff00ff 	.word	0xffff00ff

0800363c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003644:	46c0      	nop			@ (mov r8, r8)
 8003646:	46bd      	mov	sp, r7
 8003648:	b002      	add	sp, #8
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003654:	46c0      	nop			@ (mov r8, r8)
 8003656:	46bd      	mov	sp, r7
 8003658:	b002      	add	sp, #8
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003664:	46c0      	nop			@ (mov r8, r8)
 8003666:	46bd      	mov	sp, r7
 8003668:	b002      	add	sp, #8
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003674:	46c0      	nop			@ (mov r8, r8)
 8003676:	46bd      	mov	sp, r7
 8003678:	b002      	add	sp, #8
 800367a:	bd80      	pop	{r7, pc}

0800367c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a32      	ldr	r2, [pc, #200]	@ (8003758 <TIM_Base_SetConfig+0xdc>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d003      	beq.n	800369c <TIM_Base_SetConfig+0x20>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a31      	ldr	r2, [pc, #196]	@ (800375c <TIM_Base_SetConfig+0xe0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d108      	bne.n	80036ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2270      	movs	r2, #112	@ 0x70
 80036a0:	4393      	bics	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a29      	ldr	r2, [pc, #164]	@ (8003758 <TIM_Base_SetConfig+0xdc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00f      	beq.n	80036d6 <TIM_Base_SetConfig+0x5a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a28      	ldr	r2, [pc, #160]	@ (800375c <TIM_Base_SetConfig+0xe0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00b      	beq.n	80036d6 <TIM_Base_SetConfig+0x5a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a27      	ldr	r2, [pc, #156]	@ (8003760 <TIM_Base_SetConfig+0xe4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d007      	beq.n	80036d6 <TIM_Base_SetConfig+0x5a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a26      	ldr	r2, [pc, #152]	@ (8003764 <TIM_Base_SetConfig+0xe8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d003      	beq.n	80036d6 <TIM_Base_SetConfig+0x5a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a25      	ldr	r2, [pc, #148]	@ (8003768 <TIM_Base_SetConfig+0xec>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d108      	bne.n	80036e8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4a24      	ldr	r2, [pc, #144]	@ (800376c <TIM_Base_SetConfig+0xf0>)
 80036da:	4013      	ands	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2280      	movs	r2, #128	@ 0x80
 80036ec:	4393      	bics	r3, r2
 80036ee:	001a      	movs	r2, r3
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a11      	ldr	r2, [pc, #68]	@ (8003758 <TIM_Base_SetConfig+0xdc>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d007      	beq.n	8003726 <TIM_Base_SetConfig+0xaa>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a12      	ldr	r2, [pc, #72]	@ (8003764 <TIM_Base_SetConfig+0xe8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d003      	beq.n	8003726 <TIM_Base_SetConfig+0xaa>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a11      	ldr	r2, [pc, #68]	@ (8003768 <TIM_Base_SetConfig+0xec>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d103      	bne.n	800372e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	2201      	movs	r2, #1
 800373a:	4013      	ands	r3, r2
 800373c:	2b01      	cmp	r3, #1
 800373e:	d106      	bne.n	800374e <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	2201      	movs	r2, #1
 8003746:	4393      	bics	r3, r2
 8003748:	001a      	movs	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	611a      	str	r2, [r3, #16]
  }
}
 800374e:	46c0      	nop			@ (mov r8, r8)
 8003750:	46bd      	mov	sp, r7
 8003752:	b004      	add	sp, #16
 8003754:	bd80      	pop	{r7, pc}
 8003756:	46c0      	nop			@ (mov r8, r8)
 8003758:	40012c00 	.word	0x40012c00
 800375c:	40000400 	.word	0x40000400
 8003760:	40002000 	.word	0x40002000
 8003764:	40014400 	.word	0x40014400
 8003768:	40014800 	.word	0x40014800
 800376c:	fffffcff 	.word	0xfffffcff

08003770 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	2201      	movs	r2, #1
 8003788:	4393      	bics	r3, r2
 800378a:	001a      	movs	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	22f0      	movs	r2, #240	@ 0xf0
 800379a:	4393      	bics	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	220a      	movs	r2, #10
 80037ac:	4393      	bics	r3, r2
 80037ae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	621a      	str	r2, [r3, #32]
}
 80037c4:	46c0      	nop			@ (mov r8, r8)
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b006      	add	sp, #24
 80037ca:	bd80      	pop	{r7, pc}

080037cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	2210      	movs	r2, #16
 80037e4:	4393      	bics	r3, r2
 80037e6:	001a      	movs	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4a0d      	ldr	r2, [pc, #52]	@ (800382c <TIM_TI2_ConfigInputStage+0x60>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	031b      	lsls	r3, r3, #12
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	22a0      	movs	r2, #160	@ 0xa0
 8003808:	4393      	bics	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	621a      	str	r2, [r3, #32]
}
 8003822:	46c0      	nop			@ (mov r8, r8)
 8003824:	46bd      	mov	sp, r7
 8003826:	b006      	add	sp, #24
 8003828:	bd80      	pop	{r7, pc}
 800382a:	46c0      	nop			@ (mov r8, r8)
 800382c:	ffff0fff 	.word	0xffff0fff

08003830 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4a08      	ldr	r2, [pc, #32]	@ (8003864 <TIM_ITRx_SetConfig+0x34>)
 8003844:	4013      	ands	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4313      	orrs	r3, r2
 800384e:	2207      	movs	r2, #7
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	609a      	str	r2, [r3, #8]
}
 800385a:	46c0      	nop			@ (mov r8, r8)
 800385c:	46bd      	mov	sp, r7
 800385e:	b004      	add	sp, #16
 8003860:	bd80      	pop	{r7, pc}
 8003862:	46c0      	nop			@ (mov r8, r8)
 8003864:	ffcfff8f 	.word	0xffcfff8f

08003868 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	4a09      	ldr	r2, [pc, #36]	@ (80038a4 <TIM_ETR_SetConfig+0x3c>)
 8003880:	4013      	ands	r3, r2
 8003882:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	021a      	lsls	r2, r3, #8
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	431a      	orrs	r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4313      	orrs	r3, r2
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	4313      	orrs	r3, r2
 8003894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	609a      	str	r2, [r3, #8]
}
 800389c:	46c0      	nop			@ (mov r8, r8)
 800389e:	46bd      	mov	sp, r7
 80038a0:	b006      	add	sp, #24
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	ffff00ff 	.word	0xffff00ff

080038a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	223c      	movs	r2, #60	@ 0x3c
 80038b6:	5c9b      	ldrb	r3, [r3, r2]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038bc:	2302      	movs	r3, #2
 80038be:	e04a      	b.n	8003956 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	223c      	movs	r2, #60	@ 0x3c
 80038c4:	2101      	movs	r1, #1
 80038c6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	223d      	movs	r2, #61	@ 0x3d
 80038cc:	2102      	movs	r1, #2
 80038ce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003960 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d108      	bne.n	80038fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003964 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2270      	movs	r2, #112	@ 0x70
 8003900:	4393      	bics	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a11      	ldr	r2, [pc, #68]	@ (8003960 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d004      	beq.n	800392a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a10      	ldr	r2, [pc, #64]	@ (8003968 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d10c      	bne.n	8003944 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2280      	movs	r2, #128	@ 0x80
 800392e:	4393      	bics	r3, r2
 8003930:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	4313      	orrs	r3, r2
 800393a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	223d      	movs	r2, #61	@ 0x3d
 8003948:	2101      	movs	r1, #1
 800394a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	223c      	movs	r2, #60	@ 0x3c
 8003950:	2100      	movs	r1, #0
 8003952:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	0018      	movs	r0, r3
 8003958:	46bd      	mov	sp, r7
 800395a:	b004      	add	sp, #16
 800395c:	bd80      	pop	{r7, pc}
 800395e:	46c0      	nop			@ (mov r8, r8)
 8003960:	40012c00 	.word	0x40012c00
 8003964:	ff0fffff 	.word	0xff0fffff
 8003968:	40000400 	.word	0x40000400

0800396c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003974:	46c0      	nop			@ (mov r8, r8)
 8003976:	46bd      	mov	sp, r7
 8003978:	b002      	add	sp, #8
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003984:	46c0      	nop			@ (mov r8, r8)
 8003986:	46bd      	mov	sp, r7
 8003988:	b002      	add	sp, #8
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003994:	46c0      	nop			@ (mov r8, r8)
 8003996:	46bd      	mov	sp, r7
 8003998:	b002      	add	sp, #8
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e046      	b.n	8003a3c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2288      	movs	r2, #136	@ 0x88
 80039b2:	589b      	ldr	r3, [r3, r2]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d107      	bne.n	80039c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2284      	movs	r2, #132	@ 0x84
 80039bc:	2100      	movs	r1, #0
 80039be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	0018      	movs	r0, r3
 80039c4:	f7fd fac4 	bl	8000f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2288      	movs	r2, #136	@ 0x88
 80039cc:	2124      	movs	r1, #36	@ 0x24
 80039ce:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2101      	movs	r1, #1
 80039dc:	438a      	bics	r2, r1
 80039de:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	0018      	movs	r0, r3
 80039ec:	f000 fac8 	bl	8003f80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	0018      	movs	r0, r3
 80039f4:	f000 f946 	bl	8003c84 <UART_SetConfig>
 80039f8:	0003      	movs	r3, r0
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e01c      	b.n	8003a3c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	490d      	ldr	r1, [pc, #52]	@ (8003a44 <HAL_UART_Init+0xa8>)
 8003a0e:	400a      	ands	r2, r1
 8003a10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	212a      	movs	r1, #42	@ 0x2a
 8003a1e:	438a      	bics	r2, r1
 8003a20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	0018      	movs	r0, r3
 8003a36:	f000 fb57 	bl	80040e8 <UART_CheckIdleState>
 8003a3a:	0003      	movs	r3, r0
}
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b002      	add	sp, #8
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	ffffb7ff 	.word	0xffffb7ff

08003a48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	@ 0x28
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	1dbb      	adds	r3, r7, #6
 8003a56:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2288      	movs	r2, #136	@ 0x88
 8003a5c:	589b      	ldr	r3, [r3, r2]
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	d000      	beq.n	8003a64 <HAL_UART_Transmit+0x1c>
 8003a62:	e090      	b.n	8003b86 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_UART_Transmit+0x2a>
 8003a6a:	1dbb      	adds	r3, r7, #6
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e088      	b.n	8003b88 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	2380      	movs	r3, #128	@ 0x80
 8003a7c:	015b      	lsls	r3, r3, #5
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d109      	bne.n	8003a96 <HAL_UART_Transmit+0x4e>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d105      	bne.n	8003a96 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d001      	beq.n	8003a96 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e078      	b.n	8003b88 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2290      	movs	r2, #144	@ 0x90
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2288      	movs	r2, #136	@ 0x88
 8003aa2:	2121      	movs	r1, #33	@ 0x21
 8003aa4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aa6:	f7fd fba5 	bl	80011f4 <HAL_GetTick>
 8003aaa:	0003      	movs	r3, r0
 8003aac:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1dba      	adds	r2, r7, #6
 8003ab2:	2154      	movs	r1, #84	@ 0x54
 8003ab4:	8812      	ldrh	r2, [r2, #0]
 8003ab6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1dba      	adds	r2, r7, #6
 8003abc:	2156      	movs	r1, #86	@ 0x56
 8003abe:	8812      	ldrh	r2, [r2, #0]
 8003ac0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	2380      	movs	r3, #128	@ 0x80
 8003ac8:	015b      	lsls	r3, r3, #5
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d108      	bne.n	8003ae0 <HAL_UART_Transmit+0x98>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d104      	bne.n	8003ae0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	61bb      	str	r3, [r7, #24]
 8003ade:	e003      	b.n	8003ae8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ae8:	e030      	b.n	8003b4c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	0013      	movs	r3, r2
 8003af4:	2200      	movs	r2, #0
 8003af6:	2180      	movs	r1, #128	@ 0x80
 8003af8:	f000 fba0 	bl	800423c <UART_WaitOnFlagUntilTimeout>
 8003afc:	1e03      	subs	r3, r0, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2288      	movs	r2, #136	@ 0x88
 8003b04:	2120      	movs	r1, #32
 8003b06:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e03d      	b.n	8003b88 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10b      	bne.n	8003b2a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	001a      	movs	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	05d2      	lsls	r2, r2, #23
 8003b1e:	0dd2      	lsrs	r2, r2, #23
 8003b20:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	3302      	adds	r3, #2
 8003b26:	61bb      	str	r3, [r7, #24]
 8003b28:	e007      	b.n	8003b3a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	781a      	ldrb	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	3301      	adds	r3, #1
 8003b38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2256      	movs	r2, #86	@ 0x56
 8003b3e:	5a9b      	ldrh	r3, [r3, r2]
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b299      	uxth	r1, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2256      	movs	r2, #86	@ 0x56
 8003b4a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2256      	movs	r2, #86	@ 0x56
 8003b50:	5a9b      	ldrh	r3, [r3, r2]
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1c8      	bne.n	8003aea <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	0013      	movs	r3, r2
 8003b62:	2200      	movs	r2, #0
 8003b64:	2140      	movs	r1, #64	@ 0x40
 8003b66:	f000 fb69 	bl	800423c <UART_WaitOnFlagUntilTimeout>
 8003b6a:	1e03      	subs	r3, r0, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2288      	movs	r2, #136	@ 0x88
 8003b72:	2120      	movs	r1, #32
 8003b74:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e006      	b.n	8003b88 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2288      	movs	r2, #136	@ 0x88
 8003b7e:	2120      	movs	r1, #32
 8003b80:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	e000      	b.n	8003b88 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003b86:	2302      	movs	r3, #2
  }
}
 8003b88:	0018      	movs	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b008      	add	sp, #32
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	1dbb      	adds	r3, r7, #6
 8003b9c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	228c      	movs	r2, #140	@ 0x8c
 8003ba2:	589b      	ldr	r3, [r3, r2]
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d145      	bne.n	8003c34 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_UART_Receive_DMA+0x26>
 8003bae:	1dbb      	adds	r3, r7, #6
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e03d      	b.n	8003c36 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	2380      	movs	r3, #128	@ 0x80
 8003bc0:	015b      	lsls	r3, r3, #5
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d109      	bne.n	8003bda <HAL_UART_Receive_DMA+0x4a>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d105      	bne.n	8003bda <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d001      	beq.n	8003bda <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e02d      	b.n	8003c36 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	2380      	movs	r3, #128	@ 0x80
 8003be8:	041b      	lsls	r3, r3, #16
 8003bea:	4013      	ands	r3, r2
 8003bec:	d019      	beq.n	8003c22 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003bee:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf2:	613b      	str	r3, [r7, #16]
  return(result);
 8003bf4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bf6:	61fb      	str	r3, [r7, #28]
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f383 8810 	msr	PRIMASK, r3
}
 8003c02:	46c0      	nop			@ (mov r8, r8)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2180      	movs	r1, #128	@ 0x80
 8003c10:	04c9      	lsls	r1, r1, #19
 8003c12:	430a      	orrs	r2, r1
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	f383 8810 	msr	PRIMASK, r3
}
 8003c20:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003c22:	1dbb      	adds	r3, r7, #6
 8003c24:	881a      	ldrh	r2, [r3, #0]
 8003c26:	68b9      	ldr	r1, [r7, #8]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f000 fb76 	bl	800431c <UART_Start_Receive_DMA>
 8003c30:	0003      	movs	r3, r0
 8003c32:	e000      	b.n	8003c36 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003c34:	2302      	movs	r3, #2
  }
}
 8003c36:	0018      	movs	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b008      	add	sp, #32
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	b002      	add	sp, #8
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b082      	sub	sp, #8
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003c56:	46c0      	nop			@ (mov r8, r8)
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b002      	add	sp, #8
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c66:	46c0      	nop			@ (mov r8, r8)
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b002      	add	sp, #8
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	000a      	movs	r2, r1
 8003c78:	1cbb      	adds	r3, r7, #2
 8003c7a:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c7c:	46c0      	nop			@ (mov r8, r8)
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b002      	add	sp, #8
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c8c:	231e      	movs	r3, #30
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	2200      	movs	r2, #0
 8003c92:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4aab      	ldr	r2, [pc, #684]	@ (8003f60 <UART_SetConfig+0x2dc>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	0019      	movs	r1, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4aa6      	ldr	r2, [pc, #664]	@ (8003f64 <UART_SetConfig+0x2e0>)
 8003cca:	4013      	ands	r3, r2
 8003ccc:	0019      	movs	r1, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	4a9d      	ldr	r2, [pc, #628]	@ (8003f68 <UART_SetConfig+0x2e4>)
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	0019      	movs	r1, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d06:	220f      	movs	r2, #15
 8003d08:	4393      	bics	r3, r2
 8003d0a:	0019      	movs	r1, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a93      	ldr	r2, [pc, #588]	@ (8003f6c <UART_SetConfig+0x2e8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d127      	bne.n	8003d72 <UART_SetConfig+0xee>
 8003d22:	4b93      	ldr	r3, [pc, #588]	@ (8003f70 <UART_SetConfig+0x2ec>)
 8003d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d26:	2203      	movs	r2, #3
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d017      	beq.n	8003d5e <UART_SetConfig+0xda>
 8003d2e:	d81b      	bhi.n	8003d68 <UART_SetConfig+0xe4>
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d00a      	beq.n	8003d4a <UART_SetConfig+0xc6>
 8003d34:	d818      	bhi.n	8003d68 <UART_SetConfig+0xe4>
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <UART_SetConfig+0xbc>
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d00a      	beq.n	8003d54 <UART_SetConfig+0xd0>
 8003d3e:	e013      	b.n	8003d68 <UART_SetConfig+0xe4>
 8003d40:	231f      	movs	r3, #31
 8003d42:	18fb      	adds	r3, r7, r3
 8003d44:	2200      	movs	r2, #0
 8003d46:	701a      	strb	r2, [r3, #0]
 8003d48:	e021      	b.n	8003d8e <UART_SetConfig+0x10a>
 8003d4a:	231f      	movs	r3, #31
 8003d4c:	18fb      	adds	r3, r7, r3
 8003d4e:	2202      	movs	r2, #2
 8003d50:	701a      	strb	r2, [r3, #0]
 8003d52:	e01c      	b.n	8003d8e <UART_SetConfig+0x10a>
 8003d54:	231f      	movs	r3, #31
 8003d56:	18fb      	adds	r3, r7, r3
 8003d58:	2204      	movs	r2, #4
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	e017      	b.n	8003d8e <UART_SetConfig+0x10a>
 8003d5e:	231f      	movs	r3, #31
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	2208      	movs	r2, #8
 8003d64:	701a      	strb	r2, [r3, #0]
 8003d66:	e012      	b.n	8003d8e <UART_SetConfig+0x10a>
 8003d68:	231f      	movs	r3, #31
 8003d6a:	18fb      	adds	r3, r7, r3
 8003d6c:	2210      	movs	r2, #16
 8003d6e:	701a      	strb	r2, [r3, #0]
 8003d70:	e00d      	b.n	8003d8e <UART_SetConfig+0x10a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a7f      	ldr	r2, [pc, #508]	@ (8003f74 <UART_SetConfig+0x2f0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d104      	bne.n	8003d86 <UART_SetConfig+0x102>
 8003d7c:	231f      	movs	r3, #31
 8003d7e:	18fb      	adds	r3, r7, r3
 8003d80:	2200      	movs	r2, #0
 8003d82:	701a      	strb	r2, [r3, #0]
 8003d84:	e003      	b.n	8003d8e <UART_SetConfig+0x10a>
 8003d86:	231f      	movs	r3, #31
 8003d88:	18fb      	adds	r3, r7, r3
 8003d8a:	2210      	movs	r2, #16
 8003d8c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69da      	ldr	r2, [r3, #28]
 8003d92:	2380      	movs	r3, #128	@ 0x80
 8003d94:	021b      	lsls	r3, r3, #8
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d000      	beq.n	8003d9c <UART_SetConfig+0x118>
 8003d9a:	e06f      	b.n	8003e7c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8003d9c:	231f      	movs	r3, #31
 8003d9e:	18fb      	adds	r3, r7, r3
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d01f      	beq.n	8003de6 <UART_SetConfig+0x162>
 8003da6:	dc22      	bgt.n	8003dee <UART_SetConfig+0x16a>
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d017      	beq.n	8003ddc <UART_SetConfig+0x158>
 8003dac:	dc1f      	bgt.n	8003dee <UART_SetConfig+0x16a>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <UART_SetConfig+0x134>
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d005      	beq.n	8003dc2 <UART_SetConfig+0x13e>
 8003db6:	e01a      	b.n	8003dee <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db8:	f7ff f8b8 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 8003dbc:	0003      	movs	r3, r0
 8003dbe:	61bb      	str	r3, [r7, #24]
        break;
 8003dc0:	e01c      	b.n	8003dfc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003dc2:	4b6b      	ldr	r3, [pc, #428]	@ (8003f70 <UART_SetConfig+0x2ec>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	095b      	lsrs	r3, r3, #5
 8003dc8:	2207      	movs	r2, #7
 8003dca:	4013      	ands	r3, r2
 8003dcc:	3301      	adds	r3, #1
 8003dce:	0019      	movs	r1, r3
 8003dd0:	4869      	ldr	r0, [pc, #420]	@ (8003f78 <UART_SetConfig+0x2f4>)
 8003dd2:	f7fc f999 	bl	8000108 <__udivsi3>
 8003dd6:	0003      	movs	r3, r0
 8003dd8:	61bb      	str	r3, [r7, #24]
        break;
 8003dda:	e00f      	b.n	8003dfc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ddc:	f7ff f838 	bl	8002e50 <HAL_RCC_GetSysClockFreq>
 8003de0:	0003      	movs	r3, r0
 8003de2:	61bb      	str	r3, [r7, #24]
        break;
 8003de4:	e00a      	b.n	8003dfc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003de6:	2380      	movs	r3, #128	@ 0x80
 8003de8:	021b      	lsls	r3, r3, #8
 8003dea:	61bb      	str	r3, [r7, #24]
        break;
 8003dec:	e006      	b.n	8003dfc <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003df2:	231e      	movs	r3, #30
 8003df4:	18fb      	adds	r3, r7, r3
 8003df6:	2201      	movs	r2, #1
 8003df8:	701a      	strb	r2, [r3, #0]
        break;
 8003dfa:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d100      	bne.n	8003e04 <UART_SetConfig+0x180>
 8003e02:	e097      	b.n	8003f34 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e08:	4b5c      	ldr	r3, [pc, #368]	@ (8003f7c <UART_SetConfig+0x2f8>)
 8003e0a:	0052      	lsls	r2, r2, #1
 8003e0c:	5ad3      	ldrh	r3, [r2, r3]
 8003e0e:	0019      	movs	r1, r3
 8003e10:	69b8      	ldr	r0, [r7, #24]
 8003e12:	f7fc f979 	bl	8000108 <__udivsi3>
 8003e16:	0003      	movs	r3, r0
 8003e18:	005a      	lsls	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	085b      	lsrs	r3, r3, #1
 8003e20:	18d2      	adds	r2, r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	0019      	movs	r1, r3
 8003e28:	0010      	movs	r0, r2
 8003e2a:	f7fc f96d 	bl	8000108 <__udivsi3>
 8003e2e:	0003      	movs	r3, r0
 8003e30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2b0f      	cmp	r3, #15
 8003e36:	d91c      	bls.n	8003e72 <UART_SetConfig+0x1ee>
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	2380      	movs	r3, #128	@ 0x80
 8003e3c:	025b      	lsls	r3, r3, #9
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d217      	bcs.n	8003e72 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	200e      	movs	r0, #14
 8003e48:	183b      	adds	r3, r7, r0
 8003e4a:	210f      	movs	r1, #15
 8003e4c:	438a      	bics	r2, r1
 8003e4e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	085b      	lsrs	r3, r3, #1
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2207      	movs	r2, #7
 8003e58:	4013      	ands	r3, r2
 8003e5a:	b299      	uxth	r1, r3
 8003e5c:	183b      	adds	r3, r7, r0
 8003e5e:	183a      	adds	r2, r7, r0
 8003e60:	8812      	ldrh	r2, [r2, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	183a      	adds	r2, r7, r0
 8003e6c:	8812      	ldrh	r2, [r2, #0]
 8003e6e:	60da      	str	r2, [r3, #12]
 8003e70:	e060      	b.n	8003f34 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003e72:	231e      	movs	r3, #30
 8003e74:	18fb      	adds	r3, r7, r3
 8003e76:	2201      	movs	r2, #1
 8003e78:	701a      	strb	r2, [r3, #0]
 8003e7a:	e05b      	b.n	8003f34 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e7c:	231f      	movs	r3, #31
 8003e7e:	18fb      	adds	r3, r7, r3
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d01f      	beq.n	8003ec6 <UART_SetConfig+0x242>
 8003e86:	dc22      	bgt.n	8003ece <UART_SetConfig+0x24a>
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d017      	beq.n	8003ebc <UART_SetConfig+0x238>
 8003e8c:	dc1f      	bgt.n	8003ece <UART_SetConfig+0x24a>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <UART_SetConfig+0x214>
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d005      	beq.n	8003ea2 <UART_SetConfig+0x21e>
 8003e96:	e01a      	b.n	8003ece <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e98:	f7ff f848 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	61bb      	str	r3, [r7, #24]
        break;
 8003ea0:	e01c      	b.n	8003edc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003ea2:	4b33      	ldr	r3, [pc, #204]	@ (8003f70 <UART_SetConfig+0x2ec>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	2207      	movs	r2, #7
 8003eaa:	4013      	ands	r3, r2
 8003eac:	3301      	adds	r3, #1
 8003eae:	0019      	movs	r1, r3
 8003eb0:	4831      	ldr	r0, [pc, #196]	@ (8003f78 <UART_SetConfig+0x2f4>)
 8003eb2:	f7fc f929 	bl	8000108 <__udivsi3>
 8003eb6:	0003      	movs	r3, r0
 8003eb8:	61bb      	str	r3, [r7, #24]
        break;
 8003eba:	e00f      	b.n	8003edc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ebc:	f7fe ffc8 	bl	8002e50 <HAL_RCC_GetSysClockFreq>
 8003ec0:	0003      	movs	r3, r0
 8003ec2:	61bb      	str	r3, [r7, #24]
        break;
 8003ec4:	e00a      	b.n	8003edc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ec6:	2380      	movs	r3, #128	@ 0x80
 8003ec8:	021b      	lsls	r3, r3, #8
 8003eca:	61bb      	str	r3, [r7, #24]
        break;
 8003ecc:	e006      	b.n	8003edc <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ed2:	231e      	movs	r3, #30
 8003ed4:	18fb      	adds	r3, r7, r3
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	701a      	strb	r2, [r3, #0]
        break;
 8003eda:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d028      	beq.n	8003f34 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ee6:	4b25      	ldr	r3, [pc, #148]	@ (8003f7c <UART_SetConfig+0x2f8>)
 8003ee8:	0052      	lsls	r2, r2, #1
 8003eea:	5ad3      	ldrh	r3, [r2, r3]
 8003eec:	0019      	movs	r1, r3
 8003eee:	69b8      	ldr	r0, [r7, #24]
 8003ef0:	f7fc f90a 	bl	8000108 <__udivsi3>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	085b      	lsrs	r3, r3, #1
 8003efe:	18d2      	adds	r2, r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	0019      	movs	r1, r3
 8003f06:	0010      	movs	r0, r2
 8003f08:	f7fc f8fe 	bl	8000108 <__udivsi3>
 8003f0c:	0003      	movs	r3, r0
 8003f0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	2b0f      	cmp	r3, #15
 8003f14:	d90a      	bls.n	8003f2c <UART_SetConfig+0x2a8>
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	2380      	movs	r3, #128	@ 0x80
 8003f1a:	025b      	lsls	r3, r3, #9
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d205      	bcs.n	8003f2c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60da      	str	r2, [r3, #12]
 8003f2a:	e003      	b.n	8003f34 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003f2c:	231e      	movs	r3, #30
 8003f2e:	18fb      	adds	r3, r7, r3
 8003f30:	2201      	movs	r2, #1
 8003f32:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	226a      	movs	r2, #106	@ 0x6a
 8003f38:	2101      	movs	r1, #1
 8003f3a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2268      	movs	r2, #104	@ 0x68
 8003f40:	2101      	movs	r1, #1
 8003f42:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003f50:	231e      	movs	r3, #30
 8003f52:	18fb      	adds	r3, r7, r3
 8003f54:	781b      	ldrb	r3, [r3, #0]
}
 8003f56:	0018      	movs	r0, r3
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b008      	add	sp, #32
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	46c0      	nop			@ (mov r8, r8)
 8003f60:	cfff69f3 	.word	0xcfff69f3
 8003f64:	ffffcfff 	.word	0xffffcfff
 8003f68:	11fff4ff 	.word	0x11fff4ff
 8003f6c:	40013800 	.word	0x40013800
 8003f70:	40021000 	.word	0x40021000
 8003f74:	40004400 	.word	0x40004400
 8003f78:	02dc6c00 	.word	0x02dc6c00
 8003f7c:	0800487c 	.word	0x0800487c

08003f80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d00b      	beq.n	8003faa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	4a4a      	ldr	r2, [pc, #296]	@ (80040c4 <UART_AdvFeatureConfig+0x144>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	0019      	movs	r1, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fae:	2201      	movs	r2, #1
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d00b      	beq.n	8003fcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	4a43      	ldr	r2, [pc, #268]	@ (80040c8 <UART_AdvFeatureConfig+0x148>)
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	0019      	movs	r1, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d00b      	beq.n	8003fee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	4a3b      	ldr	r2, [pc, #236]	@ (80040cc <UART_AdvFeatureConfig+0x14c>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	0019      	movs	r1, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff2:	2204      	movs	r2, #4
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d00b      	beq.n	8004010 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	4a34      	ldr	r2, [pc, #208]	@ (80040d0 <UART_AdvFeatureConfig+0x150>)
 8004000:	4013      	ands	r3, r2
 8004002:	0019      	movs	r1, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004014:	2210      	movs	r2, #16
 8004016:	4013      	ands	r3, r2
 8004018:	d00b      	beq.n	8004032 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	4a2c      	ldr	r2, [pc, #176]	@ (80040d4 <UART_AdvFeatureConfig+0x154>)
 8004022:	4013      	ands	r3, r2
 8004024:	0019      	movs	r1, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004036:	2220      	movs	r2, #32
 8004038:	4013      	ands	r3, r2
 800403a:	d00b      	beq.n	8004054 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	4a25      	ldr	r2, [pc, #148]	@ (80040d8 <UART_AdvFeatureConfig+0x158>)
 8004044:	4013      	ands	r3, r2
 8004046:	0019      	movs	r1, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004058:	2240      	movs	r2, #64	@ 0x40
 800405a:	4013      	ands	r3, r2
 800405c:	d01d      	beq.n	800409a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	4a1d      	ldr	r2, [pc, #116]	@ (80040dc <UART_AdvFeatureConfig+0x15c>)
 8004066:	4013      	ands	r3, r2
 8004068:	0019      	movs	r1, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800407a:	2380      	movs	r3, #128	@ 0x80
 800407c:	035b      	lsls	r3, r3, #13
 800407e:	429a      	cmp	r2, r3
 8004080:	d10b      	bne.n	800409a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	4a15      	ldr	r2, [pc, #84]	@ (80040e0 <UART_AdvFeatureConfig+0x160>)
 800408a:	4013      	ands	r3, r2
 800408c:	0019      	movs	r1, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409e:	2280      	movs	r2, #128	@ 0x80
 80040a0:	4013      	ands	r3, r2
 80040a2:	d00b      	beq.n	80040bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	4a0e      	ldr	r2, [pc, #56]	@ (80040e4 <UART_AdvFeatureConfig+0x164>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	0019      	movs	r1, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	605a      	str	r2, [r3, #4]
  }
}
 80040bc:	46c0      	nop			@ (mov r8, r8)
 80040be:	46bd      	mov	sp, r7
 80040c0:	b002      	add	sp, #8
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	ffff7fff 	.word	0xffff7fff
 80040c8:	fffdffff 	.word	0xfffdffff
 80040cc:	fffeffff 	.word	0xfffeffff
 80040d0:	fffbffff 	.word	0xfffbffff
 80040d4:	ffffefff 	.word	0xffffefff
 80040d8:	ffffdfff 	.word	0xffffdfff
 80040dc:	ffefffff 	.word	0xffefffff
 80040e0:	ff9fffff 	.word	0xff9fffff
 80040e4:	fff7ffff 	.word	0xfff7ffff

080040e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b092      	sub	sp, #72	@ 0x48
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2290      	movs	r2, #144	@ 0x90
 80040f4:	2100      	movs	r1, #0
 80040f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040f8:	f7fd f87c 	bl	80011f4 <HAL_GetTick>
 80040fc:	0003      	movs	r3, r0
 80040fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2208      	movs	r2, #8
 8004108:	4013      	ands	r3, r2
 800410a:	2b08      	cmp	r3, #8
 800410c:	d12d      	bne.n	800416a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800410e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004110:	2280      	movs	r2, #128	@ 0x80
 8004112:	0391      	lsls	r1, r2, #14
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	4a47      	ldr	r2, [pc, #284]	@ (8004234 <UART_CheckIdleState+0x14c>)
 8004118:	9200      	str	r2, [sp, #0]
 800411a:	2200      	movs	r2, #0
 800411c:	f000 f88e 	bl	800423c <UART_WaitOnFlagUntilTimeout>
 8004120:	1e03      	subs	r3, r0, #0
 8004122:	d022      	beq.n	800416a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004124:	f3ef 8310 	mrs	r3, PRIMASK
 8004128:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800412a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800412c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800412e:	2301      	movs	r3, #1
 8004130:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004134:	f383 8810 	msr	PRIMASK, r3
}
 8004138:	46c0      	nop			@ (mov r8, r8)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2180      	movs	r1, #128	@ 0x80
 8004146:	438a      	bics	r2, r1
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800414e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004150:	f383 8810 	msr	PRIMASK, r3
}
 8004154:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2288      	movs	r2, #136	@ 0x88
 800415a:	2120      	movs	r1, #32
 800415c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2284      	movs	r2, #132	@ 0x84
 8004162:	2100      	movs	r1, #0
 8004164:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e060      	b.n	800422c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2204      	movs	r2, #4
 8004172:	4013      	ands	r3, r2
 8004174:	2b04      	cmp	r3, #4
 8004176:	d146      	bne.n	8004206 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800417a:	2280      	movs	r2, #128	@ 0x80
 800417c:	03d1      	lsls	r1, r2, #15
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	4a2c      	ldr	r2, [pc, #176]	@ (8004234 <UART_CheckIdleState+0x14c>)
 8004182:	9200      	str	r2, [sp, #0]
 8004184:	2200      	movs	r2, #0
 8004186:	f000 f859 	bl	800423c <UART_WaitOnFlagUntilTimeout>
 800418a:	1e03      	subs	r3, r0, #0
 800418c:	d03b      	beq.n	8004206 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800418e:	f3ef 8310 	mrs	r3, PRIMASK
 8004192:	60fb      	str	r3, [r7, #12]
  return(result);
 8004194:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004196:	637b      	str	r3, [r7, #52]	@ 0x34
 8004198:	2301      	movs	r3, #1
 800419a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f383 8810 	msr	PRIMASK, r3
}
 80041a2:	46c0      	nop			@ (mov r8, r8)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4922      	ldr	r1, [pc, #136]	@ (8004238 <UART_CheckIdleState+0x150>)
 80041b0:	400a      	ands	r2, r1
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f383 8810 	msr	PRIMASK, r3
}
 80041be:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80041c0:	f3ef 8310 	mrs	r3, PRIMASK
 80041c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80041c6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80041ca:	2301      	movs	r3, #1
 80041cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	f383 8810 	msr	PRIMASK, r3
}
 80041d4:	46c0      	nop			@ (mov r8, r8)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2101      	movs	r1, #1
 80041e2:	438a      	bics	r2, r1
 80041e4:	609a      	str	r2, [r3, #8]
 80041e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	f383 8810 	msr	PRIMASK, r3
}
 80041f0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	228c      	movs	r2, #140	@ 0x8c
 80041f6:	2120      	movs	r1, #32
 80041f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2284      	movs	r2, #132	@ 0x84
 80041fe:	2100      	movs	r1, #0
 8004200:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e012      	b.n	800422c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2288      	movs	r2, #136	@ 0x88
 800420a:	2120      	movs	r1, #32
 800420c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	228c      	movs	r2, #140	@ 0x8c
 8004212:	2120      	movs	r1, #32
 8004214:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2284      	movs	r2, #132	@ 0x84
 8004226:	2100      	movs	r1, #0
 8004228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	0018      	movs	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	b010      	add	sp, #64	@ 0x40
 8004232:	bd80      	pop	{r7, pc}
 8004234:	01ffffff 	.word	0x01ffffff
 8004238:	fffffedf 	.word	0xfffffedf

0800423c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	1dfb      	adds	r3, r7, #7
 800424a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800424c:	e051      	b.n	80042f2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	3301      	adds	r3, #1
 8004252:	d04e      	beq.n	80042f2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004254:	f7fc ffce 	bl	80011f4 <HAL_GetTick>
 8004258:	0002      	movs	r2, r0
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	429a      	cmp	r2, r3
 8004262:	d302      	bcc.n	800426a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e051      	b.n	8004312 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2204      	movs	r2, #4
 8004276:	4013      	ands	r3, r2
 8004278:	d03b      	beq.n	80042f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b80      	cmp	r3, #128	@ 0x80
 800427e:	d038      	beq.n	80042f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b40      	cmp	r3, #64	@ 0x40
 8004284:	d035      	beq.n	80042f2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	2208      	movs	r2, #8
 800428e:	4013      	ands	r3, r2
 8004290:	2b08      	cmp	r3, #8
 8004292:	d111      	bne.n	80042b8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2208      	movs	r2, #8
 800429a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	0018      	movs	r0, r3
 80042a0:	f000 f922 	bl	80044e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2290      	movs	r2, #144	@ 0x90
 80042a8:	2108      	movs	r1, #8
 80042aa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2284      	movs	r2, #132	@ 0x84
 80042b0:	2100      	movs	r1, #0
 80042b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e02c      	b.n	8004312 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	69da      	ldr	r2, [r3, #28]
 80042be:	2380      	movs	r3, #128	@ 0x80
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	401a      	ands	r2, r3
 80042c4:	2380      	movs	r3, #128	@ 0x80
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d112      	bne.n	80042f2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2280      	movs	r2, #128	@ 0x80
 80042d2:	0112      	lsls	r2, r2, #4
 80042d4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	0018      	movs	r0, r3
 80042da:	f000 f905 	bl	80044e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2290      	movs	r2, #144	@ 0x90
 80042e2:	2120      	movs	r1, #32
 80042e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2284      	movs	r2, #132	@ 0x84
 80042ea:	2100      	movs	r1, #0
 80042ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e00f      	b.n	8004312 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	4013      	ands	r3, r2
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	425a      	negs	r2, r3
 8004302:	4153      	adcs	r3, r2
 8004304:	b2db      	uxtb	r3, r3
 8004306:	001a      	movs	r2, r3
 8004308:	1dfb      	adds	r3, r7, #7
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d09e      	beq.n	800424e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	0018      	movs	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	b004      	add	sp, #16
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b090      	sub	sp, #64	@ 0x40
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	1dbb      	adds	r3, r7, #6
 8004328:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	1dba      	adds	r2, r7, #6
 8004334:	215c      	movs	r1, #92	@ 0x5c
 8004336:	8812      	ldrh	r2, [r2, #0]
 8004338:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2290      	movs	r2, #144	@ 0x90
 800433e:	2100      	movs	r1, #0
 8004340:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	228c      	movs	r2, #140	@ 0x8c
 8004346:	2122      	movs	r1, #34	@ 0x22
 8004348:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2280      	movs	r2, #128	@ 0x80
 800434e:	589b      	ldr	r3, [r3, r2]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d02d      	beq.n	80043b0 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2280      	movs	r2, #128	@ 0x80
 8004358:	589b      	ldr	r3, [r3, r2]
 800435a:	4a40      	ldr	r2, [pc, #256]	@ (800445c <UART_Start_Receive_DMA+0x140>)
 800435c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2280      	movs	r2, #128	@ 0x80
 8004362:	589b      	ldr	r3, [r3, r2]
 8004364:	4a3e      	ldr	r2, [pc, #248]	@ (8004460 <UART_Start_Receive_DMA+0x144>)
 8004366:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2280      	movs	r2, #128	@ 0x80
 800436c:	589b      	ldr	r3, [r3, r2]
 800436e:	4a3d      	ldr	r2, [pc, #244]	@ (8004464 <UART_Start_Receive_DMA+0x148>)
 8004370:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2280      	movs	r2, #128	@ 0x80
 8004376:	589b      	ldr	r3, [r3, r2]
 8004378:	2200      	movs	r2, #0
 800437a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2280      	movs	r2, #128	@ 0x80
 8004380:	5898      	ldr	r0, [r3, r2]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3324      	adds	r3, #36	@ 0x24
 8004388:	0019      	movs	r1, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438e:	001a      	movs	r2, r3
 8004390:	1dbb      	adds	r3, r7, #6
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	f7fd f8a0 	bl	80014d8 <HAL_DMA_Start_IT>
 8004398:	1e03      	subs	r3, r0, #0
 800439a:	d009      	beq.n	80043b0 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2290      	movs	r2, #144	@ 0x90
 80043a0:	2110      	movs	r1, #16
 80043a2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	228c      	movs	r2, #140	@ 0x8c
 80043a8:	2120      	movs	r1, #32
 80043aa:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e050      	b.n	8004452 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d019      	beq.n	80043ec <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043b8:	f3ef 8310 	mrs	r3, PRIMASK
 80043bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80043be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043c2:	2301      	movs	r3, #1
 80043c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c8:	f383 8810 	msr	PRIMASK, r3
}
 80043cc:	46c0      	nop			@ (mov r8, r8)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2180      	movs	r1, #128	@ 0x80
 80043da:	0049      	lsls	r1, r1, #1
 80043dc:	430a      	orrs	r2, r1
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043e2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e6:	f383 8810 	msr	PRIMASK, r3
}
 80043ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043ec:	f3ef 8310 	mrs	r3, PRIMASK
 80043f0:	613b      	str	r3, [r7, #16]
  return(result);
 80043f2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043f6:	2301      	movs	r3, #1
 80043f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f383 8810 	msr	PRIMASK, r3
}
 8004400:	46c0      	nop			@ (mov r8, r8)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2101      	movs	r1, #1
 800440e:	430a      	orrs	r2, r1
 8004410:	609a      	str	r2, [r3, #8]
 8004412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004414:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	f383 8810 	msr	PRIMASK, r3
}
 800441c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800441e:	f3ef 8310 	mrs	r3, PRIMASK
 8004422:	61fb      	str	r3, [r7, #28]
  return(result);
 8004424:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004426:	637b      	str	r3, [r7, #52]	@ 0x34
 8004428:	2301      	movs	r3, #1
 800442a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	f383 8810 	msr	PRIMASK, r3
}
 8004432:	46c0      	nop			@ (mov r8, r8)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2140      	movs	r1, #64	@ 0x40
 8004440:	430a      	orrs	r2, r1
 8004442:	609a      	str	r2, [r3, #8]
 8004444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004446:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444a:	f383 8810 	msr	PRIMASK, r3
}
 800444e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	0018      	movs	r0, r3
 8004454:	46bd      	mov	sp, r7
 8004456:	b010      	add	sp, #64	@ 0x40
 8004458:	bd80      	pop	{r7, pc}
 800445a:	46c0      	nop			@ (mov r8, r8)
 800445c:	080045b5 	.word	0x080045b5
 8004460:	080046e5 	.word	0x080046e5
 8004464:	08004727 	.word	0x08004727

08004468 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08a      	sub	sp, #40	@ 0x28
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004470:	f3ef 8310 	mrs	r3, PRIMASK
 8004474:	60bb      	str	r3, [r7, #8]
  return(result);
 8004476:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004478:	627b      	str	r3, [r7, #36]	@ 0x24
 800447a:	2301      	movs	r3, #1
 800447c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f383 8810 	msr	PRIMASK, r3
}
 8004484:	46c0      	nop			@ (mov r8, r8)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	21c0      	movs	r1, #192	@ 0xc0
 8004492:	438a      	bics	r2, r1
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004498:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f383 8810 	msr	PRIMASK, r3
}
 80044a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80044a2:	f3ef 8310 	mrs	r3, PRIMASK
 80044a6:	617b      	str	r3, [r7, #20]
  return(result);
 80044a8:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80044aa:	623b      	str	r3, [r7, #32]
 80044ac:	2301      	movs	r3, #1
 80044ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	f383 8810 	msr	PRIMASK, r3
}
 80044b6:	46c0      	nop			@ (mov r8, r8)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4908      	ldr	r1, [pc, #32]	@ (80044e4 <UART_EndTxTransfer+0x7c>)
 80044c4:	400a      	ands	r2, r1
 80044c6:	609a      	str	r2, [r3, #8]
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f383 8810 	msr	PRIMASK, r3
}
 80044d2:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2288      	movs	r2, #136	@ 0x88
 80044d8:	2120      	movs	r1, #32
 80044da:	5099      	str	r1, [r3, r2]
}
 80044dc:	46c0      	nop			@ (mov r8, r8)
 80044de:	46bd      	mov	sp, r7
 80044e0:	b00a      	add	sp, #40	@ 0x28
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	ff7fffff 	.word	0xff7fffff

080044e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08e      	sub	sp, #56	@ 0x38
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80044f0:	f3ef 8310 	mrs	r3, PRIMASK
 80044f4:	617b      	str	r3, [r7, #20]
  return(result);
 80044f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80044fa:	2301      	movs	r3, #1
 80044fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	f383 8810 	msr	PRIMASK, r3
}
 8004504:	46c0      	nop			@ (mov r8, r8)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4926      	ldr	r1, [pc, #152]	@ (80045ac <UART_EndRxTransfer+0xc4>)
 8004512:	400a      	ands	r2, r1
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004518:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	f383 8810 	msr	PRIMASK, r3
}
 8004520:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004522:	f3ef 8310 	mrs	r3, PRIMASK
 8004526:	623b      	str	r3, [r7, #32]
  return(result);
 8004528:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800452a:	633b      	str	r3, [r7, #48]	@ 0x30
 800452c:	2301      	movs	r3, #1
 800452e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004532:	f383 8810 	msr	PRIMASK, r3
}
 8004536:	46c0      	nop			@ (mov r8, r8)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	491b      	ldr	r1, [pc, #108]	@ (80045b0 <UART_EndRxTransfer+0xc8>)
 8004544:	400a      	ands	r2, r1
 8004546:	609a      	str	r2, [r3, #8]
 8004548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800454c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454e:	f383 8810 	msr	PRIMASK, r3
}
 8004552:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004558:	2b01      	cmp	r3, #1
 800455a:	d118      	bne.n	800458e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800455c:	f3ef 8310 	mrs	r3, PRIMASK
 8004560:	60bb      	str	r3, [r7, #8]
  return(result);
 8004562:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004564:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004566:	2301      	movs	r3, #1
 8004568:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f383 8810 	msr	PRIMASK, r3
}
 8004570:	46c0      	nop			@ (mov r8, r8)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2110      	movs	r1, #16
 800457e:	438a      	bics	r2, r1
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004584:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f383 8810 	msr	PRIMASK, r3
}
 800458c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	228c      	movs	r2, #140	@ 0x8c
 8004592:	2120      	movs	r1, #32
 8004594:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80045a2:	46c0      	nop			@ (mov r8, r8)
 80045a4:	46bd      	mov	sp, r7
 80045a6:	b00e      	add	sp, #56	@ 0x38
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	46c0      	nop			@ (mov r8, r8)
 80045ac:	fffffedf 	.word	0xfffffedf
 80045b0:	effffffe 	.word	0xeffffffe

080045b4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b094      	sub	sp, #80	@ 0x50
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2220      	movs	r2, #32
 80045ca:	4013      	ands	r3, r2
 80045cc:	d16f      	bne.n	80046ae <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80045ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045d0:	225e      	movs	r2, #94	@ 0x5e
 80045d2:	2100      	movs	r1, #0
 80045d4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80045d6:	f3ef 8310 	mrs	r3, PRIMASK
 80045da:	61bb      	str	r3, [r7, #24]
  return(result);
 80045dc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045e0:	2301      	movs	r3, #1
 80045e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f383 8810 	msr	PRIMASK, r3
}
 80045ea:	46c0      	nop			@ (mov r8, r8)
 80045ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	493a      	ldr	r1, [pc, #232]	@ (80046e0 <UART_DMAReceiveCplt+0x12c>)
 80045f8:	400a      	ands	r2, r1
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	f383 8810 	msr	PRIMASK, r3
}
 8004606:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004608:	f3ef 8310 	mrs	r3, PRIMASK
 800460c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004610:	647b      	str	r3, [r7, #68]	@ 0x44
 8004612:	2301      	movs	r3, #1
 8004614:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004618:	f383 8810 	msr	PRIMASK, r3
}
 800461c:	46c0      	nop			@ (mov r8, r8)
 800461e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2101      	movs	r1, #1
 800462a:	438a      	bics	r2, r1
 800462c:	609a      	str	r2, [r3, #8]
 800462e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004630:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004634:	f383 8810 	msr	PRIMASK, r3
}
 8004638:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800463a:	f3ef 8310 	mrs	r3, PRIMASK
 800463e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004642:	643b      	str	r3, [r7, #64]	@ 0x40
 8004644:	2301      	movs	r3, #1
 8004646:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800464a:	f383 8810 	msr	PRIMASK, r3
}
 800464e:	46c0      	nop			@ (mov r8, r8)
 8004650:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2140      	movs	r1, #64	@ 0x40
 800465c:	438a      	bics	r2, r1
 800465e:	609a      	str	r2, [r3, #8]
 8004660:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004662:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004666:	f383 8810 	msr	PRIMASK, r3
}
 800466a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800466c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800466e:	228c      	movs	r2, #140	@ 0x8c
 8004670:	2120      	movs	r1, #32
 8004672:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004674:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004676:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004678:	2b01      	cmp	r3, #1
 800467a:	d118      	bne.n	80046ae <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800467c:	f3ef 8310 	mrs	r3, PRIMASK
 8004680:	60fb      	str	r3, [r7, #12]
  return(result);
 8004682:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004684:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004686:	2301      	movs	r3, #1
 8004688:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f383 8810 	msr	PRIMASK, r3
}
 8004690:	46c0      	nop			@ (mov r8, r8)
 8004692:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2110      	movs	r1, #16
 800469e:	438a      	bics	r2, r1
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f383 8810 	msr	PRIMASK, r3
}
 80046ac:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046b0:	2200      	movs	r2, #0
 80046b2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d108      	bne.n	80046ce <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046be:	225c      	movs	r2, #92	@ 0x5c
 80046c0:	5a9a      	ldrh	r2, [r3, r2]
 80046c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046c4:	0011      	movs	r1, r2
 80046c6:	0018      	movs	r0, r3
 80046c8:	f7ff fad1 	bl	8003c6e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80046cc:	e003      	b.n	80046d6 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 80046ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7ff fab4 	bl	8003c3e <HAL_UART_RxCpltCallback>
}
 80046d6:	46c0      	nop			@ (mov r8, r8)
 80046d8:	46bd      	mov	sp, r7
 80046da:	b014      	add	sp, #80	@ 0x50
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	46c0      	nop			@ (mov r8, r8)
 80046e0:	fffffeff 	.word	0xfffffeff

080046e4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d10a      	bne.n	8004716 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	225c      	movs	r2, #92	@ 0x5c
 8004704:	5a9b      	ldrh	r3, [r3, r2]
 8004706:	085b      	lsrs	r3, r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	0011      	movs	r1, r2
 800470e:	0018      	movs	r0, r3
 8004710:	f7ff faad 	bl	8003c6e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004714:	e003      	b.n	800471e <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	0018      	movs	r0, r3
 800471a:	f7ff fa98 	bl	8003c4e <HAL_UART_RxHalfCpltCallback>
}
 800471e:	46c0      	nop			@ (mov r8, r8)
 8004720:	46bd      	mov	sp, r7
 8004722:	b004      	add	sp, #16
 8004724:	bd80      	pop	{r7, pc}

08004726 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b086      	sub	sp, #24
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004732:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2288      	movs	r2, #136	@ 0x88
 8004738:	589b      	ldr	r3, [r3, r2]
 800473a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	228c      	movs	r2, #140	@ 0x8c
 8004740:	589b      	ldr	r3, [r3, r2]
 8004742:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2280      	movs	r2, #128	@ 0x80
 800474c:	4013      	ands	r3, r2
 800474e:	2b80      	cmp	r3, #128	@ 0x80
 8004750:	d10a      	bne.n	8004768 <UART_DMAError+0x42>
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	2b21      	cmp	r3, #33	@ 0x21
 8004756:	d107      	bne.n	8004768 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2256      	movs	r2, #86	@ 0x56
 800475c:	2100      	movs	r1, #0
 800475e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	0018      	movs	r0, r3
 8004764:	f7ff fe80 	bl	8004468 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2240      	movs	r2, #64	@ 0x40
 8004770:	4013      	ands	r3, r2
 8004772:	2b40      	cmp	r3, #64	@ 0x40
 8004774:	d10a      	bne.n	800478c <UART_DMAError+0x66>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b22      	cmp	r3, #34	@ 0x22
 800477a:	d107      	bne.n	800478c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	225e      	movs	r2, #94	@ 0x5e
 8004780:	2100      	movs	r1, #0
 8004782:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	0018      	movs	r0, r3
 8004788:	f7ff feae 	bl	80044e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	2290      	movs	r2, #144	@ 0x90
 8004790:	589b      	ldr	r3, [r3, r2]
 8004792:	2210      	movs	r2, #16
 8004794:	431a      	orrs	r2, r3
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2190      	movs	r1, #144	@ 0x90
 800479a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	0018      	movs	r0, r3
 80047a0:	f7ff fa5d 	bl	8003c5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047a4:	46c0      	nop			@ (mov r8, r8)
 80047a6:	46bd      	mov	sp, r7
 80047a8:	b006      	add	sp, #24
 80047aa:	bd80      	pop	{r7, pc}

080047ac <memset>:
 80047ac:	0003      	movs	r3, r0
 80047ae:	1882      	adds	r2, r0, r2
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d100      	bne.n	80047b6 <memset+0xa>
 80047b4:	4770      	bx	lr
 80047b6:	7019      	strb	r1, [r3, #0]
 80047b8:	3301      	adds	r3, #1
 80047ba:	e7f9      	b.n	80047b0 <memset+0x4>

080047bc <__libc_init_array>:
 80047bc:	b570      	push	{r4, r5, r6, lr}
 80047be:	2600      	movs	r6, #0
 80047c0:	4c0c      	ldr	r4, [pc, #48]	@ (80047f4 <__libc_init_array+0x38>)
 80047c2:	4d0d      	ldr	r5, [pc, #52]	@ (80047f8 <__libc_init_array+0x3c>)
 80047c4:	1b64      	subs	r4, r4, r5
 80047c6:	10a4      	asrs	r4, r4, #2
 80047c8:	42a6      	cmp	r6, r4
 80047ca:	d109      	bne.n	80047e0 <__libc_init_array+0x24>
 80047cc:	2600      	movs	r6, #0
 80047ce:	f000 f819 	bl	8004804 <_init>
 80047d2:	4c0a      	ldr	r4, [pc, #40]	@ (80047fc <__libc_init_array+0x40>)
 80047d4:	4d0a      	ldr	r5, [pc, #40]	@ (8004800 <__libc_init_array+0x44>)
 80047d6:	1b64      	subs	r4, r4, r5
 80047d8:	10a4      	asrs	r4, r4, #2
 80047da:	42a6      	cmp	r6, r4
 80047dc:	d105      	bne.n	80047ea <__libc_init_array+0x2e>
 80047de:	bd70      	pop	{r4, r5, r6, pc}
 80047e0:	00b3      	lsls	r3, r6, #2
 80047e2:	58eb      	ldr	r3, [r5, r3]
 80047e4:	4798      	blx	r3
 80047e6:	3601      	adds	r6, #1
 80047e8:	e7ee      	b.n	80047c8 <__libc_init_array+0xc>
 80047ea:	00b3      	lsls	r3, r6, #2
 80047ec:	58eb      	ldr	r3, [r5, r3]
 80047ee:	4798      	blx	r3
 80047f0:	3601      	adds	r6, #1
 80047f2:	e7f2      	b.n	80047da <__libc_init_array+0x1e>
 80047f4:	08004894 	.word	0x08004894
 80047f8:	08004894 	.word	0x08004894
 80047fc:	08004898 	.word	0x08004898
 8004800:	08004894 	.word	0x08004894

08004804 <_init>:
 8004804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004806:	46c0      	nop			@ (mov r8, r8)
 8004808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480a:	bc08      	pop	{r3}
 800480c:	469e      	mov	lr, r3
 800480e:	4770      	bx	lr

08004810 <_fini>:
 8004810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004812:	46c0      	nop			@ (mov r8, r8)
 8004814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004816:	bc08      	pop	{r3}
 8004818:	469e      	mov	lr, r3
 800481a:	4770      	bx	lr
