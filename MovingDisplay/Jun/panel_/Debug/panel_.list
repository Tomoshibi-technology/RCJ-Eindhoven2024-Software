
panel_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003468  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003520  08003520  00004520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035c0  080035c0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080035c0  080035c0  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035c0  080035c0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080035c0  080035c0  000045c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035c8  080035c8  000045c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080035cc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  2000000c  080035d8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  080035d8  0000541c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5fd  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001def  00000000  00000000  0000f631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  00011420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000890  00000000  00000000  00011f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001532a  00000000  00000000  000127c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c780  00000000  00000000  00027aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008131b  00000000  00000000  0003426a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b5585  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002760  00000000  00000000  000b55c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000b7d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003508 	.word	0x08003508

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08003508 	.word	0x08003508

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	Neopixel.do_forwardRewrite();
 8000220:	4b06      	ldr	r3, [pc, #24]	@ (800023c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x24>)
 8000222:	0018      	movs	r0, r3
 8000224:	f000 fabc 	bl	80007a0 <_ZN6WS281217do_forwardRewriteEv>
	aaa++;
 8000228:	4b05      	ldr	r3, [pc, #20]	@ (8000240 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x28>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b03      	ldr	r3, [pc, #12]	@ (8000240 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x28>)
 8000232:	701a      	strb	r2, [r3, #0]
}
 8000234:	46c0      	nop			@ (mov r8, r8)
 8000236:	46bd      	mov	sp, r7
 8000238:	b002      	add	sp, #8
 800023a:	bd80      	pop	{r7, pc}
 800023c:	200000d0 	.word	0x200000d0
 8000240:	20000414 	.word	0x20000414

08000244 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
	Neopixel.do_backRewrite();
 800024c:	4b06      	ldr	r3, [pc, #24]	@ (8000268 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800024e:	0018      	movs	r0, r3
 8000250:	f000 fb50 	bl	80008f4 <_ZN6WS281214do_backRewriteEv>
	bbb++;
 8000254:	4b05      	ldr	r3, [pc, #20]	@ (800026c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	3301      	adds	r3, #1
 800025a:	b2da      	uxtb	r2, r3
 800025c:	4b03      	ldr	r3, [pc, #12]	@ (800026c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 800025e:	701a      	strb	r2, [r3, #0]
}
 8000260:	46c0      	nop			@ (mov r8, r8)
 8000262:	46bd      	mov	sp, r7
 8000264:	b002      	add	sp, #8
 8000266:	bd80      	pop	{r7, pc}
 8000268:	200000d0 	.word	0x200000d0
 800026c:	20000415 	.word	0x20000415

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fc21 	bl	8000abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f835 	bl	80002e8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f93f 	bl	8000500 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000282:	f000 f91f 	bl	80004c4 <_ZL11MX_DMA_Initv>
  MX_TIM3_Init();
 8000286:	f000 f88b 	bl	80003a0 <_ZL12MX_TIM3_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint16_t  pwmlist1[] = {
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4a14      	ldr	r2, [pc, #80]	@ (80002e0 <main+0x70>)
 800028e:	ca03      	ldmia	r2!, {r0, r1}
 8000290:	c303      	stmia	r3!, {r0, r1}
 8000292:	8812      	ldrh	r2, [r2, #0]
 8000294:	801a      	strh	r2, [r3, #0]
		10, 2, 0, 4, 14,
	};

	//  HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, (uint32_t *)wr_buf, 48);
	HAL_TIM_PWM_Start_DMA (&htim3, TIM_CHANNEL_2, (uint32_t*)pwmlist1, sizeof (pwmlist1) / sizeof (uint16_t));
 8000296:	1d3a      	adds	r2, r7, #4
 8000298:	4812      	ldr	r0, [pc, #72]	@ (80002e4 <main+0x74>)
 800029a:	2305      	movs	r3, #5
 800029c:	2104      	movs	r1, #4
 800029e:	f001 ff45 	bl	800212c <HAL_TIM_PWM_Start_DMA>
	HAL_Delay(100);
 80002a2:	2064      	movs	r0, #100	@ 0x64
 80002a4:	f000 fc90 	bl	8000bc8 <HAL_Delay>
	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_2);
 80002a8:	4b0e      	ldr	r3, [pc, #56]	@ (80002e4 <main+0x74>)
 80002aa:	2104      	movs	r1, #4
 80002ac:	0018      	movs	r0, r3
 80002ae:	f002 f92b 	bl	8002508 <HAL_TIM_PWM_Stop_DMA>

  while (1)
  {
	  htim3.State = HAL_TIM_STATE_READY;
 80002b2:	4b0c      	ldr	r3, [pc, #48]	@ (80002e4 <main+0x74>)
 80002b4:	223d      	movs	r2, #61	@ 0x3d
 80002b6:	2101      	movs	r1, #1
 80002b8:	5499      	strb	r1, [r3, r2]
	  HAL_TIM_PWM_Start_DMA (&htim3, TIM_CHANNEL_2, (uint32_t*)pwmlist1, sizeof (pwmlist1) / sizeof (uint16_t));
 80002ba:	1d3a      	adds	r2, r7, #4
 80002bc:	4809      	ldr	r0, [pc, #36]	@ (80002e4 <main+0x74>)
 80002be:	2305      	movs	r3, #5
 80002c0:	2104      	movs	r1, #4
 80002c2:	f001 ff33 	bl	800212c <HAL_TIM_PWM_Start_DMA>
	  HAL_Delay(100);
 80002c6:	2064      	movs	r0, #100	@ 0x64
 80002c8:	f000 fc7e 	bl	8000bc8 <HAL_Delay>
	  HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_2);
 80002cc:	4b05      	ldr	r3, [pc, #20]	@ (80002e4 <main+0x74>)
 80002ce:	2104      	movs	r1, #4
 80002d0:	0018      	movs	r0, r3
 80002d2:	f002 f919 	bl	8002508 <HAL_TIM_PWM_Stop_DMA>
//	  for(uint8_t i=0; i<200; i++){
//		  Neopixel.set_rgb(i, 10, 33, 80);
//	  }
//	  Neopixel.show();

	  HAL_Delay(10);
 80002d6:	200a      	movs	r0, #10
 80002d8:	f000 fc76 	bl	8000bc8 <HAL_Delay>
	  htim3.State = HAL_TIM_STATE_READY;
 80002dc:	46c0      	nop			@ (mov r8, r8)
 80002de:	e7e8      	b.n	80002b2 <main+0x42>
 80002e0:	08003520 	.word	0x08003520
 80002e4:	20000028 	.word	0x20000028

080002e8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b093      	sub	sp, #76	@ 0x4c
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	2414      	movs	r4, #20
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	0018      	movs	r0, r3
 80002f4:	2334      	movs	r3, #52	@ 0x34
 80002f6:	001a      	movs	r2, r3
 80002f8:	2100      	movs	r1, #0
 80002fa:	f003 f8d9 	bl	80034b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	0018      	movs	r0, r3
 8000302:	2310      	movs	r3, #16
 8000304:	001a      	movs	r2, r3
 8000306:	2100      	movs	r1, #0
 8000308:	f003 f8d2 	bl	80034b0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800030c:	2380      	movs	r3, #128	@ 0x80
 800030e:	009b      	lsls	r3, r3, #2
 8000310:	0018      	movs	r0, r3
 8000312:	f001 f97b 	bl	800160c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000316:	193b      	adds	r3, r7, r4
 8000318:	2201      	movs	r2, #1
 800031a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800031c:	193b      	adds	r3, r7, r4
 800031e:	22a0      	movs	r2, #160	@ 0xa0
 8000320:	02d2      	lsls	r2, r2, #11
 8000322:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000324:	0021      	movs	r1, r4
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2202      	movs	r2, #2
 800032a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2203      	movs	r2, #3
 8000330:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000332:	187b      	adds	r3, r7, r1
 8000334:	2200      	movs	r2, #0
 8000336:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2209      	movs	r2, #9
 800033c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2280      	movs	r2, #128	@ 0x80
 8000342:	0292      	lsls	r2, r2, #10
 8000344:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8000346:	187b      	adds	r3, r7, r1
 8000348:	2280      	movs	r2, #128	@ 0x80
 800034a:	05d2      	lsls	r2, r2, #23
 800034c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034e:	187b      	adds	r3, r7, r1
 8000350:	0018      	movs	r0, r3
 8000352:	f001 f99b 	bl	800168c <HAL_RCC_OscConfig>
 8000356:	0003      	movs	r3, r0
 8000358:	1e5a      	subs	r2, r3, #1
 800035a:	4193      	sbcs	r3, r2
 800035c:	b2db      	uxtb	r3, r3
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <_Z18SystemClock_Configv+0x7e>
  {
    Error_Handler();
 8000362:	f000 f8ef 	bl	8000544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	2207      	movs	r2, #7
 800036a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2202      	movs	r2, #2
 8000370:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2101      	movs	r1, #1
 8000382:	0018      	movs	r0, r3
 8000384:	f001 fc92 	bl	8001cac <HAL_RCC_ClockConfig>
 8000388:	0003      	movs	r3, r0
 800038a:	1e5a      	subs	r2, r3, #1
 800038c:	4193      	sbcs	r3, r2
 800038e:	b2db      	uxtb	r3, r3
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
 8000394:	f000 f8d6 	bl	8000544 <Error_Handler>
  }
}
 8000398:	46c0      	nop			@ (mov r8, r8)
 800039a:	46bd      	mov	sp, r7
 800039c:	b013      	add	sp, #76	@ 0x4c
 800039e:	bd90      	pop	{r4, r7, pc}

080003a0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08e      	sub	sp, #56	@ 0x38
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003a6:	2328      	movs	r3, #40	@ 0x28
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	0018      	movs	r0, r3
 80003ac:	2310      	movs	r3, #16
 80003ae:	001a      	movs	r2, r3
 80003b0:	2100      	movs	r1, #0
 80003b2:	f003 f87d 	bl	80034b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b6:	231c      	movs	r3, #28
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	0018      	movs	r0, r3
 80003bc:	230c      	movs	r3, #12
 80003be:	001a      	movs	r2, r3
 80003c0:	2100      	movs	r1, #0
 80003c2:	f003 f875 	bl	80034b0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003c6:	003b      	movs	r3, r7
 80003c8:	0018      	movs	r0, r3
 80003ca:	231c      	movs	r3, #28
 80003cc:	001a      	movs	r2, r3
 80003ce:	2100      	movs	r1, #0
 80003d0:	f003 f86e 	bl	80034b0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003d4:	4b39      	ldr	r3, [pc, #228]	@ (80004bc <_ZL12MX_TIM3_Initv+0x11c>)
 80003d6:	4a3a      	ldr	r2, [pc, #232]	@ (80004c0 <_ZL12MX_TIM3_Initv+0x120>)
 80003d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 80003da:	4b38      	ldr	r3, [pc, #224]	@ (80004bc <_ZL12MX_TIM3_Initv+0x11c>)
 80003dc:	2203      	movs	r2, #3
 80003de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e0:	4b36      	ldr	r3, [pc, #216]	@ (80004bc <_ZL12MX_TIM3_Initv+0x11c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15-1;
 80003e6:	4b35      	ldr	r3, [pc, #212]	@ (80004bc <_ZL12MX_TIM3_Initv+0x11c>)
 80003e8:	220e      	movs	r2, #14
 80003ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ec:	4b33      	ldr	r3, [pc, #204]	@ (80004bc <_ZL12MX_TIM3_Initv+0x11c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f2:	4b32      	ldr	r3, [pc, #200]	@ (80004bc <_ZL12MX_TIM3_Initv+0x11c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003f8:	4b30      	ldr	r3, [pc, #192]	@ (80004bc <_ZL12MX_TIM3_Initv+0x11c>)
 80003fa:	0018      	movs	r0, r3
 80003fc:	f001 fdde 	bl	8001fbc <HAL_TIM_Base_Init>
 8000400:	0003      	movs	r3, r0
 8000402:	1e5a      	subs	r2, r3, #1
 8000404:	4193      	sbcs	r3, r2
 8000406:	b2db      	uxtb	r3, r3
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 800040c:	f000 f89a 	bl	8000544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000410:	2128      	movs	r1, #40	@ 0x28
 8000412:	187b      	adds	r3, r7, r1
 8000414:	2280      	movs	r2, #128	@ 0x80
 8000416:	0152      	lsls	r2, r2, #5
 8000418:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800041a:	187a      	adds	r2, r7, r1
 800041c:	4b27      	ldr	r3, [pc, #156]	@ (80004bc <_ZL12MX_TIM3_Initv+0x11c>)
 800041e:	0011      	movs	r1, r2
 8000420:	0018      	movs	r0, r3
 8000422:	f002 fa5b 	bl	80028dc <HAL_TIM_ConfigClockSource>
 8000426:	0003      	movs	r3, r0
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	4193      	sbcs	r3, r2
 800042c:	b2db      	uxtb	r3, r3
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8000432:	f000 f887 	bl	8000544 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000436:	4b21      	ldr	r3, [pc, #132]	@ (80004bc <_ZL12MX_TIM3_Initv+0x11c>)
 8000438:	0018      	movs	r0, r3
 800043a:	f001 fe17 	bl	800206c <HAL_TIM_PWM_Init>
 800043e:	0003      	movs	r3, r0
 8000440:	1e5a      	subs	r2, r3, #1
 8000442:	4193      	sbcs	r3, r2
 8000444:	b2db      	uxtb	r3, r3
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 800044a:	f000 f87b 	bl	8000544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800044e:	211c      	movs	r1, #28
 8000450:	187b      	adds	r3, r7, r1
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000456:	187b      	adds	r3, r7, r1
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800045c:	187a      	adds	r2, r7, r1
 800045e:	4b17      	ldr	r3, [pc, #92]	@ (80004bc <_ZL12MX_TIM3_Initv+0x11c>)
 8000460:	0011      	movs	r1, r2
 8000462:	0018      	movs	r0, r3
 8000464:	f002 ffc2 	bl	80033ec <HAL_TIMEx_MasterConfigSynchronization>
 8000468:	0003      	movs	r3, r0
 800046a:	1e5a      	subs	r2, r3, #1
 800046c:	4193      	sbcs	r3, r2
 800046e:	b2db      	uxtb	r3, r3
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8000474:	f000 f866 	bl	8000544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000478:	003b      	movs	r3, r7
 800047a:	2260      	movs	r2, #96	@ 0x60
 800047c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800047e:	003b      	movs	r3, r7
 8000480:	2200      	movs	r2, #0
 8000482:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000484:	003b      	movs	r3, r7
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800048a:	003b      	movs	r3, r7
 800048c:	2204      	movs	r2, #4
 800048e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000490:	0039      	movs	r1, r7
 8000492:	4b0a      	ldr	r3, [pc, #40]	@ (80004bc <_ZL12MX_TIM3_Initv+0x11c>)
 8000494:	2204      	movs	r2, #4
 8000496:	0018      	movs	r0, r3
 8000498:	f002 f920 	bl	80026dc <HAL_TIM_PWM_ConfigChannel>
 800049c:	0003      	movs	r3, r0
 800049e:	1e5a      	subs	r2, r3, #1
 80004a0:	4193      	sbcs	r3, r2
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <_ZL12MX_TIM3_Initv+0x10c>
  {
    Error_Handler();
 80004a8:	f000 f84c 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80004ac:	4b03      	ldr	r3, [pc, #12]	@ (80004bc <_ZL12MX_TIM3_Initv+0x11c>)
 80004ae:	0018      	movs	r0, r3
 80004b0:	f000 f8e8 	bl	8000684 <HAL_TIM_MspPostInit>

}
 80004b4:	46c0      	nop			@ (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	b00e      	add	sp, #56	@ 0x38
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	20000028 	.word	0x20000028
 80004c0:	40000400 	.word	0x40000400

080004c4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ca:	4b0c      	ldr	r3, [pc, #48]	@ (80004fc <_ZL11MX_DMA_Initv+0x38>)
 80004cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80004ce:	4b0b      	ldr	r3, [pc, #44]	@ (80004fc <_ZL11MX_DMA_Initv+0x38>)
 80004d0:	2101      	movs	r1, #1
 80004d2:	430a      	orrs	r2, r1
 80004d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80004d6:	4b09      	ldr	r3, [pc, #36]	@ (80004fc <_ZL11MX_DMA_Initv+0x38>)
 80004d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80004da:	2201      	movs	r2, #1
 80004dc:	4013      	ands	r3, r2
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2100      	movs	r1, #0
 80004e6:	2009      	movs	r0, #9
 80004e8:	f000 fc3e 	bl	8000d68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004ec:	2009      	movs	r0, #9
 80004ee:	f000 fc50 	bl	8000d92 <HAL_NVIC_EnableIRQ>

}
 80004f2:	46c0      	nop			@ (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b002      	add	sp, #8
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	46c0      	nop			@ (mov r8, r8)
 80004fc:	40021000 	.word	0x40021000

08000500 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000506:	4b0e      	ldr	r3, [pc, #56]	@ (8000540 <_ZL12MX_GPIO_Initv+0x40>)
 8000508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800050a:	4b0d      	ldr	r3, [pc, #52]	@ (8000540 <_ZL12MX_GPIO_Initv+0x40>)
 800050c:	2104      	movs	r1, #4
 800050e:	430a      	orrs	r2, r1
 8000510:	635a      	str	r2, [r3, #52]	@ 0x34
 8000512:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <_ZL12MX_GPIO_Initv+0x40>)
 8000514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000516:	2204      	movs	r2, #4
 8000518:	4013      	ands	r3, r2
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b08      	ldr	r3, [pc, #32]	@ (8000540 <_ZL12MX_GPIO_Initv+0x40>)
 8000520:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000522:	4b07      	ldr	r3, [pc, #28]	@ (8000540 <_ZL12MX_GPIO_Initv+0x40>)
 8000524:	2101      	movs	r1, #1
 8000526:	430a      	orrs	r2, r1
 8000528:	635a      	str	r2, [r3, #52]	@ 0x34
 800052a:	4b05      	ldr	r3, [pc, #20]	@ (8000540 <_ZL12MX_GPIO_Initv+0x40>)
 800052c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800052e:	2201      	movs	r2, #1
 8000530:	4013      	ands	r3, r2
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b002      	add	sp, #8
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	40021000 	.word	0x40021000

08000544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000548:	b672      	cpsid	i
}
 800054a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800054c:	46c0      	nop			@ (mov r8, r8)
 800054e:	e7fd      	b.n	800054c <Error_Handler+0x8>

08000550 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d109      	bne.n	8000574 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	4a06      	ldr	r2, [pc, #24]	@ (800057c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d105      	bne.n	8000574 <_Z41__static_initialization_and_destruction_0ii+0x24>
WS2812 Neopixel(&htim3, TIM_CHANNEL_2, &hdma_tim3_ch2);
 8000568:	4b05      	ldr	r3, [pc, #20]	@ (8000580 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800056a:	4906      	ldr	r1, [pc, #24]	@ (8000584 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800056c:	4806      	ldr	r0, [pc, #24]	@ (8000588 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800056e:	2204      	movs	r2, #4
 8000570:	f000 f8f0 	bl	8000754 <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
}
 8000574:	46c0      	nop			@ (mov r8, r8)
 8000576:	46bd      	mov	sp, r7
 8000578:	b002      	add	sp, #8
 800057a:	bd80      	pop	{r7, pc}
 800057c:	0000ffff 	.word	0x0000ffff
 8000580:	20000074 	.word	0x20000074
 8000584:	20000028 	.word	0x20000028
 8000588:	200000d0 	.word	0x200000d0

0800058c <_GLOBAL__sub_I_htim3>:
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
 8000590:	4b03      	ldr	r3, [pc, #12]	@ (80005a0 <_GLOBAL__sub_I_htim3+0x14>)
 8000592:	0019      	movs	r1, r3
 8000594:	2001      	movs	r0, #1
 8000596:	f7ff ffdb 	bl	8000550 <_Z41__static_initialization_and_destruction_0ii>
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	0000ffff 	.word	0x0000ffff

080005a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005aa:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <HAL_MspInit+0x44>)
 80005ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005ae:	4b0e      	ldr	r3, [pc, #56]	@ (80005e8 <HAL_MspInit+0x44>)
 80005b0:	2101      	movs	r1, #1
 80005b2:	430a      	orrs	r2, r1
 80005b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80005b6:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <HAL_MspInit+0x44>)
 80005b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ba:	2201      	movs	r2, #1
 80005bc:	4013      	ands	r3, r2
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	4b09      	ldr	r3, [pc, #36]	@ (80005e8 <HAL_MspInit+0x44>)
 80005c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80005c6:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <HAL_MspInit+0x44>)
 80005c8:	2180      	movs	r1, #128	@ 0x80
 80005ca:	0549      	lsls	r1, r1, #21
 80005cc:	430a      	orrs	r2, r1
 80005ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80005d0:	4b05      	ldr	r3, [pc, #20]	@ (80005e8 <HAL_MspInit+0x44>)
 80005d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80005d4:	2380      	movs	r3, #128	@ 0x80
 80005d6:	055b      	lsls	r3, r3, #21
 80005d8:	4013      	ands	r3, r2
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a1e      	ldr	r2, [pc, #120]	@ (8000674 <HAL_TIM_Base_MspInit+0x88>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d135      	bne.n	800066a <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80005fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <HAL_TIM_Base_MspInit+0x8c>)
 8000600:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000602:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <HAL_TIM_Base_MspInit+0x8c>)
 8000604:	2102      	movs	r1, #2
 8000606:	430a      	orrs	r2, r1
 8000608:	63da      	str	r2, [r3, #60]	@ 0x3c
 800060a:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <HAL_TIM_Base_MspInit+0x8c>)
 800060c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800060e:	2202      	movs	r2, #2
 8000610:	4013      	ands	r3, r2
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Channel1;
 8000616:	4b19      	ldr	r3, [pc, #100]	@ (800067c <HAL_TIM_Base_MspInit+0x90>)
 8000618:	4a19      	ldr	r2, [pc, #100]	@ (8000680 <HAL_TIM_Base_MspInit+0x94>)
 800061a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 800061c:	4b17      	ldr	r3, [pc, #92]	@ (800067c <HAL_TIM_Base_MspInit+0x90>)
 800061e:	2221      	movs	r2, #33	@ 0x21
 8000620:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000622:	4b16      	ldr	r3, [pc, #88]	@ (800067c <HAL_TIM_Base_MspInit+0x90>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000628:	4b14      	ldr	r3, [pc, #80]	@ (800067c <HAL_TIM_Base_MspInit+0x90>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800062e:	4b13      	ldr	r3, [pc, #76]	@ (800067c <HAL_TIM_Base_MspInit+0x90>)
 8000630:	2280      	movs	r2, #128	@ 0x80
 8000632:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000634:	4b11      	ldr	r3, [pc, #68]	@ (800067c <HAL_TIM_Base_MspInit+0x90>)
 8000636:	2280      	movs	r2, #128	@ 0x80
 8000638:	0092      	lsls	r2, r2, #2
 800063a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800063c:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <HAL_TIM_Base_MspInit+0x90>)
 800063e:	2200      	movs	r2, #0
 8000640:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8000642:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <HAL_TIM_Base_MspInit+0x90>)
 8000644:	2220      	movs	r2, #32
 8000646:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000648:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <HAL_TIM_Base_MspInit+0x90>)
 800064a:	2200      	movs	r2, #0
 800064c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800064e:	4b0b      	ldr	r3, [pc, #44]	@ (800067c <HAL_TIM_Base_MspInit+0x90>)
 8000650:	0018      	movs	r0, r3
 8000652:	f000 fbbb 	bl	8000dcc <HAL_DMA_Init>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d001      	beq.n	800065e <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 800065a:	f7ff ff73 	bl	8000544 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a06      	ldr	r2, [pc, #24]	@ (800067c <HAL_TIM_Base_MspInit+0x90>)
 8000662:	629a      	str	r2, [r3, #40]	@ 0x28
 8000664:	4b05      	ldr	r3, [pc, #20]	@ (800067c <HAL_TIM_Base_MspInit+0x90>)
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b004      	add	sp, #16
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	40000400 	.word	0x40000400
 8000678:	40021000 	.word	0x40021000
 800067c:	20000074 	.word	0x20000074
 8000680:	40020008 	.word	0x40020008

08000684 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b089      	sub	sp, #36	@ 0x24
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	240c      	movs	r4, #12
 800068e:	193b      	adds	r3, r7, r4
 8000690:	0018      	movs	r0, r3
 8000692:	2314      	movs	r3, #20
 8000694:	001a      	movs	r2, r3
 8000696:	2100      	movs	r1, #0
 8000698:	f002 ff0a 	bl	80034b0 <memset>
  if(htim->Instance==TIM3)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a14      	ldr	r2, [pc, #80]	@ (80006f4 <HAL_TIM_MspPostInit+0x70>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d122      	bne.n	80006ec <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <HAL_TIM_MspPostInit+0x74>)
 80006a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006aa:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <HAL_TIM_MspPostInit+0x74>)
 80006ac:	2101      	movs	r1, #1
 80006ae:	430a      	orrs	r2, r1
 80006b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <HAL_TIM_MspPostInit+0x74>)
 80006b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006b6:	2201      	movs	r2, #1
 80006b8:	4013      	ands	r3, r2
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006be:	0021      	movs	r1, r4
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2280      	movs	r2, #128	@ 0x80
 80006c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2202      	movs	r2, #2
 80006ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2202      	movs	r2, #2
 80006d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2201      	movs	r2, #1
 80006dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	187a      	adds	r2, r7, r1
 80006e0:	23a0      	movs	r3, #160	@ 0xa0
 80006e2:	05db      	lsls	r3, r3, #23
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 fe2c 	bl	8001344 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80006ec:	46c0      	nop			@ (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b009      	add	sp, #36	@ 0x24
 80006f2:	bd90      	pop	{r4, r7, pc}
 80006f4:	40000400 	.word	0x40000400
 80006f8:	40021000 	.word	0x40021000

080006fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000700:	46c0      	nop			@ (mov r8, r8)
 8000702:	e7fd      	b.n	8000700 <NMI_Handler+0x4>

08000704 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000708:	46c0      	nop			@ (mov r8, r8)
 800070a:	e7fd      	b.n	8000708 <HardFault_Handler+0x4>

0800070c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000710:	46c0      	nop			@ (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000724:	f000 fa34 	bl	8000b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000728:	46c0      	nop			@ (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8000734:	4b03      	ldr	r3, [pc, #12]	@ (8000744 <DMA1_Channel1_IRQHandler+0x14>)
 8000736:	0018      	movs	r0, r3
 8000738:	f000 fcc2 	bl	80010c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800073c:	46c0      	nop			@ (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	20000074 	.word	0x20000074

08000748 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800074c:	46c0      	nop			@ (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>:
 *      Author: jumpei
 */

#include "ws2812.h"

WS2812::WS2812(TIM_HandleTypeDef* htim, uint32_t tim_channel_x, DMA_HandleTypeDef* hdma){
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	4a0d      	ldr	r2, [pc, #52]	@ (800079c <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef+0x48>)
 8000766:	189b      	adds	r3, r3, r2
 8000768:	2230      	movs	r2, #48	@ 0x30
 800076a:	2100      	movs	r1, #0
 800076c:	0018      	movs	r0, r3
 800076e:	f002 fe9f 	bl	80034b0 <memset>
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	23d0      	movs	r3, #208	@ 0xd0
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	2100      	movs	r1, #0
 800077a:	50d1      	str	r1, [r2, r3]
    HTIM = htim;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	605a      	str	r2, [r3, #4]
    TIM_CHANNEL_X = tim_channel_x;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	b2da      	uxtb	r2, r3
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	701a      	strb	r2, [r3, #0]
    HDMA =hdma;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	683a      	ldr	r2, [r7, #0]
 800078e:	609a      	str	r2, [r3, #8]
}
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	0018      	movs	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	b004      	add	sp, #16
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	0000030f 	.word	0x0000030f

080007a0 <_ZN6WS281217do_forwardRewriteEv>:
    rgb_buf[id][0]=r;
    rgb_buf[id][1]=g;
    rgb_buf[id][2]=b;
}

void WS2812::do_forwardRewrite(){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
    if(wr_buf_p < NUM_PIXELS) {
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	23d0      	movs	r3, #208	@ 0xd0
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	58d2      	ldr	r2, [r2, r3]
 80007b0:	2380      	movs	r3, #128	@ 0x80
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d86e      	bhi.n	8000896 <_ZN6WS281217do_forwardRewriteEv+0xf6>
        for(uint_fast8_t i = 0; i < 8; i++) {
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	e05e      	b.n	800087c <_ZN6WS281217do_forwardRewriteEv+0xdc>
            wr_buf[i     ] = ((rgb_buf[wr_buf_p][1]>>(7-i))&1) ? HIGH : LOW;
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	23d0      	movs	r3, #208	@ 0xd0
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	58d2      	ldr	r2, [r2, r3]
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	0013      	movs	r3, r2
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	189b      	adds	r3, r3, r2
 80007ce:	18cb      	adds	r3, r1, r3
 80007d0:	330d      	adds	r3, #13
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	0019      	movs	r1, r3
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	2207      	movs	r2, #7
 80007da:	1ad3      	subs	r3, r2, r3
 80007dc:	4119      	asrs	r1, r3
 80007de:	000b      	movs	r3, r1
 80007e0:	2201      	movs	r2, #1
 80007e2:	4013      	ands	r3, r2
 80007e4:	d001      	beq.n	80007ea <_ZN6WS281217do_forwardRewriteEv+0x4a>
 80007e6:	200a      	movs	r0, #10
 80007e8:	e000      	b.n	80007ec <_ZN6WS281217do_forwardRewriteEv+0x4c>
 80007ea:	2005      	movs	r0, #5
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	4940      	ldr	r1, [pc, #256]	@ (80008f0 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	18d3      	adds	r3, r2, r3
 80007f4:	185b      	adds	r3, r3, r1
 80007f6:	1c02      	adds	r2, r0, #0
 80007f8:	701a      	strb	r2, [r3, #0]
            wr_buf[i +  8] = ((rgb_buf[wr_buf_p][0]>>(7-i))&1) ? HIGH : LOW;
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	23d0      	movs	r3, #208	@ 0xd0
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	58d2      	ldr	r2, [r2, r3]
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	0013      	movs	r3, r2
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	189b      	adds	r3, r3, r2
 800080a:	18cb      	adds	r3, r1, r3
 800080c:	330c      	adds	r3, #12
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	0019      	movs	r1, r3
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	2207      	movs	r2, #7
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	4119      	asrs	r1, r3
 800081a:	000b      	movs	r3, r1
 800081c:	2201      	movs	r2, #1
 800081e:	4013      	ands	r3, r2
 8000820:	d001      	beq.n	8000826 <_ZN6WS281217do_forwardRewriteEv+0x86>
 8000822:	200a      	movs	r0, #10
 8000824:	e000      	b.n	8000828 <_ZN6WS281217do_forwardRewriteEv+0x88>
 8000826:	2005      	movs	r0, #5
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	3308      	adds	r3, #8
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	4930      	ldr	r1, [pc, #192]	@ (80008f0 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 8000830:	18d3      	adds	r3, r2, r3
 8000832:	185b      	adds	r3, r3, r1
 8000834:	1c02      	adds	r2, r0, #0
 8000836:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 16] = ((rgb_buf[wr_buf_p][2]>>(7-i))&1) ? HIGH : LOW;
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	23d0      	movs	r3, #208	@ 0xd0
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	58d2      	ldr	r2, [r2, r3]
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	0013      	movs	r3, r2
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	189b      	adds	r3, r3, r2
 8000848:	18cb      	adds	r3, r1, r3
 800084a:	330e      	adds	r3, #14
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	0019      	movs	r1, r3
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	2207      	movs	r2, #7
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	4119      	asrs	r1, r3
 8000858:	000b      	movs	r3, r1
 800085a:	2201      	movs	r2, #1
 800085c:	4013      	ands	r3, r2
 800085e:	d001      	beq.n	8000864 <_ZN6WS281217do_forwardRewriteEv+0xc4>
 8000860:	200a      	movs	r0, #10
 8000862:	e000      	b.n	8000866 <_ZN6WS281217do_forwardRewriteEv+0xc6>
 8000864:	2005      	movs	r0, #5
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	3310      	adds	r3, #16
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	4920      	ldr	r1, [pc, #128]	@ (80008f0 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 800086e:	18d3      	adds	r3, r2, r3
 8000870:	185b      	adds	r3, r3, r1
 8000872:	1c02      	adds	r2, r0, #0
 8000874:	701a      	strb	r2, [r3, #0]
        for(uint_fast8_t i = 0; i < 8; i++) {
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	3301      	adds	r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	2b07      	cmp	r3, #7
 8000880:	d99d      	bls.n	80007be <_ZN6WS281217do_forwardRewriteEv+0x1e>
        }
        wr_buf_p++;
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	23d0      	movs	r3, #208	@ 0xd0
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	58d3      	ldr	r3, [r2, r3]
 800088a:	1c59      	adds	r1, r3, #1
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	23d0      	movs	r3, #208	@ 0xd0
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	50d1      	str	r1, [r2, r3]
    } else if (wr_buf_p < NUM_PIXELS + 2) {
        for(uint8_t i = 0; i < 24; i++){ wr_buf[i] = 0;}
        wr_buf_p++;
    }
}
 8000894:	e028      	b.n	80008e8 <_ZN6WS281217do_forwardRewriteEv+0x148>
    } else if (wr_buf_p < NUM_PIXELS + 2) {
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	23d0      	movs	r3, #208	@ 0xd0
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	58d2      	ldr	r2, [r2, r3]
 800089e:	2381      	movs	r3, #129	@ 0x81
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d820      	bhi.n	80008e8 <_ZN6WS281217do_forwardRewriteEv+0x148>
        for(uint8_t i = 0; i < 24; i++){ wr_buf[i] = 0;}
 80008a6:	230b      	movs	r3, #11
 80008a8:	18fb      	adds	r3, r7, r3
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	e00d      	b.n	80008cc <_ZN6WS281217do_forwardRewriteEv+0x12c>
 80008b0:	200b      	movs	r0, #11
 80008b2:	183b      	adds	r3, r7, r0
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	490d      	ldr	r1, [pc, #52]	@ (80008f0 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 80008ba:	18d3      	adds	r3, r2, r3
 80008bc:	185b      	adds	r3, r3, r1
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
 80008c2:	183b      	adds	r3, r7, r0
 80008c4:	781a      	ldrb	r2, [r3, #0]
 80008c6:	183b      	adds	r3, r7, r0
 80008c8:	3201      	adds	r2, #1
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	230b      	movs	r3, #11
 80008ce:	18fb      	adds	r3, r7, r3
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b17      	cmp	r3, #23
 80008d4:	d9ec      	bls.n	80008b0 <_ZN6WS281217do_forwardRewriteEv+0x110>
        wr_buf_p++;
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	23d0      	movs	r3, #208	@ 0xd0
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	58d3      	ldr	r3, [r2, r3]
 80008de:	1c59      	adds	r1, r3, #1
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	23d0      	movs	r3, #208	@ 0xd0
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	50d1      	str	r1, [r2, r3]
}
 80008e8:	46c0      	nop			@ (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b004      	add	sp, #16
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	0000030f 	.word	0x0000030f

080008f4 <_ZN6WS281214do_backRewriteEv>:

void WS2812::do_backRewrite(){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
    if(wr_buf_p < NUM_PIXELS) {
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	23d0      	movs	r3, #208	@ 0xd0
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	58d2      	ldr	r2, [r2, r3]
 8000904:	2380      	movs	r3, #128	@ 0x80
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	429a      	cmp	r2, r3
 800090a:	d86f      	bhi.n	80009ec <_ZN6WS281214do_backRewriteEv+0xf8>
        for(uint_fast8_t i = 0; i < 8; ++i) {
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	e05f      	b.n	80009d2 <_ZN6WS281214do_backRewriteEv+0xde>
            wr_buf[i + 24] = ((rgb_buf[wr_buf_p][1]>>(7-i))&1) ? HIGH : LOW;
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	23d0      	movs	r3, #208	@ 0xd0
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	58d2      	ldr	r2, [r2, r3]
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	0013      	movs	r3, r2
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	189b      	adds	r3, r3, r2
 8000922:	18cb      	adds	r3, r1, r3
 8000924:	330d      	adds	r3, #13
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	0019      	movs	r1, r3
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2207      	movs	r2, #7
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	4119      	asrs	r1, r3
 8000932:	000b      	movs	r3, r1
 8000934:	2201      	movs	r2, #1
 8000936:	4013      	ands	r3, r2
 8000938:	d001      	beq.n	800093e <_ZN6WS281214do_backRewriteEv+0x4a>
 800093a:	200a      	movs	r0, #10
 800093c:	e000      	b.n	8000940 <_ZN6WS281214do_backRewriteEv+0x4c>
 800093e:	2005      	movs	r0, #5
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	3318      	adds	r3, #24
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	4947      	ldr	r1, [pc, #284]	@ (8000a64 <_ZN6WS281214do_backRewriteEv+0x170>)
 8000948:	18d3      	adds	r3, r2, r3
 800094a:	185b      	adds	r3, r3, r1
 800094c:	1c02      	adds	r2, r0, #0
 800094e:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 32] = ((rgb_buf[wr_buf_p][0]>>(7-i))&1) ? HIGH : LOW;
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	23d0      	movs	r3, #208	@ 0xd0
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	58d2      	ldr	r2, [r2, r3]
 8000958:	6879      	ldr	r1, [r7, #4]
 800095a:	0013      	movs	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	189b      	adds	r3, r3, r2
 8000960:	18cb      	adds	r3, r1, r3
 8000962:	330c      	adds	r3, #12
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	0019      	movs	r1, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2207      	movs	r2, #7
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	4119      	asrs	r1, r3
 8000970:	000b      	movs	r3, r1
 8000972:	2201      	movs	r2, #1
 8000974:	4013      	ands	r3, r2
 8000976:	d001      	beq.n	800097c <_ZN6WS281214do_backRewriteEv+0x88>
 8000978:	200a      	movs	r0, #10
 800097a:	e000      	b.n	800097e <_ZN6WS281214do_backRewriteEv+0x8a>
 800097c:	2005      	movs	r0, #5
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	3320      	adds	r3, #32
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	4937      	ldr	r1, [pc, #220]	@ (8000a64 <_ZN6WS281214do_backRewriteEv+0x170>)
 8000986:	18d3      	adds	r3, r2, r3
 8000988:	185b      	adds	r3, r3, r1
 800098a:	1c02      	adds	r2, r0, #0
 800098c:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 40] = ((rgb_buf[wr_buf_p][2]>>(7-i))&1) ? HIGH : LOW;
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	23d0      	movs	r3, #208	@ 0xd0
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	58d2      	ldr	r2, [r2, r3]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	0013      	movs	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	189b      	adds	r3, r3, r2
 800099e:	18cb      	adds	r3, r1, r3
 80009a0:	330e      	adds	r3, #14
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	0019      	movs	r1, r3
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	2207      	movs	r2, #7
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	4119      	asrs	r1, r3
 80009ae:	000b      	movs	r3, r1
 80009b0:	2201      	movs	r2, #1
 80009b2:	4013      	ands	r3, r2
 80009b4:	d001      	beq.n	80009ba <_ZN6WS281214do_backRewriteEv+0xc6>
 80009b6:	200a      	movs	r0, #10
 80009b8:	e000      	b.n	80009bc <_ZN6WS281214do_backRewriteEv+0xc8>
 80009ba:	2005      	movs	r0, #5
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	3328      	adds	r3, #40	@ 0x28
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	4928      	ldr	r1, [pc, #160]	@ (8000a64 <_ZN6WS281214do_backRewriteEv+0x170>)
 80009c4:	18d3      	adds	r3, r2, r3
 80009c6:	185b      	adds	r3, r3, r1
 80009c8:	1c02      	adds	r2, r0, #0
 80009ca:	701a      	strb	r2, [r3, #0]
        for(uint_fast8_t i = 0; i < 8; ++i) {
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	3301      	adds	r3, #1
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2b07      	cmp	r3, #7
 80009d6:	d99c      	bls.n	8000912 <_ZN6WS281214do_backRewriteEv+0x1e>
        }
        wr_buf_p++;
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	23d0      	movs	r3, #208	@ 0xd0
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	58d3      	ldr	r3, [r2, r3]
 80009e0:	1c59      	adds	r1, r3, #1
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	23d0      	movs	r3, #208	@ 0xd0
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	50d1      	str	r1, [r2, r3]
        wr_buf_p++;
    } else {
        wr_buf_p = 0;
        HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
    }
}
 80009ea:	e036      	b.n	8000a5a <_ZN6WS281214do_backRewriteEv+0x166>
    } else if (wr_buf_p < NUM_PIXELS + 2) {
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	23d0      	movs	r3, #208	@ 0xd0
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	58d2      	ldr	r2, [r2, r3]
 80009f4:	2381      	movs	r3, #129	@ 0x81
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d821      	bhi.n	8000a40 <_ZN6WS281214do_backRewriteEv+0x14c>
        for(uint8_t i = 24; i < 48; i++){ wr_buf[i] = 0;};
 80009fc:	230b      	movs	r3, #11
 80009fe:	18fb      	adds	r3, r7, r3
 8000a00:	2218      	movs	r2, #24
 8000a02:	701a      	strb	r2, [r3, #0]
 8000a04:	e00d      	b.n	8000a22 <_ZN6WS281214do_backRewriteEv+0x12e>
 8000a06:	200b      	movs	r0, #11
 8000a08:	183b      	adds	r3, r7, r0
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	4915      	ldr	r1, [pc, #84]	@ (8000a64 <_ZN6WS281214do_backRewriteEv+0x170>)
 8000a10:	18d3      	adds	r3, r2, r3
 8000a12:	185b      	adds	r3, r3, r1
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
 8000a18:	183b      	adds	r3, r7, r0
 8000a1a:	781a      	ldrb	r2, [r3, #0]
 8000a1c:	183b      	adds	r3, r7, r0
 8000a1e:	3201      	adds	r2, #1
 8000a20:	701a      	strb	r2, [r3, #0]
 8000a22:	230b      	movs	r3, #11
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b2f      	cmp	r3, #47	@ 0x2f
 8000a2a:	d9ec      	bls.n	8000a06 <_ZN6WS281214do_backRewriteEv+0x112>
        wr_buf_p++;
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	23d0      	movs	r3, #208	@ 0xd0
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	58d3      	ldr	r3, [r2, r3]
 8000a34:	1c59      	adds	r1, r3, #1
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	23d0      	movs	r3, #208	@ 0xd0
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	50d1      	str	r1, [r2, r3]
}
 8000a3e:	e00c      	b.n	8000a5a <_ZN6WS281214do_backRewriteEv+0x166>
        wr_buf_p = 0;
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	23d0      	movs	r3, #208	@ 0xd0
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	2100      	movs	r1, #0
 8000a48:	50d1      	str	r1, [r2, r3]
        HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	685a      	ldr	r2, [r3, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	0019      	movs	r1, r3
 8000a54:	0010      	movs	r0, r2
 8000a56:	f001 fd57 	bl	8002508 <HAL_TIM_PWM_Stop_DMA>
}
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b004      	add	sp, #16
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			@ (mov r8, r8)
 8000a64:	0000030f 	.word	0x0000030f

08000a68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a68:	480d      	ldr	r0, [pc, #52]	@ (8000aa0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a6c:	f7ff fe6c 	bl	8000748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a70:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a72:	490d      	ldr	r1, [pc, #52]	@ (8000aa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a74:	4a0d      	ldr	r2, [pc, #52]	@ (8000aac <LoopForever+0xe>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a88:	4c0a      	ldr	r4, [pc, #40]	@ (8000ab4 <LoopForever+0x16>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a96:	f002 fd13 	bl	80034c0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a9a:	f7ff fbe9 	bl	8000270 <main>

08000a9e <LoopForever>:

LoopForever:
  b LoopForever
 8000a9e:	e7fe      	b.n	8000a9e <LoopForever>
  ldr   r0, =_estack
 8000aa0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aac:	080035cc 	.word	0x080035cc
  ldr r2, =_sbss
 8000ab0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ab4:	2000041c 	.word	0x2000041c

08000ab8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC1_IRQHandler>
	...

08000abc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <HAL_Init+0x3c>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <HAL_Init+0x3c>)
 8000ace:	2180      	movs	r1, #128	@ 0x80
 8000ad0:	0049      	lsls	r1, r1, #1
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ad6:	2003      	movs	r0, #3
 8000ad8:	f000 f810 	bl	8000afc <HAL_InitTick>
 8000adc:	1e03      	subs	r3, r0, #0
 8000ade:	d003      	beq.n	8000ae8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ae0:	1dfb      	adds	r3, r7, #7
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	701a      	strb	r2, [r3, #0]
 8000ae6:	e001      	b.n	8000aec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ae8:	f7ff fd5c 	bl	80005a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aec:	1dfb      	adds	r3, r7, #7
 8000aee:	781b      	ldrb	r3, [r3, #0]
}
 8000af0:	0018      	movs	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b002      	add	sp, #8
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40022000 	.word	0x40022000

08000afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b04:	230f      	movs	r3, #15
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b84 <HAL_InitTick+0x88>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d02b      	beq.n	8000b6c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b14:	4b1c      	ldr	r3, [pc, #112]	@ (8000b88 <HAL_InitTick+0x8c>)
 8000b16:	681c      	ldr	r4, [r3, #0]
 8000b18:	4b1a      	ldr	r3, [pc, #104]	@ (8000b84 <HAL_InitTick+0x88>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	0019      	movs	r1, r3
 8000b1e:	23fa      	movs	r3, #250	@ 0xfa
 8000b20:	0098      	lsls	r0, r3, #2
 8000b22:	f7ff faed 	bl	8000100 <__udivsi3>
 8000b26:	0003      	movs	r3, r0
 8000b28:	0019      	movs	r1, r3
 8000b2a:	0020      	movs	r0, r4
 8000b2c:	f7ff fae8 	bl	8000100 <__udivsi3>
 8000b30:	0003      	movs	r3, r0
 8000b32:	0018      	movs	r0, r3
 8000b34:	f000 f93d 	bl	8000db2 <HAL_SYSTICK_Config>
 8000b38:	1e03      	subs	r3, r0, #0
 8000b3a:	d112      	bne.n	8000b62 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b03      	cmp	r3, #3
 8000b40:	d80a      	bhi.n	8000b58 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	2301      	movs	r3, #1
 8000b46:	425b      	negs	r3, r3
 8000b48:	2200      	movs	r2, #0
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f000 f90c 	bl	8000d68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b50:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <HAL_InitTick+0x90>)
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	e00d      	b.n	8000b74 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b58:	230f      	movs	r3, #15
 8000b5a:	18fb      	adds	r3, r7, r3
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	701a      	strb	r2, [r3, #0]
 8000b60:	e008      	b.n	8000b74 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b62:	230f      	movs	r3, #15
 8000b64:	18fb      	adds	r3, r7, r3
 8000b66:	2201      	movs	r2, #1
 8000b68:	701a      	strb	r2, [r3, #0]
 8000b6a:	e003      	b.n	8000b74 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b6c:	230f      	movs	r3, #15
 8000b6e:	18fb      	adds	r3, r7, r3
 8000b70:	2201      	movs	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b74:	230f      	movs	r3, #15
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	781b      	ldrb	r3, [r3, #0]
}
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b005      	add	sp, #20
 8000b80:	bd90      	pop	{r4, r7, pc}
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	20000004 	.word	0x20000004

08000b90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b94:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <HAL_IncTick+0x1c>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	001a      	movs	r2, r3
 8000b9a:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <HAL_IncTick+0x20>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	18d2      	adds	r2, r2, r3
 8000ba0:	4b03      	ldr	r3, [pc, #12]	@ (8000bb0 <HAL_IncTick+0x20>)
 8000ba2:	601a      	str	r2, [r3, #0]
}
 8000ba4:	46c0      	nop			@ (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000418 	.word	0x20000418

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b02      	ldr	r3, [pc, #8]	@ (8000bc4 <HAL_GetTick+0x10>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	20000418 	.word	0x20000418

08000bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd0:	f7ff fff0 	bl	8000bb4 <HAL_GetTick>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3301      	adds	r3, #1
 8000be0:	d005      	beq.n	8000bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c0c <HAL_Delay+0x44>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	001a      	movs	r2, r3
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	189b      	adds	r3, r3, r2
 8000bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	f7ff ffe0 	bl	8000bb4 <HAL_GetTick>
 8000bf4:	0002      	movs	r2, r0
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d8f7      	bhi.n	8000bf0 <HAL_Delay+0x28>
  {
  }
}
 8000c00:	46c0      	nop			@ (mov r8, r8)
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b004      	add	sp, #16
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			@ (mov r8, r8)
 8000c0c:	20000008 	.word	0x20000008

08000c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	0002      	movs	r2, r0
 8000c18:	1dfb      	adds	r3, r7, #7
 8000c1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c1c:	1dfb      	adds	r3, r7, #7
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c22:	d809      	bhi.n	8000c38 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c24:	1dfb      	adds	r3, r7, #7
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	001a      	movs	r2, r3
 8000c2a:	231f      	movs	r3, #31
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	4b04      	ldr	r3, [pc, #16]	@ (8000c40 <__NVIC_EnableIRQ+0x30>)
 8000c30:	2101      	movs	r1, #1
 8000c32:	4091      	lsls	r1, r2
 8000c34:	000a      	movs	r2, r1
 8000c36:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000c38:	46c0      	nop			@ (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b002      	add	sp, #8
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	0002      	movs	r2, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c58:	d828      	bhi.n	8000cac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c5a:	4a2f      	ldr	r2, [pc, #188]	@ (8000d18 <__NVIC_SetPriority+0xd4>)
 8000c5c:	1dfb      	adds	r3, r7, #7
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	b25b      	sxtb	r3, r3
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	33c0      	adds	r3, #192	@ 0xc0
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	589b      	ldr	r3, [r3, r2]
 8000c6a:	1dfa      	adds	r2, r7, #7
 8000c6c:	7812      	ldrb	r2, [r2, #0]
 8000c6e:	0011      	movs	r1, r2
 8000c70:	2203      	movs	r2, #3
 8000c72:	400a      	ands	r2, r1
 8000c74:	00d2      	lsls	r2, r2, #3
 8000c76:	21ff      	movs	r1, #255	@ 0xff
 8000c78:	4091      	lsls	r1, r2
 8000c7a:	000a      	movs	r2, r1
 8000c7c:	43d2      	mvns	r2, r2
 8000c7e:	401a      	ands	r2, r3
 8000c80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	019b      	lsls	r3, r3, #6
 8000c86:	22ff      	movs	r2, #255	@ 0xff
 8000c88:	401a      	ands	r2, r3
 8000c8a:	1dfb      	adds	r3, r7, #7
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	0018      	movs	r0, r3
 8000c90:	2303      	movs	r3, #3
 8000c92:	4003      	ands	r3, r0
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c98:	481f      	ldr	r0, [pc, #124]	@ (8000d18 <__NVIC_SetPriority+0xd4>)
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	089b      	lsrs	r3, r3, #2
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	33c0      	adds	r3, #192	@ 0xc0
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000caa:	e031      	b.n	8000d10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cac:	4a1b      	ldr	r2, [pc, #108]	@ (8000d1c <__NVIC_SetPriority+0xd8>)
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	0019      	movs	r1, r3
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	400b      	ands	r3, r1
 8000cb8:	3b08      	subs	r3, #8
 8000cba:	089b      	lsrs	r3, r3, #2
 8000cbc:	3306      	adds	r3, #6
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	18d3      	adds	r3, r2, r3
 8000cc2:	3304      	adds	r3, #4
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	1dfa      	adds	r2, r7, #7
 8000cc8:	7812      	ldrb	r2, [r2, #0]
 8000cca:	0011      	movs	r1, r2
 8000ccc:	2203      	movs	r2, #3
 8000cce:	400a      	ands	r2, r1
 8000cd0:	00d2      	lsls	r2, r2, #3
 8000cd2:	21ff      	movs	r1, #255	@ 0xff
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	000a      	movs	r2, r1
 8000cd8:	43d2      	mvns	r2, r2
 8000cda:	401a      	ands	r2, r3
 8000cdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	019b      	lsls	r3, r3, #6
 8000ce2:	22ff      	movs	r2, #255	@ 0xff
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	0018      	movs	r0, r3
 8000cec:	2303      	movs	r3, #3
 8000cee:	4003      	ands	r3, r0
 8000cf0:	00db      	lsls	r3, r3, #3
 8000cf2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf4:	4809      	ldr	r0, [pc, #36]	@ (8000d1c <__NVIC_SetPriority+0xd8>)
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	001c      	movs	r4, r3
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	4023      	ands	r3, r4
 8000d00:	3b08      	subs	r3, #8
 8000d02:	089b      	lsrs	r3, r3, #2
 8000d04:	430a      	orrs	r2, r1
 8000d06:	3306      	adds	r3, #6
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	18c3      	adds	r3, r0, r3
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	601a      	str	r2, [r3, #0]
}
 8000d10:	46c0      	nop			@ (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b003      	add	sp, #12
 8000d16:	bd90      	pop	{r4, r7, pc}
 8000d18:	e000e100 	.word	0xe000e100
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	1e5a      	subs	r2, r3, #1
 8000d2c:	2380      	movs	r3, #128	@ 0x80
 8000d2e:	045b      	lsls	r3, r3, #17
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d301      	bcc.n	8000d38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d34:	2301      	movs	r3, #1
 8000d36:	e010      	b.n	8000d5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d38:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <SysTick_Config+0x44>)
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	3a01      	subs	r2, #1
 8000d3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d40:	2301      	movs	r3, #1
 8000d42:	425b      	negs	r3, r3
 8000d44:	2103      	movs	r1, #3
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff ff7c 	bl	8000c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d4c:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <SysTick_Config+0x44>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d52:	4b04      	ldr	r3, [pc, #16]	@ (8000d64 <SysTick_Config+0x44>)
 8000d54:	2207      	movs	r2, #7
 8000d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	e000e010 	.word	0xe000e010

08000d68 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	210f      	movs	r1, #15
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	1c02      	adds	r2, r0, #0
 8000d78:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b25b      	sxtb	r3, r3
 8000d82:	0011      	movs	r1, r2
 8000d84:	0018      	movs	r0, r3
 8000d86:	f7ff ff5d 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b004      	add	sp, #16
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	0002      	movs	r2, r0
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	0018      	movs	r0, r3
 8000da6:	f7ff ff33 	bl	8000c10 <__NVIC_EnableIRQ>
}
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b002      	add	sp, #8
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f7ff ffaf 	bl	8000d20 <SysTick_Config>
 8000dc2:	0003      	movs	r3, r0
}
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b002      	add	sp, #8
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d101      	bne.n	8000dde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e077      	b.n	8000ece <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a3d      	ldr	r2, [pc, #244]	@ (8000ed8 <HAL_DMA_Init+0x10c>)
 8000de4:	4694      	mov	ip, r2
 8000de6:	4463      	add	r3, ip
 8000de8:	2114      	movs	r1, #20
 8000dea:	0018      	movs	r0, r3
 8000dec:	f7ff f988 	bl	8000100 <__udivsi3>
 8000df0:	0003      	movs	r3, r0
 8000df2:	009a      	lsls	r2, r3, #2
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2225      	movs	r2, #37	@ 0x25
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4934      	ldr	r1, [pc, #208]	@ (8000edc <HAL_DMA_Init+0x110>)
 8000e0c:	400a      	ands	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	6819      	ldr	r1, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	431a      	orrs	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	431a      	orrs	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	431a      	orrs	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a1b      	ldr	r3, [r3, #32]
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	430a      	orrs	r2, r1
 8000e44:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f000 fa2b 	bl	80012a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	2380      	movs	r3, #128	@ 0x80
 8000e54:	01db      	lsls	r3, r3, #7
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d102      	bne.n	8000e60 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e68:	213f      	movs	r1, #63	@ 0x3f
 8000e6a:	400a      	ands	r2, r1
 8000e6c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000e76:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d011      	beq.n	8000ea4 <HAL_DMA_Init+0xd8>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b04      	cmp	r3, #4
 8000e86:	d80d      	bhi.n	8000ea4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f000 fa36 	bl	80012fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	e008      	b.n	8000eb6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2225      	movs	r2, #37	@ 0x25
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2224      	movs	r2, #36	@ 0x24
 8000ec8:	2100      	movs	r1, #0
 8000eca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	0018      	movs	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b002      	add	sp, #8
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			@ (mov r8, r8)
 8000ed8:	bffdfff8 	.word	0xbffdfff8
 8000edc:	ffff800f 	.word	0xffff800f

08000ee0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
 8000eec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000eee:	2317      	movs	r3, #23
 8000ef0:	18fb      	adds	r3, r7, r3
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2224      	movs	r2, #36	@ 0x24
 8000efa:	5c9b      	ldrb	r3, [r3, r2]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d101      	bne.n	8000f04 <HAL_DMA_Start_IT+0x24>
 8000f00:	2302      	movs	r3, #2
 8000f02:	e06f      	b.n	8000fe4 <HAL_DMA_Start_IT+0x104>
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2224      	movs	r2, #36	@ 0x24
 8000f08:	2101      	movs	r1, #1
 8000f0a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2225      	movs	r2, #37	@ 0x25
 8000f10:	5c9b      	ldrb	r3, [r3, r2]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d157      	bne.n	8000fc8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2225      	movs	r2, #37	@ 0x25
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2200      	movs	r2, #0
 8000f24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2101      	movs	r1, #1
 8000f32:	438a      	bics	r2, r1
 8000f34:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	68b9      	ldr	r1, [r7, #8]
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f000 f971 	bl	8001224 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d008      	beq.n	8000f5c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	210e      	movs	r1, #14
 8000f56:	430a      	orrs	r2, r1
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	e00f      	b.n	8000f7c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2104      	movs	r1, #4
 8000f68:	438a      	bics	r2, r1
 8000f6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	210a      	movs	r1, #10
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	2380      	movs	r3, #128	@ 0x80
 8000f84:	025b      	lsls	r3, r3, #9
 8000f86:	4013      	ands	r3, r2
 8000f88:	d008      	beq.n	8000f9c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f94:	2180      	movs	r1, #128	@ 0x80
 8000f96:	0049      	lsls	r1, r1, #1
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d008      	beq.n	8000fb6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fae:	2180      	movs	r1, #128	@ 0x80
 8000fb0:	0049      	lsls	r1, r1, #1
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	e00a      	b.n	8000fde <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2280      	movs	r2, #128	@ 0x80
 8000fcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2224      	movs	r2, #36	@ 0x24
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8000fd6:	2317      	movs	r3, #23
 8000fd8:	18fb      	adds	r3, r7, r3
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000fde:	2317      	movs	r3, #23
 8000fe0:	18fb      	adds	r3, r7, r3
 8000fe2:	781b      	ldrb	r3, [r3, #0]
}
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b006      	add	sp, #24
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff4:	210f      	movs	r1, #15
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2225      	movs	r2, #37	@ 0x25
 8001000:	5c9b      	ldrb	r3, [r3, r2]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d006      	beq.n	8001016 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2204      	movs	r2, #4
 800100c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	e049      	b.n	80010aa <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	210e      	movs	r1, #14
 8001022:	438a      	bics	r2, r1
 8001024:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2101      	movs	r1, #1
 8001032:	438a      	bics	r2, r1
 8001034:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001040:	491d      	ldr	r1, [pc, #116]	@ (80010b8 <HAL_DMA_Abort_IT+0xcc>)
 8001042:	400a      	ands	r2, r1
 8001044:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001046:	4b1d      	ldr	r3, [pc, #116]	@ (80010bc <HAL_DMA_Abort_IT+0xd0>)
 8001048:	6859      	ldr	r1, [r3, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	221c      	movs	r2, #28
 8001050:	4013      	ands	r3, r2
 8001052:	2201      	movs	r2, #1
 8001054:	409a      	lsls	r2, r3
 8001056:	4b19      	ldr	r3, [pc, #100]	@ (80010bc <HAL_DMA_Abort_IT+0xd0>)
 8001058:	430a      	orrs	r2, r1
 800105a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001064:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00c      	beq.n	8001088 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001078:	490f      	ldr	r1, [pc, #60]	@ (80010b8 <HAL_DMA_Abort_IT+0xcc>)
 800107a:	400a      	ands	r2, r1
 800107c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001086:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2225      	movs	r2, #37	@ 0x25
 800108c:	2101      	movs	r1, #1
 800108e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2224      	movs	r2, #36	@ 0x24
 8001094:	2100      	movs	r1, #0
 8001096:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800109c:	2b00      	cmp	r3, #0
 800109e:	d004      	beq.n	80010aa <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	0010      	movs	r0, r2
 80010a8:	4798      	blx	r3
    }
  }
  return status;
 80010aa:	230f      	movs	r3, #15
 80010ac:	18fb      	adds	r3, r7, r3
 80010ae:	781b      	ldrb	r3, [r3, #0]
}
 80010b0:	0018      	movs	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b004      	add	sp, #16
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	fffffeff 	.word	0xfffffeff
 80010bc:	40020000 	.word	0x40020000

080010c0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80010c8:	4b55      	ldr	r3, [pc, #340]	@ (8001220 <HAL_DMA_IRQHandler+0x160>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	221c      	movs	r2, #28
 80010dc:	4013      	ands	r3, r2
 80010de:	2204      	movs	r2, #4
 80010e0:	409a      	lsls	r2, r3
 80010e2:	0013      	movs	r3, r2
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	4013      	ands	r3, r2
 80010e8:	d027      	beq.n	800113a <HAL_DMA_IRQHandler+0x7a>
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	2204      	movs	r2, #4
 80010ee:	4013      	ands	r3, r2
 80010f0:	d023      	beq.n	800113a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2220      	movs	r2, #32
 80010fa:	4013      	ands	r3, r2
 80010fc:	d107      	bne.n	800110e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2104      	movs	r1, #4
 800110a:	438a      	bics	r2, r1
 800110c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800110e:	4b44      	ldr	r3, [pc, #272]	@ (8001220 <HAL_DMA_IRQHandler+0x160>)
 8001110:	6859      	ldr	r1, [r3, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001116:	221c      	movs	r2, #28
 8001118:	4013      	ands	r3, r2
 800111a:	2204      	movs	r2, #4
 800111c:	409a      	lsls	r2, r3
 800111e:	4b40      	ldr	r3, [pc, #256]	@ (8001220 <HAL_DMA_IRQHandler+0x160>)
 8001120:	430a      	orrs	r2, r1
 8001122:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001128:	2b00      	cmp	r3, #0
 800112a:	d100      	bne.n	800112e <HAL_DMA_IRQHandler+0x6e>
 800112c:	e073      	b.n	8001216 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	0010      	movs	r0, r2
 8001136:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001138:	e06d      	b.n	8001216 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	221c      	movs	r2, #28
 8001140:	4013      	ands	r3, r2
 8001142:	2202      	movs	r2, #2
 8001144:	409a      	lsls	r2, r3
 8001146:	0013      	movs	r3, r2
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	4013      	ands	r3, r2
 800114c:	d02e      	beq.n	80011ac <HAL_DMA_IRQHandler+0xec>
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	2202      	movs	r2, #2
 8001152:	4013      	ands	r3, r2
 8001154:	d02a      	beq.n	80011ac <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2220      	movs	r2, #32
 800115e:	4013      	ands	r3, r2
 8001160:	d10b      	bne.n	800117a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	210a      	movs	r1, #10
 800116e:	438a      	bics	r2, r1
 8001170:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2225      	movs	r2, #37	@ 0x25
 8001176:	2101      	movs	r1, #1
 8001178:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800117a:	4b29      	ldr	r3, [pc, #164]	@ (8001220 <HAL_DMA_IRQHandler+0x160>)
 800117c:	6859      	ldr	r1, [r3, #4]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	221c      	movs	r2, #28
 8001184:	4013      	ands	r3, r2
 8001186:	2202      	movs	r2, #2
 8001188:	409a      	lsls	r2, r3
 800118a:	4b25      	ldr	r3, [pc, #148]	@ (8001220 <HAL_DMA_IRQHandler+0x160>)
 800118c:	430a      	orrs	r2, r1
 800118e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2224      	movs	r2, #36	@ 0x24
 8001194:	2100      	movs	r1, #0
 8001196:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800119c:	2b00      	cmp	r3, #0
 800119e:	d03a      	beq.n	8001216 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	0010      	movs	r0, r2
 80011a8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80011aa:	e034      	b.n	8001216 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b0:	221c      	movs	r2, #28
 80011b2:	4013      	ands	r3, r2
 80011b4:	2208      	movs	r2, #8
 80011b6:	409a      	lsls	r2, r3
 80011b8:	0013      	movs	r3, r2
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	4013      	ands	r3, r2
 80011be:	d02b      	beq.n	8001218 <HAL_DMA_IRQHandler+0x158>
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	2208      	movs	r2, #8
 80011c4:	4013      	ands	r3, r2
 80011c6:	d027      	beq.n	8001218 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	210e      	movs	r1, #14
 80011d4:	438a      	bics	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <HAL_DMA_IRQHandler+0x160>)
 80011da:	6859      	ldr	r1, [r3, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	221c      	movs	r2, #28
 80011e2:	4013      	ands	r3, r2
 80011e4:	2201      	movs	r2, #1
 80011e6:	409a      	lsls	r2, r3
 80011e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <HAL_DMA_IRQHandler+0x160>)
 80011ea:	430a      	orrs	r2, r1
 80011ec:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2225      	movs	r2, #37	@ 0x25
 80011f8:	2101      	movs	r1, #1
 80011fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2224      	movs	r2, #36	@ 0x24
 8001200:	2100      	movs	r1, #0
 8001202:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001208:	2b00      	cmp	r3, #0
 800120a:	d005      	beq.n	8001218 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	0010      	movs	r0, r2
 8001214:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	46c0      	nop			@ (mov r8, r8)
}
 800121a:	46bd      	mov	sp, r7
 800121c:	b004      	add	sp, #16
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40020000 	.word	0x40020000

08001224 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800123a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001240:	2b00      	cmp	r3, #0
 8001242:	d004      	beq.n	800124e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800124c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800124e:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <DMA_SetConfig+0x7c>)
 8001250:	6859      	ldr	r1, [r3, #4]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	221c      	movs	r2, #28
 8001258:	4013      	ands	r3, r2
 800125a:	2201      	movs	r2, #1
 800125c:	409a      	lsls	r2, r3
 800125e:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <DMA_SetConfig+0x7c>)
 8001260:	430a      	orrs	r2, r1
 8001262:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	2b10      	cmp	r3, #16
 8001272:	d108      	bne.n	8001286 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68ba      	ldr	r2, [r7, #8]
 8001282:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001284:	e007      	b.n	8001296 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	60da      	str	r2, [r3, #12]
}
 8001296:	46c0      	nop			@ (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b004      	add	sp, #16
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			@ (mov r8, r8)
 80012a0:	40020000 	.word	0x40020000

080012a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	4a10      	ldr	r2, [pc, #64]	@ (80012f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80012b4:	4694      	mov	ip, r2
 80012b6:	4463      	add	r3, ip
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	001a      	movs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	001a      	movs	r2, r3
 80012c6:	23ff      	movs	r3, #255	@ 0xff
 80012c8:	4013      	ands	r3, r2
 80012ca:	3b08      	subs	r3, #8
 80012cc:	2114      	movs	r1, #20
 80012ce:	0018      	movs	r0, r3
 80012d0:	f7fe ff16 	bl	8000100 <__udivsi3>
 80012d4:	0003      	movs	r3, r0
 80012d6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a07      	ldr	r2, [pc, #28]	@ (80012f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80012dc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	221f      	movs	r2, #31
 80012e2:	4013      	ands	r3, r2
 80012e4:	2201      	movs	r2, #1
 80012e6:	409a      	lsls	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80012ec:	46c0      	nop			@ (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b004      	add	sp, #16
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	10008200 	.word	0x10008200
 80012f8:	40020880 	.word	0x40020880

080012fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	223f      	movs	r2, #63	@ 0x3f
 800130a:	4013      	ands	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4a0a      	ldr	r2, [pc, #40]	@ (800133c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001312:	4694      	mov	ip, r2
 8001314:	4463      	add	r3, ip
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	001a      	movs	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a07      	ldr	r2, [pc, #28]	@ (8001340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001322:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3b01      	subs	r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	4013      	ands	r3, r2
 800132c:	2201      	movs	r2, #1
 800132e:	409a      	lsls	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001334:	46c0      	nop			@ (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b004      	add	sp, #16
 800133a:	bd80      	pop	{r7, pc}
 800133c:	1000823f 	.word	0x1000823f
 8001340:	40020940 	.word	0x40020940

08001344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001352:	e147      	b.n	80015e4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2101      	movs	r1, #1
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	4091      	lsls	r1, r2
 800135e:	000a      	movs	r2, r1
 8001360:	4013      	ands	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d100      	bne.n	800136c <HAL_GPIO_Init+0x28>
 800136a:	e138      	b.n	80015de <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2203      	movs	r2, #3
 8001372:	4013      	ands	r3, r2
 8001374:	2b01      	cmp	r3, #1
 8001376:	d005      	beq.n	8001384 <HAL_GPIO_Init+0x40>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2203      	movs	r2, #3
 800137e:	4013      	ands	r3, r2
 8001380:	2b02      	cmp	r3, #2
 8001382:	d130      	bne.n	80013e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	409a      	lsls	r2, r3
 8001392:	0013      	movs	r3, r2
 8001394:	43da      	mvns	r2, r3
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	68da      	ldr	r2, [r3, #12]
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	409a      	lsls	r2, r3
 80013a6:	0013      	movs	r3, r2
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ba:	2201      	movs	r2, #1
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
 80013c0:	0013      	movs	r3, r2
 80013c2:	43da      	mvns	r2, r3
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	2201      	movs	r2, #1
 80013d2:	401a      	ands	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
 80013d8:	0013      	movs	r3, r2
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2203      	movs	r2, #3
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	d017      	beq.n	8001422 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	409a      	lsls	r2, r3
 8001400:	0013      	movs	r3, r2
 8001402:	43da      	mvns	r2, r3
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	409a      	lsls	r2, r3
 8001414:	0013      	movs	r3, r2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2203      	movs	r2, #3
 8001428:	4013      	ands	r3, r2
 800142a:	2b02      	cmp	r3, #2
 800142c:	d123      	bne.n	8001476 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	08da      	lsrs	r2, r3, #3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3208      	adds	r2, #8
 8001436:	0092      	lsls	r2, r2, #2
 8001438:	58d3      	ldr	r3, [r2, r3]
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	2207      	movs	r2, #7
 8001440:	4013      	ands	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	220f      	movs	r2, #15
 8001446:	409a      	lsls	r2, r3
 8001448:	0013      	movs	r3, r2
 800144a:	43da      	mvns	r2, r3
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	691a      	ldr	r2, [r3, #16]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	2107      	movs	r1, #7
 800145a:	400b      	ands	r3, r1
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	409a      	lsls	r2, r3
 8001460:	0013      	movs	r3, r2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	08da      	lsrs	r2, r3, #3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3208      	adds	r2, #8
 8001470:	0092      	lsls	r2, r2, #2
 8001472:	6939      	ldr	r1, [r7, #16]
 8001474:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	2203      	movs	r2, #3
 8001482:	409a      	lsls	r2, r3
 8001484:	0013      	movs	r3, r2
 8001486:	43da      	mvns	r2, r3
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2203      	movs	r2, #3
 8001494:	401a      	ands	r2, r3
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	409a      	lsls	r2, r3
 800149c:	0013      	movs	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	23c0      	movs	r3, #192	@ 0xc0
 80014b0:	029b      	lsls	r3, r3, #10
 80014b2:	4013      	ands	r3, r2
 80014b4:	d100      	bne.n	80014b8 <HAL_GPIO_Init+0x174>
 80014b6:	e092      	b.n	80015de <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80014b8:	4a50      	ldr	r2, [pc, #320]	@ (80015fc <HAL_GPIO_Init+0x2b8>)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	3318      	adds	r3, #24
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	589b      	ldr	r3, [r3, r2]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	2203      	movs	r2, #3
 80014ca:	4013      	ands	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	220f      	movs	r2, #15
 80014d0:	409a      	lsls	r2, r3
 80014d2:	0013      	movs	r3, r2
 80014d4:	43da      	mvns	r2, r3
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	23a0      	movs	r3, #160	@ 0xa0
 80014e0:	05db      	lsls	r3, r3, #23
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d013      	beq.n	800150e <HAL_GPIO_Init+0x1ca>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a45      	ldr	r2, [pc, #276]	@ (8001600 <HAL_GPIO_Init+0x2bc>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d00d      	beq.n	800150a <HAL_GPIO_Init+0x1c6>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a44      	ldr	r2, [pc, #272]	@ (8001604 <HAL_GPIO_Init+0x2c0>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d007      	beq.n	8001506 <HAL_GPIO_Init+0x1c2>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a43      	ldr	r2, [pc, #268]	@ (8001608 <HAL_GPIO_Init+0x2c4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d101      	bne.n	8001502 <HAL_GPIO_Init+0x1be>
 80014fe:	2303      	movs	r3, #3
 8001500:	e006      	b.n	8001510 <HAL_GPIO_Init+0x1cc>
 8001502:	2305      	movs	r3, #5
 8001504:	e004      	b.n	8001510 <HAL_GPIO_Init+0x1cc>
 8001506:	2302      	movs	r3, #2
 8001508:	e002      	b.n	8001510 <HAL_GPIO_Init+0x1cc>
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <HAL_GPIO_Init+0x1cc>
 800150e:	2300      	movs	r3, #0
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	2103      	movs	r1, #3
 8001514:	400a      	ands	r2, r1
 8001516:	00d2      	lsls	r2, r2, #3
 8001518:	4093      	lsls	r3, r2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001520:	4936      	ldr	r1, [pc, #216]	@ (80015fc <HAL_GPIO_Init+0x2b8>)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	089b      	lsrs	r3, r3, #2
 8001526:	3318      	adds	r3, #24
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800152e:	4b33      	ldr	r3, [pc, #204]	@ (80015fc <HAL_GPIO_Init+0x2b8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	43da      	mvns	r2, r3
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	2380      	movs	r3, #128	@ 0x80
 8001544:	035b      	lsls	r3, r3, #13
 8001546:	4013      	ands	r3, r2
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001552:	4b2a      	ldr	r3, [pc, #168]	@ (80015fc <HAL_GPIO_Init+0x2b8>)
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001558:	4b28      	ldr	r3, [pc, #160]	@ (80015fc <HAL_GPIO_Init+0x2b8>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	43da      	mvns	r2, r3
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	2380      	movs	r3, #128	@ 0x80
 800156e:	039b      	lsls	r3, r3, #14
 8001570:	4013      	ands	r3, r2
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800157c:	4b1f      	ldr	r3, [pc, #124]	@ (80015fc <HAL_GPIO_Init+0x2b8>)
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001582:	4a1e      	ldr	r2, [pc, #120]	@ (80015fc <HAL_GPIO_Init+0x2b8>)
 8001584:	2384      	movs	r3, #132	@ 0x84
 8001586:	58d3      	ldr	r3, [r2, r3]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	43da      	mvns	r2, r3
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	2380      	movs	r3, #128	@ 0x80
 800159a:	029b      	lsls	r3, r3, #10
 800159c:	4013      	ands	r3, r2
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015a8:	4914      	ldr	r1, [pc, #80]	@ (80015fc <HAL_GPIO_Init+0x2b8>)
 80015aa:	2284      	movs	r2, #132	@ 0x84
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80015b0:	4a12      	ldr	r2, [pc, #72]	@ (80015fc <HAL_GPIO_Init+0x2b8>)
 80015b2:	2380      	movs	r3, #128	@ 0x80
 80015b4:	58d3      	ldr	r3, [r2, r3]
 80015b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	43da      	mvns	r2, r3
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	2380      	movs	r3, #128	@ 0x80
 80015c8:	025b      	lsls	r3, r3, #9
 80015ca:	4013      	ands	r3, r2
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015d6:	4909      	ldr	r1, [pc, #36]	@ (80015fc <HAL_GPIO_Init+0x2b8>)
 80015d8:	2280      	movs	r2, #128	@ 0x80
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	3301      	adds	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	40da      	lsrs	r2, r3
 80015ec:	1e13      	subs	r3, r2, #0
 80015ee:	d000      	beq.n	80015f2 <HAL_GPIO_Init+0x2ae>
 80015f0:	e6b0      	b.n	8001354 <HAL_GPIO_Init+0x10>
  }
}
 80015f2:	46c0      	nop			@ (mov r8, r8)
 80015f4:	46c0      	nop			@ (mov r8, r8)
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b006      	add	sp, #24
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40021800 	.word	0x40021800
 8001600:	50000400 	.word	0x50000400
 8001604:	50000800 	.word	0x50000800
 8001608:	50000c00 	.word	0x50000c00

0800160c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001614:	4b19      	ldr	r3, [pc, #100]	@ (800167c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a19      	ldr	r2, [pc, #100]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800161a:	4013      	ands	r3, r2
 800161c:	0019      	movs	r1, r3
 800161e:	4b17      	ldr	r3, [pc, #92]	@ (800167c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	430a      	orrs	r2, r1
 8001624:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	2380      	movs	r3, #128	@ 0x80
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	429a      	cmp	r2, r3
 800162e:	d11f      	bne.n	8001670 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001630:	4b14      	ldr	r3, [pc, #80]	@ (8001684 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	0013      	movs	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	189b      	adds	r3, r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4912      	ldr	r1, [pc, #72]	@ (8001688 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800163e:	0018      	movs	r0, r3
 8001640:	f7fe fd5e 	bl	8000100 <__udivsi3>
 8001644:	0003      	movs	r3, r0
 8001646:	3301      	adds	r3, #1
 8001648:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800164a:	e008      	b.n	800165e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3b01      	subs	r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	e001      	b.n	800165e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e009      	b.n	8001672 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800165e:	4b07      	ldr	r3, [pc, #28]	@ (800167c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	2380      	movs	r3, #128	@ 0x80
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	401a      	ands	r2, r3
 8001668:	2380      	movs	r3, #128	@ 0x80
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	429a      	cmp	r2, r3
 800166e:	d0ed      	beq.n	800164c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	0018      	movs	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	b004      	add	sp, #16
 8001678:	bd80      	pop	{r7, pc}
 800167a:	46c0      	nop			@ (mov r8, r8)
 800167c:	40007000 	.word	0x40007000
 8001680:	fffff9ff 	.word	0xfffff9ff
 8001684:	20000000 	.word	0x20000000
 8001688:	000f4240 	.word	0x000f4240

0800168c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e2f3      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2201      	movs	r2, #1
 80016a4:	4013      	ands	r3, r2
 80016a6:	d100      	bne.n	80016aa <HAL_RCC_OscConfig+0x1e>
 80016a8:	e07c      	b.n	80017a4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016aa:	4bc3      	ldr	r3, [pc, #780]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2238      	movs	r2, #56	@ 0x38
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016b4:	4bc0      	ldr	r3, [pc, #768]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	2203      	movs	r2, #3
 80016ba:	4013      	ands	r3, r2
 80016bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	2b10      	cmp	r3, #16
 80016c2:	d102      	bne.n	80016ca <HAL_RCC_OscConfig+0x3e>
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d002      	beq.n	80016d0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d10b      	bne.n	80016e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d0:	4bb9      	ldr	r3, [pc, #740]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2380      	movs	r3, #128	@ 0x80
 80016d6:	029b      	lsls	r3, r3, #10
 80016d8:	4013      	ands	r3, r2
 80016da:	d062      	beq.n	80017a2 <HAL_RCC_OscConfig+0x116>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d15e      	bne.n	80017a2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e2ce      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	2380      	movs	r3, #128	@ 0x80
 80016ee:	025b      	lsls	r3, r3, #9
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d107      	bne.n	8001704 <HAL_RCC_OscConfig+0x78>
 80016f4:	4bb0      	ldr	r3, [pc, #704]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4baf      	ldr	r3, [pc, #700]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80016fa:	2180      	movs	r1, #128	@ 0x80
 80016fc:	0249      	lsls	r1, r1, #9
 80016fe:	430a      	orrs	r2, r1
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	e020      	b.n	8001746 <HAL_RCC_OscConfig+0xba>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	23a0      	movs	r3, #160	@ 0xa0
 800170a:	02db      	lsls	r3, r3, #11
 800170c:	429a      	cmp	r2, r3
 800170e:	d10e      	bne.n	800172e <HAL_RCC_OscConfig+0xa2>
 8001710:	4ba9      	ldr	r3, [pc, #676]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4ba8      	ldr	r3, [pc, #672]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001716:	2180      	movs	r1, #128	@ 0x80
 8001718:	02c9      	lsls	r1, r1, #11
 800171a:	430a      	orrs	r2, r1
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	4ba6      	ldr	r3, [pc, #664]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4ba5      	ldr	r3, [pc, #660]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001724:	2180      	movs	r1, #128	@ 0x80
 8001726:	0249      	lsls	r1, r1, #9
 8001728:	430a      	orrs	r2, r1
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	e00b      	b.n	8001746 <HAL_RCC_OscConfig+0xba>
 800172e:	4ba2      	ldr	r3, [pc, #648]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	4ba1      	ldr	r3, [pc, #644]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001734:	49a1      	ldr	r1, [pc, #644]	@ (80019bc <HAL_RCC_OscConfig+0x330>)
 8001736:	400a      	ands	r2, r1
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	4b9f      	ldr	r3, [pc, #636]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4b9e      	ldr	r3, [pc, #632]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001740:	499f      	ldr	r1, [pc, #636]	@ (80019c0 <HAL_RCC_OscConfig+0x334>)
 8001742:	400a      	ands	r2, r1
 8001744:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d014      	beq.n	8001778 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174e:	f7ff fa31 	bl	8000bb4 <HAL_GetTick>
 8001752:	0003      	movs	r3, r0
 8001754:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff fa2c 	bl	8000bb4 <HAL_GetTick>
 800175c:	0002      	movs	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	@ 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e28d      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800176a:	4b93      	ldr	r3, [pc, #588]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	2380      	movs	r3, #128	@ 0x80
 8001770:	029b      	lsls	r3, r3, #10
 8001772:	4013      	ands	r3, r2
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0xcc>
 8001776:	e015      	b.n	80017a4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001778:	f7ff fa1c 	bl	8000bb4 <HAL_GetTick>
 800177c:	0003      	movs	r3, r0
 800177e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001782:	f7ff fa17 	bl	8000bb4 <HAL_GetTick>
 8001786:	0002      	movs	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b64      	cmp	r3, #100	@ 0x64
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e278      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001794:	4b88      	ldr	r3, [pc, #544]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2380      	movs	r3, #128	@ 0x80
 800179a:	029b      	lsls	r3, r3, #10
 800179c:	4013      	ands	r3, r2
 800179e:	d1f0      	bne.n	8001782 <HAL_RCC_OscConfig+0xf6>
 80017a0:	e000      	b.n	80017a4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2202      	movs	r2, #2
 80017aa:	4013      	ands	r3, r2
 80017ac:	d100      	bne.n	80017b0 <HAL_RCC_OscConfig+0x124>
 80017ae:	e099      	b.n	80018e4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017b0:	4b81      	ldr	r3, [pc, #516]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2238      	movs	r2, #56	@ 0x38
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017ba:	4b7f      	ldr	r3, [pc, #508]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	2203      	movs	r2, #3
 80017c0:	4013      	ands	r3, r2
 80017c2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2b10      	cmp	r3, #16
 80017c8:	d102      	bne.n	80017d0 <HAL_RCC_OscConfig+0x144>
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d002      	beq.n	80017d6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d135      	bne.n	8001842 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d6:	4b78      	ldr	r3, [pc, #480]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	2380      	movs	r3, #128	@ 0x80
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	4013      	ands	r3, r2
 80017e0:	d005      	beq.n	80017ee <HAL_RCC_OscConfig+0x162>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e24b      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ee:	4b72      	ldr	r3, [pc, #456]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	4a74      	ldr	r2, [pc, #464]	@ (80019c4 <HAL_RCC_OscConfig+0x338>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	0019      	movs	r1, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	021a      	lsls	r2, r3, #8
 80017fe:	4b6e      	ldr	r3, [pc, #440]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001800:	430a      	orrs	r2, r1
 8001802:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d112      	bne.n	8001830 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800180a:	4b6b      	ldr	r3, [pc, #428]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a6e      	ldr	r2, [pc, #440]	@ (80019c8 <HAL_RCC_OscConfig+0x33c>)
 8001810:	4013      	ands	r3, r2
 8001812:	0019      	movs	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691a      	ldr	r2, [r3, #16]
 8001818:	4b67      	ldr	r3, [pc, #412]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800181a:	430a      	orrs	r2, r1
 800181c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800181e:	4b66      	ldr	r3, [pc, #408]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	0adb      	lsrs	r3, r3, #11
 8001824:	2207      	movs	r2, #7
 8001826:	4013      	ands	r3, r2
 8001828:	4a68      	ldr	r2, [pc, #416]	@ (80019cc <HAL_RCC_OscConfig+0x340>)
 800182a:	40da      	lsrs	r2, r3
 800182c:	4b68      	ldr	r3, [pc, #416]	@ (80019d0 <HAL_RCC_OscConfig+0x344>)
 800182e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001830:	4b68      	ldr	r3, [pc, #416]	@ (80019d4 <HAL_RCC_OscConfig+0x348>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	0018      	movs	r0, r3
 8001836:	f7ff f961 	bl	8000afc <HAL_InitTick>
 800183a:	1e03      	subs	r3, r0, #0
 800183c:	d051      	beq.n	80018e2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e221      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d030      	beq.n	80018ac <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800184a:	4b5b      	ldr	r3, [pc, #364]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a5e      	ldr	r2, [pc, #376]	@ (80019c8 <HAL_RCC_OscConfig+0x33c>)
 8001850:	4013      	ands	r3, r2
 8001852:	0019      	movs	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	4b57      	ldr	r3, [pc, #348]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800185a:	430a      	orrs	r2, r1
 800185c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800185e:	4b56      	ldr	r3, [pc, #344]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4b55      	ldr	r3, [pc, #340]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001864:	2180      	movs	r1, #128	@ 0x80
 8001866:	0049      	lsls	r1, r1, #1
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff f9a2 	bl	8000bb4 <HAL_GetTick>
 8001870:	0003      	movs	r3, r0
 8001872:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001876:	f7ff f99d 	bl	8000bb4 <HAL_GetTick>
 800187a:	0002      	movs	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e1fe      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001888:	4b4b      	ldr	r3, [pc, #300]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	2380      	movs	r3, #128	@ 0x80
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4013      	ands	r3, r2
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001894:	4b48      	ldr	r3, [pc, #288]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4a4a      	ldr	r2, [pc, #296]	@ (80019c4 <HAL_RCC_OscConfig+0x338>)
 800189a:	4013      	ands	r3, r2
 800189c:	0019      	movs	r1, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	021a      	lsls	r2, r3, #8
 80018a4:	4b44      	ldr	r3, [pc, #272]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80018a6:	430a      	orrs	r2, r1
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	e01b      	b.n	80018e4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80018ac:	4b42      	ldr	r3, [pc, #264]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b41      	ldr	r3, [pc, #260]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80018b2:	4949      	ldr	r1, [pc, #292]	@ (80019d8 <HAL_RCC_OscConfig+0x34c>)
 80018b4:	400a      	ands	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff f97c 	bl	8000bb4 <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c2:	f7ff f977 	bl	8000bb4 <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e1d8      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018d4:	4b38      	ldr	r3, [pc, #224]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	2380      	movs	r3, #128	@ 0x80
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	4013      	ands	r3, r2
 80018de:	d1f0      	bne.n	80018c2 <HAL_RCC_OscConfig+0x236>
 80018e0:	e000      	b.n	80018e4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2208      	movs	r2, #8
 80018ea:	4013      	ands	r3, r2
 80018ec:	d047      	beq.n	800197e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80018ee:	4b32      	ldr	r3, [pc, #200]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2238      	movs	r2, #56	@ 0x38
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b18      	cmp	r3, #24
 80018f8:	d10a      	bne.n	8001910 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80018fa:	4b2f      	ldr	r3, [pc, #188]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80018fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018fe:	2202      	movs	r2, #2
 8001900:	4013      	ands	r3, r2
 8001902:	d03c      	beq.n	800197e <HAL_RCC_OscConfig+0x2f2>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d138      	bne.n	800197e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e1ba      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d019      	beq.n	800194c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001918:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800191a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800191c:	4b26      	ldr	r3, [pc, #152]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800191e:	2101      	movs	r1, #1
 8001920:	430a      	orrs	r2, r1
 8001922:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001924:	f7ff f946 	bl	8000bb4 <HAL_GetTick>
 8001928:	0003      	movs	r3, r0
 800192a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192e:	f7ff f941 	bl	8000bb4 <HAL_GetTick>
 8001932:	0002      	movs	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e1a2      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001940:	4b1d      	ldr	r3, [pc, #116]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001944:	2202      	movs	r2, #2
 8001946:	4013      	ands	r3, r2
 8001948:	d0f1      	beq.n	800192e <HAL_RCC_OscConfig+0x2a2>
 800194a:	e018      	b.n	800197e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800194c:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800194e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001950:	4b19      	ldr	r3, [pc, #100]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001952:	2101      	movs	r1, #1
 8001954:	438a      	bics	r2, r1
 8001956:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001958:	f7ff f92c 	bl	8000bb4 <HAL_GetTick>
 800195c:	0003      	movs	r3, r0
 800195e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001962:	f7ff f927 	bl	8000bb4 <HAL_GetTick>
 8001966:	0002      	movs	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e188      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001974:	4b10      	ldr	r3, [pc, #64]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001976:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001978:	2202      	movs	r2, #2
 800197a:	4013      	ands	r3, r2
 800197c:	d1f1      	bne.n	8001962 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2204      	movs	r2, #4
 8001984:	4013      	ands	r3, r2
 8001986:	d100      	bne.n	800198a <HAL_RCC_OscConfig+0x2fe>
 8001988:	e0c6      	b.n	8001b18 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198a:	231f      	movs	r3, #31
 800198c:	18fb      	adds	r3, r7, r3
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001992:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2238      	movs	r2, #56	@ 0x38
 8001998:	4013      	ands	r3, r2
 800199a:	2b20      	cmp	r3, #32
 800199c:	d11e      	bne.n	80019dc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80019a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a2:	2202      	movs	r2, #2
 80019a4:	4013      	ands	r3, r2
 80019a6:	d100      	bne.n	80019aa <HAL_RCC_OscConfig+0x31e>
 80019a8:	e0b6      	b.n	8001b18 <HAL_RCC_OscConfig+0x48c>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d000      	beq.n	80019b4 <HAL_RCC_OscConfig+0x328>
 80019b2:	e0b1      	b.n	8001b18 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e166      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
 80019b8:	40021000 	.word	0x40021000
 80019bc:	fffeffff 	.word	0xfffeffff
 80019c0:	fffbffff 	.word	0xfffbffff
 80019c4:	ffff80ff 	.word	0xffff80ff
 80019c8:	ffffc7ff 	.word	0xffffc7ff
 80019cc:	00f42400 	.word	0x00f42400
 80019d0:	20000000 	.word	0x20000000
 80019d4:	20000004 	.word	0x20000004
 80019d8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019dc:	4bac      	ldr	r3, [pc, #688]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 80019de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019e0:	2380      	movs	r3, #128	@ 0x80
 80019e2:	055b      	lsls	r3, r3, #21
 80019e4:	4013      	ands	r3, r2
 80019e6:	d101      	bne.n	80019ec <HAL_RCC_OscConfig+0x360>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <HAL_RCC_OscConfig+0x362>
 80019ec:	2300      	movs	r3, #0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d011      	beq.n	8001a16 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	4ba7      	ldr	r3, [pc, #668]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 80019f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019f6:	4ba6      	ldr	r3, [pc, #664]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 80019f8:	2180      	movs	r1, #128	@ 0x80
 80019fa:	0549      	lsls	r1, r1, #21
 80019fc:	430a      	orrs	r2, r1
 80019fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a00:	4ba3      	ldr	r3, [pc, #652]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001a02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a04:	2380      	movs	r3, #128	@ 0x80
 8001a06:	055b      	lsls	r3, r3, #21
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a0e:	231f      	movs	r3, #31
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	2201      	movs	r2, #1
 8001a14:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a16:	4b9f      	ldr	r3, [pc, #636]	@ (8001c94 <HAL_RCC_OscConfig+0x608>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	2380      	movs	r3, #128	@ 0x80
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d11a      	bne.n	8001a58 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a22:	4b9c      	ldr	r3, [pc, #624]	@ (8001c94 <HAL_RCC_OscConfig+0x608>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4b9b      	ldr	r3, [pc, #620]	@ (8001c94 <HAL_RCC_OscConfig+0x608>)
 8001a28:	2180      	movs	r1, #128	@ 0x80
 8001a2a:	0049      	lsls	r1, r1, #1
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a30:	f7ff f8c0 	bl	8000bb4 <HAL_GetTick>
 8001a34:	0003      	movs	r3, r0
 8001a36:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3a:	f7ff f8bb 	bl	8000bb4 <HAL_GetTick>
 8001a3e:	0002      	movs	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e11c      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a4c:	4b91      	ldr	r3, [pc, #580]	@ (8001c94 <HAL_RCC_OscConfig+0x608>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	2380      	movs	r3, #128	@ 0x80
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4013      	ands	r3, r2
 8001a56:	d0f0      	beq.n	8001a3a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d106      	bne.n	8001a6e <HAL_RCC_OscConfig+0x3e2>
 8001a60:	4b8b      	ldr	r3, [pc, #556]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001a62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a64:	4b8a      	ldr	r3, [pc, #552]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001a66:	2101      	movs	r1, #1
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a6c:	e01c      	b.n	8001aa8 <HAL_RCC_OscConfig+0x41c>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b05      	cmp	r3, #5
 8001a74:	d10c      	bne.n	8001a90 <HAL_RCC_OscConfig+0x404>
 8001a76:	4b86      	ldr	r3, [pc, #536]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001a78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a7a:	4b85      	ldr	r3, [pc, #532]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001a7c:	2104      	movs	r1, #4
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a82:	4b83      	ldr	r3, [pc, #524]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001a84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a86:	4b82      	ldr	r3, [pc, #520]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001a88:	2101      	movs	r1, #1
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a8e:	e00b      	b.n	8001aa8 <HAL_RCC_OscConfig+0x41c>
 8001a90:	4b7f      	ldr	r3, [pc, #508]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001a92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a94:	4b7e      	ldr	r3, [pc, #504]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001a96:	2101      	movs	r1, #1
 8001a98:	438a      	bics	r2, r1
 8001a9a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a9c:	4b7c      	ldr	r3, [pc, #496]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001a9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001aa0:	4b7b      	ldr	r3, [pc, #492]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001aa2:	2104      	movs	r1, #4
 8001aa4:	438a      	bics	r2, r1
 8001aa6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d014      	beq.n	8001ada <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab0:	f7ff f880 	bl	8000bb4 <HAL_GetTick>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ab8:	e009      	b.n	8001ace <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aba:	f7ff f87b 	bl	8000bb4 <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	4a74      	ldr	r2, [pc, #464]	@ (8001c98 <HAL_RCC_OscConfig+0x60c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e0db      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ace:	4b70      	ldr	r3, [pc, #448]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x42e>
 8001ad8:	e013      	b.n	8001b02 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ada:	f7ff f86b 	bl	8000bb4 <HAL_GetTick>
 8001ade:	0003      	movs	r3, r0
 8001ae0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ae2:	e009      	b.n	8001af8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae4:	f7ff f866 	bl	8000bb4 <HAL_GetTick>
 8001ae8:	0002      	movs	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	4a6a      	ldr	r2, [pc, #424]	@ (8001c98 <HAL_RCC_OscConfig+0x60c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e0c6      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001af8:	4b65      	ldr	r3, [pc, #404]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001afc:	2202      	movs	r2, #2
 8001afe:	4013      	ands	r3, r2
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b02:	231f      	movs	r3, #31
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d105      	bne.n	8001b18 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b0c:	4b60      	ldr	r3, [pc, #384]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001b0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b10:	4b5f      	ldr	r3, [pc, #380]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001b12:	4962      	ldr	r1, [pc, #392]	@ (8001c9c <HAL_RCC_OscConfig+0x610>)
 8001b14:	400a      	ands	r2, r1
 8001b16:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d100      	bne.n	8001b22 <HAL_RCC_OscConfig+0x496>
 8001b20:	e0b0      	b.n	8001c84 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b22:	4b5b      	ldr	r3, [pc, #364]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2238      	movs	r2, #56	@ 0x38
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b10      	cmp	r3, #16
 8001b2c:	d100      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4a4>
 8001b2e:	e078      	b.n	8001c22 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d153      	bne.n	8001be0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b38:	4b55      	ldr	r3, [pc, #340]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b54      	ldr	r3, [pc, #336]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001b3e:	4958      	ldr	r1, [pc, #352]	@ (8001ca0 <HAL_RCC_OscConfig+0x614>)
 8001b40:	400a      	ands	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7ff f836 	bl	8000bb4 <HAL_GetTick>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4e:	f7ff f831 	bl	8000bb4 <HAL_GetTick>
 8001b52:	0002      	movs	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e092      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b60:	4b4b      	ldr	r3, [pc, #300]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	2380      	movs	r3, #128	@ 0x80
 8001b66:	049b      	lsls	r3, r3, #18
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d1f0      	bne.n	8001b4e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b6c:	4b48      	ldr	r3, [pc, #288]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	4a4c      	ldr	r2, [pc, #304]	@ (8001ca4 <HAL_RCC_OscConfig+0x618>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	0019      	movs	r1, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1a      	ldr	r2, [r3, #32]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	431a      	orrs	r2, r3
 8001b94:	4b3e      	ldr	r3, [pc, #248]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001b96:	430a      	orrs	r2, r1
 8001b98:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001ba0:	2180      	movs	r1, #128	@ 0x80
 8001ba2:	0449      	lsls	r1, r1, #17
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001ba8:	4b39      	ldr	r3, [pc, #228]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	4b38      	ldr	r3, [pc, #224]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001bae:	2180      	movs	r1, #128	@ 0x80
 8001bb0:	0549      	lsls	r1, r1, #21
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb6:	f7fe fffd 	bl	8000bb4 <HAL_GetTick>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc0:	f7fe fff8 	bl	8000bb4 <HAL_GetTick>
 8001bc4:	0002      	movs	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e059      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	2380      	movs	r3, #128	@ 0x80
 8001bd8:	049b      	lsls	r3, r3, #18
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x534>
 8001bde:	e051      	b.n	8001c84 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001be6:	492e      	ldr	r1, [pc, #184]	@ (8001ca0 <HAL_RCC_OscConfig+0x614>)
 8001be8:	400a      	ands	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7fe ffe2 	bl	8000bb4 <HAL_GetTick>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf6:	f7fe ffdd 	bl	8000bb4 <HAL_GetTick>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e03e      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c08:	4b21      	ldr	r3, [pc, #132]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	2380      	movs	r3, #128	@ 0x80
 8001c0e:	049b      	lsls	r3, r3, #18
 8001c10:	4013      	ands	r3, r2
 8001c12:	d1f0      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001c14:	4b1e      	ldr	r3, [pc, #120]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	4b1d      	ldr	r3, [pc, #116]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001c1a:	4923      	ldr	r1, [pc, #140]	@ (8001ca8 <HAL_RCC_OscConfig+0x61c>)
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	e030      	b.n	8001c84 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e02b      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c2e:	4b18      	ldr	r3, [pc, #96]	@ (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2203      	movs	r2, #3
 8001c38:	401a      	ands	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d11e      	bne.n	8001c80 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	2270      	movs	r2, #112	@ 0x70
 8001c46:	401a      	ands	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d117      	bne.n	8001c80 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	23fe      	movs	r3, #254	@ 0xfe
 8001c54:	01db      	lsls	r3, r3, #7
 8001c56:	401a      	ands	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c5c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d10e      	bne.n	8001c80 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	23f8      	movs	r3, #248	@ 0xf8
 8001c66:	039b      	lsls	r3, r3, #14
 8001c68:	401a      	ands	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d106      	bne.n	8001c80 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	0f5b      	lsrs	r3, r3, #29
 8001c76:	075a      	lsls	r2, r3, #29
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	0018      	movs	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b008      	add	sp, #32
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	46c0      	nop			@ (mov r8, r8)
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40007000 	.word	0x40007000
 8001c98:	00001388 	.word	0x00001388
 8001c9c:	efffffff 	.word	0xefffffff
 8001ca0:	feffffff 	.word	0xfeffffff
 8001ca4:	1fc1808c 	.word	0x1fc1808c
 8001ca8:	effefffc 	.word	0xeffefffc

08001cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0e9      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b76      	ldr	r3, [pc, #472]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d91e      	bls.n	8001d0c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	4b73      	ldr	r3, [pc, #460]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2207      	movs	r2, #7
 8001cd4:	4393      	bics	r3, r2
 8001cd6:	0019      	movs	r1, r3
 8001cd8:	4b70      	ldr	r3, [pc, #448]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ce0:	f7fe ff68 	bl	8000bb4 <HAL_GetTick>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ce8:	e009      	b.n	8001cfe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cea:	f7fe ff63 	bl	8000bb4 <HAL_GetTick>
 8001cee:	0002      	movs	r2, r0
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	4a6a      	ldr	r2, [pc, #424]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1f4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e0ca      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cfe:	4b67      	ldr	r3, [pc, #412]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2207      	movs	r2, #7
 8001d04:	4013      	ands	r3, r2
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d1ee      	bne.n	8001cea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2202      	movs	r2, #2
 8001d12:	4013      	ands	r3, r2
 8001d14:	d015      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d006      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d20:	4b60      	ldr	r3, [pc, #384]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	4b5f      	ldr	r3, [pc, #380]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d26:	21e0      	movs	r1, #224	@ 0xe0
 8001d28:	01c9      	lsls	r1, r1, #7
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d2e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	4a5d      	ldr	r2, [pc, #372]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1fc>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	0019      	movs	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	4b59      	ldr	r3, [pc, #356]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2201      	movs	r2, #1
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d057      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d107      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d54:	4b53      	ldr	r3, [pc, #332]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	2380      	movs	r3, #128	@ 0x80
 8001d5a:	029b      	lsls	r3, r3, #10
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d12b      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e097      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d107      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2380      	movs	r3, #128	@ 0x80
 8001d72:	049b      	lsls	r3, r3, #18
 8001d74:	4013      	ands	r3, r2
 8001d76:	d11f      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e08b      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d107      	bne.n	8001d94 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d84:	4b47      	ldr	r3, [pc, #284]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	2380      	movs	r3, #128	@ 0x80
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d113      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e07f      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d9c:	4b41      	ldr	r3, [pc, #260]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001da0:	2202      	movs	r2, #2
 8001da2:	4013      	ands	r3, r2
 8001da4:	d108      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e074      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001daa:	4b3e      	ldr	r3, [pc, #248]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dae:	2202      	movs	r2, #2
 8001db0:	4013      	ands	r3, r2
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e06d      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001db8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2207      	movs	r2, #7
 8001dbe:	4393      	bics	r3, r2
 8001dc0:	0019      	movs	r1, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	4b37      	ldr	r3, [pc, #220]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dcc:	f7fe fef2 	bl	8000bb4 <HAL_GetTick>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd4:	e009      	b.n	8001dea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd6:	f7fe feed 	bl	8000bb4 <HAL_GetTick>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	4a2f      	ldr	r2, [pc, #188]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1f4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e054      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dea:	4b2e      	ldr	r3, [pc, #184]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2238      	movs	r2, #56	@ 0x38
 8001df0:	401a      	ands	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d1ec      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dfc:	4b27      	ldr	r3, [pc, #156]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2207      	movs	r2, #7
 8001e02:	4013      	ands	r3, r2
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d21e      	bcs.n	8001e48 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0a:	4b24      	ldr	r3, [pc, #144]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2207      	movs	r2, #7
 8001e10:	4393      	bics	r3, r2
 8001e12:	0019      	movs	r1, r3
 8001e14:	4b21      	ldr	r3, [pc, #132]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e1c:	f7fe feca 	bl	8000bb4 <HAL_GetTick>
 8001e20:	0003      	movs	r3, r0
 8001e22:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e24:	e009      	b.n	8001e3a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e26:	f7fe fec5 	bl	8000bb4 <HAL_GetTick>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1f4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e02c      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e3a:	4b18      	ldr	r3, [pc, #96]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2207      	movs	r2, #7
 8001e40:	4013      	ands	r3, r2
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d1ee      	bne.n	8001e26 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d009      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e52:	4b14      	ldr	r3, [pc, #80]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	4a15      	ldr	r2, [pc, #84]	@ (8001eac <HAL_RCC_ClockConfig+0x200>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e62:	430a      	orrs	r2, r1
 8001e64:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e66:	f000 f829 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 8001e6a:	0001      	movs	r1, r0
 8001e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	220f      	movs	r2, #15
 8001e74:	401a      	ands	r2, r3
 8001e76:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <HAL_RCC_ClockConfig+0x204>)
 8001e78:	0092      	lsls	r2, r2, #2
 8001e7a:	58d3      	ldr	r3, [r2, r3]
 8001e7c:	221f      	movs	r2, #31
 8001e7e:	4013      	ands	r3, r2
 8001e80:	000a      	movs	r2, r1
 8001e82:	40da      	lsrs	r2, r3
 8001e84:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb4 <HAL_RCC_ClockConfig+0x208>)
 8001e86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e88:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb8 <HAL_RCC_ClockConfig+0x20c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f7fe fe35 	bl	8000afc <HAL_InitTick>
 8001e92:	0003      	movs	r3, r0
}
 8001e94:	0018      	movs	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b004      	add	sp, #16
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40022000 	.word	0x40022000
 8001ea0:	00001388 	.word	0x00001388
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	fffff0ff 	.word	0xfffff0ff
 8001eac:	ffff8fff 	.word	0xffff8fff
 8001eb0:	0800352c 	.word	0x0800352c
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	20000004 	.word	0x20000004

08001ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ec2:	4b3c      	ldr	r3, [pc, #240]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2238      	movs	r2, #56	@ 0x38
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d10f      	bne.n	8001eec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ecc:	4b39      	ldr	r3, [pc, #228]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0adb      	lsrs	r3, r3, #11
 8001ed2:	2207      	movs	r2, #7
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	0013      	movs	r3, r2
 8001edc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001ede:	6839      	ldr	r1, [r7, #0]
 8001ee0:	4835      	ldr	r0, [pc, #212]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ee2:	f7fe f90d 	bl	8000100 <__udivsi3>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	e05d      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eec:	4b31      	ldr	r3, [pc, #196]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2238      	movs	r2, #56	@ 0x38
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d102      	bne.n	8001efe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ef8:	4b2f      	ldr	r3, [pc, #188]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	e054      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001efe:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2238      	movs	r2, #56	@ 0x38
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b10      	cmp	r3, #16
 8001f08:	d138      	bne.n	8001f7c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2203      	movs	r2, #3
 8001f10:	4013      	ands	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f14:	4b27      	ldr	r3, [pc, #156]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	3301      	adds	r3, #1
 8001f20:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d10d      	bne.n	8001f44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	4823      	ldr	r0, [pc, #140]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f2c:	f7fe f8e8 	bl	8000100 <__udivsi3>
 8001f30:	0003      	movs	r3, r0
 8001f32:	0019      	movs	r1, r3
 8001f34:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	227f      	movs	r2, #127	@ 0x7f
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	434b      	muls	r3, r1
 8001f40:	617b      	str	r3, [r7, #20]
        break;
 8001f42:	e00d      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f44:	68b9      	ldr	r1, [r7, #8]
 8001f46:	481c      	ldr	r0, [pc, #112]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f48:	f7fe f8da 	bl	8000100 <__udivsi3>
 8001f4c:	0003      	movs	r3, r0
 8001f4e:	0019      	movs	r1, r3
 8001f50:	4b18      	ldr	r3, [pc, #96]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	227f      	movs	r2, #127	@ 0x7f
 8001f58:	4013      	ands	r3, r2
 8001f5a:	434b      	muls	r3, r1
 8001f5c:	617b      	str	r3, [r7, #20]
        break;
 8001f5e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f60:	4b14      	ldr	r3, [pc, #80]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0f5b      	lsrs	r3, r3, #29
 8001f66:	2207      	movs	r2, #7
 8001f68:	4013      	ands	r3, r2
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	6978      	ldr	r0, [r7, #20]
 8001f72:	f7fe f8c5 	bl	8000100 <__udivsi3>
 8001f76:	0003      	movs	r3, r0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	e015      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2238      	movs	r2, #56	@ 0x38
 8001f82:	4013      	ands	r3, r2
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	d103      	bne.n	8001f90 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f88:	2380      	movs	r3, #128	@ 0x80
 8001f8a:	021b      	lsls	r3, r3, #8
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	e00b      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f90:	4b08      	ldr	r3, [pc, #32]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2238      	movs	r2, #56	@ 0x38
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b18      	cmp	r3, #24
 8001f9a:	d103      	bne.n	8001fa4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f9c:	23fa      	movs	r3, #250	@ 0xfa
 8001f9e:	01db      	lsls	r3, r3, #7
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	e001      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fa8:	693b      	ldr	r3, [r7, #16]
}
 8001faa:	0018      	movs	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	b006      	add	sp, #24
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	46c0      	nop			@ (mov r8, r8)
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	00f42400 	.word	0x00f42400

08001fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e04a      	b.n	8002064 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	223d      	movs	r2, #61	@ 0x3d
 8001fd2:	5c9b      	ldrb	r3, [r3, r2]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d107      	bne.n	8001fea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	223c      	movs	r2, #60	@ 0x3c
 8001fde:	2100      	movs	r1, #0
 8001fe0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f7fe fb01 	bl	80005ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	223d      	movs	r2, #61	@ 0x3d
 8001fee:	2102      	movs	r1, #2
 8001ff0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	0010      	movs	r0, r2
 8001ffe:	f000 fe1f 	bl	8002c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2248      	movs	r2, #72	@ 0x48
 8002006:	2101      	movs	r1, #1
 8002008:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	223e      	movs	r2, #62	@ 0x3e
 800200e:	2101      	movs	r1, #1
 8002010:	5499      	strb	r1, [r3, r2]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	223f      	movs	r2, #63	@ 0x3f
 8002016:	2101      	movs	r1, #1
 8002018:	5499      	strb	r1, [r3, r2]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2240      	movs	r2, #64	@ 0x40
 800201e:	2101      	movs	r1, #1
 8002020:	5499      	strb	r1, [r3, r2]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2241      	movs	r2, #65	@ 0x41
 8002026:	2101      	movs	r1, #1
 8002028:	5499      	strb	r1, [r3, r2]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2242      	movs	r2, #66	@ 0x42
 800202e:	2101      	movs	r1, #1
 8002030:	5499      	strb	r1, [r3, r2]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2243      	movs	r2, #67	@ 0x43
 8002036:	2101      	movs	r1, #1
 8002038:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2244      	movs	r2, #68	@ 0x44
 800203e:	2101      	movs	r1, #1
 8002040:	5499      	strb	r1, [r3, r2]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2245      	movs	r2, #69	@ 0x45
 8002046:	2101      	movs	r1, #1
 8002048:	5499      	strb	r1, [r3, r2]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2246      	movs	r2, #70	@ 0x46
 800204e:	2101      	movs	r1, #1
 8002050:	5499      	strb	r1, [r3, r2]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2247      	movs	r2, #71	@ 0x47
 8002056:	2101      	movs	r1, #1
 8002058:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	223d      	movs	r2, #61	@ 0x3d
 800205e:	2101      	movs	r1, #1
 8002060:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	0018      	movs	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	b002      	add	sp, #8
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e04a      	b.n	8002114 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	223d      	movs	r2, #61	@ 0x3d
 8002082:	5c9b      	ldrb	r3, [r3, r2]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d107      	bne.n	800209a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	223c      	movs	r2, #60	@ 0x3c
 800208e:	2100      	movs	r1, #0
 8002090:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	0018      	movs	r0, r3
 8002096:	f000 f841 	bl	800211c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	223d      	movs	r2, #61	@ 0x3d
 800209e:	2102      	movs	r1, #2
 80020a0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3304      	adds	r3, #4
 80020aa:	0019      	movs	r1, r3
 80020ac:	0010      	movs	r0, r2
 80020ae:	f000 fdc7 	bl	8002c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2248      	movs	r2, #72	@ 0x48
 80020b6:	2101      	movs	r1, #1
 80020b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	223e      	movs	r2, #62	@ 0x3e
 80020be:	2101      	movs	r1, #1
 80020c0:	5499      	strb	r1, [r3, r2]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	223f      	movs	r2, #63	@ 0x3f
 80020c6:	2101      	movs	r1, #1
 80020c8:	5499      	strb	r1, [r3, r2]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2240      	movs	r2, #64	@ 0x40
 80020ce:	2101      	movs	r1, #1
 80020d0:	5499      	strb	r1, [r3, r2]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2241      	movs	r2, #65	@ 0x41
 80020d6:	2101      	movs	r1, #1
 80020d8:	5499      	strb	r1, [r3, r2]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2242      	movs	r2, #66	@ 0x42
 80020de:	2101      	movs	r1, #1
 80020e0:	5499      	strb	r1, [r3, r2]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2243      	movs	r2, #67	@ 0x43
 80020e6:	2101      	movs	r1, #1
 80020e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2244      	movs	r2, #68	@ 0x44
 80020ee:	2101      	movs	r1, #1
 80020f0:	5499      	strb	r1, [r3, r2]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2245      	movs	r2, #69	@ 0x45
 80020f6:	2101      	movs	r1, #1
 80020f8:	5499      	strb	r1, [r3, r2]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2246      	movs	r2, #70	@ 0x46
 80020fe:	2101      	movs	r1, #1
 8002100:	5499      	strb	r1, [r3, r2]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2247      	movs	r2, #71	@ 0x47
 8002106:	2101      	movs	r1, #1
 8002108:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	223d      	movs	r2, #61	@ 0x3d
 800210e:	2101      	movs	r1, #1
 8002110:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	0018      	movs	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	b002      	add	sp, #8
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002124:	46c0      	nop			@ (mov r8, r8)
 8002126:	46bd      	mov	sp, r7
 8002128:	b002      	add	sp, #8
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	001a      	movs	r2, r3
 800213a:	1cbb      	adds	r3, r7, #2
 800213c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800213e:	2317      	movs	r3, #23
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d108      	bne.n	800215e <HAL_TIM_PWM_Start_DMA+0x32>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	223e      	movs	r2, #62	@ 0x3e
 8002150:	5c9b      	ldrb	r3, [r3, r2]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	3b02      	subs	r3, #2
 8002156:	425a      	negs	r2, r3
 8002158:	4153      	adcs	r3, r2
 800215a:	b2db      	uxtb	r3, r3
 800215c:	e037      	b.n	80021ce <HAL_TIM_PWM_Start_DMA+0xa2>
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b04      	cmp	r3, #4
 8002162:	d108      	bne.n	8002176 <HAL_TIM_PWM_Start_DMA+0x4a>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	223f      	movs	r2, #63	@ 0x3f
 8002168:	5c9b      	ldrb	r3, [r3, r2]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	3b02      	subs	r3, #2
 800216e:	425a      	negs	r2, r3
 8002170:	4153      	adcs	r3, r2
 8002172:	b2db      	uxtb	r3, r3
 8002174:	e02b      	b.n	80021ce <HAL_TIM_PWM_Start_DMA+0xa2>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b08      	cmp	r3, #8
 800217a:	d108      	bne.n	800218e <HAL_TIM_PWM_Start_DMA+0x62>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2240      	movs	r2, #64	@ 0x40
 8002180:	5c9b      	ldrb	r3, [r3, r2]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	3b02      	subs	r3, #2
 8002186:	425a      	negs	r2, r3
 8002188:	4153      	adcs	r3, r2
 800218a:	b2db      	uxtb	r3, r3
 800218c:	e01f      	b.n	80021ce <HAL_TIM_PWM_Start_DMA+0xa2>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b0c      	cmp	r3, #12
 8002192:	d108      	bne.n	80021a6 <HAL_TIM_PWM_Start_DMA+0x7a>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2241      	movs	r2, #65	@ 0x41
 8002198:	5c9b      	ldrb	r3, [r3, r2]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	3b02      	subs	r3, #2
 800219e:	425a      	negs	r2, r3
 80021a0:	4153      	adcs	r3, r2
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	e013      	b.n	80021ce <HAL_TIM_PWM_Start_DMA+0xa2>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b10      	cmp	r3, #16
 80021aa:	d108      	bne.n	80021be <HAL_TIM_PWM_Start_DMA+0x92>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2242      	movs	r2, #66	@ 0x42
 80021b0:	5c9b      	ldrb	r3, [r3, r2]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	3b02      	subs	r3, #2
 80021b6:	425a      	negs	r2, r3
 80021b8:	4153      	adcs	r3, r2
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	e007      	b.n	80021ce <HAL_TIM_PWM_Start_DMA+0xa2>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2243      	movs	r2, #67	@ 0x43
 80021c2:	5c9b      	ldrb	r3, [r3, r2]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	3b02      	subs	r3, #2
 80021c8:	425a      	negs	r2, r3
 80021ca:	4153      	adcs	r3, r2
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 80021d2:	2302      	movs	r3, #2
 80021d4:	e183      	b.n	80024de <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d108      	bne.n	80021ee <HAL_TIM_PWM_Start_DMA+0xc2>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	223e      	movs	r2, #62	@ 0x3e
 80021e0:	5c9b      	ldrb	r3, [r3, r2]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	3b01      	subs	r3, #1
 80021e6:	425a      	negs	r2, r3
 80021e8:	4153      	adcs	r3, r2
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	e037      	b.n	800225e <HAL_TIM_PWM_Start_DMA+0x132>
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d108      	bne.n	8002206 <HAL_TIM_PWM_Start_DMA+0xda>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	223f      	movs	r2, #63	@ 0x3f
 80021f8:	5c9b      	ldrb	r3, [r3, r2]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	3b01      	subs	r3, #1
 80021fe:	425a      	negs	r2, r3
 8002200:	4153      	adcs	r3, r2
 8002202:	b2db      	uxtb	r3, r3
 8002204:	e02b      	b.n	800225e <HAL_TIM_PWM_Start_DMA+0x132>
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b08      	cmp	r3, #8
 800220a:	d108      	bne.n	800221e <HAL_TIM_PWM_Start_DMA+0xf2>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2240      	movs	r2, #64	@ 0x40
 8002210:	5c9b      	ldrb	r3, [r3, r2]
 8002212:	b2db      	uxtb	r3, r3
 8002214:	3b01      	subs	r3, #1
 8002216:	425a      	negs	r2, r3
 8002218:	4153      	adcs	r3, r2
 800221a:	b2db      	uxtb	r3, r3
 800221c:	e01f      	b.n	800225e <HAL_TIM_PWM_Start_DMA+0x132>
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b0c      	cmp	r3, #12
 8002222:	d108      	bne.n	8002236 <HAL_TIM_PWM_Start_DMA+0x10a>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2241      	movs	r2, #65	@ 0x41
 8002228:	5c9b      	ldrb	r3, [r3, r2]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	3b01      	subs	r3, #1
 800222e:	425a      	negs	r2, r3
 8002230:	4153      	adcs	r3, r2
 8002232:	b2db      	uxtb	r3, r3
 8002234:	e013      	b.n	800225e <HAL_TIM_PWM_Start_DMA+0x132>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b10      	cmp	r3, #16
 800223a:	d108      	bne.n	800224e <HAL_TIM_PWM_Start_DMA+0x122>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2242      	movs	r2, #66	@ 0x42
 8002240:	5c9b      	ldrb	r3, [r3, r2]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	3b01      	subs	r3, #1
 8002246:	425a      	negs	r2, r3
 8002248:	4153      	adcs	r3, r2
 800224a:	b2db      	uxtb	r3, r3
 800224c:	e007      	b.n	800225e <HAL_TIM_PWM_Start_DMA+0x132>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2243      	movs	r2, #67	@ 0x43
 8002252:	5c9b      	ldrb	r3, [r3, r2]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	3b01      	subs	r3, #1
 8002258:	425a      	negs	r2, r3
 800225a:	4153      	adcs	r3, r2
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d035      	beq.n	80022ce <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_TIM_PWM_Start_DMA+0x144>
 8002268:	1cbb      	adds	r3, r7, #2
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e134      	b.n	80024de <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d104      	bne.n	8002284 <HAL_TIM_PWM_Start_DMA+0x158>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	223e      	movs	r2, #62	@ 0x3e
 800227e:	2102      	movs	r1, #2
 8002280:	5499      	strb	r1, [r3, r2]
 8002282:	e026      	b.n	80022d2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b04      	cmp	r3, #4
 8002288:	d104      	bne.n	8002294 <HAL_TIM_PWM_Start_DMA+0x168>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	223f      	movs	r2, #63	@ 0x3f
 800228e:	2102      	movs	r1, #2
 8002290:	5499      	strb	r1, [r3, r2]
 8002292:	e01e      	b.n	80022d2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b08      	cmp	r3, #8
 8002298:	d104      	bne.n	80022a4 <HAL_TIM_PWM_Start_DMA+0x178>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2240      	movs	r2, #64	@ 0x40
 800229e:	2102      	movs	r1, #2
 80022a0:	5499      	strb	r1, [r3, r2]
 80022a2:	e016      	b.n	80022d2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b0c      	cmp	r3, #12
 80022a8:	d104      	bne.n	80022b4 <HAL_TIM_PWM_Start_DMA+0x188>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2241      	movs	r2, #65	@ 0x41
 80022ae:	2102      	movs	r1, #2
 80022b0:	5499      	strb	r1, [r3, r2]
 80022b2:	e00e      	b.n	80022d2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b10      	cmp	r3, #16
 80022b8:	d104      	bne.n	80022c4 <HAL_TIM_PWM_Start_DMA+0x198>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2242      	movs	r2, #66	@ 0x42
 80022be:	2102      	movs	r1, #2
 80022c0:	5499      	strb	r1, [r3, r2]
 80022c2:	e006      	b.n	80022d2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2243      	movs	r2, #67	@ 0x43
 80022c8:	2102      	movs	r1, #2
 80022ca:	5499      	strb	r1, [r3, r2]
 80022cc:	e001      	b.n	80022d2 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e105      	b.n	80024de <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b0c      	cmp	r3, #12
 80022d6:	d100      	bne.n	80022da <HAL_TIM_PWM_Start_DMA+0x1ae>
 80022d8:	e080      	b.n	80023dc <HAL_TIM_PWM_Start_DMA+0x2b0>
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b0c      	cmp	r3, #12
 80022de:	d900      	bls.n	80022e2 <HAL_TIM_PWM_Start_DMA+0x1b6>
 80022e0:	e0a1      	b.n	8002426 <HAL_TIM_PWM_Start_DMA+0x2fa>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d054      	beq.n	8002392 <HAL_TIM_PWM_Start_DMA+0x266>
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d900      	bls.n	80022f0 <HAL_TIM_PWM_Start_DMA+0x1c4>
 80022ee:	e09a      	b.n	8002426 <HAL_TIM_PWM_Start_DMA+0x2fa>
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_TIM_PWM_Start_DMA+0x1d2>
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d025      	beq.n	8002348 <HAL_TIM_PWM_Start_DMA+0x21c>
 80022fc:	e093      	b.n	8002426 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002302:	4a79      	ldr	r2, [pc, #484]	@ (80024e8 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002304:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230a:	4a78      	ldr	r2, [pc, #480]	@ (80024ec <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800230c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002312:	4a77      	ldr	r2, [pc, #476]	@ (80024f0 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002314:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	3334      	adds	r3, #52	@ 0x34
 8002322:	001a      	movs	r2, r3
 8002324:	1cbb      	adds	r3, r7, #2
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	f7fe fdda 	bl	8000ee0 <HAL_DMA_Start_IT>
 800232c:	1e03      	subs	r3, r0, #0
 800232e:	d001      	beq.n	8002334 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0d4      	b.n	80024de <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2180      	movs	r1, #128	@ 0x80
 8002340:	0089      	lsls	r1, r1, #2
 8002342:	430a      	orrs	r2, r1
 8002344:	60da      	str	r2, [r3, #12]
      break;
 8002346:	e073      	b.n	8002430 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234c:	4a66      	ldr	r2, [pc, #408]	@ (80024e8 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 800234e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002354:	4a65      	ldr	r2, [pc, #404]	@ (80024ec <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002356:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800235c:	4a64      	ldr	r2, [pc, #400]	@ (80024f0 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 800235e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	3338      	adds	r3, #56	@ 0x38
 800236c:	001a      	movs	r2, r3
 800236e:	1cbb      	adds	r3, r7, #2
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	f7fe fdb5 	bl	8000ee0 <HAL_DMA_Start_IT>
 8002376:	1e03      	subs	r3, r0, #0
 8002378:	d001      	beq.n	800237e <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e0af      	b.n	80024de <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2180      	movs	r1, #128	@ 0x80
 800238a:	00c9      	lsls	r1, r1, #3
 800238c:	430a      	orrs	r2, r1
 800238e:	60da      	str	r2, [r3, #12]
      break;
 8002390:	e04e      	b.n	8002430 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002396:	4a54      	ldr	r2, [pc, #336]	@ (80024e8 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002398:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239e:	4a53      	ldr	r2, [pc, #332]	@ (80024ec <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80023a0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a6:	4a52      	ldr	r2, [pc, #328]	@ (80024f0 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80023a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	333c      	adds	r3, #60	@ 0x3c
 80023b6:	001a      	movs	r2, r3
 80023b8:	1cbb      	adds	r3, r7, #2
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	f7fe fd90 	bl	8000ee0 <HAL_DMA_Start_IT>
 80023c0:	1e03      	subs	r3, r0, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e08a      	b.n	80024de <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2180      	movs	r1, #128	@ 0x80
 80023d4:	0109      	lsls	r1, r1, #4
 80023d6:	430a      	orrs	r2, r1
 80023d8:	60da      	str	r2, [r3, #12]
      break;
 80023da:	e029      	b.n	8002430 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e0:	4a41      	ldr	r2, [pc, #260]	@ (80024e8 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80023e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e8:	4a40      	ldr	r2, [pc, #256]	@ (80024ec <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80023ea:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f0:	4a3f      	ldr	r2, [pc, #252]	@ (80024f0 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80023f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	3340      	adds	r3, #64	@ 0x40
 8002400:	001a      	movs	r2, r3
 8002402:	1cbb      	adds	r3, r7, #2
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	f7fe fd6b 	bl	8000ee0 <HAL_DMA_Start_IT>
 800240a:	1e03      	subs	r3, r0, #0
 800240c:	d001      	beq.n	8002412 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e065      	b.n	80024de <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2180      	movs	r1, #128	@ 0x80
 800241e:	0149      	lsls	r1, r1, #5
 8002420:	430a      	orrs	r2, r1
 8002422:	60da      	str	r2, [r3, #12]
      break;
 8002424:	e004      	b.n	8002430 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8002426:	2317      	movs	r3, #23
 8002428:	18fb      	adds	r3, r7, r3
 800242a:	2201      	movs	r2, #1
 800242c:	701a      	strb	r2, [r3, #0]
      break;
 800242e:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002430:	2317      	movs	r3, #23
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d14e      	bne.n	80024d8 <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	2201      	movs	r2, #1
 8002442:	0018      	movs	r0, r3
 8002444:	f000 ffae 	bl	80033a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a29      	ldr	r2, [pc, #164]	@ (80024f4 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d009      	beq.n	8002466 <HAL_TIM_PWM_Start_DMA+0x33a>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a28      	ldr	r2, [pc, #160]	@ (80024f8 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d004      	beq.n	8002466 <HAL_TIM_PWM_Start_DMA+0x33a>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a26      	ldr	r2, [pc, #152]	@ (80024fc <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d101      	bne.n	800246a <HAL_TIM_PWM_Start_DMA+0x33e>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_TIM_PWM_Start_DMA+0x340>
 800246a:	2300      	movs	r3, #0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2180      	movs	r1, #128	@ 0x80
 800247c:	0209      	lsls	r1, r1, #8
 800247e:	430a      	orrs	r2, r1
 8002480:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a1b      	ldr	r2, [pc, #108]	@ (80024f4 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d004      	beq.n	8002496 <HAL_TIM_PWM_Start_DMA+0x36a>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1b      	ldr	r2, [pc, #108]	@ (8002500 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d116      	bne.n	80024c4 <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4a19      	ldr	r2, [pc, #100]	@ (8002504 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800249e:	4013      	ands	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	2b06      	cmp	r3, #6
 80024a6:	d016      	beq.n	80024d6 <HAL_TIM_PWM_Start_DMA+0x3aa>
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	2380      	movs	r3, #128	@ 0x80
 80024ac:	025b      	lsls	r3, r3, #9
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d011      	beq.n	80024d6 <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2101      	movs	r1, #1
 80024be:	430a      	orrs	r2, r1
 80024c0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c2:	e008      	b.n	80024d6 <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2101      	movs	r1, #1
 80024d0:	430a      	orrs	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	e000      	b.n	80024d8 <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d6:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 80024d8:	2317      	movs	r3, #23
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	781b      	ldrb	r3, [r3, #0]
}
 80024de:	0018      	movs	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b006      	add	sp, #24
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	46c0      	nop			@ (mov r8, r8)
 80024e8:	08002b2d 	.word	0x08002b2d
 80024ec:	08002bd7 	.word	0x08002bd7
 80024f0:	08002a99 	.word	0x08002a99
 80024f4:	40012c00 	.word	0x40012c00
 80024f8:	40014400 	.word	0x40014400
 80024fc:	40014800 	.word	0x40014800
 8002500:	40000400 	.word	0x40000400
 8002504:	00010007 	.word	0x00010007

08002508 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002512:	230f      	movs	r3, #15
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b0c      	cmp	r3, #12
 800251e:	d039      	beq.n	8002594 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	2b0c      	cmp	r3, #12
 8002524:	d844      	bhi.n	80025b0 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b08      	cmp	r3, #8
 800252a:	d025      	beq.n	8002578 <HAL_TIM_PWM_Stop_DMA+0x70>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2b08      	cmp	r3, #8
 8002530:	d83e      	bhi.n	80025b0 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_TIM_PWM_Stop_DMA+0x38>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	2b04      	cmp	r3, #4
 800253c:	d00e      	beq.n	800255c <HAL_TIM_PWM_Stop_DMA+0x54>
 800253e:	e037      	b.n	80025b0 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	495a      	ldr	r1, [pc, #360]	@ (80026b4 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 800254c:	400a      	ands	r2, r1
 800254e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002554:	0018      	movs	r0, r3
 8002556:	f7fe fd49 	bl	8000fec <HAL_DMA_Abort_IT>
      break;
 800255a:	e02e      	b.n	80025ba <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4954      	ldr	r1, [pc, #336]	@ (80026b8 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8002568:	400a      	ands	r2, r1
 800256a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002570:	0018      	movs	r0, r3
 8002572:	f7fe fd3b 	bl	8000fec <HAL_DMA_Abort_IT>
      break;
 8002576:	e020      	b.n	80025ba <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	494e      	ldr	r1, [pc, #312]	@ (80026bc <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8002584:	400a      	ands	r2, r1
 8002586:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258c:	0018      	movs	r0, r3
 800258e:	f7fe fd2d 	bl	8000fec <HAL_DMA_Abort_IT>
      break;
 8002592:	e012      	b.n	80025ba <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4948      	ldr	r1, [pc, #288]	@ (80026c0 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 80025a0:	400a      	ands	r2, r1
 80025a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a8:	0018      	movs	r0, r3
 80025aa:	f7fe fd1f 	bl	8000fec <HAL_DMA_Abort_IT>
      break;
 80025ae:	e004      	b.n	80025ba <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 80025b0:	230f      	movs	r3, #15
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
      break;
 80025b8:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80025ba:	230f      	movs	r3, #15
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d000      	beq.n	80025c6 <HAL_TIM_PWM_Stop_DMA+0xbe>
 80025c4:	e06e      	b.n	80026a4 <HAL_TIM_PWM_Stop_DMA+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6839      	ldr	r1, [r7, #0]
 80025cc:	2200      	movs	r2, #0
 80025ce:	0018      	movs	r0, r3
 80025d0:	f000 fee8 	bl	80033a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a3a      	ldr	r2, [pc, #232]	@ (80026c4 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d009      	beq.n	80025f2 <HAL_TIM_PWM_Stop_DMA+0xea>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a39      	ldr	r2, [pc, #228]	@ (80026c8 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d004      	beq.n	80025f2 <HAL_TIM_PWM_Stop_DMA+0xea>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a37      	ldr	r2, [pc, #220]	@ (80026cc <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d101      	bne.n	80025f6 <HAL_TIM_PWM_Stop_DMA+0xee>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <HAL_TIM_PWM_Stop_DMA+0xf0>
 80025f6:	2300      	movs	r3, #0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d013      	beq.n	8002624 <HAL_TIM_PWM_Stop_DMA+0x11c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	4a33      	ldr	r2, [pc, #204]	@ (80026d0 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8002604:	4013      	ands	r3, r2
 8002606:	d10d      	bne.n	8002624 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	4a31      	ldr	r2, [pc, #196]	@ (80026d4 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8002610:	4013      	ands	r3, r2
 8002612:	d107      	bne.n	8002624 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	492e      	ldr	r1, [pc, #184]	@ (80026d8 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8002620:	400a      	ands	r2, r1
 8002622:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	4a29      	ldr	r2, [pc, #164]	@ (80026d0 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 800262c:	4013      	ands	r3, r2
 800262e:	d10d      	bne.n	800264c <HAL_TIM_PWM_Stop_DMA+0x144>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	4a27      	ldr	r2, [pc, #156]	@ (80026d4 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8002638:	4013      	ands	r3, r2
 800263a:	d107      	bne.n	800264c <HAL_TIM_PWM_Stop_DMA+0x144>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2101      	movs	r1, #1
 8002648:	438a      	bics	r2, r1
 800264a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d104      	bne.n	800265c <HAL_TIM_PWM_Stop_DMA+0x154>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	223e      	movs	r2, #62	@ 0x3e
 8002656:	2101      	movs	r1, #1
 8002658:	5499      	strb	r1, [r3, r2]
 800265a:	e023      	b.n	80026a4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2b04      	cmp	r3, #4
 8002660:	d104      	bne.n	800266c <HAL_TIM_PWM_Stop_DMA+0x164>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	223f      	movs	r2, #63	@ 0x3f
 8002666:	2101      	movs	r1, #1
 8002668:	5499      	strb	r1, [r3, r2]
 800266a:	e01b      	b.n	80026a4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	2b08      	cmp	r3, #8
 8002670:	d104      	bne.n	800267c <HAL_TIM_PWM_Stop_DMA+0x174>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2240      	movs	r2, #64	@ 0x40
 8002676:	2101      	movs	r1, #1
 8002678:	5499      	strb	r1, [r3, r2]
 800267a:	e013      	b.n	80026a4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2b0c      	cmp	r3, #12
 8002680:	d104      	bne.n	800268c <HAL_TIM_PWM_Stop_DMA+0x184>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2241      	movs	r2, #65	@ 0x41
 8002686:	2101      	movs	r1, #1
 8002688:	5499      	strb	r1, [r3, r2]
 800268a:	e00b      	b.n	80026a4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2b10      	cmp	r3, #16
 8002690:	d104      	bne.n	800269c <HAL_TIM_PWM_Stop_DMA+0x194>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2242      	movs	r2, #66	@ 0x42
 8002696:	2101      	movs	r1, #1
 8002698:	5499      	strb	r1, [r3, r2]
 800269a:	e003      	b.n	80026a4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2243      	movs	r2, #67	@ 0x43
 80026a0:	2101      	movs	r1, #1
 80026a2:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80026a4:	230f      	movs	r3, #15
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	781b      	ldrb	r3, [r3, #0]
}
 80026aa:	0018      	movs	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b004      	add	sp, #16
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	46c0      	nop			@ (mov r8, r8)
 80026b4:	fffffdff 	.word	0xfffffdff
 80026b8:	fffffbff 	.word	0xfffffbff
 80026bc:	fffff7ff 	.word	0xfffff7ff
 80026c0:	ffffefff 	.word	0xffffefff
 80026c4:	40012c00 	.word	0x40012c00
 80026c8:	40014400 	.word	0x40014400
 80026cc:	40014800 	.word	0x40014800
 80026d0:	00001111 	.word	0x00001111
 80026d4:	00000444 	.word	0x00000444
 80026d8:	ffff7fff 	.word	0xffff7fff

080026dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026e8:	2317      	movs	r3, #23
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	223c      	movs	r2, #60	@ 0x3c
 80026f4:	5c9b      	ldrb	r3, [r3, r2]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_TIM_PWM_ConfigChannel+0x22>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e0e5      	b.n	80028ca <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	223c      	movs	r2, #60	@ 0x3c
 8002702:	2101      	movs	r1, #1
 8002704:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b14      	cmp	r3, #20
 800270a:	d900      	bls.n	800270e <HAL_TIM_PWM_ConfigChannel+0x32>
 800270c:	e0d1      	b.n	80028b2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	009a      	lsls	r2, r3, #2
 8002712:	4b70      	ldr	r3, [pc, #448]	@ (80028d4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002714:	18d3      	adds	r3, r2, r3
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	0011      	movs	r1, r2
 8002722:	0018      	movs	r0, r3
 8002724:	f000 fb06 	bl	8002d34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2108      	movs	r1, #8
 8002734:	430a      	orrs	r2, r1
 8002736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699a      	ldr	r2, [r3, #24]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2104      	movs	r1, #4
 8002744:	438a      	bics	r2, r1
 8002746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6999      	ldr	r1, [r3, #24]
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	619a      	str	r2, [r3, #24]
      break;
 800275a:	e0af      	b.n	80028bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	0011      	movs	r1, r2
 8002764:	0018      	movs	r0, r3
 8002766:	f000 fb65 	bl	8002e34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699a      	ldr	r2, [r3, #24]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2180      	movs	r1, #128	@ 0x80
 8002776:	0109      	lsls	r1, r1, #4
 8002778:	430a      	orrs	r2, r1
 800277a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699a      	ldr	r2, [r3, #24]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4954      	ldr	r1, [pc, #336]	@ (80028d8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002788:	400a      	ands	r2, r1
 800278a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6999      	ldr	r1, [r3, #24]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	021a      	lsls	r2, r3, #8
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	619a      	str	r2, [r3, #24]
      break;
 80027a0:	e08c      	b.n	80028bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	0011      	movs	r1, r2
 80027aa:	0018      	movs	r0, r3
 80027ac:	f000 fbc0 	bl	8002f30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	69da      	ldr	r2, [r3, #28]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2108      	movs	r1, #8
 80027bc:	430a      	orrs	r2, r1
 80027be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	69da      	ldr	r2, [r3, #28]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2104      	movs	r1, #4
 80027cc:	438a      	bics	r2, r1
 80027ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	69d9      	ldr	r1, [r3, #28]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	691a      	ldr	r2, [r3, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	61da      	str	r2, [r3, #28]
      break;
 80027e2:	e06b      	b.n	80028bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	0011      	movs	r1, r2
 80027ec:	0018      	movs	r0, r3
 80027ee:	f000 fc21 	bl	8003034 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69da      	ldr	r2, [r3, #28]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2180      	movs	r1, #128	@ 0x80
 80027fe:	0109      	lsls	r1, r1, #4
 8002800:	430a      	orrs	r2, r1
 8002802:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	69da      	ldr	r2, [r3, #28]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4932      	ldr	r1, [pc, #200]	@ (80028d8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002810:	400a      	ands	r2, r1
 8002812:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69d9      	ldr	r1, [r3, #28]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	021a      	lsls	r2, r3, #8
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	61da      	str	r2, [r3, #28]
      break;
 8002828:	e048      	b.n	80028bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	0011      	movs	r1, r2
 8002832:	0018      	movs	r0, r3
 8002834:	f000 fc62 	bl	80030fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2108      	movs	r1, #8
 8002844:	430a      	orrs	r2, r1
 8002846:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2104      	movs	r1, #4
 8002854:	438a      	bics	r2, r1
 8002856:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	691a      	ldr	r2, [r3, #16]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800286a:	e027      	b.n	80028bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	0011      	movs	r1, r2
 8002874:	0018      	movs	r0, r3
 8002876:	f000 fc9b 	bl	80031b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2180      	movs	r1, #128	@ 0x80
 8002886:	0109      	lsls	r1, r1, #4
 8002888:	430a      	orrs	r2, r1
 800288a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4910      	ldr	r1, [pc, #64]	@ (80028d8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002898:	400a      	ands	r2, r1
 800289a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	021a      	lsls	r2, r3, #8
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80028b0:	e004      	b.n	80028bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80028b2:	2317      	movs	r3, #23
 80028b4:	18fb      	adds	r3, r7, r3
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
      break;
 80028ba:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	223c      	movs	r2, #60	@ 0x3c
 80028c0:	2100      	movs	r1, #0
 80028c2:	5499      	strb	r1, [r3, r2]

  return status;
 80028c4:	2317      	movs	r3, #23
 80028c6:	18fb      	adds	r3, r7, r3
 80028c8:	781b      	ldrb	r3, [r3, #0]
}
 80028ca:	0018      	movs	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b006      	add	sp, #24
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	46c0      	nop			@ (mov r8, r8)
 80028d4:	0800356c 	.word	0x0800356c
 80028d8:	fffffbff 	.word	0xfffffbff

080028dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028e6:	230f      	movs	r3, #15
 80028e8:	18fb      	adds	r3, r7, r3
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	223c      	movs	r2, #60	@ 0x3c
 80028f2:	5c9b      	ldrb	r3, [r3, r2]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_TIM_ConfigClockSource+0x20>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e0bc      	b.n	8002a76 <HAL_TIM_ConfigClockSource+0x19a>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	223c      	movs	r2, #60	@ 0x3c
 8002900:	2101      	movs	r1, #1
 8002902:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	223d      	movs	r2, #61	@ 0x3d
 8002908:	2102      	movs	r1, #2
 800290a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	4a5a      	ldr	r2, [pc, #360]	@ (8002a80 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002918:	4013      	ands	r3, r2
 800291a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	4a59      	ldr	r2, [pc, #356]	@ (8002a84 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002920:	4013      	ands	r3, r2
 8002922:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2280      	movs	r2, #128	@ 0x80
 8002932:	0192      	lsls	r2, r2, #6
 8002934:	4293      	cmp	r3, r2
 8002936:	d040      	beq.n	80029ba <HAL_TIM_ConfigClockSource+0xde>
 8002938:	2280      	movs	r2, #128	@ 0x80
 800293a:	0192      	lsls	r2, r2, #6
 800293c:	4293      	cmp	r3, r2
 800293e:	d900      	bls.n	8002942 <HAL_TIM_ConfigClockSource+0x66>
 8002940:	e088      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x178>
 8002942:	2280      	movs	r2, #128	@ 0x80
 8002944:	0152      	lsls	r2, r2, #5
 8002946:	4293      	cmp	r3, r2
 8002948:	d100      	bne.n	800294c <HAL_TIM_ConfigClockSource+0x70>
 800294a:	e088      	b.n	8002a5e <HAL_TIM_ConfigClockSource+0x182>
 800294c:	2280      	movs	r2, #128	@ 0x80
 800294e:	0152      	lsls	r2, r2, #5
 8002950:	4293      	cmp	r3, r2
 8002952:	d900      	bls.n	8002956 <HAL_TIM_ConfigClockSource+0x7a>
 8002954:	e07e      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x178>
 8002956:	2b70      	cmp	r3, #112	@ 0x70
 8002958:	d018      	beq.n	800298c <HAL_TIM_ConfigClockSource+0xb0>
 800295a:	d900      	bls.n	800295e <HAL_TIM_ConfigClockSource+0x82>
 800295c:	e07a      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x178>
 800295e:	2b60      	cmp	r3, #96	@ 0x60
 8002960:	d04f      	beq.n	8002a02 <HAL_TIM_ConfigClockSource+0x126>
 8002962:	d900      	bls.n	8002966 <HAL_TIM_ConfigClockSource+0x8a>
 8002964:	e076      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x178>
 8002966:	2b50      	cmp	r3, #80	@ 0x50
 8002968:	d03b      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x106>
 800296a:	d900      	bls.n	800296e <HAL_TIM_ConfigClockSource+0x92>
 800296c:	e072      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x178>
 800296e:	2b40      	cmp	r3, #64	@ 0x40
 8002970:	d057      	beq.n	8002a22 <HAL_TIM_ConfigClockSource+0x146>
 8002972:	d900      	bls.n	8002976 <HAL_TIM_ConfigClockSource+0x9a>
 8002974:	e06e      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x178>
 8002976:	2b30      	cmp	r3, #48	@ 0x30
 8002978:	d063      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x166>
 800297a:	d86b      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x178>
 800297c:	2b20      	cmp	r3, #32
 800297e:	d060      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x166>
 8002980:	d868      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x178>
 8002982:	2b00      	cmp	r3, #0
 8002984:	d05d      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x166>
 8002986:	2b10      	cmp	r3, #16
 8002988:	d05b      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x166>
 800298a:	e063      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800299c:	f000 fce2 	bl	8003364 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2277      	movs	r2, #119	@ 0x77
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	609a      	str	r2, [r3, #8]
      break;
 80029b8:	e052      	b.n	8002a60 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029ca:	f000 fccb 	bl	8003364 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2180      	movs	r1, #128	@ 0x80
 80029da:	01c9      	lsls	r1, r1, #7
 80029dc:	430a      	orrs	r2, r1
 80029de:	609a      	str	r2, [r3, #8]
      break;
 80029e0:	e03e      	b.n	8002a60 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ee:	001a      	movs	r2, r3
 80029f0:	f000 fc3c 	bl	800326c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2150      	movs	r1, #80	@ 0x50
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 fc96 	bl	800332c <TIM_ITRx_SetConfig>
      break;
 8002a00:	e02e      	b.n	8002a60 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a0e:	001a      	movs	r2, r3
 8002a10:	f000 fc5a 	bl	80032c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2160      	movs	r1, #96	@ 0x60
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f000 fc86 	bl	800332c <TIM_ITRx_SetConfig>
      break;
 8002a20:	e01e      	b.n	8002a60 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a2e:	001a      	movs	r2, r3
 8002a30:	f000 fc1c 	bl	800326c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2140      	movs	r1, #64	@ 0x40
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f000 fc76 	bl	800332c <TIM_ITRx_SetConfig>
      break;
 8002a40:	e00e      	b.n	8002a60 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	0010      	movs	r0, r2
 8002a4e:	f000 fc6d 	bl	800332c <TIM_ITRx_SetConfig>
      break;
 8002a52:	e005      	b.n	8002a60 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002a54:	230f      	movs	r3, #15
 8002a56:	18fb      	adds	r3, r7, r3
 8002a58:	2201      	movs	r2, #1
 8002a5a:	701a      	strb	r2, [r3, #0]
      break;
 8002a5c:	e000      	b.n	8002a60 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002a5e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	223d      	movs	r2, #61	@ 0x3d
 8002a64:	2101      	movs	r1, #1
 8002a66:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	223c      	movs	r2, #60	@ 0x3c
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	5499      	strb	r1, [r3, r2]

  return status;
 8002a70:	230f      	movs	r3, #15
 8002a72:	18fb      	adds	r3, r7, r3
 8002a74:	781b      	ldrb	r3, [r3, #0]
}
 8002a76:	0018      	movs	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b004      	add	sp, #16
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	46c0      	nop			@ (mov r8, r8)
 8002a80:	ffceff88 	.word	0xffceff88
 8002a84:	ffff00ff 	.word	0xffff00ff

08002a88 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002a90:	46c0      	nop			@ (mov r8, r8)
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b002      	add	sp, #8
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d107      	bne.n	8002ac0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	223e      	movs	r2, #62	@ 0x3e
 8002aba:	2101      	movs	r1, #1
 8002abc:	5499      	strb	r1, [r3, r2]
 8002abe:	e02a      	b.n	8002b16 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d107      	bne.n	8002ada <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2202      	movs	r2, #2
 8002ace:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	223f      	movs	r2, #63	@ 0x3f
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	5499      	strb	r1, [r3, r2]
 8002ad8:	e01d      	b.n	8002b16 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d107      	bne.n	8002af4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2240      	movs	r2, #64	@ 0x40
 8002aee:	2101      	movs	r1, #1
 8002af0:	5499      	strb	r1, [r3, r2]
 8002af2:	e010      	b.n	8002b16 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d107      	bne.n	8002b0e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2208      	movs	r2, #8
 8002b02:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2241      	movs	r2, #65	@ 0x41
 8002b08:	2101      	movs	r1, #1
 8002b0a:	5499      	strb	r1, [r3, r2]
 8002b0c:	e003      	b.n	8002b16 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	223d      	movs	r2, #61	@ 0x3d
 8002b12:	2101      	movs	r1, #1
 8002b14:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f7ff ffb5 	bl	8002a88 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	771a      	strb	r2, [r3, #28]
}
 8002b24:	46c0      	nop			@ (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b004      	add	sp, #16
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b38:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d10b      	bne.n	8002b5c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2201      	movs	r2, #1
 8002b48:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d136      	bne.n	8002bc0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	223e      	movs	r2, #62	@ 0x3e
 8002b56:	2101      	movs	r1, #1
 8002b58:	5499      	strb	r1, [r3, r2]
 8002b5a:	e031      	b.n	8002bc0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d10b      	bne.n	8002b7e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2202      	movs	r2, #2
 8002b6a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d125      	bne.n	8002bc0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	223f      	movs	r2, #63	@ 0x3f
 8002b78:	2101      	movs	r1, #1
 8002b7a:	5499      	strb	r1, [r3, r2]
 8002b7c:	e020      	b.n	8002bc0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d10b      	bne.n	8002ba0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2204      	movs	r2, #4
 8002b8c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d114      	bne.n	8002bc0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2240      	movs	r2, #64	@ 0x40
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	5499      	strb	r1, [r3, r2]
 8002b9e:	e00f      	b.n	8002bc0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d10a      	bne.n	8002bc0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2208      	movs	r2, #8
 8002bae:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d103      	bne.n	8002bc0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2241      	movs	r2, #65	@ 0x41
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f7fd fb3e 	bl	8000244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	771a      	strb	r2, [r3, #28]
}
 8002bce:	46c0      	nop			@ (mov r8, r8)
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b004      	add	sp, #16
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d103      	bne.n	8002bf6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	771a      	strb	r2, [r3, #28]
 8002bf4:	e019      	b.n	8002c2a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d103      	bne.n	8002c08 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2202      	movs	r2, #2
 8002c04:	771a      	strb	r2, [r3, #28]
 8002c06:	e010      	b.n	8002c2a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d103      	bne.n	8002c1a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2204      	movs	r2, #4
 8002c16:	771a      	strb	r2, [r3, #28]
 8002c18:	e007      	b.n	8002c2a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d102      	bne.n	8002c2a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2208      	movs	r2, #8
 8002c28:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f7fd faf3 	bl	8000218 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	771a      	strb	r2, [r3, #28]
}
 8002c38:	46c0      	nop			@ (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b004      	add	sp, #16
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a32      	ldr	r2, [pc, #200]	@ (8002d1c <TIM_Base_SetConfig+0xdc>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d003      	beq.n	8002c60 <TIM_Base_SetConfig+0x20>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a31      	ldr	r2, [pc, #196]	@ (8002d20 <TIM_Base_SetConfig+0xe0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d108      	bne.n	8002c72 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2270      	movs	r2, #112	@ 0x70
 8002c64:	4393      	bics	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a29      	ldr	r2, [pc, #164]	@ (8002d1c <TIM_Base_SetConfig+0xdc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d00f      	beq.n	8002c9a <TIM_Base_SetConfig+0x5a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a28      	ldr	r2, [pc, #160]	@ (8002d20 <TIM_Base_SetConfig+0xe0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00b      	beq.n	8002c9a <TIM_Base_SetConfig+0x5a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a27      	ldr	r2, [pc, #156]	@ (8002d24 <TIM_Base_SetConfig+0xe4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d007      	beq.n	8002c9a <TIM_Base_SetConfig+0x5a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a26      	ldr	r2, [pc, #152]	@ (8002d28 <TIM_Base_SetConfig+0xe8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d003      	beq.n	8002c9a <TIM_Base_SetConfig+0x5a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a25      	ldr	r2, [pc, #148]	@ (8002d2c <TIM_Base_SetConfig+0xec>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d108      	bne.n	8002cac <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4a24      	ldr	r2, [pc, #144]	@ (8002d30 <TIM_Base_SetConfig+0xf0>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2280      	movs	r2, #128	@ 0x80
 8002cb0:	4393      	bics	r3, r2
 8002cb2:	001a      	movs	r2, r3
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a11      	ldr	r2, [pc, #68]	@ (8002d1c <TIM_Base_SetConfig+0xdc>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d007      	beq.n	8002cea <TIM_Base_SetConfig+0xaa>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a12      	ldr	r2, [pc, #72]	@ (8002d28 <TIM_Base_SetConfig+0xe8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d003      	beq.n	8002cea <TIM_Base_SetConfig+0xaa>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a11      	ldr	r2, [pc, #68]	@ (8002d2c <TIM_Base_SetConfig+0xec>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d103      	bne.n	8002cf2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d106      	bne.n	8002d12 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	4393      	bics	r3, r2
 8002d0c:	001a      	movs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	611a      	str	r2, [r3, #16]
  }
}
 8002d12:	46c0      	nop			@ (mov r8, r8)
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b004      	add	sp, #16
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	46c0      	nop			@ (mov r8, r8)
 8002d1c:	40012c00 	.word	0x40012c00
 8002d20:	40000400 	.word	0x40000400
 8002d24:	40002000 	.word	0x40002000
 8002d28:	40014400 	.word	0x40014400
 8002d2c:	40014800 	.word	0x40014800
 8002d30:	fffffcff 	.word	0xfffffcff

08002d34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	4393      	bics	r3, r2
 8002d4c:	001a      	movs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4a2e      	ldr	r2, [pc, #184]	@ (8002e1c <TIM_OC1_SetConfig+0xe8>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2203      	movs	r2, #3
 8002d6a:	4393      	bics	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	4393      	bics	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a24      	ldr	r2, [pc, #144]	@ (8002e20 <TIM_OC1_SetConfig+0xec>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d007      	beq.n	8002da2 <TIM_OC1_SetConfig+0x6e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a23      	ldr	r2, [pc, #140]	@ (8002e24 <TIM_OC1_SetConfig+0xf0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d003      	beq.n	8002da2 <TIM_OC1_SetConfig+0x6e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a22      	ldr	r2, [pc, #136]	@ (8002e28 <TIM_OC1_SetConfig+0xf4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d10c      	bne.n	8002dbc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2208      	movs	r2, #8
 8002da6:	4393      	bics	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2204      	movs	r2, #4
 8002db8:	4393      	bics	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a18      	ldr	r2, [pc, #96]	@ (8002e20 <TIM_OC1_SetConfig+0xec>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d007      	beq.n	8002dd4 <TIM_OC1_SetConfig+0xa0>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a17      	ldr	r2, [pc, #92]	@ (8002e24 <TIM_OC1_SetConfig+0xf0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d003      	beq.n	8002dd4 <TIM_OC1_SetConfig+0xa0>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a16      	ldr	r2, [pc, #88]	@ (8002e28 <TIM_OC1_SetConfig+0xf4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d111      	bne.n	8002df8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4a15      	ldr	r2, [pc, #84]	@ (8002e2c <TIM_OC1_SetConfig+0xf8>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4a14      	ldr	r2, [pc, #80]	@ (8002e30 <TIM_OC1_SetConfig+0xfc>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	621a      	str	r2, [r3, #32]
}
 8002e12:	46c0      	nop			@ (mov r8, r8)
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b006      	add	sp, #24
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	fffeff8f 	.word	0xfffeff8f
 8002e20:	40012c00 	.word	0x40012c00
 8002e24:	40014400 	.word	0x40014400
 8002e28:	40014800 	.word	0x40014800
 8002e2c:	fffffeff 	.word	0xfffffeff
 8002e30:	fffffdff 	.word	0xfffffdff

08002e34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	2210      	movs	r2, #16
 8002e4a:	4393      	bics	r3, r2
 8002e4c:	001a      	movs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4a2c      	ldr	r2, [pc, #176]	@ (8002f14 <TIM_OC2_SetConfig+0xe0>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4a2b      	ldr	r2, [pc, #172]	@ (8002f18 <TIM_OC2_SetConfig+0xe4>)
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	021b      	lsls	r3, r3, #8
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	4393      	bics	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a22      	ldr	r2, [pc, #136]	@ (8002f1c <TIM_OC2_SetConfig+0xe8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d10d      	bne.n	8002eb2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2280      	movs	r2, #128	@ 0x80
 8002e9a:	4393      	bics	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2240      	movs	r2, #64	@ 0x40
 8002eae:	4393      	bics	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a19      	ldr	r2, [pc, #100]	@ (8002f1c <TIM_OC2_SetConfig+0xe8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d007      	beq.n	8002eca <TIM_OC2_SetConfig+0x96>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a18      	ldr	r2, [pc, #96]	@ (8002f20 <TIM_OC2_SetConfig+0xec>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d003      	beq.n	8002eca <TIM_OC2_SetConfig+0x96>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a17      	ldr	r2, [pc, #92]	@ (8002f24 <TIM_OC2_SetConfig+0xf0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d113      	bne.n	8002ef2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4a16      	ldr	r2, [pc, #88]	@ (8002f28 <TIM_OC2_SetConfig+0xf4>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4a15      	ldr	r2, [pc, #84]	@ (8002f2c <TIM_OC2_SetConfig+0xf8>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	621a      	str	r2, [r3, #32]
}
 8002f0c:	46c0      	nop			@ (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b006      	add	sp, #24
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	feff8fff 	.word	0xfeff8fff
 8002f18:	fffffcff 	.word	0xfffffcff
 8002f1c:	40012c00 	.word	0x40012c00
 8002f20:	40014400 	.word	0x40014400
 8002f24:	40014800 	.word	0x40014800
 8002f28:	fffffbff 	.word	0xfffffbff
 8002f2c:	fffff7ff 	.word	0xfffff7ff

08002f30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	4a31      	ldr	r2, [pc, #196]	@ (800300c <TIM_OC3_SetConfig+0xdc>)
 8002f46:	401a      	ands	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4a2d      	ldr	r2, [pc, #180]	@ (8003010 <TIM_OC3_SetConfig+0xe0>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2203      	movs	r2, #3
 8002f64:	4393      	bics	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	4a27      	ldr	r2, [pc, #156]	@ (8003014 <TIM_OC3_SetConfig+0xe4>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	021b      	lsls	r3, r3, #8
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a23      	ldr	r2, [pc, #140]	@ (8003018 <TIM_OC3_SetConfig+0xe8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d10d      	bne.n	8002faa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	4a22      	ldr	r2, [pc, #136]	@ (800301c <TIM_OC3_SetConfig+0xec>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	021b      	lsls	r3, r3, #8
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	4a1e      	ldr	r2, [pc, #120]	@ (8003020 <TIM_OC3_SetConfig+0xf0>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a1a      	ldr	r2, [pc, #104]	@ (8003018 <TIM_OC3_SetConfig+0xe8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d007      	beq.n	8002fc2 <TIM_OC3_SetConfig+0x92>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8003024 <TIM_OC3_SetConfig+0xf4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d003      	beq.n	8002fc2 <TIM_OC3_SetConfig+0x92>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a1a      	ldr	r2, [pc, #104]	@ (8003028 <TIM_OC3_SetConfig+0xf8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d113      	bne.n	8002fea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4a19      	ldr	r2, [pc, #100]	@ (800302c <TIM_OC3_SetConfig+0xfc>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4a18      	ldr	r2, [pc, #96]	@ (8003030 <TIM_OC3_SetConfig+0x100>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	621a      	str	r2, [r3, #32]
}
 8003004:	46c0      	nop			@ (mov r8, r8)
 8003006:	46bd      	mov	sp, r7
 8003008:	b006      	add	sp, #24
 800300a:	bd80      	pop	{r7, pc}
 800300c:	fffffeff 	.word	0xfffffeff
 8003010:	fffeff8f 	.word	0xfffeff8f
 8003014:	fffffdff 	.word	0xfffffdff
 8003018:	40012c00 	.word	0x40012c00
 800301c:	fffff7ff 	.word	0xfffff7ff
 8003020:	fffffbff 	.word	0xfffffbff
 8003024:	40014400 	.word	0x40014400
 8003028:	40014800 	.word	0x40014800
 800302c:	ffffefff 	.word	0xffffefff
 8003030:	ffffdfff 	.word	0xffffdfff

08003034 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	4a24      	ldr	r2, [pc, #144]	@ (80030dc <TIM_OC4_SetConfig+0xa8>)
 800304a:	401a      	ands	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4a20      	ldr	r2, [pc, #128]	@ (80030e0 <TIM_OC4_SetConfig+0xac>)
 8003060:	4013      	ands	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4a1f      	ldr	r2, [pc, #124]	@ (80030e4 <TIM_OC4_SetConfig+0xb0>)
 8003068:	4013      	ands	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4313      	orrs	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4a1b      	ldr	r2, [pc, #108]	@ (80030e8 <TIM_OC4_SetConfig+0xb4>)
 800307c:	4013      	ands	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	031b      	lsls	r3, r3, #12
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a17      	ldr	r2, [pc, #92]	@ (80030ec <TIM_OC4_SetConfig+0xb8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d007      	beq.n	80030a4 <TIM_OC4_SetConfig+0x70>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a16      	ldr	r2, [pc, #88]	@ (80030f0 <TIM_OC4_SetConfig+0xbc>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d003      	beq.n	80030a4 <TIM_OC4_SetConfig+0x70>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a15      	ldr	r2, [pc, #84]	@ (80030f4 <TIM_OC4_SetConfig+0xc0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d109      	bne.n	80030b8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	4a14      	ldr	r2, [pc, #80]	@ (80030f8 <TIM_OC4_SetConfig+0xc4>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	019b      	lsls	r3, r3, #6
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	621a      	str	r2, [r3, #32]
}
 80030d2:	46c0      	nop			@ (mov r8, r8)
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b006      	add	sp, #24
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	46c0      	nop			@ (mov r8, r8)
 80030dc:	ffffefff 	.word	0xffffefff
 80030e0:	feff8fff 	.word	0xfeff8fff
 80030e4:	fffffcff 	.word	0xfffffcff
 80030e8:	ffffdfff 	.word	0xffffdfff
 80030ec:	40012c00 	.word	0x40012c00
 80030f0:	40014400 	.word	0x40014400
 80030f4:	40014800 	.word	0x40014800
 80030f8:	ffffbfff 	.word	0xffffbfff

080030fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	4a21      	ldr	r2, [pc, #132]	@ (8003198 <TIM_OC5_SetConfig+0x9c>)
 8003112:	401a      	ands	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4a1d      	ldr	r2, [pc, #116]	@ (800319c <TIM_OC5_SetConfig+0xa0>)
 8003128:	4013      	ands	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4a19      	ldr	r2, [pc, #100]	@ (80031a0 <TIM_OC5_SetConfig+0xa4>)
 800313a:	4013      	ands	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	041b      	lsls	r3, r3, #16
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a15      	ldr	r2, [pc, #84]	@ (80031a4 <TIM_OC5_SetConfig+0xa8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d007      	beq.n	8003162 <TIM_OC5_SetConfig+0x66>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a14      	ldr	r2, [pc, #80]	@ (80031a8 <TIM_OC5_SetConfig+0xac>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d003      	beq.n	8003162 <TIM_OC5_SetConfig+0x66>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a13      	ldr	r2, [pc, #76]	@ (80031ac <TIM_OC5_SetConfig+0xb0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d109      	bne.n	8003176 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	4a0c      	ldr	r2, [pc, #48]	@ (8003198 <TIM_OC5_SetConfig+0x9c>)
 8003166:	4013      	ands	r3, r2
 8003168:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	4313      	orrs	r3, r2
 8003174:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	621a      	str	r2, [r3, #32]
}
 8003190:	46c0      	nop			@ (mov r8, r8)
 8003192:	46bd      	mov	sp, r7
 8003194:	b006      	add	sp, #24
 8003196:	bd80      	pop	{r7, pc}
 8003198:	fffeffff 	.word	0xfffeffff
 800319c:	fffeff8f 	.word	0xfffeff8f
 80031a0:	fffdffff 	.word	0xfffdffff
 80031a4:	40012c00 	.word	0x40012c00
 80031a8:	40014400 	.word	0x40014400
 80031ac:	40014800 	.word	0x40014800

080031b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	4a22      	ldr	r2, [pc, #136]	@ (8003250 <TIM_OC6_SetConfig+0xa0>)
 80031c6:	401a      	ands	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4a1e      	ldr	r2, [pc, #120]	@ (8003254 <TIM_OC6_SetConfig+0xa4>)
 80031dc:	4013      	ands	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4a1a      	ldr	r2, [pc, #104]	@ (8003258 <TIM_OC6_SetConfig+0xa8>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	051b      	lsls	r3, r3, #20
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a16      	ldr	r2, [pc, #88]	@ (800325c <TIM_OC6_SetConfig+0xac>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d007      	beq.n	8003218 <TIM_OC6_SetConfig+0x68>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a15      	ldr	r2, [pc, #84]	@ (8003260 <TIM_OC6_SetConfig+0xb0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d003      	beq.n	8003218 <TIM_OC6_SetConfig+0x68>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a14      	ldr	r2, [pc, #80]	@ (8003264 <TIM_OC6_SetConfig+0xb4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d109      	bne.n	800322c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	4a13      	ldr	r2, [pc, #76]	@ (8003268 <TIM_OC6_SetConfig+0xb8>)
 800321c:	4013      	ands	r3, r2
 800321e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	029b      	lsls	r3, r3, #10
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	621a      	str	r2, [r3, #32]
}
 8003246:	46c0      	nop			@ (mov r8, r8)
 8003248:	46bd      	mov	sp, r7
 800324a:	b006      	add	sp, #24
 800324c:	bd80      	pop	{r7, pc}
 800324e:	46c0      	nop			@ (mov r8, r8)
 8003250:	ffefffff 	.word	0xffefffff
 8003254:	feff8fff 	.word	0xfeff8fff
 8003258:	ffdfffff 	.word	0xffdfffff
 800325c:	40012c00 	.word	0x40012c00
 8003260:	40014400 	.word	0x40014400
 8003264:	40014800 	.word	0x40014800
 8003268:	fffbffff 	.word	0xfffbffff

0800326c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	2201      	movs	r2, #1
 8003284:	4393      	bics	r3, r2
 8003286:	001a      	movs	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	22f0      	movs	r2, #240	@ 0xf0
 8003296:	4393      	bics	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	220a      	movs	r2, #10
 80032a8:	4393      	bics	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	621a      	str	r2, [r3, #32]
}
 80032c0:	46c0      	nop			@ (mov r8, r8)
 80032c2:	46bd      	mov	sp, r7
 80032c4:	b006      	add	sp, #24
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	2210      	movs	r2, #16
 80032e0:	4393      	bics	r3, r2
 80032e2:	001a      	movs	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003328 <TIM_TI2_ConfigInputStage+0x60>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	031b      	lsls	r3, r3, #12
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	22a0      	movs	r2, #160	@ 0xa0
 8003304:	4393      	bics	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	621a      	str	r2, [r3, #32]
}
 800331e:	46c0      	nop			@ (mov r8, r8)
 8003320:	46bd      	mov	sp, r7
 8003322:	b006      	add	sp, #24
 8003324:	bd80      	pop	{r7, pc}
 8003326:	46c0      	nop			@ (mov r8, r8)
 8003328:	ffff0fff 	.word	0xffff0fff

0800332c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4a08      	ldr	r2, [pc, #32]	@ (8003360 <TIM_ITRx_SetConfig+0x34>)
 8003340:	4013      	ands	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4313      	orrs	r3, r2
 800334a:	2207      	movs	r2, #7
 800334c:	4313      	orrs	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	609a      	str	r2, [r3, #8]
}
 8003356:	46c0      	nop			@ (mov r8, r8)
 8003358:	46bd      	mov	sp, r7
 800335a:	b004      	add	sp, #16
 800335c:	bd80      	pop	{r7, pc}
 800335e:	46c0      	nop			@ (mov r8, r8)
 8003360:	ffcfff8f 	.word	0xffcfff8f

08003364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	4a09      	ldr	r2, [pc, #36]	@ (80033a0 <TIM_ETR_SetConfig+0x3c>)
 800337c:	4013      	ands	r3, r2
 800337e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	021a      	lsls	r2, r3, #8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	431a      	orrs	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	4313      	orrs	r3, r2
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	609a      	str	r2, [r3, #8]
}
 8003398:	46c0      	nop			@ (mov r8, r8)
 800339a:	46bd      	mov	sp, r7
 800339c:	b006      	add	sp, #24
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	ffff00ff 	.word	0xffff00ff

080033a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	221f      	movs	r2, #31
 80033b4:	4013      	ands	r3, r2
 80033b6:	2201      	movs	r2, #1
 80033b8:	409a      	lsls	r2, r3
 80033ba:	0013      	movs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	43d2      	mvns	r2, r2
 80033c6:	401a      	ands	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a1a      	ldr	r2, [r3, #32]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	211f      	movs	r1, #31
 80033d4:	400b      	ands	r3, r1
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4099      	lsls	r1, r3
 80033da:	000b      	movs	r3, r1
 80033dc:	431a      	orrs	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	621a      	str	r2, [r3, #32]
}
 80033e2:	46c0      	nop			@ (mov r8, r8)
 80033e4:	46bd      	mov	sp, r7
 80033e6:	b006      	add	sp, #24
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	223c      	movs	r2, #60	@ 0x3c
 80033fa:	5c9b      	ldrb	r3, [r3, r2]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003400:	2302      	movs	r3, #2
 8003402:	e04a      	b.n	800349a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	223c      	movs	r2, #60	@ 0x3c
 8003408:	2101      	movs	r1, #1
 800340a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	223d      	movs	r2, #61	@ 0x3d
 8003410:	2102      	movs	r1, #2
 8003412:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a1e      	ldr	r2, [pc, #120]	@ (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d108      	bne.n	8003440 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4a1d      	ldr	r2, [pc, #116]	@ (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003432:	4013      	ands	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2270      	movs	r2, #112	@ 0x70
 8003444:	4393      	bics	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a11      	ldr	r2, [pc, #68]	@ (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d004      	beq.n	800346e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a10      	ldr	r2, [pc, #64]	@ (80034ac <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d10c      	bne.n	8003488 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2280      	movs	r2, #128	@ 0x80
 8003472:	4393      	bics	r3, r2
 8003474:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	4313      	orrs	r3, r2
 800347e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	223d      	movs	r2, #61	@ 0x3d
 800348c:	2101      	movs	r1, #1
 800348e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	223c      	movs	r2, #60	@ 0x3c
 8003494:	2100      	movs	r1, #0
 8003496:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	0018      	movs	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	b004      	add	sp, #16
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			@ (mov r8, r8)
 80034a4:	40012c00 	.word	0x40012c00
 80034a8:	ff0fffff 	.word	0xff0fffff
 80034ac:	40000400 	.word	0x40000400

080034b0 <memset>:
 80034b0:	0003      	movs	r3, r0
 80034b2:	1882      	adds	r2, r0, r2
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d100      	bne.n	80034ba <memset+0xa>
 80034b8:	4770      	bx	lr
 80034ba:	7019      	strb	r1, [r3, #0]
 80034bc:	3301      	adds	r3, #1
 80034be:	e7f9      	b.n	80034b4 <memset+0x4>

080034c0 <__libc_init_array>:
 80034c0:	b570      	push	{r4, r5, r6, lr}
 80034c2:	2600      	movs	r6, #0
 80034c4:	4c0c      	ldr	r4, [pc, #48]	@ (80034f8 <__libc_init_array+0x38>)
 80034c6:	4d0d      	ldr	r5, [pc, #52]	@ (80034fc <__libc_init_array+0x3c>)
 80034c8:	1b64      	subs	r4, r4, r5
 80034ca:	10a4      	asrs	r4, r4, #2
 80034cc:	42a6      	cmp	r6, r4
 80034ce:	d109      	bne.n	80034e4 <__libc_init_array+0x24>
 80034d0:	2600      	movs	r6, #0
 80034d2:	f000 f819 	bl	8003508 <_init>
 80034d6:	4c0a      	ldr	r4, [pc, #40]	@ (8003500 <__libc_init_array+0x40>)
 80034d8:	4d0a      	ldr	r5, [pc, #40]	@ (8003504 <__libc_init_array+0x44>)
 80034da:	1b64      	subs	r4, r4, r5
 80034dc:	10a4      	asrs	r4, r4, #2
 80034de:	42a6      	cmp	r6, r4
 80034e0:	d105      	bne.n	80034ee <__libc_init_array+0x2e>
 80034e2:	bd70      	pop	{r4, r5, r6, pc}
 80034e4:	00b3      	lsls	r3, r6, #2
 80034e6:	58eb      	ldr	r3, [r5, r3]
 80034e8:	4798      	blx	r3
 80034ea:	3601      	adds	r6, #1
 80034ec:	e7ee      	b.n	80034cc <__libc_init_array+0xc>
 80034ee:	00b3      	lsls	r3, r6, #2
 80034f0:	58eb      	ldr	r3, [r5, r3]
 80034f2:	4798      	blx	r3
 80034f4:	3601      	adds	r6, #1
 80034f6:	e7f2      	b.n	80034de <__libc_init_array+0x1e>
 80034f8:	080035c0 	.word	0x080035c0
 80034fc:	080035c0 	.word	0x080035c0
 8003500:	080035c8 	.word	0x080035c8
 8003504:	080035c0 	.word	0x080035c0

08003508 <_init>:
 8003508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350a:	46c0      	nop			@ (mov r8, r8)
 800350c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350e:	bc08      	pop	{r3}
 8003510:	469e      	mov	lr, r3
 8003512:	4770      	bx	lr

08003514 <_fini>:
 8003514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003516:	46c0      	nop			@ (mov r8, r8)
 8003518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800351a:	bc08      	pop	{r3}
 800351c:	469e      	mov	lr, r3
 800351e:	4770      	bx	lr
