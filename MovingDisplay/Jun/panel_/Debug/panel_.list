
panel_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003204  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080032bc  080032bc  000042bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003350  08003350  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003350  08003350  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003350  08003350  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003350  08003350  00004350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003358  08003358  00004358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800335c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  2000000c  08003368  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08003368  00005418  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4c1  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc5  00000000  00000000  0000f4f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  000112c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000890  00000000  00000000  00011dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001532a  00000000  00000000  00012660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c746  00000000  00000000  0002798a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008130f  00000000  00000000  000340d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b53df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002760  00000000  00000000  000b5424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000b7b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080032a4 	.word	0x080032a4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080032a4 	.word	0x080032a4

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	Neopixel.do_forwardRewrite();
 8000220:	4b03      	ldr	r3, [pc, #12]	@ (8000230 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x18>)
 8000222:	0018      	movs	r0, r3
 8000224:	f000 fb5c 	bl	80008e0 <_ZN6WS281217do_forwardRewriteEv>
}
 8000228:	46c0      	nop			@ (mov r8, r8)
 800022a:	46bd      	mov	sp, r7
 800022c:	b002      	add	sp, #8
 800022e:	bd80      	pop	{r7, pc}
 8000230:	200000d0 	.word	0x200000d0

08000234 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	Neopixel.do_backRewrite();
 800023c:	4b03      	ldr	r3, [pc, #12]	@ (800024c <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 800023e:	0018      	movs	r0, r3
 8000240:	f000 fbf8 	bl	8000a34 <_ZN6WS281214do_backRewriteEv>
}
 8000244:	46c0      	nop			@ (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	200000d0 	.word	0x200000d0

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000256:	f000 fcd1 	bl	8000bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025a:	f000 f81d 	bl	8000298 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025e:	f000 f901 	bl	8000464 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000262:	f000 f8e1 	bl	8000428 <_ZL11MX_DMA_Initv>
  MX_TIM3_Init();
 8000266:	f000 f873 	bl	8000350 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  Neopixel.clear();
 800026a:	4b0a      	ldr	r3, [pc, #40]	@ (8000294 <main+0x44>)
 800026c:	0018      	movs	r0, r3
 800026e:	f000 fad1 	bl	8000814 <_ZN6WS28125clearEv>
	  Neopixel.set_rgb(3, 10, 33, 80);
 8000272:	4808      	ldr	r0, [pc, #32]	@ (8000294 <main+0x44>)
 8000274:	2350      	movs	r3, #80	@ 0x50
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	2321      	movs	r3, #33	@ 0x21
 800027a:	220a      	movs	r2, #10
 800027c:	2103      	movs	r1, #3
 800027e:	f000 faf8 	bl	8000872 <_ZN6WS28127set_rgbEhhhh>
	  Neopixel.show();
 8000282:	4b04      	ldr	r3, [pc, #16]	@ (8000294 <main+0x44>)
 8000284:	0018      	movs	r0, r3
 8000286:	f000 fa3d 	bl	8000704 <_ZN6WS28124showEv>
	  HAL_Delay(100);
 800028a:	2064      	movs	r0, #100	@ 0x64
 800028c:	f000 fd3c 	bl	8000d08 <HAL_Delay>
	  Neopixel.clear();
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	e7ea      	b.n	800026a <main+0x1a>
 8000294:	200000d0 	.word	0x200000d0

08000298 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b590      	push	{r4, r7, lr}
 800029a:	b093      	sub	sp, #76	@ 0x4c
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	2414      	movs	r4, #20
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	0018      	movs	r0, r3
 80002a4:	2334      	movs	r3, #52	@ 0x34
 80002a6:	001a      	movs	r2, r3
 80002a8:	2100      	movs	r1, #0
 80002aa:	f002 ffcf 	bl	800324c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	0018      	movs	r0, r3
 80002b2:	2310      	movs	r3, #16
 80002b4:	001a      	movs	r2, r3
 80002b6:	2100      	movs	r1, #0
 80002b8:	f002 ffc8 	bl	800324c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002bc:	2380      	movs	r3, #128	@ 0x80
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	0018      	movs	r0, r3
 80002c2:	f001 fa43 	bl	800174c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002c6:	193b      	adds	r3, r7, r4
 80002c8:	2201      	movs	r2, #1
 80002ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	22a0      	movs	r2, #160	@ 0xa0
 80002d0:	02d2      	lsls	r2, r2, #11
 80002d2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d4:	0021      	movs	r1, r4
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2202      	movs	r2, #2
 80002da:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2203      	movs	r2, #3
 80002e0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2200      	movs	r2, #0
 80002e6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 9;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2209      	movs	r2, #9
 80002ec:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2280      	movs	r2, #128	@ 0x80
 80002f2:	0292      	lsls	r2, r2, #10
 80002f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2280      	movs	r2, #128	@ 0x80
 80002fa:	05d2      	lsls	r2, r2, #23
 80002fc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	0018      	movs	r0, r3
 8000302:	f001 fa63 	bl	80017cc <HAL_RCC_OscConfig>
 8000306:	0003      	movs	r3, r0
 8000308:	1e5a      	subs	r2, r3, #1
 800030a:	4193      	sbcs	r3, r2
 800030c:	b2db      	uxtb	r3, r3
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <_Z18SystemClock_Configv+0x7e>
  {
    Error_Handler();
 8000312:	f000 f8c9 	bl	80004a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2207      	movs	r2, #7
 800031a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2202      	movs	r2, #2
 8000320:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2101      	movs	r1, #1
 8000332:	0018      	movs	r0, r3
 8000334:	f001 fd5a 	bl	8001dec <HAL_RCC_ClockConfig>
 8000338:	0003      	movs	r3, r0
 800033a:	1e5a      	subs	r2, r3, #1
 800033c:	4193      	sbcs	r3, r2
 800033e:	b2db      	uxtb	r3, r3
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
 8000344:	f000 f8b0 	bl	80004a8 <Error_Handler>
  }
}
 8000348:	46c0      	nop			@ (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	b013      	add	sp, #76	@ 0x4c
 800034e:	bd90      	pop	{r4, r7, pc}

08000350 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b08a      	sub	sp, #40	@ 0x28
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000356:	231c      	movs	r3, #28
 8000358:	18fb      	adds	r3, r7, r3
 800035a:	0018      	movs	r0, r3
 800035c:	230c      	movs	r3, #12
 800035e:	001a      	movs	r2, r3
 8000360:	2100      	movs	r1, #0
 8000362:	f002 ff73 	bl	800324c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000366:	003b      	movs	r3, r7
 8000368:	0018      	movs	r0, r3
 800036a:	231c      	movs	r3, #28
 800036c:	001a      	movs	r2, r3
 800036e:	2100      	movs	r1, #0
 8000370:	f002 ff6c 	bl	800324c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000374:	4b2a      	ldr	r3, [pc, #168]	@ (8000420 <_ZL12MX_TIM3_Initv+0xd0>)
 8000376:	4a2b      	ldr	r2, [pc, #172]	@ (8000424 <_ZL12MX_TIM3_Initv+0xd4>)
 8000378:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 800037a:	4b29      	ldr	r3, [pc, #164]	@ (8000420 <_ZL12MX_TIM3_Initv+0xd0>)
 800037c:	2203      	movs	r2, #3
 800037e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000380:	4b27      	ldr	r3, [pc, #156]	@ (8000420 <_ZL12MX_TIM3_Initv+0xd0>)
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15-1;
 8000386:	4b26      	ldr	r3, [pc, #152]	@ (8000420 <_ZL12MX_TIM3_Initv+0xd0>)
 8000388:	220e      	movs	r2, #14
 800038a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800038c:	4b24      	ldr	r3, [pc, #144]	@ (8000420 <_ZL12MX_TIM3_Initv+0xd0>)
 800038e:	2200      	movs	r2, #0
 8000390:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000392:	4b23      	ldr	r3, [pc, #140]	@ (8000420 <_ZL12MX_TIM3_Initv+0xd0>)
 8000394:	2200      	movs	r2, #0
 8000396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000398:	4b21      	ldr	r3, [pc, #132]	@ (8000420 <_ZL12MX_TIM3_Initv+0xd0>)
 800039a:	0018      	movs	r0, r3
 800039c:	f001 feae 	bl	80020fc <HAL_TIM_PWM_Init>
 80003a0:	0003      	movs	r3, r0
 80003a2:	1e5a      	subs	r2, r3, #1
 80003a4:	4193      	sbcs	r3, r2
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <_ZL12MX_TIM3_Initv+0x60>
  {
    Error_Handler();
 80003ac:	f000 f87c 	bl	80004a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003b0:	211c      	movs	r1, #28
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b8:	187b      	adds	r3, r7, r1
 80003ba:	2200      	movs	r2, #0
 80003bc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003be:	187a      	adds	r2, r7, r1
 80003c0:	4b17      	ldr	r3, [pc, #92]	@ (8000420 <_ZL12MX_TIM3_Initv+0xd0>)
 80003c2:	0011      	movs	r1, r2
 80003c4:	0018      	movs	r0, r3
 80003c6:	f002 fedf 	bl	8003188 <HAL_TIMEx_MasterConfigSynchronization>
 80003ca:	0003      	movs	r3, r0
 80003cc:	1e5a      	subs	r2, r3, #1
 80003ce:	4193      	sbcs	r3, r2
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 80003d6:	f000 f867 	bl	80004a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003da:	003b      	movs	r3, r7
 80003dc:	2260      	movs	r2, #96	@ 0x60
 80003de:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80003e0:	003b      	movs	r3, r7
 80003e2:	2200      	movs	r2, #0
 80003e4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003e6:	003b      	movs	r3, r7
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003ec:	003b      	movs	r3, r7
 80003ee:	2200      	movs	r2, #0
 80003f0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003f2:	0039      	movs	r1, r7
 80003f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000420 <_ZL12MX_TIM3_Initv+0xd0>)
 80003f6:	2204      	movs	r2, #4
 80003f8:	0018      	movs	r0, r3
 80003fa:	f002 f9af 	bl	800275c <HAL_TIM_PWM_ConfigChannel>
 80003fe:	0003      	movs	r3, r0
 8000400:	1e5a      	subs	r2, r3, #1
 8000402:	4193      	sbcs	r3, r2
 8000404:	b2db      	uxtb	r3, r3
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <_ZL12MX_TIM3_Initv+0xbe>
  {
    Error_Handler();
 800040a:	f000 f84d 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800040e:	4b04      	ldr	r3, [pc, #16]	@ (8000420 <_ZL12MX_TIM3_Initv+0xd0>)
 8000410:	0018      	movs	r0, r3
 8000412:	f000 f8e9 	bl	80005e8 <HAL_TIM_MspPostInit>

}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	b00a      	add	sp, #40	@ 0x28
 800041c:	bd80      	pop	{r7, pc}
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	20000028 	.word	0x20000028
 8000424:	40000400 	.word	0x40000400

08000428 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800042e:	4b0c      	ldr	r3, [pc, #48]	@ (8000460 <_ZL11MX_DMA_Initv+0x38>)
 8000430:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000432:	4b0b      	ldr	r3, [pc, #44]	@ (8000460 <_ZL11MX_DMA_Initv+0x38>)
 8000434:	2101      	movs	r1, #1
 8000436:	430a      	orrs	r2, r1
 8000438:	639a      	str	r2, [r3, #56]	@ 0x38
 800043a:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <_ZL11MX_DMA_Initv+0x38>)
 800043c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800043e:	2201      	movs	r2, #1
 8000440:	4013      	ands	r3, r2
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	2100      	movs	r1, #0
 800044a:	2009      	movs	r0, #9
 800044c:	f000 fd2c 	bl	8000ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000450:	2009      	movs	r0, #9
 8000452:	f000 fd3e 	bl	8000ed2 <HAL_NVIC_EnableIRQ>

}
 8000456:	46c0      	nop			@ (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	b002      	add	sp, #8
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	40021000 	.word	0x40021000

08000464 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046a:	4b0e      	ldr	r3, [pc, #56]	@ (80004a4 <_ZL12MX_GPIO_Initv+0x40>)
 800046c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800046e:	4b0d      	ldr	r3, [pc, #52]	@ (80004a4 <_ZL12MX_GPIO_Initv+0x40>)
 8000470:	2104      	movs	r1, #4
 8000472:	430a      	orrs	r2, r1
 8000474:	635a      	str	r2, [r3, #52]	@ 0x34
 8000476:	4b0b      	ldr	r3, [pc, #44]	@ (80004a4 <_ZL12MX_GPIO_Initv+0x40>)
 8000478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800047a:	2204      	movs	r2, #4
 800047c:	4013      	ands	r3, r2
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000482:	4b08      	ldr	r3, [pc, #32]	@ (80004a4 <_ZL12MX_GPIO_Initv+0x40>)
 8000484:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000486:	4b07      	ldr	r3, [pc, #28]	@ (80004a4 <_ZL12MX_GPIO_Initv+0x40>)
 8000488:	2101      	movs	r1, #1
 800048a:	430a      	orrs	r2, r1
 800048c:	635a      	str	r2, [r3, #52]	@ 0x34
 800048e:	4b05      	ldr	r3, [pc, #20]	@ (80004a4 <_ZL12MX_GPIO_Initv+0x40>)
 8000490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000492:	2201      	movs	r2, #1
 8000494:	4013      	ands	r3, r2
 8000496:	603b      	str	r3, [r7, #0]
 8000498:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800049a:	46c0      	nop			@ (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	b002      	add	sp, #8
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	40021000 	.word	0x40021000

080004a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ac:	b672      	cpsid	i
}
 80004ae:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b0:	46c0      	nop			@ (mov r8, r8)
 80004b2:	e7fd      	b.n	80004b0 <Error_Handler+0x8>

080004b4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d109      	bne.n	80004d8 <_Z41__static_initialization_and_destruction_0ii+0x24>
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	4a06      	ldr	r2, [pc, #24]	@ (80004e0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d105      	bne.n	80004d8 <_Z41__static_initialization_and_destruction_0ii+0x24>
WS2812 Neopixel(&htim3, TIM_CHANNEL_2, &hdma_tim3_ch2);
 80004cc:	4b05      	ldr	r3, [pc, #20]	@ (80004e4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80004ce:	4906      	ldr	r1, [pc, #24]	@ (80004e8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80004d0:	4806      	ldr	r0, [pc, #24]	@ (80004ec <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80004d2:	2204      	movs	r2, #4
 80004d4:	f000 f8f0 	bl	80006b8 <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
}
 80004d8:	46c0      	nop			@ (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	b002      	add	sp, #8
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	0000ffff 	.word	0x0000ffff
 80004e4:	20000074 	.word	0x20000074
 80004e8:	20000028 	.word	0x20000028
 80004ec:	200000d0 	.word	0x200000d0

080004f0 <_GLOBAL__sub_I_htim3>:
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	4b03      	ldr	r3, [pc, #12]	@ (8000504 <_GLOBAL__sub_I_htim3+0x14>)
 80004f6:	0019      	movs	r1, r3
 80004f8:	2001      	movs	r0, #1
 80004fa:	f7ff ffdb 	bl	80004b4 <_Z41__static_initialization_and_destruction_0ii>
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)
 8000504:	0000ffff 	.word	0x0000ffff

08000508 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050e:	4b0f      	ldr	r3, [pc, #60]	@ (800054c <HAL_MspInit+0x44>)
 8000510:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000512:	4b0e      	ldr	r3, [pc, #56]	@ (800054c <HAL_MspInit+0x44>)
 8000514:	2101      	movs	r1, #1
 8000516:	430a      	orrs	r2, r1
 8000518:	641a      	str	r2, [r3, #64]	@ 0x40
 800051a:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <HAL_MspInit+0x44>)
 800051c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800051e:	2201      	movs	r2, #1
 8000520:	4013      	ands	r3, r2
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000526:	4b09      	ldr	r3, [pc, #36]	@ (800054c <HAL_MspInit+0x44>)
 8000528:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800052a:	4b08      	ldr	r3, [pc, #32]	@ (800054c <HAL_MspInit+0x44>)
 800052c:	2180      	movs	r1, #128	@ 0x80
 800052e:	0549      	lsls	r1, r1, #21
 8000530:	430a      	orrs	r2, r1
 8000532:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000534:	4b05      	ldr	r3, [pc, #20]	@ (800054c <HAL_MspInit+0x44>)
 8000536:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000538:	2380      	movs	r3, #128	@ 0x80
 800053a:	055b      	lsls	r3, r3, #21
 800053c:	4013      	ands	r3, r2
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000542:	46c0      	nop			@ (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	b002      	add	sp, #8
 8000548:	bd80      	pop	{r7, pc}
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	40021000 	.word	0x40021000

08000550 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a1e      	ldr	r2, [pc, #120]	@ (80005d8 <HAL_TIM_PWM_MspInit+0x88>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d135      	bne.n	80005ce <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000562:	4b1e      	ldr	r3, [pc, #120]	@ (80005dc <HAL_TIM_PWM_MspInit+0x8c>)
 8000564:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000566:	4b1d      	ldr	r3, [pc, #116]	@ (80005dc <HAL_TIM_PWM_MspInit+0x8c>)
 8000568:	2102      	movs	r1, #2
 800056a:	430a      	orrs	r2, r1
 800056c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800056e:	4b1b      	ldr	r3, [pc, #108]	@ (80005dc <HAL_TIM_PWM_MspInit+0x8c>)
 8000570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000572:	2202      	movs	r2, #2
 8000574:	4013      	ands	r3, r2
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Channel1;
 800057a:	4b19      	ldr	r3, [pc, #100]	@ (80005e0 <HAL_TIM_PWM_MspInit+0x90>)
 800057c:	4a19      	ldr	r2, [pc, #100]	@ (80005e4 <HAL_TIM_PWM_MspInit+0x94>)
 800057e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8000580:	4b17      	ldr	r3, [pc, #92]	@ (80005e0 <HAL_TIM_PWM_MspInit+0x90>)
 8000582:	2221      	movs	r2, #33	@ 0x21
 8000584:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000586:	4b16      	ldr	r3, [pc, #88]	@ (80005e0 <HAL_TIM_PWM_MspInit+0x90>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800058c:	4b14      	ldr	r3, [pc, #80]	@ (80005e0 <HAL_TIM_PWM_MspInit+0x90>)
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000592:	4b13      	ldr	r3, [pc, #76]	@ (80005e0 <HAL_TIM_PWM_MspInit+0x90>)
 8000594:	2280      	movs	r2, #128	@ 0x80
 8000596:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000598:	4b11      	ldr	r3, [pc, #68]	@ (80005e0 <HAL_TIM_PWM_MspInit+0x90>)
 800059a:	2280      	movs	r2, #128	@ 0x80
 800059c:	0092      	lsls	r2, r2, #2
 800059e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	@ (80005e0 <HAL_TIM_PWM_MspInit+0x90>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <HAL_TIM_PWM_MspInit+0x90>)
 80005a8:	2220      	movs	r2, #32
 80005aa:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	@ (80005e0 <HAL_TIM_PWM_MspInit+0x90>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80005b2:	4b0b      	ldr	r3, [pc, #44]	@ (80005e0 <HAL_TIM_PWM_MspInit+0x90>)
 80005b4:	0018      	movs	r0, r3
 80005b6:	f000 fca9 	bl	8000f0c <HAL_DMA_Init>
 80005ba:	1e03      	subs	r3, r0, #0
 80005bc:	d001      	beq.n	80005c2 <HAL_TIM_PWM_MspInit+0x72>
    {
      Error_Handler();
 80005be:	f7ff ff73 	bl	80004a8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a06      	ldr	r2, [pc, #24]	@ (80005e0 <HAL_TIM_PWM_MspInit+0x90>)
 80005c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80005c8:	4b05      	ldr	r3, [pc, #20]	@ (80005e0 <HAL_TIM_PWM_MspInit+0x90>)
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b004      	add	sp, #16
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	46c0      	nop			@ (mov r8, r8)
 80005d8:	40000400 	.word	0x40000400
 80005dc:	40021000 	.word	0x40021000
 80005e0:	20000074 	.word	0x20000074
 80005e4:	40020008 	.word	0x40020008

080005e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b089      	sub	sp, #36	@ 0x24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	240c      	movs	r4, #12
 80005f2:	193b      	adds	r3, r7, r4
 80005f4:	0018      	movs	r0, r3
 80005f6:	2314      	movs	r3, #20
 80005f8:	001a      	movs	r2, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	f002 fe26 	bl	800324c <memset>
  if(htim->Instance==TIM3)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a14      	ldr	r2, [pc, #80]	@ (8000658 <HAL_TIM_MspPostInit+0x70>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d122      	bne.n	8000650 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b14      	ldr	r3, [pc, #80]	@ (800065c <HAL_TIM_MspPostInit+0x74>)
 800060c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800060e:	4b13      	ldr	r3, [pc, #76]	@ (800065c <HAL_TIM_MspPostInit+0x74>)
 8000610:	2101      	movs	r1, #1
 8000612:	430a      	orrs	r2, r1
 8000614:	635a      	str	r2, [r3, #52]	@ 0x34
 8000616:	4b11      	ldr	r3, [pc, #68]	@ (800065c <HAL_TIM_MspPostInit+0x74>)
 8000618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800061a:	2201      	movs	r2, #1
 800061c:	4013      	ands	r3, r2
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000622:	0021      	movs	r1, r4
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2280      	movs	r2, #128	@ 0x80
 8000628:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2202      	movs	r2, #2
 800062e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2201      	movs	r2, #1
 8000640:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000642:	187a      	adds	r2, r7, r1
 8000644:	23a0      	movs	r3, #160	@ 0xa0
 8000646:	05db      	lsls	r3, r3, #23
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f000 ff1a 	bl	8001484 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000650:	46c0      	nop			@ (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	b009      	add	sp, #36	@ 0x24
 8000656:	bd90      	pop	{r4, r7, pc}
 8000658:	40000400 	.word	0x40000400
 800065c:	40021000 	.word	0x40021000

08000660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000664:	46c0      	nop			@ (mov r8, r8)
 8000666:	e7fd      	b.n	8000664 <NMI_Handler+0x4>

08000668 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066c:	46c0      	nop			@ (mov r8, r8)
 800066e:	e7fd      	b.n	800066c <HardFault_Handler+0x4>

08000670 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000674:	46c0      	nop			@ (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000688:	f000 fb22 	bl	8000cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800068c:	46c0      	nop			@ (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8000698:	4b03      	ldr	r3, [pc, #12]	@ (80006a8 <DMA1_Channel1_IRQHandler+0x14>)
 800069a:	0018      	movs	r0, r3
 800069c:	f000 fdb0 	bl	8001200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006a0:	46c0      	nop			@ (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			@ (mov r8, r8)
 80006a8:	20000074 	.word	0x20000074

080006ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b0:	46c0      	nop			@ (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>:
 *      Author: jumpei
 */

#include "ws2812.h"

WS2812::WS2812(TIM_HandleTypeDef* htim, uint32_t tim_channel_x, DMA_HandleTypeDef* hdma){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000700 <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef+0x48>)
 80006ca:	189b      	adds	r3, r3, r2
 80006cc:	2230      	movs	r2, #48	@ 0x30
 80006ce:	2100      	movs	r1, #0
 80006d0:	0018      	movs	r0, r3
 80006d2:	f002 fdbb 	bl	800324c <memset>
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	23d0      	movs	r3, #208	@ 0xd0
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	2100      	movs	r1, #0
 80006de:	50d1      	str	r1, [r2, r3]
    HTIM = htim;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	605a      	str	r2, [r3, #4]
    TIM_CHANNEL_X = tim_channel_x;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	701a      	strb	r2, [r3, #0]
    HDMA =hdma;
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	609a      	str	r2, [r3, #8]
}
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	0018      	movs	r0, r3
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b004      	add	sp, #16
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			@ (mov r8, r8)
 8000700:	0000030f 	.word	0x0000030f

08000704 <_ZN6WS28124showEv>:


void WS2812::show(){
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
    if(wr_buf_p != 0 || HDMA->State != HAL_DMA_STATE_READY){
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	23d0      	movs	r3, #208	@ 0xd0
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	58d3      	ldr	r3, [r2, r3]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d106      	bne.n	8000726 <_ZN6WS28124showEv+0x22>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	2225      	movs	r2, #37	@ 0x25
 800071e:	5c9b      	ldrb	r3, [r3, r2]
 8000720:	b2db      	uxtb	r3, r3
 8000722:	2b01      	cmp	r3, #1
 8000724:	d001      	beq.n	800072a <_ZN6WS28124showEv+0x26>
 8000726:	2301      	movs	r3, #1
 8000728:	e000      	b.n	800072c <_ZN6WS28124showEv+0x28>
 800072a:	2300      	movs	r3, #0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d025      	beq.n	800077c <_ZN6WS28124showEv+0x78>
        HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	685a      	ldr	r2, [r3, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	0019      	movs	r1, r3
 800073a:	0010      	movs	r0, r2
 800073c:	f001 ff24 	bl	8002588 <HAL_TIM_PWM_Stop_DMA>
        wr_buf_p = 0;
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	23d0      	movs	r3, #208	@ 0xd0
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	2100      	movs	r1, #0
 8000748:	50d1      	str	r1, [r2, r3]
        for(uint8_t i=0; i <48; i++){wr_buf[i] = 0;}
 800074a:	230f      	movs	r3, #15
 800074c:	18fb      	adds	r3, r7, r3
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
 8000752:	e00d      	b.n	8000770 <_ZN6WS28124showEv+0x6c>
 8000754:	200f      	movs	r0, #15
 8000756:	183b      	adds	r3, r7, r0
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	492c      	ldr	r1, [pc, #176]	@ (8000810 <_ZN6WS28124showEv+0x10c>)
 800075e:	18d3      	adds	r3, r2, r3
 8000760:	185b      	adds	r3, r3, r1
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
 8000766:	183b      	adds	r3, r7, r0
 8000768:	781a      	ldrb	r2, [r3, #0]
 800076a:	183b      	adds	r3, r7, r0
 800076c:	3201      	adds	r2, #1
 800076e:	701a      	strb	r2, [r3, #0]
 8000770:	230f      	movs	r3, #15
 8000772:	18fb      	adds	r3, r7, r3
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b2f      	cmp	r3, #47	@ 0x2f
 8000778:	d9ec      	bls.n	8000754 <_ZN6WS28124showEv+0x50>
        return;
 800077a:	e045      	b.n	8000808 <_ZN6WS28124showEv+0x104>
    }
    for(uint_fast8_t i = 0; i < 8; i++){
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	e031      	b.n	80007e6 <_ZN6WS28124showEv+0xe2>
        wr_buf[i   ] = 0;
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	4922      	ldr	r1, [pc, #136]	@ (8000810 <_ZN6WS28124showEv+0x10c>)
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	18d3      	adds	r3, r2, r3
 800078a:	185b      	adds	r3, r3, r1
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
        wr_buf[i+ 8] = 0;
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	3308      	adds	r3, #8
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	491e      	ldr	r1, [pc, #120]	@ (8000810 <_ZN6WS28124showEv+0x10c>)
 8000798:	18d3      	adds	r3, r2, r3
 800079a:	185b      	adds	r3, r3, r1
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
        wr_buf[i+16] = 0;
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	3310      	adds	r3, #16
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	491a      	ldr	r1, [pc, #104]	@ (8000810 <_ZN6WS28124showEv+0x10c>)
 80007a8:	18d3      	adds	r3, r2, r3
 80007aa:	185b      	adds	r3, r3, r1
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]

        wr_buf[i+24] = 0;
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	3318      	adds	r3, #24
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	4916      	ldr	r1, [pc, #88]	@ (8000810 <_ZN6WS28124showEv+0x10c>)
 80007b8:	18d3      	adds	r3, r2, r3
 80007ba:	185b      	adds	r3, r3, r1
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
        wr_buf[i+32] = 0;
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	3320      	adds	r3, #32
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	4912      	ldr	r1, [pc, #72]	@ (8000810 <_ZN6WS28124showEv+0x10c>)
 80007c8:	18d3      	adds	r3, r2, r3
 80007ca:	185b      	adds	r3, r3, r1
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
        wr_buf[i+40] = 0;
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	3328      	adds	r3, #40	@ 0x28
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	490e      	ldr	r1, [pc, #56]	@ (8000810 <_ZN6WS28124showEv+0x10c>)
 80007d8:	18d3      	adds	r3, r2, r3
 80007da:	185b      	adds	r3, r3, r1
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
    for(uint_fast8_t i = 0; i < 8; i++){
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	3301      	adds	r3, #1
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	2b07      	cmp	r3, #7
 80007ea:	d9ca      	bls.n	8000782 <_ZN6WS28124showEv+0x7e>
    }
    HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, (uint32_t *)wr_buf, 48);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6858      	ldr	r0, [r3, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	0019      	movs	r1, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a05      	ldr	r2, [pc, #20]	@ (8000810 <_ZN6WS28124showEv+0x10c>)
 80007fa:	189a      	adds	r2, r3, r2
 80007fc:	2330      	movs	r3, #48	@ 0x30
 80007fe:	f001 fcd5 	bl	80021ac <HAL_TIM_PWM_Start_DMA>
    HAL_Delay(8);
 8000802:	2008      	movs	r0, #8
 8000804:	f000 fa80 	bl	8000d08 <HAL_Delay>
}
 8000808:	46bd      	mov	sp, r7
 800080a:	b004      	add	sp, #16
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	0000030f 	.word	0x0000030f

08000814 <_ZN6WS28125clearEv>:

void WS2812::clear(){
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
    for(int i=0; i<NUM_PIXELS; i++){
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	e01d      	b.n	800085e <_ZN6WS28125clearEv+0x4a>
        rgb_buf[i][0]=0;
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	0013      	movs	r3, r2
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	189b      	adds	r3, r3, r2
 800082c:	18cb      	adds	r3, r1, r3
 800082e:	330c      	adds	r3, #12
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
        rgb_buf[i][1]=0;
 8000834:	6879      	ldr	r1, [r7, #4]
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	0013      	movs	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	189b      	adds	r3, r3, r2
 800083e:	18cb      	adds	r3, r1, r3
 8000840:	330d      	adds	r3, #13
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
        rgb_buf[i][2]=0;
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	68fa      	ldr	r2, [r7, #12]
 800084a:	0013      	movs	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	189b      	adds	r3, r3, r2
 8000850:	18cb      	adds	r3, r1, r3
 8000852:	330e      	adds	r3, #14
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<NUM_PIXELS; i++){
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	3301      	adds	r3, #1
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	2380      	movs	r3, #128	@ 0x80
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	429a      	cmp	r2, r3
 8000866:	dddc      	ble.n	8000822 <_ZN6WS28125clearEv+0xe>
    }
}
 8000868:	46c0      	nop			@ (mov r8, r8)
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b004      	add	sp, #16
 8000870:	bd80      	pop	{r7, pc}

08000872 <_ZN6WS28127set_rgbEhhhh>:
	}
	set_rgb(id, r, g, b);

}

void WS2812::set_rgb(uint8_t id, uint8_t r, uint8_t g,uint8_t b){
 8000872:	b590      	push	{r4, r7, lr}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
 800087a:	000c      	movs	r4, r1
 800087c:	0010      	movs	r0, r2
 800087e:	0019      	movs	r1, r3
 8000880:	1cfb      	adds	r3, r7, #3
 8000882:	1c22      	adds	r2, r4, #0
 8000884:	701a      	strb	r2, [r3, #0]
 8000886:	1cbb      	adds	r3, r7, #2
 8000888:	1c02      	adds	r2, r0, #0
 800088a:	701a      	strb	r2, [r3, #0]
 800088c:	1c7b      	adds	r3, r7, #1
 800088e:	1c0a      	adds	r2, r1, #0
 8000890:	701a      	strb	r2, [r3, #0]
    rgb_buf[id][0]=r;
 8000892:	1cfb      	adds	r3, r7, #3
 8000894:	781a      	ldrb	r2, [r3, #0]
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	0013      	movs	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	189b      	adds	r3, r3, r2
 800089e:	18cb      	adds	r3, r1, r3
 80008a0:	330c      	adds	r3, #12
 80008a2:	1cba      	adds	r2, r7, #2
 80008a4:	7812      	ldrb	r2, [r2, #0]
 80008a6:	701a      	strb	r2, [r3, #0]
    rgb_buf[id][1]=g;
 80008a8:	1cfb      	adds	r3, r7, #3
 80008aa:	781a      	ldrb	r2, [r3, #0]
 80008ac:	6879      	ldr	r1, [r7, #4]
 80008ae:	0013      	movs	r3, r2
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	189b      	adds	r3, r3, r2
 80008b4:	18cb      	adds	r3, r1, r3
 80008b6:	330d      	adds	r3, #13
 80008b8:	1c7a      	adds	r2, r7, #1
 80008ba:	7812      	ldrb	r2, [r2, #0]
 80008bc:	701a      	strb	r2, [r3, #0]
    rgb_buf[id][2]=b;
 80008be:	1cfb      	adds	r3, r7, #3
 80008c0:	781a      	ldrb	r2, [r3, #0]
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	0013      	movs	r3, r2
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	189b      	adds	r3, r3, r2
 80008ca:	18cb      	adds	r3, r1, r3
 80008cc:	330e      	adds	r3, #14
 80008ce:	001a      	movs	r2, r3
 80008d0:	2318      	movs	r3, #24
 80008d2:	18fb      	adds	r3, r7, r3
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	7013      	strb	r3, [r2, #0]
}
 80008d8:	46c0      	nop			@ (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	b003      	add	sp, #12
 80008de:	bd90      	pop	{r4, r7, pc}

080008e0 <_ZN6WS281217do_forwardRewriteEv>:

void WS2812::do_forwardRewrite(){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
    if(wr_buf_p < NUM_PIXELS) {
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	23d0      	movs	r3, #208	@ 0xd0
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	58d2      	ldr	r2, [r2, r3]
 80008f0:	2380      	movs	r3, #128	@ 0x80
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d86e      	bhi.n	80009d6 <_ZN6WS281217do_forwardRewriteEv+0xf6>
        for(uint_fast8_t i = 0; i < 8; i++) {
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	e05e      	b.n	80009bc <_ZN6WS281217do_forwardRewriteEv+0xdc>
            wr_buf[i     ] = ((rgb_buf[wr_buf_p][1]>>(7-i))&1) ? HIGH : LOW;
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	23d0      	movs	r3, #208	@ 0xd0
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	58d2      	ldr	r2, [r2, r3]
 8000906:	6879      	ldr	r1, [r7, #4]
 8000908:	0013      	movs	r3, r2
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	189b      	adds	r3, r3, r2
 800090e:	18cb      	adds	r3, r1, r3
 8000910:	330d      	adds	r3, #13
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	0019      	movs	r1, r3
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	2207      	movs	r2, #7
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	4119      	asrs	r1, r3
 800091e:	000b      	movs	r3, r1
 8000920:	2201      	movs	r2, #1
 8000922:	4013      	ands	r3, r2
 8000924:	d001      	beq.n	800092a <_ZN6WS281217do_forwardRewriteEv+0x4a>
 8000926:	200a      	movs	r0, #10
 8000928:	e000      	b.n	800092c <_ZN6WS281217do_forwardRewriteEv+0x4c>
 800092a:	2005      	movs	r0, #5
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	4940      	ldr	r1, [pc, #256]	@ (8000a30 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	18d3      	adds	r3, r2, r3
 8000934:	185b      	adds	r3, r3, r1
 8000936:	1c02      	adds	r2, r0, #0
 8000938:	701a      	strb	r2, [r3, #0]
            wr_buf[i +  8] = ((rgb_buf[wr_buf_p][0]>>(7-i))&1) ? HIGH : LOW;
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	23d0      	movs	r3, #208	@ 0xd0
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	58d2      	ldr	r2, [r2, r3]
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	0013      	movs	r3, r2
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	189b      	adds	r3, r3, r2
 800094a:	18cb      	adds	r3, r1, r3
 800094c:	330c      	adds	r3, #12
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	0019      	movs	r1, r3
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	2207      	movs	r2, #7
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	4119      	asrs	r1, r3
 800095a:	000b      	movs	r3, r1
 800095c:	2201      	movs	r2, #1
 800095e:	4013      	ands	r3, r2
 8000960:	d001      	beq.n	8000966 <_ZN6WS281217do_forwardRewriteEv+0x86>
 8000962:	200a      	movs	r0, #10
 8000964:	e000      	b.n	8000968 <_ZN6WS281217do_forwardRewriteEv+0x88>
 8000966:	2005      	movs	r0, #5
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	3308      	adds	r3, #8
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	4930      	ldr	r1, [pc, #192]	@ (8000a30 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 8000970:	18d3      	adds	r3, r2, r3
 8000972:	185b      	adds	r3, r3, r1
 8000974:	1c02      	adds	r2, r0, #0
 8000976:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 16] = ((rgb_buf[wr_buf_p][2]>>(7-i))&1) ? HIGH : LOW;
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	23d0      	movs	r3, #208	@ 0xd0
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	58d2      	ldr	r2, [r2, r3]
 8000980:	6879      	ldr	r1, [r7, #4]
 8000982:	0013      	movs	r3, r2
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	189b      	adds	r3, r3, r2
 8000988:	18cb      	adds	r3, r1, r3
 800098a:	330e      	adds	r3, #14
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	0019      	movs	r1, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2207      	movs	r2, #7
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	4119      	asrs	r1, r3
 8000998:	000b      	movs	r3, r1
 800099a:	2201      	movs	r2, #1
 800099c:	4013      	ands	r3, r2
 800099e:	d001      	beq.n	80009a4 <_ZN6WS281217do_forwardRewriteEv+0xc4>
 80009a0:	200a      	movs	r0, #10
 80009a2:	e000      	b.n	80009a6 <_ZN6WS281217do_forwardRewriteEv+0xc6>
 80009a4:	2005      	movs	r0, #5
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	3310      	adds	r3, #16
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	4920      	ldr	r1, [pc, #128]	@ (8000a30 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 80009ae:	18d3      	adds	r3, r2, r3
 80009b0:	185b      	adds	r3, r3, r1
 80009b2:	1c02      	adds	r2, r0, #0
 80009b4:	701a      	strb	r2, [r3, #0]
        for(uint_fast8_t i = 0; i < 8; i++) {
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	3301      	adds	r3, #1
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2b07      	cmp	r3, #7
 80009c0:	d99d      	bls.n	80008fe <_ZN6WS281217do_forwardRewriteEv+0x1e>
        }
        wr_buf_p++;
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	23d0      	movs	r3, #208	@ 0xd0
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	58d3      	ldr	r3, [r2, r3]
 80009ca:	1c59      	adds	r1, r3, #1
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	23d0      	movs	r3, #208	@ 0xd0
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	50d1      	str	r1, [r2, r3]
    } else if (wr_buf_p < NUM_PIXELS + 2) {
        for(uint8_t i = 0; i < 24; i++){ wr_buf[i] = 0;}
        wr_buf_p++;
    }
}
 80009d4:	e028      	b.n	8000a28 <_ZN6WS281217do_forwardRewriteEv+0x148>
    } else if (wr_buf_p < NUM_PIXELS + 2) {
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	23d0      	movs	r3, #208	@ 0xd0
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	58d2      	ldr	r2, [r2, r3]
 80009de:	2381      	movs	r3, #129	@ 0x81
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d820      	bhi.n	8000a28 <_ZN6WS281217do_forwardRewriteEv+0x148>
        for(uint8_t i = 0; i < 24; i++){ wr_buf[i] = 0;}
 80009e6:	230b      	movs	r3, #11
 80009e8:	18fb      	adds	r3, r7, r3
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
 80009ee:	e00d      	b.n	8000a0c <_ZN6WS281217do_forwardRewriteEv+0x12c>
 80009f0:	200b      	movs	r0, #11
 80009f2:	183b      	adds	r3, r7, r0
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	490d      	ldr	r1, [pc, #52]	@ (8000a30 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 80009fa:	18d3      	adds	r3, r2, r3
 80009fc:	185b      	adds	r3, r3, r1
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
 8000a02:	183b      	adds	r3, r7, r0
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	183b      	adds	r3, r7, r0
 8000a08:	3201      	adds	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
 8000a0c:	230b      	movs	r3, #11
 8000a0e:	18fb      	adds	r3, r7, r3
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b17      	cmp	r3, #23
 8000a14:	d9ec      	bls.n	80009f0 <_ZN6WS281217do_forwardRewriteEv+0x110>
        wr_buf_p++;
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	23d0      	movs	r3, #208	@ 0xd0
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	58d3      	ldr	r3, [r2, r3]
 8000a1e:	1c59      	adds	r1, r3, #1
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	23d0      	movs	r3, #208	@ 0xd0
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	50d1      	str	r1, [r2, r3]
}
 8000a28:	46c0      	nop			@ (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b004      	add	sp, #16
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	0000030f 	.word	0x0000030f

08000a34 <_ZN6WS281214do_backRewriteEv>:

void WS2812::do_backRewrite(){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
    if(wr_buf_p < NUM_PIXELS) {
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	23d0      	movs	r3, #208	@ 0xd0
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	58d2      	ldr	r2, [r2, r3]
 8000a44:	2380      	movs	r3, #128	@ 0x80
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d86f      	bhi.n	8000b2c <_ZN6WS281214do_backRewriteEv+0xf8>
        for(uint_fast8_t i = 0; i < 8; ++i) {
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	e05f      	b.n	8000b12 <_ZN6WS281214do_backRewriteEv+0xde>
            wr_buf[i + 24] = ((rgb_buf[wr_buf_p][1]>>(7-i))&1) ? HIGH : LOW;
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	23d0      	movs	r3, #208	@ 0xd0
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	58d2      	ldr	r2, [r2, r3]
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	0013      	movs	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	189b      	adds	r3, r3, r2
 8000a62:	18cb      	adds	r3, r1, r3
 8000a64:	330d      	adds	r3, #13
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	0019      	movs	r1, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	4119      	asrs	r1, r3
 8000a72:	000b      	movs	r3, r1
 8000a74:	2201      	movs	r2, #1
 8000a76:	4013      	ands	r3, r2
 8000a78:	d001      	beq.n	8000a7e <_ZN6WS281214do_backRewriteEv+0x4a>
 8000a7a:	200a      	movs	r0, #10
 8000a7c:	e000      	b.n	8000a80 <_ZN6WS281214do_backRewriteEv+0x4c>
 8000a7e:	2005      	movs	r0, #5
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	3318      	adds	r3, #24
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	4947      	ldr	r1, [pc, #284]	@ (8000ba4 <_ZN6WS281214do_backRewriteEv+0x170>)
 8000a88:	18d3      	adds	r3, r2, r3
 8000a8a:	185b      	adds	r3, r3, r1
 8000a8c:	1c02      	adds	r2, r0, #0
 8000a8e:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 32] = ((rgb_buf[wr_buf_p][0]>>(7-i))&1) ? HIGH : LOW;
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	23d0      	movs	r3, #208	@ 0xd0
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	58d2      	ldr	r2, [r2, r3]
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	0013      	movs	r3, r2
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	189b      	adds	r3, r3, r2
 8000aa0:	18cb      	adds	r3, r1, r3
 8000aa2:	330c      	adds	r3, #12
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	0019      	movs	r1, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	2207      	movs	r2, #7
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	4119      	asrs	r1, r3
 8000ab0:	000b      	movs	r3, r1
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	d001      	beq.n	8000abc <_ZN6WS281214do_backRewriteEv+0x88>
 8000ab8:	200a      	movs	r0, #10
 8000aba:	e000      	b.n	8000abe <_ZN6WS281214do_backRewriteEv+0x8a>
 8000abc:	2005      	movs	r0, #5
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	3320      	adds	r3, #32
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	4937      	ldr	r1, [pc, #220]	@ (8000ba4 <_ZN6WS281214do_backRewriteEv+0x170>)
 8000ac6:	18d3      	adds	r3, r2, r3
 8000ac8:	185b      	adds	r3, r3, r1
 8000aca:	1c02      	adds	r2, r0, #0
 8000acc:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 40] = ((rgb_buf[wr_buf_p][2]>>(7-i))&1) ? HIGH : LOW;
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	23d0      	movs	r3, #208	@ 0xd0
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	58d2      	ldr	r2, [r2, r3]
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	0013      	movs	r3, r2
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	189b      	adds	r3, r3, r2
 8000ade:	18cb      	adds	r3, r1, r3
 8000ae0:	330e      	adds	r3, #14
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	2207      	movs	r2, #7
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	4119      	asrs	r1, r3
 8000aee:	000b      	movs	r3, r1
 8000af0:	2201      	movs	r2, #1
 8000af2:	4013      	ands	r3, r2
 8000af4:	d001      	beq.n	8000afa <_ZN6WS281214do_backRewriteEv+0xc6>
 8000af6:	200a      	movs	r0, #10
 8000af8:	e000      	b.n	8000afc <_ZN6WS281214do_backRewriteEv+0xc8>
 8000afa:	2005      	movs	r0, #5
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	3328      	adds	r3, #40	@ 0x28
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	4928      	ldr	r1, [pc, #160]	@ (8000ba4 <_ZN6WS281214do_backRewriteEv+0x170>)
 8000b04:	18d3      	adds	r3, r2, r3
 8000b06:	185b      	adds	r3, r3, r1
 8000b08:	1c02      	adds	r2, r0, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
        for(uint_fast8_t i = 0; i < 8; ++i) {
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2b07      	cmp	r3, #7
 8000b16:	d99c      	bls.n	8000a52 <_ZN6WS281214do_backRewriteEv+0x1e>
        }
        wr_buf_p++;
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	23d0      	movs	r3, #208	@ 0xd0
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	58d3      	ldr	r3, [r2, r3]
 8000b20:	1c59      	adds	r1, r3, #1
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	23d0      	movs	r3, #208	@ 0xd0
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	50d1      	str	r1, [r2, r3]
        wr_buf_p++;
    } else {
        wr_buf_p = 0;
        HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
    }
}
 8000b2a:	e036      	b.n	8000b9a <_ZN6WS281214do_backRewriteEv+0x166>
    } else if (wr_buf_p < NUM_PIXELS + 2) {
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	23d0      	movs	r3, #208	@ 0xd0
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	58d2      	ldr	r2, [r2, r3]
 8000b34:	2381      	movs	r3, #129	@ 0x81
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d821      	bhi.n	8000b80 <_ZN6WS281214do_backRewriteEv+0x14c>
        for(uint8_t i = 24; i < 48; i++){ wr_buf[i] = 0;};
 8000b3c:	230b      	movs	r3, #11
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	2218      	movs	r2, #24
 8000b42:	701a      	strb	r2, [r3, #0]
 8000b44:	e00d      	b.n	8000b62 <_ZN6WS281214do_backRewriteEv+0x12e>
 8000b46:	200b      	movs	r0, #11
 8000b48:	183b      	adds	r3, r7, r0
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	4915      	ldr	r1, [pc, #84]	@ (8000ba4 <_ZN6WS281214do_backRewriteEv+0x170>)
 8000b50:	18d3      	adds	r3, r2, r3
 8000b52:	185b      	adds	r3, r3, r1
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
 8000b58:	183b      	adds	r3, r7, r0
 8000b5a:	781a      	ldrb	r2, [r3, #0]
 8000b5c:	183b      	adds	r3, r7, r0
 8000b5e:	3201      	adds	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
 8000b62:	230b      	movs	r3, #11
 8000b64:	18fb      	adds	r3, r7, r3
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b2f      	cmp	r3, #47	@ 0x2f
 8000b6a:	d9ec      	bls.n	8000b46 <_ZN6WS281214do_backRewriteEv+0x112>
        wr_buf_p++;
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	23d0      	movs	r3, #208	@ 0xd0
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	58d3      	ldr	r3, [r2, r3]
 8000b74:	1c59      	adds	r1, r3, #1
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	23d0      	movs	r3, #208	@ 0xd0
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	50d1      	str	r1, [r2, r3]
}
 8000b7e:	e00c      	b.n	8000b9a <_ZN6WS281214do_backRewriteEv+0x166>
        wr_buf_p = 0;
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	23d0      	movs	r3, #208	@ 0xd0
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	2100      	movs	r1, #0
 8000b88:	50d1      	str	r1, [r2, r3]
        HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	0019      	movs	r1, r3
 8000b94:	0010      	movs	r0, r2
 8000b96:	f001 fcf7 	bl	8002588 <HAL_TIM_PWM_Stop_DMA>
}
 8000b9a:	46c0      	nop			@ (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b004      	add	sp, #16
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	0000030f 	.word	0x0000030f

08000ba8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ba8:	480d      	ldr	r0, [pc, #52]	@ (8000be0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000baa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bac:	f7ff fd7e 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb0:	480c      	ldr	r0, [pc, #48]	@ (8000be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bb2:	490d      	ldr	r1, [pc, #52]	@ (8000be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bec <LoopForever+0xe>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000bf4 <LoopForever+0x16>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bd6:	f002 fb41 	bl	800325c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bda:	f7ff fb39 	bl	8000250 <main>

08000bde <LoopForever>:

LoopForever:
  b LoopForever
 8000bde:	e7fe      	b.n	8000bde <LoopForever>
  ldr   r0, =_estack
 8000be0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bec:	0800335c 	.word	0x0800335c
  ldr r2, =_sbss
 8000bf0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bf4:	20000418 	.word	0x20000418

08000bf8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC1_IRQHandler>
	...

08000bfc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <HAL_Init+0x3c>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <HAL_Init+0x3c>)
 8000c0e:	2180      	movs	r1, #128	@ 0x80
 8000c10:	0049      	lsls	r1, r1, #1
 8000c12:	430a      	orrs	r2, r1
 8000c14:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c16:	2003      	movs	r0, #3
 8000c18:	f000 f810 	bl	8000c3c <HAL_InitTick>
 8000c1c:	1e03      	subs	r3, r0, #0
 8000c1e:	d003      	beq.n	8000c28 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c20:	1dfb      	adds	r3, r7, #7
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	e001      	b.n	8000c2c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff fc6e 	bl	8000508 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c2c:	1dfb      	adds	r3, r7, #7
 8000c2e:	781b      	ldrb	r3, [r3, #0]
}
 8000c30:	0018      	movs	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b002      	add	sp, #8
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40022000 	.word	0x40022000

08000c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c44:	230f      	movs	r3, #15
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc4 <HAL_InitTick+0x88>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d02b      	beq.n	8000cac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c54:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc8 <HAL_InitTick+0x8c>)
 8000c56:	681c      	ldr	r4, [r3, #0]
 8000c58:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc4 <HAL_InitTick+0x88>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	23fa      	movs	r3, #250	@ 0xfa
 8000c60:	0098      	lsls	r0, r3, #2
 8000c62:	f7ff fa4d 	bl	8000100 <__udivsi3>
 8000c66:	0003      	movs	r3, r0
 8000c68:	0019      	movs	r1, r3
 8000c6a:	0020      	movs	r0, r4
 8000c6c:	f7ff fa48 	bl	8000100 <__udivsi3>
 8000c70:	0003      	movs	r3, r0
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 f93d 	bl	8000ef2 <HAL_SYSTICK_Config>
 8000c78:	1e03      	subs	r3, r0, #0
 8000c7a:	d112      	bne.n	8000ca2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d80a      	bhi.n	8000c98 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	2301      	movs	r3, #1
 8000c86:	425b      	negs	r3, r3
 8000c88:	2200      	movs	r2, #0
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f000 f90c 	bl	8000ea8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <HAL_InitTick+0x90>)
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	e00d      	b.n	8000cb4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c98:	230f      	movs	r3, #15
 8000c9a:	18fb      	adds	r3, r7, r3
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	e008      	b.n	8000cb4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ca2:	230f      	movs	r3, #15
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	e003      	b.n	8000cb4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cac:	230f      	movs	r3, #15
 8000cae:	18fb      	adds	r3, r7, r3
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	781b      	ldrb	r3, [r3, #0]
}
 8000cba:	0018      	movs	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b005      	add	sp, #20
 8000cc0:	bd90      	pop	{r4, r7, pc}
 8000cc2:	46c0      	nop			@ (mov r8, r8)
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000004 	.word	0x20000004

08000cd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd4:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <HAL_IncTick+0x1c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	001a      	movs	r2, r3
 8000cda:	4b05      	ldr	r3, [pc, #20]	@ (8000cf0 <HAL_IncTick+0x20>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	18d2      	adds	r2, r2, r3
 8000ce0:	4b03      	ldr	r3, [pc, #12]	@ (8000cf0 <HAL_IncTick+0x20>)
 8000ce2:	601a      	str	r2, [r3, #0]
}
 8000ce4:	46c0      	nop			@ (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000414 	.word	0x20000414

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b02      	ldr	r3, [pc, #8]	@ (8000d04 <HAL_GetTick+0x10>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	20000414 	.word	0x20000414

08000d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d10:	f7ff fff0 	bl	8000cf4 <HAL_GetTick>
 8000d14:	0003      	movs	r3, r0
 8000d16:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	d005      	beq.n	8000d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d22:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <HAL_Delay+0x44>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	001a      	movs	r2, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	189b      	adds	r3, r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	f7ff ffe0 	bl	8000cf4 <HAL_GetTick>
 8000d34:	0002      	movs	r2, r0
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d8f7      	bhi.n	8000d30 <HAL_Delay+0x28>
  {
  }
}
 8000d40:	46c0      	nop			@ (mov r8, r8)
 8000d42:	46c0      	nop			@ (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b004      	add	sp, #16
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	20000008 	.word	0x20000008

08000d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	0002      	movs	r2, r0
 8000d58:	1dfb      	adds	r3, r7, #7
 8000d5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d5c:	1dfb      	adds	r3, r7, #7
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d62:	d809      	bhi.n	8000d78 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d64:	1dfb      	adds	r3, r7, #7
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	001a      	movs	r2, r3
 8000d6a:	231f      	movs	r3, #31
 8000d6c:	401a      	ands	r2, r3
 8000d6e:	4b04      	ldr	r3, [pc, #16]	@ (8000d80 <__NVIC_EnableIRQ+0x30>)
 8000d70:	2101      	movs	r1, #1
 8000d72:	4091      	lsls	r1, r2
 8000d74:	000a      	movs	r2, r1
 8000d76:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d78:	46c0      	nop			@ (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b002      	add	sp, #8
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	e000e100 	.word	0xe000e100

08000d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	0002      	movs	r2, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d98:	d828      	bhi.n	8000dec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d9a:	4a2f      	ldr	r2, [pc, #188]	@ (8000e58 <__NVIC_SetPriority+0xd4>)
 8000d9c:	1dfb      	adds	r3, r7, #7
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	089b      	lsrs	r3, r3, #2
 8000da4:	33c0      	adds	r3, #192	@ 0xc0
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	589b      	ldr	r3, [r3, r2]
 8000daa:	1dfa      	adds	r2, r7, #7
 8000dac:	7812      	ldrb	r2, [r2, #0]
 8000dae:	0011      	movs	r1, r2
 8000db0:	2203      	movs	r2, #3
 8000db2:	400a      	ands	r2, r1
 8000db4:	00d2      	lsls	r2, r2, #3
 8000db6:	21ff      	movs	r1, #255	@ 0xff
 8000db8:	4091      	lsls	r1, r2
 8000dba:	000a      	movs	r2, r1
 8000dbc:	43d2      	mvns	r2, r2
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	019b      	lsls	r3, r3, #6
 8000dc6:	22ff      	movs	r2, #255	@ 0xff
 8000dc8:	401a      	ands	r2, r3
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	0018      	movs	r0, r3
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	4003      	ands	r3, r0
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd8:	481f      	ldr	r0, [pc, #124]	@ (8000e58 <__NVIC_SetPriority+0xd4>)
 8000dda:	1dfb      	adds	r3, r7, #7
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	089b      	lsrs	r3, r3, #2
 8000de2:	430a      	orrs	r2, r1
 8000de4:	33c0      	adds	r3, #192	@ 0xc0
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dea:	e031      	b.n	8000e50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dec:	4a1b      	ldr	r2, [pc, #108]	@ (8000e5c <__NVIC_SetPriority+0xd8>)
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	0019      	movs	r1, r3
 8000df4:	230f      	movs	r3, #15
 8000df6:	400b      	ands	r3, r1
 8000df8:	3b08      	subs	r3, #8
 8000dfa:	089b      	lsrs	r3, r3, #2
 8000dfc:	3306      	adds	r3, #6
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	18d3      	adds	r3, r2, r3
 8000e02:	3304      	adds	r3, #4
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	1dfa      	adds	r2, r7, #7
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	400a      	ands	r2, r1
 8000e10:	00d2      	lsls	r2, r2, #3
 8000e12:	21ff      	movs	r1, #255	@ 0xff
 8000e14:	4091      	lsls	r1, r2
 8000e16:	000a      	movs	r2, r1
 8000e18:	43d2      	mvns	r2, r2
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	019b      	lsls	r3, r3, #6
 8000e22:	22ff      	movs	r2, #255	@ 0xff
 8000e24:	401a      	ands	r2, r3
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	4003      	ands	r3, r0
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e34:	4809      	ldr	r0, [pc, #36]	@ (8000e5c <__NVIC_SetPriority+0xd8>)
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	001c      	movs	r4, r3
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	4023      	ands	r3, r4
 8000e40:	3b08      	subs	r3, #8
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	430a      	orrs	r2, r1
 8000e46:	3306      	adds	r3, #6
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	18c3      	adds	r3, r0, r3
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	601a      	str	r2, [r3, #0]
}
 8000e50:	46c0      	nop			@ (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b003      	add	sp, #12
 8000e56:	bd90      	pop	{r4, r7, pc}
 8000e58:	e000e100 	.word	0xe000e100
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	1e5a      	subs	r2, r3, #1
 8000e6c:	2380      	movs	r3, #128	@ 0x80
 8000e6e:	045b      	lsls	r3, r3, #17
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d301      	bcc.n	8000e78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e74:	2301      	movs	r3, #1
 8000e76:	e010      	b.n	8000e9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <SysTick_Config+0x44>)
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	3a01      	subs	r2, #1
 8000e7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e80:	2301      	movs	r3, #1
 8000e82:	425b      	negs	r3, r3
 8000e84:	2103      	movs	r1, #3
 8000e86:	0018      	movs	r0, r3
 8000e88:	f7ff ff7c 	bl	8000d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <SysTick_Config+0x44>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e92:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <SysTick_Config+0x44>)
 8000e94:	2207      	movs	r2, #7
 8000e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b002      	add	sp, #8
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			@ (mov r8, r8)
 8000ea4:	e000e010 	.word	0xe000e010

08000ea8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	1c02      	adds	r2, r0, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	b25b      	sxtb	r3, r3
 8000ec2:	0011      	movs	r1, r2
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff ff5d 	bl	8000d84 <__NVIC_SetPriority>
}
 8000eca:	46c0      	nop			@ (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b004      	add	sp, #16
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	0002      	movs	r2, r0
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ede:	1dfb      	adds	r3, r7, #7
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	b25b      	sxtb	r3, r3
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f7ff ff33 	bl	8000d50 <__NVIC_EnableIRQ>
}
 8000eea:	46c0      	nop			@ (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	0018      	movs	r0, r3
 8000efe:	f7ff ffaf 	bl	8000e60 <SysTick_Config>
 8000f02:	0003      	movs	r3, r0
}
 8000f04:	0018      	movs	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b002      	add	sp, #8
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e077      	b.n	800100e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a3d      	ldr	r2, [pc, #244]	@ (8001018 <HAL_DMA_Init+0x10c>)
 8000f24:	4694      	mov	ip, r2
 8000f26:	4463      	add	r3, ip
 8000f28:	2114      	movs	r1, #20
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f7ff f8e8 	bl	8000100 <__udivsi3>
 8000f30:	0003      	movs	r3, r0
 8000f32:	009a      	lsls	r2, r3, #2
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2225      	movs	r2, #37	@ 0x25
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4934      	ldr	r1, [pc, #208]	@ (800101c <HAL_DMA_Init+0x110>)
 8000f4c:	400a      	ands	r2, r1
 8000f4e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6819      	ldr	r1, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	431a      	orrs	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	431a      	orrs	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	431a      	orrs	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	430a      	orrs	r2, r1
 8000f84:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f000 fa2b 	bl	80013e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	2380      	movs	r3, #128	@ 0x80
 8000f94:	01db      	lsls	r3, r3, #7
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d102      	bne.n	8000fa0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa8:	213f      	movs	r1, #63	@ 0x3f
 8000faa:	400a      	ands	r2, r1
 8000fac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000fb6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d011      	beq.n	8000fe4 <HAL_DMA_Init+0xd8>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b04      	cmp	r3, #4
 8000fc6:	d80d      	bhi.n	8000fe4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f000 fa36 	bl	800143c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	e008      	b.n	8000ff6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2225      	movs	r2, #37	@ 0x25
 8001000:	2101      	movs	r1, #1
 8001002:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2224      	movs	r2, #36	@ 0x24
 8001008:	2100      	movs	r1, #0
 800100a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	0018      	movs	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	b002      	add	sp, #8
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			@ (mov r8, r8)
 8001018:	bffdfff8 	.word	0xbffdfff8
 800101c:	ffff800f 	.word	0xffff800f

08001020 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800102e:	2317      	movs	r3, #23
 8001030:	18fb      	adds	r3, r7, r3
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2224      	movs	r2, #36	@ 0x24
 800103a:	5c9b      	ldrb	r3, [r3, r2]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d101      	bne.n	8001044 <HAL_DMA_Start_IT+0x24>
 8001040:	2302      	movs	r3, #2
 8001042:	e06f      	b.n	8001124 <HAL_DMA_Start_IT+0x104>
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2224      	movs	r2, #36	@ 0x24
 8001048:	2101      	movs	r1, #1
 800104a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2225      	movs	r2, #37	@ 0x25
 8001050:	5c9b      	ldrb	r3, [r3, r2]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b01      	cmp	r3, #1
 8001056:	d157      	bne.n	8001108 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2225      	movs	r2, #37	@ 0x25
 800105c:	2102      	movs	r1, #2
 800105e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2200      	movs	r2, #0
 8001064:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2101      	movs	r1, #1
 8001072:	438a      	bics	r2, r1
 8001074:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	68b9      	ldr	r1, [r7, #8]
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f000 f971 	bl	8001364 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	2b00      	cmp	r3, #0
 8001088:	d008      	beq.n	800109c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	210e      	movs	r1, #14
 8001096:	430a      	orrs	r2, r1
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	e00f      	b.n	80010bc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2104      	movs	r1, #4
 80010a8:	438a      	bics	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	210a      	movs	r1, #10
 80010b8:	430a      	orrs	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	2380      	movs	r3, #128	@ 0x80
 80010c4:	025b      	lsls	r3, r3, #9
 80010c6:	4013      	ands	r3, r2
 80010c8:	d008      	beq.n	80010dc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d4:	2180      	movs	r1, #128	@ 0x80
 80010d6:	0049      	lsls	r1, r1, #1
 80010d8:	430a      	orrs	r2, r1
 80010da:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d008      	beq.n	80010f6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010ee:	2180      	movs	r1, #128	@ 0x80
 80010f0:	0049      	lsls	r1, r1, #1
 80010f2:	430a      	orrs	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2101      	movs	r1, #1
 8001102:	430a      	orrs	r2, r1
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	e00a      	b.n	800111e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2280      	movs	r2, #128	@ 0x80
 800110c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2224      	movs	r2, #36	@ 0x24
 8001112:	2100      	movs	r1, #0
 8001114:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001116:	2317      	movs	r3, #23
 8001118:	18fb      	adds	r3, r7, r3
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800111e:	2317      	movs	r3, #23
 8001120:	18fb      	adds	r3, r7, r3
 8001122:	781b      	ldrb	r3, [r3, #0]
}
 8001124:	0018      	movs	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	b006      	add	sp, #24
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001134:	210f      	movs	r1, #15
 8001136:	187b      	adds	r3, r7, r1
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2225      	movs	r2, #37	@ 0x25
 8001140:	5c9b      	ldrb	r3, [r3, r2]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d006      	beq.n	8001156 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2204      	movs	r2, #4
 800114c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800114e:	187b      	adds	r3, r7, r1
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]
 8001154:	e049      	b.n	80011ea <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	210e      	movs	r1, #14
 8001162:	438a      	bics	r2, r1
 8001164:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2101      	movs	r1, #1
 8001172:	438a      	bics	r2, r1
 8001174:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001180:	491d      	ldr	r1, [pc, #116]	@ (80011f8 <HAL_DMA_Abort_IT+0xcc>)
 8001182:	400a      	ands	r2, r1
 8001184:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001186:	4b1d      	ldr	r3, [pc, #116]	@ (80011fc <HAL_DMA_Abort_IT+0xd0>)
 8001188:	6859      	ldr	r1, [r3, #4]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118e:	221c      	movs	r2, #28
 8001190:	4013      	ands	r3, r2
 8001192:	2201      	movs	r2, #1
 8001194:	409a      	lsls	r2, r3
 8001196:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <HAL_DMA_Abort_IT+0xd0>)
 8001198:	430a      	orrs	r2, r1
 800119a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80011a4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00c      	beq.n	80011c8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011b8:	490f      	ldr	r1, [pc, #60]	@ (80011f8 <HAL_DMA_Abort_IT+0xcc>)
 80011ba:	400a      	ands	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80011c6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2225      	movs	r2, #37	@ 0x25
 80011cc:	2101      	movs	r1, #1
 80011ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2224      	movs	r2, #36	@ 0x24
 80011d4:	2100      	movs	r1, #0
 80011d6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d004      	beq.n	80011ea <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	0010      	movs	r0, r2
 80011e8:	4798      	blx	r3
    }
  }
  return status;
 80011ea:	230f      	movs	r3, #15
 80011ec:	18fb      	adds	r3, r7, r3
 80011ee:	781b      	ldrb	r3, [r3, #0]
}
 80011f0:	0018      	movs	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b004      	add	sp, #16
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	fffffeff 	.word	0xfffffeff
 80011fc:	40020000 	.word	0x40020000

08001200 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001208:	4b55      	ldr	r3, [pc, #340]	@ (8001360 <HAL_DMA_IRQHandler+0x160>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	221c      	movs	r2, #28
 800121c:	4013      	ands	r3, r2
 800121e:	2204      	movs	r2, #4
 8001220:	409a      	lsls	r2, r3
 8001222:	0013      	movs	r3, r2
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	4013      	ands	r3, r2
 8001228:	d027      	beq.n	800127a <HAL_DMA_IRQHandler+0x7a>
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	2204      	movs	r2, #4
 800122e:	4013      	ands	r3, r2
 8001230:	d023      	beq.n	800127a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2220      	movs	r2, #32
 800123a:	4013      	ands	r3, r2
 800123c:	d107      	bne.n	800124e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2104      	movs	r1, #4
 800124a:	438a      	bics	r2, r1
 800124c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800124e:	4b44      	ldr	r3, [pc, #272]	@ (8001360 <HAL_DMA_IRQHandler+0x160>)
 8001250:	6859      	ldr	r1, [r3, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	221c      	movs	r2, #28
 8001258:	4013      	ands	r3, r2
 800125a:	2204      	movs	r2, #4
 800125c:	409a      	lsls	r2, r3
 800125e:	4b40      	ldr	r3, [pc, #256]	@ (8001360 <HAL_DMA_IRQHandler+0x160>)
 8001260:	430a      	orrs	r2, r1
 8001262:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001268:	2b00      	cmp	r3, #0
 800126a:	d100      	bne.n	800126e <HAL_DMA_IRQHandler+0x6e>
 800126c:	e073      	b.n	8001356 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	0010      	movs	r0, r2
 8001276:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001278:	e06d      	b.n	8001356 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	221c      	movs	r2, #28
 8001280:	4013      	ands	r3, r2
 8001282:	2202      	movs	r2, #2
 8001284:	409a      	lsls	r2, r3
 8001286:	0013      	movs	r3, r2
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	4013      	ands	r3, r2
 800128c:	d02e      	beq.n	80012ec <HAL_DMA_IRQHandler+0xec>
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	2202      	movs	r2, #2
 8001292:	4013      	ands	r3, r2
 8001294:	d02a      	beq.n	80012ec <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2220      	movs	r2, #32
 800129e:	4013      	ands	r3, r2
 80012a0:	d10b      	bne.n	80012ba <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	210a      	movs	r1, #10
 80012ae:	438a      	bics	r2, r1
 80012b0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2225      	movs	r2, #37	@ 0x25
 80012b6:	2101      	movs	r1, #1
 80012b8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80012ba:	4b29      	ldr	r3, [pc, #164]	@ (8001360 <HAL_DMA_IRQHandler+0x160>)
 80012bc:	6859      	ldr	r1, [r3, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	221c      	movs	r2, #28
 80012c4:	4013      	ands	r3, r2
 80012c6:	2202      	movs	r2, #2
 80012c8:	409a      	lsls	r2, r3
 80012ca:	4b25      	ldr	r3, [pc, #148]	@ (8001360 <HAL_DMA_IRQHandler+0x160>)
 80012cc:	430a      	orrs	r2, r1
 80012ce:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2224      	movs	r2, #36	@ 0x24
 80012d4:	2100      	movs	r1, #0
 80012d6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d03a      	beq.n	8001356 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	0010      	movs	r0, r2
 80012e8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80012ea:	e034      	b.n	8001356 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f0:	221c      	movs	r2, #28
 80012f2:	4013      	ands	r3, r2
 80012f4:	2208      	movs	r2, #8
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	4013      	ands	r3, r2
 80012fe:	d02b      	beq.n	8001358 <HAL_DMA_IRQHandler+0x158>
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	2208      	movs	r2, #8
 8001304:	4013      	ands	r3, r2
 8001306:	d027      	beq.n	8001358 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	210e      	movs	r1, #14
 8001314:	438a      	bics	r2, r1
 8001316:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001318:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <HAL_DMA_IRQHandler+0x160>)
 800131a:	6859      	ldr	r1, [r3, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001320:	221c      	movs	r2, #28
 8001322:	4013      	ands	r3, r2
 8001324:	2201      	movs	r2, #1
 8001326:	409a      	lsls	r2, r3
 8001328:	4b0d      	ldr	r3, [pc, #52]	@ (8001360 <HAL_DMA_IRQHandler+0x160>)
 800132a:	430a      	orrs	r2, r1
 800132c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2225      	movs	r2, #37	@ 0x25
 8001338:	2101      	movs	r1, #1
 800133a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2224      	movs	r2, #36	@ 0x24
 8001340:	2100      	movs	r1, #0
 8001342:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001348:	2b00      	cmp	r3, #0
 800134a:	d005      	beq.n	8001358 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	0010      	movs	r0, r2
 8001354:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001356:	46c0      	nop			@ (mov r8, r8)
 8001358:	46c0      	nop			@ (mov r8, r8)
}
 800135a:	46bd      	mov	sp, r7
 800135c:	b004      	add	sp, #16
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40020000 	.word	0x40020000

08001364 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
 8001370:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800137a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001380:	2b00      	cmp	r3, #0
 8001382:	d004      	beq.n	800138e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800138c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800138e:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <DMA_SetConfig+0x7c>)
 8001390:	6859      	ldr	r1, [r3, #4]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	221c      	movs	r2, #28
 8001398:	4013      	ands	r3, r2
 800139a:	2201      	movs	r2, #1
 800139c:	409a      	lsls	r2, r3
 800139e:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <DMA_SetConfig+0x7c>)
 80013a0:	430a      	orrs	r2, r1
 80013a2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2b10      	cmp	r3, #16
 80013b2:	d108      	bne.n	80013c6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013c4:	e007      	b.n	80013d6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	60da      	str	r2, [r3, #12]
}
 80013d6:	46c0      	nop			@ (mov r8, r8)
 80013d8:	46bd      	mov	sp, r7
 80013da:	b004      	add	sp, #16
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	46c0      	nop			@ (mov r8, r8)
 80013e0:	40020000 	.word	0x40020000

080013e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	4a10      	ldr	r2, [pc, #64]	@ (8001434 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80013f4:	4694      	mov	ip, r2
 80013f6:	4463      	add	r3, ip
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	001a      	movs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	001a      	movs	r2, r3
 8001406:	23ff      	movs	r3, #255	@ 0xff
 8001408:	4013      	ands	r3, r2
 800140a:	3b08      	subs	r3, #8
 800140c:	2114      	movs	r1, #20
 800140e:	0018      	movs	r0, r3
 8001410:	f7fe fe76 	bl	8000100 <__udivsi3>
 8001414:	0003      	movs	r3, r0
 8001416:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a07      	ldr	r2, [pc, #28]	@ (8001438 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800141c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	221f      	movs	r2, #31
 8001422:	4013      	ands	r3, r2
 8001424:	2201      	movs	r2, #1
 8001426:	409a      	lsls	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800142c:	46c0      	nop			@ (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	b004      	add	sp, #16
 8001432:	bd80      	pop	{r7, pc}
 8001434:	10008200 	.word	0x10008200
 8001438:	40020880 	.word	0x40020880

0800143c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	223f      	movs	r2, #63	@ 0x3f
 800144a:	4013      	ands	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4a0a      	ldr	r2, [pc, #40]	@ (800147c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001452:	4694      	mov	ip, r2
 8001454:	4463      	add	r3, ip
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	001a      	movs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a07      	ldr	r2, [pc, #28]	@ (8001480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001462:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3b01      	subs	r3, #1
 8001468:	2203      	movs	r2, #3
 800146a:	4013      	ands	r3, r2
 800146c:	2201      	movs	r2, #1
 800146e:	409a      	lsls	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001474:	46c0      	nop			@ (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	b004      	add	sp, #16
 800147a:	bd80      	pop	{r7, pc}
 800147c:	1000823f 	.word	0x1000823f
 8001480:	40020940 	.word	0x40020940

08001484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001492:	e147      	b.n	8001724 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2101      	movs	r1, #1
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	4091      	lsls	r1, r2
 800149e:	000a      	movs	r2, r1
 80014a0:	4013      	ands	r3, r2
 80014a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d100      	bne.n	80014ac <HAL_GPIO_Init+0x28>
 80014aa:	e138      	b.n	800171e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2203      	movs	r2, #3
 80014b2:	4013      	ands	r3, r2
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d005      	beq.n	80014c4 <HAL_GPIO_Init+0x40>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2203      	movs	r2, #3
 80014be:	4013      	ands	r3, r2
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d130      	bne.n	8001526 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	2203      	movs	r2, #3
 80014d0:	409a      	lsls	r2, r3
 80014d2:	0013      	movs	r3, r2
 80014d4:	43da      	mvns	r2, r3
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	409a      	lsls	r2, r3
 80014e6:	0013      	movs	r3, r2
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014fa:	2201      	movs	r2, #1
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	409a      	lsls	r2, r3
 8001500:	0013      	movs	r3, r2
 8001502:	43da      	mvns	r2, r3
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	091b      	lsrs	r3, r3, #4
 8001510:	2201      	movs	r2, #1
 8001512:	401a      	ands	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	409a      	lsls	r2, r3
 8001518:	0013      	movs	r3, r2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2203      	movs	r2, #3
 800152c:	4013      	ands	r3, r2
 800152e:	2b03      	cmp	r3, #3
 8001530:	d017      	beq.n	8001562 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	2203      	movs	r2, #3
 800153e:	409a      	lsls	r2, r3
 8001540:	0013      	movs	r3, r2
 8001542:	43da      	mvns	r2, r3
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	409a      	lsls	r2, r3
 8001554:	0013      	movs	r3, r2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2203      	movs	r2, #3
 8001568:	4013      	ands	r3, r2
 800156a:	2b02      	cmp	r3, #2
 800156c:	d123      	bne.n	80015b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	08da      	lsrs	r2, r3, #3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3208      	adds	r2, #8
 8001576:	0092      	lsls	r2, r2, #2
 8001578:	58d3      	ldr	r3, [r2, r3]
 800157a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	2207      	movs	r2, #7
 8001580:	4013      	ands	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	220f      	movs	r2, #15
 8001586:	409a      	lsls	r2, r3
 8001588:	0013      	movs	r3, r2
 800158a:	43da      	mvns	r2, r3
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	4013      	ands	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	691a      	ldr	r2, [r3, #16]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	2107      	movs	r1, #7
 800159a:	400b      	ands	r3, r1
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	409a      	lsls	r2, r3
 80015a0:	0013      	movs	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	08da      	lsrs	r2, r3, #3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3208      	adds	r2, #8
 80015b0:	0092      	lsls	r2, r2, #2
 80015b2:	6939      	ldr	r1, [r7, #16]
 80015b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	2203      	movs	r2, #3
 80015c2:	409a      	lsls	r2, r3
 80015c4:	0013      	movs	r3, r2
 80015c6:	43da      	mvns	r2, r3
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2203      	movs	r2, #3
 80015d4:	401a      	ands	r2, r3
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	409a      	lsls	r2, r3
 80015dc:	0013      	movs	r3, r2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	23c0      	movs	r3, #192	@ 0xc0
 80015f0:	029b      	lsls	r3, r3, #10
 80015f2:	4013      	ands	r3, r2
 80015f4:	d100      	bne.n	80015f8 <HAL_GPIO_Init+0x174>
 80015f6:	e092      	b.n	800171e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80015f8:	4a50      	ldr	r2, [pc, #320]	@ (800173c <HAL_GPIO_Init+0x2b8>)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	3318      	adds	r3, #24
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	589b      	ldr	r3, [r3, r2]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	2203      	movs	r2, #3
 800160a:	4013      	ands	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	220f      	movs	r2, #15
 8001610:	409a      	lsls	r2, r3
 8001612:	0013      	movs	r3, r2
 8001614:	43da      	mvns	r2, r3
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	23a0      	movs	r3, #160	@ 0xa0
 8001620:	05db      	lsls	r3, r3, #23
 8001622:	429a      	cmp	r2, r3
 8001624:	d013      	beq.n	800164e <HAL_GPIO_Init+0x1ca>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a45      	ldr	r2, [pc, #276]	@ (8001740 <HAL_GPIO_Init+0x2bc>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d00d      	beq.n	800164a <HAL_GPIO_Init+0x1c6>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a44      	ldr	r2, [pc, #272]	@ (8001744 <HAL_GPIO_Init+0x2c0>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d007      	beq.n	8001646 <HAL_GPIO_Init+0x1c2>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a43      	ldr	r2, [pc, #268]	@ (8001748 <HAL_GPIO_Init+0x2c4>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d101      	bne.n	8001642 <HAL_GPIO_Init+0x1be>
 800163e:	2303      	movs	r3, #3
 8001640:	e006      	b.n	8001650 <HAL_GPIO_Init+0x1cc>
 8001642:	2305      	movs	r3, #5
 8001644:	e004      	b.n	8001650 <HAL_GPIO_Init+0x1cc>
 8001646:	2302      	movs	r3, #2
 8001648:	e002      	b.n	8001650 <HAL_GPIO_Init+0x1cc>
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <HAL_GPIO_Init+0x1cc>
 800164e:	2300      	movs	r3, #0
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	2103      	movs	r1, #3
 8001654:	400a      	ands	r2, r1
 8001656:	00d2      	lsls	r2, r2, #3
 8001658:	4093      	lsls	r3, r2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001660:	4936      	ldr	r1, [pc, #216]	@ (800173c <HAL_GPIO_Init+0x2b8>)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	3318      	adds	r3, #24
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800166e:	4b33      	ldr	r3, [pc, #204]	@ (800173c <HAL_GPIO_Init+0x2b8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	43da      	mvns	r2, r3
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	2380      	movs	r3, #128	@ 0x80
 8001684:	035b      	lsls	r3, r3, #13
 8001686:	4013      	ands	r3, r2
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001692:	4b2a      	ldr	r3, [pc, #168]	@ (800173c <HAL_GPIO_Init+0x2b8>)
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001698:	4b28      	ldr	r3, [pc, #160]	@ (800173c <HAL_GPIO_Init+0x2b8>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	43da      	mvns	r2, r3
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	2380      	movs	r3, #128	@ 0x80
 80016ae:	039b      	lsls	r3, r3, #14
 80016b0:	4013      	ands	r3, r2
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016bc:	4b1f      	ldr	r3, [pc, #124]	@ (800173c <HAL_GPIO_Init+0x2b8>)
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016c2:	4a1e      	ldr	r2, [pc, #120]	@ (800173c <HAL_GPIO_Init+0x2b8>)
 80016c4:	2384      	movs	r3, #132	@ 0x84
 80016c6:	58d3      	ldr	r3, [r2, r3]
 80016c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	43da      	mvns	r2, r3
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	2380      	movs	r3, #128	@ 0x80
 80016da:	029b      	lsls	r3, r3, #10
 80016dc:	4013      	ands	r3, r2
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016e8:	4914      	ldr	r1, [pc, #80]	@ (800173c <HAL_GPIO_Init+0x2b8>)
 80016ea:	2284      	movs	r2, #132	@ 0x84
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80016f0:	4a12      	ldr	r2, [pc, #72]	@ (800173c <HAL_GPIO_Init+0x2b8>)
 80016f2:	2380      	movs	r3, #128	@ 0x80
 80016f4:	58d3      	ldr	r3, [r2, r3]
 80016f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	43da      	mvns	r2, r3
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	4013      	ands	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	2380      	movs	r3, #128	@ 0x80
 8001708:	025b      	lsls	r3, r3, #9
 800170a:	4013      	ands	r3, r2
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001716:	4909      	ldr	r1, [pc, #36]	@ (800173c <HAL_GPIO_Init+0x2b8>)
 8001718:	2280      	movs	r2, #128	@ 0x80
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	3301      	adds	r3, #1
 8001722:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	40da      	lsrs	r2, r3
 800172c:	1e13      	subs	r3, r2, #0
 800172e:	d000      	beq.n	8001732 <HAL_GPIO_Init+0x2ae>
 8001730:	e6b0      	b.n	8001494 <HAL_GPIO_Init+0x10>
  }
}
 8001732:	46c0      	nop			@ (mov r8, r8)
 8001734:	46c0      	nop			@ (mov r8, r8)
 8001736:	46bd      	mov	sp, r7
 8001738:	b006      	add	sp, #24
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40021800 	.word	0x40021800
 8001740:	50000400 	.word	0x50000400
 8001744:	50000800 	.word	0x50000800
 8001748:	50000c00 	.word	0x50000c00

0800174c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001754:	4b19      	ldr	r3, [pc, #100]	@ (80017bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a19      	ldr	r2, [pc, #100]	@ (80017c0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800175a:	4013      	ands	r3, r2
 800175c:	0019      	movs	r1, r3
 800175e:	4b17      	ldr	r3, [pc, #92]	@ (80017bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	430a      	orrs	r2, r1
 8001764:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	2380      	movs	r3, #128	@ 0x80
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	429a      	cmp	r2, r3
 800176e:	d11f      	bne.n	80017b0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001770:	4b14      	ldr	r3, [pc, #80]	@ (80017c4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	0013      	movs	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	189b      	adds	r3, r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4912      	ldr	r1, [pc, #72]	@ (80017c8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800177e:	0018      	movs	r0, r3
 8001780:	f7fe fcbe 	bl	8000100 <__udivsi3>
 8001784:	0003      	movs	r3, r0
 8001786:	3301      	adds	r3, #1
 8001788:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800178a:	e008      	b.n	800179e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	3b01      	subs	r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	e001      	b.n	800179e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e009      	b.n	80017b2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800179e:	4b07      	ldr	r3, [pc, #28]	@ (80017bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017a0:	695a      	ldr	r2, [r3, #20]
 80017a2:	2380      	movs	r3, #128	@ 0x80
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	401a      	ands	r2, r3
 80017a8:	2380      	movs	r3, #128	@ 0x80
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d0ed      	beq.n	800178c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	0018      	movs	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b004      	add	sp, #16
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			@ (mov r8, r8)
 80017bc:	40007000 	.word	0x40007000
 80017c0:	fffff9ff 	.word	0xfffff9ff
 80017c4:	20000000 	.word	0x20000000
 80017c8:	000f4240 	.word	0x000f4240

080017cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e2f3      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2201      	movs	r2, #1
 80017e4:	4013      	ands	r3, r2
 80017e6:	d100      	bne.n	80017ea <HAL_RCC_OscConfig+0x1e>
 80017e8:	e07c      	b.n	80018e4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ea:	4bc3      	ldr	r3, [pc, #780]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2238      	movs	r2, #56	@ 0x38
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017f4:	4bc0      	ldr	r3, [pc, #768]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2203      	movs	r2, #3
 80017fa:	4013      	ands	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	2b10      	cmp	r3, #16
 8001802:	d102      	bne.n	800180a <HAL_RCC_OscConfig+0x3e>
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	2b03      	cmp	r3, #3
 8001808:	d002      	beq.n	8001810 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	2b08      	cmp	r3, #8
 800180e:	d10b      	bne.n	8001828 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	4bb9      	ldr	r3, [pc, #740]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2380      	movs	r3, #128	@ 0x80
 8001816:	029b      	lsls	r3, r3, #10
 8001818:	4013      	ands	r3, r2
 800181a:	d062      	beq.n	80018e2 <HAL_RCC_OscConfig+0x116>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d15e      	bne.n	80018e2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e2ce      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	2380      	movs	r3, #128	@ 0x80
 800182e:	025b      	lsls	r3, r3, #9
 8001830:	429a      	cmp	r2, r3
 8001832:	d107      	bne.n	8001844 <HAL_RCC_OscConfig+0x78>
 8001834:	4bb0      	ldr	r3, [pc, #704]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4baf      	ldr	r3, [pc, #700]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 800183a:	2180      	movs	r1, #128	@ 0x80
 800183c:	0249      	lsls	r1, r1, #9
 800183e:	430a      	orrs	r2, r1
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	e020      	b.n	8001886 <HAL_RCC_OscConfig+0xba>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	23a0      	movs	r3, #160	@ 0xa0
 800184a:	02db      	lsls	r3, r3, #11
 800184c:	429a      	cmp	r2, r3
 800184e:	d10e      	bne.n	800186e <HAL_RCC_OscConfig+0xa2>
 8001850:	4ba9      	ldr	r3, [pc, #676]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4ba8      	ldr	r3, [pc, #672]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001856:	2180      	movs	r1, #128	@ 0x80
 8001858:	02c9      	lsls	r1, r1, #11
 800185a:	430a      	orrs	r2, r1
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	4ba6      	ldr	r3, [pc, #664]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4ba5      	ldr	r3, [pc, #660]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001864:	2180      	movs	r1, #128	@ 0x80
 8001866:	0249      	lsls	r1, r1, #9
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	e00b      	b.n	8001886 <HAL_RCC_OscConfig+0xba>
 800186e:	4ba2      	ldr	r3, [pc, #648]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4ba1      	ldr	r3, [pc, #644]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001874:	49a1      	ldr	r1, [pc, #644]	@ (8001afc <HAL_RCC_OscConfig+0x330>)
 8001876:	400a      	ands	r2, r1
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	4b9f      	ldr	r3, [pc, #636]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4b9e      	ldr	r3, [pc, #632]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001880:	499f      	ldr	r1, [pc, #636]	@ (8001b00 <HAL_RCC_OscConfig+0x334>)
 8001882:	400a      	ands	r2, r1
 8001884:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d014      	beq.n	80018b8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188e:	f7ff fa31 	bl	8000cf4 <HAL_GetTick>
 8001892:	0003      	movs	r3, r0
 8001894:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001898:	f7ff fa2c 	bl	8000cf4 <HAL_GetTick>
 800189c:	0002      	movs	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b64      	cmp	r3, #100	@ 0x64
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e28d      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018aa:	4b93      	ldr	r3, [pc, #588]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	2380      	movs	r3, #128	@ 0x80
 80018b0:	029b      	lsls	r3, r3, #10
 80018b2:	4013      	ands	r3, r2
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0xcc>
 80018b6:	e015      	b.n	80018e4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff fa1c 	bl	8000cf4 <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c2:	f7ff fa17 	bl	8000cf4 <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b64      	cmp	r3, #100	@ 0x64
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e278      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018d4:	4b88      	ldr	r3, [pc, #544]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	2380      	movs	r3, #128	@ 0x80
 80018da:	029b      	lsls	r3, r3, #10
 80018dc:	4013      	ands	r3, r2
 80018de:	d1f0      	bne.n	80018c2 <HAL_RCC_OscConfig+0xf6>
 80018e0:	e000      	b.n	80018e4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2202      	movs	r2, #2
 80018ea:	4013      	ands	r3, r2
 80018ec:	d100      	bne.n	80018f0 <HAL_RCC_OscConfig+0x124>
 80018ee:	e099      	b.n	8001a24 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018f0:	4b81      	ldr	r3, [pc, #516]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2238      	movs	r2, #56	@ 0x38
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018fa:	4b7f      	ldr	r3, [pc, #508]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2203      	movs	r2, #3
 8001900:	4013      	ands	r3, r2
 8001902:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2b10      	cmp	r3, #16
 8001908:	d102      	bne.n	8001910 <HAL_RCC_OscConfig+0x144>
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d002      	beq.n	8001916 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d135      	bne.n	8001982 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001916:	4b78      	ldr	r3, [pc, #480]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	2380      	movs	r3, #128	@ 0x80
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	4013      	ands	r3, r2
 8001920:	d005      	beq.n	800192e <HAL_RCC_OscConfig+0x162>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e24b      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192e:	4b72      	ldr	r3, [pc, #456]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4a74      	ldr	r2, [pc, #464]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001934:	4013      	ands	r3, r2
 8001936:	0019      	movs	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	021a      	lsls	r2, r3, #8
 800193e:	4b6e      	ldr	r3, [pc, #440]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001940:	430a      	orrs	r2, r1
 8001942:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d112      	bne.n	8001970 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800194a:	4b6b      	ldr	r3, [pc, #428]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a6e      	ldr	r2, [pc, #440]	@ (8001b08 <HAL_RCC_OscConfig+0x33c>)
 8001950:	4013      	ands	r3, r2
 8001952:	0019      	movs	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691a      	ldr	r2, [r3, #16]
 8001958:	4b67      	ldr	r3, [pc, #412]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 800195a:	430a      	orrs	r2, r1
 800195c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800195e:	4b66      	ldr	r3, [pc, #408]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	0adb      	lsrs	r3, r3, #11
 8001964:	2207      	movs	r2, #7
 8001966:	4013      	ands	r3, r2
 8001968:	4a68      	ldr	r2, [pc, #416]	@ (8001b0c <HAL_RCC_OscConfig+0x340>)
 800196a:	40da      	lsrs	r2, r3
 800196c:	4b68      	ldr	r3, [pc, #416]	@ (8001b10 <HAL_RCC_OscConfig+0x344>)
 800196e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001970:	4b68      	ldr	r3, [pc, #416]	@ (8001b14 <HAL_RCC_OscConfig+0x348>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	0018      	movs	r0, r3
 8001976:	f7ff f961 	bl	8000c3c <HAL_InitTick>
 800197a:	1e03      	subs	r3, r0, #0
 800197c:	d051      	beq.n	8001a22 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e221      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d030      	beq.n	80019ec <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800198a:	4b5b      	ldr	r3, [pc, #364]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a5e      	ldr	r2, [pc, #376]	@ (8001b08 <HAL_RCC_OscConfig+0x33c>)
 8001990:	4013      	ands	r3, r2
 8001992:	0019      	movs	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	4b57      	ldr	r3, [pc, #348]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 800199a:	430a      	orrs	r2, r1
 800199c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800199e:	4b56      	ldr	r3, [pc, #344]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4b55      	ldr	r3, [pc, #340]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	0049      	lsls	r1, r1, #1
 80019a8:	430a      	orrs	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff f9a2 	bl	8000cf4 <HAL_GetTick>
 80019b0:	0003      	movs	r3, r0
 80019b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b6:	f7ff f99d 	bl	8000cf4 <HAL_GetTick>
 80019ba:	0002      	movs	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e1fe      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c8:	4b4b      	ldr	r3, [pc, #300]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2380      	movs	r3, #128	@ 0x80
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4013      	ands	r3, r2
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d4:	4b48      	ldr	r3, [pc, #288]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	4a4a      	ldr	r2, [pc, #296]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 80019da:	4013      	ands	r3, r2
 80019dc:	0019      	movs	r1, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	021a      	lsls	r2, r3, #8
 80019e4:	4b44      	ldr	r3, [pc, #272]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80019e6:	430a      	orrs	r2, r1
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	e01b      	b.n	8001a24 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80019ec:	4b42      	ldr	r3, [pc, #264]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b41      	ldr	r3, [pc, #260]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80019f2:	4949      	ldr	r1, [pc, #292]	@ (8001b18 <HAL_RCC_OscConfig+0x34c>)
 80019f4:	400a      	ands	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff f97c 	bl	8000cf4 <HAL_GetTick>
 80019fc:	0003      	movs	r3, r0
 80019fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a02:	f7ff f977 	bl	8000cf4 <HAL_GetTick>
 8001a06:	0002      	movs	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e1d8      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a14:	4b38      	ldr	r3, [pc, #224]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	2380      	movs	r3, #128	@ 0x80
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d1f0      	bne.n	8001a02 <HAL_RCC_OscConfig+0x236>
 8001a20:	e000      	b.n	8001a24 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a22:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2208      	movs	r2, #8
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d047      	beq.n	8001abe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a2e:	4b32      	ldr	r3, [pc, #200]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2238      	movs	r2, #56	@ 0x38
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b18      	cmp	r3, #24
 8001a38:	d10a      	bne.n	8001a50 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a3e:	2202      	movs	r2, #2
 8001a40:	4013      	ands	r3, r2
 8001a42:	d03c      	beq.n	8001abe <HAL_RCC_OscConfig+0x2f2>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d138      	bne.n	8001abe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e1ba      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d019      	beq.n	8001a8c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a58:	4b27      	ldr	r3, [pc, #156]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a5a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a5c:	4b26      	ldr	r3, [pc, #152]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a5e:	2101      	movs	r1, #1
 8001a60:	430a      	orrs	r2, r1
 8001a62:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff f946 	bl	8000cf4 <HAL_GetTick>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a6e:	f7ff f941 	bl	8000cf4 <HAL_GetTick>
 8001a72:	0002      	movs	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e1a2      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a80:	4b1d      	ldr	r3, [pc, #116]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a84:	2202      	movs	r2, #2
 8001a86:	4013      	ands	r3, r2
 8001a88:	d0f1      	beq.n	8001a6e <HAL_RCC_OscConfig+0x2a2>
 8001a8a:	e018      	b.n	8001abe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a8e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a90:	4b19      	ldr	r3, [pc, #100]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a92:	2101      	movs	r1, #1
 8001a94:	438a      	bics	r2, r1
 8001a96:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff f92c 	bl	8000cf4 <HAL_GetTick>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa2:	f7ff f927 	bl	8000cf4 <HAL_GetTick>
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e188      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ab4:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ab8:	2202      	movs	r2, #2
 8001aba:	4013      	ands	r3, r2
 8001abc:	d1f1      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d100      	bne.n	8001aca <HAL_RCC_OscConfig+0x2fe>
 8001ac8:	e0c6      	b.n	8001c58 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aca:	231f      	movs	r3, #31
 8001acc:	18fb      	adds	r3, r7, r3
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ad2:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2238      	movs	r2, #56	@ 0x38
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b20      	cmp	r3, #32
 8001adc:	d11e      	bne.n	8001b1c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001ade:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d100      	bne.n	8001aea <HAL_RCC_OscConfig+0x31e>
 8001ae8:	e0b6      	b.n	8001c58 <HAL_RCC_OscConfig+0x48c>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d000      	beq.n	8001af4 <HAL_RCC_OscConfig+0x328>
 8001af2:	e0b1      	b.n	8001c58 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e166      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5fa>
 8001af8:	40021000 	.word	0x40021000
 8001afc:	fffeffff 	.word	0xfffeffff
 8001b00:	fffbffff 	.word	0xfffbffff
 8001b04:	ffff80ff 	.word	0xffff80ff
 8001b08:	ffffc7ff 	.word	0xffffc7ff
 8001b0c:	00f42400 	.word	0x00f42400
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000004 	.word	0x20000004
 8001b18:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b1c:	4bac      	ldr	r3, [pc, #688]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001b1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b20:	2380      	movs	r3, #128	@ 0x80
 8001b22:	055b      	lsls	r3, r3, #21
 8001b24:	4013      	ands	r3, r2
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_OscConfig+0x360>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <HAL_RCC_OscConfig+0x362>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d011      	beq.n	8001b56 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	4ba7      	ldr	r3, [pc, #668]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001b34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b36:	4ba6      	ldr	r3, [pc, #664]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001b38:	2180      	movs	r1, #128	@ 0x80
 8001b3a:	0549      	lsls	r1, r1, #21
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b40:	4ba3      	ldr	r3, [pc, #652]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001b42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b44:	2380      	movs	r3, #128	@ 0x80
 8001b46:	055b      	lsls	r3, r3, #21
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001b4e:	231f      	movs	r3, #31
 8001b50:	18fb      	adds	r3, r7, r3
 8001b52:	2201      	movs	r2, #1
 8001b54:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b56:	4b9f      	ldr	r3, [pc, #636]	@ (8001dd4 <HAL_RCC_OscConfig+0x608>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	2380      	movs	r3, #128	@ 0x80
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d11a      	bne.n	8001b98 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b62:	4b9c      	ldr	r3, [pc, #624]	@ (8001dd4 <HAL_RCC_OscConfig+0x608>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4b9b      	ldr	r3, [pc, #620]	@ (8001dd4 <HAL_RCC_OscConfig+0x608>)
 8001b68:	2180      	movs	r1, #128	@ 0x80
 8001b6a:	0049      	lsls	r1, r1, #1
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001b70:	f7ff f8c0 	bl	8000cf4 <HAL_GetTick>
 8001b74:	0003      	movs	r3, r0
 8001b76:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7a:	f7ff f8bb 	bl	8000cf4 <HAL_GetTick>
 8001b7e:	0002      	movs	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e11c      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b8c:	4b91      	ldr	r3, [pc, #580]	@ (8001dd4 <HAL_RCC_OscConfig+0x608>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	2380      	movs	r3, #128	@ 0x80
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4013      	ands	r3, r2
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x3e2>
 8001ba0:	4b8b      	ldr	r3, [pc, #556]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001ba2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ba4:	4b8a      	ldr	r3, [pc, #552]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bac:	e01c      	b.n	8001be8 <HAL_RCC_OscConfig+0x41c>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2b05      	cmp	r3, #5
 8001bb4:	d10c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x404>
 8001bb6:	4b86      	ldr	r3, [pc, #536]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001bb8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bba:	4b85      	ldr	r3, [pc, #532]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001bbc:	2104      	movs	r1, #4
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bc2:	4b83      	ldr	r3, [pc, #524]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001bc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bc6:	4b82      	ldr	r3, [pc, #520]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001bc8:	2101      	movs	r1, #1
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bce:	e00b      	b.n	8001be8 <HAL_RCC_OscConfig+0x41c>
 8001bd0:	4b7f      	ldr	r3, [pc, #508]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001bd2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bd4:	4b7e      	ldr	r3, [pc, #504]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	438a      	bics	r2, r1
 8001bda:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bdc:	4b7c      	ldr	r3, [pc, #496]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001bde:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001be0:	4b7b      	ldr	r3, [pc, #492]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001be2:	2104      	movs	r1, #4
 8001be4:	438a      	bics	r2, r1
 8001be6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d014      	beq.n	8001c1a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f880 	bl	8000cf4 <HAL_GetTick>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bf8:	e009      	b.n	8001c0e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f7ff f87b 	bl	8000cf4 <HAL_GetTick>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	4a74      	ldr	r2, [pc, #464]	@ (8001dd8 <HAL_RCC_OscConfig+0x60c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e0db      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c0e:	4b70      	ldr	r3, [pc, #448]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c12:	2202      	movs	r2, #2
 8001c14:	4013      	ands	r3, r2
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x42e>
 8001c18:	e013      	b.n	8001c42 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1a:	f7ff f86b 	bl	8000cf4 <HAL_GetTick>
 8001c1e:	0003      	movs	r3, r0
 8001c20:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c22:	e009      	b.n	8001c38 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c24:	f7ff f866 	bl	8000cf4 <HAL_GetTick>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	4a6a      	ldr	r2, [pc, #424]	@ (8001dd8 <HAL_RCC_OscConfig+0x60c>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e0c6      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c38:	4b65      	ldr	r3, [pc, #404]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001c42:	231f      	movs	r3, #31
 8001c44:	18fb      	adds	r3, r7, r3
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d105      	bne.n	8001c58 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c4c:	4b60      	ldr	r3, [pc, #384]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001c4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c50:	4b5f      	ldr	r3, [pc, #380]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001c52:	4962      	ldr	r1, [pc, #392]	@ (8001ddc <HAL_RCC_OscConfig+0x610>)
 8001c54:	400a      	ands	r2, r1
 8001c56:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d100      	bne.n	8001c62 <HAL_RCC_OscConfig+0x496>
 8001c60:	e0b0      	b.n	8001dc4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c62:	4b5b      	ldr	r3, [pc, #364]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2238      	movs	r2, #56	@ 0x38
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b10      	cmp	r3, #16
 8001c6c:	d100      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4a4>
 8001c6e:	e078      	b.n	8001d62 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d153      	bne.n	8001d20 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c78:	4b55      	ldr	r3, [pc, #340]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4b54      	ldr	r3, [pc, #336]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001c7e:	4958      	ldr	r1, [pc, #352]	@ (8001de0 <HAL_RCC_OscConfig+0x614>)
 8001c80:	400a      	ands	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7ff f836 	bl	8000cf4 <HAL_GetTick>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7ff f831 	bl	8000cf4 <HAL_GetTick>
 8001c92:	0002      	movs	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e092      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca0:	4b4b      	ldr	r3, [pc, #300]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2380      	movs	r3, #128	@ 0x80
 8001ca6:	049b      	lsls	r3, r3, #18
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cac:	4b48      	ldr	r3, [pc, #288]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	4a4c      	ldr	r2, [pc, #304]	@ (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1a      	ldr	r2, [r3, #32]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc4:	021b      	lsls	r3, r3, #8
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	4b3e      	ldr	r3, [pc, #248]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cda:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	4b3c      	ldr	r3, [pc, #240]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001ce0:	2180      	movs	r1, #128	@ 0x80
 8001ce2:	0449      	lsls	r1, r1, #17
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001ce8:	4b39      	ldr	r3, [pc, #228]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	4b38      	ldr	r3, [pc, #224]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001cee:	2180      	movs	r1, #128	@ 0x80
 8001cf0:	0549      	lsls	r1, r1, #21
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf6:	f7fe fffd 	bl	8000cf4 <HAL_GetTick>
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d00:	f7fe fff8 	bl	8000cf4 <HAL_GetTick>
 8001d04:	0002      	movs	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e059      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d12:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	2380      	movs	r3, #128	@ 0x80
 8001d18:	049b      	lsls	r3, r3, #18
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x534>
 8001d1e:	e051      	b.n	8001dc4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d20:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001d26:	492e      	ldr	r1, [pc, #184]	@ (8001de0 <HAL_RCC_OscConfig+0x614>)
 8001d28:	400a      	ands	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7fe ffe2 	bl	8000cf4 <HAL_GetTick>
 8001d30:	0003      	movs	r3, r0
 8001d32:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d36:	f7fe ffdd 	bl	8000cf4 <HAL_GetTick>
 8001d3a:	0002      	movs	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e03e      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d48:	4b21      	ldr	r3, [pc, #132]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	2380      	movs	r3, #128	@ 0x80
 8001d4e:	049b      	lsls	r3, r3, #18
 8001d50:	4013      	ands	r3, r2
 8001d52:	d1f0      	bne.n	8001d36 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001d54:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001d5a:	4923      	ldr	r1, [pc, #140]	@ (8001de8 <HAL_RCC_OscConfig+0x61c>)
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	60da      	str	r2, [r3, #12]
 8001d60:	e030      	b.n	8001dc4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d101      	bne.n	8001d6e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e02b      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001d6e:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <HAL_RCC_OscConfig+0x604>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2203      	movs	r2, #3
 8001d78:	401a      	ands	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d11e      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2270      	movs	r2, #112	@ 0x70
 8001d86:	401a      	ands	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d117      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	23fe      	movs	r3, #254	@ 0xfe
 8001d94:	01db      	lsls	r3, r3, #7
 8001d96:	401a      	ands	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d10e      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	23f8      	movs	r3, #248	@ 0xf8
 8001da6:	039b      	lsls	r3, r3, #14
 8001da8:	401a      	ands	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d106      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	0f5b      	lsrs	r3, r3, #29
 8001db6:	075a      	lsls	r2, r3, #29
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b008      	add	sp, #32
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40007000 	.word	0x40007000
 8001dd8:	00001388 	.word	0x00001388
 8001ddc:	efffffff 	.word	0xefffffff
 8001de0:	feffffff 	.word	0xfeffffff
 8001de4:	1fc1808c 	.word	0x1fc1808c
 8001de8:	effefffc 	.word	0xeffefffc

08001dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0e9      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e00:	4b76      	ldr	r3, [pc, #472]	@ (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2207      	movs	r2, #7
 8001e06:	4013      	ands	r3, r2
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d91e      	bls.n	8001e4c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b73      	ldr	r3, [pc, #460]	@ (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2207      	movs	r2, #7
 8001e14:	4393      	bics	r3, r2
 8001e16:	0019      	movs	r1, r3
 8001e18:	4b70      	ldr	r3, [pc, #448]	@ (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e20:	f7fe ff68 	bl	8000cf4 <HAL_GetTick>
 8001e24:	0003      	movs	r3, r0
 8001e26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e28:	e009      	b.n	8001e3e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2a:	f7fe ff63 	bl	8000cf4 <HAL_GetTick>
 8001e2e:	0002      	movs	r2, r0
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	4a6a      	ldr	r2, [pc, #424]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1f4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e0ca      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e3e:	4b67      	ldr	r3, [pc, #412]	@ (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2207      	movs	r2, #7
 8001e44:	4013      	ands	r3, r2
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d1ee      	bne.n	8001e2a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2202      	movs	r2, #2
 8001e52:	4013      	ands	r3, r2
 8001e54:	d015      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d006      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e60:	4b60      	ldr	r3, [pc, #384]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	4b5f      	ldr	r3, [pc, #380]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e66:	21e0      	movs	r1, #224	@ 0xe0
 8001e68:	01c9      	lsls	r1, r1, #7
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e6e:	4b5d      	ldr	r3, [pc, #372]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	4a5d      	ldr	r2, [pc, #372]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1fc>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	0019      	movs	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	4b59      	ldr	r3, [pc, #356]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2201      	movs	r2, #1
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d057      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d107      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e94:	4b53      	ldr	r3, [pc, #332]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	2380      	movs	r3, #128	@ 0x80
 8001e9a:	029b      	lsls	r3, r3, #10
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d12b      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e097      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d107      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eac:	4b4d      	ldr	r3, [pc, #308]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	2380      	movs	r3, #128	@ 0x80
 8001eb2:	049b      	lsls	r3, r3, #18
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d11f      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e08b      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d107      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec4:	4b47      	ldr	r3, [pc, #284]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2380      	movs	r3, #128	@ 0x80
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d113      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e07f      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d106      	bne.n	8001eea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001edc:	4b41      	ldr	r3, [pc, #260]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d108      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e074      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eea:	4b3e      	ldr	r3, [pc, #248]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eee:	2202      	movs	r2, #2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e06d      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ef8:	4b3a      	ldr	r3, [pc, #232]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2207      	movs	r2, #7
 8001efe:	4393      	bics	r3, r2
 8001f00:	0019      	movs	r1, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	4b37      	ldr	r3, [pc, #220]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f0c:	f7fe fef2 	bl	8000cf4 <HAL_GetTick>
 8001f10:	0003      	movs	r3, r0
 8001f12:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f14:	e009      	b.n	8001f2a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f16:	f7fe feed 	bl	8000cf4 <HAL_GetTick>
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	4a2f      	ldr	r2, [pc, #188]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1f4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e054      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2238      	movs	r2, #56	@ 0x38
 8001f30:	401a      	ands	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d1ec      	bne.n	8001f16 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b27      	ldr	r3, [pc, #156]	@ (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2207      	movs	r2, #7
 8001f42:	4013      	ands	r3, r2
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d21e      	bcs.n	8001f88 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b24      	ldr	r3, [pc, #144]	@ (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2207      	movs	r2, #7
 8001f50:	4393      	bics	r3, r2
 8001f52:	0019      	movs	r1, r3
 8001f54:	4b21      	ldr	r3, [pc, #132]	@ (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f5c:	f7fe feca 	bl	8000cf4 <HAL_GetTick>
 8001f60:	0003      	movs	r3, r0
 8001f62:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f64:	e009      	b.n	8001f7a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f66:	f7fe fec5 	bl	8000cf4 <HAL_GetTick>
 8001f6a:	0002      	movs	r2, r0
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1f4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e02c      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f7a:	4b18      	ldr	r3, [pc, #96]	@ (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2207      	movs	r2, #7
 8001f80:	4013      	ands	r3, r2
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d1ee      	bne.n	8001f66 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2204      	movs	r2, #4
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d009      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f92:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	4a15      	ldr	r2, [pc, #84]	@ (8001fec <HAL_RCC_ClockConfig+0x200>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001fa6:	f000 f829 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8001faa:	0001      	movs	r1, r0
 8001fac:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff0 <HAL_RCC_ClockConfig+0x204>)
 8001fb8:	0092      	lsls	r2, r2, #2
 8001fba:	58d3      	ldr	r3, [r2, r3]
 8001fbc:	221f      	movs	r2, #31
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	000a      	movs	r2, r1
 8001fc2:	40da      	lsrs	r2, r3
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff4 <HAL_RCC_ClockConfig+0x208>)
 8001fc6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff8 <HAL_RCC_ClockConfig+0x20c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f7fe fe35 	bl	8000c3c <HAL_InitTick>
 8001fd2:	0003      	movs	r3, r0
}
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b004      	add	sp, #16
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40022000 	.word	0x40022000
 8001fe0:	00001388 	.word	0x00001388
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	fffff0ff 	.word	0xfffff0ff
 8001fec:	ffff8fff 	.word	0xffff8fff
 8001ff0:	080032bc 	.word	0x080032bc
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	20000004 	.word	0x20000004

08001ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002002:	4b3c      	ldr	r3, [pc, #240]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2238      	movs	r2, #56	@ 0x38
 8002008:	4013      	ands	r3, r2
 800200a:	d10f      	bne.n	800202c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800200c:	4b39      	ldr	r3, [pc, #228]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0adb      	lsrs	r3, r3, #11
 8002012:	2207      	movs	r2, #7
 8002014:	4013      	ands	r3, r2
 8002016:	2201      	movs	r2, #1
 8002018:	409a      	lsls	r2, r3
 800201a:	0013      	movs	r3, r2
 800201c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800201e:	6839      	ldr	r1, [r7, #0]
 8002020:	4835      	ldr	r0, [pc, #212]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002022:	f7fe f86d 	bl	8000100 <__udivsi3>
 8002026:	0003      	movs	r3, r0
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	e05d      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800202c:	4b31      	ldr	r3, [pc, #196]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2238      	movs	r2, #56	@ 0x38
 8002032:	4013      	ands	r3, r2
 8002034:	2b08      	cmp	r3, #8
 8002036:	d102      	bne.n	800203e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002038:	4b2f      	ldr	r3, [pc, #188]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	e054      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800203e:	4b2d      	ldr	r3, [pc, #180]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2238      	movs	r2, #56	@ 0x38
 8002044:	4013      	ands	r3, r2
 8002046:	2b10      	cmp	r3, #16
 8002048:	d138      	bne.n	80020bc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800204a:	4b2a      	ldr	r3, [pc, #168]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	2203      	movs	r2, #3
 8002050:	4013      	ands	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002054:	4b27      	ldr	r3, [pc, #156]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	2207      	movs	r2, #7
 800205c:	4013      	ands	r3, r2
 800205e:	3301      	adds	r3, #1
 8002060:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b03      	cmp	r3, #3
 8002066:	d10d      	bne.n	8002084 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	4823      	ldr	r0, [pc, #140]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800206c:	f7fe f848 	bl	8000100 <__udivsi3>
 8002070:	0003      	movs	r3, r0
 8002072:	0019      	movs	r1, r3
 8002074:	4b1f      	ldr	r3, [pc, #124]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	227f      	movs	r2, #127	@ 0x7f
 800207c:	4013      	ands	r3, r2
 800207e:	434b      	muls	r3, r1
 8002080:	617b      	str	r3, [r7, #20]
        break;
 8002082:	e00d      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	481c      	ldr	r0, [pc, #112]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002088:	f7fe f83a 	bl	8000100 <__udivsi3>
 800208c:	0003      	movs	r3, r0
 800208e:	0019      	movs	r1, r3
 8002090:	4b18      	ldr	r3, [pc, #96]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	227f      	movs	r2, #127	@ 0x7f
 8002098:	4013      	ands	r3, r2
 800209a:	434b      	muls	r3, r1
 800209c:	617b      	str	r3, [r7, #20]
        break;
 800209e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80020a0:	4b14      	ldr	r3, [pc, #80]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	0f5b      	lsrs	r3, r3, #29
 80020a6:	2207      	movs	r2, #7
 80020a8:	4013      	ands	r3, r2
 80020aa:	3301      	adds	r3, #1
 80020ac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	6978      	ldr	r0, [r7, #20]
 80020b2:	f7fe f825 	bl	8000100 <__udivsi3>
 80020b6:	0003      	movs	r3, r0
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	e015      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80020bc:	4b0d      	ldr	r3, [pc, #52]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2238      	movs	r2, #56	@ 0x38
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b20      	cmp	r3, #32
 80020c6:	d103      	bne.n	80020d0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80020c8:	2380      	movs	r3, #128	@ 0x80
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	e00b      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80020d0:	4b08      	ldr	r3, [pc, #32]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2238      	movs	r2, #56	@ 0x38
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b18      	cmp	r3, #24
 80020da:	d103      	bne.n	80020e4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80020dc:	23fa      	movs	r3, #250	@ 0xfa
 80020de:	01db      	lsls	r3, r3, #7
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	e001      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80020e8:	693b      	ldr	r3, [r7, #16]
}
 80020ea:	0018      	movs	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b006      	add	sp, #24
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			@ (mov r8, r8)
 80020f4:	40021000 	.word	0x40021000
 80020f8:	00f42400 	.word	0x00f42400

080020fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e04a      	b.n	80021a4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	223d      	movs	r2, #61	@ 0x3d
 8002112:	5c9b      	ldrb	r3, [r3, r2]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d107      	bne.n	800212a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	223c      	movs	r2, #60	@ 0x3c
 800211e:	2100      	movs	r1, #0
 8002120:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	0018      	movs	r0, r3
 8002126:	f7fe fa13 	bl	8000550 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	223d      	movs	r2, #61	@ 0x3d
 800212e:	2102      	movs	r1, #2
 8002130:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3304      	adds	r3, #4
 800213a:	0019      	movs	r1, r3
 800213c:	0010      	movs	r0, r2
 800213e:	f000 fce9 	bl	8002b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2248      	movs	r2, #72	@ 0x48
 8002146:	2101      	movs	r1, #1
 8002148:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	223e      	movs	r2, #62	@ 0x3e
 800214e:	2101      	movs	r1, #1
 8002150:	5499      	strb	r1, [r3, r2]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	223f      	movs	r2, #63	@ 0x3f
 8002156:	2101      	movs	r1, #1
 8002158:	5499      	strb	r1, [r3, r2]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2240      	movs	r2, #64	@ 0x40
 800215e:	2101      	movs	r1, #1
 8002160:	5499      	strb	r1, [r3, r2]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2241      	movs	r2, #65	@ 0x41
 8002166:	2101      	movs	r1, #1
 8002168:	5499      	strb	r1, [r3, r2]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2242      	movs	r2, #66	@ 0x42
 800216e:	2101      	movs	r1, #1
 8002170:	5499      	strb	r1, [r3, r2]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2243      	movs	r2, #67	@ 0x43
 8002176:	2101      	movs	r1, #1
 8002178:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2244      	movs	r2, #68	@ 0x44
 800217e:	2101      	movs	r1, #1
 8002180:	5499      	strb	r1, [r3, r2]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2245      	movs	r2, #69	@ 0x45
 8002186:	2101      	movs	r1, #1
 8002188:	5499      	strb	r1, [r3, r2]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2246      	movs	r2, #70	@ 0x46
 800218e:	2101      	movs	r1, #1
 8002190:	5499      	strb	r1, [r3, r2]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2247      	movs	r2, #71	@ 0x47
 8002196:	2101      	movs	r1, #1
 8002198:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	223d      	movs	r2, #61	@ 0x3d
 800219e:	2101      	movs	r1, #1
 80021a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b002      	add	sp, #8
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	001a      	movs	r2, r3
 80021ba:	1cbb      	adds	r3, r7, #2
 80021bc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021be:	2317      	movs	r3, #23
 80021c0:	18fb      	adds	r3, r7, r3
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d108      	bne.n	80021de <HAL_TIM_PWM_Start_DMA+0x32>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	223e      	movs	r2, #62	@ 0x3e
 80021d0:	5c9b      	ldrb	r3, [r3, r2]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	3b02      	subs	r3, #2
 80021d6:	425a      	negs	r2, r3
 80021d8:	4153      	adcs	r3, r2
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	e037      	b.n	800224e <HAL_TIM_PWM_Start_DMA+0xa2>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d108      	bne.n	80021f6 <HAL_TIM_PWM_Start_DMA+0x4a>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	223f      	movs	r2, #63	@ 0x3f
 80021e8:	5c9b      	ldrb	r3, [r3, r2]
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	3b02      	subs	r3, #2
 80021ee:	425a      	negs	r2, r3
 80021f0:	4153      	adcs	r3, r2
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	e02b      	b.n	800224e <HAL_TIM_PWM_Start_DMA+0xa2>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d108      	bne.n	800220e <HAL_TIM_PWM_Start_DMA+0x62>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2240      	movs	r2, #64	@ 0x40
 8002200:	5c9b      	ldrb	r3, [r3, r2]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	3b02      	subs	r3, #2
 8002206:	425a      	negs	r2, r3
 8002208:	4153      	adcs	r3, r2
 800220a:	b2db      	uxtb	r3, r3
 800220c:	e01f      	b.n	800224e <HAL_TIM_PWM_Start_DMA+0xa2>
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2b0c      	cmp	r3, #12
 8002212:	d108      	bne.n	8002226 <HAL_TIM_PWM_Start_DMA+0x7a>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2241      	movs	r2, #65	@ 0x41
 8002218:	5c9b      	ldrb	r3, [r3, r2]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	3b02      	subs	r3, #2
 800221e:	425a      	negs	r2, r3
 8002220:	4153      	adcs	r3, r2
 8002222:	b2db      	uxtb	r3, r3
 8002224:	e013      	b.n	800224e <HAL_TIM_PWM_Start_DMA+0xa2>
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2b10      	cmp	r3, #16
 800222a:	d108      	bne.n	800223e <HAL_TIM_PWM_Start_DMA+0x92>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2242      	movs	r2, #66	@ 0x42
 8002230:	5c9b      	ldrb	r3, [r3, r2]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	3b02      	subs	r3, #2
 8002236:	425a      	negs	r2, r3
 8002238:	4153      	adcs	r3, r2
 800223a:	b2db      	uxtb	r3, r3
 800223c:	e007      	b.n	800224e <HAL_TIM_PWM_Start_DMA+0xa2>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2243      	movs	r2, #67	@ 0x43
 8002242:	5c9b      	ldrb	r3, [r3, r2]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	3b02      	subs	r3, #2
 8002248:	425a      	negs	r2, r3
 800224a:	4153      	adcs	r3, r2
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8002252:	2302      	movs	r3, #2
 8002254:	e183      	b.n	800255e <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d108      	bne.n	800226e <HAL_TIM_PWM_Start_DMA+0xc2>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	223e      	movs	r2, #62	@ 0x3e
 8002260:	5c9b      	ldrb	r3, [r3, r2]
 8002262:	b2db      	uxtb	r3, r3
 8002264:	3b01      	subs	r3, #1
 8002266:	425a      	negs	r2, r3
 8002268:	4153      	adcs	r3, r2
 800226a:	b2db      	uxtb	r3, r3
 800226c:	e037      	b.n	80022de <HAL_TIM_PWM_Start_DMA+0x132>
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b04      	cmp	r3, #4
 8002272:	d108      	bne.n	8002286 <HAL_TIM_PWM_Start_DMA+0xda>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	223f      	movs	r2, #63	@ 0x3f
 8002278:	5c9b      	ldrb	r3, [r3, r2]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	425a      	negs	r2, r3
 8002280:	4153      	adcs	r3, r2
 8002282:	b2db      	uxtb	r3, r3
 8002284:	e02b      	b.n	80022de <HAL_TIM_PWM_Start_DMA+0x132>
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2b08      	cmp	r3, #8
 800228a:	d108      	bne.n	800229e <HAL_TIM_PWM_Start_DMA+0xf2>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2240      	movs	r2, #64	@ 0x40
 8002290:	5c9b      	ldrb	r3, [r3, r2]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	425a      	negs	r2, r3
 8002298:	4153      	adcs	r3, r2
 800229a:	b2db      	uxtb	r3, r3
 800229c:	e01f      	b.n	80022de <HAL_TIM_PWM_Start_DMA+0x132>
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b0c      	cmp	r3, #12
 80022a2:	d108      	bne.n	80022b6 <HAL_TIM_PWM_Start_DMA+0x10a>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2241      	movs	r2, #65	@ 0x41
 80022a8:	5c9b      	ldrb	r3, [r3, r2]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	3b01      	subs	r3, #1
 80022ae:	425a      	negs	r2, r3
 80022b0:	4153      	adcs	r3, r2
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	e013      	b.n	80022de <HAL_TIM_PWM_Start_DMA+0x132>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b10      	cmp	r3, #16
 80022ba:	d108      	bne.n	80022ce <HAL_TIM_PWM_Start_DMA+0x122>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2242      	movs	r2, #66	@ 0x42
 80022c0:	5c9b      	ldrb	r3, [r3, r2]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	425a      	negs	r2, r3
 80022c8:	4153      	adcs	r3, r2
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	e007      	b.n	80022de <HAL_TIM_PWM_Start_DMA+0x132>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2243      	movs	r2, #67	@ 0x43
 80022d2:	5c9b      	ldrb	r3, [r3, r2]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	3b01      	subs	r3, #1
 80022d8:	425a      	negs	r2, r3
 80022da:	4153      	adcs	r3, r2
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d035      	beq.n	800234e <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_TIM_PWM_Start_DMA+0x144>
 80022e8:	1cbb      	adds	r3, r7, #2
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e134      	b.n	800255e <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d104      	bne.n	8002304 <HAL_TIM_PWM_Start_DMA+0x158>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	223e      	movs	r2, #62	@ 0x3e
 80022fe:	2102      	movs	r1, #2
 8002300:	5499      	strb	r1, [r3, r2]
 8002302:	e026      	b.n	8002352 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b04      	cmp	r3, #4
 8002308:	d104      	bne.n	8002314 <HAL_TIM_PWM_Start_DMA+0x168>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	223f      	movs	r2, #63	@ 0x3f
 800230e:	2102      	movs	r1, #2
 8002310:	5499      	strb	r1, [r3, r2]
 8002312:	e01e      	b.n	8002352 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b08      	cmp	r3, #8
 8002318:	d104      	bne.n	8002324 <HAL_TIM_PWM_Start_DMA+0x178>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2240      	movs	r2, #64	@ 0x40
 800231e:	2102      	movs	r1, #2
 8002320:	5499      	strb	r1, [r3, r2]
 8002322:	e016      	b.n	8002352 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b0c      	cmp	r3, #12
 8002328:	d104      	bne.n	8002334 <HAL_TIM_PWM_Start_DMA+0x188>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2241      	movs	r2, #65	@ 0x41
 800232e:	2102      	movs	r1, #2
 8002330:	5499      	strb	r1, [r3, r2]
 8002332:	e00e      	b.n	8002352 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b10      	cmp	r3, #16
 8002338:	d104      	bne.n	8002344 <HAL_TIM_PWM_Start_DMA+0x198>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2242      	movs	r2, #66	@ 0x42
 800233e:	2102      	movs	r1, #2
 8002340:	5499      	strb	r1, [r3, r2]
 8002342:	e006      	b.n	8002352 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2243      	movs	r2, #67	@ 0x43
 8002348:	2102      	movs	r1, #2
 800234a:	5499      	strb	r1, [r3, r2]
 800234c:	e001      	b.n	8002352 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e105      	b.n	800255e <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b0c      	cmp	r3, #12
 8002356:	d100      	bne.n	800235a <HAL_TIM_PWM_Start_DMA+0x1ae>
 8002358:	e080      	b.n	800245c <HAL_TIM_PWM_Start_DMA+0x2b0>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b0c      	cmp	r3, #12
 800235e:	d900      	bls.n	8002362 <HAL_TIM_PWM_Start_DMA+0x1b6>
 8002360:	e0a1      	b.n	80024a6 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b08      	cmp	r3, #8
 8002366:	d054      	beq.n	8002412 <HAL_TIM_PWM_Start_DMA+0x266>
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b08      	cmp	r3, #8
 800236c:	d900      	bls.n	8002370 <HAL_TIM_PWM_Start_DMA+0x1c4>
 800236e:	e09a      	b.n	80024a6 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_TIM_PWM_Start_DMA+0x1d2>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b04      	cmp	r3, #4
 800237a:	d025      	beq.n	80023c8 <HAL_TIM_PWM_Start_DMA+0x21c>
 800237c:	e093      	b.n	80024a6 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002382:	4a79      	ldr	r2, [pc, #484]	@ (8002568 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002384:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	4a78      	ldr	r2, [pc, #480]	@ (800256c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800238c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002392:	4a77      	ldr	r2, [pc, #476]	@ (8002570 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002394:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	3334      	adds	r3, #52	@ 0x34
 80023a2:	001a      	movs	r2, r3
 80023a4:	1cbb      	adds	r3, r7, #2
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	f7fe fe3a 	bl	8001020 <HAL_DMA_Start_IT>
 80023ac:	1e03      	subs	r3, r0, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0d4      	b.n	800255e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2180      	movs	r1, #128	@ 0x80
 80023c0:	0089      	lsls	r1, r1, #2
 80023c2:	430a      	orrs	r2, r1
 80023c4:	60da      	str	r2, [r3, #12]
      break;
 80023c6:	e073      	b.n	80024b0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023cc:	4a66      	ldr	r2, [pc, #408]	@ (8002568 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80023ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d4:	4a65      	ldr	r2, [pc, #404]	@ (800256c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80023d6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023dc:	4a64      	ldr	r2, [pc, #400]	@ (8002570 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80023de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	3338      	adds	r3, #56	@ 0x38
 80023ec:	001a      	movs	r2, r3
 80023ee:	1cbb      	adds	r3, r7, #2
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	f7fe fe15 	bl	8001020 <HAL_DMA_Start_IT>
 80023f6:	1e03      	subs	r3, r0, #0
 80023f8:	d001      	beq.n	80023fe <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e0af      	b.n	800255e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2180      	movs	r1, #128	@ 0x80
 800240a:	00c9      	lsls	r1, r1, #3
 800240c:	430a      	orrs	r2, r1
 800240e:	60da      	str	r2, [r3, #12]
      break;
 8002410:	e04e      	b.n	80024b0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002416:	4a54      	ldr	r2, [pc, #336]	@ (8002568 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002418:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241e:	4a53      	ldr	r2, [pc, #332]	@ (800256c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002420:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002426:	4a52      	ldr	r2, [pc, #328]	@ (8002570 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002428:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	333c      	adds	r3, #60	@ 0x3c
 8002436:	001a      	movs	r2, r3
 8002438:	1cbb      	adds	r3, r7, #2
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	f7fe fdf0 	bl	8001020 <HAL_DMA_Start_IT>
 8002440:	1e03      	subs	r3, r0, #0
 8002442:	d001      	beq.n	8002448 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e08a      	b.n	800255e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2180      	movs	r1, #128	@ 0x80
 8002454:	0109      	lsls	r1, r1, #4
 8002456:	430a      	orrs	r2, r1
 8002458:	60da      	str	r2, [r3, #12]
      break;
 800245a:	e029      	b.n	80024b0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002460:	4a41      	ldr	r2, [pc, #260]	@ (8002568 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002462:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002468:	4a40      	ldr	r2, [pc, #256]	@ (800256c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800246a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002470:	4a3f      	ldr	r2, [pc, #252]	@ (8002570 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002472:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	3340      	adds	r3, #64	@ 0x40
 8002480:	001a      	movs	r2, r3
 8002482:	1cbb      	adds	r3, r7, #2
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	f7fe fdcb 	bl	8001020 <HAL_DMA_Start_IT>
 800248a:	1e03      	subs	r3, r0, #0
 800248c:	d001      	beq.n	8002492 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e065      	b.n	800255e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2180      	movs	r1, #128	@ 0x80
 800249e:	0149      	lsls	r1, r1, #5
 80024a0:	430a      	orrs	r2, r1
 80024a2:	60da      	str	r2, [r3, #12]
      break;
 80024a4:	e004      	b.n	80024b0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 80024a6:	2317      	movs	r3, #23
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	2201      	movs	r2, #1
 80024ac:	701a      	strb	r2, [r3, #0]
      break;
 80024ae:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80024b0:	2317      	movs	r3, #23
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d14e      	bne.n	8002558 <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68b9      	ldr	r1, [r7, #8]
 80024c0:	2201      	movs	r2, #1
 80024c2:	0018      	movs	r0, r3
 80024c4:	f000 fe3c 	bl	8003140 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a29      	ldr	r2, [pc, #164]	@ (8002574 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d009      	beq.n	80024e6 <HAL_TIM_PWM_Start_DMA+0x33a>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a28      	ldr	r2, [pc, #160]	@ (8002578 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d004      	beq.n	80024e6 <HAL_TIM_PWM_Start_DMA+0x33a>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a26      	ldr	r2, [pc, #152]	@ (800257c <HAL_TIM_PWM_Start_DMA+0x3d0>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d101      	bne.n	80024ea <HAL_TIM_PWM_Start_DMA+0x33e>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_TIM_PWM_Start_DMA+0x340>
 80024ea:	2300      	movs	r3, #0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2180      	movs	r1, #128	@ 0x80
 80024fc:	0209      	lsls	r1, r1, #8
 80024fe:	430a      	orrs	r2, r1
 8002500:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a1b      	ldr	r2, [pc, #108]	@ (8002574 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d004      	beq.n	8002516 <HAL_TIM_PWM_Start_DMA+0x36a>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1b      	ldr	r2, [pc, #108]	@ (8002580 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d116      	bne.n	8002544 <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a19      	ldr	r2, [pc, #100]	@ (8002584 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800251e:	4013      	ands	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	2b06      	cmp	r3, #6
 8002526:	d016      	beq.n	8002556 <HAL_TIM_PWM_Start_DMA+0x3aa>
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	2380      	movs	r3, #128	@ 0x80
 800252c:	025b      	lsls	r3, r3, #9
 800252e:	429a      	cmp	r2, r3
 8002530:	d011      	beq.n	8002556 <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2101      	movs	r1, #1
 800253e:	430a      	orrs	r2, r1
 8002540:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002542:	e008      	b.n	8002556 <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2101      	movs	r1, #1
 8002550:	430a      	orrs	r2, r1
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	e000      	b.n	8002558 <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002556:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8002558:	2317      	movs	r3, #23
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	781b      	ldrb	r3, [r3, #0]
}
 800255e:	0018      	movs	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	b006      	add	sp, #24
 8002564:	bd80      	pop	{r7, pc}
 8002566:	46c0      	nop			@ (mov r8, r8)
 8002568:	08002a01 	.word	0x08002a01
 800256c:	08002aab 	.word	0x08002aab
 8002570:	0800296d 	.word	0x0800296d
 8002574:	40012c00 	.word	0x40012c00
 8002578:	40014400 	.word	0x40014400
 800257c:	40014800 	.word	0x40014800
 8002580:	40000400 	.word	0x40000400
 8002584:	00010007 	.word	0x00010007

08002588 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002592:	230f      	movs	r3, #15
 8002594:	18fb      	adds	r3, r7, r3
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b0c      	cmp	r3, #12
 800259e:	d039      	beq.n	8002614 <HAL_TIM_PWM_Stop_DMA+0x8c>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	2b0c      	cmp	r3, #12
 80025a4:	d844      	bhi.n	8002630 <HAL_TIM_PWM_Stop_DMA+0xa8>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d025      	beq.n	80025f8 <HAL_TIM_PWM_Stop_DMA+0x70>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d83e      	bhi.n	8002630 <HAL_TIM_PWM_Stop_DMA+0xa8>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_TIM_PWM_Stop_DMA+0x38>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d00e      	beq.n	80025dc <HAL_TIM_PWM_Stop_DMA+0x54>
 80025be:	e037      	b.n	8002630 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	495a      	ldr	r1, [pc, #360]	@ (8002734 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 80025cc:	400a      	ands	r2, r1
 80025ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d4:	0018      	movs	r0, r3
 80025d6:	f7fe fda9 	bl	800112c <HAL_DMA_Abort_IT>
      break;
 80025da:	e02e      	b.n	800263a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4954      	ldr	r1, [pc, #336]	@ (8002738 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 80025e8:	400a      	ands	r2, r1
 80025ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f0:	0018      	movs	r0, r3
 80025f2:	f7fe fd9b 	bl	800112c <HAL_DMA_Abort_IT>
      break;
 80025f6:	e020      	b.n	800263a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	494e      	ldr	r1, [pc, #312]	@ (800273c <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8002604:	400a      	ands	r2, r1
 8002606:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260c:	0018      	movs	r0, r3
 800260e:	f7fe fd8d 	bl	800112c <HAL_DMA_Abort_IT>
      break;
 8002612:	e012      	b.n	800263a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4948      	ldr	r1, [pc, #288]	@ (8002740 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8002620:	400a      	ands	r2, r1
 8002622:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002628:	0018      	movs	r0, r3
 800262a:	f7fe fd7f 	bl	800112c <HAL_DMA_Abort_IT>
      break;
 800262e:	e004      	b.n	800263a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8002630:	230f      	movs	r3, #15
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
      break;
 8002638:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800263a:	230f      	movs	r3, #15
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d000      	beq.n	8002646 <HAL_TIM_PWM_Stop_DMA+0xbe>
 8002644:	e06e      	b.n	8002724 <HAL_TIM_PWM_Stop_DMA+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6839      	ldr	r1, [r7, #0]
 800264c:	2200      	movs	r2, #0
 800264e:	0018      	movs	r0, r3
 8002650:	f000 fd76 	bl	8003140 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a3a      	ldr	r2, [pc, #232]	@ (8002744 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d009      	beq.n	8002672 <HAL_TIM_PWM_Stop_DMA+0xea>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a39      	ldr	r2, [pc, #228]	@ (8002748 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d004      	beq.n	8002672 <HAL_TIM_PWM_Stop_DMA+0xea>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a37      	ldr	r2, [pc, #220]	@ (800274c <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d101      	bne.n	8002676 <HAL_TIM_PWM_Stop_DMA+0xee>
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <HAL_TIM_PWM_Stop_DMA+0xf0>
 8002676:	2300      	movs	r3, #0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d013      	beq.n	80026a4 <HAL_TIM_PWM_Stop_DMA+0x11c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	4a33      	ldr	r2, [pc, #204]	@ (8002750 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8002684:	4013      	ands	r3, r2
 8002686:	d10d      	bne.n	80026a4 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	4a31      	ldr	r2, [pc, #196]	@ (8002754 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8002690:	4013      	ands	r3, r2
 8002692:	d107      	bne.n	80026a4 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	492e      	ldr	r1, [pc, #184]	@ (8002758 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 80026a0:	400a      	ands	r2, r1
 80026a2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	4a29      	ldr	r2, [pc, #164]	@ (8002750 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	d10d      	bne.n	80026cc <HAL_TIM_PWM_Stop_DMA+0x144>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	4a27      	ldr	r2, [pc, #156]	@ (8002754 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	d107      	bne.n	80026cc <HAL_TIM_PWM_Stop_DMA+0x144>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2101      	movs	r1, #1
 80026c8:	438a      	bics	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d104      	bne.n	80026dc <HAL_TIM_PWM_Stop_DMA+0x154>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	223e      	movs	r2, #62	@ 0x3e
 80026d6:	2101      	movs	r1, #1
 80026d8:	5499      	strb	r1, [r3, r2]
 80026da:	e023      	b.n	8002724 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d104      	bne.n	80026ec <HAL_TIM_PWM_Stop_DMA+0x164>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	223f      	movs	r2, #63	@ 0x3f
 80026e6:	2101      	movs	r1, #1
 80026e8:	5499      	strb	r1, [r3, r2]
 80026ea:	e01b      	b.n	8002724 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d104      	bne.n	80026fc <HAL_TIM_PWM_Stop_DMA+0x174>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2240      	movs	r2, #64	@ 0x40
 80026f6:	2101      	movs	r1, #1
 80026f8:	5499      	strb	r1, [r3, r2]
 80026fa:	e013      	b.n	8002724 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	2b0c      	cmp	r3, #12
 8002700:	d104      	bne.n	800270c <HAL_TIM_PWM_Stop_DMA+0x184>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2241      	movs	r2, #65	@ 0x41
 8002706:	2101      	movs	r1, #1
 8002708:	5499      	strb	r1, [r3, r2]
 800270a:	e00b      	b.n	8002724 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	2b10      	cmp	r3, #16
 8002710:	d104      	bne.n	800271c <HAL_TIM_PWM_Stop_DMA+0x194>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2242      	movs	r2, #66	@ 0x42
 8002716:	2101      	movs	r1, #1
 8002718:	5499      	strb	r1, [r3, r2]
 800271a:	e003      	b.n	8002724 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2243      	movs	r2, #67	@ 0x43
 8002720:	2101      	movs	r1, #1
 8002722:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8002724:	230f      	movs	r3, #15
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	781b      	ldrb	r3, [r3, #0]
}
 800272a:	0018      	movs	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	b004      	add	sp, #16
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			@ (mov r8, r8)
 8002734:	fffffdff 	.word	0xfffffdff
 8002738:	fffffbff 	.word	0xfffffbff
 800273c:	fffff7ff 	.word	0xfffff7ff
 8002740:	ffffefff 	.word	0xffffefff
 8002744:	40012c00 	.word	0x40012c00
 8002748:	40014400 	.word	0x40014400
 800274c:	40014800 	.word	0x40014800
 8002750:	00001111 	.word	0x00001111
 8002754:	00000444 	.word	0x00000444
 8002758:	ffff7fff 	.word	0xffff7fff

0800275c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002768:	2317      	movs	r3, #23
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	223c      	movs	r2, #60	@ 0x3c
 8002774:	5c9b      	ldrb	r3, [r3, r2]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_TIM_PWM_ConfigChannel+0x22>
 800277a:	2302      	movs	r3, #2
 800277c:	e0e5      	b.n	800294a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	223c      	movs	r2, #60	@ 0x3c
 8002782:	2101      	movs	r1, #1
 8002784:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b14      	cmp	r3, #20
 800278a:	d900      	bls.n	800278e <HAL_TIM_PWM_ConfigChannel+0x32>
 800278c:	e0d1      	b.n	8002932 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	009a      	lsls	r2, r3, #2
 8002792:	4b70      	ldr	r3, [pc, #448]	@ (8002954 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002794:	18d3      	adds	r3, r2, r3
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	0011      	movs	r1, r2
 80027a2:	0018      	movs	r0, r3
 80027a4:	f000 fa30 	bl	8002c08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	699a      	ldr	r2, [r3, #24]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2108      	movs	r1, #8
 80027b4:	430a      	orrs	r2, r1
 80027b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699a      	ldr	r2, [r3, #24]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2104      	movs	r1, #4
 80027c4:	438a      	bics	r2, r1
 80027c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6999      	ldr	r1, [r3, #24]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	619a      	str	r2, [r3, #24]
      break;
 80027da:	e0af      	b.n	800293c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	0011      	movs	r1, r2
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 fa8f 	bl	8002d08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699a      	ldr	r2, [r3, #24]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2180      	movs	r1, #128	@ 0x80
 80027f6:	0109      	lsls	r1, r1, #4
 80027f8:	430a      	orrs	r2, r1
 80027fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4954      	ldr	r1, [pc, #336]	@ (8002958 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002808:	400a      	ands	r2, r1
 800280a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6999      	ldr	r1, [r3, #24]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	021a      	lsls	r2, r3, #8
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	619a      	str	r2, [r3, #24]
      break;
 8002820:	e08c      	b.n	800293c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	0011      	movs	r1, r2
 800282a:	0018      	movs	r0, r3
 800282c:	f000 faea 	bl	8002e04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	69da      	ldr	r2, [r3, #28]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2108      	movs	r1, #8
 800283c:	430a      	orrs	r2, r1
 800283e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	69da      	ldr	r2, [r3, #28]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2104      	movs	r1, #4
 800284c:	438a      	bics	r2, r1
 800284e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	69d9      	ldr	r1, [r3, #28]
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	61da      	str	r2, [r3, #28]
      break;
 8002862:	e06b      	b.n	800293c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	0011      	movs	r1, r2
 800286c:	0018      	movs	r0, r3
 800286e:	f000 fb4b 	bl	8002f08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	69da      	ldr	r2, [r3, #28]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2180      	movs	r1, #128	@ 0x80
 800287e:	0109      	lsls	r1, r1, #4
 8002880:	430a      	orrs	r2, r1
 8002882:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	69da      	ldr	r2, [r3, #28]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4932      	ldr	r1, [pc, #200]	@ (8002958 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002890:	400a      	ands	r2, r1
 8002892:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	69d9      	ldr	r1, [r3, #28]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	021a      	lsls	r2, r3, #8
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	61da      	str	r2, [r3, #28]
      break;
 80028a8:	e048      	b.n	800293c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	0011      	movs	r1, r2
 80028b2:	0018      	movs	r0, r3
 80028b4:	f000 fb8c 	bl	8002fd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2108      	movs	r1, #8
 80028c4:	430a      	orrs	r2, r1
 80028c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2104      	movs	r1, #4
 80028d4:	438a      	bics	r2, r1
 80028d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	691a      	ldr	r2, [r3, #16]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80028ea:	e027      	b.n	800293c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	0011      	movs	r1, r2
 80028f4:	0018      	movs	r0, r3
 80028f6:	f000 fbc5 	bl	8003084 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2180      	movs	r1, #128	@ 0x80
 8002906:	0109      	lsls	r1, r1, #4
 8002908:	430a      	orrs	r2, r1
 800290a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4910      	ldr	r1, [pc, #64]	@ (8002958 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002918:	400a      	ands	r2, r1
 800291a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	021a      	lsls	r2, r3, #8
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002930:	e004      	b.n	800293c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002932:	2317      	movs	r3, #23
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]
      break;
 800293a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	223c      	movs	r2, #60	@ 0x3c
 8002940:	2100      	movs	r1, #0
 8002942:	5499      	strb	r1, [r3, r2]

  return status;
 8002944:	2317      	movs	r3, #23
 8002946:	18fb      	adds	r3, r7, r3
 8002948:	781b      	ldrb	r3, [r3, #0]
}
 800294a:	0018      	movs	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	b006      	add	sp, #24
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			@ (mov r8, r8)
 8002954:	080032fc 	.word	0x080032fc
 8002958:	fffffbff 	.word	0xfffffbff

0800295c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002964:	46c0      	nop			@ (mov r8, r8)
 8002966:	46bd      	mov	sp, r7
 8002968:	b002      	add	sp, #8
 800296a:	bd80      	pop	{r7, pc}

0800296c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002978:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	429a      	cmp	r2, r3
 8002982:	d107      	bne.n	8002994 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	223e      	movs	r2, #62	@ 0x3e
 800298e:	2101      	movs	r1, #1
 8002990:	5499      	strb	r1, [r3, r2]
 8002992:	e02a      	b.n	80029ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	429a      	cmp	r2, r3
 800299c:	d107      	bne.n	80029ae <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2202      	movs	r2, #2
 80029a2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	223f      	movs	r2, #63	@ 0x3f
 80029a8:	2101      	movs	r1, #1
 80029aa:	5499      	strb	r1, [r3, r2]
 80029ac:	e01d      	b.n	80029ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d107      	bne.n	80029c8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2204      	movs	r2, #4
 80029bc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2240      	movs	r2, #64	@ 0x40
 80029c2:	2101      	movs	r1, #1
 80029c4:	5499      	strb	r1, [r3, r2]
 80029c6:	e010      	b.n	80029ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d107      	bne.n	80029e2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2208      	movs	r2, #8
 80029d6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2241      	movs	r2, #65	@ 0x41
 80029dc:	2101      	movs	r1, #1
 80029de:	5499      	strb	r1, [r3, r2]
 80029e0:	e003      	b.n	80029ea <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	223d      	movs	r2, #61	@ 0x3d
 80029e6:	2101      	movs	r1, #1
 80029e8:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	0018      	movs	r0, r3
 80029ee:	f7ff ffb5 	bl	800295c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	771a      	strb	r2, [r3, #28]
}
 80029f8:	46c0      	nop			@ (mov r8, r8)
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b004      	add	sp, #16
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d10b      	bne.n	8002a30 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d136      	bne.n	8002a94 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	223e      	movs	r2, #62	@ 0x3e
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	5499      	strb	r1, [r3, r2]
 8002a2e:	e031      	b.n	8002a94 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d10b      	bne.n	8002a52 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d125      	bne.n	8002a94 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	223f      	movs	r2, #63	@ 0x3f
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	5499      	strb	r1, [r3, r2]
 8002a50:	e020      	b.n	8002a94 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d10b      	bne.n	8002a74 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2204      	movs	r2, #4
 8002a60:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d114      	bne.n	8002a94 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2240      	movs	r2, #64	@ 0x40
 8002a6e:	2101      	movs	r1, #1
 8002a70:	5499      	strb	r1, [r3, r2]
 8002a72:	e00f      	b.n	8002a94 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d10a      	bne.n	8002a94 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2208      	movs	r2, #8
 8002a82:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d103      	bne.n	8002a94 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2241      	movs	r2, #65	@ 0x41
 8002a90:	2101      	movs	r1, #1
 8002a92:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	0018      	movs	r0, r3
 8002a98:	f7fd fbcc 	bl	8000234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	771a      	strb	r2, [r3, #28]
}
 8002aa2:	46c0      	nop			@ (mov r8, r8)
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	b004      	add	sp, #16
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d103      	bne.n	8002aca <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	771a      	strb	r2, [r3, #28]
 8002ac8:	e019      	b.n	8002afe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d103      	bne.n	8002adc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	771a      	strb	r2, [r3, #28]
 8002ada:	e010      	b.n	8002afe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d103      	bne.n	8002aee <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2204      	movs	r2, #4
 8002aea:	771a      	strb	r2, [r3, #28]
 8002aec:	e007      	b.n	8002afe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d102      	bne.n	8002afe <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2208      	movs	r2, #8
 8002afc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	0018      	movs	r0, r3
 8002b02:	f7fd fb89 	bl	8000218 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
}
 8002b0c:	46c0      	nop			@ (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b004      	add	sp, #16
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a32      	ldr	r2, [pc, #200]	@ (8002bf0 <TIM_Base_SetConfig+0xdc>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d003      	beq.n	8002b34 <TIM_Base_SetConfig+0x20>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a31      	ldr	r2, [pc, #196]	@ (8002bf4 <TIM_Base_SetConfig+0xe0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d108      	bne.n	8002b46 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2270      	movs	r2, #112	@ 0x70
 8002b38:	4393      	bics	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a29      	ldr	r2, [pc, #164]	@ (8002bf0 <TIM_Base_SetConfig+0xdc>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00f      	beq.n	8002b6e <TIM_Base_SetConfig+0x5a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a28      	ldr	r2, [pc, #160]	@ (8002bf4 <TIM_Base_SetConfig+0xe0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00b      	beq.n	8002b6e <TIM_Base_SetConfig+0x5a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a27      	ldr	r2, [pc, #156]	@ (8002bf8 <TIM_Base_SetConfig+0xe4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d007      	beq.n	8002b6e <TIM_Base_SetConfig+0x5a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a26      	ldr	r2, [pc, #152]	@ (8002bfc <TIM_Base_SetConfig+0xe8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d003      	beq.n	8002b6e <TIM_Base_SetConfig+0x5a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a25      	ldr	r2, [pc, #148]	@ (8002c00 <TIM_Base_SetConfig+0xec>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d108      	bne.n	8002b80 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4a24      	ldr	r2, [pc, #144]	@ (8002c04 <TIM_Base_SetConfig+0xf0>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2280      	movs	r2, #128	@ 0x80
 8002b84:	4393      	bics	r3, r2
 8002b86:	001a      	movs	r2, r3
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a11      	ldr	r2, [pc, #68]	@ (8002bf0 <TIM_Base_SetConfig+0xdc>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d007      	beq.n	8002bbe <TIM_Base_SetConfig+0xaa>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a12      	ldr	r2, [pc, #72]	@ (8002bfc <TIM_Base_SetConfig+0xe8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d003      	beq.n	8002bbe <TIM_Base_SetConfig+0xaa>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a11      	ldr	r2, [pc, #68]	@ (8002c00 <TIM_Base_SetConfig+0xec>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d103      	bne.n	8002bc6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d106      	bne.n	8002be6 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	4393      	bics	r3, r2
 8002be0:	001a      	movs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	611a      	str	r2, [r3, #16]
  }
}
 8002be6:	46c0      	nop			@ (mov r8, r8)
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b004      	add	sp, #16
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	46c0      	nop			@ (mov r8, r8)
 8002bf0:	40012c00 	.word	0x40012c00
 8002bf4:	40000400 	.word	0x40000400
 8002bf8:	40002000 	.word	0x40002000
 8002bfc:	40014400 	.word	0x40014400
 8002c00:	40014800 	.word	0x40014800
 8002c04:	fffffcff 	.word	0xfffffcff

08002c08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	4393      	bics	r3, r2
 8002c20:	001a      	movs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4a2e      	ldr	r2, [pc, #184]	@ (8002cf0 <TIM_OC1_SetConfig+0xe8>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	4393      	bics	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	4393      	bics	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a24      	ldr	r2, [pc, #144]	@ (8002cf4 <TIM_OC1_SetConfig+0xec>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d007      	beq.n	8002c76 <TIM_OC1_SetConfig+0x6e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a23      	ldr	r2, [pc, #140]	@ (8002cf8 <TIM_OC1_SetConfig+0xf0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d003      	beq.n	8002c76 <TIM_OC1_SetConfig+0x6e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a22      	ldr	r2, [pc, #136]	@ (8002cfc <TIM_OC1_SetConfig+0xf4>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d10c      	bne.n	8002c90 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2208      	movs	r2, #8
 8002c7a:	4393      	bics	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	4393      	bics	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a18      	ldr	r2, [pc, #96]	@ (8002cf4 <TIM_OC1_SetConfig+0xec>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d007      	beq.n	8002ca8 <TIM_OC1_SetConfig+0xa0>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a17      	ldr	r2, [pc, #92]	@ (8002cf8 <TIM_OC1_SetConfig+0xf0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d003      	beq.n	8002ca8 <TIM_OC1_SetConfig+0xa0>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a16      	ldr	r2, [pc, #88]	@ (8002cfc <TIM_OC1_SetConfig+0xf4>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d111      	bne.n	8002ccc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4a15      	ldr	r2, [pc, #84]	@ (8002d00 <TIM_OC1_SetConfig+0xf8>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4a14      	ldr	r2, [pc, #80]	@ (8002d04 <TIM_OC1_SetConfig+0xfc>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	621a      	str	r2, [r3, #32]
}
 8002ce6:	46c0      	nop			@ (mov r8, r8)
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b006      	add	sp, #24
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	46c0      	nop			@ (mov r8, r8)
 8002cf0:	fffeff8f 	.word	0xfffeff8f
 8002cf4:	40012c00 	.word	0x40012c00
 8002cf8:	40014400 	.word	0x40014400
 8002cfc:	40014800 	.word	0x40014800
 8002d00:	fffffeff 	.word	0xfffffeff
 8002d04:	fffffdff 	.word	0xfffffdff

08002d08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	2210      	movs	r2, #16
 8002d1e:	4393      	bics	r3, r2
 8002d20:	001a      	movs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4a2c      	ldr	r2, [pc, #176]	@ (8002de8 <TIM_OC2_SetConfig+0xe0>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4a2b      	ldr	r2, [pc, #172]	@ (8002dec <TIM_OC2_SetConfig+0xe4>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2220      	movs	r2, #32
 8002d52:	4393      	bics	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a22      	ldr	r2, [pc, #136]	@ (8002df0 <TIM_OC2_SetConfig+0xe8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d10d      	bne.n	8002d86 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2280      	movs	r2, #128	@ 0x80
 8002d6e:	4393      	bics	r3, r2
 8002d70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2240      	movs	r2, #64	@ 0x40
 8002d82:	4393      	bics	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a19      	ldr	r2, [pc, #100]	@ (8002df0 <TIM_OC2_SetConfig+0xe8>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d007      	beq.n	8002d9e <TIM_OC2_SetConfig+0x96>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a18      	ldr	r2, [pc, #96]	@ (8002df4 <TIM_OC2_SetConfig+0xec>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d003      	beq.n	8002d9e <TIM_OC2_SetConfig+0x96>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a17      	ldr	r2, [pc, #92]	@ (8002df8 <TIM_OC2_SetConfig+0xf0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d113      	bne.n	8002dc6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4a16      	ldr	r2, [pc, #88]	@ (8002dfc <TIM_OC2_SetConfig+0xf4>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4a15      	ldr	r2, [pc, #84]	@ (8002e00 <TIM_OC2_SetConfig+0xf8>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	621a      	str	r2, [r3, #32]
}
 8002de0:	46c0      	nop			@ (mov r8, r8)
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b006      	add	sp, #24
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	feff8fff 	.word	0xfeff8fff
 8002dec:	fffffcff 	.word	0xfffffcff
 8002df0:	40012c00 	.word	0x40012c00
 8002df4:	40014400 	.word	0x40014400
 8002df8:	40014800 	.word	0x40014800
 8002dfc:	fffffbff 	.word	0xfffffbff
 8002e00:	fffff7ff 	.word	0xfffff7ff

08002e04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	4a31      	ldr	r2, [pc, #196]	@ (8002ee0 <TIM_OC3_SetConfig+0xdc>)
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4a2d      	ldr	r2, [pc, #180]	@ (8002ee4 <TIM_OC3_SetConfig+0xe0>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2203      	movs	r2, #3
 8002e38:	4393      	bics	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	4a27      	ldr	r2, [pc, #156]	@ (8002ee8 <TIM_OC3_SetConfig+0xe4>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	021b      	lsls	r3, r3, #8
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a23      	ldr	r2, [pc, #140]	@ (8002eec <TIM_OC3_SetConfig+0xe8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d10d      	bne.n	8002e7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	4a22      	ldr	r2, [pc, #136]	@ (8002ef0 <TIM_OC3_SetConfig+0xec>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	021b      	lsls	r3, r3, #8
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	4a1e      	ldr	r2, [pc, #120]	@ (8002ef4 <TIM_OC3_SetConfig+0xf0>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a1a      	ldr	r2, [pc, #104]	@ (8002eec <TIM_OC3_SetConfig+0xe8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d007      	beq.n	8002e96 <TIM_OC3_SetConfig+0x92>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a1b      	ldr	r2, [pc, #108]	@ (8002ef8 <TIM_OC3_SetConfig+0xf4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d003      	beq.n	8002e96 <TIM_OC3_SetConfig+0x92>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a1a      	ldr	r2, [pc, #104]	@ (8002efc <TIM_OC3_SetConfig+0xf8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d113      	bne.n	8002ebe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4a19      	ldr	r2, [pc, #100]	@ (8002f00 <TIM_OC3_SetConfig+0xfc>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4a18      	ldr	r2, [pc, #96]	@ (8002f04 <TIM_OC3_SetConfig+0x100>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	621a      	str	r2, [r3, #32]
}
 8002ed8:	46c0      	nop			@ (mov r8, r8)
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b006      	add	sp, #24
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	fffffeff 	.word	0xfffffeff
 8002ee4:	fffeff8f 	.word	0xfffeff8f
 8002ee8:	fffffdff 	.word	0xfffffdff
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	fffff7ff 	.word	0xfffff7ff
 8002ef4:	fffffbff 	.word	0xfffffbff
 8002ef8:	40014400 	.word	0x40014400
 8002efc:	40014800 	.word	0x40014800
 8002f00:	ffffefff 	.word	0xffffefff
 8002f04:	ffffdfff 	.word	0xffffdfff

08002f08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	4a24      	ldr	r2, [pc, #144]	@ (8002fb0 <TIM_OC4_SetConfig+0xa8>)
 8002f1e:	401a      	ands	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4a20      	ldr	r2, [pc, #128]	@ (8002fb4 <TIM_OC4_SetConfig+0xac>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb8 <TIM_OC4_SetConfig+0xb0>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	021b      	lsls	r3, r3, #8
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002fbc <TIM_OC4_SetConfig+0xb4>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	031b      	lsls	r3, r3, #12
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a17      	ldr	r2, [pc, #92]	@ (8002fc0 <TIM_OC4_SetConfig+0xb8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d007      	beq.n	8002f78 <TIM_OC4_SetConfig+0x70>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a16      	ldr	r2, [pc, #88]	@ (8002fc4 <TIM_OC4_SetConfig+0xbc>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d003      	beq.n	8002f78 <TIM_OC4_SetConfig+0x70>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a15      	ldr	r2, [pc, #84]	@ (8002fc8 <TIM_OC4_SetConfig+0xc0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d109      	bne.n	8002f8c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	4a14      	ldr	r2, [pc, #80]	@ (8002fcc <TIM_OC4_SetConfig+0xc4>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	019b      	lsls	r3, r3, #6
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	621a      	str	r2, [r3, #32]
}
 8002fa6:	46c0      	nop			@ (mov r8, r8)
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	b006      	add	sp, #24
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	46c0      	nop			@ (mov r8, r8)
 8002fb0:	ffffefff 	.word	0xffffefff
 8002fb4:	feff8fff 	.word	0xfeff8fff
 8002fb8:	fffffcff 	.word	0xfffffcff
 8002fbc:	ffffdfff 	.word	0xffffdfff
 8002fc0:	40012c00 	.word	0x40012c00
 8002fc4:	40014400 	.word	0x40014400
 8002fc8:	40014800 	.word	0x40014800
 8002fcc:	ffffbfff 	.word	0xffffbfff

08002fd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	4a21      	ldr	r2, [pc, #132]	@ (800306c <TIM_OC5_SetConfig+0x9c>)
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8003070 <TIM_OC5_SetConfig+0xa0>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4a19      	ldr	r2, [pc, #100]	@ (8003074 <TIM_OC5_SetConfig+0xa4>)
 800300e:	4013      	ands	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	041b      	lsls	r3, r3, #16
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a15      	ldr	r2, [pc, #84]	@ (8003078 <TIM_OC5_SetConfig+0xa8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d007      	beq.n	8003036 <TIM_OC5_SetConfig+0x66>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a14      	ldr	r2, [pc, #80]	@ (800307c <TIM_OC5_SetConfig+0xac>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d003      	beq.n	8003036 <TIM_OC5_SetConfig+0x66>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a13      	ldr	r2, [pc, #76]	@ (8003080 <TIM_OC5_SetConfig+0xb0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d109      	bne.n	800304a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	4a0c      	ldr	r2, [pc, #48]	@ (800306c <TIM_OC5_SetConfig+0x9c>)
 800303a:	4013      	ands	r3, r2
 800303c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	4313      	orrs	r3, r2
 8003048:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	621a      	str	r2, [r3, #32]
}
 8003064:	46c0      	nop			@ (mov r8, r8)
 8003066:	46bd      	mov	sp, r7
 8003068:	b006      	add	sp, #24
 800306a:	bd80      	pop	{r7, pc}
 800306c:	fffeffff 	.word	0xfffeffff
 8003070:	fffeff8f 	.word	0xfffeff8f
 8003074:	fffdffff 	.word	0xfffdffff
 8003078:	40012c00 	.word	0x40012c00
 800307c:	40014400 	.word	0x40014400
 8003080:	40014800 	.word	0x40014800

08003084 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	4a22      	ldr	r2, [pc, #136]	@ (8003124 <TIM_OC6_SetConfig+0xa0>)
 800309a:	401a      	ands	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4a1e      	ldr	r2, [pc, #120]	@ (8003128 <TIM_OC6_SetConfig+0xa4>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4313      	orrs	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4a1a      	ldr	r2, [pc, #104]	@ (800312c <TIM_OC6_SetConfig+0xa8>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	051b      	lsls	r3, r3, #20
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a16      	ldr	r2, [pc, #88]	@ (8003130 <TIM_OC6_SetConfig+0xac>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d007      	beq.n	80030ec <TIM_OC6_SetConfig+0x68>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a15      	ldr	r2, [pc, #84]	@ (8003134 <TIM_OC6_SetConfig+0xb0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d003      	beq.n	80030ec <TIM_OC6_SetConfig+0x68>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a14      	ldr	r2, [pc, #80]	@ (8003138 <TIM_OC6_SetConfig+0xb4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d109      	bne.n	8003100 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	4a13      	ldr	r2, [pc, #76]	@ (800313c <TIM_OC6_SetConfig+0xb8>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	029b      	lsls	r3, r3, #10
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	621a      	str	r2, [r3, #32]
}
 800311a:	46c0      	nop			@ (mov r8, r8)
 800311c:	46bd      	mov	sp, r7
 800311e:	b006      	add	sp, #24
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			@ (mov r8, r8)
 8003124:	ffefffff 	.word	0xffefffff
 8003128:	feff8fff 	.word	0xfeff8fff
 800312c:	ffdfffff 	.word	0xffdfffff
 8003130:	40012c00 	.word	0x40012c00
 8003134:	40014400 	.word	0x40014400
 8003138:	40014800 	.word	0x40014800
 800313c:	fffbffff 	.word	0xfffbffff

08003140 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	221f      	movs	r2, #31
 8003150:	4013      	ands	r3, r2
 8003152:	2201      	movs	r2, #1
 8003154:	409a      	lsls	r2, r3
 8003156:	0013      	movs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	43d2      	mvns	r2, r2
 8003162:	401a      	ands	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a1a      	ldr	r2, [r3, #32]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	211f      	movs	r1, #31
 8003170:	400b      	ands	r3, r1
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4099      	lsls	r1, r3
 8003176:	000b      	movs	r3, r1
 8003178:	431a      	orrs	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	621a      	str	r2, [r3, #32]
}
 800317e:	46c0      	nop			@ (mov r8, r8)
 8003180:	46bd      	mov	sp, r7
 8003182:	b006      	add	sp, #24
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	223c      	movs	r2, #60	@ 0x3c
 8003196:	5c9b      	ldrb	r3, [r3, r2]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800319c:	2302      	movs	r3, #2
 800319e:	e04a      	b.n	8003236 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	223c      	movs	r2, #60	@ 0x3c
 80031a4:	2101      	movs	r1, #1
 80031a6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	223d      	movs	r2, #61	@ 0x3d
 80031ac:	2102      	movs	r1, #2
 80031ae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1e      	ldr	r2, [pc, #120]	@ (8003240 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d108      	bne.n	80031dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003244 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4313      	orrs	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2270      	movs	r2, #112	@ 0x70
 80031e0:	4393      	bics	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a11      	ldr	r2, [pc, #68]	@ (8003240 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d004      	beq.n	800320a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a10      	ldr	r2, [pc, #64]	@ (8003248 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d10c      	bne.n	8003224 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2280      	movs	r2, #128	@ 0x80
 800320e:	4393      	bics	r3, r2
 8003210:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	4313      	orrs	r3, r2
 800321a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	223d      	movs	r2, #61	@ 0x3d
 8003228:	2101      	movs	r1, #1
 800322a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	223c      	movs	r2, #60	@ 0x3c
 8003230:	2100      	movs	r1, #0
 8003232:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	0018      	movs	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	b004      	add	sp, #16
 800323c:	bd80      	pop	{r7, pc}
 800323e:	46c0      	nop			@ (mov r8, r8)
 8003240:	40012c00 	.word	0x40012c00
 8003244:	ff0fffff 	.word	0xff0fffff
 8003248:	40000400 	.word	0x40000400

0800324c <memset>:
 800324c:	0003      	movs	r3, r0
 800324e:	1882      	adds	r2, r0, r2
 8003250:	4293      	cmp	r3, r2
 8003252:	d100      	bne.n	8003256 <memset+0xa>
 8003254:	4770      	bx	lr
 8003256:	7019      	strb	r1, [r3, #0]
 8003258:	3301      	adds	r3, #1
 800325a:	e7f9      	b.n	8003250 <memset+0x4>

0800325c <__libc_init_array>:
 800325c:	b570      	push	{r4, r5, r6, lr}
 800325e:	2600      	movs	r6, #0
 8003260:	4c0c      	ldr	r4, [pc, #48]	@ (8003294 <__libc_init_array+0x38>)
 8003262:	4d0d      	ldr	r5, [pc, #52]	@ (8003298 <__libc_init_array+0x3c>)
 8003264:	1b64      	subs	r4, r4, r5
 8003266:	10a4      	asrs	r4, r4, #2
 8003268:	42a6      	cmp	r6, r4
 800326a:	d109      	bne.n	8003280 <__libc_init_array+0x24>
 800326c:	2600      	movs	r6, #0
 800326e:	f000 f819 	bl	80032a4 <_init>
 8003272:	4c0a      	ldr	r4, [pc, #40]	@ (800329c <__libc_init_array+0x40>)
 8003274:	4d0a      	ldr	r5, [pc, #40]	@ (80032a0 <__libc_init_array+0x44>)
 8003276:	1b64      	subs	r4, r4, r5
 8003278:	10a4      	asrs	r4, r4, #2
 800327a:	42a6      	cmp	r6, r4
 800327c:	d105      	bne.n	800328a <__libc_init_array+0x2e>
 800327e:	bd70      	pop	{r4, r5, r6, pc}
 8003280:	00b3      	lsls	r3, r6, #2
 8003282:	58eb      	ldr	r3, [r5, r3]
 8003284:	4798      	blx	r3
 8003286:	3601      	adds	r6, #1
 8003288:	e7ee      	b.n	8003268 <__libc_init_array+0xc>
 800328a:	00b3      	lsls	r3, r6, #2
 800328c:	58eb      	ldr	r3, [r5, r3]
 800328e:	4798      	blx	r3
 8003290:	3601      	adds	r6, #1
 8003292:	e7f2      	b.n	800327a <__libc_init_array+0x1e>
 8003294:	08003350 	.word	0x08003350
 8003298:	08003350 	.word	0x08003350
 800329c:	08003358 	.word	0x08003358
 80032a0:	08003350 	.word	0x08003350

080032a4 <_init>:
 80032a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a6:	46c0      	nop			@ (mov r8, r8)
 80032a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032aa:	bc08      	pop	{r3}
 80032ac:	469e      	mov	lr, r3
 80032ae:	4770      	bx	lr

080032b0 <_fini>:
 80032b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b2:	46c0      	nop			@ (mov r8, r8)
 80032b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032b6:	bc08      	pop	{r3}
 80032b8:	469e      	mov	lr, r3
 80032ba:	4770      	bx	lr
