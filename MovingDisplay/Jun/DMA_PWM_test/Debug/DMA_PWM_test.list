
DMA_PWM_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002950  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002a08  08002a08  00003a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a9c  08002a9c  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002a9c  08002a9c  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a9c  08002a9c  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a9c  08002a9c  00003a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002aa0  08002aa0  00003aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002aa4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000010  08002ab4  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002ab4  000040d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094a8  00000000  00000000  00004038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019b9  00000000  00000000  0000d4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0000eea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000083d  00000000  00000000  0000f940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f2b  00000000  00000000  0001017d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb73  00000000  00000000  000240a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000809e7  00000000  00000000  0002fc1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b0602  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025ec  00000000  00000000  000b0648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000b2c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080029f0 	.word	0x080029f0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	080029f0 	.word	0x080029f0

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 f9fa 	bl	8000614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f812 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f8d8 	bl	80003d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000228:	f000 f8b8 	bl	800039c <MX_DMA_Init>
  MX_TIM3_Init();
 800022c:	f000 f854 	bl	80002d8 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start_DMA (&htim3, TIM_CHANNEL_2, (uint32_t*)pwmlist1, sizeof (pwmlist1) / sizeof (uint16_t));
 8000230:	4a03      	ldr	r2, [pc, #12]	@ (8000240 <main+0x28>)
 8000232:	4804      	ldr	r0, [pc, #16]	@ (8000244 <main+0x2c>)
 8000234:	2302      	movs	r3, #2
 8000236:	2104      	movs	r1, #4
 8000238:	f001 fc38 	bl	8001aac <HAL_TIM_PWM_Start_DMA>

  while (1)
 800023c:	46c0      	nop			@ (mov r8, r8)
 800023e:	e7fd      	b.n	800023c <main+0x24>
 8000240:	20000000 	.word	0x20000000
 8000244:	2000002c 	.word	0x2000002c

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b590      	push	{r4, r7, lr}
 800024a:	b093      	sub	sp, #76	@ 0x4c
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	2414      	movs	r4, #20
 8000250:	193b      	adds	r3, r7, r4
 8000252:	0018      	movs	r0, r3
 8000254:	2334      	movs	r3, #52	@ 0x34
 8000256:	001a      	movs	r2, r3
 8000258:	2100      	movs	r1, #0
 800025a:	f002 fb9d 	bl	8002998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	0018      	movs	r0, r3
 8000262:	2310      	movs	r3, #16
 8000264:	001a      	movs	r2, r3
 8000266:	2100      	movs	r1, #0
 8000268:	f002 fb96 	bl	8002998 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800026c:	2380      	movs	r3, #128	@ 0x80
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	0018      	movs	r0, r3
 8000272:	f000 fee9 	bl	8001048 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000276:	193b      	adds	r3, r7, r4
 8000278:	2202      	movs	r2, #2
 800027a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027c:	193b      	adds	r3, r7, r4
 800027e:	2280      	movs	r2, #128	@ 0x80
 8000280:	0052      	lsls	r2, r2, #1
 8000282:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000284:	193b      	adds	r3, r7, r4
 8000286:	2200      	movs	r2, #0
 8000288:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028a:	193b      	adds	r3, r7, r4
 800028c:	2240      	movs	r2, #64	@ 0x40
 800028e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000290:	193b      	adds	r3, r7, r4
 8000292:	2200      	movs	r2, #0
 8000294:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000296:	193b      	adds	r3, r7, r4
 8000298:	0018      	movs	r0, r3
 800029a:	f000 ff15 	bl	80010c8 <HAL_RCC_OscConfig>
 800029e:	1e03      	subs	r3, r0, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002a2:	f000 f8af 	bl	8000404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2207      	movs	r2, #7
 80002aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2200      	movs	r2, #0
 80002b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2200      	movs	r2, #0
 80002bc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2100      	movs	r1, #0
 80002c2:	0018      	movs	r0, r3
 80002c4:	f001 fa10 	bl	80016e8 <HAL_RCC_ClockConfig>
 80002c8:	1e03      	subs	r3, r0, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002cc:	f000 f89a 	bl	8000404 <Error_Handler>
  }
}
 80002d0:	46c0      	nop			@ (mov r8, r8)
 80002d2:	46bd      	mov	sp, r7
 80002d4:	b013      	add	sp, #76	@ 0x4c
 80002d6:	bd90      	pop	{r4, r7, pc}

080002d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	@ 0x28
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002de:	231c      	movs	r3, #28
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	0018      	movs	r0, r3
 80002e4:	230c      	movs	r3, #12
 80002e6:	001a      	movs	r2, r3
 80002e8:	2100      	movs	r1, #0
 80002ea:	f002 fb55 	bl	8002998 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002ee:	003b      	movs	r3, r7
 80002f0:	0018      	movs	r0, r3
 80002f2:	231c      	movs	r3, #28
 80002f4:	001a      	movs	r2, r3
 80002f6:	2100      	movs	r1, #0
 80002f8:	f002 fb4e 	bl	8002998 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80002fc:	4b24      	ldr	r3, [pc, #144]	@ (8000390 <MX_TIM3_Init+0xb8>)
 80002fe:	4a25      	ldr	r2, [pc, #148]	@ (8000394 <MX_TIM3_Init+0xbc>)
 8000300:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8000302:	4b23      	ldr	r3, [pc, #140]	@ (8000390 <MX_TIM3_Init+0xb8>)
 8000304:	2207      	movs	r2, #7
 8000306:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000308:	4b21      	ldr	r3, [pc, #132]	@ (8000390 <MX_TIM3_Init+0xb8>)
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800030e:	4b20      	ldr	r3, [pc, #128]	@ (8000390 <MX_TIM3_Init+0xb8>)
 8000310:	4a21      	ldr	r2, [pc, #132]	@ (8000398 <MX_TIM3_Init+0xc0>)
 8000312:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000314:	4b1e      	ldr	r3, [pc, #120]	@ (8000390 <MX_TIM3_Init+0xb8>)
 8000316:	2200      	movs	r2, #0
 8000318:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800031a:	4b1d      	ldr	r3, [pc, #116]	@ (8000390 <MX_TIM3_Init+0xb8>)
 800031c:	2280      	movs	r2, #128	@ 0x80
 800031e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000320:	4b1b      	ldr	r3, [pc, #108]	@ (8000390 <MX_TIM3_Init+0xb8>)
 8000322:	0018      	movs	r0, r3
 8000324:	f001 fb6a 	bl	80019fc <HAL_TIM_PWM_Init>
 8000328:	1e03      	subs	r3, r0, #0
 800032a:	d001      	beq.n	8000330 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800032c:	f000 f86a 	bl	8000404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000330:	211c      	movs	r1, #28
 8000332:	187b      	adds	r3, r7, r1
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800033e:	187a      	adds	r2, r7, r1
 8000340:	4b13      	ldr	r3, [pc, #76]	@ (8000390 <MX_TIM3_Init+0xb8>)
 8000342:	0011      	movs	r1, r2
 8000344:	0018      	movs	r0, r3
 8000346:	f002 fac5 	bl	80028d4 <HAL_TIMEx_MasterConfigSynchronization>
 800034a:	1e03      	subs	r3, r0, #0
 800034c:	d001      	beq.n	8000352 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800034e:	f000 f859 	bl	8000404 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000352:	003b      	movs	r3, r7
 8000354:	2260      	movs	r2, #96	@ 0x60
 8000356:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000358:	003b      	movs	r3, r7
 800035a:	2200      	movs	r2, #0
 800035c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800035e:	003b      	movs	r3, r7
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000364:	003b      	movs	r3, r7
 8000366:	2204      	movs	r2, #4
 8000368:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800036a:	0039      	movs	r1, r7
 800036c:	4b08      	ldr	r3, [pc, #32]	@ (8000390 <MX_TIM3_Init+0xb8>)
 800036e:	2204      	movs	r2, #4
 8000370:	0018      	movs	r0, r3
 8000372:	f001 fd89 	bl	8001e88 <HAL_TIM_PWM_ConfigChannel>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d001      	beq.n	800037e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800037a:	f000 f843 	bl	8000404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800037e:	4b04      	ldr	r3, [pc, #16]	@ (8000390 <MX_TIM3_Init+0xb8>)
 8000380:	0018      	movs	r0, r3
 8000382:	f000 f8b5 	bl	80004f0 <HAL_TIM_MspPostInit>

}
 8000386:	46c0      	nop			@ (mov r8, r8)
 8000388:	46bd      	mov	sp, r7
 800038a:	b00a      	add	sp, #40	@ 0x28
 800038c:	bd80      	pop	{r7, pc}
 800038e:	46c0      	nop			@ (mov r8, r8)
 8000390:	2000002c 	.word	0x2000002c
 8000394:	40000400 	.word	0x40000400
 8000398:	000003e7 	.word	0x000003e7

0800039c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003a2:	4b0c      	ldr	r3, [pc, #48]	@ (80003d4 <MX_DMA_Init+0x38>)
 80003a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80003a6:	4b0b      	ldr	r3, [pc, #44]	@ (80003d4 <MX_DMA_Init+0x38>)
 80003a8:	2101      	movs	r1, #1
 80003aa:	430a      	orrs	r2, r1
 80003ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80003ae:	4b09      	ldr	r3, [pc, #36]	@ (80003d4 <MX_DMA_Init+0x38>)
 80003b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80003b2:	2201      	movs	r2, #1
 80003b4:	4013      	ands	r3, r2
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2100      	movs	r1, #0
 80003be:	2009      	movs	r0, #9
 80003c0:	f000 fa5a 	bl	8000878 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003c4:	2009      	movs	r0, #9
 80003c6:	f000 fa6c 	bl	80008a2 <HAL_NVIC_EnableIRQ>

}
 80003ca:	46c0      	nop			@ (mov r8, r8)
 80003cc:	46bd      	mov	sp, r7
 80003ce:	b002      	add	sp, #8
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	46c0      	nop			@ (mov r8, r8)
 80003d4:	40021000 	.word	0x40021000

080003d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003de:	4b08      	ldr	r3, [pc, #32]	@ (8000400 <MX_GPIO_Init+0x28>)
 80003e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003e2:	4b07      	ldr	r3, [pc, #28]	@ (8000400 <MX_GPIO_Init+0x28>)
 80003e4:	2101      	movs	r1, #1
 80003e6:	430a      	orrs	r2, r1
 80003e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80003ea:	4b05      	ldr	r3, [pc, #20]	@ (8000400 <MX_GPIO_Init+0x28>)
 80003ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003ee:	2201      	movs	r2, #1
 80003f0:	4013      	ands	r3, r2
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003f6:	46c0      	nop			@ (mov r8, r8)
 80003f8:	46bd      	mov	sp, r7
 80003fa:	b002      	add	sp, #8
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	46c0      	nop			@ (mov r8, r8)
 8000400:	40021000 	.word	0x40021000

08000404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000408:	b672      	cpsid	i
}
 800040a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800040c:	46c0      	nop			@ (mov r8, r8)
 800040e:	e7fd      	b.n	800040c <Error_Handler+0x8>

08000410 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000416:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <HAL_MspInit+0x44>)
 8000418:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800041a:	4b0e      	ldr	r3, [pc, #56]	@ (8000454 <HAL_MspInit+0x44>)
 800041c:	2101      	movs	r1, #1
 800041e:	430a      	orrs	r2, r1
 8000420:	641a      	str	r2, [r3, #64]	@ 0x40
 8000422:	4b0c      	ldr	r3, [pc, #48]	@ (8000454 <HAL_MspInit+0x44>)
 8000424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000426:	2201      	movs	r2, #1
 8000428:	4013      	ands	r3, r2
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042e:	4b09      	ldr	r3, [pc, #36]	@ (8000454 <HAL_MspInit+0x44>)
 8000430:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000432:	4b08      	ldr	r3, [pc, #32]	@ (8000454 <HAL_MspInit+0x44>)
 8000434:	2180      	movs	r1, #128	@ 0x80
 8000436:	0549      	lsls	r1, r1, #21
 8000438:	430a      	orrs	r2, r1
 800043a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800043c:	4b05      	ldr	r3, [pc, #20]	@ (8000454 <HAL_MspInit+0x44>)
 800043e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000440:	2380      	movs	r3, #128	@ 0x80
 8000442:	055b      	lsls	r3, r3, #21
 8000444:	4013      	ands	r3, r2
 8000446:	603b      	str	r3, [r7, #0]
 8000448:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	b002      	add	sp, #8
 8000450:	bd80      	pop	{r7, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)
 8000454:	40021000 	.word	0x40021000

08000458 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a1e      	ldr	r2, [pc, #120]	@ (80004e0 <HAL_TIM_PWM_MspInit+0x88>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d135      	bne.n	80004d6 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800046a:	4b1e      	ldr	r3, [pc, #120]	@ (80004e4 <HAL_TIM_PWM_MspInit+0x8c>)
 800046c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800046e:	4b1d      	ldr	r3, [pc, #116]	@ (80004e4 <HAL_TIM_PWM_MspInit+0x8c>)
 8000470:	2102      	movs	r1, #2
 8000472:	430a      	orrs	r2, r1
 8000474:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000476:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <HAL_TIM_PWM_MspInit+0x8c>)
 8000478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800047a:	2202      	movs	r2, #2
 800047c:	4013      	ands	r3, r2
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Channel1;
 8000482:	4b19      	ldr	r3, [pc, #100]	@ (80004e8 <HAL_TIM_PWM_MspInit+0x90>)
 8000484:	4a19      	ldr	r2, [pc, #100]	@ (80004ec <HAL_TIM_PWM_MspInit+0x94>)
 8000486:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8000488:	4b17      	ldr	r3, [pc, #92]	@ (80004e8 <HAL_TIM_PWM_MspInit+0x90>)
 800048a:	2221      	movs	r2, #33	@ 0x21
 800048c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800048e:	4b16      	ldr	r3, [pc, #88]	@ (80004e8 <HAL_TIM_PWM_MspInit+0x90>)
 8000490:	2210      	movs	r2, #16
 8000492:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000494:	4b14      	ldr	r3, [pc, #80]	@ (80004e8 <HAL_TIM_PWM_MspInit+0x90>)
 8000496:	2200      	movs	r2, #0
 8000498:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800049a:	4b13      	ldr	r3, [pc, #76]	@ (80004e8 <HAL_TIM_PWM_MspInit+0x90>)
 800049c:	2280      	movs	r2, #128	@ 0x80
 800049e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80004a0:	4b11      	ldr	r3, [pc, #68]	@ (80004e8 <HAL_TIM_PWM_MspInit+0x90>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80004a6:	4b10      	ldr	r3, [pc, #64]	@ (80004e8 <HAL_TIM_PWM_MspInit+0x90>)
 80004a8:	2280      	movs	r2, #128	@ 0x80
 80004aa:	0112      	lsls	r2, r2, #4
 80004ac:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 80004ae:	4b0e      	ldr	r3, [pc, #56]	@ (80004e8 <HAL_TIM_PWM_MspInit+0x90>)
 80004b0:	2220      	movs	r2, #32
 80004b2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80004b4:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <HAL_TIM_PWM_MspInit+0x90>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80004ba:	4b0b      	ldr	r3, [pc, #44]	@ (80004e8 <HAL_TIM_PWM_MspInit+0x90>)
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 fa0d 	bl	80008dc <HAL_DMA_Init>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <HAL_TIM_PWM_MspInit+0x72>
    {
      Error_Handler();
 80004c6:	f7ff ff9d 	bl	8000404 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a06      	ldr	r2, [pc, #24]	@ (80004e8 <HAL_TIM_PWM_MspInit+0x90>)
 80004ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80004d0:	4b05      	ldr	r3, [pc, #20]	@ (80004e8 <HAL_TIM_PWM_MspInit+0x90>)
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b004      	add	sp, #16
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	40000400 	.word	0x40000400
 80004e4:	40021000 	.word	0x40021000
 80004e8:	20000078 	.word	0x20000078
 80004ec:	40020008 	.word	0x40020008

080004f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b089      	sub	sp, #36	@ 0x24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f8:	240c      	movs	r4, #12
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	0018      	movs	r0, r3
 80004fe:	2314      	movs	r3, #20
 8000500:	001a      	movs	r2, r3
 8000502:	2100      	movs	r1, #0
 8000504:	f002 fa48 	bl	8002998 <memset>
  if(htim->Instance==TIM3)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a14      	ldr	r2, [pc, #80]	@ (8000560 <HAL_TIM_MspPostInit+0x70>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d122      	bne.n	8000558 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b14      	ldr	r3, [pc, #80]	@ (8000564 <HAL_TIM_MspPostInit+0x74>)
 8000514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000516:	4b13      	ldr	r3, [pc, #76]	@ (8000564 <HAL_TIM_MspPostInit+0x74>)
 8000518:	2101      	movs	r1, #1
 800051a:	430a      	orrs	r2, r1
 800051c:	635a      	str	r2, [r3, #52]	@ 0x34
 800051e:	4b11      	ldr	r3, [pc, #68]	@ (8000564 <HAL_TIM_MspPostInit+0x74>)
 8000520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000522:	2201      	movs	r2, #1
 8000524:	4013      	ands	r3, r2
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800052a:	0021      	movs	r1, r4
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2280      	movs	r2, #128	@ 0x80
 8000530:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2202      	movs	r2, #2
 8000536:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2200      	movs	r2, #0
 8000542:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2201      	movs	r2, #1
 8000548:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	187a      	adds	r2, r7, r1
 800054c:	23a0      	movs	r3, #160	@ 0xa0
 800054e:	05db      	lsls	r3, r3, #23
 8000550:	0011      	movs	r1, r2
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fc14 	bl	8000d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000558:	46c0      	nop			@ (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	b009      	add	sp, #36	@ 0x24
 800055e:	bd90      	pop	{r4, r7, pc}
 8000560:	40000400 	.word	0x40000400
 8000564:	40021000 	.word	0x40021000

08000568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800056c:	46c0      	nop			@ (mov r8, r8)
 800056e:	e7fd      	b.n	800056c <NMI_Handler+0x4>

08000570 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000574:	46c0      	nop			@ (mov r8, r8)
 8000576:	e7fd      	b.n	8000574 <HardFault_Handler+0x4>

08000578 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800057c:	46c0      	nop			@ (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000590:	f000 f8aa 	bl	80006e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000594:	46c0      	nop			@ (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80005a0:	4b03      	ldr	r3, [pc, #12]	@ (80005b0 <DMA1_Channel1_IRQHandler+0x14>)
 80005a2:	0018      	movs	r0, r3
 80005a4:	f000 faaa 	bl	8000afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80005a8:	46c0      	nop			@ (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	20000078 	.word	0x20000078

080005b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b8:	46c0      	nop			@ (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005c0:	480d      	ldr	r0, [pc, #52]	@ (80005f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80005c4:	f7ff fff6 	bl	80005b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c8:	480c      	ldr	r0, [pc, #48]	@ (80005fc <LoopForever+0x6>)
  ldr r1, =_edata
 80005ca:	490d      	ldr	r1, [pc, #52]	@ (8000600 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000604 <LoopForever+0xe>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d0:	e002      	b.n	80005d8 <LoopCopyDataInit>

080005d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d6:	3304      	adds	r3, #4

080005d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005dc:	d3f9      	bcc.n	80005d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005de:	4a0a      	ldr	r2, [pc, #40]	@ (8000608 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005e0:	4c0a      	ldr	r4, [pc, #40]	@ (800060c <LoopForever+0x16>)
  movs r3, #0
 80005e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e4:	e001      	b.n	80005ea <LoopFillZerobss>

080005e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e8:	3204      	adds	r2, #4

080005ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005ec:	d3fb      	bcc.n	80005e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ee:	f002 f9db 	bl	80029a8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80005f2:	f7ff fe11 	bl	8000218 <main>

080005f6 <LoopForever>:

LoopForever:
  b LoopForever
 80005f6:	e7fe      	b.n	80005f6 <LoopForever>
  ldr   r0, =_estack
 80005f8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000600:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000604:	08002aa4 	.word	0x08002aa4
  ldr r2, =_sbss
 8000608:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800060c:	200000d8 	.word	0x200000d8

08000610 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC1_IRQHandler>
	...

08000614 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800061a:	1dfb      	adds	r3, r7, #7
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000620:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <HAL_Init+0x3c>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <HAL_Init+0x3c>)
 8000626:	2180      	movs	r1, #128	@ 0x80
 8000628:	0049      	lsls	r1, r1, #1
 800062a:	430a      	orrs	r2, r1
 800062c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800062e:	2003      	movs	r0, #3
 8000630:	f000 f810 	bl	8000654 <HAL_InitTick>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d003      	beq.n	8000640 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000638:	1dfb      	adds	r3, r7, #7
 800063a:	2201      	movs	r2, #1
 800063c:	701a      	strb	r2, [r3, #0]
 800063e:	e001      	b.n	8000644 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000640:	f7ff fee6 	bl	8000410 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000644:	1dfb      	adds	r3, r7, #7
 8000646:	781b      	ldrb	r3, [r3, #0]
}
 8000648:	0018      	movs	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	b002      	add	sp, #8
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40022000 	.word	0x40022000

08000654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800065c:	230f      	movs	r3, #15
 800065e:	18fb      	adds	r3, r7, r3
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000664:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <HAL_InitTick+0x88>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d02b      	beq.n	80006c4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800066c:	4b1c      	ldr	r3, [pc, #112]	@ (80006e0 <HAL_InitTick+0x8c>)
 800066e:	681c      	ldr	r4, [r3, #0]
 8000670:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <HAL_InitTick+0x88>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	0019      	movs	r1, r3
 8000676:	23fa      	movs	r3, #250	@ 0xfa
 8000678:	0098      	lsls	r0, r3, #2
 800067a:	f7ff fd41 	bl	8000100 <__udivsi3>
 800067e:	0003      	movs	r3, r0
 8000680:	0019      	movs	r1, r3
 8000682:	0020      	movs	r0, r4
 8000684:	f7ff fd3c 	bl	8000100 <__udivsi3>
 8000688:	0003      	movs	r3, r0
 800068a:	0018      	movs	r0, r3
 800068c:	f000 f919 	bl	80008c2 <HAL_SYSTICK_Config>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d112      	bne.n	80006ba <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2b03      	cmp	r3, #3
 8000698:	d80a      	bhi.n	80006b0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	2301      	movs	r3, #1
 800069e:	425b      	negs	r3, r3
 80006a0:	2200      	movs	r2, #0
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 f8e8 	bl	8000878 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <HAL_InitTick+0x90>)
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	e00d      	b.n	80006cc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006b0:	230f      	movs	r3, #15
 80006b2:	18fb      	adds	r3, r7, r3
 80006b4:	2201      	movs	r2, #1
 80006b6:	701a      	strb	r2, [r3, #0]
 80006b8:	e008      	b.n	80006cc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006ba:	230f      	movs	r3, #15
 80006bc:	18fb      	adds	r3, r7, r3
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
 80006c2:	e003      	b.n	80006cc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006c4:	230f      	movs	r3, #15
 80006c6:	18fb      	adds	r3, r7, r3
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006cc:	230f      	movs	r3, #15
 80006ce:	18fb      	adds	r3, r7, r3
 80006d0:	781b      	ldrb	r3, [r3, #0]
}
 80006d2:	0018      	movs	r0, r3
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b005      	add	sp, #20
 80006d8:	bd90      	pop	{r4, r7, pc}
 80006da:	46c0      	nop			@ (mov r8, r8)
 80006dc:	2000000c 	.word	0x2000000c
 80006e0:	20000004 	.word	0x20000004
 80006e4:	20000008 	.word	0x20000008

080006e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006ec:	4b05      	ldr	r3, [pc, #20]	@ (8000704 <HAL_IncTick+0x1c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	001a      	movs	r2, r3
 80006f2:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <HAL_IncTick+0x20>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	18d2      	adds	r2, r2, r3
 80006f8:	4b03      	ldr	r3, [pc, #12]	@ (8000708 <HAL_IncTick+0x20>)
 80006fa:	601a      	str	r2, [r3, #0]
}
 80006fc:	46c0      	nop			@ (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	2000000c 	.word	0x2000000c
 8000708:	200000d4 	.word	0x200000d4

0800070c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  return uwTick;
 8000710:	4b02      	ldr	r3, [pc, #8]	@ (800071c <HAL_GetTick+0x10>)
 8000712:	681b      	ldr	r3, [r3, #0]
}
 8000714:	0018      	movs	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	200000d4 	.word	0x200000d4

08000720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	0002      	movs	r2, r0
 8000728:	1dfb      	adds	r3, r7, #7
 800072a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800072c:	1dfb      	adds	r3, r7, #7
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b7f      	cmp	r3, #127	@ 0x7f
 8000732:	d809      	bhi.n	8000748 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000734:	1dfb      	adds	r3, r7, #7
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	001a      	movs	r2, r3
 800073a:	231f      	movs	r3, #31
 800073c:	401a      	ands	r2, r3
 800073e:	4b04      	ldr	r3, [pc, #16]	@ (8000750 <__NVIC_EnableIRQ+0x30>)
 8000740:	2101      	movs	r1, #1
 8000742:	4091      	lsls	r1, r2
 8000744:	000a      	movs	r2, r1
 8000746:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000748:	46c0      	nop			@ (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	b002      	add	sp, #8
 800074e:	bd80      	pop	{r7, pc}
 8000750:	e000e100 	.word	0xe000e100

08000754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	0002      	movs	r2, r0
 800075c:	6039      	str	r1, [r7, #0]
 800075e:	1dfb      	adds	r3, r7, #7
 8000760:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000762:	1dfb      	adds	r3, r7, #7
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b7f      	cmp	r3, #127	@ 0x7f
 8000768:	d828      	bhi.n	80007bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800076a:	4a2f      	ldr	r2, [pc, #188]	@ (8000828 <__NVIC_SetPriority+0xd4>)
 800076c:	1dfb      	adds	r3, r7, #7
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	b25b      	sxtb	r3, r3
 8000772:	089b      	lsrs	r3, r3, #2
 8000774:	33c0      	adds	r3, #192	@ 0xc0
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	589b      	ldr	r3, [r3, r2]
 800077a:	1dfa      	adds	r2, r7, #7
 800077c:	7812      	ldrb	r2, [r2, #0]
 800077e:	0011      	movs	r1, r2
 8000780:	2203      	movs	r2, #3
 8000782:	400a      	ands	r2, r1
 8000784:	00d2      	lsls	r2, r2, #3
 8000786:	21ff      	movs	r1, #255	@ 0xff
 8000788:	4091      	lsls	r1, r2
 800078a:	000a      	movs	r2, r1
 800078c:	43d2      	mvns	r2, r2
 800078e:	401a      	ands	r2, r3
 8000790:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	019b      	lsls	r3, r3, #6
 8000796:	22ff      	movs	r2, #255	@ 0xff
 8000798:	401a      	ands	r2, r3
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	0018      	movs	r0, r3
 80007a0:	2303      	movs	r3, #3
 80007a2:	4003      	ands	r3, r0
 80007a4:	00db      	lsls	r3, r3, #3
 80007a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a8:	481f      	ldr	r0, [pc, #124]	@ (8000828 <__NVIC_SetPriority+0xd4>)
 80007aa:	1dfb      	adds	r3, r7, #7
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	089b      	lsrs	r3, r3, #2
 80007b2:	430a      	orrs	r2, r1
 80007b4:	33c0      	adds	r3, #192	@ 0xc0
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007ba:	e031      	b.n	8000820 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007bc:	4a1b      	ldr	r2, [pc, #108]	@ (800082c <__NVIC_SetPriority+0xd8>)
 80007be:	1dfb      	adds	r3, r7, #7
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	0019      	movs	r1, r3
 80007c4:	230f      	movs	r3, #15
 80007c6:	400b      	ands	r3, r1
 80007c8:	3b08      	subs	r3, #8
 80007ca:	089b      	lsrs	r3, r3, #2
 80007cc:	3306      	adds	r3, #6
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	18d3      	adds	r3, r2, r3
 80007d2:	3304      	adds	r3, #4
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	1dfa      	adds	r2, r7, #7
 80007d8:	7812      	ldrb	r2, [r2, #0]
 80007da:	0011      	movs	r1, r2
 80007dc:	2203      	movs	r2, #3
 80007de:	400a      	ands	r2, r1
 80007e0:	00d2      	lsls	r2, r2, #3
 80007e2:	21ff      	movs	r1, #255	@ 0xff
 80007e4:	4091      	lsls	r1, r2
 80007e6:	000a      	movs	r2, r1
 80007e8:	43d2      	mvns	r2, r2
 80007ea:	401a      	ands	r2, r3
 80007ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	019b      	lsls	r3, r3, #6
 80007f2:	22ff      	movs	r2, #255	@ 0xff
 80007f4:	401a      	ands	r2, r3
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	0018      	movs	r0, r3
 80007fc:	2303      	movs	r3, #3
 80007fe:	4003      	ands	r3, r0
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000804:	4809      	ldr	r0, [pc, #36]	@ (800082c <__NVIC_SetPriority+0xd8>)
 8000806:	1dfb      	adds	r3, r7, #7
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	001c      	movs	r4, r3
 800080c:	230f      	movs	r3, #15
 800080e:	4023      	ands	r3, r4
 8000810:	3b08      	subs	r3, #8
 8000812:	089b      	lsrs	r3, r3, #2
 8000814:	430a      	orrs	r2, r1
 8000816:	3306      	adds	r3, #6
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	18c3      	adds	r3, r0, r3
 800081c:	3304      	adds	r3, #4
 800081e:	601a      	str	r2, [r3, #0]
}
 8000820:	46c0      	nop			@ (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	b003      	add	sp, #12
 8000826:	bd90      	pop	{r4, r7, pc}
 8000828:	e000e100 	.word	0xe000e100
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	1e5a      	subs	r2, r3, #1
 800083c:	2380      	movs	r3, #128	@ 0x80
 800083e:	045b      	lsls	r3, r3, #17
 8000840:	429a      	cmp	r2, r3
 8000842:	d301      	bcc.n	8000848 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000844:	2301      	movs	r3, #1
 8000846:	e010      	b.n	800086a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000848:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <SysTick_Config+0x44>)
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	3a01      	subs	r2, #1
 800084e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000850:	2301      	movs	r3, #1
 8000852:	425b      	negs	r3, r3
 8000854:	2103      	movs	r1, #3
 8000856:	0018      	movs	r0, r3
 8000858:	f7ff ff7c 	bl	8000754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800085c:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <SysTick_Config+0x44>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000862:	4b04      	ldr	r3, [pc, #16]	@ (8000874 <SysTick_Config+0x44>)
 8000864:	2207      	movs	r2, #7
 8000866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000868:	2300      	movs	r3, #0
}
 800086a:	0018      	movs	r0, r3
 800086c:	46bd      	mov	sp, r7
 800086e:	b002      	add	sp, #8
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	e000e010 	.word	0xe000e010

08000878 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
 8000882:	210f      	movs	r1, #15
 8000884:	187b      	adds	r3, r7, r1
 8000886:	1c02      	adds	r2, r0, #0
 8000888:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	187b      	adds	r3, r7, r1
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b25b      	sxtb	r3, r3
 8000892:	0011      	movs	r1, r2
 8000894:	0018      	movs	r0, r3
 8000896:	f7ff ff5d 	bl	8000754 <__NVIC_SetPriority>
}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	b004      	add	sp, #16
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	0002      	movs	r2, r0
 80008aa:	1dfb      	adds	r3, r7, #7
 80008ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b25b      	sxtb	r3, r3
 80008b4:	0018      	movs	r0, r3
 80008b6:	f7ff ff33 	bl	8000720 <__NVIC_EnableIRQ>
}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b002      	add	sp, #8
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	0018      	movs	r0, r3
 80008ce:	f7ff ffaf 	bl	8000830 <SysTick_Config>
 80008d2:	0003      	movs	r3, r0
}
 80008d4:	0018      	movs	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b002      	add	sp, #8
 80008da:	bd80      	pop	{r7, pc}

080008dc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d101      	bne.n	80008ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e077      	b.n	80009de <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a3d      	ldr	r2, [pc, #244]	@ (80009e8 <HAL_DMA_Init+0x10c>)
 80008f4:	4694      	mov	ip, r2
 80008f6:	4463      	add	r3, ip
 80008f8:	2114      	movs	r1, #20
 80008fa:	0018      	movs	r0, r3
 80008fc:	f7ff fc00 	bl	8000100 <__udivsi3>
 8000900:	0003      	movs	r3, r0
 8000902:	009a      	lsls	r2, r3, #2
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2225      	movs	r2, #37	@ 0x25
 800090c:	2102      	movs	r1, #2
 800090e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4934      	ldr	r1, [pc, #208]	@ (80009ec <HAL_DMA_Init+0x110>)
 800091c:	400a      	ands	r2, r1
 800091e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	6819      	ldr	r1, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	689a      	ldr	r2, [r3, #8]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	431a      	orrs	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	691b      	ldr	r3, [r3, #16]
 8000934:	431a      	orrs	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	431a      	orrs	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	431a      	orrs	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	431a      	orrs	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6a1b      	ldr	r3, [r3, #32]
 800094c:	431a      	orrs	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	430a      	orrs	r2, r1
 8000954:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	0018      	movs	r0, r3
 800095a:	f000 f9c1 	bl	8000ce0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	689a      	ldr	r2, [r3, #8]
 8000962:	2380      	movs	r3, #128	@ 0x80
 8000964:	01db      	lsls	r3, r3, #7
 8000966:	429a      	cmp	r2, r3
 8000968:	d102      	bne.n	8000970 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2200      	movs	r2, #0
 800096e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685a      	ldr	r2, [r3, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000978:	213f      	movs	r1, #63	@ 0x3f
 800097a:	400a      	ands	r2, r1
 800097c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000986:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d011      	beq.n	80009b4 <HAL_DMA_Init+0xd8>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	2b04      	cmp	r3, #4
 8000996:	d80d      	bhi.n	80009b4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	0018      	movs	r0, r3
 800099c:	f000 f9cc 	bl	8000d38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	e008      	b.n	80009c6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2200      	movs	r2, #0
 80009b8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2200      	movs	r2, #0
 80009be:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2200      	movs	r2, #0
 80009c4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2200      	movs	r2, #0
 80009ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2225      	movs	r2, #37	@ 0x25
 80009d0:	2101      	movs	r1, #1
 80009d2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2224      	movs	r2, #36	@ 0x24
 80009d8:	2100      	movs	r1, #0
 80009da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	0018      	movs	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b002      	add	sp, #8
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	bffdfff8 	.word	0xbffdfff8
 80009ec:	ffff800f 	.word	0xffff800f

080009f0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
 80009fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009fe:	2317      	movs	r3, #23
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	2224      	movs	r2, #36	@ 0x24
 8000a0a:	5c9b      	ldrb	r3, [r3, r2]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d101      	bne.n	8000a14 <HAL_DMA_Start_IT+0x24>
 8000a10:	2302      	movs	r3, #2
 8000a12:	e06f      	b.n	8000af4 <HAL_DMA_Start_IT+0x104>
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2224      	movs	r2, #36	@ 0x24
 8000a18:	2101      	movs	r1, #1
 8000a1a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2225      	movs	r2, #37	@ 0x25
 8000a20:	5c9b      	ldrb	r3, [r3, r2]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d157      	bne.n	8000ad8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2225      	movs	r2, #37	@ 0x25
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2200      	movs	r2, #0
 8000a34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2101      	movs	r1, #1
 8000a42:	438a      	bics	r2, r1
 8000a44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	68b9      	ldr	r1, [r7, #8]
 8000a4c:	68f8      	ldr	r0, [r7, #12]
 8000a4e:	f000 f907 	bl	8000c60 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d008      	beq.n	8000a6c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	210e      	movs	r1, #14
 8000a66:	430a      	orrs	r2, r1
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	e00f      	b.n	8000a8c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2104      	movs	r1, #4
 8000a78:	438a      	bics	r2, r1
 8000a7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	210a      	movs	r1, #10
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	2380      	movs	r3, #128	@ 0x80
 8000a94:	025b      	lsls	r3, r3, #9
 8000a96:	4013      	ands	r3, r2
 8000a98:	d008      	beq.n	8000aac <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa4:	2180      	movs	r1, #128	@ 0x80
 8000aa6:	0049      	lsls	r1, r1, #1
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d008      	beq.n	8000ac6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000abe:	2180      	movs	r1, #128	@ 0x80
 8000ac0:	0049      	lsls	r1, r1, #1
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	e00a      	b.n	8000aee <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2280      	movs	r2, #128	@ 0x80
 8000adc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	2224      	movs	r2, #36	@ 0x24
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8000ae6:	2317      	movs	r3, #23
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	2201      	movs	r2, #1
 8000aec:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000aee:	2317      	movs	r3, #23
 8000af0:	18fb      	adds	r3, r7, r3
 8000af2:	781b      	ldrb	r3, [r3, #0]
}
 8000af4:	0018      	movs	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b006      	add	sp, #24
 8000afa:	bd80      	pop	{r7, pc}

08000afc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8000b04:	4b55      	ldr	r3, [pc, #340]	@ (8000c5c <HAL_DMA_IRQHandler+0x160>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	221c      	movs	r2, #28
 8000b18:	4013      	ands	r3, r2
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	409a      	lsls	r2, r3
 8000b1e:	0013      	movs	r3, r2
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	4013      	ands	r3, r2
 8000b24:	d027      	beq.n	8000b76 <HAL_DMA_IRQHandler+0x7a>
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	2204      	movs	r2, #4
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	d023      	beq.n	8000b76 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2220      	movs	r2, #32
 8000b36:	4013      	ands	r3, r2
 8000b38:	d107      	bne.n	8000b4a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2104      	movs	r1, #4
 8000b46:	438a      	bics	r2, r1
 8000b48:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8000b4a:	4b44      	ldr	r3, [pc, #272]	@ (8000c5c <HAL_DMA_IRQHandler+0x160>)
 8000b4c:	6859      	ldr	r1, [r3, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	221c      	movs	r2, #28
 8000b54:	4013      	ands	r3, r2
 8000b56:	2204      	movs	r2, #4
 8000b58:	409a      	lsls	r2, r3
 8000b5a:	4b40      	ldr	r3, [pc, #256]	@ (8000c5c <HAL_DMA_IRQHandler+0x160>)
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d100      	bne.n	8000b6a <HAL_DMA_IRQHandler+0x6e>
 8000b68:	e073      	b.n	8000c52 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	0010      	movs	r0, r2
 8000b72:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8000b74:	e06d      	b.n	8000c52 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	221c      	movs	r2, #28
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	2202      	movs	r2, #2
 8000b80:	409a      	lsls	r2, r3
 8000b82:	0013      	movs	r3, r2
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	4013      	ands	r3, r2
 8000b88:	d02e      	beq.n	8000be8 <HAL_DMA_IRQHandler+0xec>
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	4013      	ands	r3, r2
 8000b90:	d02a      	beq.n	8000be8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2220      	movs	r2, #32
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	d10b      	bne.n	8000bb6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	210a      	movs	r1, #10
 8000baa:	438a      	bics	r2, r1
 8000bac:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2225      	movs	r2, #37	@ 0x25
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8000bb6:	4b29      	ldr	r3, [pc, #164]	@ (8000c5c <HAL_DMA_IRQHandler+0x160>)
 8000bb8:	6859      	ldr	r1, [r3, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbe:	221c      	movs	r2, #28
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	409a      	lsls	r2, r3
 8000bc6:	4b25      	ldr	r3, [pc, #148]	@ (8000c5c <HAL_DMA_IRQHandler+0x160>)
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2224      	movs	r2, #36	@ 0x24
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d03a      	beq.n	8000c52 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	0010      	movs	r0, r2
 8000be4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8000be6:	e034      	b.n	8000c52 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bec:	221c      	movs	r2, #28
 8000bee:	4013      	ands	r3, r2
 8000bf0:	2208      	movs	r2, #8
 8000bf2:	409a      	lsls	r2, r3
 8000bf4:	0013      	movs	r3, r2
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	d02b      	beq.n	8000c54 <HAL_DMA_IRQHandler+0x158>
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	2208      	movs	r2, #8
 8000c00:	4013      	ands	r3, r2
 8000c02:	d027      	beq.n	8000c54 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	210e      	movs	r1, #14
 8000c10:	438a      	bics	r2, r1
 8000c12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8000c14:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <HAL_DMA_IRQHandler+0x160>)
 8000c16:	6859      	ldr	r1, [r3, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1c:	221c      	movs	r2, #28
 8000c1e:	4013      	ands	r3, r2
 8000c20:	2201      	movs	r2, #1
 8000c22:	409a      	lsls	r2, r3
 8000c24:	4b0d      	ldr	r3, [pc, #52]	@ (8000c5c <HAL_DMA_IRQHandler+0x160>)
 8000c26:	430a      	orrs	r2, r1
 8000c28:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2225      	movs	r2, #37	@ 0x25
 8000c34:	2101      	movs	r1, #1
 8000c36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2224      	movs	r2, #36	@ 0x24
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d005      	beq.n	8000c54 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	0010      	movs	r0, r2
 8000c50:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	46c0      	nop			@ (mov r8, r8)
}
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b004      	add	sp, #16
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40020000 	.word	0x40020000

08000c60 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
 8000c6c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000c76:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d004      	beq.n	8000c8a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000c88:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8000c8a:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <DMA_SetConfig+0x7c>)
 8000c8c:	6859      	ldr	r1, [r3, #4]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c92:	221c      	movs	r2, #28
 8000c94:	4013      	ands	r3, r2
 8000c96:	2201      	movs	r2, #1
 8000c98:	409a      	lsls	r2, r3
 8000c9a:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <DMA_SetConfig+0x7c>)
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	2b10      	cmp	r3, #16
 8000cae:	d108      	bne.n	8000cc2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000cc0:	e007      	b.n	8000cd2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	60da      	str	r2, [r3, #12]
}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b004      	add	sp, #16
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cec:	089b      	lsrs	r3, r3, #2
 8000cee:	4a10      	ldr	r2, [pc, #64]	@ (8000d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8000cf0:	4694      	mov	ip, r2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	001a      	movs	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	001a      	movs	r2, r3
 8000d02:	23ff      	movs	r3, #255	@ 0xff
 8000d04:	4013      	ands	r3, r2
 8000d06:	3b08      	subs	r3, #8
 8000d08:	2114      	movs	r1, #20
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff f9f8 	bl	8000100 <__udivsi3>
 8000d10:	0003      	movs	r3, r0
 8000d12:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a07      	ldr	r2, [pc, #28]	@ (8000d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8000d18:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	221f      	movs	r2, #31
 8000d1e:	4013      	ands	r3, r2
 8000d20:	2201      	movs	r2, #1
 8000d22:	409a      	lsls	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8000d28:	46c0      	nop			@ (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b004      	add	sp, #16
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	10008200 	.word	0x10008200
 8000d34:	40020880 	.word	0x40020880

08000d38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	223f      	movs	r2, #63	@ 0x3f
 8000d46:	4013      	ands	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000d4e:	4694      	mov	ip, r2
 8000d50:	4463      	add	r3, ip
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	001a      	movs	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a07      	ldr	r2, [pc, #28]	@ (8000d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000d5e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	2203      	movs	r2, #3
 8000d66:	4013      	ands	r3, r2
 8000d68:	2201      	movs	r2, #1
 8000d6a:	409a      	lsls	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8000d70:	46c0      	nop			@ (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b004      	add	sp, #16
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	1000823f 	.word	0x1000823f
 8000d7c:	40020940 	.word	0x40020940

08000d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8e:	e147      	b.n	8001020 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2101      	movs	r1, #1
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	000a      	movs	r2, r1
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d100      	bne.n	8000da8 <HAL_GPIO_Init+0x28>
 8000da6:	e138      	b.n	800101a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2203      	movs	r2, #3
 8000dae:	4013      	ands	r3, r2
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d005      	beq.n	8000dc0 <HAL_GPIO_Init+0x40>
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2203      	movs	r2, #3
 8000dba:	4013      	ands	r3, r2
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d130      	bne.n	8000e22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	409a      	lsls	r2, r3
 8000dce:	0013      	movs	r3, r2
 8000dd0:	43da      	mvns	r2, r3
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	409a      	lsls	r2, r3
 8000de2:	0013      	movs	r3, r2
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000df6:	2201      	movs	r2, #1
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	091b      	lsrs	r3, r3, #4
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
 8000e14:	0013      	movs	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2203      	movs	r2, #3
 8000e28:	4013      	ands	r3, r2
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d017      	beq.n	8000e5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	2203      	movs	r2, #3
 8000e3a:	409a      	lsls	r2, r3
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	0013      	movs	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2203      	movs	r2, #3
 8000e64:	4013      	ands	r3, r2
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d123      	bne.n	8000eb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	08da      	lsrs	r2, r3, #3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3208      	adds	r2, #8
 8000e72:	0092      	lsls	r2, r2, #2
 8000e74:	58d3      	ldr	r3, [r2, r3]
 8000e76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	2207      	movs	r2, #7
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	220f      	movs	r2, #15
 8000e82:	409a      	lsls	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	43da      	mvns	r2, r3
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	691a      	ldr	r2, [r3, #16]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	2107      	movs	r1, #7
 8000e96:	400b      	ands	r3, r1
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	0013      	movs	r3, r2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	08da      	lsrs	r2, r3, #3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3208      	adds	r2, #8
 8000eac:	0092      	lsls	r2, r2, #2
 8000eae:	6939      	ldr	r1, [r7, #16]
 8000eb0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	0013      	movs	r3, r2
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2203      	movs	r2, #3
 8000ed0:	401a      	ands	r2, r3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	409a      	lsls	r2, r3
 8000ed8:	0013      	movs	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	23c0      	movs	r3, #192	@ 0xc0
 8000eec:	029b      	lsls	r3, r3, #10
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d100      	bne.n	8000ef4 <HAL_GPIO_Init+0x174>
 8000ef2:	e092      	b.n	800101a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000ef4:	4a50      	ldr	r2, [pc, #320]	@ (8001038 <HAL_GPIO_Init+0x2b8>)
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	089b      	lsrs	r3, r3, #2
 8000efa:	3318      	adds	r3, #24
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	589b      	ldr	r3, [r3, r2]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	2203      	movs	r2, #3
 8000f06:	4013      	ands	r3, r2
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	220f      	movs	r2, #15
 8000f0c:	409a      	lsls	r2, r3
 8000f0e:	0013      	movs	r3, r2
 8000f10:	43da      	mvns	r2, r3
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	23a0      	movs	r3, #160	@ 0xa0
 8000f1c:	05db      	lsls	r3, r3, #23
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d013      	beq.n	8000f4a <HAL_GPIO_Init+0x1ca>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a45      	ldr	r2, [pc, #276]	@ (800103c <HAL_GPIO_Init+0x2bc>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d00d      	beq.n	8000f46 <HAL_GPIO_Init+0x1c6>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a44      	ldr	r2, [pc, #272]	@ (8001040 <HAL_GPIO_Init+0x2c0>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d007      	beq.n	8000f42 <HAL_GPIO_Init+0x1c2>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a43      	ldr	r2, [pc, #268]	@ (8001044 <HAL_GPIO_Init+0x2c4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d101      	bne.n	8000f3e <HAL_GPIO_Init+0x1be>
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e006      	b.n	8000f4c <HAL_GPIO_Init+0x1cc>
 8000f3e:	2305      	movs	r3, #5
 8000f40:	e004      	b.n	8000f4c <HAL_GPIO_Init+0x1cc>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e002      	b.n	8000f4c <HAL_GPIO_Init+0x1cc>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <HAL_GPIO_Init+0x1cc>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	2103      	movs	r1, #3
 8000f50:	400a      	ands	r2, r1
 8000f52:	00d2      	lsls	r2, r2, #3
 8000f54:	4093      	lsls	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f5c:	4936      	ldr	r1, [pc, #216]	@ (8001038 <HAL_GPIO_Init+0x2b8>)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3318      	adds	r3, #24
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f6a:	4b33      	ldr	r3, [pc, #204]	@ (8001038 <HAL_GPIO_Init+0x2b8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43da      	mvns	r2, r3
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	2380      	movs	r3, #128	@ 0x80
 8000f80:	035b      	lsls	r3, r3, #13
 8000f82:	4013      	ands	r3, r2
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001038 <HAL_GPIO_Init+0x2b8>)
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f94:	4b28      	ldr	r3, [pc, #160]	@ (8001038 <HAL_GPIO_Init+0x2b8>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	43da      	mvns	r2, r3
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	2380      	movs	r3, #128	@ 0x80
 8000faa:	039b      	lsls	r3, r3, #14
 8000fac:	4013      	ands	r3, r2
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001038 <HAL_GPIO_Init+0x2b8>)
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8001038 <HAL_GPIO_Init+0x2b8>)
 8000fc0:	2384      	movs	r3, #132	@ 0x84
 8000fc2:	58d3      	ldr	r3, [r2, r3]
 8000fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	43da      	mvns	r2, r3
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	2380      	movs	r3, #128	@ 0x80
 8000fd6:	029b      	lsls	r3, r3, #10
 8000fd8:	4013      	ands	r3, r2
 8000fda:	d003      	beq.n	8000fe4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fe4:	4914      	ldr	r1, [pc, #80]	@ (8001038 <HAL_GPIO_Init+0x2b8>)
 8000fe6:	2284      	movs	r2, #132	@ 0x84
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000fec:	4a12      	ldr	r2, [pc, #72]	@ (8001038 <HAL_GPIO_Init+0x2b8>)
 8000fee:	2380      	movs	r3, #128	@ 0x80
 8000ff0:	58d3      	ldr	r3, [r2, r3]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	2380      	movs	r3, #128	@ 0x80
 8001004:	025b      	lsls	r3, r3, #9
 8001006:	4013      	ands	r3, r2
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001012:	4909      	ldr	r1, [pc, #36]	@ (8001038 <HAL_GPIO_Init+0x2b8>)
 8001014:	2280      	movs	r2, #128	@ 0x80
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	40da      	lsrs	r2, r3
 8001028:	1e13      	subs	r3, r2, #0
 800102a:	d000      	beq.n	800102e <HAL_GPIO_Init+0x2ae>
 800102c:	e6b0      	b.n	8000d90 <HAL_GPIO_Init+0x10>
  }
}
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	46c0      	nop			@ (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	b006      	add	sp, #24
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021800 	.word	0x40021800
 800103c:	50000400 	.word	0x50000400
 8001040:	50000800 	.word	0x50000800
 8001044:	50000c00 	.word	0x50000c00

08001048 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001050:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a19      	ldr	r2, [pc, #100]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001056:	4013      	ands	r3, r2
 8001058:	0019      	movs	r1, r3
 800105a:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	430a      	orrs	r2, r1
 8001060:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	2380      	movs	r3, #128	@ 0x80
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	429a      	cmp	r2, r3
 800106a:	d11f      	bne.n	80010ac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800106c:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	0013      	movs	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	189b      	adds	r3, r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4912      	ldr	r1, [pc, #72]	@ (80010c4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800107a:	0018      	movs	r0, r3
 800107c:	f7ff f840 	bl	8000100 <__udivsi3>
 8001080:	0003      	movs	r3, r0
 8001082:	3301      	adds	r3, #1
 8001084:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001086:	e008      	b.n	800109a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	3b01      	subs	r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	e001      	b.n	800109a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e009      	b.n	80010ae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800109a:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800109c:	695a      	ldr	r2, [r3, #20]
 800109e:	2380      	movs	r3, #128	@ 0x80
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	401a      	ands	r2, r3
 80010a4:	2380      	movs	r3, #128	@ 0x80
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d0ed      	beq.n	8001088 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	0018      	movs	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b004      	add	sp, #16
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	46c0      	nop			@ (mov r8, r8)
 80010b8:	40007000 	.word	0x40007000
 80010bc:	fffff9ff 	.word	0xfffff9ff
 80010c0:	20000004 	.word	0x20000004
 80010c4:	000f4240 	.word	0x000f4240

080010c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e2f3      	b.n	80016c2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2201      	movs	r2, #1
 80010e0:	4013      	ands	r3, r2
 80010e2:	d100      	bne.n	80010e6 <HAL_RCC_OscConfig+0x1e>
 80010e4:	e07c      	b.n	80011e0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010e6:	4bc3      	ldr	r3, [pc, #780]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	2238      	movs	r2, #56	@ 0x38
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010f0:	4bc0      	ldr	r3, [pc, #768]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	2203      	movs	r2, #3
 80010f6:	4013      	ands	r3, r2
 80010f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	2b10      	cmp	r3, #16
 80010fe:	d102      	bne.n	8001106 <HAL_RCC_OscConfig+0x3e>
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	2b03      	cmp	r3, #3
 8001104:	d002      	beq.n	800110c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	2b08      	cmp	r3, #8
 800110a:	d10b      	bne.n	8001124 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110c:	4bb9      	ldr	r3, [pc, #740]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	2380      	movs	r3, #128	@ 0x80
 8001112:	029b      	lsls	r3, r3, #10
 8001114:	4013      	ands	r3, r2
 8001116:	d062      	beq.n	80011de <HAL_RCC_OscConfig+0x116>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d15e      	bne.n	80011de <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e2ce      	b.n	80016c2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	2380      	movs	r3, #128	@ 0x80
 800112a:	025b      	lsls	r3, r3, #9
 800112c:	429a      	cmp	r2, r3
 800112e:	d107      	bne.n	8001140 <HAL_RCC_OscConfig+0x78>
 8001130:	4bb0      	ldr	r3, [pc, #704]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4baf      	ldr	r3, [pc, #700]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 8001136:	2180      	movs	r1, #128	@ 0x80
 8001138:	0249      	lsls	r1, r1, #9
 800113a:	430a      	orrs	r2, r1
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	e020      	b.n	8001182 <HAL_RCC_OscConfig+0xba>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	23a0      	movs	r3, #160	@ 0xa0
 8001146:	02db      	lsls	r3, r3, #11
 8001148:	429a      	cmp	r2, r3
 800114a:	d10e      	bne.n	800116a <HAL_RCC_OscConfig+0xa2>
 800114c:	4ba9      	ldr	r3, [pc, #676]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4ba8      	ldr	r3, [pc, #672]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 8001152:	2180      	movs	r1, #128	@ 0x80
 8001154:	02c9      	lsls	r1, r1, #11
 8001156:	430a      	orrs	r2, r1
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	4ba6      	ldr	r3, [pc, #664]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4ba5      	ldr	r3, [pc, #660]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 8001160:	2180      	movs	r1, #128	@ 0x80
 8001162:	0249      	lsls	r1, r1, #9
 8001164:	430a      	orrs	r2, r1
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	e00b      	b.n	8001182 <HAL_RCC_OscConfig+0xba>
 800116a:	4ba2      	ldr	r3, [pc, #648]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	4ba1      	ldr	r3, [pc, #644]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 8001170:	49a1      	ldr	r1, [pc, #644]	@ (80013f8 <HAL_RCC_OscConfig+0x330>)
 8001172:	400a      	ands	r2, r1
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	4b9f      	ldr	r3, [pc, #636]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4b9e      	ldr	r3, [pc, #632]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 800117c:	499f      	ldr	r1, [pc, #636]	@ (80013fc <HAL_RCC_OscConfig+0x334>)
 800117e:	400a      	ands	r2, r1
 8001180:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d014      	beq.n	80011b4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118a:	f7ff fabf 	bl	800070c <HAL_GetTick>
 800118e:	0003      	movs	r3, r0
 8001190:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001194:	f7ff faba 	bl	800070c <HAL_GetTick>
 8001198:	0002      	movs	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b64      	cmp	r3, #100	@ 0x64
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e28d      	b.n	80016c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011a6:	4b93      	ldr	r3, [pc, #588]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	2380      	movs	r3, #128	@ 0x80
 80011ac:	029b      	lsls	r3, r3, #10
 80011ae:	4013      	ands	r3, r2
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0xcc>
 80011b2:	e015      	b.n	80011e0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b4:	f7ff faaa 	bl	800070c <HAL_GetTick>
 80011b8:	0003      	movs	r3, r0
 80011ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011be:	f7ff faa5 	bl	800070c <HAL_GetTick>
 80011c2:	0002      	movs	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b64      	cmp	r3, #100	@ 0x64
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e278      	b.n	80016c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011d0:	4b88      	ldr	r3, [pc, #544]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	2380      	movs	r3, #128	@ 0x80
 80011d6:	029b      	lsls	r3, r3, #10
 80011d8:	4013      	ands	r3, r2
 80011da:	d1f0      	bne.n	80011be <HAL_RCC_OscConfig+0xf6>
 80011dc:	e000      	b.n	80011e0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011de:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2202      	movs	r2, #2
 80011e6:	4013      	ands	r3, r2
 80011e8:	d100      	bne.n	80011ec <HAL_RCC_OscConfig+0x124>
 80011ea:	e099      	b.n	8001320 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ec:	4b81      	ldr	r3, [pc, #516]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	2238      	movs	r2, #56	@ 0x38
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011f6:	4b7f      	ldr	r3, [pc, #508]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2203      	movs	r2, #3
 80011fc:	4013      	ands	r3, r2
 80011fe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	2b10      	cmp	r3, #16
 8001204:	d102      	bne.n	800120c <HAL_RCC_OscConfig+0x144>
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d002      	beq.n	8001212 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d135      	bne.n	800127e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001212:	4b78      	ldr	r3, [pc, #480]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	2380      	movs	r3, #128	@ 0x80
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4013      	ands	r3, r2
 800121c:	d005      	beq.n	800122a <HAL_RCC_OscConfig+0x162>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e24b      	b.n	80016c2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122a:	4b72      	ldr	r3, [pc, #456]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	4a74      	ldr	r2, [pc, #464]	@ (8001400 <HAL_RCC_OscConfig+0x338>)
 8001230:	4013      	ands	r3, r2
 8001232:	0019      	movs	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	021a      	lsls	r2, r3, #8
 800123a:	4b6e      	ldr	r3, [pc, #440]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 800123c:	430a      	orrs	r2, r1
 800123e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d112      	bne.n	800126c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001246:	4b6b      	ldr	r3, [pc, #428]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a6e      	ldr	r2, [pc, #440]	@ (8001404 <HAL_RCC_OscConfig+0x33c>)
 800124c:	4013      	ands	r3, r2
 800124e:	0019      	movs	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691a      	ldr	r2, [r3, #16]
 8001254:	4b67      	ldr	r3, [pc, #412]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 8001256:	430a      	orrs	r2, r1
 8001258:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800125a:	4b66      	ldr	r3, [pc, #408]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	0adb      	lsrs	r3, r3, #11
 8001260:	2207      	movs	r2, #7
 8001262:	4013      	ands	r3, r2
 8001264:	4a68      	ldr	r2, [pc, #416]	@ (8001408 <HAL_RCC_OscConfig+0x340>)
 8001266:	40da      	lsrs	r2, r3
 8001268:	4b68      	ldr	r3, [pc, #416]	@ (800140c <HAL_RCC_OscConfig+0x344>)
 800126a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800126c:	4b68      	ldr	r3, [pc, #416]	@ (8001410 <HAL_RCC_OscConfig+0x348>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	0018      	movs	r0, r3
 8001272:	f7ff f9ef 	bl	8000654 <HAL_InitTick>
 8001276:	1e03      	subs	r3, r0, #0
 8001278:	d051      	beq.n	800131e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e221      	b.n	80016c2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d030      	beq.n	80012e8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001286:	4b5b      	ldr	r3, [pc, #364]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a5e      	ldr	r2, [pc, #376]	@ (8001404 <HAL_RCC_OscConfig+0x33c>)
 800128c:	4013      	ands	r3, r2
 800128e:	0019      	movs	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691a      	ldr	r2, [r3, #16]
 8001294:	4b57      	ldr	r3, [pc, #348]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 8001296:	430a      	orrs	r2, r1
 8001298:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800129a:	4b56      	ldr	r3, [pc, #344]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	4b55      	ldr	r3, [pc, #340]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 80012a0:	2180      	movs	r1, #128	@ 0x80
 80012a2:	0049      	lsls	r1, r1, #1
 80012a4:	430a      	orrs	r2, r1
 80012a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a8:	f7ff fa30 	bl	800070c <HAL_GetTick>
 80012ac:	0003      	movs	r3, r0
 80012ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b2:	f7ff fa2b 	bl	800070c <HAL_GetTick>
 80012b6:	0002      	movs	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e1fe      	b.n	80016c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012c4:	4b4b      	ldr	r3, [pc, #300]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	2380      	movs	r3, #128	@ 0x80
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	4013      	ands	r3, r2
 80012ce:	d0f0      	beq.n	80012b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d0:	4b48      	ldr	r3, [pc, #288]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	4a4a      	ldr	r2, [pc, #296]	@ (8001400 <HAL_RCC_OscConfig+0x338>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	0019      	movs	r1, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	021a      	lsls	r2, r3, #8
 80012e0:	4b44      	ldr	r3, [pc, #272]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 80012e2:	430a      	orrs	r2, r1
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	e01b      	b.n	8001320 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80012e8:	4b42      	ldr	r3, [pc, #264]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b41      	ldr	r3, [pc, #260]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 80012ee:	4949      	ldr	r1, [pc, #292]	@ (8001414 <HAL_RCC_OscConfig+0x34c>)
 80012f0:	400a      	ands	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f4:	f7ff fa0a 	bl	800070c <HAL_GetTick>
 80012f8:	0003      	movs	r3, r0
 80012fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012fe:	f7ff fa05 	bl	800070c <HAL_GetTick>
 8001302:	0002      	movs	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e1d8      	b.n	80016c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001310:	4b38      	ldr	r3, [pc, #224]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	2380      	movs	r3, #128	@ 0x80
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	4013      	ands	r3, r2
 800131a:	d1f0      	bne.n	80012fe <HAL_RCC_OscConfig+0x236>
 800131c:	e000      	b.n	8001320 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800131e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2208      	movs	r2, #8
 8001326:	4013      	ands	r3, r2
 8001328:	d047      	beq.n	80013ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800132a:	4b32      	ldr	r3, [pc, #200]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	2238      	movs	r2, #56	@ 0x38
 8001330:	4013      	ands	r3, r2
 8001332:	2b18      	cmp	r3, #24
 8001334:	d10a      	bne.n	800134c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001336:	4b2f      	ldr	r3, [pc, #188]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 8001338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800133a:	2202      	movs	r2, #2
 800133c:	4013      	ands	r3, r2
 800133e:	d03c      	beq.n	80013ba <HAL_RCC_OscConfig+0x2f2>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d138      	bne.n	80013ba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e1ba      	b.n	80016c2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d019      	beq.n	8001388 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001354:	4b27      	ldr	r3, [pc, #156]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 8001356:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001358:	4b26      	ldr	r3, [pc, #152]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 800135a:	2101      	movs	r1, #1
 800135c:	430a      	orrs	r2, r1
 800135e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001360:	f7ff f9d4 	bl	800070c <HAL_GetTick>
 8001364:	0003      	movs	r3, r0
 8001366:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800136a:	f7ff f9cf 	bl	800070c <HAL_GetTick>
 800136e:	0002      	movs	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e1a2      	b.n	80016c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800137c:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 800137e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001380:	2202      	movs	r2, #2
 8001382:	4013      	ands	r3, r2
 8001384:	d0f1      	beq.n	800136a <HAL_RCC_OscConfig+0x2a2>
 8001386:	e018      	b.n	80013ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001388:	4b1a      	ldr	r3, [pc, #104]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 800138a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800138c:	4b19      	ldr	r3, [pc, #100]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 800138e:	2101      	movs	r1, #1
 8001390:	438a      	bics	r2, r1
 8001392:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001394:	f7ff f9ba 	bl	800070c <HAL_GetTick>
 8001398:	0003      	movs	r3, r0
 800139a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800139e:	f7ff f9b5 	bl	800070c <HAL_GetTick>
 80013a2:	0002      	movs	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e188      	b.n	80016c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013b0:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 80013b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013b4:	2202      	movs	r2, #2
 80013b6:	4013      	ands	r3, r2
 80013b8:	d1f1      	bne.n	800139e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2204      	movs	r2, #4
 80013c0:	4013      	ands	r3, r2
 80013c2:	d100      	bne.n	80013c6 <HAL_RCC_OscConfig+0x2fe>
 80013c4:	e0c6      	b.n	8001554 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013c6:	231f      	movs	r3, #31
 80013c8:	18fb      	adds	r3, r7, r3
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80013ce:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2238      	movs	r2, #56	@ 0x38
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b20      	cmp	r3, #32
 80013d8:	d11e      	bne.n	8001418 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_RCC_OscConfig+0x32c>)
 80013dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013de:	2202      	movs	r2, #2
 80013e0:	4013      	ands	r3, r2
 80013e2:	d100      	bne.n	80013e6 <HAL_RCC_OscConfig+0x31e>
 80013e4:	e0b6      	b.n	8001554 <HAL_RCC_OscConfig+0x48c>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d000      	beq.n	80013f0 <HAL_RCC_OscConfig+0x328>
 80013ee:	e0b1      	b.n	8001554 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e166      	b.n	80016c2 <HAL_RCC_OscConfig+0x5fa>
 80013f4:	40021000 	.word	0x40021000
 80013f8:	fffeffff 	.word	0xfffeffff
 80013fc:	fffbffff 	.word	0xfffbffff
 8001400:	ffff80ff 	.word	0xffff80ff
 8001404:	ffffc7ff 	.word	0xffffc7ff
 8001408:	00f42400 	.word	0x00f42400
 800140c:	20000004 	.word	0x20000004
 8001410:	20000008 	.word	0x20000008
 8001414:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001418:	4bac      	ldr	r3, [pc, #688]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 800141a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800141c:	2380      	movs	r3, #128	@ 0x80
 800141e:	055b      	lsls	r3, r3, #21
 8001420:	4013      	ands	r3, r2
 8001422:	d101      	bne.n	8001428 <HAL_RCC_OscConfig+0x360>
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <HAL_RCC_OscConfig+0x362>
 8001428:	2300      	movs	r3, #0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d011      	beq.n	8001452 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	4ba7      	ldr	r3, [pc, #668]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 8001430:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001432:	4ba6      	ldr	r3, [pc, #664]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 8001434:	2180      	movs	r1, #128	@ 0x80
 8001436:	0549      	lsls	r1, r1, #21
 8001438:	430a      	orrs	r2, r1
 800143a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800143c:	4ba3      	ldr	r3, [pc, #652]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 800143e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001440:	2380      	movs	r3, #128	@ 0x80
 8001442:	055b      	lsls	r3, r3, #21
 8001444:	4013      	ands	r3, r2
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800144a:	231f      	movs	r3, #31
 800144c:	18fb      	adds	r3, r7, r3
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001452:	4b9f      	ldr	r3, [pc, #636]	@ (80016d0 <HAL_RCC_OscConfig+0x608>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	2380      	movs	r3, #128	@ 0x80
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4013      	ands	r3, r2
 800145c:	d11a      	bne.n	8001494 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800145e:	4b9c      	ldr	r3, [pc, #624]	@ (80016d0 <HAL_RCC_OscConfig+0x608>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4b9b      	ldr	r3, [pc, #620]	@ (80016d0 <HAL_RCC_OscConfig+0x608>)
 8001464:	2180      	movs	r1, #128	@ 0x80
 8001466:	0049      	lsls	r1, r1, #1
 8001468:	430a      	orrs	r2, r1
 800146a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800146c:	f7ff f94e 	bl	800070c <HAL_GetTick>
 8001470:	0003      	movs	r3, r0
 8001472:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001476:	f7ff f949 	bl	800070c <HAL_GetTick>
 800147a:	0002      	movs	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e11c      	b.n	80016c2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001488:	4b91      	ldr	r3, [pc, #580]	@ (80016d0 <HAL_RCC_OscConfig+0x608>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	2380      	movs	r3, #128	@ 0x80
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	4013      	ands	r3, r2
 8001492:	d0f0      	beq.n	8001476 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d106      	bne.n	80014aa <HAL_RCC_OscConfig+0x3e2>
 800149c:	4b8b      	ldr	r3, [pc, #556]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 800149e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014a0:	4b8a      	ldr	r3, [pc, #552]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 80014a2:	2101      	movs	r1, #1
 80014a4:	430a      	orrs	r2, r1
 80014a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014a8:	e01c      	b.n	80014e4 <HAL_RCC_OscConfig+0x41c>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	2b05      	cmp	r3, #5
 80014b0:	d10c      	bne.n	80014cc <HAL_RCC_OscConfig+0x404>
 80014b2:	4b86      	ldr	r3, [pc, #536]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 80014b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014b6:	4b85      	ldr	r3, [pc, #532]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 80014b8:	2104      	movs	r1, #4
 80014ba:	430a      	orrs	r2, r1
 80014bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014be:	4b83      	ldr	r3, [pc, #524]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 80014c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014c2:	4b82      	ldr	r3, [pc, #520]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 80014c4:	2101      	movs	r1, #1
 80014c6:	430a      	orrs	r2, r1
 80014c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014ca:	e00b      	b.n	80014e4 <HAL_RCC_OscConfig+0x41c>
 80014cc:	4b7f      	ldr	r3, [pc, #508]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 80014ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014d0:	4b7e      	ldr	r3, [pc, #504]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 80014d2:	2101      	movs	r1, #1
 80014d4:	438a      	bics	r2, r1
 80014d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014d8:	4b7c      	ldr	r3, [pc, #496]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 80014da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014dc:	4b7b      	ldr	r3, [pc, #492]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 80014de:	2104      	movs	r1, #4
 80014e0:	438a      	bics	r2, r1
 80014e2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d014      	beq.n	8001516 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ec:	f7ff f90e 	bl	800070c <HAL_GetTick>
 80014f0:	0003      	movs	r3, r0
 80014f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014f4:	e009      	b.n	800150a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f6:	f7ff f909 	bl	800070c <HAL_GetTick>
 80014fa:	0002      	movs	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	4a74      	ldr	r2, [pc, #464]	@ (80016d4 <HAL_RCC_OscConfig+0x60c>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e0db      	b.n	80016c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800150a:	4b70      	ldr	r3, [pc, #448]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 800150c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800150e:	2202      	movs	r2, #2
 8001510:	4013      	ands	r3, r2
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x42e>
 8001514:	e013      	b.n	800153e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001516:	f7ff f8f9 	bl	800070c <HAL_GetTick>
 800151a:	0003      	movs	r3, r0
 800151c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800151e:	e009      	b.n	8001534 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001520:	f7ff f8f4 	bl	800070c <HAL_GetTick>
 8001524:	0002      	movs	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	4a6a      	ldr	r2, [pc, #424]	@ (80016d4 <HAL_RCC_OscConfig+0x60c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e0c6      	b.n	80016c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001534:	4b65      	ldr	r3, [pc, #404]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 8001536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001538:	2202      	movs	r2, #2
 800153a:	4013      	ands	r3, r2
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800153e:	231f      	movs	r3, #31
 8001540:	18fb      	adds	r3, r7, r3
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d105      	bne.n	8001554 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001548:	4b60      	ldr	r3, [pc, #384]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 800154a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800154c:	4b5f      	ldr	r3, [pc, #380]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 800154e:	4962      	ldr	r1, [pc, #392]	@ (80016d8 <HAL_RCC_OscConfig+0x610>)
 8001550:	400a      	ands	r2, r1
 8001552:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d100      	bne.n	800155e <HAL_RCC_OscConfig+0x496>
 800155c:	e0b0      	b.n	80016c0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800155e:	4b5b      	ldr	r3, [pc, #364]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2238      	movs	r2, #56	@ 0x38
 8001564:	4013      	ands	r3, r2
 8001566:	2b10      	cmp	r3, #16
 8001568:	d100      	bne.n	800156c <HAL_RCC_OscConfig+0x4a4>
 800156a:	e078      	b.n	800165e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d153      	bne.n	800161c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001574:	4b55      	ldr	r3, [pc, #340]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b54      	ldr	r3, [pc, #336]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 800157a:	4958      	ldr	r1, [pc, #352]	@ (80016dc <HAL_RCC_OscConfig+0x614>)
 800157c:	400a      	ands	r2, r1
 800157e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff f8c4 	bl	800070c <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158a:	f7ff f8bf 	bl	800070c <HAL_GetTick>
 800158e:	0002      	movs	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e092      	b.n	80016c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800159c:	4b4b      	ldr	r3, [pc, #300]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2380      	movs	r3, #128	@ 0x80
 80015a2:	049b      	lsls	r3, r3, #18
 80015a4:	4013      	ands	r3, r2
 80015a6:	d1f0      	bne.n	800158a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a8:	4b48      	ldr	r3, [pc, #288]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	4a4c      	ldr	r2, [pc, #304]	@ (80016e0 <HAL_RCC_OscConfig+0x618>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	0019      	movs	r1, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1a      	ldr	r2, [r3, #32]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	431a      	orrs	r2, r3
 80015d0:	4b3e      	ldr	r3, [pc, #248]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 80015d2:	430a      	orrs	r2, r1
 80015d4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d6:	4b3d      	ldr	r3, [pc, #244]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4b3c      	ldr	r3, [pc, #240]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 80015dc:	2180      	movs	r1, #128	@ 0x80
 80015de:	0449      	lsls	r1, r1, #17
 80015e0:	430a      	orrs	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80015e4:	4b39      	ldr	r3, [pc, #228]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	4b38      	ldr	r3, [pc, #224]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 80015ea:	2180      	movs	r1, #128	@ 0x80
 80015ec:	0549      	lsls	r1, r1, #21
 80015ee:	430a      	orrs	r2, r1
 80015f0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f2:	f7ff f88b 	bl	800070c <HAL_GetTick>
 80015f6:	0003      	movs	r3, r0
 80015f8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fc:	f7ff f886 	bl	800070c <HAL_GetTick>
 8001600:	0002      	movs	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e059      	b.n	80016c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800160e:	4b2f      	ldr	r3, [pc, #188]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	2380      	movs	r3, #128	@ 0x80
 8001614:	049b      	lsls	r3, r3, #18
 8001616:	4013      	ands	r3, r2
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x534>
 800161a:	e051      	b.n	80016c0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161c:	4b2b      	ldr	r3, [pc, #172]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b2a      	ldr	r3, [pc, #168]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 8001622:	492e      	ldr	r1, [pc, #184]	@ (80016dc <HAL_RCC_OscConfig+0x614>)
 8001624:	400a      	ands	r2, r1
 8001626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7ff f870 	bl	800070c <HAL_GetTick>
 800162c:	0003      	movs	r3, r0
 800162e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001632:	f7ff f86b 	bl	800070c <HAL_GetTick>
 8001636:	0002      	movs	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e03e      	b.n	80016c2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001644:	4b21      	ldr	r3, [pc, #132]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2380      	movs	r3, #128	@ 0x80
 800164a:	049b      	lsls	r3, r3, #18
 800164c:	4013      	ands	r3, r2
 800164e:	d1f0      	bne.n	8001632 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001650:	4b1e      	ldr	r3, [pc, #120]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	4b1d      	ldr	r3, [pc, #116]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 8001656:	4923      	ldr	r1, [pc, #140]	@ (80016e4 <HAL_RCC_OscConfig+0x61c>)
 8001658:	400a      	ands	r2, r1
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	e030      	b.n	80016c0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d101      	bne.n	800166a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e02b      	b.n	80016c2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800166a:	4b18      	ldr	r3, [pc, #96]	@ (80016cc <HAL_RCC_OscConfig+0x604>)
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	2203      	movs	r2, #3
 8001674:	401a      	ands	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	429a      	cmp	r2, r3
 800167c:	d11e      	bne.n	80016bc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2270      	movs	r2, #112	@ 0x70
 8001682:	401a      	ands	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001688:	429a      	cmp	r2, r3
 800168a:	d117      	bne.n	80016bc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	23fe      	movs	r3, #254	@ 0xfe
 8001690:	01db      	lsls	r3, r3, #7
 8001692:	401a      	ands	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001698:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800169a:	429a      	cmp	r2, r3
 800169c:	d10e      	bne.n	80016bc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	23f8      	movs	r3, #248	@ 0xf8
 80016a2:	039b      	lsls	r3, r3, #14
 80016a4:	401a      	ands	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d106      	bne.n	80016bc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	0f5b      	lsrs	r3, r3, #29
 80016b2:	075a      	lsls	r2, r3, #29
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	0018      	movs	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b008      	add	sp, #32
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			@ (mov r8, r8)
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40007000 	.word	0x40007000
 80016d4:	00001388 	.word	0x00001388
 80016d8:	efffffff 	.word	0xefffffff
 80016dc:	feffffff 	.word	0xfeffffff
 80016e0:	1fc1808c 	.word	0x1fc1808c
 80016e4:	effefffc 	.word	0xeffefffc

080016e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0e9      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016fc:	4b76      	ldr	r3, [pc, #472]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2207      	movs	r2, #7
 8001702:	4013      	ands	r3, r2
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d91e      	bls.n	8001748 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170a:	4b73      	ldr	r3, [pc, #460]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2207      	movs	r2, #7
 8001710:	4393      	bics	r3, r2
 8001712:	0019      	movs	r1, r3
 8001714:	4b70      	ldr	r3, [pc, #448]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800171c:	f7fe fff6 	bl	800070c <HAL_GetTick>
 8001720:	0003      	movs	r3, r0
 8001722:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001724:	e009      	b.n	800173a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001726:	f7fe fff1 	bl	800070c <HAL_GetTick>
 800172a:	0002      	movs	r2, r0
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	4a6a      	ldr	r2, [pc, #424]	@ (80018dc <HAL_RCC_ClockConfig+0x1f4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d901      	bls.n	800173a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e0ca      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800173a:	4b67      	ldr	r3, [pc, #412]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2207      	movs	r2, #7
 8001740:	4013      	ands	r3, r2
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d1ee      	bne.n	8001726 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2202      	movs	r2, #2
 800174e:	4013      	ands	r3, r2
 8001750:	d015      	beq.n	800177e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2204      	movs	r2, #4
 8001758:	4013      	ands	r3, r2
 800175a:	d006      	beq.n	800176a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800175c:	4b60      	ldr	r3, [pc, #384]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	4b5f      	ldr	r3, [pc, #380]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001762:	21e0      	movs	r1, #224	@ 0xe0
 8001764:	01c9      	lsls	r1, r1, #7
 8001766:	430a      	orrs	r2, r1
 8001768:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176a:	4b5d      	ldr	r3, [pc, #372]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	4a5d      	ldr	r2, [pc, #372]	@ (80018e4 <HAL_RCC_ClockConfig+0x1fc>)
 8001770:	4013      	ands	r3, r2
 8001772:	0019      	movs	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	4b59      	ldr	r3, [pc, #356]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 800177a:	430a      	orrs	r2, r1
 800177c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2201      	movs	r2, #1
 8001784:	4013      	ands	r3, r2
 8001786:	d057      	beq.n	8001838 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d107      	bne.n	80017a0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001790:	4b53      	ldr	r3, [pc, #332]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	2380      	movs	r3, #128	@ 0x80
 8001796:	029b      	lsls	r3, r3, #10
 8001798:	4013      	ands	r3, r2
 800179a:	d12b      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e097      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d107      	bne.n	80017b8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a8:	4b4d      	ldr	r3, [pc, #308]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2380      	movs	r3, #128	@ 0x80
 80017ae:	049b      	lsls	r3, r3, #18
 80017b0:	4013      	ands	r3, r2
 80017b2:	d11f      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e08b      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d107      	bne.n	80017d0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017c0:	4b47      	ldr	r3, [pc, #284]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	2380      	movs	r3, #128	@ 0x80
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4013      	ands	r3, r2
 80017ca:	d113      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e07f      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017d8:	4b41      	ldr	r3, [pc, #260]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 80017da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017dc:	2202      	movs	r2, #2
 80017de:	4013      	ands	r3, r2
 80017e0:	d108      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e074      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017e6:	4b3e      	ldr	r3, [pc, #248]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 80017e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ea:	2202      	movs	r2, #2
 80017ec:	4013      	ands	r3, r2
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e06d      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017f4:	4b3a      	ldr	r3, [pc, #232]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2207      	movs	r2, #7
 80017fa:	4393      	bics	r3, r2
 80017fc:	0019      	movs	r1, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	4b37      	ldr	r3, [pc, #220]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001804:	430a      	orrs	r2, r1
 8001806:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001808:	f7fe ff80 	bl	800070c <HAL_GetTick>
 800180c:	0003      	movs	r3, r0
 800180e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001810:	e009      	b.n	8001826 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001812:	f7fe ff7b 	bl	800070c <HAL_GetTick>
 8001816:	0002      	movs	r2, r0
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	4a2f      	ldr	r2, [pc, #188]	@ (80018dc <HAL_RCC_ClockConfig+0x1f4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e054      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001826:	4b2e      	ldr	r3, [pc, #184]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2238      	movs	r2, #56	@ 0x38
 800182c:	401a      	ands	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	429a      	cmp	r2, r3
 8001836:	d1ec      	bne.n	8001812 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001838:	4b27      	ldr	r3, [pc, #156]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2207      	movs	r2, #7
 800183e:	4013      	ands	r3, r2
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d21e      	bcs.n	8001884 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b24      	ldr	r3, [pc, #144]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2207      	movs	r2, #7
 800184c:	4393      	bics	r3, r2
 800184e:	0019      	movs	r1, r3
 8001850:	4b21      	ldr	r3, [pc, #132]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001858:	f7fe ff58 	bl	800070c <HAL_GetTick>
 800185c:	0003      	movs	r3, r0
 800185e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001860:	e009      	b.n	8001876 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001862:	f7fe ff53 	bl	800070c <HAL_GetTick>
 8001866:	0002      	movs	r2, r0
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	4a1b      	ldr	r2, [pc, #108]	@ (80018dc <HAL_RCC_ClockConfig+0x1f4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e02c      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001876:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2207      	movs	r2, #7
 800187c:	4013      	ands	r3, r2
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d1ee      	bne.n	8001862 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2204      	movs	r2, #4
 800188a:	4013      	ands	r3, r2
 800188c:	d009      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800188e:	4b14      	ldr	r3, [pc, #80]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	4a15      	ldr	r2, [pc, #84]	@ (80018e8 <HAL_RCC_ClockConfig+0x200>)
 8001894:	4013      	ands	r3, r2
 8001896:	0019      	movs	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 800189e:	430a      	orrs	r2, r1
 80018a0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018a2:	f000 f829 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 80018a6:	0001      	movs	r1, r0
 80018a8:	4b0d      	ldr	r3, [pc, #52]	@ (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	220f      	movs	r2, #15
 80018b0:	401a      	ands	r2, r3
 80018b2:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <HAL_RCC_ClockConfig+0x204>)
 80018b4:	0092      	lsls	r2, r2, #2
 80018b6:	58d3      	ldr	r3, [r2, r3]
 80018b8:	221f      	movs	r2, #31
 80018ba:	4013      	ands	r3, r2
 80018bc:	000a      	movs	r2, r1
 80018be:	40da      	lsrs	r2, r3
 80018c0:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <HAL_RCC_ClockConfig+0x208>)
 80018c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018c4:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <HAL_RCC_ClockConfig+0x20c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	0018      	movs	r0, r3
 80018ca:	f7fe fec3 	bl	8000654 <HAL_InitTick>
 80018ce:	0003      	movs	r3, r0
}
 80018d0:	0018      	movs	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	b004      	add	sp, #16
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40022000 	.word	0x40022000
 80018dc:	00001388 	.word	0x00001388
 80018e0:	40021000 	.word	0x40021000
 80018e4:	fffff0ff 	.word	0xfffff0ff
 80018e8:	ffff8fff 	.word	0xffff8fff
 80018ec:	08002a08 	.word	0x08002a08
 80018f0:	20000004 	.word	0x20000004
 80018f4:	20000008 	.word	0x20000008

080018f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018fe:	4b3c      	ldr	r3, [pc, #240]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2238      	movs	r2, #56	@ 0x38
 8001904:	4013      	ands	r3, r2
 8001906:	d10f      	bne.n	8001928 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001908:	4b39      	ldr	r3, [pc, #228]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	0adb      	lsrs	r3, r3, #11
 800190e:	2207      	movs	r2, #7
 8001910:	4013      	ands	r3, r2
 8001912:	2201      	movs	r2, #1
 8001914:	409a      	lsls	r2, r3
 8001916:	0013      	movs	r3, r2
 8001918:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800191a:	6839      	ldr	r1, [r7, #0]
 800191c:	4835      	ldr	r0, [pc, #212]	@ (80019f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800191e:	f7fe fbef 	bl	8000100 <__udivsi3>
 8001922:	0003      	movs	r3, r0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	e05d      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001928:	4b31      	ldr	r3, [pc, #196]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2238      	movs	r2, #56	@ 0x38
 800192e:	4013      	ands	r3, r2
 8001930:	2b08      	cmp	r3, #8
 8001932:	d102      	bne.n	800193a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001934:	4b30      	ldr	r3, [pc, #192]	@ (80019f8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	e054      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800193a:	4b2d      	ldr	r3, [pc, #180]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2238      	movs	r2, #56	@ 0x38
 8001940:	4013      	ands	r3, r2
 8001942:	2b10      	cmp	r3, #16
 8001944:	d138      	bne.n	80019b8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001946:	4b2a      	ldr	r3, [pc, #168]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2203      	movs	r2, #3
 800194c:	4013      	ands	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001950:	4b27      	ldr	r3, [pc, #156]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	2207      	movs	r2, #7
 8001958:	4013      	ands	r3, r2
 800195a:	3301      	adds	r3, #1
 800195c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b03      	cmp	r3, #3
 8001962:	d10d      	bne.n	8001980 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	4824      	ldr	r0, [pc, #144]	@ (80019f8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001968:	f7fe fbca 	bl	8000100 <__udivsi3>
 800196c:	0003      	movs	r3, r0
 800196e:	0019      	movs	r1, r3
 8001970:	4b1f      	ldr	r3, [pc, #124]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	227f      	movs	r2, #127	@ 0x7f
 8001978:	4013      	ands	r3, r2
 800197a:	434b      	muls	r3, r1
 800197c:	617b      	str	r3, [r7, #20]
        break;
 800197e:	e00d      	b.n	800199c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	481c      	ldr	r0, [pc, #112]	@ (80019f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001984:	f7fe fbbc 	bl	8000100 <__udivsi3>
 8001988:	0003      	movs	r3, r0
 800198a:	0019      	movs	r1, r3
 800198c:	4b18      	ldr	r3, [pc, #96]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	227f      	movs	r2, #127	@ 0x7f
 8001994:	4013      	ands	r3, r2
 8001996:	434b      	muls	r3, r1
 8001998:	617b      	str	r3, [r7, #20]
        break;
 800199a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800199c:	4b14      	ldr	r3, [pc, #80]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	0f5b      	lsrs	r3, r3, #29
 80019a2:	2207      	movs	r2, #7
 80019a4:	4013      	ands	r3, r2
 80019a6:	3301      	adds	r3, #1
 80019a8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	6978      	ldr	r0, [r7, #20]
 80019ae:	f7fe fba7 	bl	8000100 <__udivsi3>
 80019b2:	0003      	movs	r3, r0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	e015      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019b8:	4b0d      	ldr	r3, [pc, #52]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2238      	movs	r2, #56	@ 0x38
 80019be:	4013      	ands	r3, r2
 80019c0:	2b20      	cmp	r3, #32
 80019c2:	d103      	bne.n	80019cc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80019c4:	2380      	movs	r3, #128	@ 0x80
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	e00b      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019cc:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2238      	movs	r2, #56	@ 0x38
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b18      	cmp	r3, #24
 80019d6:	d103      	bne.n	80019e0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80019d8:	23fa      	movs	r3, #250	@ 0xfa
 80019da:	01db      	lsls	r3, r3, #7
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	e001      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80019e4:	693b      	ldr	r3, [r7, #16]
}
 80019e6:	0018      	movs	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b006      	add	sp, #24
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	46c0      	nop			@ (mov r8, r8)
 80019f0:	40021000 	.word	0x40021000
 80019f4:	00f42400 	.word	0x00f42400
 80019f8:	007a1200 	.word	0x007a1200

080019fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e04a      	b.n	8001aa4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	223d      	movs	r2, #61	@ 0x3d
 8001a12:	5c9b      	ldrb	r3, [r3, r2]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d107      	bne.n	8001a2a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	223c      	movs	r2, #60	@ 0x3c
 8001a1e:	2100      	movs	r1, #0
 8001a20:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	0018      	movs	r0, r3
 8001a26:	f7fe fd17 	bl	8000458 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	223d      	movs	r2, #61	@ 0x3d
 8001a2e:	2102      	movs	r1, #2
 8001a30:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	0019      	movs	r1, r3
 8001a3c:	0010      	movs	r0, r2
 8001a3e:	f000 fc0f 	bl	8002260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2248      	movs	r2, #72	@ 0x48
 8001a46:	2101      	movs	r1, #1
 8001a48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	223e      	movs	r2, #62	@ 0x3e
 8001a4e:	2101      	movs	r1, #1
 8001a50:	5499      	strb	r1, [r3, r2]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	223f      	movs	r2, #63	@ 0x3f
 8001a56:	2101      	movs	r1, #1
 8001a58:	5499      	strb	r1, [r3, r2]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2240      	movs	r2, #64	@ 0x40
 8001a5e:	2101      	movs	r1, #1
 8001a60:	5499      	strb	r1, [r3, r2]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2241      	movs	r2, #65	@ 0x41
 8001a66:	2101      	movs	r1, #1
 8001a68:	5499      	strb	r1, [r3, r2]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2242      	movs	r2, #66	@ 0x42
 8001a6e:	2101      	movs	r1, #1
 8001a70:	5499      	strb	r1, [r3, r2]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2243      	movs	r2, #67	@ 0x43
 8001a76:	2101      	movs	r1, #1
 8001a78:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2244      	movs	r2, #68	@ 0x44
 8001a7e:	2101      	movs	r1, #1
 8001a80:	5499      	strb	r1, [r3, r2]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2245      	movs	r2, #69	@ 0x45
 8001a86:	2101      	movs	r1, #1
 8001a88:	5499      	strb	r1, [r3, r2]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2246      	movs	r2, #70	@ 0x46
 8001a8e:	2101      	movs	r1, #1
 8001a90:	5499      	strb	r1, [r3, r2]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2247      	movs	r2, #71	@ 0x47
 8001a96:	2101      	movs	r1, #1
 8001a98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	223d      	movs	r2, #61	@ 0x3d
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b002      	add	sp, #8
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	001a      	movs	r2, r3
 8001aba:	1cbb      	adds	r3, r7, #2
 8001abc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001abe:	2317      	movs	r3, #23
 8001ac0:	18fb      	adds	r3, r7, r3
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d108      	bne.n	8001ade <HAL_TIM_PWM_Start_DMA+0x32>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	223e      	movs	r2, #62	@ 0x3e
 8001ad0:	5c9b      	ldrb	r3, [r3, r2]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	3b02      	subs	r3, #2
 8001ad6:	425a      	negs	r2, r3
 8001ad8:	4153      	adcs	r3, r2
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	e037      	b.n	8001b4e <HAL_TIM_PWM_Start_DMA+0xa2>
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d108      	bne.n	8001af6 <HAL_TIM_PWM_Start_DMA+0x4a>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	223f      	movs	r2, #63	@ 0x3f
 8001ae8:	5c9b      	ldrb	r3, [r3, r2]
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	3b02      	subs	r3, #2
 8001aee:	425a      	negs	r2, r3
 8001af0:	4153      	adcs	r3, r2
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	e02b      	b.n	8001b4e <HAL_TIM_PWM_Start_DMA+0xa2>
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d108      	bne.n	8001b0e <HAL_TIM_PWM_Start_DMA+0x62>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2240      	movs	r2, #64	@ 0x40
 8001b00:	5c9b      	ldrb	r3, [r3, r2]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	3b02      	subs	r3, #2
 8001b06:	425a      	negs	r2, r3
 8001b08:	4153      	adcs	r3, r2
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	e01f      	b.n	8001b4e <HAL_TIM_PWM_Start_DMA+0xa2>
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	2b0c      	cmp	r3, #12
 8001b12:	d108      	bne.n	8001b26 <HAL_TIM_PWM_Start_DMA+0x7a>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2241      	movs	r2, #65	@ 0x41
 8001b18:	5c9b      	ldrb	r3, [r3, r2]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	3b02      	subs	r3, #2
 8001b1e:	425a      	negs	r2, r3
 8001b20:	4153      	adcs	r3, r2
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	e013      	b.n	8001b4e <HAL_TIM_PWM_Start_DMA+0xa2>
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2b10      	cmp	r3, #16
 8001b2a:	d108      	bne.n	8001b3e <HAL_TIM_PWM_Start_DMA+0x92>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2242      	movs	r2, #66	@ 0x42
 8001b30:	5c9b      	ldrb	r3, [r3, r2]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	3b02      	subs	r3, #2
 8001b36:	425a      	negs	r2, r3
 8001b38:	4153      	adcs	r3, r2
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	e007      	b.n	8001b4e <HAL_TIM_PWM_Start_DMA+0xa2>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2243      	movs	r2, #67	@ 0x43
 8001b42:	5c9b      	ldrb	r3, [r3, r2]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	3b02      	subs	r3, #2
 8001b48:	425a      	negs	r2, r3
 8001b4a:	4153      	adcs	r3, r2
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8001b52:	2302      	movs	r3, #2
 8001b54:	e183      	b.n	8001e5e <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d108      	bne.n	8001b6e <HAL_TIM_PWM_Start_DMA+0xc2>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	223e      	movs	r2, #62	@ 0x3e
 8001b60:	5c9b      	ldrb	r3, [r3, r2]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	3b01      	subs	r3, #1
 8001b66:	425a      	negs	r2, r3
 8001b68:	4153      	adcs	r3, r2
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	e037      	b.n	8001bde <HAL_TIM_PWM_Start_DMA+0x132>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d108      	bne.n	8001b86 <HAL_TIM_PWM_Start_DMA+0xda>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	223f      	movs	r2, #63	@ 0x3f
 8001b78:	5c9b      	ldrb	r3, [r3, r2]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	425a      	negs	r2, r3
 8001b80:	4153      	adcs	r3, r2
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	e02b      	b.n	8001bde <HAL_TIM_PWM_Start_DMA+0x132>
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d108      	bne.n	8001b9e <HAL_TIM_PWM_Start_DMA+0xf2>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2240      	movs	r2, #64	@ 0x40
 8001b90:	5c9b      	ldrb	r3, [r3, r2]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	3b01      	subs	r3, #1
 8001b96:	425a      	negs	r2, r3
 8001b98:	4153      	adcs	r3, r2
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	e01f      	b.n	8001bde <HAL_TIM_PWM_Start_DMA+0x132>
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b0c      	cmp	r3, #12
 8001ba2:	d108      	bne.n	8001bb6 <HAL_TIM_PWM_Start_DMA+0x10a>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2241      	movs	r2, #65	@ 0x41
 8001ba8:	5c9b      	ldrb	r3, [r3, r2]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	3b01      	subs	r3, #1
 8001bae:	425a      	negs	r2, r3
 8001bb0:	4153      	adcs	r3, r2
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	e013      	b.n	8001bde <HAL_TIM_PWM_Start_DMA+0x132>
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b10      	cmp	r3, #16
 8001bba:	d108      	bne.n	8001bce <HAL_TIM_PWM_Start_DMA+0x122>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2242      	movs	r2, #66	@ 0x42
 8001bc0:	5c9b      	ldrb	r3, [r3, r2]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	425a      	negs	r2, r3
 8001bc8:	4153      	adcs	r3, r2
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	e007      	b.n	8001bde <HAL_TIM_PWM_Start_DMA+0x132>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2243      	movs	r2, #67	@ 0x43
 8001bd2:	5c9b      	ldrb	r3, [r3, r2]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	425a      	negs	r2, r3
 8001bda:	4153      	adcs	r3, r2
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d035      	beq.n	8001c4e <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_TIM_PWM_Start_DMA+0x144>
 8001be8:	1cbb      	adds	r3, r7, #2
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e134      	b.n	8001e5e <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d104      	bne.n	8001c04 <HAL_TIM_PWM_Start_DMA+0x158>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	223e      	movs	r2, #62	@ 0x3e
 8001bfe:	2102      	movs	r1, #2
 8001c00:	5499      	strb	r1, [r3, r2]
 8001c02:	e026      	b.n	8001c52 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d104      	bne.n	8001c14 <HAL_TIM_PWM_Start_DMA+0x168>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	223f      	movs	r2, #63	@ 0x3f
 8001c0e:	2102      	movs	r1, #2
 8001c10:	5499      	strb	r1, [r3, r2]
 8001c12:	e01e      	b.n	8001c52 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d104      	bne.n	8001c24 <HAL_TIM_PWM_Start_DMA+0x178>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2240      	movs	r2, #64	@ 0x40
 8001c1e:	2102      	movs	r1, #2
 8001c20:	5499      	strb	r1, [r3, r2]
 8001c22:	e016      	b.n	8001c52 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d104      	bne.n	8001c34 <HAL_TIM_PWM_Start_DMA+0x188>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2241      	movs	r2, #65	@ 0x41
 8001c2e:	2102      	movs	r1, #2
 8001c30:	5499      	strb	r1, [r3, r2]
 8001c32:	e00e      	b.n	8001c52 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b10      	cmp	r3, #16
 8001c38:	d104      	bne.n	8001c44 <HAL_TIM_PWM_Start_DMA+0x198>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2242      	movs	r2, #66	@ 0x42
 8001c3e:	2102      	movs	r1, #2
 8001c40:	5499      	strb	r1, [r3, r2]
 8001c42:	e006      	b.n	8001c52 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2243      	movs	r2, #67	@ 0x43
 8001c48:	2102      	movs	r1, #2
 8001c4a:	5499      	strb	r1, [r3, r2]
 8001c4c:	e001      	b.n	8001c52 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e105      	b.n	8001e5e <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b0c      	cmp	r3, #12
 8001c56:	d100      	bne.n	8001c5a <HAL_TIM_PWM_Start_DMA+0x1ae>
 8001c58:	e080      	b.n	8001d5c <HAL_TIM_PWM_Start_DMA+0x2b0>
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b0c      	cmp	r3, #12
 8001c5e:	d900      	bls.n	8001c62 <HAL_TIM_PWM_Start_DMA+0x1b6>
 8001c60:	e0a1      	b.n	8001da6 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d054      	beq.n	8001d12 <HAL_TIM_PWM_Start_DMA+0x266>
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d900      	bls.n	8001c70 <HAL_TIM_PWM_Start_DMA+0x1c4>
 8001c6e:	e09a      	b.n	8001da6 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_TIM_PWM_Start_DMA+0x1d2>
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d025      	beq.n	8001cc8 <HAL_TIM_PWM_Start_DMA+0x21c>
 8001c7c:	e093      	b.n	8001da6 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c82:	4a79      	ldr	r2, [pc, #484]	@ (8001e68 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8001c84:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8a:	4a78      	ldr	r2, [pc, #480]	@ (8001e6c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8001c8c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c92:	4a77      	ldr	r2, [pc, #476]	@ (8001e70 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8001c94:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	3334      	adds	r3, #52	@ 0x34
 8001ca2:	001a      	movs	r2, r3
 8001ca4:	1cbb      	adds	r3, r7, #2
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	f7fe fea2 	bl	80009f0 <HAL_DMA_Start_IT>
 8001cac:	1e03      	subs	r3, r0, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0d4      	b.n	8001e5e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2180      	movs	r1, #128	@ 0x80
 8001cc0:	0089      	lsls	r1, r1, #2
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	60da      	str	r2, [r3, #12]
      break;
 8001cc6:	e073      	b.n	8001db0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ccc:	4a66      	ldr	r2, [pc, #408]	@ (8001e68 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8001cce:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd4:	4a65      	ldr	r2, [pc, #404]	@ (8001e6c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8001cd6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cdc:	4a64      	ldr	r2, [pc, #400]	@ (8001e70 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8001cde:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	3338      	adds	r3, #56	@ 0x38
 8001cec:	001a      	movs	r2, r3
 8001cee:	1cbb      	adds	r3, r7, #2
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	f7fe fe7d 	bl	80009f0 <HAL_DMA_Start_IT>
 8001cf6:	1e03      	subs	r3, r0, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e0af      	b.n	8001e5e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2180      	movs	r1, #128	@ 0x80
 8001d0a:	00c9      	lsls	r1, r1, #3
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	60da      	str	r2, [r3, #12]
      break;
 8001d10:	e04e      	b.n	8001db0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d16:	4a54      	ldr	r2, [pc, #336]	@ (8001e68 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8001d18:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1e:	4a53      	ldr	r2, [pc, #332]	@ (8001e6c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8001d20:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d26:	4a52      	ldr	r2, [pc, #328]	@ (8001e70 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8001d28:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	333c      	adds	r3, #60	@ 0x3c
 8001d36:	001a      	movs	r2, r3
 8001d38:	1cbb      	adds	r3, r7, #2
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	f7fe fe58 	bl	80009f0 <HAL_DMA_Start_IT>
 8001d40:	1e03      	subs	r3, r0, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e08a      	b.n	8001e5e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2180      	movs	r1, #128	@ 0x80
 8001d54:	0109      	lsls	r1, r1, #4
 8001d56:	430a      	orrs	r2, r1
 8001d58:	60da      	str	r2, [r3, #12]
      break;
 8001d5a:	e029      	b.n	8001db0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d60:	4a41      	ldr	r2, [pc, #260]	@ (8001e68 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8001d62:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d68:	4a40      	ldr	r2, [pc, #256]	@ (8001e6c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8001d6a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d70:	4a3f      	ldr	r2, [pc, #252]	@ (8001e70 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8001d72:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	3340      	adds	r3, #64	@ 0x40
 8001d80:	001a      	movs	r2, r3
 8001d82:	1cbb      	adds	r3, r7, #2
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	f7fe fe33 	bl	80009f0 <HAL_DMA_Start_IT>
 8001d8a:	1e03      	subs	r3, r0, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e065      	b.n	8001e5e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2180      	movs	r1, #128	@ 0x80
 8001d9e:	0149      	lsls	r1, r1, #5
 8001da0:	430a      	orrs	r2, r1
 8001da2:	60da      	str	r2, [r3, #12]
      break;
 8001da4:	e004      	b.n	8001db0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8001da6:	2317      	movs	r3, #23
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	2201      	movs	r2, #1
 8001dac:	701a      	strb	r2, [r3, #0]
      break;
 8001dae:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8001db0:	2317      	movs	r3, #23
 8001db2:	18fb      	adds	r3, r7, r3
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d14e      	bne.n	8001e58 <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68b9      	ldr	r1, [r7, #8]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f000 fd62 	bl	800288c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a29      	ldr	r2, [pc, #164]	@ (8001e74 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d009      	beq.n	8001de6 <HAL_TIM_PWM_Start_DMA+0x33a>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a28      	ldr	r2, [pc, #160]	@ (8001e78 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d004      	beq.n	8001de6 <HAL_TIM_PWM_Start_DMA+0x33a>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a26      	ldr	r2, [pc, #152]	@ (8001e7c <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d101      	bne.n	8001dea <HAL_TIM_PWM_Start_DMA+0x33e>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <HAL_TIM_PWM_Start_DMA+0x340>
 8001dea:	2300      	movs	r3, #0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d008      	beq.n	8001e02 <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2180      	movs	r1, #128	@ 0x80
 8001dfc:	0209      	lsls	r1, r1, #8
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a1b      	ldr	r2, [pc, #108]	@ (8001e74 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d004      	beq.n	8001e16 <HAL_TIM_PWM_Start_DMA+0x36a>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1b      	ldr	r2, [pc, #108]	@ (8001e80 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d116      	bne.n	8001e44 <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	4a19      	ldr	r2, [pc, #100]	@ (8001e84 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	2b06      	cmp	r3, #6
 8001e26:	d016      	beq.n	8001e56 <HAL_TIM_PWM_Start_DMA+0x3aa>
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	2380      	movs	r3, #128	@ 0x80
 8001e2c:	025b      	lsls	r3, r3, #9
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d011      	beq.n	8001e56 <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e42:	e008      	b.n	8001e56 <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2101      	movs	r1, #1
 8001e50:	430a      	orrs	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	e000      	b.n	8001e58 <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e56:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8001e58:	2317      	movs	r3, #23
 8001e5a:	18fb      	adds	r3, r7, r3
 8001e5c:	781b      	ldrb	r3, [r3, #0]
}
 8001e5e:	0018      	movs	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	b006      	add	sp, #24
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	46c0      	nop			@ (mov r8, r8)
 8001e68:	0800214d 	.word	0x0800214d
 8001e6c:	080021f7 	.word	0x080021f7
 8001e70:	080020b9 	.word	0x080020b9
 8001e74:	40012c00 	.word	0x40012c00
 8001e78:	40014400 	.word	0x40014400
 8001e7c:	40014800 	.word	0x40014800
 8001e80:	40000400 	.word	0x40000400
 8001e84:	00010007 	.word	0x00010007

08001e88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e94:	2317      	movs	r3, #23
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	223c      	movs	r2, #60	@ 0x3c
 8001ea0:	5c9b      	ldrb	r3, [r3, r2]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_TIM_PWM_ConfigChannel+0x22>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e0e5      	b.n	8002076 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	223c      	movs	r2, #60	@ 0x3c
 8001eae:	2101      	movs	r1, #1
 8001eb0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b14      	cmp	r3, #20
 8001eb6:	d900      	bls.n	8001eba <HAL_TIM_PWM_ConfigChannel+0x32>
 8001eb8:	e0d1      	b.n	800205e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	009a      	lsls	r2, r3, #2
 8001ebe:	4b70      	ldr	r3, [pc, #448]	@ (8002080 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001ec0:	18d3      	adds	r3, r2, r3
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	0011      	movs	r1, r2
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f000 fa40 	bl	8002354 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699a      	ldr	r2, [r3, #24]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2108      	movs	r1, #8
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699a      	ldr	r2, [r3, #24]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2104      	movs	r1, #4
 8001ef0:	438a      	bics	r2, r1
 8001ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6999      	ldr	r1, [r3, #24]
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	619a      	str	r2, [r3, #24]
      break;
 8001f06:	e0af      	b.n	8002068 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	0011      	movs	r1, r2
 8001f10:	0018      	movs	r0, r3
 8001f12:	f000 fa9f 	bl	8002454 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	699a      	ldr	r2, [r3, #24]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2180      	movs	r1, #128	@ 0x80
 8001f22:	0109      	lsls	r1, r1, #4
 8001f24:	430a      	orrs	r2, r1
 8001f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4954      	ldr	r1, [pc, #336]	@ (8002084 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001f34:	400a      	ands	r2, r1
 8001f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6999      	ldr	r1, [r3, #24]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	021a      	lsls	r2, r3, #8
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	619a      	str	r2, [r3, #24]
      break;
 8001f4c:	e08c      	b.n	8002068 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	0011      	movs	r1, r2
 8001f56:	0018      	movs	r0, r3
 8001f58:	f000 fafa 	bl	8002550 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	69da      	ldr	r2, [r3, #28]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2108      	movs	r1, #8
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	69da      	ldr	r2, [r3, #28]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2104      	movs	r1, #4
 8001f78:	438a      	bics	r2, r1
 8001f7a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	69d9      	ldr	r1, [r3, #28]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	691a      	ldr	r2, [r3, #16]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	61da      	str	r2, [r3, #28]
      break;
 8001f8e:	e06b      	b.n	8002068 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	0011      	movs	r1, r2
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f000 fb5b 	bl	8002654 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	69da      	ldr	r2, [r3, #28]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2180      	movs	r1, #128	@ 0x80
 8001faa:	0109      	lsls	r1, r1, #4
 8001fac:	430a      	orrs	r2, r1
 8001fae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	69da      	ldr	r2, [r3, #28]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4932      	ldr	r1, [pc, #200]	@ (8002084 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	69d9      	ldr	r1, [r3, #28]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	021a      	lsls	r2, r3, #8
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	61da      	str	r2, [r3, #28]
      break;
 8001fd4:	e048      	b.n	8002068 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	0011      	movs	r1, r2
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f000 fb9c 	bl	800271c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2108      	movs	r1, #8
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2104      	movs	r1, #4
 8002000:	438a      	bics	r2, r1
 8002002:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	691a      	ldr	r2, [r3, #16]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002016:	e027      	b.n	8002068 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	0011      	movs	r1, r2
 8002020:	0018      	movs	r0, r3
 8002022:	f000 fbd5 	bl	80027d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2180      	movs	r1, #128	@ 0x80
 8002032:	0109      	lsls	r1, r1, #4
 8002034:	430a      	orrs	r2, r1
 8002036:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4910      	ldr	r1, [pc, #64]	@ (8002084 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002044:	400a      	ands	r2, r1
 8002046:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	021a      	lsls	r2, r3, #8
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800205c:	e004      	b.n	8002068 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800205e:	2317      	movs	r3, #23
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	2201      	movs	r2, #1
 8002064:	701a      	strb	r2, [r3, #0]
      break;
 8002066:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	223c      	movs	r2, #60	@ 0x3c
 800206c:	2100      	movs	r1, #0
 800206e:	5499      	strb	r1, [r3, r2]

  return status;
 8002070:	2317      	movs	r3, #23
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	781b      	ldrb	r3, [r3, #0]
}
 8002076:	0018      	movs	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	b006      	add	sp, #24
 800207c:	bd80      	pop	{r7, pc}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	08002a48 	.word	0x08002a48
 8002084:	fffffbff 	.word	0xfffffbff

08002088 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002090:	46c0      	nop			@ (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	b002      	add	sp, #8
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80020a0:	46c0      	nop			@ (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b002      	add	sp, #8
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80020b0:	46c0      	nop			@ (mov r8, r8)
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b002      	add	sp, #8
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d107      	bne.n	80020e0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	223e      	movs	r2, #62	@ 0x3e
 80020da:	2101      	movs	r1, #1
 80020dc:	5499      	strb	r1, [r3, r2]
 80020de:	e02a      	b.n	8002136 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d107      	bne.n	80020fa <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2202      	movs	r2, #2
 80020ee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	223f      	movs	r2, #63	@ 0x3f
 80020f4:	2101      	movs	r1, #1
 80020f6:	5499      	strb	r1, [r3, r2]
 80020f8:	e01d      	b.n	8002136 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	429a      	cmp	r2, r3
 8002102:	d107      	bne.n	8002114 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2204      	movs	r2, #4
 8002108:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2240      	movs	r2, #64	@ 0x40
 800210e:	2101      	movs	r1, #1
 8002110:	5499      	strb	r1, [r3, r2]
 8002112:	e010      	b.n	8002136 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	429a      	cmp	r2, r3
 800211c:	d107      	bne.n	800212e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2208      	movs	r2, #8
 8002122:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2241      	movs	r2, #65	@ 0x41
 8002128:	2101      	movs	r1, #1
 800212a:	5499      	strb	r1, [r3, r2]
 800212c:	e003      	b.n	8002136 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	223d      	movs	r2, #61	@ 0x3d
 8002132:	2101      	movs	r1, #1
 8002134:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	0018      	movs	r0, r3
 800213a:	f7ff ffb5 	bl	80020a8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	771a      	strb	r2, [r3, #28]
}
 8002144:	46c0      	nop			@ (mov r8, r8)
 8002146:	46bd      	mov	sp, r7
 8002148:	b004      	add	sp, #16
 800214a:	bd80      	pop	{r7, pc}

0800214c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002158:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	429a      	cmp	r2, r3
 8002162:	d10b      	bne.n	800217c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2201      	movs	r2, #1
 8002168:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d136      	bne.n	80021e0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	223e      	movs	r2, #62	@ 0x3e
 8002176:	2101      	movs	r1, #1
 8002178:	5499      	strb	r1, [r3, r2]
 800217a:	e031      	b.n	80021e0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	429a      	cmp	r2, r3
 8002184:	d10b      	bne.n	800219e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2202      	movs	r2, #2
 800218a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d125      	bne.n	80021e0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	223f      	movs	r2, #63	@ 0x3f
 8002198:	2101      	movs	r1, #1
 800219a:	5499      	strb	r1, [r3, r2]
 800219c:	e020      	b.n	80021e0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d10b      	bne.n	80021c0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2204      	movs	r2, #4
 80021ac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d114      	bne.n	80021e0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2240      	movs	r2, #64	@ 0x40
 80021ba:	2101      	movs	r1, #1
 80021bc:	5499      	strb	r1, [r3, r2]
 80021be:	e00f      	b.n	80021e0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d10a      	bne.n	80021e0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2208      	movs	r2, #8
 80021ce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d103      	bne.n	80021e0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2241      	movs	r2, #65	@ 0x41
 80021dc:	2101      	movs	r1, #1
 80021de:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	0018      	movs	r0, r3
 80021e4:	f7ff ff50 	bl	8002088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	771a      	strb	r2, [r3, #28]
}
 80021ee:	46c0      	nop			@ (mov r8, r8)
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b004      	add	sp, #16
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b084      	sub	sp, #16
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002202:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	429a      	cmp	r2, r3
 800220c:	d103      	bne.n	8002216 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2201      	movs	r2, #1
 8002212:	771a      	strb	r2, [r3, #28]
 8002214:	e019      	b.n	800224a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	429a      	cmp	r2, r3
 800221e:	d103      	bne.n	8002228 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2202      	movs	r2, #2
 8002224:	771a      	strb	r2, [r3, #28]
 8002226:	e010      	b.n	800224a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	429a      	cmp	r2, r3
 8002230:	d103      	bne.n	800223a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2204      	movs	r2, #4
 8002236:	771a      	strb	r2, [r3, #28]
 8002238:	e007      	b.n	800224a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	429a      	cmp	r2, r3
 8002242:	d102      	bne.n	800224a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2208      	movs	r2, #8
 8002248:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	0018      	movs	r0, r3
 800224e:	f7ff ff23 	bl	8002098 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	771a      	strb	r2, [r3, #28]
}
 8002258:	46c0      	nop			@ (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	b004      	add	sp, #16
 800225e:	bd80      	pop	{r7, pc}

08002260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a32      	ldr	r2, [pc, #200]	@ (800233c <TIM_Base_SetConfig+0xdc>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d003      	beq.n	8002280 <TIM_Base_SetConfig+0x20>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a31      	ldr	r2, [pc, #196]	@ (8002340 <TIM_Base_SetConfig+0xe0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d108      	bne.n	8002292 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2270      	movs	r2, #112	@ 0x70
 8002284:	4393      	bics	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a29      	ldr	r2, [pc, #164]	@ (800233c <TIM_Base_SetConfig+0xdc>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00f      	beq.n	80022ba <TIM_Base_SetConfig+0x5a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a28      	ldr	r2, [pc, #160]	@ (8002340 <TIM_Base_SetConfig+0xe0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d00b      	beq.n	80022ba <TIM_Base_SetConfig+0x5a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a27      	ldr	r2, [pc, #156]	@ (8002344 <TIM_Base_SetConfig+0xe4>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d007      	beq.n	80022ba <TIM_Base_SetConfig+0x5a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a26      	ldr	r2, [pc, #152]	@ (8002348 <TIM_Base_SetConfig+0xe8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d003      	beq.n	80022ba <TIM_Base_SetConfig+0x5a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a25      	ldr	r2, [pc, #148]	@ (800234c <TIM_Base_SetConfig+0xec>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d108      	bne.n	80022cc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4a24      	ldr	r2, [pc, #144]	@ (8002350 <TIM_Base_SetConfig+0xf0>)
 80022be:	4013      	ands	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2280      	movs	r2, #128	@ 0x80
 80022d0:	4393      	bics	r3, r2
 80022d2:	001a      	movs	r2, r3
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	4313      	orrs	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a11      	ldr	r2, [pc, #68]	@ (800233c <TIM_Base_SetConfig+0xdc>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d007      	beq.n	800230a <TIM_Base_SetConfig+0xaa>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a12      	ldr	r2, [pc, #72]	@ (8002348 <TIM_Base_SetConfig+0xe8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d003      	beq.n	800230a <TIM_Base_SetConfig+0xaa>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a11      	ldr	r2, [pc, #68]	@ (800234c <TIM_Base_SetConfig+0xec>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d103      	bne.n	8002312 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	691a      	ldr	r2, [r3, #16]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	2201      	movs	r2, #1
 800231e:	4013      	ands	r3, r2
 8002320:	2b01      	cmp	r3, #1
 8002322:	d106      	bne.n	8002332 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	2201      	movs	r2, #1
 800232a:	4393      	bics	r3, r2
 800232c:	001a      	movs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	611a      	str	r2, [r3, #16]
  }
}
 8002332:	46c0      	nop			@ (mov r8, r8)
 8002334:	46bd      	mov	sp, r7
 8002336:	b004      	add	sp, #16
 8002338:	bd80      	pop	{r7, pc}
 800233a:	46c0      	nop			@ (mov r8, r8)
 800233c:	40012c00 	.word	0x40012c00
 8002340:	40000400 	.word	0x40000400
 8002344:	40002000 	.word	0x40002000
 8002348:	40014400 	.word	0x40014400
 800234c:	40014800 	.word	0x40014800
 8002350:	fffffcff 	.word	0xfffffcff

08002354 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	2201      	movs	r2, #1
 800236a:	4393      	bics	r3, r2
 800236c:	001a      	movs	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4a2e      	ldr	r2, [pc, #184]	@ (800243c <TIM_OC1_SetConfig+0xe8>)
 8002382:	4013      	ands	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2203      	movs	r2, #3
 800238a:	4393      	bics	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4313      	orrs	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2202      	movs	r2, #2
 800239c:	4393      	bics	r3, r2
 800239e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a24      	ldr	r2, [pc, #144]	@ (8002440 <TIM_OC1_SetConfig+0xec>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d007      	beq.n	80023c2 <TIM_OC1_SetConfig+0x6e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a23      	ldr	r2, [pc, #140]	@ (8002444 <TIM_OC1_SetConfig+0xf0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d003      	beq.n	80023c2 <TIM_OC1_SetConfig+0x6e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a22      	ldr	r2, [pc, #136]	@ (8002448 <TIM_OC1_SetConfig+0xf4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d10c      	bne.n	80023dc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2208      	movs	r2, #8
 80023c6:	4393      	bics	r3, r2
 80023c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	2204      	movs	r2, #4
 80023d8:	4393      	bics	r3, r2
 80023da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a18      	ldr	r2, [pc, #96]	@ (8002440 <TIM_OC1_SetConfig+0xec>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d007      	beq.n	80023f4 <TIM_OC1_SetConfig+0xa0>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a17      	ldr	r2, [pc, #92]	@ (8002444 <TIM_OC1_SetConfig+0xf0>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d003      	beq.n	80023f4 <TIM_OC1_SetConfig+0xa0>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a16      	ldr	r2, [pc, #88]	@ (8002448 <TIM_OC1_SetConfig+0xf4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d111      	bne.n	8002418 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4a15      	ldr	r2, [pc, #84]	@ (800244c <TIM_OC1_SetConfig+0xf8>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4a14      	ldr	r2, [pc, #80]	@ (8002450 <TIM_OC1_SetConfig+0xfc>)
 8002400:	4013      	ands	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	621a      	str	r2, [r3, #32]
}
 8002432:	46c0      	nop			@ (mov r8, r8)
 8002434:	46bd      	mov	sp, r7
 8002436:	b006      	add	sp, #24
 8002438:	bd80      	pop	{r7, pc}
 800243a:	46c0      	nop			@ (mov r8, r8)
 800243c:	fffeff8f 	.word	0xfffeff8f
 8002440:	40012c00 	.word	0x40012c00
 8002444:	40014400 	.word	0x40014400
 8002448:	40014800 	.word	0x40014800
 800244c:	fffffeff 	.word	0xfffffeff
 8002450:	fffffdff 	.word	0xfffffdff

08002454 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	2210      	movs	r2, #16
 800246a:	4393      	bics	r3, r2
 800246c:	001a      	movs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4a2c      	ldr	r2, [pc, #176]	@ (8002534 <TIM_OC2_SetConfig+0xe0>)
 8002482:	4013      	ands	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4a2b      	ldr	r2, [pc, #172]	@ (8002538 <TIM_OC2_SetConfig+0xe4>)
 800248a:	4013      	ands	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4313      	orrs	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2220      	movs	r2, #32
 800249e:	4393      	bics	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a22      	ldr	r2, [pc, #136]	@ (800253c <TIM_OC2_SetConfig+0xe8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d10d      	bne.n	80024d2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2280      	movs	r2, #128	@ 0x80
 80024ba:	4393      	bics	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2240      	movs	r2, #64	@ 0x40
 80024ce:	4393      	bics	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a19      	ldr	r2, [pc, #100]	@ (800253c <TIM_OC2_SetConfig+0xe8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d007      	beq.n	80024ea <TIM_OC2_SetConfig+0x96>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a18      	ldr	r2, [pc, #96]	@ (8002540 <TIM_OC2_SetConfig+0xec>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d003      	beq.n	80024ea <TIM_OC2_SetConfig+0x96>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a17      	ldr	r2, [pc, #92]	@ (8002544 <TIM_OC2_SetConfig+0xf0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d113      	bne.n	8002512 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4a16      	ldr	r2, [pc, #88]	@ (8002548 <TIM_OC2_SetConfig+0xf4>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4a15      	ldr	r2, [pc, #84]	@ (800254c <TIM_OC2_SetConfig+0xf8>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	621a      	str	r2, [r3, #32]
}
 800252c:	46c0      	nop			@ (mov r8, r8)
 800252e:	46bd      	mov	sp, r7
 8002530:	b006      	add	sp, #24
 8002532:	bd80      	pop	{r7, pc}
 8002534:	feff8fff 	.word	0xfeff8fff
 8002538:	fffffcff 	.word	0xfffffcff
 800253c:	40012c00 	.word	0x40012c00
 8002540:	40014400 	.word	0x40014400
 8002544:	40014800 	.word	0x40014800
 8002548:	fffffbff 	.word	0xfffffbff
 800254c:	fffff7ff 	.word	0xfffff7ff

08002550 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	4a31      	ldr	r2, [pc, #196]	@ (800262c <TIM_OC3_SetConfig+0xdc>)
 8002566:	401a      	ands	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4a2d      	ldr	r2, [pc, #180]	@ (8002630 <TIM_OC3_SetConfig+0xe0>)
 800257c:	4013      	ands	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2203      	movs	r2, #3
 8002584:	4393      	bics	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	4a27      	ldr	r2, [pc, #156]	@ (8002634 <TIM_OC3_SetConfig+0xe4>)
 8002596:	4013      	ands	r3, r2
 8002598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	021b      	lsls	r3, r3, #8
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a23      	ldr	r2, [pc, #140]	@ (8002638 <TIM_OC3_SetConfig+0xe8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d10d      	bne.n	80025ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	4a22      	ldr	r2, [pc, #136]	@ (800263c <TIM_OC3_SetConfig+0xec>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	4313      	orrs	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002640 <TIM_OC3_SetConfig+0xf0>)
 80025c6:	4013      	ands	r3, r2
 80025c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a1a      	ldr	r2, [pc, #104]	@ (8002638 <TIM_OC3_SetConfig+0xe8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d007      	beq.n	80025e2 <TIM_OC3_SetConfig+0x92>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002644 <TIM_OC3_SetConfig+0xf4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d003      	beq.n	80025e2 <TIM_OC3_SetConfig+0x92>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a1a      	ldr	r2, [pc, #104]	@ (8002648 <TIM_OC3_SetConfig+0xf8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d113      	bne.n	800260a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4a19      	ldr	r2, [pc, #100]	@ (800264c <TIM_OC3_SetConfig+0xfc>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4a18      	ldr	r2, [pc, #96]	@ (8002650 <TIM_OC3_SetConfig+0x100>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	621a      	str	r2, [r3, #32]
}
 8002624:	46c0      	nop			@ (mov r8, r8)
 8002626:	46bd      	mov	sp, r7
 8002628:	b006      	add	sp, #24
 800262a:	bd80      	pop	{r7, pc}
 800262c:	fffffeff 	.word	0xfffffeff
 8002630:	fffeff8f 	.word	0xfffeff8f
 8002634:	fffffdff 	.word	0xfffffdff
 8002638:	40012c00 	.word	0x40012c00
 800263c:	fffff7ff 	.word	0xfffff7ff
 8002640:	fffffbff 	.word	0xfffffbff
 8002644:	40014400 	.word	0x40014400
 8002648:	40014800 	.word	0x40014800
 800264c:	ffffefff 	.word	0xffffefff
 8002650:	ffffdfff 	.word	0xffffdfff

08002654 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	4a24      	ldr	r2, [pc, #144]	@ (80026fc <TIM_OC4_SetConfig+0xa8>)
 800266a:	401a      	ands	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4a20      	ldr	r2, [pc, #128]	@ (8002700 <TIM_OC4_SetConfig+0xac>)
 8002680:	4013      	ands	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4a1f      	ldr	r2, [pc, #124]	@ (8002704 <TIM_OC4_SetConfig+0xb0>)
 8002688:	4013      	ands	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	021b      	lsls	r3, r3, #8
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4313      	orrs	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4a1b      	ldr	r2, [pc, #108]	@ (8002708 <TIM_OC4_SetConfig+0xb4>)
 800269c:	4013      	ands	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	031b      	lsls	r3, r3, #12
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a17      	ldr	r2, [pc, #92]	@ (800270c <TIM_OC4_SetConfig+0xb8>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d007      	beq.n	80026c4 <TIM_OC4_SetConfig+0x70>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a16      	ldr	r2, [pc, #88]	@ (8002710 <TIM_OC4_SetConfig+0xbc>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d003      	beq.n	80026c4 <TIM_OC4_SetConfig+0x70>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a15      	ldr	r2, [pc, #84]	@ (8002714 <TIM_OC4_SetConfig+0xc0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d109      	bne.n	80026d8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	4a14      	ldr	r2, [pc, #80]	@ (8002718 <TIM_OC4_SetConfig+0xc4>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	019b      	lsls	r3, r3, #6
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	621a      	str	r2, [r3, #32]
}
 80026f2:	46c0      	nop			@ (mov r8, r8)
 80026f4:	46bd      	mov	sp, r7
 80026f6:	b006      	add	sp, #24
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	46c0      	nop			@ (mov r8, r8)
 80026fc:	ffffefff 	.word	0xffffefff
 8002700:	feff8fff 	.word	0xfeff8fff
 8002704:	fffffcff 	.word	0xfffffcff
 8002708:	ffffdfff 	.word	0xffffdfff
 800270c:	40012c00 	.word	0x40012c00
 8002710:	40014400 	.word	0x40014400
 8002714:	40014800 	.word	0x40014800
 8002718:	ffffbfff 	.word	0xffffbfff

0800271c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	4a21      	ldr	r2, [pc, #132]	@ (80027b8 <TIM_OC5_SetConfig+0x9c>)
 8002732:	401a      	ands	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4a1d      	ldr	r2, [pc, #116]	@ (80027bc <TIM_OC5_SetConfig+0xa0>)
 8002748:	4013      	ands	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4313      	orrs	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4a19      	ldr	r2, [pc, #100]	@ (80027c0 <TIM_OC5_SetConfig+0xa4>)
 800275a:	4013      	ands	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	041b      	lsls	r3, r3, #16
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a15      	ldr	r2, [pc, #84]	@ (80027c4 <TIM_OC5_SetConfig+0xa8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d007      	beq.n	8002782 <TIM_OC5_SetConfig+0x66>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a14      	ldr	r2, [pc, #80]	@ (80027c8 <TIM_OC5_SetConfig+0xac>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d003      	beq.n	8002782 <TIM_OC5_SetConfig+0x66>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a13      	ldr	r2, [pc, #76]	@ (80027cc <TIM_OC5_SetConfig+0xb0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d109      	bne.n	8002796 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	4a0c      	ldr	r2, [pc, #48]	@ (80027b8 <TIM_OC5_SetConfig+0x9c>)
 8002786:	4013      	ands	r3, r2
 8002788:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	021b      	lsls	r3, r3, #8
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	4313      	orrs	r3, r2
 8002794:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	621a      	str	r2, [r3, #32]
}
 80027b0:	46c0      	nop			@ (mov r8, r8)
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b006      	add	sp, #24
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	fffeffff 	.word	0xfffeffff
 80027bc:	fffeff8f 	.word	0xfffeff8f
 80027c0:	fffdffff 	.word	0xfffdffff
 80027c4:	40012c00 	.word	0x40012c00
 80027c8:	40014400 	.word	0x40014400
 80027cc:	40014800 	.word	0x40014800

080027d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	4a22      	ldr	r2, [pc, #136]	@ (8002870 <TIM_OC6_SetConfig+0xa0>)
 80027e6:	401a      	ands	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002874 <TIM_OC6_SetConfig+0xa4>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4a1a      	ldr	r2, [pc, #104]	@ (8002878 <TIM_OC6_SetConfig+0xa8>)
 8002810:	4013      	ands	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	051b      	lsls	r3, r3, #20
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a16      	ldr	r2, [pc, #88]	@ (800287c <TIM_OC6_SetConfig+0xac>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d007      	beq.n	8002838 <TIM_OC6_SetConfig+0x68>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a15      	ldr	r2, [pc, #84]	@ (8002880 <TIM_OC6_SetConfig+0xb0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d003      	beq.n	8002838 <TIM_OC6_SetConfig+0x68>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a14      	ldr	r2, [pc, #80]	@ (8002884 <TIM_OC6_SetConfig+0xb4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d109      	bne.n	800284c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	4a13      	ldr	r2, [pc, #76]	@ (8002888 <TIM_OC6_SetConfig+0xb8>)
 800283c:	4013      	ands	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	029b      	lsls	r3, r3, #10
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	621a      	str	r2, [r3, #32]
}
 8002866:	46c0      	nop			@ (mov r8, r8)
 8002868:	46bd      	mov	sp, r7
 800286a:	b006      	add	sp, #24
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			@ (mov r8, r8)
 8002870:	ffefffff 	.word	0xffefffff
 8002874:	feff8fff 	.word	0xfeff8fff
 8002878:	ffdfffff 	.word	0xffdfffff
 800287c:	40012c00 	.word	0x40012c00
 8002880:	40014400 	.word	0x40014400
 8002884:	40014800 	.word	0x40014800
 8002888:	fffbffff 	.word	0xfffbffff

0800288c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	221f      	movs	r2, #31
 800289c:	4013      	ands	r3, r2
 800289e:	2201      	movs	r2, #1
 80028a0:	409a      	lsls	r2, r3
 80028a2:	0013      	movs	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	43d2      	mvns	r2, r2
 80028ae:	401a      	ands	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a1a      	ldr	r2, [r3, #32]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	211f      	movs	r1, #31
 80028bc:	400b      	ands	r3, r1
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4099      	lsls	r1, r3
 80028c2:	000b      	movs	r3, r1
 80028c4:	431a      	orrs	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	621a      	str	r2, [r3, #32]
}
 80028ca:	46c0      	nop			@ (mov r8, r8)
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b006      	add	sp, #24
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	223c      	movs	r2, #60	@ 0x3c
 80028e2:	5c9b      	ldrb	r3, [r3, r2]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e04a      	b.n	8002982 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	223c      	movs	r2, #60	@ 0x3c
 80028f0:	2101      	movs	r1, #1
 80028f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	223d      	movs	r2, #61	@ 0x3d
 80028f8:	2102      	movs	r1, #2
 80028fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a1e      	ldr	r2, [pc, #120]	@ (800298c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d108      	bne.n	8002928 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4a1d      	ldr	r2, [pc, #116]	@ (8002990 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800291a:	4013      	ands	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2270      	movs	r2, #112	@ 0x70
 800292c:	4393      	bics	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a11      	ldr	r2, [pc, #68]	@ (800298c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d004      	beq.n	8002956 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a10      	ldr	r2, [pc, #64]	@ (8002994 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d10c      	bne.n	8002970 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2280      	movs	r2, #128	@ 0x80
 800295a:	4393      	bics	r3, r2
 800295c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	4313      	orrs	r3, r2
 8002966:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	223d      	movs	r2, #61	@ 0x3d
 8002974:	2101      	movs	r1, #1
 8002976:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	223c      	movs	r2, #60	@ 0x3c
 800297c:	2100      	movs	r1, #0
 800297e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	0018      	movs	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	b004      	add	sp, #16
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			@ (mov r8, r8)
 800298c:	40012c00 	.word	0x40012c00
 8002990:	ff0fffff 	.word	0xff0fffff
 8002994:	40000400 	.word	0x40000400

08002998 <memset>:
 8002998:	0003      	movs	r3, r0
 800299a:	1882      	adds	r2, r0, r2
 800299c:	4293      	cmp	r3, r2
 800299e:	d100      	bne.n	80029a2 <memset+0xa>
 80029a0:	4770      	bx	lr
 80029a2:	7019      	strb	r1, [r3, #0]
 80029a4:	3301      	adds	r3, #1
 80029a6:	e7f9      	b.n	800299c <memset+0x4>

080029a8 <__libc_init_array>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	2600      	movs	r6, #0
 80029ac:	4c0c      	ldr	r4, [pc, #48]	@ (80029e0 <__libc_init_array+0x38>)
 80029ae:	4d0d      	ldr	r5, [pc, #52]	@ (80029e4 <__libc_init_array+0x3c>)
 80029b0:	1b64      	subs	r4, r4, r5
 80029b2:	10a4      	asrs	r4, r4, #2
 80029b4:	42a6      	cmp	r6, r4
 80029b6:	d109      	bne.n	80029cc <__libc_init_array+0x24>
 80029b8:	2600      	movs	r6, #0
 80029ba:	f000 f819 	bl	80029f0 <_init>
 80029be:	4c0a      	ldr	r4, [pc, #40]	@ (80029e8 <__libc_init_array+0x40>)
 80029c0:	4d0a      	ldr	r5, [pc, #40]	@ (80029ec <__libc_init_array+0x44>)
 80029c2:	1b64      	subs	r4, r4, r5
 80029c4:	10a4      	asrs	r4, r4, #2
 80029c6:	42a6      	cmp	r6, r4
 80029c8:	d105      	bne.n	80029d6 <__libc_init_array+0x2e>
 80029ca:	bd70      	pop	{r4, r5, r6, pc}
 80029cc:	00b3      	lsls	r3, r6, #2
 80029ce:	58eb      	ldr	r3, [r5, r3]
 80029d0:	4798      	blx	r3
 80029d2:	3601      	adds	r6, #1
 80029d4:	e7ee      	b.n	80029b4 <__libc_init_array+0xc>
 80029d6:	00b3      	lsls	r3, r6, #2
 80029d8:	58eb      	ldr	r3, [r5, r3]
 80029da:	4798      	blx	r3
 80029dc:	3601      	adds	r6, #1
 80029de:	e7f2      	b.n	80029c6 <__libc_init_array+0x1e>
 80029e0:	08002a9c 	.word	0x08002a9c
 80029e4:	08002a9c 	.word	0x08002a9c
 80029e8:	08002aa0 	.word	0x08002aa0
 80029ec:	08002a9c 	.word	0x08002a9c

080029f0 <_init>:
 80029f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f2:	46c0      	nop			@ (mov r8, r8)
 80029f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029f6:	bc08      	pop	{r3}
 80029f8:	469e      	mov	lr, r3
 80029fa:	4770      	bx	lr

080029fc <_fini>:
 80029fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fe:	46c0      	nop			@ (mov r8, r8)
 8002a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a02:	bc08      	pop	{r3}
 8002a04:	469e      	mov	lr, r3
 8002a06:	4770      	bx	lr
