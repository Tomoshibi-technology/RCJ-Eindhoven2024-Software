
camera_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bf8  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003dc0  08003dc0  00004dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003de0  08003de0  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  08003de0  08003de0  00004de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003de8  08003de8  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003de8  08003de8  00004de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003dec  08003dec  00004dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003df0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000010  08003e00  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08003e00  000051bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d71  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018cb  00000000  00000000  0000ddb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0000f680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005a9  00000000  00000000  0000fdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020327  00000000  00000000  00010379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a79  00000000  00000000  000306a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4b49  00000000  00000000  0003a119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fec62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e40  00000000  00000000  000feca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00100ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003da8 	.word	0x08003da8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08003da8 	.word	0x08003da8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_d2f>:
 80009e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009ec:	bf24      	itt	cs
 80009ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009f6:	d90d      	bls.n	8000a14 <__aeabi_d2f+0x30>
 80009f8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a04:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a0c:	bf08      	it	eq
 8000a0e:	f020 0001 	biceq.w	r0, r0, #1
 8000a12:	4770      	bx	lr
 8000a14:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a18:	d121      	bne.n	8000a5e <__aeabi_d2f+0x7a>
 8000a1a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a1e:	bfbc      	itt	lt
 8000a20:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a24:	4770      	bxlt	lr
 8000a26:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a2e:	f1c2 0218 	rsb	r2, r2, #24
 8000a32:	f1c2 0c20 	rsb	ip, r2, #32
 8000a36:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a3a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a3e:	bf18      	it	ne
 8000a40:	f040 0001 	orrne.w	r0, r0, #1
 8000a44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a50:	ea40 000c 	orr.w	r0, r0, ip
 8000a54:	fa23 f302 	lsr.w	r3, r3, r2
 8000a58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a5c:	e7cc      	b.n	80009f8 <__aeabi_d2f+0x14>
 8000a5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a62:	d107      	bne.n	8000a74 <__aeabi_d2f+0x90>
 8000a64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a68:	bf1e      	ittt	ne
 8000a6a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a6e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a72:	4770      	bxne	lr
 8000a74:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_uldivmod>:
 8000a84:	b953      	cbnz	r3, 8000a9c <__aeabi_uldivmod+0x18>
 8000a86:	b94a      	cbnz	r2, 8000a9c <__aeabi_uldivmod+0x18>
 8000a88:	2900      	cmp	r1, #0
 8000a8a:	bf08      	it	eq
 8000a8c:	2800      	cmpeq	r0, #0
 8000a8e:	bf1c      	itt	ne
 8000a90:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a94:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a98:	f000 b96a 	b.w	8000d70 <__aeabi_idiv0>
 8000a9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa4:	f000 f806 	bl	8000ab4 <__udivmoddi4>
 8000aa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab0:	b004      	add	sp, #16
 8000ab2:	4770      	bx	lr

08000ab4 <__udivmoddi4>:
 8000ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab8:	9d08      	ldr	r5, [sp, #32]
 8000aba:	460c      	mov	r4, r1
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d14e      	bne.n	8000b5e <__udivmoddi4+0xaa>
 8000ac0:	4694      	mov	ip, r2
 8000ac2:	458c      	cmp	ip, r1
 8000ac4:	4686      	mov	lr, r0
 8000ac6:	fab2 f282 	clz	r2, r2
 8000aca:	d962      	bls.n	8000b92 <__udivmoddi4+0xde>
 8000acc:	b14a      	cbz	r2, 8000ae2 <__udivmoddi4+0x2e>
 8000ace:	f1c2 0320 	rsb	r3, r2, #32
 8000ad2:	4091      	lsls	r1, r2
 8000ad4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000adc:	4319      	orrs	r1, r3
 8000ade:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ae2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae6:	fa1f f68c 	uxth.w	r6, ip
 8000aea:	fbb1 f4f7 	udiv	r4, r1, r7
 8000aee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000af2:	fb07 1114 	mls	r1, r7, r4, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb04 f106 	mul.w	r1, r4, r6
 8000afe:	4299      	cmp	r1, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x64>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b0a:	f080 8112 	bcs.w	8000d32 <__udivmoddi4+0x27e>
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	f240 810f 	bls.w	8000d32 <__udivmoddi4+0x27e>
 8000b14:	3c02      	subs	r4, #2
 8000b16:	4463      	add	r3, ip
 8000b18:	1a59      	subs	r1, r3, r1
 8000b1a:	fa1f f38e 	uxth.w	r3, lr
 8000b1e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b22:	fb07 1110 	mls	r1, r7, r0, r1
 8000b26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b2a:	fb00 f606 	mul.w	r6, r0, r6
 8000b2e:	429e      	cmp	r6, r3
 8000b30:	d90a      	bls.n	8000b48 <__udivmoddi4+0x94>
 8000b32:	eb1c 0303 	adds.w	r3, ip, r3
 8000b36:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b3a:	f080 80fc 	bcs.w	8000d36 <__udivmoddi4+0x282>
 8000b3e:	429e      	cmp	r6, r3
 8000b40:	f240 80f9 	bls.w	8000d36 <__udivmoddi4+0x282>
 8000b44:	4463      	add	r3, ip
 8000b46:	3802      	subs	r0, #2
 8000b48:	1b9b      	subs	r3, r3, r6
 8000b4a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b4e:	2100      	movs	r1, #0
 8000b50:	b11d      	cbz	r5, 8000b5a <__udivmoddi4+0xa6>
 8000b52:	40d3      	lsrs	r3, r2
 8000b54:	2200      	movs	r2, #0
 8000b56:	e9c5 3200 	strd	r3, r2, [r5]
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d905      	bls.n	8000b6e <__udivmoddi4+0xba>
 8000b62:	b10d      	cbz	r5, 8000b68 <__udivmoddi4+0xb4>
 8000b64:	e9c5 0100 	strd	r0, r1, [r5]
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4608      	mov	r0, r1
 8000b6c:	e7f5      	b.n	8000b5a <__udivmoddi4+0xa6>
 8000b6e:	fab3 f183 	clz	r1, r3
 8000b72:	2900      	cmp	r1, #0
 8000b74:	d146      	bne.n	8000c04 <__udivmoddi4+0x150>
 8000b76:	42a3      	cmp	r3, r4
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xcc>
 8000b7a:	4290      	cmp	r0, r2
 8000b7c:	f0c0 80f0 	bcc.w	8000d60 <__udivmoddi4+0x2ac>
 8000b80:	1a86      	subs	r6, r0, r2
 8000b82:	eb64 0303 	sbc.w	r3, r4, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	2d00      	cmp	r5, #0
 8000b8a:	d0e6      	beq.n	8000b5a <__udivmoddi4+0xa6>
 8000b8c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b90:	e7e3      	b.n	8000b5a <__udivmoddi4+0xa6>
 8000b92:	2a00      	cmp	r2, #0
 8000b94:	f040 8090 	bne.w	8000cb8 <__udivmoddi4+0x204>
 8000b98:	eba1 040c 	sub.w	r4, r1, ip
 8000b9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba0:	fa1f f78c 	uxth.w	r7, ip
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000baa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bae:	fb08 4416 	mls	r4, r8, r6, r4
 8000bb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb6:	fb07 f006 	mul.w	r0, r7, r6
 8000bba:	4298      	cmp	r0, r3
 8000bbc:	d908      	bls.n	8000bd0 <__udivmoddi4+0x11c>
 8000bbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x11a>
 8000bc8:	4298      	cmp	r0, r3
 8000bca:	f200 80cd 	bhi.w	8000d68 <__udivmoddi4+0x2b4>
 8000bce:	4626      	mov	r6, r4
 8000bd0:	1a1c      	subs	r4, r3, r0
 8000bd2:	fa1f f38e 	uxth.w	r3, lr
 8000bd6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bda:	fb08 4410 	mls	r4, r8, r0, r4
 8000bde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000be2:	fb00 f707 	mul.w	r7, r0, r7
 8000be6:	429f      	cmp	r7, r3
 8000be8:	d908      	bls.n	8000bfc <__udivmoddi4+0x148>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bf2:	d202      	bcs.n	8000bfa <__udivmoddi4+0x146>
 8000bf4:	429f      	cmp	r7, r3
 8000bf6:	f200 80b0 	bhi.w	8000d5a <__udivmoddi4+0x2a6>
 8000bfa:	4620      	mov	r0, r4
 8000bfc:	1bdb      	subs	r3, r3, r7
 8000bfe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c02:	e7a5      	b.n	8000b50 <__udivmoddi4+0x9c>
 8000c04:	f1c1 0620 	rsb	r6, r1, #32
 8000c08:	408b      	lsls	r3, r1
 8000c0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c0e:	431f      	orrs	r7, r3
 8000c10:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c14:	fa04 f301 	lsl.w	r3, r4, r1
 8000c18:	ea43 030c 	orr.w	r3, r3, ip
 8000c1c:	40f4      	lsrs	r4, r6
 8000c1e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c22:	0c38      	lsrs	r0, r7, #16
 8000c24:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c28:	fbb4 fef0 	udiv	lr, r4, r0
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	fb00 441e 	mls	r4, r0, lr, r4
 8000c34:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c38:	fb0e f90c 	mul.w	r9, lr, ip
 8000c3c:	45a1      	cmp	r9, r4
 8000c3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x1a6>
 8000c44:	193c      	adds	r4, r7, r4
 8000c46:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c4a:	f080 8084 	bcs.w	8000d56 <__udivmoddi4+0x2a2>
 8000c4e:	45a1      	cmp	r9, r4
 8000c50:	f240 8081 	bls.w	8000d56 <__udivmoddi4+0x2a2>
 8000c54:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c58:	443c      	add	r4, r7
 8000c5a:	eba4 0409 	sub.w	r4, r4, r9
 8000c5e:	fa1f f983 	uxth.w	r9, r3
 8000c62:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c66:	fb00 4413 	mls	r4, r0, r3, r4
 8000c6a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c6e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d907      	bls.n	8000c86 <__udivmoddi4+0x1d2>
 8000c76:	193c      	adds	r4, r7, r4
 8000c78:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c7c:	d267      	bcs.n	8000d4e <__udivmoddi4+0x29a>
 8000c7e:	45a4      	cmp	ip, r4
 8000c80:	d965      	bls.n	8000d4e <__udivmoddi4+0x29a>
 8000c82:	3b02      	subs	r3, #2
 8000c84:	443c      	add	r4, r7
 8000c86:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c8a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c8e:	eba4 040c 	sub.w	r4, r4, ip
 8000c92:	429c      	cmp	r4, r3
 8000c94:	46ce      	mov	lr, r9
 8000c96:	469c      	mov	ip, r3
 8000c98:	d351      	bcc.n	8000d3e <__udivmoddi4+0x28a>
 8000c9a:	d04e      	beq.n	8000d3a <__udivmoddi4+0x286>
 8000c9c:	b155      	cbz	r5, 8000cb4 <__udivmoddi4+0x200>
 8000c9e:	ebb8 030e 	subs.w	r3, r8, lr
 8000ca2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ca6:	fa04 f606 	lsl.w	r6, r4, r6
 8000caa:	40cb      	lsrs	r3, r1
 8000cac:	431e      	orrs	r6, r3
 8000cae:	40cc      	lsrs	r4, r1
 8000cb0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	e750      	b.n	8000b5a <__udivmoddi4+0xa6>
 8000cb8:	f1c2 0320 	rsb	r3, r2, #32
 8000cbc:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cc8:	4094      	lsls	r4, r2
 8000cca:	430c      	orrs	r4, r1
 8000ccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cdc:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce0:	0c23      	lsrs	r3, r4, #16
 8000ce2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce6:	fb00 f107 	mul.w	r1, r0, r7
 8000cea:	4299      	cmp	r1, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x24c>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cf6:	d22c      	bcs.n	8000d52 <__udivmoddi4+0x29e>
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d92a      	bls.n	8000d52 <__udivmoddi4+0x29e>
 8000cfc:	3802      	subs	r0, #2
 8000cfe:	4463      	add	r3, ip
 8000d00:	1a5b      	subs	r3, r3, r1
 8000d02:	b2a4      	uxth	r4, r4
 8000d04:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d08:	fb08 3311 	mls	r3, r8, r1, r3
 8000d0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d10:	fb01 f307 	mul.w	r3, r1, r7
 8000d14:	42a3      	cmp	r3, r4
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x276>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d20:	d213      	bcs.n	8000d4a <__udivmoddi4+0x296>
 8000d22:	42a3      	cmp	r3, r4
 8000d24:	d911      	bls.n	8000d4a <__udivmoddi4+0x296>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4464      	add	r4, ip
 8000d2a:	1ae4      	subs	r4, r4, r3
 8000d2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d30:	e739      	b.n	8000ba6 <__udivmoddi4+0xf2>
 8000d32:	4604      	mov	r4, r0
 8000d34:	e6f0      	b.n	8000b18 <__udivmoddi4+0x64>
 8000d36:	4608      	mov	r0, r1
 8000d38:	e706      	b.n	8000b48 <__udivmoddi4+0x94>
 8000d3a:	45c8      	cmp	r8, r9
 8000d3c:	d2ae      	bcs.n	8000c9c <__udivmoddi4+0x1e8>
 8000d3e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d42:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d46:	3801      	subs	r0, #1
 8000d48:	e7a8      	b.n	8000c9c <__udivmoddi4+0x1e8>
 8000d4a:	4631      	mov	r1, r6
 8000d4c:	e7ed      	b.n	8000d2a <__udivmoddi4+0x276>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	e799      	b.n	8000c86 <__udivmoddi4+0x1d2>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e7d4      	b.n	8000d00 <__udivmoddi4+0x24c>
 8000d56:	46d6      	mov	lr, sl
 8000d58:	e77f      	b.n	8000c5a <__udivmoddi4+0x1a6>
 8000d5a:	4463      	add	r3, ip
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	e74d      	b.n	8000bfc <__udivmoddi4+0x148>
 8000d60:	4606      	mov	r6, r0
 8000d62:	4623      	mov	r3, r4
 8000d64:	4608      	mov	r0, r1
 8000d66:	e70f      	b.n	8000b88 <__udivmoddi4+0xd4>
 8000d68:	3e02      	subs	r6, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	e730      	b.n	8000bd0 <__udivmoddi4+0x11c>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <set_array>:
int readINDEX(UART_HandleTypeDef* uart, uint8_t* buf, int buf_size);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_array(int tx, int cx, int cz, uint8_t r, uint8_t h, uint8_t h2, uint8_t v){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
 8000d80:	70fb      	strb	r3, [r7, #3]
	send_array[0]=220;
 8000d82:	4b75      	ldr	r3, [pc, #468]	@ (8000f58 <set_array+0x1e4>)
 8000d84:	22dc      	movs	r2, #220	@ 0xdc
 8000d86:	701a      	strb	r2, [r3, #0]

	if(cx - tx > 48+r){
 8000d88:	68ba      	ldr	r2, [r7, #8]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	1ad2      	subs	r2, r2, r3
 8000d8e:	78fb      	ldrb	r3, [r7, #3]
 8000d90:	3330      	adds	r3, #48	@ 0x30
 8000d92:	429a      	cmp	r2, r3
 8000d94:	dd08      	ble.n	8000da8 <set_array+0x34>
		cx = cx -((48*2) - (r*2)+1);
 8000d96:	78fb      	ldrb	r3, [r7, #3]
 8000d98:	f1c3 0330 	rsb	r3, r3, #48	@ 0x30
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	3301      	adds	r3, #1
 8000da0:	68ba      	ldr	r2, [r7, #8]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	e00d      	b.n	8000dc4 <set_array+0x50>
	}else if(cx - tx < -(48-r)){
 8000da8:	68ba      	ldr	r2, [r7, #8]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	1ad2      	subs	r2, r2, r3
 8000dae:	78fb      	ldrb	r3, [r7, #3]
 8000db0:	3b30      	subs	r3, #48	@ 0x30
 8000db2:	429a      	cmp	r2, r3
 8000db4:	da06      	bge.n	8000dc4 <set_array+0x50>
		cx = cx + ((48*2) + (r*2)-1);
 8000db6:	78fb      	ldrb	r3, [r7, #3]
 8000db8:	3330      	adds	r3, #48	@ 0x30
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
	}

//	c_x = cx;

	tx += 5000; cx += 5000; cz += 5000;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8000dca:	3308      	adds	r3, #8
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8000dd4:	3308      	adds	r3, #8
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8000dde:	3308      	adds	r3, #8
 8000de0:	607b      	str	r3, [r7, #4]
	uint8_t h_out = h/2.5;
 8000de2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fb60 	bl	80004ac <__aeabi_i2d>
 8000dec:	f04f 0200 	mov.w	r2, #0
 8000df0:	4b5a      	ldr	r3, [pc, #360]	@ (8000f5c <set_array+0x1e8>)
 8000df2:	f7ff fcef 	bl	80007d4 <__aeabi_ddiv>
 8000df6:	4602      	mov	r2, r0
 8000df8:	460b      	mov	r3, r1
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f7ff fdd1 	bl	80009a4 <__aeabi_d2uiz>
 8000e02:	4603      	mov	r3, r0
 8000e04:	77fb      	strb	r3, [r7, #31]
	uint8_t h_out2 = h2/2.5;
 8000e06:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fb4e 	bl	80004ac <__aeabi_i2d>
 8000e10:	f04f 0200 	mov.w	r2, #0
 8000e14:	4b51      	ldr	r3, [pc, #324]	@ (8000f5c <set_array+0x1e8>)
 8000e16:	f7ff fcdd 	bl	80007d4 <__aeabi_ddiv>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	4610      	mov	r0, r2
 8000e20:	4619      	mov	r1, r3
 8000e22:	f7ff fdbf 	bl	80009a4 <__aeabi_d2uiz>
 8000e26:	4603      	mov	r3, r0
 8000e28:	77bb      	strb	r3, [r7, #30]
	uint8_t v_out = v/2.5;
 8000e2a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fb3c 	bl	80004ac <__aeabi_i2d>
 8000e34:	f04f 0200 	mov.w	r2, #0
 8000e38:	4b48      	ldr	r3, [pc, #288]	@ (8000f5c <set_array+0x1e8>)
 8000e3a:	f7ff fccb 	bl	80007d4 <__aeabi_ddiv>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	4610      	mov	r0, r2
 8000e44:	4619      	mov	r1, r3
 8000e46:	f7ff fdad 	bl	80009a4 <__aeabi_d2uiz>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	777b      	strb	r3, [r7, #29]
	for(int i = 1; i <3 ;i++){
 8000e4e:	2301      	movs	r3, #1
 8000e50:	61bb      	str	r3, [r7, #24]
 8000e52:	e01b      	b.n	8000e8c <set_array+0x118>
		send_array[i] = tx%100;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4a42      	ldr	r2, [pc, #264]	@ (8000f60 <set_array+0x1ec>)
 8000e58:	fb82 1203 	smull	r1, r2, r2, r3
 8000e5c:	1151      	asrs	r1, r2, #5
 8000e5e:	17da      	asrs	r2, r3, #31
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	2164      	movs	r1, #100	@ 0x64
 8000e64:	fb01 f202 	mul.w	r2, r1, r2
 8000e68:	1a9a      	subs	r2, r3, r2
 8000e6a:	b2d1      	uxtb	r1, r2
 8000e6c:	4a3a      	ldr	r2, [pc, #232]	@ (8000f58 <set_array+0x1e4>)
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	4413      	add	r3, r2
 8000e72:	460a      	mov	r2, r1
 8000e74:	701a      	strb	r2, [r3, #0]
		tx = (int)tx/100;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4a39      	ldr	r2, [pc, #228]	@ (8000f60 <set_array+0x1ec>)
 8000e7a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e7e:	1152      	asrs	r2, r2, #5
 8000e80:	17db      	asrs	r3, r3, #31
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	60fb      	str	r3, [r7, #12]
	for(int i = 1; i <3 ;i++){
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	61bb      	str	r3, [r7, #24]
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	dde0      	ble.n	8000e54 <set_array+0xe0>
	}
	for(int i = 3; i <5 ;i++){
 8000e92:	2303      	movs	r3, #3
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e01b      	b.n	8000ed0 <set_array+0x15c>
		send_array[i] = cx%100;
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	4a31      	ldr	r2, [pc, #196]	@ (8000f60 <set_array+0x1ec>)
 8000e9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea0:	1151      	asrs	r1, r2, #5
 8000ea2:	17da      	asrs	r2, r3, #31
 8000ea4:	1a8a      	subs	r2, r1, r2
 8000ea6:	2164      	movs	r1, #100	@ 0x64
 8000ea8:	fb01 f202 	mul.w	r2, r1, r2
 8000eac:	1a9a      	subs	r2, r3, r2
 8000eae:	b2d1      	uxtb	r1, r2
 8000eb0:	4a29      	ldr	r2, [pc, #164]	@ (8000f58 <set_array+0x1e4>)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	460a      	mov	r2, r1
 8000eb8:	701a      	strb	r2, [r3, #0]
		cx = (int)cx/100;
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	4a28      	ldr	r2, [pc, #160]	@ (8000f60 <set_array+0x1ec>)
 8000ebe:	fb82 1203 	smull	r1, r2, r2, r3
 8000ec2:	1152      	asrs	r2, r2, #5
 8000ec4:	17db      	asrs	r3, r3, #31
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	60bb      	str	r3, [r7, #8]
	for(int i = 3; i <5 ;i++){
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	dde0      	ble.n	8000e98 <set_array+0x124>
	}
	for(int i = 5; i <7 ;i++){
 8000ed6:	2305      	movs	r3, #5
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	e01b      	b.n	8000f14 <set_array+0x1a0>
		send_array[i] = cz%100;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a20      	ldr	r2, [pc, #128]	@ (8000f60 <set_array+0x1ec>)
 8000ee0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ee4:	1151      	asrs	r1, r2, #5
 8000ee6:	17da      	asrs	r2, r3, #31
 8000ee8:	1a8a      	subs	r2, r1, r2
 8000eea:	2164      	movs	r1, #100	@ 0x64
 8000eec:	fb01 f202 	mul.w	r2, r1, r2
 8000ef0:	1a9a      	subs	r2, r3, r2
 8000ef2:	b2d1      	uxtb	r1, r2
 8000ef4:	4a18      	ldr	r2, [pc, #96]	@ (8000f58 <set_array+0x1e4>)
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4413      	add	r3, r2
 8000efa:	460a      	mov	r2, r1
 8000efc:	701a      	strb	r2, [r3, #0]
		cz = (int)cz/100;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a17      	ldr	r2, [pc, #92]	@ (8000f60 <set_array+0x1ec>)
 8000f02:	fb82 1203 	smull	r1, r2, r2, r3
 8000f06:	1152      	asrs	r2, r2, #5
 8000f08:	17db      	asrs	r3, r3, #31
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	607b      	str	r3, [r7, #4]
	for(int i = 5; i <7 ;i++){
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	3301      	adds	r3, #1
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	dde0      	ble.n	8000edc <set_array+0x168>
	}
	send_array[7] = r;
 8000f1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f58 <set_array+0x1e4>)
 8000f1c:	78fb      	ldrb	r3, [r7, #3]
 8000f1e:	71d3      	strb	r3, [r2, #7]
	if(h_out > 100){h_out = 100;}
 8000f20:	7ffb      	ldrb	r3, [r7, #31]
 8000f22:	2b64      	cmp	r3, #100	@ 0x64
 8000f24:	d901      	bls.n	8000f2a <set_array+0x1b6>
 8000f26:	2364      	movs	r3, #100	@ 0x64
 8000f28:	77fb      	strb	r3, [r7, #31]
	send_array[8] = h_out;
 8000f2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f58 <set_array+0x1e4>)
 8000f2c:	7ffb      	ldrb	r3, [r7, #31]
 8000f2e:	7213      	strb	r3, [r2, #8]
	if(h_out2 > 100){h_out2 = 100;}
 8000f30:	7fbb      	ldrb	r3, [r7, #30]
 8000f32:	2b64      	cmp	r3, #100	@ 0x64
 8000f34:	d901      	bls.n	8000f3a <set_array+0x1c6>
 8000f36:	2364      	movs	r3, #100	@ 0x64
 8000f38:	77bb      	strb	r3, [r7, #30]
	send_array[9] = h_out2;
 8000f3a:	4a07      	ldr	r2, [pc, #28]	@ (8000f58 <set_array+0x1e4>)
 8000f3c:	7fbb      	ldrb	r3, [r7, #30]
 8000f3e:	7253      	strb	r3, [r2, #9]
	if(v_out > 100){v_out = 100;}
 8000f40:	7f7b      	ldrb	r3, [r7, #29]
 8000f42:	2b64      	cmp	r3, #100	@ 0x64
 8000f44:	d901      	bls.n	8000f4a <set_array+0x1d6>
 8000f46:	2364      	movs	r3, #100	@ 0x64
 8000f48:	777b      	strb	r3, [r7, #29]
	send_array[10] = v_out;
 8000f4a:	4a03      	ldr	r2, [pc, #12]	@ (8000f58 <set_array+0x1e4>)
 8000f4c:	7f7b      	ldrb	r3, [r7, #29]
 8000f4e:	7293      	strb	r3, [r2, #10]
}
 8000f50:	bf00      	nop
 8000f52:	3720      	adds	r7, #32
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200001a8 	.word	0x200001a8
 8000f5c:	40040000 	.word	0x40040000
 8000f60:	51eb851f 	.word	0x51eb851f

08000f64 <rgbToHue>:

uint8_t rgbToHue(int r, int g, int b) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08c      	sub	sp, #48	@ 0x30
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
    // RGB値を0-15から0-1に正規化
    float rf = r / 15.0;
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f7ff fa9b 	bl	80004ac <__aeabi_i2d>
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	4b76      	ldr	r3, [pc, #472]	@ (8001154 <rgbToHue+0x1f0>)
 8000f7c:	f7ff fc2a 	bl	80007d4 <__aeabi_ddiv>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	f7ff fd2c 	bl	80009e4 <__aeabi_d2f>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	623b      	str	r3, [r7, #32]
    float gf = g / 15.0;
 8000f90:	68b8      	ldr	r0, [r7, #8]
 8000f92:	f7ff fa8b 	bl	80004ac <__aeabi_i2d>
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	4b6e      	ldr	r3, [pc, #440]	@ (8001154 <rgbToHue+0x1f0>)
 8000f9c:	f7ff fc1a 	bl	80007d4 <__aeabi_ddiv>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f7ff fd1c 	bl	80009e4 <__aeabi_d2f>
 8000fac:	4603      	mov	r3, r0
 8000fae:	61fb      	str	r3, [r7, #28]
    float bf = b / 15.0;
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff fa7b 	bl	80004ac <__aeabi_i2d>
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	4b66      	ldr	r3, [pc, #408]	@ (8001154 <rgbToHue+0x1f0>)
 8000fbc:	f7ff fc0a 	bl	80007d4 <__aeabi_ddiv>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f7ff fd0c 	bl	80009e4 <__aeabi_d2f>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	61bb      	str	r3, [r7, #24]

    // 最大値、最小値、および範囲を求める
    float max_val = rf;
 8000fd0:	6a3b      	ldr	r3, [r7, #32]
 8000fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (gf > max_val) max_val = gf;
 8000fd4:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fd8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000fdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe4:	dd01      	ble.n	8000fea <rgbToHue+0x86>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (bf > max_val) max_val = bf;
 8000fea:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fee:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000ff2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffa:	dd01      	ble.n	8001000 <rgbToHue+0x9c>
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c

    float min_val = rf;
 8001000:	6a3b      	ldr	r3, [r7, #32]
 8001002:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (gf < min_val) min_val = gf;
 8001004:	ed97 7a07 	vldr	s14, [r7, #28]
 8001008:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800100c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001014:	d501      	bpl.n	800101a <rgbToHue+0xb6>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (bf < min_val) min_val = bf;
 800101a:	ed97 7a06 	vldr	s14, [r7, #24]
 800101e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102a:	d501      	bpl.n	8001030 <rgbToHue+0xcc>
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	62bb      	str	r3, [r7, #40]	@ 0x28

    float delta = max_val - min_val;
 8001030:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001034:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800103c:	edc7 7a05 	vstr	s15, [r7, #20]

    float h = 0.0;
 8001040:	f04f 0300 	mov.w	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24

    // 色相（H）の計算
    if (delta == 0) {
 8001046:	edd7 7a05 	vldr	s15, [r7, #20]
 800104a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800104e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001052:	d103      	bne.n	800105c <rgbToHue+0xf8>
        h = 0; // 無彩色（グレースケール）
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
 800105a:	e063      	b.n	8001124 <rgbToHue+0x1c0>
    } else {
        if (max_val == rf) {
 800105c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001060:	edd7 7a08 	vldr	s15, [r7, #32]
 8001064:	eeb4 7a67 	vcmp.f32	s14, s15
 8001068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106c:	d11f      	bne.n	80010ae <rgbToHue+0x14a>
            h = 60 * ((gf - bf) / delta);
 800106e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001072:	edd7 7a06 	vldr	s15, [r7, #24]
 8001076:	ee77 6a67 	vsub.f32	s13, s14, s15
 800107a:	ed97 7a05 	vldr	s14, [r7, #20]
 800107e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001082:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001158 <rgbToHue+0x1f4>
 8001086:	ee67 7a87 	vmul.f32	s15, s15, s14
 800108a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            if (h < 0) h += 360; // Hが負の場合360を加算
 800108e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001092:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109a:	d543      	bpl.n	8001124 <rgbToHue+0x1c0>
 800109c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80010a0:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800115c <rgbToHue+0x1f8>
 80010a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010a8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 80010ac:	e03a      	b.n	8001124 <rgbToHue+0x1c0>
        } else if (max_val == gf) {
 80010ae:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80010b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80010b6:	eeb4 7a67 	vcmp.f32	s14, s15
 80010ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010be:	d114      	bne.n	80010ea <rgbToHue+0x186>
            h = 60 * ((bf - rf) / delta + 2);
 80010c0:	ed97 7a06 	vldr	s14, [r7, #24]
 80010c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80010c8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80010cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80010d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010d4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80010d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010dc:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001158 <rgbToHue+0x1f4>
 80010e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 80010e8:	e01c      	b.n	8001124 <rgbToHue+0x1c0>
        } else if (max_val == bf) {
 80010ea:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80010ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80010f2:	eeb4 7a67 	vcmp.f32	s14, s15
 80010f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fa:	d113      	bne.n	8001124 <rgbToHue+0x1c0>
            h = 60 * ((rf - gf) / delta + 4);
 80010fc:	ed97 7a08 	vldr	s14, [r7, #32]
 8001100:	edd7 7a07 	vldr	s15, [r7, #28]
 8001104:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001108:	ed97 7a05 	vldr	s14, [r7, #20]
 800110c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001110:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001114:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001118:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001158 <rgbToHue+0x1f4>
 800111c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001120:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        }
    }

    // Hを0-255の範囲にスケール変換
    h = (h / 360) * 255;
 8001124:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001128:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800115c <rgbToHue+0x1f8>
 800112c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001130:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001160 <rgbToHue+0x1fc>
 8001134:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001138:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    return h;
 800113c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001144:	edc7 7a00 	vstr	s15, [r7]
 8001148:	783b      	ldrb	r3, [r7, #0]
 800114a:	b2db      	uxtb	r3, r3
}
 800114c:	4618      	mov	r0, r3
 800114e:	3730      	adds	r7, #48	@ 0x30
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	402e0000 	.word	0x402e0000
 8001158:	42700000 	.word	0x42700000
 800115c:	43b40000 	.word	0x43b40000
 8001160:	437f0000 	.word	0x437f0000
 8001164:	00000000 	.word	0x00000000

08001168 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116a:	b089      	sub	sp, #36	@ 0x24
 800116c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800116e:	f000 fbab 	bl	80018c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001172:	f000 f8b5 	bl	80012e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001176:	f000 f987 	bl	8001488 <MX_GPIO_Init>
  MX_DMA_Init();
 800117a:	f000 f965 	bl	8001448 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800117e:	f000 f90f 	bl	80013a0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001182:	f000 f937 	bl	80013f4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart2,rxBuf,128);
 8001186:	2280      	movs	r2, #128	@ 0x80
 8001188:	4949      	ldr	r1, [pc, #292]	@ (80012b0 <main+0x148>)
 800118a:	484a      	ldr	r0, [pc, #296]	@ (80012b4 <main+0x14c>)
 800118c:	f002 f89f 	bl	80032ce <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(CAMERA_POWER_GPIO_Port, CAMERA_POWER_Pin, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	2102      	movs	r1, #2
 8001194:	4848      	ldr	r0, [pc, #288]	@ (80012b8 <main+0x150>)
 8001196:	f001 fa43 	bl	8002620 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		readBuf(&huart2, rxBuf, 128, rxColor, 3, 10);
 800119a:	230a      	movs	r3, #10
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	2303      	movs	r3, #3
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	4b46      	ldr	r3, [pc, #280]	@ (80012bc <main+0x154>)
 80011a4:	2280      	movs	r2, #128	@ 0x80
 80011a6:	4942      	ldr	r1, [pc, #264]	@ (80012b0 <main+0x148>)
 80011a8:	4842      	ldr	r0, [pc, #264]	@ (80012b4 <main+0x14c>)
 80011aa:	f000 f9bd 	bl	8001528 <readBuf>
		HAL_Delay(1000);
 80011ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011b2:	f000 fbfb 	bl	80019ac <HAL_Delay>

//		travel_x = -1*odom1.get_travel() - xf;
//		travel_y = -1*odom2.get_travel() - yf;

		travel_x = 31;
 80011b6:	4b42      	ldr	r3, [pc, #264]	@ (80012c0 <main+0x158>)
 80011b8:	221f      	movs	r2, #31
 80011ba:	601a      	str	r2, [r3, #0]

		if( (rxColor[0]==15 && rxColor[1]==15) && rxColor[2]==15){
 80011bc:	4b3f      	ldr	r3, [pc, #252]	@ (80012bc <main+0x154>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b0f      	cmp	r3, #15
 80011c2:	d10c      	bne.n	80011de <main+0x76>
 80011c4:	4b3d      	ldr	r3, [pc, #244]	@ (80012bc <main+0x154>)
 80011c6:	785b      	ldrb	r3, [r3, #1]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d108      	bne.n	80011de <main+0x76>
 80011cc:	4b3b      	ldr	r3, [pc, #236]	@ (80012bc <main+0x154>)
 80011ce:	789b      	ldrb	r3, [r3, #2]
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	d104      	bne.n	80011de <main+0x76>
			hue = hue_back;
 80011d4:	4b3b      	ldr	r3, [pc, #236]	@ (80012c4 <main+0x15c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a3b      	ldr	r2, [pc, #236]	@ (80012c8 <main+0x160>)
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	e01e      	b.n	800121c <main+0xb4>
		}else{
			hue = rgbToHue(rxColor[0],rxColor[1],rxColor[2]);
 80011de:	4b37      	ldr	r3, [pc, #220]	@ (80012bc <main+0x154>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	4b35      	ldr	r3, [pc, #212]	@ (80012bc <main+0x154>)
 80011e6:	785b      	ldrb	r3, [r3, #1]
 80011e8:	4619      	mov	r1, r3
 80011ea:	4b34      	ldr	r3, [pc, #208]	@ (80012bc <main+0x154>)
 80011ec:	789b      	ldrb	r3, [r3, #2]
 80011ee:	461a      	mov	r2, r3
 80011f0:	f7ff feb8 	bl	8000f64 <rgbToHue>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b33      	ldr	r3, [pc, #204]	@ (80012c8 <main+0x160>)
 80011fa:	601a      	str	r2, [r3, #0]
			hue_back = (hue + 90)%250;
 80011fc:	4b32      	ldr	r3, [pc, #200]	@ (80012c8 <main+0x160>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f103 025a 	add.w	r2, r3, #90	@ 0x5a
 8001204:	4b31      	ldr	r3, [pc, #196]	@ (80012cc <main+0x164>)
 8001206:	fb83 1302 	smull	r1, r3, r3, r2
 800120a:	1119      	asrs	r1, r3, #4
 800120c:	17d3      	asrs	r3, r2, #31
 800120e:	1acb      	subs	r3, r1, r3
 8001210:	21fa      	movs	r1, #250	@ 0xfa
 8001212:	fb01 f303 	mul.w	r3, r1, r3
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	4a2a      	ldr	r2, [pc, #168]	@ (80012c4 <main+0x15c>)
 800121a:	6013      	str	r3, [r2, #0]
		}

		float size = 12.0+((-1.0)*travel_y*0.1);
 800121c:	4b2c      	ldr	r3, [pc, #176]	@ (80012d0 <main+0x168>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f943 	bl	80004ac <__aeabi_i2d>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4614      	mov	r4, r2
 800122c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001230:	a31d      	add	r3, pc, #116	@ (adr r3, 80012a8 <main+0x140>)
 8001232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001236:	4620      	mov	r0, r4
 8001238:	4629      	mov	r1, r5
 800123a:	f7ff f9a1 	bl	8000580 <__aeabi_dmul>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4610      	mov	r0, r2
 8001244:	4619      	mov	r1, r3
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	4b22      	ldr	r3, [pc, #136]	@ (80012d4 <main+0x16c>)
 800124c:	f7fe ffe2 	bl	8000214 <__adddf3>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4610      	mov	r0, r2
 8001256:	4619      	mov	r1, r3
 8001258:	f7ff fbc4 	bl	80009e4 <__aeabi_d2f>
 800125c:	4603      	mov	r3, r0
 800125e:	60fb      	str	r3, [r7, #12]
		set_array((-1)*travel_x, (-1)*126, 24, (int)size, hue, hue_back, 21);
 8001260:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <main+0x158>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4258      	negs	r0, r3
 8001266:	edd7 7a03 	vldr	s15, [r7, #12]
 800126a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800126e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001272:	7939      	ldrb	r1, [r7, #4]
 8001274:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <main+0x160>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	4a12      	ldr	r2, [pc, #72]	@ (80012c4 <main+0x15c>)
 800127c:	6812      	ldr	r2, [r2, #0]
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	2615      	movs	r6, #21
 8001282:	9602      	str	r6, [sp, #8]
 8001284:	9201      	str	r2, [sp, #4]
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	460b      	mov	r3, r1
 800128a:	2218      	movs	r2, #24
 800128c:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 8001290:	f7ff fd70 	bl	8000d74 <set_array>
		HAL_UART_Transmit(&huart3,(uint8_t*)&send_array, 11, 100);
 8001294:	2364      	movs	r3, #100	@ 0x64
 8001296:	220b      	movs	r2, #11
 8001298:	490f      	ldr	r1, [pc, #60]	@ (80012d8 <main+0x170>)
 800129a:	4810      	ldr	r0, [pc, #64]	@ (80012dc <main+0x174>)
 800129c:	f001 ff8c 	bl	80031b8 <HAL_UART_Transmit>
  {
 80012a0:	e77b      	b.n	800119a <main+0x32>
 80012a2:	bf00      	nop
 80012a4:	f3af 8000 	nop.w
 80012a8:	9999999a 	.word	0x9999999a
 80012ac:	3fb99999 	.word	0x3fb99999
 80012b0:	2000011c 	.word	0x2000011c
 80012b4:	2000002c 	.word	0x2000002c
 80012b8:	40020000 	.word	0x40020000
 80012bc:	2000019c 	.word	0x2000019c
 80012c0:	200001a0 	.word	0x200001a0
 80012c4:	20000000 	.word	0x20000000
 80012c8:	200001b4 	.word	0x200001b4
 80012cc:	10624dd3 	.word	0x10624dd3
 80012d0:	200001a4 	.word	0x200001a4
 80012d4:	40280000 	.word	0x40280000
 80012d8:	200001a8 	.word	0x200001a8
 80012dc:	20000074 	.word	0x20000074

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b094      	sub	sp, #80	@ 0x50
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	2234      	movs	r2, #52	@ 0x34
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f002 fd2e 	bl	8003d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	4b23      	ldr	r3, [pc, #140]	@ (8001398 <SystemClock_Config+0xb8>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130c:	4a22      	ldr	r2, [pc, #136]	@ (8001398 <SystemClock_Config+0xb8>)
 800130e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001312:	6413      	str	r3, [r2, #64]	@ 0x40
 8001314:	4b20      	ldr	r3, [pc, #128]	@ (8001398 <SystemClock_Config+0xb8>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001320:	2300      	movs	r3, #0
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	4b1d      	ldr	r3, [pc, #116]	@ (800139c <SystemClock_Config+0xbc>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800132c:	4a1b      	ldr	r2, [pc, #108]	@ (800139c <SystemClock_Config+0xbc>)
 800132e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b19      	ldr	r3, [pc, #100]	@ (800139c <SystemClock_Config+0xbc>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001340:	2302      	movs	r3, #2
 8001342:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001344:	2301      	movs	r3, #1
 8001346:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001348:	2310      	movs	r3, #16
 800134a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800134c:	2300      	movs	r3, #0
 800134e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001350:	f107 031c 	add.w	r3, r7, #28
 8001354:	4618      	mov	r0, r3
 8001356:	f001 fc41 	bl	8002bdc <HAL_RCC_OscConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001360:	f000 f93b 	bl	80015da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001364:	230f      	movs	r3, #15
 8001366:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001378:	f107 0308 	add.w	r3, r7, #8
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f001 f968 	bl	8002654 <HAL_RCC_ClockConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800138a:	f000 f926 	bl	80015da <Error_Handler>
  }
}
 800138e:	bf00      	nop
 8001390:	3750      	adds	r7, #80	@ 0x50
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40007000 	.word	0x40007000

080013a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a4:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	@ (80013f0 <MX_USART2_UART_Init+0x50>)
 80013a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013aa:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c4:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013c6:	220c      	movs	r2, #12
 80013c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	@ (80013ec <MX_USART2_UART_Init+0x4c>)
 80013d8:	f001 fe9e 	bl	8003118 <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013e2:	f000 f8fa 	bl	80015da <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000002c 	.word	0x2000002c
 80013f0:	40004400 	.word	0x40004400

080013f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013f8:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <MX_USART3_UART_Init+0x4c>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <MX_USART3_UART_Init+0x50>)
 80013fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013fe:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <MX_USART3_UART_Init+0x4c>)
 8001400:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001404:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <MX_USART3_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <MX_USART3_UART_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <MX_USART3_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <MX_USART3_UART_Init+0x4c>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <MX_USART3_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <MX_USART3_UART_Init+0x4c>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	@ (8001440 <MX_USART3_UART_Init+0x4c>)
 800142c:	f001 fe74 	bl	8003118 <HAL_UART_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001436:	f000 f8d0 	bl	80015da <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000074 	.word	0x20000074
 8001444:	40004800 	.word	0x40004800

08001448 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <MX_DMA_Init+0x3c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a0b      	ldr	r2, [pc, #44]	@ (8001484 <MX_DMA_Init+0x3c>)
 8001458:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <MX_DMA_Init+0x3c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	2010      	movs	r0, #16
 8001470:	f000 fb9b 	bl	8001baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001474:	2010      	movs	r0, #16
 8001476:	f000 fbb4 	bl	8001be2 <HAL_NVIC_EnableIRQ>

}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800

08001488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001520 <MX_GPIO_Init+0x98>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001520 <MX_GPIO_Init+0x98>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001520 <MX_GPIO_Init+0x98>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <MX_GPIO_Init+0x98>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a17      	ldr	r2, [pc, #92]	@ (8001520 <MX_GPIO_Init+0x98>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <MX_GPIO_Init+0x98>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <MX_GPIO_Init+0x98>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	4a10      	ldr	r2, [pc, #64]	@ (8001520 <MX_GPIO_Init+0x98>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <MX_GPIO_Init+0x98>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_POWER_GPIO_Port, CAMERA_POWER_Pin, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2102      	movs	r1, #2
 80014f6:	480b      	ldr	r0, [pc, #44]	@ (8001524 <MX_GPIO_Init+0x9c>)
 80014f8:	f001 f892 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAMERA_POWER_Pin */
  GPIO_InitStruct.Pin = CAMERA_POWER_Pin;
 80014fc:	2302      	movs	r3, #2
 80014fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CAMERA_POWER_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	4619      	mov	r1, r3
 8001512:	4804      	ldr	r0, [pc, #16]	@ (8001524 <MX_GPIO_Init+0x9c>)
 8001514:	f000 fef0 	bl	80022f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001518:	bf00      	nop
 800151a:	3720      	adds	r7, #32
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40023800 	.word	0x40023800
 8001524:	40020000 	.word	0x40020000

08001528 <readBuf>:

/* USER CODE BEGIN 4 */
void readBuf(UART_HandleTypeDef* uart, uint8_t* buf, int buf_size, uint8_t* data, int data_size, int go_back){
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	@ 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	603b      	str	r3, [r7, #0]
	int wrt_pt = buf_size - uart->hdmarx->Instance->NDTR;
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	617b      	str	r3, [r7, #20]
	int rd_pt = wrt_pt - go_back;
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	61fb      	str	r3, [r7, #28]
	if(rd_pt < 0){
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	2b00      	cmp	r3, #0
 8001550:	da03      	bge.n	800155a <readBuf+0x32>
		rd_pt += buf_size;
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4413      	add	r3, r2
 8001558:	61fb      	str	r3, [r7, #28]
	}

	while(1){
		uint8_t readData = buf[rd_pt];
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	68ba      	ldr	r2, [r7, #8]
 800155e:	4413      	add	r3, r2
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	74fb      	strb	r3, [r7, #19]
//		buf[rd_pt] = 255; //読み込み済みのしるし
		if(readData == 250){ //rd_ptがスタートバイトの位置になる
 8001564:	7cfb      	ldrb	r3, [r7, #19]
 8001566:	2bfa      	cmp	r3, #250	@ 0xfa
 8001568:	d120      	bne.n	80015ac <readBuf+0x84>
			for(int i=1; i<=data_size; i++){ //rd_pt+i が今回よむポインタになるように
 800156a:	2301      	movs	r3, #1
 800156c:	61bb      	str	r3, [r7, #24]
 800156e:	e018      	b.n	80015a2 <readBuf+0x7a>
				if(rd_pt + i > buf_size - 1){ //回りきっていないか確認
 8001570:	69fa      	ldr	r2, [r7, #28]
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	4413      	add	r3, r2
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	dc03      	bgt.n	8001584 <readBuf+0x5c>
					rd_pt = rd_pt - buf_size;
 800157c:	69fa      	ldr	r2, [r7, #28]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	61fb      	str	r3, [r7, #28]
				}
				data[i-1] = buf[rd_pt + i]; //返すデータに入れる
 8001584:	69fa      	ldr	r2, [r7, #28]
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	4413      	add	r3, r2
 800158a:	461a      	mov	r2, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	441a      	add	r2, r3
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	3b01      	subs	r3, #1
 8001594:	6839      	ldr	r1, [r7, #0]
 8001596:	440b      	add	r3, r1
 8001598:	7812      	ldrb	r2, [r2, #0]
 800159a:	701a      	strb	r2, [r3, #0]
			for(int i=1; i<=data_size; i++){ //rd_pt+i が今回よむポインタになるように
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	3301      	adds	r3, #1
 80015a0:	61bb      	str	r3, [r7, #24]
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015a6:	429a      	cmp	r2, r3
 80015a8:	dde2      	ble.n	8001570 <readBuf+0x48>
//				buf[rd_pt+i] = 255; //読み込み済みのしるし。
			}
			break;
 80015aa:	e010      	b.n	80015ce <readBuf+0xa6>
		}

		//次のための処理
		rd_pt++;
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	3301      	adds	r3, #1
 80015b0:	61fb      	str	r3, [r7, #28]
		if(rd_pt == buf_size){ //buf_sizeは配列の一番最後の次
 80015b2:	69fa      	ldr	r2, [r7, #28]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d103      	bne.n	80015c2 <readBuf+0x9a>
			rd_pt = rd_pt - buf_size;
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	61fb      	str	r3, [r7, #28]
		}
		if(rd_pt == wrt_pt){//スタートバイトに出会えず書き込みポインタまできたら終わり
 80015c2:	69fa      	ldr	r2, [r7, #28]
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d000      	beq.n	80015cc <readBuf+0xa4>
	while(1){
 80015ca:	e7c6      	b.n	800155a <readBuf+0x32>
//			for(int i=0; i<data_size; i++){
//				data[i] = 255; //無かったことを表す数字
//			}
			break;
 80015cc:	bf00      	nop
		}
	}
}
 80015ce:	bf00      	nop
 80015d0:	3724      	adds	r7, #36	@ 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015de:	b672      	cpsid	i
}
 80015e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e2:	bf00      	nop
 80015e4:	e7fd      	b.n	80015e2 <Error_Handler+0x8>
	...

080015e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <HAL_MspInit+0x4c>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001634 <HAL_MspInit+0x4c>)
 80015f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001634 <HAL_MspInit+0x4c>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001602:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <HAL_MspInit+0x4c>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	4a08      	ldr	r2, [pc, #32]	@ (8001634 <HAL_MspInit+0x4c>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001618:	6413      	str	r3, [r2, #64]	@ 0x40
 800161a:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <HAL_MspInit+0x4c>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800

08001638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08c      	sub	sp, #48	@ 0x30
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a59      	ldr	r2, [pc, #356]	@ (80017bc <HAL_UART_MspInit+0x184>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d15b      	bne.n	8001712 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	4b58      	ldr	r3, [pc, #352]	@ (80017c0 <HAL_UART_MspInit+0x188>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	4a57      	ldr	r2, [pc, #348]	@ (80017c0 <HAL_UART_MspInit+0x188>)
 8001664:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001668:	6413      	str	r3, [r2, #64]	@ 0x40
 800166a:	4b55      	ldr	r3, [pc, #340]	@ (80017c0 <HAL_UART_MspInit+0x188>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001672:	61bb      	str	r3, [r7, #24]
 8001674:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	4b51      	ldr	r3, [pc, #324]	@ (80017c0 <HAL_UART_MspInit+0x188>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	4a50      	ldr	r2, [pc, #320]	@ (80017c0 <HAL_UART_MspInit+0x188>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6313      	str	r3, [r2, #48]	@ 0x30
 8001686:	4b4e      	ldr	r3, [pc, #312]	@ (80017c0 <HAL_UART_MspInit+0x188>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001692:	230c      	movs	r3, #12
 8001694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016a2:	2307      	movs	r3, #7
 80016a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	4845      	ldr	r0, [pc, #276]	@ (80017c4 <HAL_UART_MspInit+0x18c>)
 80016ae:	f000 fe23 	bl	80022f8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80016b2:	4b45      	ldr	r3, [pc, #276]	@ (80017c8 <HAL_UART_MspInit+0x190>)
 80016b4:	4a45      	ldr	r2, [pc, #276]	@ (80017cc <HAL_UART_MspInit+0x194>)
 80016b6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80016b8:	4b43      	ldr	r3, [pc, #268]	@ (80017c8 <HAL_UART_MspInit+0x190>)
 80016ba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016be:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016c0:	4b41      	ldr	r3, [pc, #260]	@ (80017c8 <HAL_UART_MspInit+0x190>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c6:	4b40      	ldr	r3, [pc, #256]	@ (80017c8 <HAL_UART_MspInit+0x190>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016cc:	4b3e      	ldr	r3, [pc, #248]	@ (80017c8 <HAL_UART_MspInit+0x190>)
 80016ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016d2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016d4:	4b3c      	ldr	r3, [pc, #240]	@ (80017c8 <HAL_UART_MspInit+0x190>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016da:	4b3b      	ldr	r3, [pc, #236]	@ (80017c8 <HAL_UART_MspInit+0x190>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80016e0:	4b39      	ldr	r3, [pc, #228]	@ (80017c8 <HAL_UART_MspInit+0x190>)
 80016e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016e6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016e8:	4b37      	ldr	r3, [pc, #220]	@ (80017c8 <HAL_UART_MspInit+0x190>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ee:	4b36      	ldr	r3, [pc, #216]	@ (80017c8 <HAL_UART_MspInit+0x190>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80016f4:	4834      	ldr	r0, [pc, #208]	@ (80017c8 <HAL_UART_MspInit+0x190>)
 80016f6:	f000 fa8f 	bl	8001c18 <HAL_DMA_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001700:	f7ff ff6b 	bl	80015da <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a30      	ldr	r2, [pc, #192]	@ (80017c8 <HAL_UART_MspInit+0x190>)
 8001708:	63da      	str	r2, [r3, #60]	@ 0x3c
 800170a:	4a2f      	ldr	r2, [pc, #188]	@ (80017c8 <HAL_UART_MspInit+0x190>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001710:	e04f      	b.n	80017b2 <HAL_UART_MspInit+0x17a>
  else if(huart->Instance==USART3)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a2e      	ldr	r2, [pc, #184]	@ (80017d0 <HAL_UART_MspInit+0x198>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d14a      	bne.n	80017b2 <HAL_UART_MspInit+0x17a>
    __HAL_RCC_USART3_CLK_ENABLE();
 800171c:	2300      	movs	r3, #0
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	4b27      	ldr	r3, [pc, #156]	@ (80017c0 <HAL_UART_MspInit+0x188>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	4a26      	ldr	r2, [pc, #152]	@ (80017c0 <HAL_UART_MspInit+0x188>)
 8001726:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800172a:	6413      	str	r3, [r2, #64]	@ 0x40
 800172c:	4b24      	ldr	r3, [pc, #144]	@ (80017c0 <HAL_UART_MspInit+0x188>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001730:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <HAL_UART_MspInit+0x188>)
 800173e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001740:	4a1f      	ldr	r2, [pc, #124]	@ (80017c0 <HAL_UART_MspInit+0x188>)
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	6313      	str	r3, [r2, #48]	@ 0x30
 8001748:	4b1d      	ldr	r3, [pc, #116]	@ (80017c0 <HAL_UART_MspInit+0x188>)
 800174a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <HAL_UART_MspInit+0x188>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175c:	4a18      	ldr	r2, [pc, #96]	@ (80017c0 <HAL_UART_MspInit+0x188>)
 800175e:	f043 0302 	orr.w	r3, r3, #2
 8001762:	6313      	str	r3, [r2, #48]	@ 0x30
 8001764:	4b16      	ldr	r3, [pc, #88]	@ (80017c0 <HAL_UART_MspInit+0x188>)
 8001766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001770:	2320      	movs	r3, #32
 8001772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001780:	2307      	movs	r3, #7
 8001782:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	4619      	mov	r1, r3
 800178a:	4812      	ldr	r0, [pc, #72]	@ (80017d4 <HAL_UART_MspInit+0x19c>)
 800178c:	f000 fdb4 	bl	80022f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001790:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017a2:	2307      	movs	r3, #7
 80017a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a6:	f107 031c 	add.w	r3, r7, #28
 80017aa:	4619      	mov	r1, r3
 80017ac:	480a      	ldr	r0, [pc, #40]	@ (80017d8 <HAL_UART_MspInit+0x1a0>)
 80017ae:	f000 fda3 	bl	80022f8 <HAL_GPIO_Init>
}
 80017b2:	bf00      	nop
 80017b4:	3730      	adds	r7, #48	@ 0x30
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40004400 	.word	0x40004400
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40020000 	.word	0x40020000
 80017c8:	200000bc 	.word	0x200000bc
 80017cc:	40026088 	.word	0x40026088
 80017d0:	40004800 	.word	0x40004800
 80017d4:	40020800 	.word	0x40020800
 80017d8:	40020400 	.word	0x40020400

080017dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <NMI_Handler+0x4>

080017e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <MemManage_Handler+0x4>

080017f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <BusFault_Handler+0x4>

080017fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <UsageFault_Handler+0x4>

08001804 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001832:	f000 f89b 	bl	800196c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <DMA1_Stream5_IRQHandler+0x10>)
 8001842:	f000 faef 	bl	8001e24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200000bc 	.word	0x200000bc

08001850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001854:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <SystemInit+0x20>)
 8001856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800185a:	4a05      	ldr	r2, [pc, #20]	@ (8001870 <SystemInit+0x20>)
 800185c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001860:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001874:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001878:	f7ff ffea 	bl	8001850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800187c:	480c      	ldr	r0, [pc, #48]	@ (80018b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800187e:	490d      	ldr	r1, [pc, #52]	@ (80018b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001880:	4a0d      	ldr	r2, [pc, #52]	@ (80018b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001884:	e002      	b.n	800188c <LoopCopyDataInit>

08001886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188a:	3304      	adds	r3, #4

0800188c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800188c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001890:	d3f9      	bcc.n	8001886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001892:	4a0a      	ldr	r2, [pc, #40]	@ (80018bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001894:	4c0a      	ldr	r4, [pc, #40]	@ (80018c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001898:	e001      	b.n	800189e <LoopFillZerobss>

0800189a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800189c:	3204      	adds	r2, #4

0800189e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a0:	d3fb      	bcc.n	800189a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018a2:	f002 fa5d 	bl	8003d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a6:	f7ff fc5f 	bl	8001168 <main>
  bx  lr    
 80018aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80018b8:	08003df0 	.word	0x08003df0
  ldr r2, =_sbss
 80018bc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80018c0:	200001bc 	.word	0x200001bc

080018c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c4:	e7fe      	b.n	80018c4 <ADC_IRQHandler>
	...

080018c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001908 <HAL_Init+0x40>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001908 <HAL_Init+0x40>)
 80018d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <HAL_Init+0x40>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001908 <HAL_Init+0x40>)
 80018de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e4:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <HAL_Init+0x40>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a07      	ldr	r2, [pc, #28]	@ (8001908 <HAL_Init+0x40>)
 80018ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f0:	2003      	movs	r0, #3
 80018f2:	f000 f94f 	bl	8001b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f6:	200f      	movs	r0, #15
 80018f8:	f000 f808 	bl	800190c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018fc:	f7ff fe74 	bl	80015e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023c00 	.word	0x40023c00

0800190c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001914:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <HAL_InitTick+0x54>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <HAL_InitTick+0x58>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4619      	mov	r1, r3
 800191e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001922:	fbb3 f3f1 	udiv	r3, r3, r1
 8001926:	fbb2 f3f3 	udiv	r3, r2, r3
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f967 	bl	8001bfe <HAL_SYSTICK_Config>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e00e      	b.n	8001958 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b0f      	cmp	r3, #15
 800193e:	d80a      	bhi.n	8001956 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001940:	2200      	movs	r2, #0
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001948:	f000 f92f 	bl	8001baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800194c:	4a06      	ldr	r2, [pc, #24]	@ (8001968 <HAL_InitTick+0x5c>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	e000      	b.n	8001958 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000004 	.word	0x20000004
 8001964:	2000000c 	.word	0x2000000c
 8001968:	20000008 	.word	0x20000008

0800196c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001970:	4b06      	ldr	r3, [pc, #24]	@ (800198c <HAL_IncTick+0x20>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <HAL_IncTick+0x24>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4413      	add	r3, r2
 800197c:	4a04      	ldr	r2, [pc, #16]	@ (8001990 <HAL_IncTick+0x24>)
 800197e:	6013      	str	r3, [r2, #0]
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	2000000c 	.word	0x2000000c
 8001990:	200001b8 	.word	0x200001b8

08001994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return uwTick;
 8001998:	4b03      	ldr	r3, [pc, #12]	@ (80019a8 <HAL_GetTick+0x14>)
 800199a:	681b      	ldr	r3, [r3, #0]
}
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	200001b8 	.word	0x200001b8

080019ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b4:	f7ff ffee 	bl	8001994 <HAL_GetTick>
 80019b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019c4:	d005      	beq.n	80019d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c6:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <HAL_Delay+0x44>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019d2:	bf00      	nop
 80019d4:	f7ff ffde 	bl	8001994 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d8f7      	bhi.n	80019d4 <HAL_Delay+0x28>
  {
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	2000000c 	.word	0x2000000c

080019f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a04:	4b0c      	ldr	r3, [pc, #48]	@ (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a10:	4013      	ands	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a26:	4a04      	ldr	r2, [pc, #16]	@ (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a40:	4b04      	ldr	r3, [pc, #16]	@ (8001a54 <__NVIC_GetPriorityGrouping+0x18>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	f003 0307 	and.w	r3, r3, #7
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	db0b      	blt.n	8001a82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	4907      	ldr	r1, [pc, #28]	@ (8001a90 <__NVIC_EnableIRQ+0x38>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	2001      	movs	r0, #1
 8001a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000e100 	.word	0xe000e100

08001a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	6039      	str	r1, [r7, #0]
 8001a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	db0a      	blt.n	8001abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	490c      	ldr	r1, [pc, #48]	@ (8001ae0 <__NVIC_SetPriority+0x4c>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	0112      	lsls	r2, r2, #4
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001abc:	e00a      	b.n	8001ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4908      	ldr	r1, [pc, #32]	@ (8001ae4 <__NVIC_SetPriority+0x50>)
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	3b04      	subs	r3, #4
 8001acc:	0112      	lsls	r2, r2, #4
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	761a      	strb	r2, [r3, #24]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000e100 	.word	0xe000e100
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b089      	sub	sp, #36	@ 0x24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f1c3 0307 	rsb	r3, r3, #7
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	bf28      	it	cs
 8001b06:	2304      	movcs	r3, #4
 8001b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d902      	bls.n	8001b18 <NVIC_EncodePriority+0x30>
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3b03      	subs	r3, #3
 8001b16:	e000      	b.n	8001b1a <NVIC_EncodePriority+0x32>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43da      	mvns	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43d9      	mvns	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	4313      	orrs	r3, r2
         );
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3724      	adds	r7, #36	@ 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b60:	d301      	bcc.n	8001b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00f      	b.n	8001b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b66:	4a0a      	ldr	r2, [pc, #40]	@ (8001b90 <SysTick_Config+0x40>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6e:	210f      	movs	r1, #15
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b74:	f7ff ff8e 	bl	8001a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b78:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <SysTick_Config+0x40>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7e:	4b04      	ldr	r3, [pc, #16]	@ (8001b90 <SysTick_Config+0x40>)
 8001b80:	2207      	movs	r2, #7
 8001b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	e000e010 	.word	0xe000e010

08001b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff29 	bl	80019f4 <__NVIC_SetPriorityGrouping>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
 8001bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bbc:	f7ff ff3e 	bl	8001a3c <__NVIC_GetPriorityGrouping>
 8001bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	6978      	ldr	r0, [r7, #20]
 8001bc8:	f7ff ff8e 	bl	8001ae8 <NVIC_EncodePriority>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff5d 	bl	8001a94 <__NVIC_SetPriority>
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff31 	bl	8001a58 <__NVIC_EnableIRQ>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ffa2 	bl	8001b50 <SysTick_Config>
 8001c0c:	4603      	mov	r3, r0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c24:	f7ff feb6 	bl	8001994 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e099      	b.n	8001d68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0201 	bic.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c54:	e00f      	b.n	8001c76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c56:	f7ff fe9d 	bl	8001994 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	d908      	bls.n	8001c76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2220      	movs	r2, #32
 8001c68:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e078      	b.n	8001d68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1e8      	bne.n	8001c56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	4b38      	ldr	r3, [pc, #224]	@ (8001d70 <HAL_DMA_Init+0x158>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d107      	bne.n	8001ce0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f023 0307 	bic.w	r3, r3, #7
 8001cf6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d117      	bne.n	8001d3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00e      	beq.n	8001d3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 fa6f 	bl	8002200 <DMA_CheckFifoParam>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d008      	beq.n	8001d3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2240      	movs	r2, #64	@ 0x40
 8001d2c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d36:	2301      	movs	r3, #1
 8001d38:	e016      	b.n	8001d68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 fa26 	bl	8002194 <DMA_CalcBaseAndBitshift>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d50:	223f      	movs	r2, #63	@ 0x3f
 8001d52:	409a      	lsls	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	f010803f 	.word	0xf010803f

08001d74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_DMA_Start_IT+0x26>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e040      	b.n	8001e1c <HAL_DMA_Start_IT+0xa8>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d12f      	bne.n	8001e0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2202      	movs	r2, #2
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f000 f9b8 	bl	8002138 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dcc:	223f      	movs	r2, #63	@ 0x3f
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0216 	orr.w	r2, r2, #22
 8001de2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0208 	orr.w	r2, r2, #8
 8001dfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e005      	b.n	8001e1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e16:	2302      	movs	r3, #2
 8001e18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e30:	4b8e      	ldr	r3, [pc, #568]	@ (800206c <HAL_DMA_IRQHandler+0x248>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a8e      	ldr	r2, [pc, #568]	@ (8002070 <HAL_DMA_IRQHandler+0x24c>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	0a9b      	lsrs	r3, r3, #10
 8001e3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e4e:	2208      	movs	r2, #8
 8001e50:	409a      	lsls	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d01a      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d013      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0204 	bic.w	r2, r2, #4
 8001e76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7c:	2208      	movs	r2, #8
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e88:	f043 0201 	orr.w	r2, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e94:	2201      	movs	r2, #1
 8001e96:	409a      	lsls	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d012      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00b      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ebe:	f043 0202 	orr.w	r2, r3, #2
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eca:	2204      	movs	r2, #4
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d012      	beq.n	8001efc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00b      	beq.n	8001efc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee8:	2204      	movs	r2, #4
 8001eea:	409a      	lsls	r2, r3
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef4:	f043 0204 	orr.w	r2, r3, #4
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f00:	2210      	movs	r2, #16
 8001f02:	409a      	lsls	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d043      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d03c      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f1e:	2210      	movs	r2, #16
 8001f20:	409a      	lsls	r2, r3
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d018      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d108      	bne.n	8001f54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d024      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	4798      	blx	r3
 8001f52:	e01f      	b.n	8001f94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d01b      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	4798      	blx	r3
 8001f64:	e016      	b.n	8001f94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d107      	bne.n	8001f84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0208 	bic.w	r2, r2, #8
 8001f82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f98:	2220      	movs	r2, #32
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 808f 	beq.w	80020c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 8087 	beq.w	80020c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fba:	2220      	movs	r2, #32
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b05      	cmp	r3, #5
 8001fcc:	d136      	bne.n	800203c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0216 	bic.w	r2, r2, #22
 8001fdc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	695a      	ldr	r2, [r3, #20]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d103      	bne.n	8001ffe <HAL_DMA_IRQHandler+0x1da>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d007      	beq.n	800200e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0208 	bic.w	r2, r2, #8
 800200c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002012:	223f      	movs	r2, #63	@ 0x3f
 8002014:	409a      	lsls	r2, r3
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800202e:	2b00      	cmp	r3, #0
 8002030:	d07e      	beq.n	8002130 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	4798      	blx	r3
        }
        return;
 800203a:	e079      	b.n	8002130 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d01d      	beq.n	8002086 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10d      	bne.n	8002074 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205c:	2b00      	cmp	r3, #0
 800205e:	d031      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	4798      	blx	r3
 8002068:	e02c      	b.n	80020c4 <HAL_DMA_IRQHandler+0x2a0>
 800206a:	bf00      	nop
 800206c:	20000004 	.word	0x20000004
 8002070:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002078:	2b00      	cmp	r3, #0
 800207a:	d023      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
 8002084:	e01e      	b.n	80020c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10f      	bne.n	80020b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0210 	bic.w	r2, r2, #16
 80020a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d032      	beq.n	8002132 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d022      	beq.n	800211e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2205      	movs	r2, #5
 80020dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0201 	bic.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	3301      	adds	r3, #1
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d307      	bcc.n	800210c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f2      	bne.n	80020f0 <HAL_DMA_IRQHandler+0x2cc>
 800210a:	e000      	b.n	800210e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800210c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	4798      	blx	r3
 800212e:	e000      	b.n	8002132 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002130:	bf00      	nop
    }
  }
}
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
 8002144:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002154:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b40      	cmp	r3, #64	@ 0x40
 8002164:	d108      	bne.n	8002178 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002176:	e007      	b.n	8002188 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	60da      	str	r2, [r3, #12]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	3b10      	subs	r3, #16
 80021a4:	4a14      	ldr	r2, [pc, #80]	@ (80021f8 <DMA_CalcBaseAndBitshift+0x64>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	091b      	lsrs	r3, r3, #4
 80021ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021ae:	4a13      	ldr	r2, [pc, #76]	@ (80021fc <DMA_CalcBaseAndBitshift+0x68>)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4413      	add	r3, r2
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d909      	bls.n	80021d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021ca:	f023 0303 	bic.w	r3, r3, #3
 80021ce:	1d1a      	adds	r2, r3, #4
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80021d4:	e007      	b.n	80021e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021de:	f023 0303 	bic.w	r3, r3, #3
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	aaaaaaab 	.word	0xaaaaaaab
 80021fc:	08003dd8 	.word	0x08003dd8

08002200 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002210:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d11f      	bne.n	800225a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b03      	cmp	r3, #3
 800221e:	d856      	bhi.n	80022ce <DMA_CheckFifoParam+0xce>
 8002220:	a201      	add	r2, pc, #4	@ (adr r2, 8002228 <DMA_CheckFifoParam+0x28>)
 8002222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002226:	bf00      	nop
 8002228:	08002239 	.word	0x08002239
 800222c:	0800224b 	.word	0x0800224b
 8002230:	08002239 	.word	0x08002239
 8002234:	080022cf 	.word	0x080022cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d046      	beq.n	80022d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002248:	e043      	b.n	80022d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002252:	d140      	bne.n	80022d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002258:	e03d      	b.n	80022d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002262:	d121      	bne.n	80022a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b03      	cmp	r3, #3
 8002268:	d837      	bhi.n	80022da <DMA_CheckFifoParam+0xda>
 800226a:	a201      	add	r2, pc, #4	@ (adr r2, 8002270 <DMA_CheckFifoParam+0x70>)
 800226c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002270:	08002281 	.word	0x08002281
 8002274:	08002287 	.word	0x08002287
 8002278:	08002281 	.word	0x08002281
 800227c:	08002299 	.word	0x08002299
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
      break;
 8002284:	e030      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d025      	beq.n	80022de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002296:	e022      	b.n	80022de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80022a0:	d11f      	bne.n	80022e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022a6:	e01c      	b.n	80022e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d903      	bls.n	80022b6 <DMA_CheckFifoParam+0xb6>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d003      	beq.n	80022bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022b4:	e018      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
      break;
 80022ba:	e015      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00e      	beq.n	80022e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
      break;
 80022cc:	e00b      	b.n	80022e6 <DMA_CheckFifoParam+0xe6>
      break;
 80022ce:	bf00      	nop
 80022d0:	e00a      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022d2:	bf00      	nop
 80022d4:	e008      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022d6:	bf00      	nop
 80022d8:	e006      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022da:	bf00      	nop
 80022dc:	e004      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022de:	bf00      	nop
 80022e0:	e002      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80022e2:	bf00      	nop
 80022e4:	e000      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022e6:	bf00      	nop
    }
  } 
  
  return status; 
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop

080022f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	@ 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	e165      	b.n	80025e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002314:	2201      	movs	r2, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	429a      	cmp	r2, r3
 800232e:	f040 8154 	bne.w	80025da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b01      	cmp	r3, #1
 800233c:	d005      	beq.n	800234a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002346:	2b02      	cmp	r3, #2
 8002348:	d130      	bne.n	80023ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 0201 	and.w	r2, r3, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d017      	beq.n	80023e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d123      	bne.n	800243c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	08da      	lsrs	r2, r3, #3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3208      	adds	r2, #8
 80023fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	08da      	lsrs	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3208      	adds	r2, #8
 8002436:	69b9      	ldr	r1, [r7, #24]
 8002438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0203 	and.w	r2, r3, #3
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80ae 	beq.w	80025da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	4b5d      	ldr	r3, [pc, #372]	@ (80025f8 <HAL_GPIO_Init+0x300>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002486:	4a5c      	ldr	r2, [pc, #368]	@ (80025f8 <HAL_GPIO_Init+0x300>)
 8002488:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800248c:	6453      	str	r3, [r2, #68]	@ 0x44
 800248e:	4b5a      	ldr	r3, [pc, #360]	@ (80025f8 <HAL_GPIO_Init+0x300>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800249a:	4a58      	ldr	r2, [pc, #352]	@ (80025fc <HAL_GPIO_Init+0x304>)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	3302      	adds	r3, #2
 80024a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	220f      	movs	r2, #15
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4f      	ldr	r2, [pc, #316]	@ (8002600 <HAL_GPIO_Init+0x308>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d025      	beq.n	8002512 <HAL_GPIO_Init+0x21a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4e      	ldr	r2, [pc, #312]	@ (8002604 <HAL_GPIO_Init+0x30c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d01f      	beq.n	800250e <HAL_GPIO_Init+0x216>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a4d      	ldr	r2, [pc, #308]	@ (8002608 <HAL_GPIO_Init+0x310>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d019      	beq.n	800250a <HAL_GPIO_Init+0x212>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4c      	ldr	r2, [pc, #304]	@ (800260c <HAL_GPIO_Init+0x314>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d013      	beq.n	8002506 <HAL_GPIO_Init+0x20e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002610 <HAL_GPIO_Init+0x318>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00d      	beq.n	8002502 <HAL_GPIO_Init+0x20a>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002614 <HAL_GPIO_Init+0x31c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d007      	beq.n	80024fe <HAL_GPIO_Init+0x206>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a49      	ldr	r2, [pc, #292]	@ (8002618 <HAL_GPIO_Init+0x320>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d101      	bne.n	80024fa <HAL_GPIO_Init+0x202>
 80024f6:	2306      	movs	r3, #6
 80024f8:	e00c      	b.n	8002514 <HAL_GPIO_Init+0x21c>
 80024fa:	2307      	movs	r3, #7
 80024fc:	e00a      	b.n	8002514 <HAL_GPIO_Init+0x21c>
 80024fe:	2305      	movs	r3, #5
 8002500:	e008      	b.n	8002514 <HAL_GPIO_Init+0x21c>
 8002502:	2304      	movs	r3, #4
 8002504:	e006      	b.n	8002514 <HAL_GPIO_Init+0x21c>
 8002506:	2303      	movs	r3, #3
 8002508:	e004      	b.n	8002514 <HAL_GPIO_Init+0x21c>
 800250a:	2302      	movs	r3, #2
 800250c:	e002      	b.n	8002514 <HAL_GPIO_Init+0x21c>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_GPIO_Init+0x21c>
 8002512:	2300      	movs	r3, #0
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	f002 0203 	and.w	r2, r2, #3
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	4093      	lsls	r3, r2
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002524:	4935      	ldr	r1, [pc, #212]	@ (80025fc <HAL_GPIO_Init+0x304>)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	089b      	lsrs	r3, r3, #2
 800252a:	3302      	adds	r3, #2
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002532:	4b3a      	ldr	r3, [pc, #232]	@ (800261c <HAL_GPIO_Init+0x324>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002556:	4a31      	ldr	r2, [pc, #196]	@ (800261c <HAL_GPIO_Init+0x324>)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800255c:	4b2f      	ldr	r3, [pc, #188]	@ (800261c <HAL_GPIO_Init+0x324>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002580:	4a26      	ldr	r2, [pc, #152]	@ (800261c <HAL_GPIO_Init+0x324>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002586:	4b25      	ldr	r3, [pc, #148]	@ (800261c <HAL_GPIO_Init+0x324>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025aa:	4a1c      	ldr	r2, [pc, #112]	@ (800261c <HAL_GPIO_Init+0x324>)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b0:	4b1a      	ldr	r3, [pc, #104]	@ (800261c <HAL_GPIO_Init+0x324>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025d4:	4a11      	ldr	r2, [pc, #68]	@ (800261c <HAL_GPIO_Init+0x324>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3301      	adds	r3, #1
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	2b0f      	cmp	r3, #15
 80025e4:	f67f ae96 	bls.w	8002314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	3724      	adds	r7, #36	@ 0x24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40013800 	.word	0x40013800
 8002600:	40020000 	.word	0x40020000
 8002604:	40020400 	.word	0x40020400
 8002608:	40020800 	.word	0x40020800
 800260c:	40020c00 	.word	0x40020c00
 8002610:	40021000 	.word	0x40021000
 8002614:	40021400 	.word	0x40021400
 8002618:	40021800 	.word	0x40021800
 800261c:	40013c00 	.word	0x40013c00

08002620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
 800262c:	4613      	mov	r3, r2
 800262e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002630:	787b      	ldrb	r3, [r7, #1]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002636:	887a      	ldrh	r2, [r7, #2]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800263c:	e003      	b.n	8002646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800263e:	887b      	ldrh	r3, [r7, #2]
 8002640:	041a      	lsls	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	619a      	str	r2, [r3, #24]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0cc      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002668:	4b68      	ldr	r3, [pc, #416]	@ (800280c <HAL_RCC_ClockConfig+0x1b8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 030f 	and.w	r3, r3, #15
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d90c      	bls.n	8002690 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002676:	4b65      	ldr	r3, [pc, #404]	@ (800280c <HAL_RCC_ClockConfig+0x1b8>)
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800267e:	4b63      	ldr	r3, [pc, #396]	@ (800280c <HAL_RCC_ClockConfig+0x1b8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d001      	beq.n	8002690 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0b8      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d020      	beq.n	80026de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a8:	4b59      	ldr	r3, [pc, #356]	@ (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	4a58      	ldr	r2, [pc, #352]	@ (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026c0:	4b53      	ldr	r3, [pc, #332]	@ (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4a52      	ldr	r2, [pc, #328]	@ (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026cc:	4b50      	ldr	r3, [pc, #320]	@ (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	494d      	ldr	r1, [pc, #308]	@ (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d044      	beq.n	8002774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	4b47      	ldr	r3, [pc, #284]	@ (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d119      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e07f      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d003      	beq.n	8002712 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800270e:	2b03      	cmp	r3, #3
 8002710:	d107      	bne.n	8002722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002712:	4b3f      	ldr	r3, [pc, #252]	@ (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d109      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e06f      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002722:	4b3b      	ldr	r3, [pc, #236]	@ (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e067      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002732:	4b37      	ldr	r3, [pc, #220]	@ (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f023 0203 	bic.w	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4934      	ldr	r1, [pc, #208]	@ (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	4313      	orrs	r3, r2
 8002742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002744:	f7ff f926 	bl	8001994 <HAL_GetTick>
 8002748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274a:	e00a      	b.n	8002762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800274c:	f7ff f922 	bl	8001994 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e04f      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002762:	4b2b      	ldr	r3, [pc, #172]	@ (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 020c 	and.w	r2, r3, #12
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	429a      	cmp	r2, r3
 8002772:	d1eb      	bne.n	800274c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002774:	4b25      	ldr	r3, [pc, #148]	@ (800280c <HAL_RCC_ClockConfig+0x1b8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 030f 	and.w	r3, r3, #15
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d20c      	bcs.n	800279c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002782:	4b22      	ldr	r3, [pc, #136]	@ (800280c <HAL_RCC_ClockConfig+0x1b8>)
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800278a:	4b20      	ldr	r3, [pc, #128]	@ (800280c <HAL_RCC_ClockConfig+0x1b8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e032      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a8:	4b19      	ldr	r3, [pc, #100]	@ (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4916      	ldr	r1, [pc, #88]	@ (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027c6:	4b12      	ldr	r3, [pc, #72]	@ (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	490e      	ldr	r1, [pc, #56]	@ (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027da:	f000 f855 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 80027de:	4602      	mov	r2, r0
 80027e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	490a      	ldr	r1, [pc, #40]	@ (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	5ccb      	ldrb	r3, [r1, r3]
 80027ee:	fa22 f303 	lsr.w	r3, r2, r3
 80027f2:	4a09      	ldr	r2, [pc, #36]	@ (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027f6:	4b09      	ldr	r3, [pc, #36]	@ (800281c <HAL_RCC_ClockConfig+0x1c8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff f886 	bl	800190c <HAL_InitTick>

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40023c00 	.word	0x40023c00
 8002810:	40023800 	.word	0x40023800
 8002814:	08003dc0 	.word	0x08003dc0
 8002818:	20000004 	.word	0x20000004
 800281c:	20000008 	.word	0x20000008

08002820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002824:	4b03      	ldr	r3, [pc, #12]	@ (8002834 <HAL_RCC_GetHCLKFreq+0x14>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000004 	.word	0x20000004

08002838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800283c:	f7ff fff0 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 8002840:	4602      	mov	r2, r0
 8002842:	4b05      	ldr	r3, [pc, #20]	@ (8002858 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	0a9b      	lsrs	r3, r3, #10
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	4903      	ldr	r1, [pc, #12]	@ (800285c <HAL_RCC_GetPCLK1Freq+0x24>)
 800284e:	5ccb      	ldrb	r3, [r1, r3]
 8002850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002854:	4618      	mov	r0, r3
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40023800 	.word	0x40023800
 800285c:	08003dd0 	.word	0x08003dd0

08002860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002864:	f7ff ffdc 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 8002868:	4602      	mov	r2, r0
 800286a:	4b05      	ldr	r3, [pc, #20]	@ (8002880 <HAL_RCC_GetPCLK2Freq+0x20>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	0b5b      	lsrs	r3, r3, #13
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	4903      	ldr	r1, [pc, #12]	@ (8002884 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002876:	5ccb      	ldrb	r3, [r1, r3]
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800287c:	4618      	mov	r0, r3
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40023800 	.word	0x40023800
 8002884:	08003dd0 	.word	0x08003dd0

08002888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800288c:	b0a6      	sub	sp, #152	@ 0x98
 800288e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028ae:	4bc8      	ldr	r3, [pc, #800]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x348>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b0c      	cmp	r3, #12
 80028b8:	f200 817e 	bhi.w	8002bb8 <HAL_RCC_GetSysClockFreq+0x330>
 80028bc:	a201      	add	r2, pc, #4	@ (adr r2, 80028c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80028be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c2:	bf00      	nop
 80028c4:	080028f9 	.word	0x080028f9
 80028c8:	08002bb9 	.word	0x08002bb9
 80028cc:	08002bb9 	.word	0x08002bb9
 80028d0:	08002bb9 	.word	0x08002bb9
 80028d4:	08002901 	.word	0x08002901
 80028d8:	08002bb9 	.word	0x08002bb9
 80028dc:	08002bb9 	.word	0x08002bb9
 80028e0:	08002bb9 	.word	0x08002bb9
 80028e4:	08002909 	.word	0x08002909
 80028e8:	08002bb9 	.word	0x08002bb9
 80028ec:	08002bb9 	.word	0x08002bb9
 80028f0:	08002bb9 	.word	0x08002bb9
 80028f4:	08002a73 	.word	0x08002a73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028f8:	4bb6      	ldr	r3, [pc, #728]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80028fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 80028fe:	e15f      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002900:	4bb5      	ldr	r3, [pc, #724]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002902:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002906:	e15b      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002908:	4bb1      	ldr	r3, [pc, #708]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x348>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002910:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002914:	4bae      	ldr	r3, [pc, #696]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d031      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002920:	4bab      	ldr	r3, [pc, #684]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	099b      	lsrs	r3, r3, #6
 8002926:	2200      	movs	r2, #0
 8002928:	66bb      	str	r3, [r7, #104]	@ 0x68
 800292a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800292c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800292e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002932:	663b      	str	r3, [r7, #96]	@ 0x60
 8002934:	2300      	movs	r3, #0
 8002936:	667b      	str	r3, [r7, #100]	@ 0x64
 8002938:	4ba7      	ldr	r3, [pc, #668]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x350>)
 800293a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800293e:	462a      	mov	r2, r5
 8002940:	fb03 f202 	mul.w	r2, r3, r2
 8002944:	2300      	movs	r3, #0
 8002946:	4621      	mov	r1, r4
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4413      	add	r3, r2
 800294e:	4aa2      	ldr	r2, [pc, #648]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002950:	4621      	mov	r1, r4
 8002952:	fba1 1202 	umull	r1, r2, r1, r2
 8002956:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002958:	460a      	mov	r2, r1
 800295a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800295c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800295e:	4413      	add	r3, r2
 8002960:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002962:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002966:	2200      	movs	r2, #0
 8002968:	65bb      	str	r3, [r7, #88]	@ 0x58
 800296a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800296c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002970:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002974:	f7fe f886 	bl	8000a84 <__aeabi_uldivmod>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4613      	mov	r3, r2
 800297e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002982:	e064      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002984:	4b92      	ldr	r3, [pc, #584]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	099b      	lsrs	r3, r3, #6
 800298a:	2200      	movs	r2, #0
 800298c:	653b      	str	r3, [r7, #80]	@ 0x50
 800298e:	657a      	str	r2, [r7, #84]	@ 0x54
 8002990:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002996:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002998:	2300      	movs	r3, #0
 800299a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800299c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80029a0:	4622      	mov	r2, r4
 80029a2:	462b      	mov	r3, r5
 80029a4:	f04f 0000 	mov.w	r0, #0
 80029a8:	f04f 0100 	mov.w	r1, #0
 80029ac:	0159      	lsls	r1, r3, #5
 80029ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029b2:	0150      	lsls	r0, r2, #5
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4621      	mov	r1, r4
 80029ba:	1a51      	subs	r1, r2, r1
 80029bc:	6139      	str	r1, [r7, #16]
 80029be:	4629      	mov	r1, r5
 80029c0:	eb63 0301 	sbc.w	r3, r3, r1
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029d2:	4659      	mov	r1, fp
 80029d4:	018b      	lsls	r3, r1, #6
 80029d6:	4651      	mov	r1, sl
 80029d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029dc:	4651      	mov	r1, sl
 80029de:	018a      	lsls	r2, r1, #6
 80029e0:	4651      	mov	r1, sl
 80029e2:	ebb2 0801 	subs.w	r8, r2, r1
 80029e6:	4659      	mov	r1, fp
 80029e8:	eb63 0901 	sbc.w	r9, r3, r1
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a00:	4690      	mov	r8, r2
 8002a02:	4699      	mov	r9, r3
 8002a04:	4623      	mov	r3, r4
 8002a06:	eb18 0303 	adds.w	r3, r8, r3
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	462b      	mov	r3, r5
 8002a0e:	eb49 0303 	adc.w	r3, r9, r3
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a20:	4629      	mov	r1, r5
 8002a22:	028b      	lsls	r3, r1, #10
 8002a24:	4621      	mov	r1, r4
 8002a26:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a2a:	4621      	mov	r1, r4
 8002a2c:	028a      	lsls	r2, r1, #10
 8002a2e:	4610      	mov	r0, r2
 8002a30:	4619      	mov	r1, r3
 8002a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a36:	2200      	movs	r2, #0
 8002a38:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002a3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a40:	f7fe f820 	bl	8000a84 <__aeabi_uldivmod>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4613      	mov	r3, r2
 8002a4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a4e:	4b60      	ldr	r3, [pc, #384]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	0c1b      	lsrs	r3, r3, #16
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	3301      	adds	r3, #1
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8002a60:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002a64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002a70:	e0a6      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a72:	4b57      	ldr	r3, [pc, #348]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a7e:	4b54      	ldr	r3, [pc, #336]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d02a      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a8a:	4b51      	ldr	r3, [pc, #324]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	099b      	lsrs	r3, r3, #6
 8002a90:	2200      	movs	r2, #0
 8002a92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4b4e      	ldr	r3, [pc, #312]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002aa0:	fb03 f201 	mul.w	r2, r3, r1
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	fb00 f303 	mul.w	r3, r0, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	4a4a      	ldr	r2, [pc, #296]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002aae:	fba0 1202 	umull	r1, r2, r0, r2
 8002ab2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ab4:	460a      	mov	r2, r1
 8002ab6:	673a      	str	r2, [r7, #112]	@ 0x70
 8002ab8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002aba:	4413      	add	r3, r2
 8002abc:	677b      	str	r3, [r7, #116]	@ 0x74
 8002abe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ac6:	637a      	str	r2, [r7, #52]	@ 0x34
 8002ac8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002acc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002ad0:	f7fd ffd8 	bl	8000a84 <__aeabi_uldivmod>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4613      	mov	r3, r2
 8002ada:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002ade:	e05b      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae0:	4b3b      	ldr	r3, [pc, #236]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	099b      	lsrs	r3, r3, #6
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af2:	623b      	str	r3, [r7, #32]
 8002af4:	2300      	movs	r3, #0
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002af8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002afc:	4642      	mov	r2, r8
 8002afe:	464b      	mov	r3, r9
 8002b00:	f04f 0000 	mov.w	r0, #0
 8002b04:	f04f 0100 	mov.w	r1, #0
 8002b08:	0159      	lsls	r1, r3, #5
 8002b0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b0e:	0150      	lsls	r0, r2, #5
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4641      	mov	r1, r8
 8002b16:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b1a:	4649      	mov	r1, r9
 8002b1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b34:	ebb2 040a 	subs.w	r4, r2, sl
 8002b38:	eb63 050b 	sbc.w	r5, r3, fp
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	00eb      	lsls	r3, r5, #3
 8002b46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b4a:	00e2      	lsls	r2, r4, #3
 8002b4c:	4614      	mov	r4, r2
 8002b4e:	461d      	mov	r5, r3
 8002b50:	4643      	mov	r3, r8
 8002b52:	18e3      	adds	r3, r4, r3
 8002b54:	603b      	str	r3, [r7, #0]
 8002b56:	464b      	mov	r3, r9
 8002b58:	eb45 0303 	adc.w	r3, r5, r3
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	028b      	lsls	r3, r1, #10
 8002b6e:	4621      	mov	r1, r4
 8002b70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b74:	4621      	mov	r1, r4
 8002b76:	028a      	lsls	r2, r1, #10
 8002b78:	4610      	mov	r0, r2
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b80:	2200      	movs	r2, #0
 8002b82:	61bb      	str	r3, [r7, #24]
 8002b84:	61fa      	str	r2, [r7, #28]
 8002b86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b8a:	f7fd ff7b 	bl	8000a84 <__aeabi_uldivmod>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4613      	mov	r3, r2
 8002b94:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b98:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	0f1b      	lsrs	r3, r3, #28
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8002ba6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002baa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002bb6:	e003      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bb8:	4b06      	ldr	r3, [pc, #24]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002bba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002bbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3798      	adds	r7, #152	@ 0x98
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	00f42400 	.word	0x00f42400
 8002bd8:	017d7840 	.word	0x017d7840

08002bdc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e28d      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 8083 	beq.w	8002d02 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bfc:	4b94      	ldr	r3, [pc, #592]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d019      	beq.n	8002c3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c08:	4b91      	ldr	r3, [pc, #580]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d106      	bne.n	8002c22 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c14:	4b8e      	ldr	r3, [pc, #568]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c20:	d00c      	beq.n	8002c3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c22:	4b8b      	ldr	r3, [pc, #556]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c2a:	2b0c      	cmp	r3, #12
 8002c2c:	d112      	bne.n	8002c54 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c2e:	4b88      	ldr	r3, [pc, #544]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c3a:	d10b      	bne.n	8002c54 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3c:	4b84      	ldr	r3, [pc, #528]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d05b      	beq.n	8002d00 <HAL_RCC_OscConfig+0x124>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d157      	bne.n	8002d00 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e25a      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c5c:	d106      	bne.n	8002c6c <HAL_RCC_OscConfig+0x90>
 8002c5e:	4b7c      	ldr	r3, [pc, #496]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a7b      	ldr	r2, [pc, #492]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e01d      	b.n	8002ca8 <HAL_RCC_OscConfig+0xcc>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCC_OscConfig+0xb4>
 8002c76:	4b76      	ldr	r3, [pc, #472]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a75      	ldr	r2, [pc, #468]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	4b73      	ldr	r3, [pc, #460]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a72      	ldr	r2, [pc, #456]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	e00b      	b.n	8002ca8 <HAL_RCC_OscConfig+0xcc>
 8002c90:	4b6f      	ldr	r3, [pc, #444]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a6e      	ldr	r2, [pc, #440]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	4b6c      	ldr	r3, [pc, #432]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a6b      	ldr	r2, [pc, #428]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002ca2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d013      	beq.n	8002cd8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fe70 	bl	8001994 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7fe fe6c 	bl	8001994 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	@ 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e21f      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cca:	4b61      	ldr	r3, [pc, #388]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0xdc>
 8002cd6:	e014      	b.n	8002d02 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd8:	f7fe fe5c 	bl	8001994 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce0:	f7fe fe58 	bl	8001994 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b64      	cmp	r3, #100	@ 0x64
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e20b      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf2:	4b57      	ldr	r3, [pc, #348]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x104>
 8002cfe:	e000      	b.n	8002d02 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d06f      	beq.n	8002dee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d0e:	4b50      	ldr	r3, [pc, #320]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d017      	beq.n	8002d4a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d1a:	4b4d      	ldr	r3, [pc, #308]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d105      	bne.n	8002d32 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d26:	4b4a      	ldr	r3, [pc, #296]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00b      	beq.n	8002d4a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d32:	4b47      	ldr	r3, [pc, #284]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d3a:	2b0c      	cmp	r3, #12
 8002d3c:	d11c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d3e:	4b44      	ldr	r3, [pc, #272]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d116      	bne.n	8002d78 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4a:	4b41      	ldr	r3, [pc, #260]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_RCC_OscConfig+0x186>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d001      	beq.n	8002d62 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e1d3      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d62:	4b3b      	ldr	r3, [pc, #236]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4937      	ldr	r1, [pc, #220]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d76:	e03a      	b.n	8002dee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d020      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d80:	4b34      	ldr	r3, [pc, #208]	@ (8002e54 <HAL_RCC_OscConfig+0x278>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d86:	f7fe fe05 	bl	8001994 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d8e:	f7fe fe01 	bl	8001994 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e1b4      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da0:	4b2b      	ldr	r3, [pc, #172]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dac:	4b28      	ldr	r3, [pc, #160]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4925      	ldr	r1, [pc, #148]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]
 8002dc0:	e015      	b.n	8002dee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dc2:	4b24      	ldr	r3, [pc, #144]	@ (8002e54 <HAL_RCC_OscConfig+0x278>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fde4 	bl	8001994 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd0:	f7fe fde0 	bl	8001994 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e193      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d036      	beq.n	8002e68 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d016      	beq.n	8002e30 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e02:	4b15      	ldr	r3, [pc, #84]	@ (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e08:	f7fe fdc4 	bl	8001994 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e10:	f7fe fdc0 	bl	8001994 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e173      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e22:	4b0b      	ldr	r3, [pc, #44]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0x234>
 8002e2e:	e01b      	b.n	8002e68 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e30:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e36:	f7fe fdad 	bl	8001994 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e3c:	e00e      	b.n	8002e5c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e3e:	f7fe fda9 	bl	8001994 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d907      	bls.n	8002e5c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e15c      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
 8002e50:	40023800 	.word	0x40023800
 8002e54:	42470000 	.word	0x42470000
 8002e58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5c:	4b8a      	ldr	r3, [pc, #552]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002e5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1ea      	bne.n	8002e3e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 8097 	beq.w	8002fa4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e76:	2300      	movs	r3, #0
 8002e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e7a:	4b83      	ldr	r3, [pc, #524]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10f      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	4b7f      	ldr	r3, [pc, #508]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	4a7e      	ldr	r2, [pc, #504]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e96:	4b7c      	ldr	r3, [pc, #496]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea6:	4b79      	ldr	r3, [pc, #484]	@ (800308c <HAL_RCC_OscConfig+0x4b0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d118      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eb2:	4b76      	ldr	r3, [pc, #472]	@ (800308c <HAL_RCC_OscConfig+0x4b0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a75      	ldr	r2, [pc, #468]	@ (800308c <HAL_RCC_OscConfig+0x4b0>)
 8002eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ebe:	f7fe fd69 	bl	8001994 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec6:	f7fe fd65 	bl	8001994 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e118      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed8:	4b6c      	ldr	r3, [pc, #432]	@ (800308c <HAL_RCC_OscConfig+0x4b0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d106      	bne.n	8002efa <HAL_RCC_OscConfig+0x31e>
 8002eec:	4b66      	ldr	r3, [pc, #408]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef0:	4a65      	ldr	r2, [pc, #404]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ef8:	e01c      	b.n	8002f34 <HAL_RCC_OscConfig+0x358>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b05      	cmp	r3, #5
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCC_OscConfig+0x340>
 8002f02:	4b61      	ldr	r3, [pc, #388]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f06:	4a60      	ldr	r2, [pc, #384]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f08:	f043 0304 	orr.w	r3, r3, #4
 8002f0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f0e:	4b5e      	ldr	r3, [pc, #376]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f12:	4a5d      	ldr	r2, [pc, #372]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f1a:	e00b      	b.n	8002f34 <HAL_RCC_OscConfig+0x358>
 8002f1c:	4b5a      	ldr	r3, [pc, #360]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f20:	4a59      	ldr	r2, [pc, #356]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f28:	4b57      	ldr	r3, [pc, #348]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2c:	4a56      	ldr	r2, [pc, #344]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f2e:	f023 0304 	bic.w	r3, r3, #4
 8002f32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d015      	beq.n	8002f68 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3c:	f7fe fd2a 	bl	8001994 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f42:	e00a      	b.n	8002f5a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f44:	f7fe fd26 	bl	8001994 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e0d7      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5a:	4b4b      	ldr	r3, [pc, #300]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0ee      	beq.n	8002f44 <HAL_RCC_OscConfig+0x368>
 8002f66:	e014      	b.n	8002f92 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f68:	f7fe fd14 	bl	8001994 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f6e:	e00a      	b.n	8002f86 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f70:	f7fe fd10 	bl	8001994 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e0c1      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f86:	4b40      	ldr	r3, [pc, #256]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1ee      	bne.n	8002f70 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f92:	7dfb      	ldrb	r3, [r7, #23]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d105      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f98:	4b3b      	ldr	r3, [pc, #236]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9c:	4a3a      	ldr	r2, [pc, #232]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002f9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fa2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 80ad 	beq.w	8003108 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fae:	4b36      	ldr	r3, [pc, #216]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d060      	beq.n	800307c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d145      	bne.n	800304e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc2:	4b33      	ldr	r3, [pc, #204]	@ (8003090 <HAL_RCC_OscConfig+0x4b4>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fce4 	bl	8001994 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7fe fce0 	bl	8001994 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e093      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe2:	4b29      	ldr	r3, [pc, #164]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69da      	ldr	r2, [r3, #28]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	019b      	lsls	r3, r3, #6
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003004:	085b      	lsrs	r3, r3, #1
 8003006:	3b01      	subs	r3, #1
 8003008:	041b      	lsls	r3, r3, #16
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003010:	061b      	lsls	r3, r3, #24
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003018:	071b      	lsls	r3, r3, #28
 800301a:	491b      	ldr	r1, [pc, #108]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003020:	4b1b      	ldr	r3, [pc, #108]	@ (8003090 <HAL_RCC_OscConfig+0x4b4>)
 8003022:	2201      	movs	r2, #1
 8003024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003026:	f7fe fcb5 	bl	8001994 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302e:	f7fe fcb1 	bl	8001994 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e064      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003040:	4b11      	ldr	r3, [pc, #68]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x452>
 800304c:	e05c      	b.n	8003108 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304e:	4b10      	ldr	r3, [pc, #64]	@ (8003090 <HAL_RCC_OscConfig+0x4b4>)
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fe fc9e 	bl	8001994 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305c:	f7fe fc9a 	bl	8001994 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e04d      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	4b06      	ldr	r3, [pc, #24]	@ (8003088 <HAL_RCC_OscConfig+0x4ac>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x480>
 800307a:	e045      	b.n	8003108 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d107      	bne.n	8003094 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e040      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
 8003088:	40023800 	.word	0x40023800
 800308c:	40007000 	.word	0x40007000
 8003090:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003094:	4b1f      	ldr	r3, [pc, #124]	@ (8003114 <HAL_RCC_OscConfig+0x538>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d030      	beq.n	8003104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d129      	bne.n	8003104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d122      	bne.n	8003104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030c4:	4013      	ands	r3, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d119      	bne.n	8003104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030da:	085b      	lsrs	r3, r3, #1
 80030dc:	3b01      	subs	r3, #1
 80030de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d10f      	bne.n	8003104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d107      	bne.n	8003104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003100:	429a      	cmp	r2, r3
 8003102:	d001      	beq.n	8003108 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40023800 	.word	0x40023800

08003118 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e042      	b.n	80031b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fe fa7a 	bl	8001638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2224      	movs	r2, #36	@ 0x24
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800315a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fb83 	bl	8003868 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003170:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695a      	ldr	r2, [r3, #20]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003180:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003190:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	@ 0x28
 80031bc:	af02      	add	r7, sp, #8
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	d175      	bne.n	80032c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <HAL_UART_Transmit+0x2c>
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e06e      	b.n	80032c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2221      	movs	r2, #33	@ 0x21
 80031f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031f6:	f7fe fbcd 	bl	8001994 <HAL_GetTick>
 80031fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	88fa      	ldrh	r2, [r7, #6]
 8003200:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	88fa      	ldrh	r2, [r7, #6]
 8003206:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003210:	d108      	bne.n	8003224 <HAL_UART_Transmit+0x6c>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d104      	bne.n	8003224 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800321a:	2300      	movs	r3, #0
 800321c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	e003      	b.n	800322c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003228:	2300      	movs	r3, #0
 800322a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800322c:	e02e      	b.n	800328c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2200      	movs	r2, #0
 8003236:	2180      	movs	r1, #128	@ 0x80
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f995 	bl	8003568 <UART_WaitOnFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e03a      	b.n	80032c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10b      	bne.n	800326e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003264:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	3302      	adds	r3, #2
 800326a:	61bb      	str	r3, [r7, #24]
 800326c:	e007      	b.n	800327e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	781a      	ldrb	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	3301      	adds	r3, #1
 800327c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1cb      	bne.n	800322e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2200      	movs	r2, #0
 800329e:	2140      	movs	r1, #64	@ 0x40
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f961 	bl	8003568 <UART_WaitOnFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e006      	b.n	80032c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	e000      	b.n	80032c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80032c4:	2302      	movs	r3, #2
  }
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3720      	adds	r7, #32
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	4613      	mov	r3, r2
 80032da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	d112      	bne.n	800330e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_UART_Receive_DMA+0x26>
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e00b      	b.n	8003310 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	461a      	mov	r2, r3
 8003302:	68b9      	ldr	r1, [r7, #8]
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f989 	bl	800361c <UART_Start_Receive_DMA>
 800330a:	4603      	mov	r3, r0
 800330c:	e000      	b.n	8003310 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800330e:	2302      	movs	r3, #2
  }
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b09c      	sub	sp, #112	@ 0x70
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003378:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	d172      	bne.n	800346e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003388:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800338a:	2200      	movs	r2, #0
 800338c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800338e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	330c      	adds	r3, #12
 8003394:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003396:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003398:	e853 3f00 	ldrex	r3, [r3]
 800339c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800339e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	330c      	adds	r3, #12
 80033ac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80033ae:	65ba      	str	r2, [r7, #88]	@ 0x58
 80033b0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033b6:	e841 2300 	strex	r3, r2, [r1]
 80033ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1e5      	bne.n	800338e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3314      	adds	r3, #20
 80033c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033cc:	e853 3f00 	ldrex	r3, [r3]
 80033d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033d4:	f023 0301 	bic.w	r3, r3, #1
 80033d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80033da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3314      	adds	r3, #20
 80033e0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80033e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80033e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033ea:	e841 2300 	strex	r3, r2, [r1]
 80033ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1e5      	bne.n	80033c2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	3314      	adds	r3, #20
 80033fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003400:	e853 3f00 	ldrex	r3, [r3]
 8003404:	623b      	str	r3, [r7, #32]
   return(result);
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800340c:	663b      	str	r3, [r7, #96]	@ 0x60
 800340e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	3314      	adds	r3, #20
 8003414:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003416:	633a      	str	r2, [r7, #48]	@ 0x30
 8003418:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800341c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800341e:	e841 2300 	strex	r3, r2, [r1]
 8003422:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1e5      	bne.n	80033f6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800342a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800342c:	2220      	movs	r2, #32
 800342e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003432:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003436:	2b01      	cmp	r3, #1
 8003438:	d119      	bne.n	800346e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800343a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	330c      	adds	r3, #12
 8003440:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	e853 3f00 	ldrex	r3, [r3]
 8003448:	60fb      	str	r3, [r7, #12]
   return(result);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f023 0310 	bic.w	r3, r3, #16
 8003450:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003452:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	330c      	adds	r3, #12
 8003458:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800345a:	61fa      	str	r2, [r7, #28]
 800345c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345e:	69b9      	ldr	r1, [r7, #24]
 8003460:	69fa      	ldr	r2, [r7, #28]
 8003462:	e841 2300 	strex	r3, r2, [r1]
 8003466:	617b      	str	r3, [r7, #20]
   return(result);
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1e5      	bne.n	800343a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800346e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003470:	2200      	movs	r2, #0
 8003472:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003474:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003478:	2b01      	cmp	r3, #1
 800347a:	d106      	bne.n	800348a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800347c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800347e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003480:	4619      	mov	r1, r3
 8003482:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003484:	f7ff ff66 	bl	8003354 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003488:	e002      	b.n	8003490 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800348a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800348c:	f7ff ff44 	bl	8003318 <HAL_UART_RxCpltCallback>
}
 8003490:	bf00      	nop
 8003492:	3770      	adds	r7, #112	@ 0x70
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d108      	bne.n	80034c6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034b8:	085b      	lsrs	r3, r3, #1
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	4619      	mov	r1, r3
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f7ff ff48 	bl	8003354 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034c4:	e002      	b.n	80034cc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f7ff ff30 	bl	800332c <HAL_UART_RxHalfCpltCallback>
}
 80034cc:	bf00      	nop
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f0:	2b80      	cmp	r3, #128	@ 0x80
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b21      	cmp	r3, #33	@ 0x21
 8003506:	d108      	bne.n	800351a <UART_DMAError+0x46>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2200      	movs	r2, #0
 8003512:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003514:	68b8      	ldr	r0, [r7, #8]
 8003516:	f000 f91b 	bl	8003750 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003524:	2b40      	cmp	r3, #64	@ 0x40
 8003526:	bf0c      	ite	eq
 8003528:	2301      	moveq	r3, #1
 800352a:	2300      	movne	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b22      	cmp	r3, #34	@ 0x22
 800353a:	d108      	bne.n	800354e <UART_DMAError+0x7a>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2200      	movs	r2, #0
 8003546:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003548:	68b8      	ldr	r0, [r7, #8]
 800354a:	f000 f929 	bl	80037a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003552:	f043 0210 	orr.w	r2, r3, #16
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800355a:	68b8      	ldr	r0, [r7, #8]
 800355c:	f7ff fef0 	bl	8003340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	603b      	str	r3, [r7, #0]
 8003574:	4613      	mov	r3, r2
 8003576:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003578:	e03b      	b.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003580:	d037      	beq.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003582:	f7fe fa07 	bl	8001994 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	6a3a      	ldr	r2, [r7, #32]
 800358e:	429a      	cmp	r2, r3
 8003590:	d302      	bcc.n	8003598 <UART_WaitOnFlagUntilTimeout+0x30>
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e03a      	b.n	8003612 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d023      	beq.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b80      	cmp	r3, #128	@ 0x80
 80035ae:	d020      	beq.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b40      	cmp	r3, #64	@ 0x40
 80035b4:	d01d      	beq.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d116      	bne.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f8e0 	bl	80037a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2208      	movs	r2, #8
 80035e4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e00f      	b.n	8003612 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4013      	ands	r3, r2
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	429a      	cmp	r2, r3
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	429a      	cmp	r2, r3
 800360e:	d0b4      	beq.n	800357a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b098      	sub	sp, #96	@ 0x60
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	4613      	mov	r3, r2
 8003628:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	88fa      	ldrh	r2, [r7, #6]
 8003634:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2222      	movs	r2, #34	@ 0x22
 8003640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003648:	4a3e      	ldr	r2, [pc, #248]	@ (8003744 <UART_Start_Receive_DMA+0x128>)
 800364a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003650:	4a3d      	ldr	r2, [pc, #244]	@ (8003748 <UART_Start_Receive_DMA+0x12c>)
 8003652:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003658:	4a3c      	ldr	r2, [pc, #240]	@ (800374c <UART_Start_Receive_DMA+0x130>)
 800365a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003660:	2200      	movs	r2, #0
 8003662:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003664:	f107 0308 	add.w	r3, r7, #8
 8003668:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	3304      	adds	r3, #4
 8003674:	4619      	mov	r1, r3
 8003676:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	f7fe fb7a 	bl	8001d74 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003680:	2300      	movs	r3, #0
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d019      	beq.n	80036d2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	330c      	adds	r3, #12
 80036a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036a8:	e853 3f00 	ldrex	r3, [r3]
 80036ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	330c      	adds	r3, #12
 80036bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036be:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80036c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80036c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036c6:	e841 2300 	strex	r3, r2, [r1]
 80036ca:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80036cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1e5      	bne.n	800369e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3314      	adds	r3, #20
 80036d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3314      	adds	r3, #20
 80036f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80036f2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80036f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80036f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036fa:	e841 2300 	strex	r3, r2, [r1]
 80036fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1e5      	bne.n	80036d2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3314      	adds	r3, #20
 800370c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	e853 3f00 	ldrex	r3, [r3]
 8003714:	617b      	str	r3, [r7, #20]
   return(result);
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800371c:	653b      	str	r3, [r7, #80]	@ 0x50
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3314      	adds	r3, #20
 8003724:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003726:	627a      	str	r2, [r7, #36]	@ 0x24
 8003728:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372a:	6a39      	ldr	r1, [r7, #32]
 800372c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800372e:	e841 2300 	strex	r3, r2, [r1]
 8003732:	61fb      	str	r3, [r7, #28]
   return(result);
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1e5      	bne.n	8003706 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3760      	adds	r7, #96	@ 0x60
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	0800336d 	.word	0x0800336d
 8003748:	08003499 	.word	0x08003499
 800374c:	080034d5 	.word	0x080034d5

08003750 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003750:	b480      	push	{r7}
 8003752:	b089      	sub	sp, #36	@ 0x24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	e853 3f00 	ldrex	r3, [r3]
 8003766:	60bb      	str	r3, [r7, #8]
   return(result);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800376e:	61fb      	str	r3, [r7, #28]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	330c      	adds	r3, #12
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	61ba      	str	r2, [r7, #24]
 800377a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377c:	6979      	ldr	r1, [r7, #20]
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	e841 2300 	strex	r3, r2, [r1]
 8003784:	613b      	str	r3, [r7, #16]
   return(result);
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1e5      	bne.n	8003758 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003794:	bf00      	nop
 8003796:	3724      	adds	r7, #36	@ 0x24
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b095      	sub	sp, #84	@ 0x54
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	330c      	adds	r3, #12
 80037ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037b2:	e853 3f00 	ldrex	r3, [r3]
 80037b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	330c      	adds	r3, #12
 80037c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80037ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037d0:	e841 2300 	strex	r3, r2, [r1]
 80037d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1e5      	bne.n	80037a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3314      	adds	r3, #20
 80037e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	e853 3f00 	ldrex	r3, [r3]
 80037ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3314      	adds	r3, #20
 80037fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003800:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003802:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003804:	e841 2300 	strex	r3, r2, [r1]
 8003808:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800380a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1e5      	bne.n	80037dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003814:	2b01      	cmp	r3, #1
 8003816:	d119      	bne.n	800384c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	330c      	adds	r3, #12
 800381e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	e853 3f00 	ldrex	r3, [r3]
 8003826:	60bb      	str	r3, [r7, #8]
   return(result);
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f023 0310 	bic.w	r3, r3, #16
 800382e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	330c      	adds	r3, #12
 8003836:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003838:	61ba      	str	r2, [r7, #24]
 800383a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383c:	6979      	ldr	r1, [r7, #20]
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	e841 2300 	strex	r3, r2, [r1]
 8003844:	613b      	str	r3, [r7, #16]
   return(result);
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1e5      	bne.n	8003818 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800385a:	bf00      	nop
 800385c:	3754      	adds	r7, #84	@ 0x54
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
	...

08003868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800386c:	b0c0      	sub	sp, #256	@ 0x100
 800386e:	af00      	add	r7, sp, #0
 8003870:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003884:	68d9      	ldr	r1, [r3, #12]
 8003886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	ea40 0301 	orr.w	r3, r0, r1
 8003890:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	431a      	orrs	r2, r3
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80038c0:	f021 010c 	bic.w	r1, r1, #12
 80038c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80038ce:	430b      	orrs	r3, r1
 80038d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80038de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e2:	6999      	ldr	r1, [r3, #24]
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	ea40 0301 	orr.w	r3, r0, r1
 80038ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4b8f      	ldr	r3, [pc, #572]	@ (8003b34 <UART_SetConfig+0x2cc>)
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d005      	beq.n	8003908 <UART_SetConfig+0xa0>
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	4b8d      	ldr	r3, [pc, #564]	@ (8003b38 <UART_SetConfig+0x2d0>)
 8003904:	429a      	cmp	r2, r3
 8003906:	d104      	bne.n	8003912 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003908:	f7fe ffaa 	bl	8002860 <HAL_RCC_GetPCLK2Freq>
 800390c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003910:	e003      	b.n	800391a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003912:	f7fe ff91 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 8003916:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800391a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003924:	f040 810c 	bne.w	8003b40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800392c:	2200      	movs	r2, #0
 800392e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003932:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003936:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800393a:	4622      	mov	r2, r4
 800393c:	462b      	mov	r3, r5
 800393e:	1891      	adds	r1, r2, r2
 8003940:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003942:	415b      	adcs	r3, r3
 8003944:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003946:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800394a:	4621      	mov	r1, r4
 800394c:	eb12 0801 	adds.w	r8, r2, r1
 8003950:	4629      	mov	r1, r5
 8003952:	eb43 0901 	adc.w	r9, r3, r1
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800396a:	4690      	mov	r8, r2
 800396c:	4699      	mov	r9, r3
 800396e:	4623      	mov	r3, r4
 8003970:	eb18 0303 	adds.w	r3, r8, r3
 8003974:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003978:	462b      	mov	r3, r5
 800397a:	eb49 0303 	adc.w	r3, r9, r3
 800397e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800398e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003992:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003996:	460b      	mov	r3, r1
 8003998:	18db      	adds	r3, r3, r3
 800399a:	653b      	str	r3, [r7, #80]	@ 0x50
 800399c:	4613      	mov	r3, r2
 800399e:	eb42 0303 	adc.w	r3, r2, r3
 80039a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80039a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80039a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80039ac:	f7fd f86a 	bl	8000a84 <__aeabi_uldivmod>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4b61      	ldr	r3, [pc, #388]	@ (8003b3c <UART_SetConfig+0x2d4>)
 80039b6:	fba3 2302 	umull	r2, r3, r3, r2
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	011c      	lsls	r4, r3, #4
 80039be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80039cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80039d0:	4642      	mov	r2, r8
 80039d2:	464b      	mov	r3, r9
 80039d4:	1891      	adds	r1, r2, r2
 80039d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80039d8:	415b      	adcs	r3, r3
 80039da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80039e0:	4641      	mov	r1, r8
 80039e2:	eb12 0a01 	adds.w	sl, r2, r1
 80039e6:	4649      	mov	r1, r9
 80039e8:	eb43 0b01 	adc.w	fp, r3, r1
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a00:	4692      	mov	sl, r2
 8003a02:	469b      	mov	fp, r3
 8003a04:	4643      	mov	r3, r8
 8003a06:	eb1a 0303 	adds.w	r3, sl, r3
 8003a0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a0e:	464b      	mov	r3, r9
 8003a10:	eb4b 0303 	adc.w	r3, fp, r3
 8003a14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a24:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003a28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	18db      	adds	r3, r3, r3
 8003a30:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a32:	4613      	mov	r3, r2
 8003a34:	eb42 0303 	adc.w	r3, r2, r3
 8003a38:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003a3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003a42:	f7fd f81f 	bl	8000a84 <__aeabi_uldivmod>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b3c <UART_SetConfig+0x2d4>)
 8003a4e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	2264      	movs	r2, #100	@ 0x64
 8003a56:	fb02 f303 	mul.w	r3, r2, r3
 8003a5a:	1acb      	subs	r3, r1, r3
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003a62:	4b36      	ldr	r3, [pc, #216]	@ (8003b3c <UART_SetConfig+0x2d4>)
 8003a64:	fba3 2302 	umull	r2, r3, r3, r2
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003a70:	441c      	add	r4, r3
 8003a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a7c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003a84:	4642      	mov	r2, r8
 8003a86:	464b      	mov	r3, r9
 8003a88:	1891      	adds	r1, r2, r2
 8003a8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a8c:	415b      	adcs	r3, r3
 8003a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a94:	4641      	mov	r1, r8
 8003a96:	1851      	adds	r1, r2, r1
 8003a98:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a9a:	4649      	mov	r1, r9
 8003a9c:	414b      	adcs	r3, r1
 8003a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003aac:	4659      	mov	r1, fp
 8003aae:	00cb      	lsls	r3, r1, #3
 8003ab0:	4651      	mov	r1, sl
 8003ab2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ab6:	4651      	mov	r1, sl
 8003ab8:	00ca      	lsls	r2, r1, #3
 8003aba:	4610      	mov	r0, r2
 8003abc:	4619      	mov	r1, r3
 8003abe:	4603      	mov	r3, r0
 8003ac0:	4642      	mov	r2, r8
 8003ac2:	189b      	adds	r3, r3, r2
 8003ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ac8:	464b      	mov	r3, r9
 8003aca:	460a      	mov	r2, r1
 8003acc:	eb42 0303 	adc.w	r3, r2, r3
 8003ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ae0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ae4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ae8:	460b      	mov	r3, r1
 8003aea:	18db      	adds	r3, r3, r3
 8003aec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aee:	4613      	mov	r3, r2
 8003af0:	eb42 0303 	adc.w	r3, r2, r3
 8003af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003af6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003afa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003afe:	f7fc ffc1 	bl	8000a84 <__aeabi_uldivmod>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4b0d      	ldr	r3, [pc, #52]	@ (8003b3c <UART_SetConfig+0x2d4>)
 8003b08:	fba3 1302 	umull	r1, r3, r3, r2
 8003b0c:	095b      	lsrs	r3, r3, #5
 8003b0e:	2164      	movs	r1, #100	@ 0x64
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	3332      	adds	r3, #50	@ 0x32
 8003b1a:	4a08      	ldr	r2, [pc, #32]	@ (8003b3c <UART_SetConfig+0x2d4>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	f003 0207 	and.w	r2, r3, #7
 8003b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4422      	add	r2, r4
 8003b2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b30:	e106      	b.n	8003d40 <UART_SetConfig+0x4d8>
 8003b32:	bf00      	nop
 8003b34:	40011000 	.word	0x40011000
 8003b38:	40011400 	.word	0x40011400
 8003b3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b44:	2200      	movs	r2, #0
 8003b46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b4a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003b4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003b52:	4642      	mov	r2, r8
 8003b54:	464b      	mov	r3, r9
 8003b56:	1891      	adds	r1, r2, r2
 8003b58:	6239      	str	r1, [r7, #32]
 8003b5a:	415b      	adcs	r3, r3
 8003b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b62:	4641      	mov	r1, r8
 8003b64:	1854      	adds	r4, r2, r1
 8003b66:	4649      	mov	r1, r9
 8003b68:	eb43 0501 	adc.w	r5, r3, r1
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	00eb      	lsls	r3, r5, #3
 8003b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b7a:	00e2      	lsls	r2, r4, #3
 8003b7c:	4614      	mov	r4, r2
 8003b7e:	461d      	mov	r5, r3
 8003b80:	4643      	mov	r3, r8
 8003b82:	18e3      	adds	r3, r4, r3
 8003b84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b88:	464b      	mov	r3, r9
 8003b8a:	eb45 0303 	adc.w	r3, r5, r3
 8003b8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003bae:	4629      	mov	r1, r5
 8003bb0:	008b      	lsls	r3, r1, #2
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bb8:	4621      	mov	r1, r4
 8003bba:	008a      	lsls	r2, r1, #2
 8003bbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003bc0:	f7fc ff60 	bl	8000a84 <__aeabi_uldivmod>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4b60      	ldr	r3, [pc, #384]	@ (8003d4c <UART_SetConfig+0x4e4>)
 8003bca:	fba3 2302 	umull	r2, r3, r3, r2
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	011c      	lsls	r4, r3, #4
 8003bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003bdc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003be0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003be4:	4642      	mov	r2, r8
 8003be6:	464b      	mov	r3, r9
 8003be8:	1891      	adds	r1, r2, r2
 8003bea:	61b9      	str	r1, [r7, #24]
 8003bec:	415b      	adcs	r3, r3
 8003bee:	61fb      	str	r3, [r7, #28]
 8003bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bf4:	4641      	mov	r1, r8
 8003bf6:	1851      	adds	r1, r2, r1
 8003bf8:	6139      	str	r1, [r7, #16]
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	414b      	adcs	r3, r1
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c0c:	4659      	mov	r1, fp
 8003c0e:	00cb      	lsls	r3, r1, #3
 8003c10:	4651      	mov	r1, sl
 8003c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c16:	4651      	mov	r1, sl
 8003c18:	00ca      	lsls	r2, r1, #3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4603      	mov	r3, r0
 8003c20:	4642      	mov	r2, r8
 8003c22:	189b      	adds	r3, r3, r2
 8003c24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c28:	464b      	mov	r3, r9
 8003c2a:	460a      	mov	r2, r1
 8003c2c:	eb42 0303 	adc.w	r3, r2, r3
 8003c30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003c4c:	4649      	mov	r1, r9
 8003c4e:	008b      	lsls	r3, r1, #2
 8003c50:	4641      	mov	r1, r8
 8003c52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c56:	4641      	mov	r1, r8
 8003c58:	008a      	lsls	r2, r1, #2
 8003c5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003c5e:	f7fc ff11 	bl	8000a84 <__aeabi_uldivmod>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4611      	mov	r1, r2
 8003c68:	4b38      	ldr	r3, [pc, #224]	@ (8003d4c <UART_SetConfig+0x4e4>)
 8003c6a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	2264      	movs	r2, #100	@ 0x64
 8003c72:	fb02 f303 	mul.w	r3, r2, r3
 8003c76:	1acb      	subs	r3, r1, r3
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	3332      	adds	r3, #50	@ 0x32
 8003c7c:	4a33      	ldr	r2, [pc, #204]	@ (8003d4c <UART_SetConfig+0x4e4>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c88:	441c      	add	r4, r3
 8003c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c8e:	2200      	movs	r2, #0
 8003c90:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c92:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c98:	4642      	mov	r2, r8
 8003c9a:	464b      	mov	r3, r9
 8003c9c:	1891      	adds	r1, r2, r2
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	415b      	adcs	r3, r3
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ca8:	4641      	mov	r1, r8
 8003caa:	1851      	adds	r1, r2, r1
 8003cac:	6039      	str	r1, [r7, #0]
 8003cae:	4649      	mov	r1, r9
 8003cb0:	414b      	adcs	r3, r1
 8003cb2:	607b      	str	r3, [r7, #4]
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cc0:	4659      	mov	r1, fp
 8003cc2:	00cb      	lsls	r3, r1, #3
 8003cc4:	4651      	mov	r1, sl
 8003cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cca:	4651      	mov	r1, sl
 8003ccc:	00ca      	lsls	r2, r1, #3
 8003cce:	4610      	mov	r0, r2
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	4642      	mov	r2, r8
 8003cd6:	189b      	adds	r3, r3, r2
 8003cd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cda:	464b      	mov	r3, r9
 8003cdc:	460a      	mov	r2, r1
 8003cde:	eb42 0303 	adc.w	r3, r2, r3
 8003ce2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	663b      	str	r3, [r7, #96]	@ 0x60
 8003cee:	667a      	str	r2, [r7, #100]	@ 0x64
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003cfc:	4649      	mov	r1, r9
 8003cfe:	008b      	lsls	r3, r1, #2
 8003d00:	4641      	mov	r1, r8
 8003d02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d06:	4641      	mov	r1, r8
 8003d08:	008a      	lsls	r2, r1, #2
 8003d0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003d0e:	f7fc feb9 	bl	8000a84 <__aeabi_uldivmod>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <UART_SetConfig+0x4e4>)
 8003d18:	fba3 1302 	umull	r1, r3, r3, r2
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	2164      	movs	r1, #100	@ 0x64
 8003d20:	fb01 f303 	mul.w	r3, r1, r3
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	3332      	adds	r3, #50	@ 0x32
 8003d2a:	4a08      	ldr	r2, [pc, #32]	@ (8003d4c <UART_SetConfig+0x4e4>)
 8003d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d30:	095b      	lsrs	r3, r3, #5
 8003d32:	f003 020f 	and.w	r2, r3, #15
 8003d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4422      	add	r2, r4
 8003d3e:	609a      	str	r2, [r3, #8]
}
 8003d40:	bf00      	nop
 8003d42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003d46:	46bd      	mov	sp, r7
 8003d48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d4c:	51eb851f 	.word	0x51eb851f

08003d50 <memset>:
 8003d50:	4402      	add	r2, r0
 8003d52:	4603      	mov	r3, r0
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d100      	bne.n	8003d5a <memset+0xa>
 8003d58:	4770      	bx	lr
 8003d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d5e:	e7f9      	b.n	8003d54 <memset+0x4>

08003d60 <__libc_init_array>:
 8003d60:	b570      	push	{r4, r5, r6, lr}
 8003d62:	4d0d      	ldr	r5, [pc, #52]	@ (8003d98 <__libc_init_array+0x38>)
 8003d64:	4c0d      	ldr	r4, [pc, #52]	@ (8003d9c <__libc_init_array+0x3c>)
 8003d66:	1b64      	subs	r4, r4, r5
 8003d68:	10a4      	asrs	r4, r4, #2
 8003d6a:	2600      	movs	r6, #0
 8003d6c:	42a6      	cmp	r6, r4
 8003d6e:	d109      	bne.n	8003d84 <__libc_init_array+0x24>
 8003d70:	4d0b      	ldr	r5, [pc, #44]	@ (8003da0 <__libc_init_array+0x40>)
 8003d72:	4c0c      	ldr	r4, [pc, #48]	@ (8003da4 <__libc_init_array+0x44>)
 8003d74:	f000 f818 	bl	8003da8 <_init>
 8003d78:	1b64      	subs	r4, r4, r5
 8003d7a:	10a4      	asrs	r4, r4, #2
 8003d7c:	2600      	movs	r6, #0
 8003d7e:	42a6      	cmp	r6, r4
 8003d80:	d105      	bne.n	8003d8e <__libc_init_array+0x2e>
 8003d82:	bd70      	pop	{r4, r5, r6, pc}
 8003d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d88:	4798      	blx	r3
 8003d8a:	3601      	adds	r6, #1
 8003d8c:	e7ee      	b.n	8003d6c <__libc_init_array+0xc>
 8003d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d92:	4798      	blx	r3
 8003d94:	3601      	adds	r6, #1
 8003d96:	e7f2      	b.n	8003d7e <__libc_init_array+0x1e>
 8003d98:	08003de8 	.word	0x08003de8
 8003d9c:	08003de8 	.word	0x08003de8
 8003da0:	08003de8 	.word	0x08003de8
 8003da4:	08003dec 	.word	0x08003dec

08003da8 <_init>:
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	bf00      	nop
 8003dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dae:	bc08      	pop	{r3}
 8003db0:	469e      	mov	lr, r3
 8003db2:	4770      	bx	lr

08003db4 <_fini>:
 8003db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db6:	bf00      	nop
 8003db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dba:	bc08      	pop	{r3}
 8003dbc:	469e      	mov	lr, r3
 8003dbe:	4770      	bx	lr
