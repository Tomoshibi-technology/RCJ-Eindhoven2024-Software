
rgbled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d54  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08004f1c  08004f1c  00005f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005304  08005304  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005304  08005304  00006304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800530c  0800530c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800530c  0800530c  0000630c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005314  08005314  00006314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005318  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e44  2000000c  08005324  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e50  08005324  00007e50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5e7  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002080  00000000  00000000  00013623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  000156a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000893  00000000  00000000  000161c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024210  00000000  00000000  00016a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da80  00000000  00000000  0003ac6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1727  00000000  00000000  000486eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119e12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000305c  00000000  00000000  00119e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0011ceb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004f04 	.word	0x08004f04

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004f04 	.word	0x08004f04

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a58:	f000 b96a 	b.w	8000d30 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	460c      	mov	r4, r1
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d14e      	bne.n	8000b1e <__udivmoddi4+0xaa>
 8000a80:	4694      	mov	ip, r2
 8000a82:	458c      	cmp	ip, r1
 8000a84:	4686      	mov	lr, r0
 8000a86:	fab2 f282 	clz	r2, r2
 8000a8a:	d962      	bls.n	8000b52 <__udivmoddi4+0xde>
 8000a8c:	b14a      	cbz	r2, 8000aa2 <__udivmoddi4+0x2e>
 8000a8e:	f1c2 0320 	rsb	r3, r2, #32
 8000a92:	4091      	lsls	r1, r2
 8000a94:	fa20 f303 	lsr.w	r3, r0, r3
 8000a98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a9c:	4319      	orrs	r1, r3
 8000a9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aa2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aa6:	fa1f f68c 	uxth.w	r6, ip
 8000aaa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000aae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ab2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ab6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aba:	fb04 f106 	mul.w	r1, r4, r6
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x64>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000aca:	f080 8112 	bcs.w	8000cf2 <__udivmoddi4+0x27e>
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	f240 810f 	bls.w	8000cf2 <__udivmoddi4+0x27e>
 8000ad4:	3c02      	subs	r4, #2
 8000ad6:	4463      	add	r3, ip
 8000ad8:	1a59      	subs	r1, r3, r1
 8000ada:	fa1f f38e 	uxth.w	r3, lr
 8000ade:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ae2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ae6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aea:	fb00 f606 	mul.w	r6, r0, r6
 8000aee:	429e      	cmp	r6, r3
 8000af0:	d90a      	bls.n	8000b08 <__udivmoddi4+0x94>
 8000af2:	eb1c 0303 	adds.w	r3, ip, r3
 8000af6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000afa:	f080 80fc 	bcs.w	8000cf6 <__udivmoddi4+0x282>
 8000afe:	429e      	cmp	r6, r3
 8000b00:	f240 80f9 	bls.w	8000cf6 <__udivmoddi4+0x282>
 8000b04:	4463      	add	r3, ip
 8000b06:	3802      	subs	r0, #2
 8000b08:	1b9b      	subs	r3, r3, r6
 8000b0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b0e:	2100      	movs	r1, #0
 8000b10:	b11d      	cbz	r5, 8000b1a <__udivmoddi4+0xa6>
 8000b12:	40d3      	lsrs	r3, r2
 8000b14:	2200      	movs	r2, #0
 8000b16:	e9c5 3200 	strd	r3, r2, [r5]
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d905      	bls.n	8000b2e <__udivmoddi4+0xba>
 8000b22:	b10d      	cbz	r5, 8000b28 <__udivmoddi4+0xb4>
 8000b24:	e9c5 0100 	strd	r0, r1, [r5]
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4608      	mov	r0, r1
 8000b2c:	e7f5      	b.n	8000b1a <__udivmoddi4+0xa6>
 8000b2e:	fab3 f183 	clz	r1, r3
 8000b32:	2900      	cmp	r1, #0
 8000b34:	d146      	bne.n	8000bc4 <__udivmoddi4+0x150>
 8000b36:	42a3      	cmp	r3, r4
 8000b38:	d302      	bcc.n	8000b40 <__udivmoddi4+0xcc>
 8000b3a:	4290      	cmp	r0, r2
 8000b3c:	f0c0 80f0 	bcc.w	8000d20 <__udivmoddi4+0x2ac>
 8000b40:	1a86      	subs	r6, r0, r2
 8000b42:	eb64 0303 	sbc.w	r3, r4, r3
 8000b46:	2001      	movs	r0, #1
 8000b48:	2d00      	cmp	r5, #0
 8000b4a:	d0e6      	beq.n	8000b1a <__udivmoddi4+0xa6>
 8000b4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b50:	e7e3      	b.n	8000b1a <__udivmoddi4+0xa6>
 8000b52:	2a00      	cmp	r2, #0
 8000b54:	f040 8090 	bne.w	8000c78 <__udivmoddi4+0x204>
 8000b58:	eba1 040c 	sub.w	r4, r1, ip
 8000b5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b60:	fa1f f78c 	uxth.w	r7, ip
 8000b64:	2101      	movs	r1, #1
 8000b66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b76:	fb07 f006 	mul.w	r0, r7, r6
 8000b7a:	4298      	cmp	r0, r3
 8000b7c:	d908      	bls.n	8000b90 <__udivmoddi4+0x11c>
 8000b7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0x11a>
 8000b88:	4298      	cmp	r0, r3
 8000b8a:	f200 80cd 	bhi.w	8000d28 <__udivmoddi4+0x2b4>
 8000b8e:	4626      	mov	r6, r4
 8000b90:	1a1c      	subs	r4, r3, r0
 8000b92:	fa1f f38e 	uxth.w	r3, lr
 8000b96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ba2:	fb00 f707 	mul.w	r7, r0, r7
 8000ba6:	429f      	cmp	r7, r3
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x148>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bb2:	d202      	bcs.n	8000bba <__udivmoddi4+0x146>
 8000bb4:	429f      	cmp	r7, r3
 8000bb6:	f200 80b0 	bhi.w	8000d1a <__udivmoddi4+0x2a6>
 8000bba:	4620      	mov	r0, r4
 8000bbc:	1bdb      	subs	r3, r3, r7
 8000bbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc2:	e7a5      	b.n	8000b10 <__udivmoddi4+0x9c>
 8000bc4:	f1c1 0620 	rsb	r6, r1, #32
 8000bc8:	408b      	lsls	r3, r1
 8000bca:	fa22 f706 	lsr.w	r7, r2, r6
 8000bce:	431f      	orrs	r7, r3
 8000bd0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bd4:	fa04 f301 	lsl.w	r3, r4, r1
 8000bd8:	ea43 030c 	orr.w	r3, r3, ip
 8000bdc:	40f4      	lsrs	r4, r6
 8000bde:	fa00 f801 	lsl.w	r8, r0, r1
 8000be2:	0c38      	lsrs	r0, r7, #16
 8000be4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000be8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bec:	fa1f fc87 	uxth.w	ip, r7
 8000bf0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bf4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bf8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bfc:	45a1      	cmp	r9, r4
 8000bfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000c02:	d90a      	bls.n	8000c1a <__udivmoddi4+0x1a6>
 8000c04:	193c      	adds	r4, r7, r4
 8000c06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c0a:	f080 8084 	bcs.w	8000d16 <__udivmoddi4+0x2a2>
 8000c0e:	45a1      	cmp	r9, r4
 8000c10:	f240 8081 	bls.w	8000d16 <__udivmoddi4+0x2a2>
 8000c14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c18:	443c      	add	r4, r7
 8000c1a:	eba4 0409 	sub.w	r4, r4, r9
 8000c1e:	fa1f f983 	uxth.w	r9, r3
 8000c22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c26:	fb00 4413 	mls	r4, r0, r3, r4
 8000c2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c32:	45a4      	cmp	ip, r4
 8000c34:	d907      	bls.n	8000c46 <__udivmoddi4+0x1d2>
 8000c36:	193c      	adds	r4, r7, r4
 8000c38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c3c:	d267      	bcs.n	8000d0e <__udivmoddi4+0x29a>
 8000c3e:	45a4      	cmp	ip, r4
 8000c40:	d965      	bls.n	8000d0e <__udivmoddi4+0x29a>
 8000c42:	3b02      	subs	r3, #2
 8000c44:	443c      	add	r4, r7
 8000c46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c4e:	eba4 040c 	sub.w	r4, r4, ip
 8000c52:	429c      	cmp	r4, r3
 8000c54:	46ce      	mov	lr, r9
 8000c56:	469c      	mov	ip, r3
 8000c58:	d351      	bcc.n	8000cfe <__udivmoddi4+0x28a>
 8000c5a:	d04e      	beq.n	8000cfa <__udivmoddi4+0x286>
 8000c5c:	b155      	cbz	r5, 8000c74 <__udivmoddi4+0x200>
 8000c5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c62:	eb64 040c 	sbc.w	r4, r4, ip
 8000c66:	fa04 f606 	lsl.w	r6, r4, r6
 8000c6a:	40cb      	lsrs	r3, r1
 8000c6c:	431e      	orrs	r6, r3
 8000c6e:	40cc      	lsrs	r4, r1
 8000c70:	e9c5 6400 	strd	r6, r4, [r5]
 8000c74:	2100      	movs	r1, #0
 8000c76:	e750      	b.n	8000b1a <__udivmoddi4+0xa6>
 8000c78:	f1c2 0320 	rsb	r3, r2, #32
 8000c7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c84:	fa24 f303 	lsr.w	r3, r4, r3
 8000c88:	4094      	lsls	r4, r2
 8000c8a:	430c      	orrs	r4, r1
 8000c8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c94:	fa1f f78c 	uxth.w	r7, ip
 8000c98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000ca0:	0c23      	lsrs	r3, r4, #16
 8000ca2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca6:	fb00 f107 	mul.w	r1, r0, r7
 8000caa:	4299      	cmp	r1, r3
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x24c>
 8000cae:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cb6:	d22c      	bcs.n	8000d12 <__udivmoddi4+0x29e>
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	d92a      	bls.n	8000d12 <__udivmoddi4+0x29e>
 8000cbc:	3802      	subs	r0, #2
 8000cbe:	4463      	add	r3, ip
 8000cc0:	1a5b      	subs	r3, r3, r1
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ccc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd0:	fb01 f307 	mul.w	r3, r1, r7
 8000cd4:	42a3      	cmp	r3, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x276>
 8000cd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ce0:	d213      	bcs.n	8000d0a <__udivmoddi4+0x296>
 8000ce2:	42a3      	cmp	r3, r4
 8000ce4:	d911      	bls.n	8000d0a <__udivmoddi4+0x296>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4464      	add	r4, ip
 8000cea:	1ae4      	subs	r4, r4, r3
 8000cec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cf0:	e739      	b.n	8000b66 <__udivmoddi4+0xf2>
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	e6f0      	b.n	8000ad8 <__udivmoddi4+0x64>
 8000cf6:	4608      	mov	r0, r1
 8000cf8:	e706      	b.n	8000b08 <__udivmoddi4+0x94>
 8000cfa:	45c8      	cmp	r8, r9
 8000cfc:	d2ae      	bcs.n	8000c5c <__udivmoddi4+0x1e8>
 8000cfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d06:	3801      	subs	r0, #1
 8000d08:	e7a8      	b.n	8000c5c <__udivmoddi4+0x1e8>
 8000d0a:	4631      	mov	r1, r6
 8000d0c:	e7ed      	b.n	8000cea <__udivmoddi4+0x276>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	e799      	b.n	8000c46 <__udivmoddi4+0x1d2>
 8000d12:	4630      	mov	r0, r6
 8000d14:	e7d4      	b.n	8000cc0 <__udivmoddi4+0x24c>
 8000d16:	46d6      	mov	lr, sl
 8000d18:	e77f      	b.n	8000c1a <__udivmoddi4+0x1a6>
 8000d1a:	4463      	add	r3, ip
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	e74d      	b.n	8000bbc <__udivmoddi4+0x148>
 8000d20:	4606      	mov	r6, r0
 8000d22:	4623      	mov	r3, r4
 8000d24:	4608      	mov	r0, r1
 8000d26:	e70f      	b.n	8000b48 <__udivmoddi4+0xd4>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	e730      	b.n	8000b90 <__udivmoddi4+0x11c>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_idiv0>:
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop

08000d34 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000d42:	f003 fb7b 	bl	800443c <cosf>
 8000d46:	eef0 7a40 	vmov.f32	s15, s0
 8000d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	0000      	movs	r0, r0
	...

08000d58 <_ZN4CALC14similarityPeakEhsttt>:
#include "calc.h"
#include "math.h"

int16_t CALC::similarityPeak(uint8_t ledNum, int16_t refference, uint16_t widthAngle, uint16_t center, uint16_t widthHue){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08c      	sub	sp, #48	@ 0x30
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	4608      	mov	r0, r1
 8000d62:	4611      	mov	r1, r2
 8000d64:	461a      	mov	r2, r3
 8000d66:	4603      	mov	r3, r0
 8000d68:	72fb      	strb	r3, [r7, #11]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	813b      	strh	r3, [r7, #8]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	80fb      	strh	r3, [r7, #6]
	ledNum %= 16;
 8000d72:	7afb      	ldrb	r3, [r7, #11]
 8000d74:	f003 030f 	and.w	r3, r3, #15
 8000d78:	72fb      	strb	r3, [r7, #11]
	uint16_t angle = ledNum * 360 / 16 + 360 / 32;
 8000d7a:	7afb      	ldrb	r3, [r7, #11]
 8000d7c:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8000d80:	fb02 f303 	mul.w	r3, r2, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	da00      	bge.n	8000d8a <_ZN4CALC14similarityPeakEhsttt+0x32>
 8000d88:	330f      	adds	r3, #15
 8000d8a:	111b      	asrs	r3, r3, #4
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	330b      	adds	r3, #11
 8000d90:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint16_t diff = abs(angle - refference);
 8000d92:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8000d94:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	bfb8      	it	lt
 8000d9e:	425b      	neglt	r3, r3
 8000da0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (diff > 180) {
 8000da2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000da4:	2bb4      	cmp	r3, #180	@ 0xb4
 8000da6:	d903      	bls.n	8000db0 <_ZN4CALC14similarityPeakEhsttt+0x58>
		diff = 360 - diff;
 8000da8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000daa:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 8000dae:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}

	if (diff >= widthAngle / 2) {
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	085b      	lsrs	r3, r3, #1
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d301      	bcc.n	8000dc0 <_ZN4CALC14similarityPeakEhsttt+0x68>
		return 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	e09a      	b.n	8000ef6 <_ZN4CALC14similarityPeakEhsttt+0x19e>
	}

	float angleRad = angle * M_PI / 180.0;
 8000dc0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fb72 	bl	80004ac <__aeabi_i2d>
 8000dc8:	a34d      	add	r3, pc, #308	@ (adr r3, 8000f00 <_ZN4CALC14similarityPeakEhsttt+0x1a8>)
 8000dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dce:	f7ff fbd7 	bl	8000580 <__aeabi_dmul>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	4610      	mov	r0, r2
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f04f 0200 	mov.w	r2, #0
 8000dde:	4b4a      	ldr	r3, [pc, #296]	@ (8000f08 <_ZN4CALC14similarityPeakEhsttt+0x1b0>)
 8000de0:	f7ff fcf8 	bl	80007d4 <__aeabi_ddiv>
 8000de4:	4602      	mov	r2, r0
 8000de6:	460b      	mov	r3, r1
 8000de8:	4610      	mov	r0, r2
 8000dea:	4619      	mov	r1, r3
 8000dec:	f7ff fdda 	bl	80009a4 <__aeabi_d2f>
 8000df0:	4603      	mov	r3, r0
 8000df2:	627b      	str	r3, [r7, #36]	@ 0x24
	float refferenceRad = refference * M_PI / 180.0;
 8000df4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fb57 	bl	80004ac <__aeabi_i2d>
 8000dfe:	a340      	add	r3, pc, #256	@ (adr r3, 8000f00 <_ZN4CALC14similarityPeakEhsttt+0x1a8>)
 8000e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e04:	f7ff fbbc 	bl	8000580 <__aeabi_dmul>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f04f 0200 	mov.w	r2, #0
 8000e14:	4b3c      	ldr	r3, [pc, #240]	@ (8000f08 <_ZN4CALC14similarityPeakEhsttt+0x1b0>)
 8000e16:	f7ff fcdd 	bl	80007d4 <__aeabi_ddiv>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	4610      	mov	r0, r2
 8000e20:	4619      	mov	r1, r3
 8000e22:	f7ff fdbf 	bl	80009a4 <__aeabi_d2f>
 8000e26:	4603      	mov	r3, r0
 8000e28:	623b      	str	r3, [r7, #32]
	float widthAngleRad = widthAngle * M_PI / 180.0;
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fb3d 	bl	80004ac <__aeabi_i2d>
 8000e32:	a333      	add	r3, pc, #204	@ (adr r3, 8000f00 <_ZN4CALC14similarityPeakEhsttt+0x1a8>)
 8000e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e38:	f7ff fba2 	bl	8000580 <__aeabi_dmul>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	4610      	mov	r0, r2
 8000e42:	4619      	mov	r1, r3
 8000e44:	f04f 0200 	mov.w	r2, #0
 8000e48:	4b2f      	ldr	r3, [pc, #188]	@ (8000f08 <_ZN4CALC14similarityPeakEhsttt+0x1b0>)
 8000e4a:	f7ff fcc3 	bl	80007d4 <__aeabi_ddiv>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	460b      	mov	r3, r1
 8000e52:	4610      	mov	r0, r2
 8000e54:	4619      	mov	r1, r3
 8000e56:	f7ff fda5 	bl	80009a4 <__aeabi_d2f>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	61fb      	str	r3, [r7, #28]

	float result = cos(angleRad - refferenceRad);
 8000e5e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000e62:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e6a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e6e:	f7ff ff61 	bl	8000d34 <_ZSt3cosf>
 8000e72:	ed87 0a06 	vstr	s0, [r7, #24]
	float zeroPoint = cos(widthAngleRad / 2);
 8000e76:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e7a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000e7e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000e82:	eeb0 0a47 	vmov.f32	s0, s14
 8000e86:	f7ff ff55 	bl	8000d34 <_ZSt3cosf>
 8000e8a:	ed87 0a05 	vstr	s0, [r7, #20]
	float normalizedResult = (result - zeroPoint) / (1 - zeroPoint);
 8000e8e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e92:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e96:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000e9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ea2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eaa:	edc7 7a04 	vstr	s15, [r7, #16]

	int16_t output = center + (normalizedResult - 1) * widthHue;
 8000eae:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000eb0:	ee07 3a90 	vmov	s15, r3
 8000eb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ebc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000ec0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8000ec4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000ec6:	ee07 3a90 	vmov	s15, r3
 8000eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ece:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eda:	ee17 3a90 	vmov	r3, s15
 8000ede:	85bb      	strh	r3, [r7, #44]	@ 0x2c

	if(output < 0){
 8000ee0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	da04      	bge.n	8000ef2 <_ZN4CALC14similarityPeakEhsttt+0x19a>
		output += 256;
 8000ee8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000eea:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	}

	return output;
 8000ef2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3730      	adds	r7, #48	@ 0x30
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	54442d18 	.word	0x54442d18
 8000f04:	400921fb 	.word	0x400921fb
 8000f08:	40668000 	.word	0x40668000

08000f0c <_ZN4CALC5rangeEast>:
    float output = (result - zeroPoint) / (1 - zeroPoint);

    return output * 255;
}

uint8_t CALC::range(int8_t ledNum, int16_t refference, uint16_t width){
 8000f0c:	b480      	push	{r7}
 8000f0e:	b087      	sub	sp, #28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	4608      	mov	r0, r1
 8000f16:	4611      	mov	r1, r2
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	72fb      	strb	r3, [r7, #11]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	813b      	strh	r3, [r7, #8]
 8000f22:	4613      	mov	r3, r2
 8000f24:	80fb      	strh	r3, [r7, #6]
	ledNum %= 16;
 8000f26:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f2a:	425a      	negs	r2, r3
 8000f2c:	f003 030f 	and.w	r3, r3, #15
 8000f30:	f002 020f 	and.w	r2, r2, #15
 8000f34:	bf58      	it	pl
 8000f36:	4253      	negpl	r3, r2
 8000f38:	72fb      	strb	r3, [r7, #11]
	uint16_t angle = ledNum * 360 / 16 + 360 / 32;
 8000f3a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f3e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8000f42:	fb02 f303 	mul.w	r3, r2, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	da00      	bge.n	8000f4c <_ZN4CALC5rangeEast+0x40>
 8000f4a:	330f      	adds	r3, #15
 8000f4c:	111b      	asrs	r3, r3, #4
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	330b      	adds	r3, #11
 8000f52:	82bb      	strh	r3, [r7, #20]
	uint16_t diff = abs(angle - refference);
 8000f54:	8aba      	ldrh	r2, [r7, #20]
 8000f56:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	bfb8      	it	lt
 8000f60:	425b      	neglt	r3, r3
 8000f62:	82fb      	strh	r3, [r7, #22]
    if (diff > 180) {
 8000f64:	8afb      	ldrh	r3, [r7, #22]
 8000f66:	2bb4      	cmp	r3, #180	@ 0xb4
 8000f68:	d903      	bls.n	8000f72 <_ZN4CALC5rangeEast+0x66>
        diff = 360 - diff;
 8000f6a:	8afb      	ldrh	r3, [r7, #22]
 8000f6c:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 8000f70:	82fb      	strh	r3, [r7, #22]
    }

    if (diff >= width / 2) {
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	085b      	lsrs	r3, r3, #1
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	8afa      	ldrh	r2, [r7, #22]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d301      	bcc.n	8000f82 <_ZN4CALC5rangeEast+0x76>
        return 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e000      	b.n	8000f84 <_ZN4CALC5rangeEast+0x78>
    }else{
    	return 1;
 8000f82:	2301      	movs	r3, #1
    }
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	371c      	adds	r7, #28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	   NeopixelBoard.execute();
 8000f98:	4804      	ldr	r0, [pc, #16]	@ (8000fac <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8000f9a:	f000 fcb7 	bl	800190c <_ZN7WS2812C7executeEv>
	   NeopixelTape.execute();
 8000f9e:	4804      	ldr	r0, [pc, #16]	@ (8000fb0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000fa0:	f000 fcb4 	bl	800190c <_ZN7WS2812C7executeEv>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000130 	.word	0x20000130
 8000fb0:	200017b8 	.word	0x200017b8

08000fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb4:	b5b0      	push	{r4, r5, r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fba:	f000 fd8f 	bl	8001adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fbe:	f000 f86d 	bl	800109c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc2:	f000 f9a9 	bl	8001318 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000fc6:	f000 f97f 	bl	80012c8 <_ZL11MX_DMA_Initv>
  MX_TIM3_Init();
 8000fca:	f000 f8dd 	bl	8001188 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  NeopixelBoard.init();
 8000fce:	482d      	ldr	r0, [pc, #180]	@ (8001084 <main+0xd0>)
 8000fd0:	f000 fd25 	bl	8001a1e <_ZN7WS2812C4initEv>
  NeopixelTape.init();
 8000fd4:	482c      	ldr	r0, [pc, #176]	@ (8001088 <main+0xd4>)
 8000fd6:	f000 fd22 	bl	8001a1e <_ZN7WS2812C4initEv>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint16_t i = 0;
	  i++;
 8000fda:	4b2c      	ldr	r3, [pc, #176]	@ (800108c <main+0xd8>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800108c <main+0xd8>)
 8000fe4:	801a      	strh	r2, [r3, #0]
	  if(i >= 360){
 8000fe6:	4b29      	ldr	r3, [pc, #164]	@ (800108c <main+0xd8>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000fee:	d306      	bcc.n	8000ffe <main+0x4a>
		  i -= 360;
 8000ff0:	4b26      	ldr	r3, [pc, #152]	@ (800108c <main+0xd8>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	4b24      	ldr	r3, [pc, #144]	@ (800108c <main+0xd8>)
 8000ffc:	801a      	strh	r2, [r3, #0]
	  }
		  for(uint8_t led = 0; led < 32; led++){
 8000ffe:	2300      	movs	r3, #0
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	e032      	b.n	800106a <main+0xb6>
			  NeopixelTape.set_hsv(led, calc.similarityPeak(led, i, 180, i * 2 / 3, 50), 255, calc.range(led, i, 180) * 10);
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	b29c      	uxth	r4, r3
 8001008:	4b20      	ldr	r3, [pc, #128]	@ (800108c <main+0xd8>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	b218      	sxth	r0, r3
 800100e:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <main+0xd8>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	4a1e      	ldr	r2, [pc, #120]	@ (8001090 <main+0xdc>)
 8001016:	fb82 1203 	smull	r1, r2, r2, r3
 800101a:	17db      	asrs	r3, r3, #31
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	b29b      	uxth	r3, r3
 8001020:	79f9      	ldrb	r1, [r7, #7]
 8001022:	2232      	movs	r2, #50	@ 0x32
 8001024:	9201      	str	r2, [sp, #4]
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	23b4      	movs	r3, #180	@ 0xb4
 800102a:	4602      	mov	r2, r0
 800102c:	4819      	ldr	r0, [pc, #100]	@ (8001094 <main+0xe0>)
 800102e:	f7ff fe93 	bl	8000d58 <_ZN4CALC14similarityPeakEhsttt>
 8001032:	4603      	mov	r3, r0
 8001034:	461d      	mov	r5, r3
 8001036:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800103a:	4b14      	ldr	r3, [pc, #80]	@ (800108c <main+0xd8>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	b21a      	sxth	r2, r3
 8001040:	23b4      	movs	r3, #180	@ 0xb4
 8001042:	4814      	ldr	r0, [pc, #80]	@ (8001094 <main+0xe0>)
 8001044:	f7ff ff62 	bl	8000f0c <_ZN4CALC5rangeEast>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	0092      	lsls	r2, r2, #2
 800104e:	4413      	add	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	b29b      	uxth	r3, r3
 8001054:	b21b      	sxth	r3, r3
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	23ff      	movs	r3, #255	@ 0xff
 800105a:	462a      	mov	r2, r5
 800105c:	4621      	mov	r1, r4
 800105e:	480a      	ldr	r0, [pc, #40]	@ (8001088 <main+0xd4>)
 8001060:	f000 fb7a 	bl	8001758 <_ZN7WS2812C7set_hsvEtsss>
		  for(uint8_t led = 0; led < 32; led++){
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	3301      	adds	r3, #1
 8001068:	71fb      	strb	r3, [r7, #7]
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b1f      	cmp	r3, #31
 800106e:	d9c9      	bls.n	8001004 <main+0x50>
		  }
		  NeopixelTape.show();
 8001070:	4805      	ldr	r0, [pc, #20]	@ (8001088 <main+0xd4>)
 8001072:	f000 fc3b 	bl	80018ec <_ZN7WS2812C4showEv>
	  m++;
 8001076:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <main+0xe4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	3301      	adds	r3, #1
 800107c:	4a06      	ldr	r2, [pc, #24]	@ (8001098 <main+0xe4>)
 800107e:	6013      	str	r3, [r2, #0]





  }
 8001080:	e7ab      	b.n	8000fda <main+0x26>
 8001082:	bf00      	nop
 8001084:	20000130 	.word	0x20000130
 8001088:	200017b8 	.word	0x200017b8
 800108c:	20002e48 	.word	0x20002e48
 8001090:	55555556 	.word	0x55555556
 8001094:	20002e40 	.word	0x20002e40
 8001098:	20002e44 	.word	0x20002e44

0800109c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b094      	sub	sp, #80	@ 0x50
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	2234      	movs	r2, #52	@ 0x34
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f003 fefe 	bl	8004eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001180 <_Z18SystemClock_Configv+0xe4>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c8:	4a2d      	ldr	r2, [pc, #180]	@ (8001180 <_Z18SystemClock_Configv+0xe4>)
 80010ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001180 <_Z18SystemClock_Configv+0xe4>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010dc:	2300      	movs	r3, #0
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	4b28      	ldr	r3, [pc, #160]	@ (8001184 <_Z18SystemClock_Configv+0xe8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010e8:	4a26      	ldr	r2, [pc, #152]	@ (8001184 <_Z18SystemClock_Configv+0xe8>)
 80010ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <_Z18SystemClock_Configv+0xe8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010fc:	2301      	movs	r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001100:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001104:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001106:	2302      	movs	r3, #2
 8001108:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800110a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800110e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001110:	2310      	movs	r3, #16
 8001112:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001114:	23c0      	movs	r3, #192	@ 0xc0
 8001116:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001118:	2306      	movs	r3, #6
 800111a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800111c:	2302      	movs	r3, #2
 800111e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001120:	2302      	movs	r3, #2
 8001122:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	4618      	mov	r0, r3
 800112a:	f001 fe73 	bl	8002e14 <HAL_RCC_OscConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	bf14      	ite	ne
 8001134:	2301      	movne	r3, #1
 8001136:	2300      	moveq	r3, #0
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800113e:	f000 f921 	bl	8001384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001142:	230f      	movs	r3, #15
 8001144:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001146:	2302      	movs	r3, #2
 8001148:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	2101      	movs	r1, #1
 800115c:	4618      	mov	r0, r3
 800115e:	f001 fb45 	bl	80027ec <HAL_RCC_ClockConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	bf14      	ite	ne
 8001168:	2301      	movne	r3, #1
 800116a:	2300      	moveq	r3, #0
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8001172:	f000 f907 	bl	8001384 <Error_Handler>
  }
}
 8001176:	bf00      	nop
 8001178:	3750      	adds	r7, #80	@ 0x50
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40007000 	.word	0x40007000

08001188 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08e      	sub	sp, #56	@ 0x38
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119c:	f107 0320 	add.w	r3, r7, #32
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
 80011b4:	615a      	str	r2, [r3, #20]
 80011b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011b8:	4b41      	ldr	r3, [pc, #260]	@ (80012c0 <_ZL12MX_TIM3_Initv+0x138>)
 80011ba:	4a42      	ldr	r2, [pc, #264]	@ (80012c4 <_ZL12MX_TIM3_Initv+0x13c>)
 80011bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 80011be:	4b40      	ldr	r3, [pc, #256]	@ (80012c0 <_ZL12MX_TIM3_Initv+0x138>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c4:	4b3e      	ldr	r3, [pc, #248]	@ (80012c0 <_ZL12MX_TIM3_Initv+0x138>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40-1;
 80011ca:	4b3d      	ldr	r3, [pc, #244]	@ (80012c0 <_ZL12MX_TIM3_Initv+0x138>)
 80011cc:	2227      	movs	r2, #39	@ 0x27
 80011ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d0:	4b3b      	ldr	r3, [pc, #236]	@ (80012c0 <_ZL12MX_TIM3_Initv+0x138>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d6:	4b3a      	ldr	r3, [pc, #232]	@ (80012c0 <_ZL12MX_TIM3_Initv+0x138>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011dc:	4838      	ldr	r0, [pc, #224]	@ (80012c0 <_ZL12MX_TIM3_Initv+0x138>)
 80011de:	f002 f8b7 	bl	8003350 <HAL_TIM_Base_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	bf14      	ite	ne
 80011e8:	2301      	movne	r3, #1
 80011ea:	2300      	moveq	r3, #0
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <_ZL12MX_TIM3_Initv+0x6e>
  {
    Error_Handler();
 80011f2:	f000 f8c7 	bl	8001384 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001200:	4619      	mov	r1, r3
 8001202:	482f      	ldr	r0, [pc, #188]	@ (80012c0 <_ZL12MX_TIM3_Initv+0x138>)
 8001204:	f002 fbd6 	bl	80039b4 <HAL_TIM_ConfigClockSource>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	bf14      	ite	ne
 800120e:	2301      	movne	r3, #1
 8001210:	2300      	moveq	r3, #0
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <_ZL12MX_TIM3_Initv+0x94>
  {
    Error_Handler();
 8001218:	f000 f8b4 	bl	8001384 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800121c:	4828      	ldr	r0, [pc, #160]	@ (80012c0 <_ZL12MX_TIM3_Initv+0x138>)
 800121e:	f002 f8e6 	bl	80033ee <HAL_TIM_PWM_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	bf14      	ite	ne
 8001228:	2301      	movne	r3, #1
 800122a:	2300      	moveq	r3, #0
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8001232:	f000 f8a7 	bl	8001384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	4619      	mov	r1, r3
 8001244:	481e      	ldr	r0, [pc, #120]	@ (80012c0 <_ZL12MX_TIM3_Initv+0x138>)
 8001246:	f003 f87d 	bl	8004344 <HAL_TIMEx_MasterConfigSynchronization>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	bf14      	ite	ne
 8001250:	2301      	movne	r3, #1
 8001252:	2300      	moveq	r3, #0
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <_ZL12MX_TIM3_Initv+0xd6>
  {
    Error_Handler();
 800125a:	f000 f893 	bl	8001384 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800125e:	2360      	movs	r3, #96	@ 0x60
 8001260:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	2200      	movs	r2, #0
 8001272:	4619      	mov	r1, r3
 8001274:	4812      	ldr	r0, [pc, #72]	@ (80012c0 <_ZL12MX_TIM3_Initv+0x138>)
 8001276:	f002 fadb 	bl	8003830 <HAL_TIM_PWM_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	bf14      	ite	ne
 8001280:	2301      	movne	r3, #1
 8001282:	2300      	moveq	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <_ZL12MX_TIM3_Initv+0x106>
  {
    Error_Handler();
 800128a:	f000 f87b 	bl	8001384 <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800128e:	2304      	movs	r3, #4
 8001290:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2204      	movs	r2, #4
 8001296:	4619      	mov	r1, r3
 8001298:	4809      	ldr	r0, [pc, #36]	@ (80012c0 <_ZL12MX_TIM3_Initv+0x138>)
 800129a:	f002 fac9 	bl	8003830 <HAL_TIM_PWM_ConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	bf14      	ite	ne
 80012a4:	2301      	movne	r3, #1
 80012a6:	2300      	moveq	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <_ZL12MX_TIM3_Initv+0x12a>
  {
    Error_Handler();
 80012ae:	f000 f869 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012b2:	4803      	ldr	r0, [pc, #12]	@ (80012c0 <_ZL12MX_TIM3_Initv+0x138>)
 80012b4:	f000 f956 	bl	8001564 <HAL_TIM_MspPostInit>

}
 80012b8:	bf00      	nop
 80012ba:	3738      	adds	r7, #56	@ 0x38
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000028 	.word	0x20000028
 80012c4:	40000400 	.word	0x40000400

080012c8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <_ZL11MX_DMA_Initv+0x4c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001314 <_ZL11MX_DMA_Initv+0x4c>)
 80012d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b0d      	ldr	r3, [pc, #52]	@ (8001314 <_ZL11MX_DMA_Initv+0x4c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	200f      	movs	r0, #15
 80012f0:	f000 fd41 	bl	8001d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80012f4:	200f      	movs	r0, #15
 80012f6:	f000 fd5a 	bl	8001dae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	2010      	movs	r0, #16
 8001300:	f000 fd39 	bl	8001d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001304:	2010      	movs	r0, #16
 8001306:	f000 fd52 	bl	8001dae <HAL_NVIC_EnableIRQ>

}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800

08001318 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b17      	ldr	r3, [pc, #92]	@ (8001380 <_ZL12MX_GPIO_Initv+0x68>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a16      	ldr	r2, [pc, #88]	@ (8001380 <_ZL12MX_GPIO_Initv+0x68>)
 8001328:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b14      	ldr	r3, [pc, #80]	@ (8001380 <_ZL12MX_GPIO_Initv+0x68>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <_ZL12MX_GPIO_Initv+0x68>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	4a0f      	ldr	r2, [pc, #60]	@ (8001380 <_ZL12MX_GPIO_Initv+0x68>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6313      	str	r3, [r2, #48]	@ 0x30
 800134a:	4b0d      	ldr	r3, [pc, #52]	@ (8001380 <_ZL12MX_GPIO_Initv+0x68>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <_ZL12MX_GPIO_Initv+0x68>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4a08      	ldr	r2, [pc, #32]	@ (8001380 <_ZL12MX_GPIO_Initv+0x68>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <_ZL12MX_GPIO_Initv+0x68>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001372:	bf00      	nop
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800

08001384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001388:	b672      	cpsid	i
}
 800138a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <Error_Handler+0x8>

08001390 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d110      	bne.n	80013c2 <_Z41__static_initialization_and_destruction_0ii+0x32>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d10b      	bne.n	80013c2 <_Z41__static_initialization_and_destruction_0ii+0x32>
WS2812C NeopixelBoard(&htim3, TIM_CHANNEL_2, &hdma_tim3_ch2);
 80013aa:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80013ac:	2204      	movs	r2, #4
 80013ae:	4908      	ldr	r1, [pc, #32]	@ (80013d0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80013b0:	4808      	ldr	r0, [pc, #32]	@ (80013d4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80013b2:	f000 f987 	bl	80016c4 <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
WS2812C NeopixelTape(&htim3, TIM_CHANNEL_1, &hdma_tim3_ch1_trig);
 80013b6:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	4905      	ldr	r1, [pc, #20]	@ (80013d0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80013bc:	4807      	ldr	r0, [pc, #28]	@ (80013dc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80013be:	f000 f981 	bl	80016c4 <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000070 	.word	0x20000070
 80013d0:	20000028 	.word	0x20000028
 80013d4:	20000130 	.word	0x20000130
 80013d8:	200000d0 	.word	0x200000d0
 80013dc:	200017b8 	.word	0x200017b8

080013e0 <_GLOBAL__sub_I_htim3>:
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80013e8:	2001      	movs	r0, #1
 80013ea:	f7ff ffd1 	bl	8001390 <_Z41__static_initialization_and_destruction_0ii>
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	4b10      	ldr	r3, [pc, #64]	@ (800143c <HAL_MspInit+0x4c>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fe:	4a0f      	ldr	r2, [pc, #60]	@ (800143c <HAL_MspInit+0x4c>)
 8001400:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001404:	6453      	str	r3, [r2, #68]	@ 0x44
 8001406:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <HAL_MspInit+0x4c>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	4b09      	ldr	r3, [pc, #36]	@ (800143c <HAL_MspInit+0x4c>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141a:	4a08      	ldr	r2, [pc, #32]	@ (800143c <HAL_MspInit+0x4c>)
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001420:	6413      	str	r3, [r2, #64]	@ 0x40
 8001422:	4b06      	ldr	r3, [pc, #24]	@ (800143c <HAL_MspInit+0x4c>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800

08001440 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a3f      	ldr	r2, [pc, #252]	@ (800154c <HAL_TIM_Base_MspInit+0x10c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d177      	bne.n	8001542 <HAL_TIM_Base_MspInit+0x102>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b3e      	ldr	r3, [pc, #248]	@ (8001550 <HAL_TIM_Base_MspInit+0x110>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	4a3d      	ldr	r2, [pc, #244]	@ (8001550 <HAL_TIM_Base_MspInit+0x110>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6413      	str	r3, [r2, #64]	@ 0x40
 8001462:	4b3b      	ldr	r3, [pc, #236]	@ (8001550 <HAL_TIM_Base_MspInit+0x110>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 800146e:	4b39      	ldr	r3, [pc, #228]	@ (8001554 <HAL_TIM_Base_MspInit+0x114>)
 8001470:	4a39      	ldr	r2, [pc, #228]	@ (8001558 <HAL_TIM_Base_MspInit+0x118>)
 8001472:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8001474:	4b37      	ldr	r3, [pc, #220]	@ (8001554 <HAL_TIM_Base_MspInit+0x114>)
 8001476:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800147a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800147c:	4b35      	ldr	r3, [pc, #212]	@ (8001554 <HAL_TIM_Base_MspInit+0x114>)
 800147e:	2240      	movs	r2, #64	@ 0x40
 8001480:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001482:	4b34      	ldr	r3, [pc, #208]	@ (8001554 <HAL_TIM_Base_MspInit+0x114>)
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001488:	4b32      	ldr	r3, [pc, #200]	@ (8001554 <HAL_TIM_Base_MspInit+0x114>)
 800148a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800148e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001490:	4b30      	ldr	r3, [pc, #192]	@ (8001554 <HAL_TIM_Base_MspInit+0x114>)
 8001492:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001496:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001498:	4b2e      	ldr	r3, [pc, #184]	@ (8001554 <HAL_TIM_Base_MspInit+0x114>)
 800149a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800149e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 80014a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001554 <HAL_TIM_Base_MspInit+0x114>)
 80014a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014a6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001554 <HAL_TIM_Base_MspInit+0x114>)
 80014aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80014ae:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014b0:	4b28      	ldr	r3, [pc, #160]	@ (8001554 <HAL_TIM_Base_MspInit+0x114>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80014b6:	4827      	ldr	r0, [pc, #156]	@ (8001554 <HAL_TIM_Base_MspInit+0x114>)
 80014b8:	f000 fc94 	bl	8001de4 <HAL_DMA_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 80014c2:	f7ff ff5f 	bl	8001384 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a22      	ldr	r2, [pc, #136]	@ (8001554 <HAL_TIM_Base_MspInit+0x114>)
 80014ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80014cc:	4a21      	ldr	r2, [pc, #132]	@ (8001554 <HAL_TIM_Base_MspInit+0x114>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80014d2:	4b22      	ldr	r3, [pc, #136]	@ (800155c <HAL_TIM_Base_MspInit+0x11c>)
 80014d4:	4a22      	ldr	r2, [pc, #136]	@ (8001560 <HAL_TIM_Base_MspInit+0x120>)
 80014d6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80014d8:	4b20      	ldr	r3, [pc, #128]	@ (800155c <HAL_TIM_Base_MspInit+0x11c>)
 80014da:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80014de:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014e0:	4b1e      	ldr	r3, [pc, #120]	@ (800155c <HAL_TIM_Base_MspInit+0x11c>)
 80014e2:	2240      	movs	r2, #64	@ 0x40
 80014e4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e6:	4b1d      	ldr	r3, [pc, #116]	@ (800155c <HAL_TIM_Base_MspInit+0x11c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <HAL_TIM_Base_MspInit+0x11c>)
 80014ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014f2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014f4:	4b19      	ldr	r3, [pc, #100]	@ (800155c <HAL_TIM_Base_MspInit+0x11c>)
 80014f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014fa:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014fc:	4b17      	ldr	r3, [pc, #92]	@ (800155c <HAL_TIM_Base_MspInit+0x11c>)
 80014fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001502:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8001504:	4b15      	ldr	r3, [pc, #84]	@ (800155c <HAL_TIM_Base_MspInit+0x11c>)
 8001506:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800150a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800150c:	4b13      	ldr	r3, [pc, #76]	@ (800155c <HAL_TIM_Base_MspInit+0x11c>)
 800150e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001512:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <HAL_TIM_Base_MspInit+0x11c>)
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800151a:	4810      	ldr	r0, [pc, #64]	@ (800155c <HAL_TIM_Base_MspInit+0x11c>)
 800151c:	f000 fc62 	bl	8001de4 <HAL_DMA_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_TIM_Base_MspInit+0xea>
    {
      Error_Handler();
 8001526:	f7ff ff2d 	bl	8001384 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a0b      	ldr	r2, [pc, #44]	@ (800155c <HAL_TIM_Base_MspInit+0x11c>)
 800152e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001530:	4a0a      	ldr	r2, [pc, #40]	@ (800155c <HAL_TIM_Base_MspInit+0x11c>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a08      	ldr	r2, [pc, #32]	@ (800155c <HAL_TIM_Base_MspInit+0x11c>)
 800153a:	639a      	str	r2, [r3, #56]	@ 0x38
 800153c:	4a07      	ldr	r2, [pc, #28]	@ (800155c <HAL_TIM_Base_MspInit+0x11c>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40000400 	.word	0x40000400
 8001550:	40023800 	.word	0x40023800
 8001554:	20000070 	.word	0x20000070
 8001558:	40026088 	.word	0x40026088
 800155c:	200000d0 	.word	0x200000d0
 8001560:	40026070 	.word	0x40026070

08001564 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	@ 0x28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a21      	ldr	r2, [pc, #132]	@ (8001608 <HAL_TIM_MspPostInit+0xa4>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d13b      	bne.n	80015fe <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	4b20      	ldr	r3, [pc, #128]	@ (800160c <HAL_TIM_MspPostInit+0xa8>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	4a1f      	ldr	r2, [pc, #124]	@ (800160c <HAL_TIM_MspPostInit+0xa8>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6313      	str	r3, [r2, #48]	@ 0x30
 8001596:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <HAL_TIM_MspPostInit+0xa8>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b19      	ldr	r3, [pc, #100]	@ (800160c <HAL_TIM_MspPostInit+0xa8>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	4a18      	ldr	r2, [pc, #96]	@ (800160c <HAL_TIM_MspPostInit+0xa8>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b2:	4b16      	ldr	r3, [pc, #88]	@ (800160c <HAL_TIM_MspPostInit+0xa8>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015be:	2340      	movs	r3, #64	@ 0x40
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015ce:	2302      	movs	r3, #2
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	480d      	ldr	r0, [pc, #52]	@ (8001610 <HAL_TIM_MspPostInit+0xac>)
 80015da:	f000 ff73 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015de:	2320      	movs	r3, #32
 80015e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015ee:	2302      	movs	r3, #2
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4806      	ldr	r0, [pc, #24]	@ (8001614 <HAL_TIM_MspPostInit+0xb0>)
 80015fa:	f000 ff63 	bl	80024c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015fe:	bf00      	nop
 8001600:	3728      	adds	r7, #40	@ 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40000400 	.word	0x40000400
 800160c:	40023800 	.word	0x40023800
 8001610:	40020000 	.word	0x40020000
 8001614:	40020400 	.word	0x40020400

08001618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <NMI_Handler+0x4>

08001620 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <HardFault_Handler+0x4>

08001628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <MemManage_Handler+0x4>

08001630 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <BusFault_Handler+0x4>

08001638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <UsageFault_Handler+0x4>

08001640 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800166e:	f000 fa87 	bl	8001b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 800167c:	4802      	ldr	r0, [pc, #8]	@ (8001688 <DMA1_Stream4_IRQHandler+0x10>)
 800167e:	f000 fcb7 	bl	8001ff0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200000d0 	.word	0x200000d0

0800168c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <DMA1_Stream5_IRQHandler+0x10>)
 8001692:	f000 fcad 	bl	8001ff0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000070 	.word	0x20000070

080016a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <SystemInit+0x20>)
 80016a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016aa:	4a05      	ldr	r2, [pc, #20]	@ (80016c0 <SystemInit+0x20>)
 80016ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>:
#include "ws2812c.h"

WS2812C::WS2812C(TIM_HandleTypeDef* htim, uint32_t tim_channel_x, DMA_HandleTypeDef* hdma){
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	603b      	str	r3, [r7, #0]
    HTIM = htim;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	68ba      	ldr	r2, [r7, #8]
 80016d6:	605a      	str	r2, [r3, #4]
    TIM_CHANNEL_X = tim_channel_x;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	701a      	strb	r2, [r3, #0]
    HDMA =hdma;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	609a      	str	r2, [r3, #8]
}
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4618      	mov	r0, r3
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <_ZN7WS2812C7set_rgbEthhh>:

void WS2812C::set_rgb(uint16_t PIXEL_NUM, uint8_t red, uint8_t green, uint8_t blue){
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	4608      	mov	r0, r1
 80016fe:	4611      	mov	r1, r2
 8001700:	461a      	mov	r2, r3
 8001702:	4603      	mov	r3, r0
 8001704:	807b      	strh	r3, [r7, #2]
 8001706:	460b      	mov	r3, r1
 8001708:	707b      	strb	r3, [r7, #1]
 800170a:	4613      	mov	r3, r2
 800170c:	703b      	strb	r3, [r7, #0]
	if(PIXEL_NUM<LED_NUM){
 800170e:	887b      	ldrh	r3, [r7, #2]
 8001710:	2b2f      	cmp	r3, #47	@ 0x2f
 8001712:	d81a      	bhi.n	800174a <_ZN7WS2812C7set_rgbEthhh+0x56>
		rgb_buf[PIXEL_NUM][0]=green;
 8001714:	887a      	ldrh	r2, [r7, #2]
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	440b      	add	r3, r1
 8001720:	330c      	adds	r3, #12
 8001722:	783a      	ldrb	r2, [r7, #0]
 8001724:	701a      	strb	r2, [r3, #0]
		rgb_buf[PIXEL_NUM][1]=red;
 8001726:	887a      	ldrh	r2, [r7, #2]
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	440b      	add	r3, r1
 8001732:	330d      	adds	r3, #13
 8001734:	787a      	ldrb	r2, [r7, #1]
 8001736:	701a      	strb	r2, [r3, #0]
		rgb_buf[PIXEL_NUM][2]=blue;
 8001738:	887a      	ldrh	r2, [r7, #2]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	440b      	add	r3, r1
 8001744:	330e      	adds	r3, #14
 8001746:	7c3a      	ldrb	r2, [r7, #16]
 8001748:	701a      	strb	r2, [r3, #0]
	}
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <_ZN7WS2812C7set_hsvEtsss>:

void WS2812C::set_hsv(uint16_t PIXEL_NUM, int16_t h , int16_t s, int16_t v){
 8001758:	b580      	push	{r7, lr}
 800175a:	b08c      	sub	sp, #48	@ 0x30
 800175c:	af02      	add	r7, sp, #8
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	4608      	mov	r0, r1
 8001762:	4611      	mov	r1, r2
 8001764:	461a      	mov	r2, r3
 8001766:	4603      	mov	r3, r0
 8001768:	817b      	strh	r3, [r7, #10]
 800176a:	460b      	mov	r3, r1
 800176c:	813b      	strh	r3, [r7, #8]
 800176e:	4613      	mov	r3, r2
 8001770:	80fb      	strh	r3, [r7, #6]
	uint8_t r, g, b;
	if(s == 0){
 8001772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10b      	bne.n	8001792 <_ZN7WS2812C7set_hsvEtsss+0x3a>
		r = g = b = v;
 800177a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800177c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001780:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001784:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001788:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800178c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001790:	e09c      	b.n	80018cc <_ZN7WS2812C7set_hsvEtsss+0x174>
	}else{
		h = h * 6;
 8001792:	893b      	ldrh	r3, [r7, #8]
 8001794:	461a      	mov	r2, r3
 8001796:	0052      	lsls	r2, r2, #1
 8001798:	4413      	add	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	b29b      	uxth	r3, r3
 800179e:	813b      	strh	r3, [r7, #8]
		int i = h / 256;
 80017a0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	da00      	bge.n	80017aa <_ZN7WS2812C7set_hsvEtsss+0x52>
 80017a8:	33ff      	adds	r3, #255	@ 0xff
 80017aa:	121b      	asrs	r3, r3, #8
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	623b      	str	r3, [r7, #32]
		int f = h % 256;
 80017b0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80017b4:	425a      	negs	r2, r3
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	bf58      	it	pl
 80017bc:	4253      	negpl	r3, r2
 80017be:	b21b      	sxth	r3, r3
 80017c0:	61fb      	str	r3, [r7, #28]
		int p = (v * (256 - s)) / 256;
 80017c2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80017c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017ca:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80017ce:	fb02 f303 	mul.w	r3, r2, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	da00      	bge.n	80017d8 <_ZN7WS2812C7set_hsvEtsss+0x80>
 80017d6:	33ff      	adds	r3, #255	@ 0xff
 80017d8:	121b      	asrs	r3, r3, #8
 80017da:	61bb      	str	r3, [r7, #24]
		int q = (v * (256 - (s * f) / 256)) / 256;
 80017dc:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 80017e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e4:	69f9      	ldr	r1, [r7, #28]
 80017e6:	fb01 f303 	mul.w	r3, r1, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	da00      	bge.n	80017f0 <_ZN7WS2812C7set_hsvEtsss+0x98>
 80017ee:	33ff      	adds	r3, #255	@ 0xff
 80017f0:	121b      	asrs	r3, r3, #8
 80017f2:	425b      	negs	r3, r3
 80017f4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80017f8:	fb02 f303 	mul.w	r3, r2, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	da00      	bge.n	8001802 <_ZN7WS2812C7set_hsvEtsss+0xaa>
 8001800:	33ff      	adds	r3, #255	@ 0xff
 8001802:	121b      	asrs	r3, r3, #8
 8001804:	617b      	str	r3, [r7, #20]
		int t = (v * (256 - (s * (256 - f)) / 256)) / 256;
 8001806:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 800180a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800180e:	69f9      	ldr	r1, [r7, #28]
 8001810:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8001814:	fb01 f303 	mul.w	r3, r1, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	da00      	bge.n	800181e <_ZN7WS2812C7set_hsvEtsss+0xc6>
 800181c:	33ff      	adds	r3, #255	@ 0xff
 800181e:	121b      	asrs	r3, r3, #8
 8001820:	425b      	negs	r3, r3
 8001822:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	da00      	bge.n	8001830 <_ZN7WS2812C7set_hsvEtsss+0xd8>
 800182e:	33ff      	adds	r3, #255	@ 0xff
 8001830:	121b      	asrs	r3, r3, #8
 8001832:	613b      	str	r3, [r7, #16]

		switch (i) {
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	2b04      	cmp	r3, #4
 8001838:	d83e      	bhi.n	80018b8 <_ZN7WS2812C7set_hsvEtsss+0x160>
 800183a:	a201      	add	r2, pc, #4	@ (adr r2, 8001840 <_ZN7WS2812C7set_hsvEtsss+0xe8>)
 800183c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001840:	08001855 	.word	0x08001855
 8001844:	08001869 	.word	0x08001869
 8001848:	0800187d 	.word	0x0800187d
 800184c:	08001891 	.word	0x08001891
 8001850:	080018a5 	.word	0x080018a5
			case 0: r = v; g = t; b = p; break;
 8001854:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001856:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001866:	e031      	b.n	80018cc <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 1: r = q; g = v; b = p; break;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800186e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001870:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800187a:	e027      	b.n	80018cc <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 2: r = p; g = v; b = t; break;
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001882:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001884:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800188e:	e01d      	b.n	80018cc <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 3: r = p; g = q; b = v; break;
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800189c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800189e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80018a2:	e013      	b.n	80018cc <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 4: r = t; g = p; b = v; break;
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80018b0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80018b2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80018b6:	e009      	b.n	80018cc <_ZN7WS2812C7set_hsvEtsss+0x174>
			default: r = v; g = p;b = q; break;
 80018b8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80018ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80018ca:	bf00      	nop
		}
	}
	set_rgb(PIXEL_NUM, r, g, b);
 80018cc:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 80018d0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80018d4:	8979      	ldrh	r1, [r7, #10]
 80018d6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	4603      	mov	r3, r0
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f7ff ff08 	bl	80016f4 <_ZN7WS2812C7set_rgbEthhh>
}
 80018e4:	bf00      	nop
 80018e6:	3728      	adds	r7, #40	@ 0x28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_ZN7WS2812C4showEv>:

void WS2812C::show(){
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	pwm_buf_status = 1;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2684 	strb.w	r2, [r3, #1668]	@ 0x684
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <_ZN7WS2812C7executeEv>:

void WS2812C::execute(){
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	if(pwm_buf_status==1){
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800191a:	f893 3684 	ldrb.w	r3, [r3, #1668]	@ 0x684
 800191e:	2b01      	cmp	r3, #1
 8001920:	d179      	bne.n	8001a16 <_ZN7WS2812C7executeEv+0x10a>
		for(int i=0; i<RST; i++){
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	e009      	b.n	800193c <_ZN7WS2812C7executeEv+0x30>
			pwm_buf[i]=0;
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3326      	adds	r3, #38	@ 0x26
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	2200      	movs	r2, #0
 8001934:	605a      	str	r2, [r3, #4]
		for(int i=0; i<RST; i++){
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3301      	adds	r3, #1
 800193a:	61fb      	str	r3, [r7, #28]
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	2bf9      	cmp	r3, #249	@ 0xf9
 8001940:	ddf2      	ble.n	8001928 <_ZN7WS2812C7executeEv+0x1c>
		}

		for(int i=0; i<LED_NUM; i++){
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
 8001946:	e051      	b.n	80019ec <_ZN7WS2812C7executeEv+0xe0>
			for(int j=0; j<3; j++){
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	e048      	b.n	80019e0 <_ZN7WS2812C7executeEv+0xd4>
				for(int k=7; k>=0; k--){
 800194e:	2307      	movs	r3, #7
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	e03f      	b.n	80019d4 <_ZN7WS2812C7executeEv+0xc8>
					int x=(rgb_buf[i][j]>>k)&1;
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	18ca      	adds	r2, r1, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	4413      	add	r3, r2
 8001964:	330c      	adds	r3, #12
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	fa42 f303 	asr.w	r3, r2, r3
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
					if(x==1){pwm_buf[RST+(i*24)+(j*8)+(7-k)]=HIGH;}
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d114      	bne.n	80019a6 <_ZN7WS2812C7executeEv+0x9a>
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4613      	mov	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	f103 02fa 	add.w	r2, r3, #250	@ 0xfa
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	441a      	add	r2, r3
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	f1c3 0307 	rsb	r3, r3, #7
 8001996:	4413      	add	r3, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	3326      	adds	r3, #38	@ 0x26
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	2214      	movs	r2, #20
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	e013      	b.n	80019ce <_ZN7WS2812C7executeEv+0xc2>
					else{pwm_buf[RST+(i*24)+(j*8)+(7-k)]=LOW;}
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4613      	mov	r3, r2
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4413      	add	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	f103 02fa 	add.w	r2, r3, #250	@ 0xfa
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	441a      	add	r2, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	f1c3 0307 	rsb	r3, r3, #7
 80019c0:	4413      	add	r3, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	3326      	adds	r3, #38	@ 0x26
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	220a      	movs	r2, #10
 80019cc:	605a      	str	r2, [r3, #4]
				for(int k=7; k>=0; k--){
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	dabc      	bge.n	8001954 <_ZN7WS2812C7executeEv+0x48>
			for(int j=0; j<3; j++){
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	3301      	adds	r3, #1
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	ddb3      	ble.n	800194e <_ZN7WS2812C7executeEv+0x42>
		for(int i=0; i<LED_NUM; i++){
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	3301      	adds	r3, #1
 80019ea:	61bb      	str	r3, [r7, #24]
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2b2f      	cmp	r3, #47	@ 0x2f
 80019f0:	ddaa      	ble.n	8001948 <_ZN7WS2812C7executeEv+0x3c>
				}
			}
		}

		HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, pwm_buf, RST+(LED_NUM*24));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6858      	ldr	r0, [r3, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	4619      	mov	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f103 029c 	add.w	r2, r3, #156	@ 0x9c
 8001a02:	f240 537a 	movw	r3, #1402	@ 0x57a
 8001a06:	f001 fd4b 	bl	80034a0 <HAL_TIM_PWM_Start_DMA>
		pwm_buf_status = 0;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2684 	strb.w	r2, [r3, #1668]	@ 0x684
		// (uint32_t*)

	}else{

	}
}
 8001a16:	bf00      	nop
 8001a18:	3720      	adds	r7, #32
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <_ZN7WS2812C4initEv>:

void WS2812C::init(){
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
	for(int i=0; i<RST; i++){
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	e009      	b.n	8001a40 <_ZN7WS2812C4initEv+0x22>
	        pwm_buf[i]=0;
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	3326      	adds	r3, #38	@ 0x26
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	2200      	movs	r2, #0
 8001a38:	605a      	str	r2, [r3, #4]
	for(int i=0; i<RST; i++){
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2bf9      	cmp	r3, #249	@ 0xf9
 8001a44:	ddf2      	ble.n	8001a2c <_ZN7WS2812C4initEv+0xe>
	}

	for(int i=RST; i<LED_NUM*24; i++){
 8001a46:	23fa      	movs	r3, #250	@ 0xfa
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	e009      	b.n	8001a60 <_ZN7WS2812C4initEv+0x42>
		pwm_buf[i]=LOW;
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	3326      	adds	r3, #38	@ 0x26
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	220a      	movs	r2, #10
 8001a58:	605a      	str	r2, [r3, #4]
	for(int i=RST; i<LED_NUM*24; i++){
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8001a66:	dbf1      	blt.n	8001a4c <_ZN7WS2812C4initEv+0x2e>
	}

	HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, pwm_buf, RST+(LED_NUM*24));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6858      	ldr	r0, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f103 029c 	add.w	r2, r3, #156	@ 0x9c
 8001a78:	f240 537a 	movw	r3, #1402	@ 0x57a
 8001a7c:	f001 fd10 	bl	80034a0 <HAL_TIM_PWM_Start_DMA>
	// (uint32_t*)
}
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ac0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a8c:	f7ff fe08 	bl	80016a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a90:	480c      	ldr	r0, [pc, #48]	@ (8001ac4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a92:	490d      	ldr	r1, [pc, #52]	@ (8001ac8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a94:	4a0d      	ldr	r2, [pc, #52]	@ (8001acc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a98:	e002      	b.n	8001aa0 <LoopCopyDataInit>

08001a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9e:	3304      	adds	r3, #4

08001aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa4:	d3f9      	bcc.n	8001a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aa8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ad4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aac:	e001      	b.n	8001ab2 <LoopFillZerobss>

08001aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab0:	3204      	adds	r2, #4

08001ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab4:	d3fb      	bcc.n	8001aae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ab6:	f003 fa01 	bl	8004ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aba:	f7ff fa7b 	bl	8000fb4 <main>
  bx  lr    
 8001abe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ac0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001acc:	08005318 	.word	0x08005318
  ldr r2, =_sbss
 8001ad0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001ad4:	20002e50 	.word	0x20002e50

08001ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad8:	e7fe      	b.n	8001ad8 <ADC_IRQHandler>
	...

08001adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <HAL_Init+0x40>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b1c <HAL_Init+0x40>)
 8001ae6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aec:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <HAL_Init+0x40>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0a      	ldr	r2, [pc, #40]	@ (8001b1c <HAL_Init+0x40>)
 8001af2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001af6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af8:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <HAL_Init+0x40>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a07      	ldr	r2, [pc, #28]	@ (8001b1c <HAL_Init+0x40>)
 8001afe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b04:	2003      	movs	r0, #3
 8001b06:	f000 f92b 	bl	8001d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0a:	200f      	movs	r0, #15
 8001b0c:	f000 f808 	bl	8001b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b10:	f7ff fc6e 	bl	80013f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023c00 	.word	0x40023c00

08001b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b28:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <HAL_InitTick+0x54>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b12      	ldr	r3, [pc, #72]	@ (8001b78 <HAL_InitTick+0x58>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f943 	bl	8001dca <HAL_SYSTICK_Config>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e00e      	b.n	8001b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b0f      	cmp	r3, #15
 8001b52:	d80a      	bhi.n	8001b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b54:	2200      	movs	r2, #0
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b5c:	f000 f90b 	bl	8001d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b60:	4a06      	ldr	r2, [pc, #24]	@ (8001b7c <HAL_InitTick+0x5c>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e000      	b.n	8001b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000000 	.word	0x20000000
 8001b78:	20000008 	.word	0x20000008
 8001b7c:	20000004 	.word	0x20000004

08001b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b84:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <HAL_IncTick+0x20>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <HAL_IncTick+0x24>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4413      	add	r3, r2
 8001b90:	4a04      	ldr	r2, [pc, #16]	@ (8001ba4 <HAL_IncTick+0x24>)
 8001b92:	6013      	str	r3, [r2, #0]
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000008 	.word	0x20000008
 8001ba4:	20002e4c 	.word	0x20002e4c

08001ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bac:	4b03      	ldr	r3, [pc, #12]	@ (8001bbc <HAL_GetTick+0x14>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20002e4c 	.word	0x20002e4c

08001bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf2:	4a04      	ldr	r2, [pc, #16]	@ (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	60d3      	str	r3, [r2, #12]
}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c0c:	4b04      	ldr	r3, [pc, #16]	@ (8001c20 <__NVIC_GetPriorityGrouping+0x18>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	f003 0307 	and.w	r3, r3, #7
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	db0b      	blt.n	8001c4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	f003 021f 	and.w	r2, r3, #31
 8001c3c:	4907      	ldr	r1, [pc, #28]	@ (8001c5c <__NVIC_EnableIRQ+0x38>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	2001      	movs	r0, #1
 8001c46:	fa00 f202 	lsl.w	r2, r0, r2
 8001c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000e100 	.word	0xe000e100

08001c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	6039      	str	r1, [r7, #0]
 8001c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	db0a      	blt.n	8001c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	490c      	ldr	r1, [pc, #48]	@ (8001cac <__NVIC_SetPriority+0x4c>)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	0112      	lsls	r2, r2, #4
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	440b      	add	r3, r1
 8001c84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c88:	e00a      	b.n	8001ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	4908      	ldr	r1, [pc, #32]	@ (8001cb0 <__NVIC_SetPriority+0x50>)
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	3b04      	subs	r3, #4
 8001c98:	0112      	lsls	r2, r2, #4
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	761a      	strb	r2, [r3, #24]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000e100 	.word	0xe000e100
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b089      	sub	sp, #36	@ 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f1c3 0307 	rsb	r3, r3, #7
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	bf28      	it	cs
 8001cd2:	2304      	movcs	r3, #4
 8001cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	2b06      	cmp	r3, #6
 8001cdc:	d902      	bls.n	8001ce4 <NVIC_EncodePriority+0x30>
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3b03      	subs	r3, #3
 8001ce2:	e000      	b.n	8001ce6 <NVIC_EncodePriority+0x32>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43da      	mvns	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cfc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	fa01 f303 	lsl.w	r3, r1, r3
 8001d06:	43d9      	mvns	r1, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	4313      	orrs	r3, r2
         );
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3724      	adds	r7, #36	@ 0x24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d2c:	d301      	bcc.n	8001d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00f      	b.n	8001d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d32:	4a0a      	ldr	r2, [pc, #40]	@ (8001d5c <SysTick_Config+0x40>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3a:	210f      	movs	r1, #15
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d40:	f7ff ff8e 	bl	8001c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d44:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <SysTick_Config+0x40>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4a:	4b04      	ldr	r3, [pc, #16]	@ (8001d5c <SysTick_Config+0x40>)
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	e000e010 	.word	0xe000e010

08001d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ff29 	bl	8001bc0 <__NVIC_SetPriorityGrouping>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
 8001d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d88:	f7ff ff3e 	bl	8001c08 <__NVIC_GetPriorityGrouping>
 8001d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	6978      	ldr	r0, [r7, #20]
 8001d94:	f7ff ff8e 	bl	8001cb4 <NVIC_EncodePriority>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff5d 	bl	8001c60 <__NVIC_SetPriority>
}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff31 	bl	8001c24 <__NVIC_EnableIRQ>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff ffa2 	bl	8001d1c <SysTick_Config>
 8001dd8:	4603      	mov	r3, r0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001df0:	f7ff feda 	bl	8001ba8 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e099      	b.n	8001f34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0201 	bic.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e20:	e00f      	b.n	8001e42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e22:	f7ff fec1 	bl	8001ba8 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b05      	cmp	r3, #5
 8001e2e:	d908      	bls.n	8001e42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2220      	movs	r2, #32
 8001e34:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2203      	movs	r2, #3
 8001e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e078      	b.n	8001f34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1e8      	bne.n	8001e22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	4b38      	ldr	r3, [pc, #224]	@ (8001f3c <HAL_DMA_Init+0x158>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d107      	bne.n	8001eac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f023 0307 	bic.w	r3, r3, #7
 8001ec2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d117      	bne.n	8001f06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00e      	beq.n	8001f06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 fa6f 	bl	80023cc <DMA_CheckFifoParam>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d008      	beq.n	8001f06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2240      	movs	r2, #64	@ 0x40
 8001ef8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f02:	2301      	movs	r3, #1
 8001f04:	e016      	b.n	8001f34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 fa26 	bl	8002360 <DMA_CalcBaseAndBitshift>
 8001f14:	4603      	mov	r3, r0
 8001f16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f1c:	223f      	movs	r2, #63	@ 0x3f
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	f010803f 	.word	0xf010803f

08001f40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
 8001f4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_DMA_Start_IT+0x26>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e040      	b.n	8001fe8 <HAL_DMA_Start_IT+0xa8>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d12f      	bne.n	8001fda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	68b9      	ldr	r1, [r7, #8]
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 f9b8 	bl	8002304 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f98:	223f      	movs	r2, #63	@ 0x3f
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0216 	orr.w	r2, r2, #22
 8001fae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d007      	beq.n	8001fc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0208 	orr.w	r2, r2, #8
 8001fc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0201 	orr.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	e005      	b.n	8001fe6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ffc:	4b8e      	ldr	r3, [pc, #568]	@ (8002238 <HAL_DMA_IRQHandler+0x248>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a8e      	ldr	r2, [pc, #568]	@ (800223c <HAL_DMA_IRQHandler+0x24c>)
 8002002:	fba2 2303 	umull	r2, r3, r2, r3
 8002006:	0a9b      	lsrs	r3, r3, #10
 8002008:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201a:	2208      	movs	r2, #8
 800201c:	409a      	lsls	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4013      	ands	r3, r2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d01a      	beq.n	800205c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d013      	beq.n	800205c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0204 	bic.w	r2, r2, #4
 8002042:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002048:	2208      	movs	r2, #8
 800204a:	409a      	lsls	r2, r3
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002054:	f043 0201 	orr.w	r2, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002060:	2201      	movs	r2, #1
 8002062:	409a      	lsls	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4013      	ands	r3, r2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d012      	beq.n	8002092 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00b      	beq.n	8002092 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800207e:	2201      	movs	r2, #1
 8002080:	409a      	lsls	r2, r3
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208a:	f043 0202 	orr.w	r2, r3, #2
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002096:	2204      	movs	r2, #4
 8002098:	409a      	lsls	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d012      	beq.n	80020c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00b      	beq.n	80020c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b4:	2204      	movs	r2, #4
 80020b6:	409a      	lsls	r2, r3
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c0:	f043 0204 	orr.w	r2, r3, #4
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020cc:	2210      	movs	r2, #16
 80020ce:	409a      	lsls	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d043      	beq.n	8002160 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d03c      	beq.n	8002160 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ea:	2210      	movs	r2, #16
 80020ec:	409a      	lsls	r2, r3
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d018      	beq.n	8002132 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d108      	bne.n	8002120 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	d024      	beq.n	8002160 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	4798      	blx	r3
 800211e:	e01f      	b.n	8002160 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01b      	beq.n	8002160 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	4798      	blx	r3
 8002130:	e016      	b.n	8002160 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800213c:	2b00      	cmp	r3, #0
 800213e:	d107      	bne.n	8002150 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0208 	bic.w	r2, r2, #8
 800214e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002164:	2220      	movs	r2, #32
 8002166:	409a      	lsls	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 808f 	beq.w	8002290 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0310 	and.w	r3, r3, #16
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 8087 	beq.w	8002290 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002186:	2220      	movs	r2, #32
 8002188:	409a      	lsls	r2, r3
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b05      	cmp	r3, #5
 8002198:	d136      	bne.n	8002208 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0216 	bic.w	r2, r2, #22
 80021a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695a      	ldr	r2, [r3, #20]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d103      	bne.n	80021ca <HAL_DMA_IRQHandler+0x1da>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d007      	beq.n	80021da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0208 	bic.w	r2, r2, #8
 80021d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021de:	223f      	movs	r2, #63	@ 0x3f
 80021e0:	409a      	lsls	r2, r3
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d07e      	beq.n	80022fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	4798      	blx	r3
        }
        return;
 8002206:	e079      	b.n	80022fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d01d      	beq.n	8002252 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10d      	bne.n	8002240 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002228:	2b00      	cmp	r3, #0
 800222a:	d031      	beq.n	8002290 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	4798      	blx	r3
 8002234:	e02c      	b.n	8002290 <HAL_DMA_IRQHandler+0x2a0>
 8002236:	bf00      	nop
 8002238:	20000000 	.word	0x20000000
 800223c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002244:	2b00      	cmp	r3, #0
 8002246:	d023      	beq.n	8002290 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4798      	blx	r3
 8002250:	e01e      	b.n	8002290 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10f      	bne.n	8002280 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0210 	bic.w	r2, r2, #16
 800226e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002294:	2b00      	cmp	r3, #0
 8002296:	d032      	beq.n	80022fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d022      	beq.n	80022ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2205      	movs	r2, #5
 80022a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0201 	bic.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	3301      	adds	r3, #1
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d307      	bcc.n	80022d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f2      	bne.n	80022bc <HAL_DMA_IRQHandler+0x2cc>
 80022d6:	e000      	b.n	80022da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	4798      	blx	r3
 80022fa:	e000      	b.n	80022fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80022fc:	bf00      	nop
    }
  }
}
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002320:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b40      	cmp	r3, #64	@ 0x40
 8002330:	d108      	bne.n	8002344 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002342:	e007      	b.n	8002354 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	60da      	str	r2, [r3, #12]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	3b10      	subs	r3, #16
 8002370:	4a14      	ldr	r2, [pc, #80]	@ (80023c4 <DMA_CalcBaseAndBitshift+0x64>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	091b      	lsrs	r3, r3, #4
 8002378:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800237a:	4a13      	ldr	r2, [pc, #76]	@ (80023c8 <DMA_CalcBaseAndBitshift+0x68>)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4413      	add	r3, r2
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b03      	cmp	r3, #3
 800238c:	d909      	bls.n	80023a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002396:	f023 0303 	bic.w	r3, r3, #3
 800239a:	1d1a      	adds	r2, r3, #4
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	659a      	str	r2, [r3, #88]	@ 0x58
 80023a0:	e007      	b.n	80023b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023aa:	f023 0303 	bic.w	r3, r3, #3
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	aaaaaaab 	.word	0xaaaaaaab
 80023c8:	08004f2c 	.word	0x08004f2c

080023cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d11f      	bne.n	8002426 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d856      	bhi.n	800249a <DMA_CheckFifoParam+0xce>
 80023ec:	a201      	add	r2, pc, #4	@ (adr r2, 80023f4 <DMA_CheckFifoParam+0x28>)
 80023ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f2:	bf00      	nop
 80023f4:	08002405 	.word	0x08002405
 80023f8:	08002417 	.word	0x08002417
 80023fc:	08002405 	.word	0x08002405
 8002400:	0800249b 	.word	0x0800249b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002408:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d046      	beq.n	800249e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002414:	e043      	b.n	800249e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800241e:	d140      	bne.n	80024a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002424:	e03d      	b.n	80024a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800242e:	d121      	bne.n	8002474 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b03      	cmp	r3, #3
 8002434:	d837      	bhi.n	80024a6 <DMA_CheckFifoParam+0xda>
 8002436:	a201      	add	r2, pc, #4	@ (adr r2, 800243c <DMA_CheckFifoParam+0x70>)
 8002438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243c:	0800244d 	.word	0x0800244d
 8002440:	08002453 	.word	0x08002453
 8002444:	0800244d 	.word	0x0800244d
 8002448:	08002465 	.word	0x08002465
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
      break;
 8002450:	e030      	b.n	80024b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002456:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d025      	beq.n	80024aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002462:	e022      	b.n	80024aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002468:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800246c:	d11f      	bne.n	80024ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002472:	e01c      	b.n	80024ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d903      	bls.n	8002482 <DMA_CheckFifoParam+0xb6>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b03      	cmp	r3, #3
 800247e:	d003      	beq.n	8002488 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002480:	e018      	b.n	80024b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
      break;
 8002486:	e015      	b.n	80024b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00e      	beq.n	80024b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
      break;
 8002498:	e00b      	b.n	80024b2 <DMA_CheckFifoParam+0xe6>
      break;
 800249a:	bf00      	nop
 800249c:	e00a      	b.n	80024b4 <DMA_CheckFifoParam+0xe8>
      break;
 800249e:	bf00      	nop
 80024a0:	e008      	b.n	80024b4 <DMA_CheckFifoParam+0xe8>
      break;
 80024a2:	bf00      	nop
 80024a4:	e006      	b.n	80024b4 <DMA_CheckFifoParam+0xe8>
      break;
 80024a6:	bf00      	nop
 80024a8:	e004      	b.n	80024b4 <DMA_CheckFifoParam+0xe8>
      break;
 80024aa:	bf00      	nop
 80024ac:	e002      	b.n	80024b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80024ae:	bf00      	nop
 80024b0:	e000      	b.n	80024b4 <DMA_CheckFifoParam+0xe8>
      break;
 80024b2:	bf00      	nop
    }
  } 
  
  return status; 
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop

080024c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b089      	sub	sp, #36	@ 0x24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
 80024de:	e165      	b.n	80027ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024e0:	2201      	movs	r2, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	f040 8154 	bne.w	80027a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b01      	cmp	r3, #1
 8002508:	d005      	beq.n	8002516 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002512:	2b02      	cmp	r3, #2
 8002514:	d130      	bne.n	8002578 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2203      	movs	r2, #3
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800254c:	2201      	movs	r2, #1
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f003 0201 	and.w	r2, r3, #1
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b03      	cmp	r3, #3
 8002582:	d017      	beq.n	80025b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d123      	bne.n	8002608 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	08da      	lsrs	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3208      	adds	r2, #8
 80025c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	220f      	movs	r2, #15
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	08da      	lsrs	r2, r3, #3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3208      	adds	r2, #8
 8002602:	69b9      	ldr	r1, [r7, #24]
 8002604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	2203      	movs	r2, #3
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0203 	and.w	r2, r3, #3
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80ae 	beq.w	80027a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	4b5d      	ldr	r3, [pc, #372]	@ (80027c4 <HAL_GPIO_Init+0x300>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002652:	4a5c      	ldr	r2, [pc, #368]	@ (80027c4 <HAL_GPIO_Init+0x300>)
 8002654:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002658:	6453      	str	r3, [r2, #68]	@ 0x44
 800265a:	4b5a      	ldr	r3, [pc, #360]	@ (80027c4 <HAL_GPIO_Init+0x300>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002666:	4a58      	ldr	r2, [pc, #352]	@ (80027c8 <HAL_GPIO_Init+0x304>)
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	3302      	adds	r3, #2
 800266e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	220f      	movs	r2, #15
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a4f      	ldr	r2, [pc, #316]	@ (80027cc <HAL_GPIO_Init+0x308>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d025      	beq.n	80026de <HAL_GPIO_Init+0x21a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a4e      	ldr	r2, [pc, #312]	@ (80027d0 <HAL_GPIO_Init+0x30c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d01f      	beq.n	80026da <HAL_GPIO_Init+0x216>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4d      	ldr	r2, [pc, #308]	@ (80027d4 <HAL_GPIO_Init+0x310>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d019      	beq.n	80026d6 <HAL_GPIO_Init+0x212>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a4c      	ldr	r2, [pc, #304]	@ (80027d8 <HAL_GPIO_Init+0x314>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d013      	beq.n	80026d2 <HAL_GPIO_Init+0x20e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a4b      	ldr	r2, [pc, #300]	@ (80027dc <HAL_GPIO_Init+0x318>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d00d      	beq.n	80026ce <HAL_GPIO_Init+0x20a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a4a      	ldr	r2, [pc, #296]	@ (80027e0 <HAL_GPIO_Init+0x31c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d007      	beq.n	80026ca <HAL_GPIO_Init+0x206>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a49      	ldr	r2, [pc, #292]	@ (80027e4 <HAL_GPIO_Init+0x320>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d101      	bne.n	80026c6 <HAL_GPIO_Init+0x202>
 80026c2:	2306      	movs	r3, #6
 80026c4:	e00c      	b.n	80026e0 <HAL_GPIO_Init+0x21c>
 80026c6:	2307      	movs	r3, #7
 80026c8:	e00a      	b.n	80026e0 <HAL_GPIO_Init+0x21c>
 80026ca:	2305      	movs	r3, #5
 80026cc:	e008      	b.n	80026e0 <HAL_GPIO_Init+0x21c>
 80026ce:	2304      	movs	r3, #4
 80026d0:	e006      	b.n	80026e0 <HAL_GPIO_Init+0x21c>
 80026d2:	2303      	movs	r3, #3
 80026d4:	e004      	b.n	80026e0 <HAL_GPIO_Init+0x21c>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e002      	b.n	80026e0 <HAL_GPIO_Init+0x21c>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <HAL_GPIO_Init+0x21c>
 80026de:	2300      	movs	r3, #0
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	f002 0203 	and.w	r2, r2, #3
 80026e6:	0092      	lsls	r2, r2, #2
 80026e8:	4093      	lsls	r3, r2
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026f0:	4935      	ldr	r1, [pc, #212]	@ (80027c8 <HAL_GPIO_Init+0x304>)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	3302      	adds	r3, #2
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026fe:	4b3a      	ldr	r3, [pc, #232]	@ (80027e8 <HAL_GPIO_Init+0x324>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002722:	4a31      	ldr	r2, [pc, #196]	@ (80027e8 <HAL_GPIO_Init+0x324>)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002728:	4b2f      	ldr	r3, [pc, #188]	@ (80027e8 <HAL_GPIO_Init+0x324>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800274c:	4a26      	ldr	r2, [pc, #152]	@ (80027e8 <HAL_GPIO_Init+0x324>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002752:	4b25      	ldr	r3, [pc, #148]	@ (80027e8 <HAL_GPIO_Init+0x324>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002776:	4a1c      	ldr	r2, [pc, #112]	@ (80027e8 <HAL_GPIO_Init+0x324>)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800277c:	4b1a      	ldr	r3, [pc, #104]	@ (80027e8 <HAL_GPIO_Init+0x324>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027a0:	4a11      	ldr	r2, [pc, #68]	@ (80027e8 <HAL_GPIO_Init+0x324>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3301      	adds	r3, #1
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2b0f      	cmp	r3, #15
 80027b0:	f67f ae96 	bls.w	80024e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	3724      	adds	r7, #36	@ 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40013800 	.word	0x40013800
 80027cc:	40020000 	.word	0x40020000
 80027d0:	40020400 	.word	0x40020400
 80027d4:	40020800 	.word	0x40020800
 80027d8:	40020c00 	.word	0x40020c00
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40021400 	.word	0x40021400
 80027e4:	40021800 	.word	0x40021800
 80027e8:	40013c00 	.word	0x40013c00

080027ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0cc      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002800:	4b68      	ldr	r3, [pc, #416]	@ (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 030f 	and.w	r3, r3, #15
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d90c      	bls.n	8002828 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b65      	ldr	r3, [pc, #404]	@ (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b63      	ldr	r3, [pc, #396]	@ (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0b8      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d020      	beq.n	8002876 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002840:	4b59      	ldr	r3, [pc, #356]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4a58      	ldr	r2, [pc, #352]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800284a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002858:	4b53      	ldr	r3, [pc, #332]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	4a52      	ldr	r2, [pc, #328]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002862:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002864:	4b50      	ldr	r3, [pc, #320]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	494d      	ldr	r1, [pc, #308]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d044      	beq.n	800290c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d107      	bne.n	800289a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288a:	4b47      	ldr	r3, [pc, #284]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d119      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e07f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d003      	beq.n	80028aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028aa:	4b3f      	ldr	r3, [pc, #252]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e06f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ba:	4b3b      	ldr	r3, [pc, #236]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e067      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ca:	4b37      	ldr	r3, [pc, #220]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f023 0203 	bic.w	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	4934      	ldr	r1, [pc, #208]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028dc:	f7ff f964 	bl	8001ba8 <HAL_GetTick>
 80028e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e4:	f7ff f960 	bl	8001ba8 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e04f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fa:	4b2b      	ldr	r3, [pc, #172]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 020c 	and.w	r2, r3, #12
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	429a      	cmp	r2, r3
 800290a:	d1eb      	bne.n	80028e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800290c:	4b25      	ldr	r3, [pc, #148]	@ (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d20c      	bcs.n	8002934 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b22      	ldr	r3, [pc, #136]	@ (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b20      	ldr	r3, [pc, #128]	@ (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e032      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002940:	4b19      	ldr	r3, [pc, #100]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4916      	ldr	r1, [pc, #88]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	4313      	orrs	r3, r2
 8002950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800295e:	4b12      	ldr	r3, [pc, #72]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	490e      	ldr	r1, [pc, #56]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002972:	f000 f821 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8002976:	4602      	mov	r2, r0
 8002978:	4b0b      	ldr	r3, [pc, #44]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	490a      	ldr	r1, [pc, #40]	@ (80029ac <HAL_RCC_ClockConfig+0x1c0>)
 8002984:	5ccb      	ldrb	r3, [r1, r3]
 8002986:	fa22 f303 	lsr.w	r3, r2, r3
 800298a:	4a09      	ldr	r2, [pc, #36]	@ (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800298e:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff f8c4 	bl	8001b20 <HAL_InitTick>

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40023c00 	.word	0x40023c00
 80029a8:	40023800 	.word	0x40023800
 80029ac:	08004f1c 	.word	0x08004f1c
 80029b0:	20000000 	.word	0x20000000
 80029b4:	20000004 	.word	0x20000004

080029b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029bc:	b0ae      	sub	sp, #184	@ 0xb8
 80029be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029de:	4bcb      	ldr	r3, [pc, #812]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x354>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b0c      	cmp	r3, #12
 80029e8:	f200 8204 	bhi.w	8002df4 <HAL_RCC_GetSysClockFreq+0x43c>
 80029ec:	a201      	add	r2, pc, #4	@ (adr r2, 80029f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80029ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f2:	bf00      	nop
 80029f4:	08002a29 	.word	0x08002a29
 80029f8:	08002df5 	.word	0x08002df5
 80029fc:	08002df5 	.word	0x08002df5
 8002a00:	08002df5 	.word	0x08002df5
 8002a04:	08002a31 	.word	0x08002a31
 8002a08:	08002df5 	.word	0x08002df5
 8002a0c:	08002df5 	.word	0x08002df5
 8002a10:	08002df5 	.word	0x08002df5
 8002a14:	08002a39 	.word	0x08002a39
 8002a18:	08002df5 	.word	0x08002df5
 8002a1c:	08002df5 	.word	0x08002df5
 8002a20:	08002df5 	.word	0x08002df5
 8002a24:	08002c29 	.word	0x08002c29
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a28:	4bb9      	ldr	r3, [pc, #740]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002a2e:	e1e5      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a30:	4bb7      	ldr	r3, [pc, #732]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a36:	e1e1      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a38:	4bb4      	ldr	r3, [pc, #720]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a44:	4bb1      	ldr	r3, [pc, #708]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d071      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a50:	4bae      	ldr	r3, [pc, #696]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	099b      	lsrs	r3, r3, #6
 8002a56:	2200      	movs	r2, #0
 8002a58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a5c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002a60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002a72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a76:	4622      	mov	r2, r4
 8002a78:	462b      	mov	r3, r5
 8002a7a:	f04f 0000 	mov.w	r0, #0
 8002a7e:	f04f 0100 	mov.w	r1, #0
 8002a82:	0159      	lsls	r1, r3, #5
 8002a84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a88:	0150      	lsls	r0, r2, #5
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4621      	mov	r1, r4
 8002a90:	1a51      	subs	r1, r2, r1
 8002a92:	6439      	str	r1, [r7, #64]	@ 0x40
 8002a94:	4629      	mov	r1, r5
 8002a96:	eb63 0301 	sbc.w	r3, r3, r1
 8002a9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002aa8:	4649      	mov	r1, r9
 8002aaa:	018b      	lsls	r3, r1, #6
 8002aac:	4641      	mov	r1, r8
 8002aae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ab2:	4641      	mov	r1, r8
 8002ab4:	018a      	lsls	r2, r1, #6
 8002ab6:	4641      	mov	r1, r8
 8002ab8:	1a51      	subs	r1, r2, r1
 8002aba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002abc:	4649      	mov	r1, r9
 8002abe:	eb63 0301 	sbc.w	r3, r3, r1
 8002ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002ad0:	4649      	mov	r1, r9
 8002ad2:	00cb      	lsls	r3, r1, #3
 8002ad4:	4641      	mov	r1, r8
 8002ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ada:	4641      	mov	r1, r8
 8002adc:	00ca      	lsls	r2, r1, #3
 8002ade:	4610      	mov	r0, r2
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	4622      	mov	r2, r4
 8002ae6:	189b      	adds	r3, r3, r2
 8002ae8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002aea:	462b      	mov	r3, r5
 8002aec:	460a      	mov	r2, r1
 8002aee:	eb42 0303 	adc.w	r3, r2, r3
 8002af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b00:	4629      	mov	r1, r5
 8002b02:	028b      	lsls	r3, r1, #10
 8002b04:	4621      	mov	r1, r4
 8002b06:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	028a      	lsls	r2, r1, #10
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b16:	2200      	movs	r2, #0
 8002b18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b20:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002b24:	f7fd ff8e 	bl	8000a44 <__aeabi_uldivmod>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b32:	e067      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b34:	4b75      	ldr	r3, [pc, #468]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	099b      	lsrs	r3, r3, #6
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b40:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002b44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b4e:	2300      	movs	r3, #0
 8002b50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002b52:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002b56:	4622      	mov	r2, r4
 8002b58:	462b      	mov	r3, r5
 8002b5a:	f04f 0000 	mov.w	r0, #0
 8002b5e:	f04f 0100 	mov.w	r1, #0
 8002b62:	0159      	lsls	r1, r3, #5
 8002b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b68:	0150      	lsls	r0, r2, #5
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4621      	mov	r1, r4
 8002b70:	1a51      	subs	r1, r2, r1
 8002b72:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002b74:	4629      	mov	r1, r5
 8002b76:	eb63 0301 	sbc.w	r3, r3, r1
 8002b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002b88:	4649      	mov	r1, r9
 8002b8a:	018b      	lsls	r3, r1, #6
 8002b8c:	4641      	mov	r1, r8
 8002b8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b92:	4641      	mov	r1, r8
 8002b94:	018a      	lsls	r2, r1, #6
 8002b96:	4641      	mov	r1, r8
 8002b98:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b9c:	4649      	mov	r1, r9
 8002b9e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bb6:	4692      	mov	sl, r2
 8002bb8:	469b      	mov	fp, r3
 8002bba:	4623      	mov	r3, r4
 8002bbc:	eb1a 0303 	adds.w	r3, sl, r3
 8002bc0:	623b      	str	r3, [r7, #32]
 8002bc2:	462b      	mov	r3, r5
 8002bc4:	eb4b 0303 	adc.w	r3, fp, r3
 8002bc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	028b      	lsls	r3, r1, #10
 8002bda:	4621      	mov	r1, r4
 8002bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002be0:	4621      	mov	r1, r4
 8002be2:	028a      	lsls	r2, r1, #10
 8002be4:	4610      	mov	r0, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bec:	2200      	movs	r2, #0
 8002bee:	673b      	str	r3, [r7, #112]	@ 0x70
 8002bf0:	677a      	str	r2, [r7, #116]	@ 0x74
 8002bf2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002bf6:	f7fd ff25 	bl	8000a44 <__aeabi_uldivmod>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4613      	mov	r3, r2
 8002c00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c04:	4b41      	ldr	r3, [pc, #260]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	0c1b      	lsrs	r3, r3, #16
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	3301      	adds	r3, #1
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002c16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c26:	e0e9      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c28:	4b38      	ldr	r3, [pc, #224]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c34:	4b35      	ldr	r3, [pc, #212]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d069      	beq.n	8002d14 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c40:	4b32      	ldr	r3, [pc, #200]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	099b      	lsrs	r3, r3, #6
 8002c46:	2200      	movs	r2, #0
 8002c48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c52:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c54:	2300      	movs	r3, #0
 8002c56:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c58:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002c5c:	4622      	mov	r2, r4
 8002c5e:	462b      	mov	r3, r5
 8002c60:	f04f 0000 	mov.w	r0, #0
 8002c64:	f04f 0100 	mov.w	r1, #0
 8002c68:	0159      	lsls	r1, r3, #5
 8002c6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c6e:	0150      	lsls	r0, r2, #5
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4621      	mov	r1, r4
 8002c76:	1a51      	subs	r1, r2, r1
 8002c78:	61b9      	str	r1, [r7, #24]
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	eb63 0301 	sbc.w	r3, r3, r1
 8002c80:	61fb      	str	r3, [r7, #28]
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002c8e:	4659      	mov	r1, fp
 8002c90:	018b      	lsls	r3, r1, #6
 8002c92:	4651      	mov	r1, sl
 8002c94:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c98:	4651      	mov	r1, sl
 8002c9a:	018a      	lsls	r2, r1, #6
 8002c9c:	4651      	mov	r1, sl
 8002c9e:	ebb2 0801 	subs.w	r8, r2, r1
 8002ca2:	4659      	mov	r1, fp
 8002ca4:	eb63 0901 	sbc.w	r9, r3, r1
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cb4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cb8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cbc:	4690      	mov	r8, r2
 8002cbe:	4699      	mov	r9, r3
 8002cc0:	4623      	mov	r3, r4
 8002cc2:	eb18 0303 	adds.w	r3, r8, r3
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	462b      	mov	r3, r5
 8002cca:	eb49 0303 	adc.w	r3, r9, r3
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002cdc:	4629      	mov	r1, r5
 8002cde:	028b      	lsls	r3, r1, #10
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	028a      	lsls	r2, r1, #10
 8002cea:	4610      	mov	r0, r2
 8002cec:	4619      	mov	r1, r3
 8002cee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002cf6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002cf8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002cfc:	f7fd fea2 	bl	8000a44 <__aeabi_uldivmod>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4613      	mov	r3, r2
 8002d06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d0a:	e063      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x41c>
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d14:	4b3d      	ldr	r3, [pc, #244]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x454>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	099b      	lsrs	r3, r3, #6
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	4611      	mov	r1, r2
 8002d20:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d24:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d26:	2300      	movs	r3, #0
 8002d28:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d2a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002d2e:	4642      	mov	r2, r8
 8002d30:	464b      	mov	r3, r9
 8002d32:	f04f 0000 	mov.w	r0, #0
 8002d36:	f04f 0100 	mov.w	r1, #0
 8002d3a:	0159      	lsls	r1, r3, #5
 8002d3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d40:	0150      	lsls	r0, r2, #5
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4641      	mov	r1, r8
 8002d48:	1a51      	subs	r1, r2, r1
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	4649      	mov	r1, r9
 8002d4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002d60:	4659      	mov	r1, fp
 8002d62:	018b      	lsls	r3, r1, #6
 8002d64:	4651      	mov	r1, sl
 8002d66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d6a:	4651      	mov	r1, sl
 8002d6c:	018a      	lsls	r2, r1, #6
 8002d6e:	4651      	mov	r1, sl
 8002d70:	1a54      	subs	r4, r2, r1
 8002d72:	4659      	mov	r1, fp
 8002d74:	eb63 0501 	sbc.w	r5, r3, r1
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	00eb      	lsls	r3, r5, #3
 8002d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d86:	00e2      	lsls	r2, r4, #3
 8002d88:	4614      	mov	r4, r2
 8002d8a:	461d      	mov	r5, r3
 8002d8c:	4643      	mov	r3, r8
 8002d8e:	18e3      	adds	r3, r4, r3
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	464b      	mov	r3, r9
 8002d94:	eb45 0303 	adc.w	r3, r5, r3
 8002d98:	607b      	str	r3, [r7, #4]
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002da6:	4629      	mov	r1, r5
 8002da8:	028b      	lsls	r3, r1, #10
 8002daa:	4621      	mov	r1, r4
 8002dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002db0:	4621      	mov	r1, r4
 8002db2:	028a      	lsls	r2, r1, #10
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dc0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002dc2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002dc6:	f7fd fe3d 	bl	8000a44 <__aeabi_uldivmod>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4613      	mov	r3, r2
 8002dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x454>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	0f1b      	lsrs	r3, r3, #28
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002de2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002de6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002df2:	e003      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002df4:	4b06      	ldr	r3, [pc, #24]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x458>)
 8002df6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002dfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	37b8      	adds	r7, #184	@ 0xb8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	00f42400 	.word	0x00f42400

08002e14 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e28d      	b.n	8003342 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 8083 	beq.w	8002f3a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e34:	4b94      	ldr	r3, [pc, #592]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 030c 	and.w	r3, r3, #12
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d019      	beq.n	8002e74 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e40:	4b91      	ldr	r3, [pc, #580]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d106      	bne.n	8002e5a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e4c:	4b8e      	ldr	r3, [pc, #568]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e58:	d00c      	beq.n	8002e74 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e5a:	4b8b      	ldr	r3, [pc, #556]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	d112      	bne.n	8002e8c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e66:	4b88      	ldr	r3, [pc, #544]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e72:	d10b      	bne.n	8002e8c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e74:	4b84      	ldr	r3, [pc, #528]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d05b      	beq.n	8002f38 <HAL_RCC_OscConfig+0x124>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d157      	bne.n	8002f38 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e25a      	b.n	8003342 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e94:	d106      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x90>
 8002e96:	4b7c      	ldr	r3, [pc, #496]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a7b      	ldr	r2, [pc, #492]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	e01d      	b.n	8002ee0 <HAL_RCC_OscConfig+0xcc>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002eac:	d10c      	bne.n	8002ec8 <HAL_RCC_OscConfig+0xb4>
 8002eae:	4b76      	ldr	r3, [pc, #472]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a75      	ldr	r2, [pc, #468]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	4b73      	ldr	r3, [pc, #460]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a72      	ldr	r2, [pc, #456]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	e00b      	b.n	8002ee0 <HAL_RCC_OscConfig+0xcc>
 8002ec8:	4b6f      	ldr	r3, [pc, #444]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a6e      	ldr	r2, [pc, #440]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	4b6c      	ldr	r3, [pc, #432]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a6b      	ldr	r2, [pc, #428]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d013      	beq.n	8002f10 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7fe fe5e 	bl	8001ba8 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ef0:	f7fe fe5a 	bl	8001ba8 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b64      	cmp	r3, #100	@ 0x64
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e21f      	b.n	8003342 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f02:	4b61      	ldr	r3, [pc, #388]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0xdc>
 8002f0e:	e014      	b.n	8002f3a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7fe fe4a 	bl	8001ba8 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f18:	f7fe fe46 	bl	8001ba8 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	@ 0x64
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e20b      	b.n	8003342 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2a:	4b57      	ldr	r3, [pc, #348]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x104>
 8002f36:	e000      	b.n	8002f3a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d06f      	beq.n	8003026 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f46:	4b50      	ldr	r3, [pc, #320]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d017      	beq.n	8002f82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f52:	4b4d      	ldr	r3, [pc, #308]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d105      	bne.n	8002f6a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f5e:	4b4a      	ldr	r3, [pc, #296]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00b      	beq.n	8002f82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f6a:	4b47      	ldr	r3, [pc, #284]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f72:	2b0c      	cmp	r3, #12
 8002f74:	d11c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f76:	4b44      	ldr	r3, [pc, #272]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d116      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f82:	4b41      	ldr	r3, [pc, #260]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <HAL_RCC_OscConfig+0x186>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d001      	beq.n	8002f9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e1d3      	b.n	8003342 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4937      	ldr	r1, [pc, #220]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fae:	e03a      	b.n	8003026 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d020      	beq.n	8002ffa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fb8:	4b34      	ldr	r3, [pc, #208]	@ (800308c <HAL_RCC_OscConfig+0x278>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbe:	f7fe fdf3 	bl	8001ba8 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fc6:	f7fe fdef 	bl	8001ba8 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e1b4      	b.n	8003342 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe4:	4b28      	ldr	r3, [pc, #160]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4925      	ldr	r1, [pc, #148]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	600b      	str	r3, [r1, #0]
 8002ff8:	e015      	b.n	8003026 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ffa:	4b24      	ldr	r3, [pc, #144]	@ (800308c <HAL_RCC_OscConfig+0x278>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fe fdd2 	bl	8001ba8 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003008:	f7fe fdce 	bl	8001ba8 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e193      	b.n	8003342 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301a:	4b1b      	ldr	r3, [pc, #108]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d036      	beq.n	80030a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d016      	beq.n	8003068 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800303a:	4b15      	ldr	r3, [pc, #84]	@ (8003090 <HAL_RCC_OscConfig+0x27c>)
 800303c:	2201      	movs	r2, #1
 800303e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003040:	f7fe fdb2 	bl	8001ba8 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003048:	f7fe fdae 	bl	8001ba8 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e173      	b.n	8003342 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305a:	4b0b      	ldr	r3, [pc, #44]	@ (8003088 <HAL_RCC_OscConfig+0x274>)
 800305c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x234>
 8003066:	e01b      	b.n	80030a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003068:	4b09      	ldr	r3, [pc, #36]	@ (8003090 <HAL_RCC_OscConfig+0x27c>)
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306e:	f7fe fd9b 	bl	8001ba8 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003074:	e00e      	b.n	8003094 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003076:	f7fe fd97 	bl	8001ba8 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d907      	bls.n	8003094 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e15c      	b.n	8003342 <HAL_RCC_OscConfig+0x52e>
 8003088:	40023800 	.word	0x40023800
 800308c:	42470000 	.word	0x42470000
 8003090:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003094:	4b8a      	ldr	r3, [pc, #552]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 8003096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1ea      	bne.n	8003076 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 8097 	beq.w	80031dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ae:	2300      	movs	r3, #0
 80030b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b2:	4b83      	ldr	r3, [pc, #524]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10f      	bne.n	80030de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	4b7f      	ldr	r3, [pc, #508]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	4a7e      	ldr	r2, [pc, #504]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 80030c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ce:	4b7c      	ldr	r3, [pc, #496]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030da:	2301      	movs	r3, #1
 80030dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030de:	4b79      	ldr	r3, [pc, #484]	@ (80032c4 <HAL_RCC_OscConfig+0x4b0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d118      	bne.n	800311c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ea:	4b76      	ldr	r3, [pc, #472]	@ (80032c4 <HAL_RCC_OscConfig+0x4b0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a75      	ldr	r2, [pc, #468]	@ (80032c4 <HAL_RCC_OscConfig+0x4b0>)
 80030f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f6:	f7fe fd57 	bl	8001ba8 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030fe:	f7fe fd53 	bl	8001ba8 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e118      	b.n	8003342 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003110:	4b6c      	ldr	r3, [pc, #432]	@ (80032c4 <HAL_RCC_OscConfig+0x4b0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d106      	bne.n	8003132 <HAL_RCC_OscConfig+0x31e>
 8003124:	4b66      	ldr	r3, [pc, #408]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 8003126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003128:	4a65      	ldr	r2, [pc, #404]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003130:	e01c      	b.n	800316c <HAL_RCC_OscConfig+0x358>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b05      	cmp	r3, #5
 8003138:	d10c      	bne.n	8003154 <HAL_RCC_OscConfig+0x340>
 800313a:	4b61      	ldr	r3, [pc, #388]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 800313c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800313e:	4a60      	ldr	r2, [pc, #384]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 8003140:	f043 0304 	orr.w	r3, r3, #4
 8003144:	6713      	str	r3, [r2, #112]	@ 0x70
 8003146:	4b5e      	ldr	r3, [pc, #376]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 8003148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800314a:	4a5d      	ldr	r2, [pc, #372]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	6713      	str	r3, [r2, #112]	@ 0x70
 8003152:	e00b      	b.n	800316c <HAL_RCC_OscConfig+0x358>
 8003154:	4b5a      	ldr	r3, [pc, #360]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 8003156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003158:	4a59      	ldr	r2, [pc, #356]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 800315a:	f023 0301 	bic.w	r3, r3, #1
 800315e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003160:	4b57      	ldr	r3, [pc, #348]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 8003162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003164:	4a56      	ldr	r2, [pc, #344]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 8003166:	f023 0304 	bic.w	r3, r3, #4
 800316a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d015      	beq.n	80031a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003174:	f7fe fd18 	bl	8001ba8 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317a:	e00a      	b.n	8003192 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800317c:	f7fe fd14 	bl	8001ba8 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e0d7      	b.n	8003342 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003192:	4b4b      	ldr	r3, [pc, #300]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0ee      	beq.n	800317c <HAL_RCC_OscConfig+0x368>
 800319e:	e014      	b.n	80031ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a0:	f7fe fd02 	bl	8001ba8 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a6:	e00a      	b.n	80031be <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a8:	f7fe fcfe 	bl	8001ba8 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e0c1      	b.n	8003342 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031be:	4b40      	ldr	r3, [pc, #256]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 80031c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1ee      	bne.n	80031a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031ca:	7dfb      	ldrb	r3, [r7, #23]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d105      	bne.n	80031dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d0:	4b3b      	ldr	r3, [pc, #236]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	4a3a      	ldr	r2, [pc, #232]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 80031d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 80ad 	beq.w	8003340 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031e6:	4b36      	ldr	r3, [pc, #216]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d060      	beq.n	80032b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d145      	bne.n	8003286 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fa:	4b33      	ldr	r3, [pc, #204]	@ (80032c8 <HAL_RCC_OscConfig+0x4b4>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fe fcd2 	bl	8001ba8 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003208:	f7fe fcce 	bl	8001ba8 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e093      	b.n	8003342 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321a:	4b29      	ldr	r3, [pc, #164]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69da      	ldr	r2, [r3, #28]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003234:	019b      	lsls	r3, r3, #6
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323c:	085b      	lsrs	r3, r3, #1
 800323e:	3b01      	subs	r3, #1
 8003240:	041b      	lsls	r3, r3, #16
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003248:	061b      	lsls	r3, r3, #24
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003250:	071b      	lsls	r3, r3, #28
 8003252:	491b      	ldr	r1, [pc, #108]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 8003254:	4313      	orrs	r3, r2
 8003256:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003258:	4b1b      	ldr	r3, [pc, #108]	@ (80032c8 <HAL_RCC_OscConfig+0x4b4>)
 800325a:	2201      	movs	r2, #1
 800325c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325e:	f7fe fca3 	bl	8001ba8 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003266:	f7fe fc9f 	bl	8001ba8 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e064      	b.n	8003342 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003278:	4b11      	ldr	r3, [pc, #68]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0f0      	beq.n	8003266 <HAL_RCC_OscConfig+0x452>
 8003284:	e05c      	b.n	8003340 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003286:	4b10      	ldr	r3, [pc, #64]	@ (80032c8 <HAL_RCC_OscConfig+0x4b4>)
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fe fc8c 	bl	8001ba8 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003294:	f7fe fc88 	bl	8001ba8 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e04d      	b.n	8003342 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a6:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <HAL_RCC_OscConfig+0x4ac>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x480>
 80032b2:	e045      	b.n	8003340 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d107      	bne.n	80032cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e040      	b.n	8003342 <HAL_RCC_OscConfig+0x52e>
 80032c0:	40023800 	.word	0x40023800
 80032c4:	40007000 	.word	0x40007000
 80032c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032cc:	4b1f      	ldr	r3, [pc, #124]	@ (800334c <HAL_RCC_OscConfig+0x538>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d030      	beq.n	800333c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d129      	bne.n	800333c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d122      	bne.n	800333c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032fc:	4013      	ands	r3, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003302:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003304:	4293      	cmp	r3, r2
 8003306:	d119      	bne.n	800333c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	3b01      	subs	r3, #1
 8003316:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003318:	429a      	cmp	r2, r3
 800331a:	d10f      	bne.n	800333c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003326:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003328:	429a      	cmp	r2, r3
 800332a:	d107      	bne.n	800333c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800

08003350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e041      	b.n	80033e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fe f862 	bl	8001440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3304      	adds	r3, #4
 800338c:	4619      	mov	r1, r3
 800338e:	4610      	mov	r0, r2
 8003390:	f000 fcbc 	bl	8003d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e041      	b.n	8003484 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d106      	bne.n	800341a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f839 	bl	800348c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2202      	movs	r2, #2
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3304      	adds	r3, #4
 800342a:	4619      	mov	r1, r3
 800342c:	4610      	mov	r0, r2
 800342e:	f000 fc6d 	bl	8003d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d109      	bne.n	80034cc <HAL_TIM_PWM_Start_DMA+0x2c>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	e022      	b.n	8003512 <HAL_TIM_PWM_Start_DMA+0x72>
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d109      	bne.n	80034e6 <HAL_TIM_PWM_Start_DMA+0x46>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	bf0c      	ite	eq
 80034de:	2301      	moveq	r3, #1
 80034e0:	2300      	movne	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	e015      	b.n	8003512 <HAL_TIM_PWM_Start_DMA+0x72>
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d109      	bne.n	8003500 <HAL_TIM_PWM_Start_DMA+0x60>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	e008      	b.n	8003512 <HAL_TIM_PWM_Start_DMA+0x72>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	bf0c      	ite	eq
 800350c:	2301      	moveq	r3, #1
 800350e:	2300      	movne	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003516:	2302      	movs	r3, #2
 8003518:	e171      	b.n	80037fe <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d109      	bne.n	8003534 <HAL_TIM_PWM_Start_DMA+0x94>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	bf0c      	ite	eq
 800352c:	2301      	moveq	r3, #1
 800352e:	2300      	movne	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	e022      	b.n	800357a <HAL_TIM_PWM_Start_DMA+0xda>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b04      	cmp	r3, #4
 8003538:	d109      	bne.n	800354e <HAL_TIM_PWM_Start_DMA+0xae>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b01      	cmp	r3, #1
 8003544:	bf0c      	ite	eq
 8003546:	2301      	moveq	r3, #1
 8003548:	2300      	movne	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	e015      	b.n	800357a <HAL_TIM_PWM_Start_DMA+0xda>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b08      	cmp	r3, #8
 8003552:	d109      	bne.n	8003568 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	bf0c      	ite	eq
 8003560:	2301      	moveq	r3, #1
 8003562:	2300      	movne	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	e008      	b.n	800357a <HAL_TIM_PWM_Start_DMA+0xda>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	bf0c      	ite	eq
 8003574:	2301      	moveq	r3, #1
 8003576:	2300      	movne	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d024      	beq.n	80035c8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <HAL_TIM_PWM_Start_DMA+0xea>
 8003584:	887b      	ldrh	r3, [r7, #2]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e137      	b.n	80037fe <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d104      	bne.n	800359e <HAL_TIM_PWM_Start_DMA+0xfe>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800359c:	e016      	b.n	80035cc <HAL_TIM_PWM_Start_DMA+0x12c>
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d104      	bne.n	80035ae <HAL_TIM_PWM_Start_DMA+0x10e>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035ac:	e00e      	b.n	80035cc <HAL_TIM_PWM_Start_DMA+0x12c>
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d104      	bne.n	80035be <HAL_TIM_PWM_Start_DMA+0x11e>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035bc:	e006      	b.n	80035cc <HAL_TIM_PWM_Start_DMA+0x12c>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2202      	movs	r2, #2
 80035c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035c6:	e001      	b.n	80035cc <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e118      	b.n	80037fe <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b0c      	cmp	r3, #12
 80035d0:	f200 80ae 	bhi.w	8003730 <HAL_TIM_PWM_Start_DMA+0x290>
 80035d4:	a201      	add	r2, pc, #4	@ (adr r2, 80035dc <HAL_TIM_PWM_Start_DMA+0x13c>)
 80035d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035da:	bf00      	nop
 80035dc:	08003611 	.word	0x08003611
 80035e0:	08003731 	.word	0x08003731
 80035e4:	08003731 	.word	0x08003731
 80035e8:	08003731 	.word	0x08003731
 80035ec:	08003659 	.word	0x08003659
 80035f0:	08003731 	.word	0x08003731
 80035f4:	08003731 	.word	0x08003731
 80035f8:	08003731 	.word	0x08003731
 80035fc:	080036a1 	.word	0x080036a1
 8003600:	08003731 	.word	0x08003731
 8003604:	08003731 	.word	0x08003731
 8003608:	08003731 	.word	0x08003731
 800360c:	080036e9 	.word	0x080036e9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	4a7c      	ldr	r2, [pc, #496]	@ (8003808 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003616:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	4a7b      	ldr	r2, [pc, #492]	@ (800380c <HAL_TIM_PWM_Start_DMA+0x36c>)
 800361e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003624:	4a7a      	ldr	r2, [pc, #488]	@ (8003810 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003626:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3334      	adds	r3, #52	@ 0x34
 8003634:	461a      	mov	r2, r3
 8003636:	887b      	ldrh	r3, [r7, #2]
 8003638:	f7fe fc82 	bl	8001f40 <HAL_DMA_Start_IT>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e0db      	b.n	80037fe <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003654:	60da      	str	r2, [r3, #12]
      break;
 8003656:	e06e      	b.n	8003736 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365c:	4a6a      	ldr	r2, [pc, #424]	@ (8003808 <HAL_TIM_PWM_Start_DMA+0x368>)
 800365e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003664:	4a69      	ldr	r2, [pc, #420]	@ (800380c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003666:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366c:	4a68      	ldr	r2, [pc, #416]	@ (8003810 <HAL_TIM_PWM_Start_DMA+0x370>)
 800366e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3338      	adds	r3, #56	@ 0x38
 800367c:	461a      	mov	r2, r3
 800367e:	887b      	ldrh	r3, [r7, #2]
 8003680:	f7fe fc5e 	bl	8001f40 <HAL_DMA_Start_IT>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e0b7      	b.n	80037fe <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800369c:	60da      	str	r2, [r3, #12]
      break;
 800369e:	e04a      	b.n	8003736 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a4:	4a58      	ldr	r2, [pc, #352]	@ (8003808 <HAL_TIM_PWM_Start_DMA+0x368>)
 80036a6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ac:	4a57      	ldr	r2, [pc, #348]	@ (800380c <HAL_TIM_PWM_Start_DMA+0x36c>)
 80036ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b4:	4a56      	ldr	r2, [pc, #344]	@ (8003810 <HAL_TIM_PWM_Start_DMA+0x370>)
 80036b6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	333c      	adds	r3, #60	@ 0x3c
 80036c4:	461a      	mov	r2, r3
 80036c6:	887b      	ldrh	r3, [r7, #2]
 80036c8:	f7fe fc3a 	bl	8001f40 <HAL_DMA_Start_IT>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e093      	b.n	80037fe <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036e4:	60da      	str	r2, [r3, #12]
      break;
 80036e6:	e026      	b.n	8003736 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ec:	4a46      	ldr	r2, [pc, #280]	@ (8003808 <HAL_TIM_PWM_Start_DMA+0x368>)
 80036ee:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f4:	4a45      	ldr	r2, [pc, #276]	@ (800380c <HAL_TIM_PWM_Start_DMA+0x36c>)
 80036f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fc:	4a44      	ldr	r2, [pc, #272]	@ (8003810 <HAL_TIM_PWM_Start_DMA+0x370>)
 80036fe:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3340      	adds	r3, #64	@ 0x40
 800370c:	461a      	mov	r2, r3
 800370e:	887b      	ldrh	r3, [r7, #2]
 8003710:	f7fe fc16 	bl	8001f40 <HAL_DMA_Start_IT>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e06f      	b.n	80037fe <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800372c:	60da      	str	r2, [r3, #12]
      break;
 800372e:	e002      	b.n	8003736 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	75fb      	strb	r3, [r7, #23]
      break;
 8003734:	bf00      	nop
  }

  if (status == HAL_OK)
 8003736:	7dfb      	ldrb	r3, [r7, #23]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d15f      	bne.n	80037fc <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2201      	movs	r2, #1
 8003742:	68b9      	ldr	r1, [r7, #8]
 8003744:	4618      	mov	r0, r3
 8003746:	f000 fdd7 	bl	80042f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a31      	ldr	r2, [pc, #196]	@ (8003814 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d004      	beq.n	800375e <HAL_TIM_PWM_Start_DMA+0x2be>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a2f      	ldr	r2, [pc, #188]	@ (8003818 <HAL_TIM_PWM_Start_DMA+0x378>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <HAL_TIM_PWM_Start_DMA+0x2c2>
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003762:	2300      	movs	r3, #0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d007      	beq.n	8003778 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003776:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a25      	ldr	r2, [pc, #148]	@ (8003814 <HAL_TIM_PWM_Start_DMA+0x374>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d022      	beq.n	80037c8 <HAL_TIM_PWM_Start_DMA+0x328>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800378a:	d01d      	beq.n	80037c8 <HAL_TIM_PWM_Start_DMA+0x328>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a22      	ldr	r2, [pc, #136]	@ (800381c <HAL_TIM_PWM_Start_DMA+0x37c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d018      	beq.n	80037c8 <HAL_TIM_PWM_Start_DMA+0x328>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a21      	ldr	r2, [pc, #132]	@ (8003820 <HAL_TIM_PWM_Start_DMA+0x380>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d013      	beq.n	80037c8 <HAL_TIM_PWM_Start_DMA+0x328>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003824 <HAL_TIM_PWM_Start_DMA+0x384>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00e      	beq.n	80037c8 <HAL_TIM_PWM_Start_DMA+0x328>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003818 <HAL_TIM_PWM_Start_DMA+0x378>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d009      	beq.n	80037c8 <HAL_TIM_PWM_Start_DMA+0x328>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003828 <HAL_TIM_PWM_Start_DMA+0x388>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d004      	beq.n	80037c8 <HAL_TIM_PWM_Start_DMA+0x328>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a1a      	ldr	r2, [pc, #104]	@ (800382c <HAL_TIM_PWM_Start_DMA+0x38c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d111      	bne.n	80037ec <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	2b06      	cmp	r3, #6
 80037d8:	d010      	beq.n	80037fc <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f042 0201 	orr.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ea:	e007      	b.n	80037fc <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	08003bfd 	.word	0x08003bfd
 800380c:	08003ca5 	.word	0x08003ca5
 8003810:	08003b6b 	.word	0x08003b6b
 8003814:	40010000 	.word	0x40010000
 8003818:	40010400 	.word	0x40010400
 800381c:	40000400 	.word	0x40000400
 8003820:	40000800 	.word	0x40000800
 8003824:	40000c00 	.word	0x40000c00
 8003828:	40014000 	.word	0x40014000
 800382c:	40001800 	.word	0x40001800

08003830 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800383c:	2300      	movs	r3, #0
 800383e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800384a:	2302      	movs	r3, #2
 800384c:	e0ae      	b.n	80039ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b0c      	cmp	r3, #12
 800385a:	f200 809f 	bhi.w	800399c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800385e:	a201      	add	r2, pc, #4	@ (adr r2, 8003864 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003864:	08003899 	.word	0x08003899
 8003868:	0800399d 	.word	0x0800399d
 800386c:	0800399d 	.word	0x0800399d
 8003870:	0800399d 	.word	0x0800399d
 8003874:	080038d9 	.word	0x080038d9
 8003878:	0800399d 	.word	0x0800399d
 800387c:	0800399d 	.word	0x0800399d
 8003880:	0800399d 	.word	0x0800399d
 8003884:	0800391b 	.word	0x0800391b
 8003888:	0800399d 	.word	0x0800399d
 800388c:	0800399d 	.word	0x0800399d
 8003890:	0800399d 	.word	0x0800399d
 8003894:	0800395b 	.word	0x0800395b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68b9      	ldr	r1, [r7, #8]
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 fae0 	bl	8003e64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699a      	ldr	r2, [r3, #24]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0208 	orr.w	r2, r2, #8
 80038b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699a      	ldr	r2, [r3, #24]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0204 	bic.w	r2, r2, #4
 80038c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6999      	ldr	r1, [r3, #24]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	691a      	ldr	r2, [r3, #16]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	619a      	str	r2, [r3, #24]
      break;
 80038d6:	e064      	b.n	80039a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fb30 	bl	8003f44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6999      	ldr	r1, [r3, #24]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	021a      	lsls	r2, r3, #8
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	619a      	str	r2, [r3, #24]
      break;
 8003918:	e043      	b.n	80039a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68b9      	ldr	r1, [r7, #8]
 8003920:	4618      	mov	r0, r3
 8003922:	f000 fb85 	bl	8004030 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69da      	ldr	r2, [r3, #28]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f042 0208 	orr.w	r2, r2, #8
 8003934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69da      	ldr	r2, [r3, #28]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0204 	bic.w	r2, r2, #4
 8003944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69d9      	ldr	r1, [r3, #28]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	61da      	str	r2, [r3, #28]
      break;
 8003958:	e023      	b.n	80039a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	4618      	mov	r0, r3
 8003962:	f000 fbd9 	bl	8004118 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69d9      	ldr	r1, [r3, #28]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	021a      	lsls	r2, r3, #8
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	61da      	str	r2, [r3, #28]
      break;
 800399a:	e002      	b.n	80039a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	75fb      	strb	r3, [r7, #23]
      break;
 80039a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_TIM_ConfigClockSource+0x1c>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e0b4      	b.n	8003b3a <HAL_TIM_ConfigClockSource+0x186>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80039ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a08:	d03e      	beq.n	8003a88 <HAL_TIM_ConfigClockSource+0xd4>
 8003a0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a0e:	f200 8087 	bhi.w	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a16:	f000 8086 	beq.w	8003b26 <HAL_TIM_ConfigClockSource+0x172>
 8003a1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a1e:	d87f      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a20:	2b70      	cmp	r3, #112	@ 0x70
 8003a22:	d01a      	beq.n	8003a5a <HAL_TIM_ConfigClockSource+0xa6>
 8003a24:	2b70      	cmp	r3, #112	@ 0x70
 8003a26:	d87b      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a28:	2b60      	cmp	r3, #96	@ 0x60
 8003a2a:	d050      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0x11a>
 8003a2c:	2b60      	cmp	r3, #96	@ 0x60
 8003a2e:	d877      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a30:	2b50      	cmp	r3, #80	@ 0x50
 8003a32:	d03c      	beq.n	8003aae <HAL_TIM_ConfigClockSource+0xfa>
 8003a34:	2b50      	cmp	r3, #80	@ 0x50
 8003a36:	d873      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a38:	2b40      	cmp	r3, #64	@ 0x40
 8003a3a:	d058      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x13a>
 8003a3c:	2b40      	cmp	r3, #64	@ 0x40
 8003a3e:	d86f      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a40:	2b30      	cmp	r3, #48	@ 0x30
 8003a42:	d064      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x15a>
 8003a44:	2b30      	cmp	r3, #48	@ 0x30
 8003a46:	d86b      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d060      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x15a>
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d867      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d05c      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x15a>
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d05a      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x15a>
 8003a58:	e062      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a6a:	f000 fc25 	bl	80042b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	609a      	str	r2, [r3, #8]
      break;
 8003a86:	e04f      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a98:	f000 fc0e 	bl	80042b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003aaa:	609a      	str	r2, [r3, #8]
      break;
 8003aac:	e03c      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aba:	461a      	mov	r2, r3
 8003abc:	f000 fb82 	bl	80041c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2150      	movs	r1, #80	@ 0x50
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fbdb 	bl	8004282 <TIM_ITRx_SetConfig>
      break;
 8003acc:	e02c      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ada:	461a      	mov	r2, r3
 8003adc:	f000 fba1 	bl	8004222 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2160      	movs	r1, #96	@ 0x60
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 fbcb 	bl	8004282 <TIM_ITRx_SetConfig>
      break;
 8003aec:	e01c      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003afa:	461a      	mov	r2, r3
 8003afc:	f000 fb62 	bl	80041c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2140      	movs	r1, #64	@ 0x40
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fbbb 	bl	8004282 <TIM_ITRx_SetConfig>
      break;
 8003b0c:	e00c      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4619      	mov	r1, r3
 8003b18:	4610      	mov	r0, r2
 8003b1a:	f000 fbb2 	bl	8004282 <TIM_ITRx_SetConfig>
      break;
 8003b1e:	e003      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
      break;
 8003b24:	e000      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b084      	sub	sp, #16
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b76:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d107      	bne.n	8003b92 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b90:	e02a      	b.n	8003be8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d107      	bne.n	8003bac <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003baa:	e01d      	b.n	8003be8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d107      	bne.n	8003bc6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2204      	movs	r2, #4
 8003bba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bc4:	e010      	b.n	8003be8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d107      	bne.n	8003be0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2208      	movs	r2, #8
 8003bd4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003bde:	e003      	b.n	8003be8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f7ff ffb4 	bl	8003b56 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	771a      	strb	r2, [r3, #28]
}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c08:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d10b      	bne.n	8003c2c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2201      	movs	r2, #1
 8003c18:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d136      	bne.n	8003c90 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c2a:	e031      	b.n	8003c90 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d10b      	bne.n	8003c4e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d125      	bne.n	8003c90 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c4c:	e020      	b.n	8003c90 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d10b      	bne.n	8003c70 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2204      	movs	r2, #4
 8003c5c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d114      	bne.n	8003c90 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c6e:	e00f      	b.n	8003c90 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d10a      	bne.n	8003c90 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2208      	movs	r2, #8
 8003c7e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d103      	bne.n	8003c90 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f7fd f97d 	bl	8000f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	771a      	strb	r2, [r3, #28]
}
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d103      	bne.n	8003cc4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	771a      	strb	r2, [r3, #28]
 8003cc2:	e019      	b.n	8003cf8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d103      	bne.n	8003cd6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	771a      	strb	r2, [r3, #28]
 8003cd4:	e010      	b.n	8003cf8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d103      	bne.n	8003ce8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	771a      	strb	r2, [r3, #28]
 8003ce6:	e007      	b.n	8003cf8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d102      	bne.n	8003cf8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2208      	movs	r2, #8
 8003cf6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f7ff ff22 	bl	8003b42 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	771a      	strb	r2, [r3, #28]
}
 8003d04:	bf00      	nop
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a46      	ldr	r2, [pc, #280]	@ (8003e38 <TIM_Base_SetConfig+0x12c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d013      	beq.n	8003d4c <TIM_Base_SetConfig+0x40>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d2a:	d00f      	beq.n	8003d4c <TIM_Base_SetConfig+0x40>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a43      	ldr	r2, [pc, #268]	@ (8003e3c <TIM_Base_SetConfig+0x130>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d00b      	beq.n	8003d4c <TIM_Base_SetConfig+0x40>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a42      	ldr	r2, [pc, #264]	@ (8003e40 <TIM_Base_SetConfig+0x134>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d007      	beq.n	8003d4c <TIM_Base_SetConfig+0x40>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a41      	ldr	r2, [pc, #260]	@ (8003e44 <TIM_Base_SetConfig+0x138>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d003      	beq.n	8003d4c <TIM_Base_SetConfig+0x40>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a40      	ldr	r2, [pc, #256]	@ (8003e48 <TIM_Base_SetConfig+0x13c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d108      	bne.n	8003d5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a35      	ldr	r2, [pc, #212]	@ (8003e38 <TIM_Base_SetConfig+0x12c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d02b      	beq.n	8003dbe <TIM_Base_SetConfig+0xb2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d6c:	d027      	beq.n	8003dbe <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a32      	ldr	r2, [pc, #200]	@ (8003e3c <TIM_Base_SetConfig+0x130>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d023      	beq.n	8003dbe <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a31      	ldr	r2, [pc, #196]	@ (8003e40 <TIM_Base_SetConfig+0x134>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d01f      	beq.n	8003dbe <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a30      	ldr	r2, [pc, #192]	@ (8003e44 <TIM_Base_SetConfig+0x138>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d01b      	beq.n	8003dbe <TIM_Base_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a2f      	ldr	r2, [pc, #188]	@ (8003e48 <TIM_Base_SetConfig+0x13c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d017      	beq.n	8003dbe <TIM_Base_SetConfig+0xb2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a2e      	ldr	r2, [pc, #184]	@ (8003e4c <TIM_Base_SetConfig+0x140>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d013      	beq.n	8003dbe <TIM_Base_SetConfig+0xb2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a2d      	ldr	r2, [pc, #180]	@ (8003e50 <TIM_Base_SetConfig+0x144>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00f      	beq.n	8003dbe <TIM_Base_SetConfig+0xb2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a2c      	ldr	r2, [pc, #176]	@ (8003e54 <TIM_Base_SetConfig+0x148>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00b      	beq.n	8003dbe <TIM_Base_SetConfig+0xb2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a2b      	ldr	r2, [pc, #172]	@ (8003e58 <TIM_Base_SetConfig+0x14c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d007      	beq.n	8003dbe <TIM_Base_SetConfig+0xb2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a2a      	ldr	r2, [pc, #168]	@ (8003e5c <TIM_Base_SetConfig+0x150>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d003      	beq.n	8003dbe <TIM_Base_SetConfig+0xb2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a29      	ldr	r2, [pc, #164]	@ (8003e60 <TIM_Base_SetConfig+0x154>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d108      	bne.n	8003dd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a10      	ldr	r2, [pc, #64]	@ (8003e38 <TIM_Base_SetConfig+0x12c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d003      	beq.n	8003e04 <TIM_Base_SetConfig+0xf8>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a12      	ldr	r2, [pc, #72]	@ (8003e48 <TIM_Base_SetConfig+0x13c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d103      	bne.n	8003e0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d105      	bne.n	8003e2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f023 0201 	bic.w	r2, r3, #1
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	611a      	str	r2, [r3, #16]
  }
}
 8003e2a:	bf00      	nop
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40010000 	.word	0x40010000
 8003e3c:	40000400 	.word	0x40000400
 8003e40:	40000800 	.word	0x40000800
 8003e44:	40000c00 	.word	0x40000c00
 8003e48:	40010400 	.word	0x40010400
 8003e4c:	40014000 	.word	0x40014000
 8003e50:	40014400 	.word	0x40014400
 8003e54:	40014800 	.word	0x40014800
 8003e58:	40001800 	.word	0x40001800
 8003e5c:	40001c00 	.word	0x40001c00
 8003e60:	40002000 	.word	0x40002000

08003e64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	f023 0201 	bic.w	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0303 	bic.w	r3, r3, #3
 8003e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f023 0302 	bic.w	r3, r3, #2
 8003eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a20      	ldr	r2, [pc, #128]	@ (8003f3c <TIM_OC1_SetConfig+0xd8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d003      	beq.n	8003ec8 <TIM_OC1_SetConfig+0x64>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8003f40 <TIM_OC1_SetConfig+0xdc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d10c      	bne.n	8003ee2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f023 0308 	bic.w	r3, r3, #8
 8003ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f023 0304 	bic.w	r3, r3, #4
 8003ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a15      	ldr	r2, [pc, #84]	@ (8003f3c <TIM_OC1_SetConfig+0xd8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d003      	beq.n	8003ef2 <TIM_OC1_SetConfig+0x8e>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a14      	ldr	r2, [pc, #80]	@ (8003f40 <TIM_OC1_SetConfig+0xdc>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d111      	bne.n	8003f16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	621a      	str	r2, [r3, #32]
}
 8003f30:	bf00      	nop
 8003f32:	371c      	adds	r7, #28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40010400 	.word	0x40010400

08003f44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	f023 0210 	bic.w	r2, r3, #16
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	021b      	lsls	r3, r3, #8
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f023 0320 	bic.w	r3, r3, #32
 8003f8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a22      	ldr	r2, [pc, #136]	@ (8004028 <TIM_OC2_SetConfig+0xe4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d003      	beq.n	8003fac <TIM_OC2_SetConfig+0x68>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a21      	ldr	r2, [pc, #132]	@ (800402c <TIM_OC2_SetConfig+0xe8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d10d      	bne.n	8003fc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a17      	ldr	r2, [pc, #92]	@ (8004028 <TIM_OC2_SetConfig+0xe4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d003      	beq.n	8003fd8 <TIM_OC2_SetConfig+0x94>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a16      	ldr	r2, [pc, #88]	@ (800402c <TIM_OC2_SetConfig+0xe8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d113      	bne.n	8004000 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	621a      	str	r2, [r3, #32]
}
 800401a:	bf00      	nop
 800401c:	371c      	adds	r7, #28
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	40010000 	.word	0x40010000
 800402c:	40010400 	.word	0x40010400

08004030 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800405e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0303 	bic.w	r3, r3, #3
 8004066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	021b      	lsls	r3, r3, #8
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a21      	ldr	r2, [pc, #132]	@ (8004110 <TIM_OC3_SetConfig+0xe0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d003      	beq.n	8004096 <TIM_OC3_SetConfig+0x66>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a20      	ldr	r2, [pc, #128]	@ (8004114 <TIM_OC3_SetConfig+0xe4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d10d      	bne.n	80040b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800409c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	021b      	lsls	r3, r3, #8
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a16      	ldr	r2, [pc, #88]	@ (8004110 <TIM_OC3_SetConfig+0xe0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d003      	beq.n	80040c2 <TIM_OC3_SetConfig+0x92>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a15      	ldr	r2, [pc, #84]	@ (8004114 <TIM_OC3_SetConfig+0xe4>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d113      	bne.n	80040ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	621a      	str	r2, [r3, #32]
}
 8004104:	bf00      	nop
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	40010000 	.word	0x40010000
 8004114:	40010400 	.word	0x40010400

08004118 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800414e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	021b      	lsls	r3, r3, #8
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4313      	orrs	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	031b      	lsls	r3, r3, #12
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a12      	ldr	r2, [pc, #72]	@ (80041bc <TIM_OC4_SetConfig+0xa4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d003      	beq.n	8004180 <TIM_OC4_SetConfig+0x68>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a11      	ldr	r2, [pc, #68]	@ (80041c0 <TIM_OC4_SetConfig+0xa8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d109      	bne.n	8004194 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004186:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	019b      	lsls	r3, r3, #6
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4313      	orrs	r3, r2
 8004192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	621a      	str	r2, [r3, #32]
}
 80041ae:	bf00      	nop
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40010000 	.word	0x40010000
 80041c0:	40010400 	.word	0x40010400

080041c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	f023 0201 	bic.w	r2, r3, #1
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f023 030a 	bic.w	r3, r3, #10
 8004200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	621a      	str	r2, [r3, #32]
}
 8004216:	bf00      	nop
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004222:	b480      	push	{r7}
 8004224:	b087      	sub	sp, #28
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f023 0210 	bic.w	r2, r3, #16
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800424c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	031b      	lsls	r3, r3, #12
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800425e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	621a      	str	r2, [r3, #32]
}
 8004276:	bf00      	nop
 8004278:	371c      	adds	r7, #28
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004282:	b480      	push	{r7}
 8004284:	b085      	sub	sp, #20
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004298:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	f043 0307 	orr.w	r3, r3, #7
 80042a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	609a      	str	r2, [r3, #8]
}
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	021a      	lsls	r2, r3, #8
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	431a      	orrs	r2, r3
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4313      	orrs	r3, r2
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	609a      	str	r2, [r3, #8]
}
 80042ec:	bf00      	nop
 80042ee:	371c      	adds	r7, #28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	2201      	movs	r2, #1
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a1a      	ldr	r2, [r3, #32]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	43db      	mvns	r3, r3
 800431a:	401a      	ands	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a1a      	ldr	r2, [r3, #32]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f003 031f 	and.w	r3, r3, #31
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	fa01 f303 	lsl.w	r3, r1, r3
 8004330:	431a      	orrs	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	621a      	str	r2, [r3, #32]
}
 8004336:	bf00      	nop
 8004338:	371c      	adds	r7, #28
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004358:	2302      	movs	r3, #2
 800435a:	e05a      	b.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a21      	ldr	r2, [pc, #132]	@ (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d022      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043a8:	d01d      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d018      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d013      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a1a      	ldr	r2, [pc, #104]	@ (800442c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00e      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a18      	ldr	r2, [pc, #96]	@ (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d009      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a17      	ldr	r2, [pc, #92]	@ (8004434 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d004      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a15      	ldr	r2, [pc, #84]	@ (8004438 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d10c      	bne.n	8004400 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40010000 	.word	0x40010000
 8004424:	40000400 	.word	0x40000400
 8004428:	40000800 	.word	0x40000800
 800442c:	40000c00 	.word	0x40000c00
 8004430:	40010400 	.word	0x40010400
 8004434:	40014000 	.word	0x40014000
 8004438:	40001800 	.word	0x40001800

0800443c <cosf>:
 800443c:	ee10 3a10 	vmov	r3, s0
 8004440:	b507      	push	{r0, r1, r2, lr}
 8004442:	4a1e      	ldr	r2, [pc, #120]	@ (80044bc <cosf+0x80>)
 8004444:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004448:	4293      	cmp	r3, r2
 800444a:	d806      	bhi.n	800445a <cosf+0x1e>
 800444c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80044c0 <cosf+0x84>
 8004450:	b003      	add	sp, #12
 8004452:	f85d eb04 	ldr.w	lr, [sp], #4
 8004456:	f000 b835 	b.w	80044c4 <__kernel_cosf>
 800445a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800445e:	d304      	bcc.n	800446a <cosf+0x2e>
 8004460:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004464:	b003      	add	sp, #12
 8004466:	f85d fb04 	ldr.w	pc, [sp], #4
 800446a:	4668      	mov	r0, sp
 800446c:	f000 f8ca 	bl	8004604 <__ieee754_rem_pio2f>
 8004470:	f000 0003 	and.w	r0, r0, #3
 8004474:	2801      	cmp	r0, #1
 8004476:	d009      	beq.n	800448c <cosf+0x50>
 8004478:	2802      	cmp	r0, #2
 800447a:	d010      	beq.n	800449e <cosf+0x62>
 800447c:	b9b0      	cbnz	r0, 80044ac <cosf+0x70>
 800447e:	eddd 0a01 	vldr	s1, [sp, #4]
 8004482:	ed9d 0a00 	vldr	s0, [sp]
 8004486:	f000 f81d 	bl	80044c4 <__kernel_cosf>
 800448a:	e7eb      	b.n	8004464 <cosf+0x28>
 800448c:	eddd 0a01 	vldr	s1, [sp, #4]
 8004490:	ed9d 0a00 	vldr	s0, [sp]
 8004494:	f000 f86e 	bl	8004574 <__kernel_sinf>
 8004498:	eeb1 0a40 	vneg.f32	s0, s0
 800449c:	e7e2      	b.n	8004464 <cosf+0x28>
 800449e:	eddd 0a01 	vldr	s1, [sp, #4]
 80044a2:	ed9d 0a00 	vldr	s0, [sp]
 80044a6:	f000 f80d 	bl	80044c4 <__kernel_cosf>
 80044aa:	e7f5      	b.n	8004498 <cosf+0x5c>
 80044ac:	eddd 0a01 	vldr	s1, [sp, #4]
 80044b0:	ed9d 0a00 	vldr	s0, [sp]
 80044b4:	2001      	movs	r0, #1
 80044b6:	f000 f85d 	bl	8004574 <__kernel_sinf>
 80044ba:	e7d3      	b.n	8004464 <cosf+0x28>
 80044bc:	3f490fd8 	.word	0x3f490fd8
 80044c0:	00000000 	.word	0x00000000

080044c4 <__kernel_cosf>:
 80044c4:	ee10 3a10 	vmov	r3, s0
 80044c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044cc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80044d0:	eef0 6a40 	vmov.f32	s13, s0
 80044d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80044d8:	d204      	bcs.n	80044e4 <__kernel_cosf+0x20>
 80044da:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80044de:	ee17 2a90 	vmov	r2, s15
 80044e2:	b342      	cbz	r2, 8004536 <__kernel_cosf+0x72>
 80044e4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80044e8:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8004554 <__kernel_cosf+0x90>
 80044ec:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8004558 <__kernel_cosf+0x94>
 80044f0:	4a1a      	ldr	r2, [pc, #104]	@ (800455c <__kernel_cosf+0x98>)
 80044f2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80044f6:	4293      	cmp	r3, r2
 80044f8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004560 <__kernel_cosf+0x9c>
 80044fc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004500:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8004564 <__kernel_cosf+0xa0>
 8004504:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004508:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8004568 <__kernel_cosf+0xa4>
 800450c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004510:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800456c <__kernel_cosf+0xa8>
 8004514:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004518:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800451c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8004520:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004524:	eee7 0a06 	vfma.f32	s1, s14, s12
 8004528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452c:	d804      	bhi.n	8004538 <__kernel_cosf+0x74>
 800452e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004532:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004536:	4770      	bx	lr
 8004538:	4a0d      	ldr	r2, [pc, #52]	@ (8004570 <__kernel_cosf+0xac>)
 800453a:	4293      	cmp	r3, r2
 800453c:	bf9a      	itte	ls
 800453e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8004542:	ee07 3a10 	vmovls	s14, r3
 8004546:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800454a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800454e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004552:	e7ec      	b.n	800452e <__kernel_cosf+0x6a>
 8004554:	ad47d74e 	.word	0xad47d74e
 8004558:	310f74f6 	.word	0x310f74f6
 800455c:	3e999999 	.word	0x3e999999
 8004560:	b493f27c 	.word	0xb493f27c
 8004564:	37d00d01 	.word	0x37d00d01
 8004568:	bab60b61 	.word	0xbab60b61
 800456c:	3d2aaaab 	.word	0x3d2aaaab
 8004570:	3f480000 	.word	0x3f480000

08004574 <__kernel_sinf>:
 8004574:	ee10 3a10 	vmov	r3, s0
 8004578:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800457c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8004580:	d204      	bcs.n	800458c <__kernel_sinf+0x18>
 8004582:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004586:	ee17 3a90 	vmov	r3, s15
 800458a:	b35b      	cbz	r3, 80045e4 <__kernel_sinf+0x70>
 800458c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004590:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80045e8 <__kernel_sinf+0x74>
 8004594:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80045ec <__kernel_sinf+0x78>
 8004598:	eea7 6a27 	vfma.f32	s12, s14, s15
 800459c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80045f0 <__kernel_sinf+0x7c>
 80045a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80045a4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80045f4 <__kernel_sinf+0x80>
 80045a8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80045ac:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80045f8 <__kernel_sinf+0x84>
 80045b0:	ee60 6a07 	vmul.f32	s13, s0, s14
 80045b4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80045b8:	b930      	cbnz	r0, 80045c8 <__kernel_sinf+0x54>
 80045ba:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80045fc <__kernel_sinf+0x88>
 80045be:	eea7 6a27 	vfma.f32	s12, s14, s15
 80045c2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80045c6:	4770      	bx	lr
 80045c8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80045cc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80045d0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80045d4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80045d8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8004600 <__kernel_sinf+0x8c>
 80045dc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80045e0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	2f2ec9d3 	.word	0x2f2ec9d3
 80045ec:	b2d72f34 	.word	0xb2d72f34
 80045f0:	3638ef1b 	.word	0x3638ef1b
 80045f4:	b9500d01 	.word	0xb9500d01
 80045f8:	3c088889 	.word	0x3c088889
 80045fc:	be2aaaab 	.word	0xbe2aaaab
 8004600:	3e2aaaab 	.word	0x3e2aaaab

08004604 <__ieee754_rem_pio2f>:
 8004604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004606:	ee10 6a10 	vmov	r6, s0
 800460a:	4b88      	ldr	r3, [pc, #544]	@ (800482c <__ieee754_rem_pio2f+0x228>)
 800460c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8004610:	429d      	cmp	r5, r3
 8004612:	b087      	sub	sp, #28
 8004614:	4604      	mov	r4, r0
 8004616:	d805      	bhi.n	8004624 <__ieee754_rem_pio2f+0x20>
 8004618:	2300      	movs	r3, #0
 800461a:	ed80 0a00 	vstr	s0, [r0]
 800461e:	6043      	str	r3, [r0, #4]
 8004620:	2000      	movs	r0, #0
 8004622:	e022      	b.n	800466a <__ieee754_rem_pio2f+0x66>
 8004624:	4b82      	ldr	r3, [pc, #520]	@ (8004830 <__ieee754_rem_pio2f+0x22c>)
 8004626:	429d      	cmp	r5, r3
 8004628:	d83a      	bhi.n	80046a0 <__ieee754_rem_pio2f+0x9c>
 800462a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800462e:	2e00      	cmp	r6, #0
 8004630:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8004834 <__ieee754_rem_pio2f+0x230>
 8004634:	4a80      	ldr	r2, [pc, #512]	@ (8004838 <__ieee754_rem_pio2f+0x234>)
 8004636:	f023 030f 	bic.w	r3, r3, #15
 800463a:	dd18      	ble.n	800466e <__ieee754_rem_pio2f+0x6a>
 800463c:	4293      	cmp	r3, r2
 800463e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8004642:	bf09      	itett	eq
 8004644:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800483c <__ieee754_rem_pio2f+0x238>
 8004648:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8004840 <__ieee754_rem_pio2f+0x23c>
 800464c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8004844 <__ieee754_rem_pio2f+0x240>
 8004650:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8004654:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8004658:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800465c:	ed80 7a00 	vstr	s14, [r0]
 8004660:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004664:	edc0 7a01 	vstr	s15, [r0, #4]
 8004668:	2001      	movs	r0, #1
 800466a:	b007      	add	sp, #28
 800466c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800466e:	4293      	cmp	r3, r2
 8004670:	ee70 7a07 	vadd.f32	s15, s0, s14
 8004674:	bf09      	itett	eq
 8004676:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800483c <__ieee754_rem_pio2f+0x238>
 800467a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8004840 <__ieee754_rem_pio2f+0x23c>
 800467e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8004844 <__ieee754_rem_pio2f+0x240>
 8004682:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8004686:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800468a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800468e:	ed80 7a00 	vstr	s14, [r0]
 8004692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004696:	edc0 7a01 	vstr	s15, [r0, #4]
 800469a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800469e:	e7e4      	b.n	800466a <__ieee754_rem_pio2f+0x66>
 80046a0:	4b69      	ldr	r3, [pc, #420]	@ (8004848 <__ieee754_rem_pio2f+0x244>)
 80046a2:	429d      	cmp	r5, r3
 80046a4:	d873      	bhi.n	800478e <__ieee754_rem_pio2f+0x18a>
 80046a6:	f000 f8dd 	bl	8004864 <fabsf>
 80046aa:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800484c <__ieee754_rem_pio2f+0x248>
 80046ae:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80046b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80046b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046be:	ee17 0a90 	vmov	r0, s15
 80046c2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004834 <__ieee754_rem_pio2f+0x230>
 80046c6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80046ca:	281f      	cmp	r0, #31
 80046cc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004840 <__ieee754_rem_pio2f+0x23c>
 80046d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d4:	eeb1 6a47 	vneg.f32	s12, s14
 80046d8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80046dc:	ee16 1a90 	vmov	r1, s13
 80046e0:	dc09      	bgt.n	80046f6 <__ieee754_rem_pio2f+0xf2>
 80046e2:	4a5b      	ldr	r2, [pc, #364]	@ (8004850 <__ieee754_rem_pio2f+0x24c>)
 80046e4:	1e47      	subs	r7, r0, #1
 80046e6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80046ea:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80046ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d107      	bne.n	8004706 <__ieee754_rem_pio2f+0x102>
 80046f6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80046fa:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80046fe:	2a08      	cmp	r2, #8
 8004700:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8004704:	dc14      	bgt.n	8004730 <__ieee754_rem_pio2f+0x12c>
 8004706:	6021      	str	r1, [r4, #0]
 8004708:	ed94 7a00 	vldr	s14, [r4]
 800470c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004710:	2e00      	cmp	r6, #0
 8004712:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004716:	ed84 0a01 	vstr	s0, [r4, #4]
 800471a:	daa6      	bge.n	800466a <__ieee754_rem_pio2f+0x66>
 800471c:	eeb1 7a47 	vneg.f32	s14, s14
 8004720:	eeb1 0a40 	vneg.f32	s0, s0
 8004724:	ed84 7a00 	vstr	s14, [r4]
 8004728:	ed84 0a01 	vstr	s0, [r4, #4]
 800472c:	4240      	negs	r0, r0
 800472e:	e79c      	b.n	800466a <__ieee754_rem_pio2f+0x66>
 8004730:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800483c <__ieee754_rem_pio2f+0x238>
 8004734:	eef0 6a40 	vmov.f32	s13, s0
 8004738:	eee6 6a25 	vfma.f32	s13, s12, s11
 800473c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8004740:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004744:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004844 <__ieee754_rem_pio2f+0x240>
 8004748:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800474c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8004750:	ee15 2a90 	vmov	r2, s11
 8004754:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004758:	1a5b      	subs	r3, r3, r1
 800475a:	2b19      	cmp	r3, #25
 800475c:	dc04      	bgt.n	8004768 <__ieee754_rem_pio2f+0x164>
 800475e:	edc4 5a00 	vstr	s11, [r4]
 8004762:	eeb0 0a66 	vmov.f32	s0, s13
 8004766:	e7cf      	b.n	8004708 <__ieee754_rem_pio2f+0x104>
 8004768:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8004854 <__ieee754_rem_pio2f+0x250>
 800476c:	eeb0 0a66 	vmov.f32	s0, s13
 8004770:	eea6 0a25 	vfma.f32	s0, s12, s11
 8004774:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8004778:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8004858 <__ieee754_rem_pio2f+0x254>
 800477c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004780:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8004784:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004788:	ed84 7a00 	vstr	s14, [r4]
 800478c:	e7bc      	b.n	8004708 <__ieee754_rem_pio2f+0x104>
 800478e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8004792:	d306      	bcc.n	80047a2 <__ieee754_rem_pio2f+0x19e>
 8004794:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004798:	edc0 7a01 	vstr	s15, [r0, #4]
 800479c:	edc0 7a00 	vstr	s15, [r0]
 80047a0:	e73e      	b.n	8004620 <__ieee754_rem_pio2f+0x1c>
 80047a2:	15ea      	asrs	r2, r5, #23
 80047a4:	3a86      	subs	r2, #134	@ 0x86
 80047a6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80047b2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800485c <__ieee754_rem_pio2f+0x258>
 80047b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80047ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047be:	ed8d 7a03 	vstr	s14, [sp, #12]
 80047c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80047c6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80047ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80047ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047d2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80047d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80047da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80047de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e2:	edcd 7a05 	vstr	s15, [sp, #20]
 80047e6:	d11e      	bne.n	8004826 <__ieee754_rem_pio2f+0x222>
 80047e8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80047ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f0:	bf0c      	ite	eq
 80047f2:	2301      	moveq	r3, #1
 80047f4:	2302      	movne	r3, #2
 80047f6:	491a      	ldr	r1, [pc, #104]	@ (8004860 <__ieee754_rem_pio2f+0x25c>)
 80047f8:	9101      	str	r1, [sp, #4]
 80047fa:	2102      	movs	r1, #2
 80047fc:	9100      	str	r1, [sp, #0]
 80047fe:	a803      	add	r0, sp, #12
 8004800:	4621      	mov	r1, r4
 8004802:	f000 f837 	bl	8004874 <__kernel_rem_pio2f>
 8004806:	2e00      	cmp	r6, #0
 8004808:	f6bf af2f 	bge.w	800466a <__ieee754_rem_pio2f+0x66>
 800480c:	edd4 7a00 	vldr	s15, [r4]
 8004810:	eef1 7a67 	vneg.f32	s15, s15
 8004814:	edc4 7a00 	vstr	s15, [r4]
 8004818:	edd4 7a01 	vldr	s15, [r4, #4]
 800481c:	eef1 7a67 	vneg.f32	s15, s15
 8004820:	edc4 7a01 	vstr	s15, [r4, #4]
 8004824:	e782      	b.n	800472c <__ieee754_rem_pio2f+0x128>
 8004826:	2303      	movs	r3, #3
 8004828:	e7e5      	b.n	80047f6 <__ieee754_rem_pio2f+0x1f2>
 800482a:	bf00      	nop
 800482c:	3f490fd8 	.word	0x3f490fd8
 8004830:	4016cbe3 	.word	0x4016cbe3
 8004834:	3fc90f80 	.word	0x3fc90f80
 8004838:	3fc90fd0 	.word	0x3fc90fd0
 800483c:	37354400 	.word	0x37354400
 8004840:	37354443 	.word	0x37354443
 8004844:	2e85a308 	.word	0x2e85a308
 8004848:	43490f80 	.word	0x43490f80
 800484c:	3f22f984 	.word	0x3f22f984
 8004850:	08004f34 	.word	0x08004f34
 8004854:	2e85a300 	.word	0x2e85a300
 8004858:	248d3132 	.word	0x248d3132
 800485c:	43800000 	.word	0x43800000
 8004860:	08004fb4 	.word	0x08004fb4

08004864 <fabsf>:
 8004864:	ee10 3a10 	vmov	r3, s0
 8004868:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800486c:	ee00 3a10 	vmov	s0, r3
 8004870:	4770      	bx	lr
	...

08004874 <__kernel_rem_pio2f>:
 8004874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004878:	ed2d 8b04 	vpush	{d8-d9}
 800487c:	b0d9      	sub	sp, #356	@ 0x164
 800487e:	4690      	mov	r8, r2
 8004880:	9001      	str	r0, [sp, #4]
 8004882:	4ab9      	ldr	r2, [pc, #740]	@ (8004b68 <__kernel_rem_pio2f+0x2f4>)
 8004884:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8004886:	f118 0f04 	cmn.w	r8, #4
 800488a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800488e:	460f      	mov	r7, r1
 8004890:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8004894:	db27      	blt.n	80048e6 <__kernel_rem_pio2f+0x72>
 8004896:	f1b8 0203 	subs.w	r2, r8, #3
 800489a:	bf48      	it	mi
 800489c:	f108 0204 	addmi.w	r2, r8, #4
 80048a0:	10d2      	asrs	r2, r2, #3
 80048a2:	1c55      	adds	r5, r2, #1
 80048a4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80048a6:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8004b78 <__kernel_rem_pio2f+0x304>
 80048aa:	00e8      	lsls	r0, r5, #3
 80048ac:	eba2 060b 	sub.w	r6, r2, fp
 80048b0:	9002      	str	r0, [sp, #8]
 80048b2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80048b6:	eb0a 0c0b 	add.w	ip, sl, fp
 80048ba:	ac1c      	add	r4, sp, #112	@ 0x70
 80048bc:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80048c0:	2000      	movs	r0, #0
 80048c2:	4560      	cmp	r0, ip
 80048c4:	dd11      	ble.n	80048ea <__kernel_rem_pio2f+0x76>
 80048c6:	a91c      	add	r1, sp, #112	@ 0x70
 80048c8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80048cc:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80048d0:	f04f 0c00 	mov.w	ip, #0
 80048d4:	45d4      	cmp	ip, sl
 80048d6:	dc27      	bgt.n	8004928 <__kernel_rem_pio2f+0xb4>
 80048d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80048dc:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8004b78 <__kernel_rem_pio2f+0x304>
 80048e0:	4606      	mov	r6, r0
 80048e2:	2400      	movs	r4, #0
 80048e4:	e016      	b.n	8004914 <__kernel_rem_pio2f+0xa0>
 80048e6:	2200      	movs	r2, #0
 80048e8:	e7db      	b.n	80048a2 <__kernel_rem_pio2f+0x2e>
 80048ea:	42c6      	cmn	r6, r0
 80048ec:	bf5d      	ittte	pl
 80048ee:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80048f2:	ee07 1a90 	vmovpl	s15, r1
 80048f6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80048fa:	eef0 7a47 	vmovmi.f32	s15, s14
 80048fe:	ece4 7a01 	vstmia	r4!, {s15}
 8004902:	3001      	adds	r0, #1
 8004904:	e7dd      	b.n	80048c2 <__kernel_rem_pio2f+0x4e>
 8004906:	ecfe 6a01 	vldmia	lr!, {s13}
 800490a:	ed96 7a00 	vldr	s14, [r6]
 800490e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004912:	3401      	adds	r4, #1
 8004914:	455c      	cmp	r4, fp
 8004916:	f1a6 0604 	sub.w	r6, r6, #4
 800491a:	ddf4      	ble.n	8004906 <__kernel_rem_pio2f+0x92>
 800491c:	ece9 7a01 	vstmia	r9!, {s15}
 8004920:	f10c 0c01 	add.w	ip, ip, #1
 8004924:	3004      	adds	r0, #4
 8004926:	e7d5      	b.n	80048d4 <__kernel_rem_pio2f+0x60>
 8004928:	a908      	add	r1, sp, #32
 800492a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800492e:	9104      	str	r1, [sp, #16]
 8004930:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8004932:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8004b74 <__kernel_rem_pio2f+0x300>
 8004936:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8004b70 <__kernel_rem_pio2f+0x2fc>
 800493a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800493e:	9203      	str	r2, [sp, #12]
 8004940:	4654      	mov	r4, sl
 8004942:	00a2      	lsls	r2, r4, #2
 8004944:	9205      	str	r2, [sp, #20]
 8004946:	aa58      	add	r2, sp, #352	@ 0x160
 8004948:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800494c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8004950:	a944      	add	r1, sp, #272	@ 0x110
 8004952:	aa08      	add	r2, sp, #32
 8004954:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8004958:	4694      	mov	ip, r2
 800495a:	4626      	mov	r6, r4
 800495c:	2e00      	cmp	r6, #0
 800495e:	f1a0 0004 	sub.w	r0, r0, #4
 8004962:	dc4c      	bgt.n	80049fe <__kernel_rem_pio2f+0x18a>
 8004964:	4628      	mov	r0, r5
 8004966:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800496a:	f000 fa39 	bl	8004de0 <scalbnf>
 800496e:	eeb0 8a40 	vmov.f32	s16, s0
 8004972:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8004976:	ee28 0a00 	vmul.f32	s0, s16, s0
 800497a:	f000 f9ed 	bl	8004d58 <floorf>
 800497e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8004982:	eea0 8a67 	vfms.f32	s16, s0, s15
 8004986:	2d00      	cmp	r5, #0
 8004988:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800498c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004990:	ee17 9a90 	vmov	r9, s15
 8004994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004998:	ee38 8a67 	vsub.f32	s16, s16, s15
 800499c:	dd41      	ble.n	8004a22 <__kernel_rem_pio2f+0x1ae>
 800499e:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80049a2:	a908      	add	r1, sp, #32
 80049a4:	f1c5 0e08 	rsb	lr, r5, #8
 80049a8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80049ac:	fa46 f00e 	asr.w	r0, r6, lr
 80049b0:	4481      	add	r9, r0
 80049b2:	fa00 f00e 	lsl.w	r0, r0, lr
 80049b6:	1a36      	subs	r6, r6, r0
 80049b8:	f1c5 0007 	rsb	r0, r5, #7
 80049bc:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80049c0:	4106      	asrs	r6, r0
 80049c2:	2e00      	cmp	r6, #0
 80049c4:	dd3c      	ble.n	8004a40 <__kernel_rem_pio2f+0x1cc>
 80049c6:	f04f 0e00 	mov.w	lr, #0
 80049ca:	f109 0901 	add.w	r9, r9, #1
 80049ce:	4670      	mov	r0, lr
 80049d0:	4574      	cmp	r4, lr
 80049d2:	dc68      	bgt.n	8004aa6 <__kernel_rem_pio2f+0x232>
 80049d4:	2d00      	cmp	r5, #0
 80049d6:	dd03      	ble.n	80049e0 <__kernel_rem_pio2f+0x16c>
 80049d8:	2d01      	cmp	r5, #1
 80049da:	d074      	beq.n	8004ac6 <__kernel_rem_pio2f+0x252>
 80049dc:	2d02      	cmp	r5, #2
 80049de:	d07d      	beq.n	8004adc <__kernel_rem_pio2f+0x268>
 80049e0:	2e02      	cmp	r6, #2
 80049e2:	d12d      	bne.n	8004a40 <__kernel_rem_pio2f+0x1cc>
 80049e4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80049e8:	ee30 8a48 	vsub.f32	s16, s0, s16
 80049ec:	b340      	cbz	r0, 8004a40 <__kernel_rem_pio2f+0x1cc>
 80049ee:	4628      	mov	r0, r5
 80049f0:	9306      	str	r3, [sp, #24]
 80049f2:	f000 f9f5 	bl	8004de0 <scalbnf>
 80049f6:	9b06      	ldr	r3, [sp, #24]
 80049f8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80049fc:	e020      	b.n	8004a40 <__kernel_rem_pio2f+0x1cc>
 80049fe:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004a02:	3e01      	subs	r6, #1
 8004a04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a0c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8004a10:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004a14:	ecac 0a01 	vstmia	ip!, {s0}
 8004a18:	ed90 0a00 	vldr	s0, [r0]
 8004a1c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004a20:	e79c      	b.n	800495c <__kernel_rem_pio2f+0xe8>
 8004a22:	d105      	bne.n	8004a30 <__kernel_rem_pio2f+0x1bc>
 8004a24:	1e60      	subs	r0, r4, #1
 8004a26:	a908      	add	r1, sp, #32
 8004a28:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8004a2c:	11f6      	asrs	r6, r6, #7
 8004a2e:	e7c8      	b.n	80049c2 <__kernel_rem_pio2f+0x14e>
 8004a30:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004a34:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a3c:	da31      	bge.n	8004aa2 <__kernel_rem_pio2f+0x22e>
 8004a3e:	2600      	movs	r6, #0
 8004a40:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a48:	f040 8098 	bne.w	8004b7c <__kernel_rem_pio2f+0x308>
 8004a4c:	1e60      	subs	r0, r4, #1
 8004a4e:	2200      	movs	r2, #0
 8004a50:	4550      	cmp	r0, sl
 8004a52:	da4b      	bge.n	8004aec <__kernel_rem_pio2f+0x278>
 8004a54:	2a00      	cmp	r2, #0
 8004a56:	d065      	beq.n	8004b24 <__kernel_rem_pio2f+0x2b0>
 8004a58:	3c01      	subs	r4, #1
 8004a5a:	ab08      	add	r3, sp, #32
 8004a5c:	3d08      	subs	r5, #8
 8004a5e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0f8      	beq.n	8004a58 <__kernel_rem_pio2f+0x1e4>
 8004a66:	4628      	mov	r0, r5
 8004a68:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004a6c:	f000 f9b8 	bl	8004de0 <scalbnf>
 8004a70:	1c63      	adds	r3, r4, #1
 8004a72:	aa44      	add	r2, sp, #272	@ 0x110
 8004a74:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8004b74 <__kernel_rem_pio2f+0x300>
 8004a78:	0099      	lsls	r1, r3, #2
 8004a7a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004a7e:	4623      	mov	r3, r4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f280 80a9 	bge.w	8004bd8 <__kernel_rem_pio2f+0x364>
 8004a86:	4623      	mov	r3, r4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f2c0 80c7 	blt.w	8004c1c <__kernel_rem_pio2f+0x3a8>
 8004a8e:	aa44      	add	r2, sp, #272	@ 0x110
 8004a90:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8004a94:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8004b6c <__kernel_rem_pio2f+0x2f8>
 8004a98:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8004b78 <__kernel_rem_pio2f+0x304>
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	1ae2      	subs	r2, r4, r3
 8004aa0:	e0b1      	b.n	8004c06 <__kernel_rem_pio2f+0x392>
 8004aa2:	2602      	movs	r6, #2
 8004aa4:	e78f      	b.n	80049c6 <__kernel_rem_pio2f+0x152>
 8004aa6:	f852 1b04 	ldr.w	r1, [r2], #4
 8004aaa:	b948      	cbnz	r0, 8004ac0 <__kernel_rem_pio2f+0x24c>
 8004aac:	b121      	cbz	r1, 8004ab8 <__kernel_rem_pio2f+0x244>
 8004aae:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8004ab2:	f842 1c04 	str.w	r1, [r2, #-4]
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	f10e 0e01 	add.w	lr, lr, #1
 8004abc:	4608      	mov	r0, r1
 8004abe:	e787      	b.n	80049d0 <__kernel_rem_pio2f+0x15c>
 8004ac0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8004ac4:	e7f5      	b.n	8004ab2 <__kernel_rem_pio2f+0x23e>
 8004ac6:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8004aca:	aa08      	add	r2, sp, #32
 8004acc:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8004ad0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ad4:	a908      	add	r1, sp, #32
 8004ad6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8004ada:	e781      	b.n	80049e0 <__kernel_rem_pio2f+0x16c>
 8004adc:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8004ae0:	aa08      	add	r2, sp, #32
 8004ae2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8004ae6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8004aea:	e7f3      	b.n	8004ad4 <__kernel_rem_pio2f+0x260>
 8004aec:	a908      	add	r1, sp, #32
 8004aee:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8004af2:	3801      	subs	r0, #1
 8004af4:	430a      	orrs	r2, r1
 8004af6:	e7ab      	b.n	8004a50 <__kernel_rem_pio2f+0x1dc>
 8004af8:	3201      	adds	r2, #1
 8004afa:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8004afe:	2e00      	cmp	r6, #0
 8004b00:	d0fa      	beq.n	8004af8 <__kernel_rem_pio2f+0x284>
 8004b02:	9905      	ldr	r1, [sp, #20]
 8004b04:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8004b08:	eb0d 0001 	add.w	r0, sp, r1
 8004b0c:	18e6      	adds	r6, r4, r3
 8004b0e:	a91c      	add	r1, sp, #112	@ 0x70
 8004b10:	f104 0c01 	add.w	ip, r4, #1
 8004b14:	384c      	subs	r0, #76	@ 0x4c
 8004b16:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8004b1a:	4422      	add	r2, r4
 8004b1c:	4562      	cmp	r2, ip
 8004b1e:	da04      	bge.n	8004b2a <__kernel_rem_pio2f+0x2b6>
 8004b20:	4614      	mov	r4, r2
 8004b22:	e70e      	b.n	8004942 <__kernel_rem_pio2f+0xce>
 8004b24:	9804      	ldr	r0, [sp, #16]
 8004b26:	2201      	movs	r2, #1
 8004b28:	e7e7      	b.n	8004afa <__kernel_rem_pio2f+0x286>
 8004b2a:	9903      	ldr	r1, [sp, #12]
 8004b2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004b30:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8004b34:	9105      	str	r1, [sp, #20]
 8004b36:	ee07 1a90 	vmov	s15, r1
 8004b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b3e:	2400      	movs	r4, #0
 8004b40:	ece6 7a01 	vstmia	r6!, {s15}
 8004b44:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8004b78 <__kernel_rem_pio2f+0x304>
 8004b48:	46b1      	mov	r9, r6
 8004b4a:	455c      	cmp	r4, fp
 8004b4c:	dd04      	ble.n	8004b58 <__kernel_rem_pio2f+0x2e4>
 8004b4e:	ece0 7a01 	vstmia	r0!, {s15}
 8004b52:	f10c 0c01 	add.w	ip, ip, #1
 8004b56:	e7e1      	b.n	8004b1c <__kernel_rem_pio2f+0x2a8>
 8004b58:	ecfe 6a01 	vldmia	lr!, {s13}
 8004b5c:	ed39 7a01 	vldmdb	r9!, {s14}
 8004b60:	3401      	adds	r4, #1
 8004b62:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004b66:	e7f0      	b.n	8004b4a <__kernel_rem_pio2f+0x2d6>
 8004b68:	080052f8 	.word	0x080052f8
 8004b6c:	080052cc 	.word	0x080052cc
 8004b70:	43800000 	.word	0x43800000
 8004b74:	3b800000 	.word	0x3b800000
 8004b78:	00000000 	.word	0x00000000
 8004b7c:	9b02      	ldr	r3, [sp, #8]
 8004b7e:	eeb0 0a48 	vmov.f32	s0, s16
 8004b82:	eba3 0008 	sub.w	r0, r3, r8
 8004b86:	f000 f92b 	bl	8004de0 <scalbnf>
 8004b8a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8004b70 <__kernel_rem_pio2f+0x2fc>
 8004b8e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b96:	db19      	blt.n	8004bcc <__kernel_rem_pio2f+0x358>
 8004b98:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8004b74 <__kernel_rem_pio2f+0x300>
 8004b9c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004ba0:	aa08      	add	r2, sp, #32
 8004ba2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ba6:	3508      	adds	r5, #8
 8004ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bac:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004bb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bb4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004bb8:	ee10 3a10 	vmov	r3, s0
 8004bbc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004bc0:	ee17 3a90 	vmov	r3, s15
 8004bc4:	3401      	adds	r4, #1
 8004bc6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004bca:	e74c      	b.n	8004a66 <__kernel_rem_pio2f+0x1f2>
 8004bcc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004bd0:	aa08      	add	r2, sp, #32
 8004bd2:	ee10 3a10 	vmov	r3, s0
 8004bd6:	e7f6      	b.n	8004bc6 <__kernel_rem_pio2f+0x352>
 8004bd8:	a808      	add	r0, sp, #32
 8004bda:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8004bde:	9001      	str	r0, [sp, #4]
 8004be0:	ee07 0a90 	vmov	s15, r0
 8004be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004be8:	3b01      	subs	r3, #1
 8004bea:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004bee:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004bf2:	ed62 7a01 	vstmdb	r2!, {s15}
 8004bf6:	e743      	b.n	8004a80 <__kernel_rem_pio2f+0x20c>
 8004bf8:	ecfc 6a01 	vldmia	ip!, {s13}
 8004bfc:	ecb5 7a01 	vldmia	r5!, {s14}
 8004c00:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004c04:	3001      	adds	r0, #1
 8004c06:	4550      	cmp	r0, sl
 8004c08:	dc01      	bgt.n	8004c0e <__kernel_rem_pio2f+0x39a>
 8004c0a:	4282      	cmp	r2, r0
 8004c0c:	daf4      	bge.n	8004bf8 <__kernel_rem_pio2f+0x384>
 8004c0e:	a858      	add	r0, sp, #352	@ 0x160
 8004c10:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004c14:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	e735      	b.n	8004a88 <__kernel_rem_pio2f+0x214>
 8004c1c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	dc09      	bgt.n	8004c36 <__kernel_rem_pio2f+0x3c2>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	dc2b      	bgt.n	8004c7e <__kernel_rem_pio2f+0x40a>
 8004c26:	d044      	beq.n	8004cb2 <__kernel_rem_pio2f+0x43e>
 8004c28:	f009 0007 	and.w	r0, r9, #7
 8004c2c:	b059      	add	sp, #356	@ 0x164
 8004c2e:	ecbd 8b04 	vpop	{d8-d9}
 8004c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c36:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8004c38:	2b03      	cmp	r3, #3
 8004c3a:	d1f5      	bne.n	8004c28 <__kernel_rem_pio2f+0x3b4>
 8004c3c:	aa30      	add	r2, sp, #192	@ 0xc0
 8004c3e:	1f0b      	subs	r3, r1, #4
 8004c40:	4413      	add	r3, r2
 8004c42:	461a      	mov	r2, r3
 8004c44:	4620      	mov	r0, r4
 8004c46:	2800      	cmp	r0, #0
 8004c48:	f1a2 0204 	sub.w	r2, r2, #4
 8004c4c:	dc52      	bgt.n	8004cf4 <__kernel_rem_pio2f+0x480>
 8004c4e:	4622      	mov	r2, r4
 8004c50:	2a01      	cmp	r2, #1
 8004c52:	f1a3 0304 	sub.w	r3, r3, #4
 8004c56:	dc5d      	bgt.n	8004d14 <__kernel_rem_pio2f+0x4a0>
 8004c58:	ab30      	add	r3, sp, #192	@ 0xc0
 8004c5a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8004b78 <__kernel_rem_pio2f+0x304>
 8004c5e:	440b      	add	r3, r1
 8004c60:	2c01      	cmp	r4, #1
 8004c62:	dc67      	bgt.n	8004d34 <__kernel_rem_pio2f+0x4c0>
 8004c64:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8004c68:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8004c6c:	2e00      	cmp	r6, #0
 8004c6e:	d167      	bne.n	8004d40 <__kernel_rem_pio2f+0x4cc>
 8004c70:	edc7 6a00 	vstr	s13, [r7]
 8004c74:	ed87 7a01 	vstr	s14, [r7, #4]
 8004c78:	edc7 7a02 	vstr	s15, [r7, #8]
 8004c7c:	e7d4      	b.n	8004c28 <__kernel_rem_pio2f+0x3b4>
 8004c7e:	ab30      	add	r3, sp, #192	@ 0xc0
 8004c80:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8004b78 <__kernel_rem_pio2f+0x304>
 8004c84:	440b      	add	r3, r1
 8004c86:	4622      	mov	r2, r4
 8004c88:	2a00      	cmp	r2, #0
 8004c8a:	da24      	bge.n	8004cd6 <__kernel_rem_pio2f+0x462>
 8004c8c:	b34e      	cbz	r6, 8004ce2 <__kernel_rem_pio2f+0x46e>
 8004c8e:	eef1 7a47 	vneg.f32	s15, s14
 8004c92:	edc7 7a00 	vstr	s15, [r7]
 8004c96:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8004c9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c9e:	aa31      	add	r2, sp, #196	@ 0xc4
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	429c      	cmp	r4, r3
 8004ca4:	da20      	bge.n	8004ce8 <__kernel_rem_pio2f+0x474>
 8004ca6:	b10e      	cbz	r6, 8004cac <__kernel_rem_pio2f+0x438>
 8004ca8:	eef1 7a67 	vneg.f32	s15, s15
 8004cac:	edc7 7a01 	vstr	s15, [r7, #4]
 8004cb0:	e7ba      	b.n	8004c28 <__kernel_rem_pio2f+0x3b4>
 8004cb2:	ab30      	add	r3, sp, #192	@ 0xc0
 8004cb4:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8004b78 <__kernel_rem_pio2f+0x304>
 8004cb8:	440b      	add	r3, r1
 8004cba:	2c00      	cmp	r4, #0
 8004cbc:	da05      	bge.n	8004cca <__kernel_rem_pio2f+0x456>
 8004cbe:	b10e      	cbz	r6, 8004cc4 <__kernel_rem_pio2f+0x450>
 8004cc0:	eef1 7a67 	vneg.f32	s15, s15
 8004cc4:	edc7 7a00 	vstr	s15, [r7]
 8004cc8:	e7ae      	b.n	8004c28 <__kernel_rem_pio2f+0x3b4>
 8004cca:	ed33 7a01 	vldmdb	r3!, {s14}
 8004cce:	3c01      	subs	r4, #1
 8004cd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cd4:	e7f1      	b.n	8004cba <__kernel_rem_pio2f+0x446>
 8004cd6:	ed73 7a01 	vldmdb	r3!, {s15}
 8004cda:	3a01      	subs	r2, #1
 8004cdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ce0:	e7d2      	b.n	8004c88 <__kernel_rem_pio2f+0x414>
 8004ce2:	eef0 7a47 	vmov.f32	s15, s14
 8004ce6:	e7d4      	b.n	8004c92 <__kernel_rem_pio2f+0x41e>
 8004ce8:	ecb2 7a01 	vldmia	r2!, {s14}
 8004cec:	3301      	adds	r3, #1
 8004cee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cf2:	e7d6      	b.n	8004ca2 <__kernel_rem_pio2f+0x42e>
 8004cf4:	edd2 7a00 	vldr	s15, [r2]
 8004cf8:	edd2 6a01 	vldr	s13, [r2, #4]
 8004cfc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004d00:	3801      	subs	r0, #1
 8004d02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d06:	ed82 7a00 	vstr	s14, [r2]
 8004d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d0e:	edc2 7a01 	vstr	s15, [r2, #4]
 8004d12:	e798      	b.n	8004c46 <__kernel_rem_pio2f+0x3d2>
 8004d14:	edd3 7a00 	vldr	s15, [r3]
 8004d18:	edd3 6a01 	vldr	s13, [r3, #4]
 8004d1c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004d20:	3a01      	subs	r2, #1
 8004d22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d26:	ed83 7a00 	vstr	s14, [r3]
 8004d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d2e:	edc3 7a01 	vstr	s15, [r3, #4]
 8004d32:	e78d      	b.n	8004c50 <__kernel_rem_pio2f+0x3dc>
 8004d34:	ed33 7a01 	vldmdb	r3!, {s14}
 8004d38:	3c01      	subs	r4, #1
 8004d3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d3e:	e78f      	b.n	8004c60 <__kernel_rem_pio2f+0x3ec>
 8004d40:	eef1 6a66 	vneg.f32	s13, s13
 8004d44:	eeb1 7a47 	vneg.f32	s14, s14
 8004d48:	edc7 6a00 	vstr	s13, [r7]
 8004d4c:	ed87 7a01 	vstr	s14, [r7, #4]
 8004d50:	eef1 7a67 	vneg.f32	s15, s15
 8004d54:	e790      	b.n	8004c78 <__kernel_rem_pio2f+0x404>
 8004d56:	bf00      	nop

08004d58 <floorf>:
 8004d58:	ee10 3a10 	vmov	r3, s0
 8004d5c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004d60:	3a7f      	subs	r2, #127	@ 0x7f
 8004d62:	2a16      	cmp	r2, #22
 8004d64:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004d68:	dc2b      	bgt.n	8004dc2 <floorf+0x6a>
 8004d6a:	2a00      	cmp	r2, #0
 8004d6c:	da12      	bge.n	8004d94 <floorf+0x3c>
 8004d6e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004dd4 <floorf+0x7c>
 8004d72:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004d76:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d7e:	dd06      	ble.n	8004d8e <floorf+0x36>
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	da24      	bge.n	8004dce <floorf+0x76>
 8004d84:	2900      	cmp	r1, #0
 8004d86:	4b14      	ldr	r3, [pc, #80]	@ (8004dd8 <floorf+0x80>)
 8004d88:	bf08      	it	eq
 8004d8a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8004d8e:	ee00 3a10 	vmov	s0, r3
 8004d92:	4770      	bx	lr
 8004d94:	4911      	ldr	r1, [pc, #68]	@ (8004ddc <floorf+0x84>)
 8004d96:	4111      	asrs	r1, r2
 8004d98:	420b      	tst	r3, r1
 8004d9a:	d0fa      	beq.n	8004d92 <floorf+0x3a>
 8004d9c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8004dd4 <floorf+0x7c>
 8004da0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004da4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dac:	ddef      	ble.n	8004d8e <floorf+0x36>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	bfbe      	ittt	lt
 8004db2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8004db6:	fa40 f202 	asrlt.w	r2, r0, r2
 8004dba:	189b      	addlt	r3, r3, r2
 8004dbc:	ea23 0301 	bic.w	r3, r3, r1
 8004dc0:	e7e5      	b.n	8004d8e <floorf+0x36>
 8004dc2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8004dc6:	d3e4      	bcc.n	8004d92 <floorf+0x3a>
 8004dc8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004dcc:	4770      	bx	lr
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e7dd      	b.n	8004d8e <floorf+0x36>
 8004dd2:	bf00      	nop
 8004dd4:	7149f2ca 	.word	0x7149f2ca
 8004dd8:	bf800000 	.word	0xbf800000
 8004ddc:	007fffff 	.word	0x007fffff

08004de0 <scalbnf>:
 8004de0:	ee10 3a10 	vmov	r3, s0
 8004de4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8004de8:	d02b      	beq.n	8004e42 <scalbnf+0x62>
 8004dea:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8004dee:	d302      	bcc.n	8004df6 <scalbnf+0x16>
 8004df0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004df4:	4770      	bx	lr
 8004df6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8004dfa:	d123      	bne.n	8004e44 <scalbnf+0x64>
 8004dfc:	4b24      	ldr	r3, [pc, #144]	@ (8004e90 <scalbnf+0xb0>)
 8004dfe:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8004e94 <scalbnf+0xb4>
 8004e02:	4298      	cmp	r0, r3
 8004e04:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004e08:	db17      	blt.n	8004e3a <scalbnf+0x5a>
 8004e0a:	ee10 3a10 	vmov	r3, s0
 8004e0e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004e12:	3a19      	subs	r2, #25
 8004e14:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004e18:	4288      	cmp	r0, r1
 8004e1a:	dd15      	ble.n	8004e48 <scalbnf+0x68>
 8004e1c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8004e98 <scalbnf+0xb8>
 8004e20:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8004e9c <scalbnf+0xbc>
 8004e24:	ee10 3a10 	vmov	r3, s0
 8004e28:	eeb0 7a67 	vmov.f32	s14, s15
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	bfb8      	it	lt
 8004e30:	eef0 7a66 	vmovlt.f32	s15, s13
 8004e34:	ee27 0a87 	vmul.f32	s0, s15, s14
 8004e38:	4770      	bx	lr
 8004e3a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004ea0 <scalbnf+0xc0>
 8004e3e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004e42:	4770      	bx	lr
 8004e44:	0dd2      	lsrs	r2, r2, #23
 8004e46:	e7e5      	b.n	8004e14 <scalbnf+0x34>
 8004e48:	4410      	add	r0, r2
 8004e4a:	28fe      	cmp	r0, #254	@ 0xfe
 8004e4c:	dce6      	bgt.n	8004e1c <scalbnf+0x3c>
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	dd06      	ble.n	8004e60 <scalbnf+0x80>
 8004e52:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004e56:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8004e5a:	ee00 3a10 	vmov	s0, r3
 8004e5e:	4770      	bx	lr
 8004e60:	f110 0f16 	cmn.w	r0, #22
 8004e64:	da09      	bge.n	8004e7a <scalbnf+0x9a>
 8004e66:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8004ea0 <scalbnf+0xc0>
 8004e6a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8004ea4 <scalbnf+0xc4>
 8004e6e:	ee10 3a10 	vmov	r3, s0
 8004e72:	eeb0 7a67 	vmov.f32	s14, s15
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	e7d9      	b.n	8004e2e <scalbnf+0x4e>
 8004e7a:	3019      	adds	r0, #25
 8004e7c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004e80:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8004e84:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8004ea8 <scalbnf+0xc8>
 8004e88:	ee07 3a90 	vmov	s15, r3
 8004e8c:	e7d7      	b.n	8004e3e <scalbnf+0x5e>
 8004e8e:	bf00      	nop
 8004e90:	ffff3cb0 	.word	0xffff3cb0
 8004e94:	4c000000 	.word	0x4c000000
 8004e98:	7149f2ca 	.word	0x7149f2ca
 8004e9c:	f149f2ca 	.word	0xf149f2ca
 8004ea0:	0da24260 	.word	0x0da24260
 8004ea4:	8da24260 	.word	0x8da24260
 8004ea8:	33000000 	.word	0x33000000

08004eac <memset>:
 8004eac:	4402      	add	r2, r0
 8004eae:	4603      	mov	r3, r0
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d100      	bne.n	8004eb6 <memset+0xa>
 8004eb4:	4770      	bx	lr
 8004eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eba:	e7f9      	b.n	8004eb0 <memset+0x4>

08004ebc <__libc_init_array>:
 8004ebc:	b570      	push	{r4, r5, r6, lr}
 8004ebe:	4d0d      	ldr	r5, [pc, #52]	@ (8004ef4 <__libc_init_array+0x38>)
 8004ec0:	4c0d      	ldr	r4, [pc, #52]	@ (8004ef8 <__libc_init_array+0x3c>)
 8004ec2:	1b64      	subs	r4, r4, r5
 8004ec4:	10a4      	asrs	r4, r4, #2
 8004ec6:	2600      	movs	r6, #0
 8004ec8:	42a6      	cmp	r6, r4
 8004eca:	d109      	bne.n	8004ee0 <__libc_init_array+0x24>
 8004ecc:	4d0b      	ldr	r5, [pc, #44]	@ (8004efc <__libc_init_array+0x40>)
 8004ece:	4c0c      	ldr	r4, [pc, #48]	@ (8004f00 <__libc_init_array+0x44>)
 8004ed0:	f000 f818 	bl	8004f04 <_init>
 8004ed4:	1b64      	subs	r4, r4, r5
 8004ed6:	10a4      	asrs	r4, r4, #2
 8004ed8:	2600      	movs	r6, #0
 8004eda:	42a6      	cmp	r6, r4
 8004edc:	d105      	bne.n	8004eea <__libc_init_array+0x2e>
 8004ede:	bd70      	pop	{r4, r5, r6, pc}
 8004ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee4:	4798      	blx	r3
 8004ee6:	3601      	adds	r6, #1
 8004ee8:	e7ee      	b.n	8004ec8 <__libc_init_array+0xc>
 8004eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eee:	4798      	blx	r3
 8004ef0:	3601      	adds	r6, #1
 8004ef2:	e7f2      	b.n	8004eda <__libc_init_array+0x1e>
 8004ef4:	0800530c 	.word	0x0800530c
 8004ef8:	0800530c 	.word	0x0800530c
 8004efc:	0800530c 	.word	0x0800530c
 8004f00:	08005314 	.word	0x08005314

08004f04 <_init>:
 8004f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f06:	bf00      	nop
 8004f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f0a:	bc08      	pop	{r3}
 8004f0c:	469e      	mov	lr, r3
 8004f0e:	4770      	bx	lr

08004f10 <_fini>:
 8004f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f12:	bf00      	nop
 8004f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f16:	bc08      	pop	{r3}
 8004f18:	469e      	mov	lr, r3
 8004f1a:	4770      	bx	lr
