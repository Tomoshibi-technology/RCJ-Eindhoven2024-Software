
Panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000560c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080056c4  080056c4  000156c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057e4  080057e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080057e4  080057e4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057e4  080057e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080057e4  080057e4  000157e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057ec  080057ec  000157ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080057f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d0  2000000c  080057fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  080057fc  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e7d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f5  00000000  00000000  00034eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  000376a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  000384b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017652  00000000  00000000  000391f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a64  00000000  00000000  00050842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c8c4  00000000  00000000  000622a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eeb6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033b8  00000000  00000000  000eebbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080056ac 	.word	0x080056ac

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080056ac 	.word	0x080056ac

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_cfrcmple>:
 8000218:	4684      	mov	ip, r0
 800021a:	0008      	movs	r0, r1
 800021c:	4661      	mov	r1, ip
 800021e:	e7ff      	b.n	8000220 <__aeabi_cfcmpeq>

08000220 <__aeabi_cfcmpeq>:
 8000220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000222:	f000 f89f 	bl	8000364 <__lesf2>
 8000226:	2800      	cmp	r0, #0
 8000228:	d401      	bmi.n	800022e <__aeabi_cfcmpeq+0xe>
 800022a:	2100      	movs	r1, #0
 800022c:	42c8      	cmn	r0, r1
 800022e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000230 <__aeabi_fcmpeq>:
 8000230:	b510      	push	{r4, lr}
 8000232:	f000 f82b 	bl	800028c <__eqsf2>
 8000236:	4240      	negs	r0, r0
 8000238:	3001      	adds	r0, #1
 800023a:	bd10      	pop	{r4, pc}

0800023c <__aeabi_fcmplt>:
 800023c:	b510      	push	{r4, lr}
 800023e:	f000 f891 	bl	8000364 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	db01      	blt.n	800024a <__aeabi_fcmplt+0xe>
 8000246:	2000      	movs	r0, #0
 8000248:	bd10      	pop	{r4, pc}
 800024a:	2001      	movs	r0, #1
 800024c:	bd10      	pop	{r4, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_fcmple>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 f887 	bl	8000364 <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	dd01      	ble.n	800025e <__aeabi_fcmple+0xe>
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	2001      	movs	r0, #1
 8000260:	bd10      	pop	{r4, pc}
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_fcmpgt>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 f837 	bl	80002d8 <__gesf2>
 800026a:	2800      	cmp	r0, #0
 800026c:	dc01      	bgt.n	8000272 <__aeabi_fcmpgt+0xe>
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	2001      	movs	r0, #1
 8000274:	bd10      	pop	{r4, pc}
 8000276:	46c0      	nop			; (mov r8, r8)

08000278 <__aeabi_fcmpge>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f000 f82d 	bl	80002d8 <__gesf2>
 800027e:	2800      	cmp	r0, #0
 8000280:	da01      	bge.n	8000286 <__aeabi_fcmpge+0xe>
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	2001      	movs	r0, #1
 8000288:	bd10      	pop	{r4, pc}
 800028a:	46c0      	nop			; (mov r8, r8)

0800028c <__eqsf2>:
 800028c:	b570      	push	{r4, r5, r6, lr}
 800028e:	0042      	lsls	r2, r0, #1
 8000290:	0245      	lsls	r5, r0, #9
 8000292:	024e      	lsls	r6, r1, #9
 8000294:	004c      	lsls	r4, r1, #1
 8000296:	0fc3      	lsrs	r3, r0, #31
 8000298:	0a6d      	lsrs	r5, r5, #9
 800029a:	2001      	movs	r0, #1
 800029c:	0e12      	lsrs	r2, r2, #24
 800029e:	0a76      	lsrs	r6, r6, #9
 80002a0:	0e24      	lsrs	r4, r4, #24
 80002a2:	0fc9      	lsrs	r1, r1, #31
 80002a4:	2aff      	cmp	r2, #255	; 0xff
 80002a6:	d006      	beq.n	80002b6 <__eqsf2+0x2a>
 80002a8:	2cff      	cmp	r4, #255	; 0xff
 80002aa:	d003      	beq.n	80002b4 <__eqsf2+0x28>
 80002ac:	42a2      	cmp	r2, r4
 80002ae:	d101      	bne.n	80002b4 <__eqsf2+0x28>
 80002b0:	42b5      	cmp	r5, r6
 80002b2:	d006      	beq.n	80002c2 <__eqsf2+0x36>
 80002b4:	bd70      	pop	{r4, r5, r6, pc}
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	d1fc      	bne.n	80002b4 <__eqsf2+0x28>
 80002ba:	2cff      	cmp	r4, #255	; 0xff
 80002bc:	d1fa      	bne.n	80002b4 <__eqsf2+0x28>
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d1f8      	bne.n	80002b4 <__eqsf2+0x28>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d006      	beq.n	80002d4 <__eqsf2+0x48>
 80002c6:	2001      	movs	r0, #1
 80002c8:	2a00      	cmp	r2, #0
 80002ca:	d1f3      	bne.n	80002b4 <__eqsf2+0x28>
 80002cc:	0028      	movs	r0, r5
 80002ce:	1e43      	subs	r3, r0, #1
 80002d0:	4198      	sbcs	r0, r3
 80002d2:	e7ef      	b.n	80002b4 <__eqsf2+0x28>
 80002d4:	2000      	movs	r0, #0
 80002d6:	e7ed      	b.n	80002b4 <__eqsf2+0x28>

080002d8 <__gesf2>:
 80002d8:	b570      	push	{r4, r5, r6, lr}
 80002da:	0042      	lsls	r2, r0, #1
 80002dc:	0245      	lsls	r5, r0, #9
 80002de:	024e      	lsls	r6, r1, #9
 80002e0:	004c      	lsls	r4, r1, #1
 80002e2:	0fc3      	lsrs	r3, r0, #31
 80002e4:	0a6d      	lsrs	r5, r5, #9
 80002e6:	0e12      	lsrs	r2, r2, #24
 80002e8:	0a76      	lsrs	r6, r6, #9
 80002ea:	0e24      	lsrs	r4, r4, #24
 80002ec:	0fc8      	lsrs	r0, r1, #31
 80002ee:	2aff      	cmp	r2, #255	; 0xff
 80002f0:	d01b      	beq.n	800032a <__gesf2+0x52>
 80002f2:	2cff      	cmp	r4, #255	; 0xff
 80002f4:	d00e      	beq.n	8000314 <__gesf2+0x3c>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d11b      	bne.n	8000332 <__gesf2+0x5a>
 80002fa:	2c00      	cmp	r4, #0
 80002fc:	d101      	bne.n	8000302 <__gesf2+0x2a>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d01c      	beq.n	800033c <__gesf2+0x64>
 8000302:	2d00      	cmp	r5, #0
 8000304:	d00c      	beq.n	8000320 <__gesf2+0x48>
 8000306:	4283      	cmp	r3, r0
 8000308:	d01c      	beq.n	8000344 <__gesf2+0x6c>
 800030a:	2102      	movs	r1, #2
 800030c:	1e58      	subs	r0, r3, #1
 800030e:	4008      	ands	r0, r1
 8000310:	3801      	subs	r0, #1
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	2e00      	cmp	r6, #0
 8000316:	d122      	bne.n	800035e <__gesf2+0x86>
 8000318:	2a00      	cmp	r2, #0
 800031a:	d1f4      	bne.n	8000306 <__gesf2+0x2e>
 800031c:	2d00      	cmp	r5, #0
 800031e:	d1f2      	bne.n	8000306 <__gesf2+0x2e>
 8000320:	2800      	cmp	r0, #0
 8000322:	d1f6      	bne.n	8000312 <__gesf2+0x3a>
 8000324:	2001      	movs	r0, #1
 8000326:	4240      	negs	r0, r0
 8000328:	e7f3      	b.n	8000312 <__gesf2+0x3a>
 800032a:	2d00      	cmp	r5, #0
 800032c:	d117      	bne.n	800035e <__gesf2+0x86>
 800032e:	2cff      	cmp	r4, #255	; 0xff
 8000330:	d0f0      	beq.n	8000314 <__gesf2+0x3c>
 8000332:	2c00      	cmp	r4, #0
 8000334:	d1e7      	bne.n	8000306 <__gesf2+0x2e>
 8000336:	2e00      	cmp	r6, #0
 8000338:	d1e5      	bne.n	8000306 <__gesf2+0x2e>
 800033a:	e7e6      	b.n	800030a <__gesf2+0x32>
 800033c:	2000      	movs	r0, #0
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e7      	beq.n	8000312 <__gesf2+0x3a>
 8000342:	e7e2      	b.n	800030a <__gesf2+0x32>
 8000344:	42a2      	cmp	r2, r4
 8000346:	dc05      	bgt.n	8000354 <__gesf2+0x7c>
 8000348:	dbea      	blt.n	8000320 <__gesf2+0x48>
 800034a:	42b5      	cmp	r5, r6
 800034c:	d802      	bhi.n	8000354 <__gesf2+0x7c>
 800034e:	d3e7      	bcc.n	8000320 <__gesf2+0x48>
 8000350:	2000      	movs	r0, #0
 8000352:	e7de      	b.n	8000312 <__gesf2+0x3a>
 8000354:	4243      	negs	r3, r0
 8000356:	4158      	adcs	r0, r3
 8000358:	0040      	lsls	r0, r0, #1
 800035a:	3801      	subs	r0, #1
 800035c:	e7d9      	b.n	8000312 <__gesf2+0x3a>
 800035e:	2002      	movs	r0, #2
 8000360:	4240      	negs	r0, r0
 8000362:	e7d6      	b.n	8000312 <__gesf2+0x3a>

08000364 <__lesf2>:
 8000364:	b570      	push	{r4, r5, r6, lr}
 8000366:	0042      	lsls	r2, r0, #1
 8000368:	0245      	lsls	r5, r0, #9
 800036a:	024e      	lsls	r6, r1, #9
 800036c:	004c      	lsls	r4, r1, #1
 800036e:	0fc3      	lsrs	r3, r0, #31
 8000370:	0a6d      	lsrs	r5, r5, #9
 8000372:	0e12      	lsrs	r2, r2, #24
 8000374:	0a76      	lsrs	r6, r6, #9
 8000376:	0e24      	lsrs	r4, r4, #24
 8000378:	0fc8      	lsrs	r0, r1, #31
 800037a:	2aff      	cmp	r2, #255	; 0xff
 800037c:	d00b      	beq.n	8000396 <__lesf2+0x32>
 800037e:	2cff      	cmp	r4, #255	; 0xff
 8000380:	d00d      	beq.n	800039e <__lesf2+0x3a>
 8000382:	2a00      	cmp	r2, #0
 8000384:	d11f      	bne.n	80003c6 <__lesf2+0x62>
 8000386:	2c00      	cmp	r4, #0
 8000388:	d116      	bne.n	80003b8 <__lesf2+0x54>
 800038a:	2e00      	cmp	r6, #0
 800038c:	d114      	bne.n	80003b8 <__lesf2+0x54>
 800038e:	2000      	movs	r0, #0
 8000390:	2d00      	cmp	r5, #0
 8000392:	d010      	beq.n	80003b6 <__lesf2+0x52>
 8000394:	e009      	b.n	80003aa <__lesf2+0x46>
 8000396:	2d00      	cmp	r5, #0
 8000398:	d10c      	bne.n	80003b4 <__lesf2+0x50>
 800039a:	2cff      	cmp	r4, #255	; 0xff
 800039c:	d113      	bne.n	80003c6 <__lesf2+0x62>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d108      	bne.n	80003b4 <__lesf2+0x50>
 80003a2:	2a00      	cmp	r2, #0
 80003a4:	d008      	beq.n	80003b8 <__lesf2+0x54>
 80003a6:	4283      	cmp	r3, r0
 80003a8:	d012      	beq.n	80003d0 <__lesf2+0x6c>
 80003aa:	2102      	movs	r1, #2
 80003ac:	1e58      	subs	r0, r3, #1
 80003ae:	4008      	ands	r0, r1
 80003b0:	3801      	subs	r0, #1
 80003b2:	e000      	b.n	80003b6 <__lesf2+0x52>
 80003b4:	2002      	movs	r0, #2
 80003b6:	bd70      	pop	{r4, r5, r6, pc}
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	d1f4      	bne.n	80003a6 <__lesf2+0x42>
 80003bc:	2800      	cmp	r0, #0
 80003be:	d1fa      	bne.n	80003b6 <__lesf2+0x52>
 80003c0:	2001      	movs	r0, #1
 80003c2:	4240      	negs	r0, r0
 80003c4:	e7f7      	b.n	80003b6 <__lesf2+0x52>
 80003c6:	2c00      	cmp	r4, #0
 80003c8:	d1ed      	bne.n	80003a6 <__lesf2+0x42>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d1eb      	bne.n	80003a6 <__lesf2+0x42>
 80003ce:	e7ec      	b.n	80003aa <__lesf2+0x46>
 80003d0:	42a2      	cmp	r2, r4
 80003d2:	dc05      	bgt.n	80003e0 <__lesf2+0x7c>
 80003d4:	dbf2      	blt.n	80003bc <__lesf2+0x58>
 80003d6:	42b5      	cmp	r5, r6
 80003d8:	d802      	bhi.n	80003e0 <__lesf2+0x7c>
 80003da:	d3ef      	bcc.n	80003bc <__lesf2+0x58>
 80003dc:	2000      	movs	r0, #0
 80003de:	e7ea      	b.n	80003b6 <__lesf2+0x52>
 80003e0:	4243      	negs	r3, r0
 80003e2:	4158      	adcs	r0, r3
 80003e4:	0040      	lsls	r0, r0, #1
 80003e6:	3801      	subs	r0, #1
 80003e8:	e7e5      	b.n	80003b6 <__lesf2+0x52>
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_i2f>:
 80003ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ee:	2800      	cmp	r0, #0
 80003f0:	d013      	beq.n	800041a <__aeabi_i2f+0x2e>
 80003f2:	17c3      	asrs	r3, r0, #31
 80003f4:	18c6      	adds	r6, r0, r3
 80003f6:	405e      	eors	r6, r3
 80003f8:	0fc4      	lsrs	r4, r0, #31
 80003fa:	0030      	movs	r0, r6
 80003fc:	f000 fb16 	bl	8000a2c <__clzsi2>
 8000400:	239e      	movs	r3, #158	; 0x9e
 8000402:	0005      	movs	r5, r0
 8000404:	1a1b      	subs	r3, r3, r0
 8000406:	2b96      	cmp	r3, #150	; 0x96
 8000408:	dc0f      	bgt.n	800042a <__aeabi_i2f+0x3e>
 800040a:	2808      	cmp	r0, #8
 800040c:	dd01      	ble.n	8000412 <__aeabi_i2f+0x26>
 800040e:	3d08      	subs	r5, #8
 8000410:	40ae      	lsls	r6, r5
 8000412:	0276      	lsls	r6, r6, #9
 8000414:	0a76      	lsrs	r6, r6, #9
 8000416:	b2d8      	uxtb	r0, r3
 8000418:	e002      	b.n	8000420 <__aeabi_i2f+0x34>
 800041a:	2400      	movs	r4, #0
 800041c:	2000      	movs	r0, #0
 800041e:	2600      	movs	r6, #0
 8000420:	05c0      	lsls	r0, r0, #23
 8000422:	4330      	orrs	r0, r6
 8000424:	07e4      	lsls	r4, r4, #31
 8000426:	4320      	orrs	r0, r4
 8000428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800042a:	2b99      	cmp	r3, #153	; 0x99
 800042c:	dd0c      	ble.n	8000448 <__aeabi_i2f+0x5c>
 800042e:	2205      	movs	r2, #5
 8000430:	0031      	movs	r1, r6
 8000432:	1a12      	subs	r2, r2, r0
 8000434:	40d1      	lsrs	r1, r2
 8000436:	000a      	movs	r2, r1
 8000438:	0001      	movs	r1, r0
 800043a:	0030      	movs	r0, r6
 800043c:	311b      	adds	r1, #27
 800043e:	4088      	lsls	r0, r1
 8000440:	1e41      	subs	r1, r0, #1
 8000442:	4188      	sbcs	r0, r1
 8000444:	4302      	orrs	r2, r0
 8000446:	0016      	movs	r6, r2
 8000448:	2d05      	cmp	r5, #5
 800044a:	dc12      	bgt.n	8000472 <__aeabi_i2f+0x86>
 800044c:	0031      	movs	r1, r6
 800044e:	4f0d      	ldr	r7, [pc, #52]	; (8000484 <__aeabi_i2f+0x98>)
 8000450:	4039      	ands	r1, r7
 8000452:	0772      	lsls	r2, r6, #29
 8000454:	d009      	beq.n	800046a <__aeabi_i2f+0x7e>
 8000456:	200f      	movs	r0, #15
 8000458:	4030      	ands	r0, r6
 800045a:	2804      	cmp	r0, #4
 800045c:	d005      	beq.n	800046a <__aeabi_i2f+0x7e>
 800045e:	3104      	adds	r1, #4
 8000460:	014a      	lsls	r2, r1, #5
 8000462:	d502      	bpl.n	800046a <__aeabi_i2f+0x7e>
 8000464:	239f      	movs	r3, #159	; 0x9f
 8000466:	4039      	ands	r1, r7
 8000468:	1b5b      	subs	r3, r3, r5
 800046a:	0189      	lsls	r1, r1, #6
 800046c:	0a4e      	lsrs	r6, r1, #9
 800046e:	b2d8      	uxtb	r0, r3
 8000470:	e7d6      	b.n	8000420 <__aeabi_i2f+0x34>
 8000472:	1f6a      	subs	r2, r5, #5
 8000474:	4096      	lsls	r6, r2
 8000476:	0031      	movs	r1, r6
 8000478:	4f02      	ldr	r7, [pc, #8]	; (8000484 <__aeabi_i2f+0x98>)
 800047a:	4039      	ands	r1, r7
 800047c:	0772      	lsls	r2, r6, #29
 800047e:	d0f4      	beq.n	800046a <__aeabi_i2f+0x7e>
 8000480:	e7e9      	b.n	8000456 <__aeabi_i2f+0x6a>
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	fbffffff 	.word	0xfbffffff

08000488 <__aeabi_dmul>:
 8000488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800048a:	4657      	mov	r7, sl
 800048c:	464e      	mov	r6, r9
 800048e:	4645      	mov	r5, r8
 8000490:	46de      	mov	lr, fp
 8000492:	b5e0      	push	{r5, r6, r7, lr}
 8000494:	4698      	mov	r8, r3
 8000496:	030c      	lsls	r4, r1, #12
 8000498:	004b      	lsls	r3, r1, #1
 800049a:	0006      	movs	r6, r0
 800049c:	4692      	mov	sl, r2
 800049e:	b087      	sub	sp, #28
 80004a0:	0b24      	lsrs	r4, r4, #12
 80004a2:	0d5b      	lsrs	r3, r3, #21
 80004a4:	0fcf      	lsrs	r7, r1, #31
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d100      	bne.n	80004ac <__aeabi_dmul+0x24>
 80004aa:	e15c      	b.n	8000766 <__aeabi_dmul+0x2de>
 80004ac:	4ad9      	ldr	r2, [pc, #868]	; (8000814 <__aeabi_dmul+0x38c>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d100      	bne.n	80004b4 <__aeabi_dmul+0x2c>
 80004b2:	e175      	b.n	80007a0 <__aeabi_dmul+0x318>
 80004b4:	0f42      	lsrs	r2, r0, #29
 80004b6:	00e4      	lsls	r4, r4, #3
 80004b8:	4314      	orrs	r4, r2
 80004ba:	2280      	movs	r2, #128	; 0x80
 80004bc:	0412      	lsls	r2, r2, #16
 80004be:	4314      	orrs	r4, r2
 80004c0:	4ad5      	ldr	r2, [pc, #852]	; (8000818 <__aeabi_dmul+0x390>)
 80004c2:	00c5      	lsls	r5, r0, #3
 80004c4:	4694      	mov	ip, r2
 80004c6:	4463      	add	r3, ip
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	2300      	movs	r3, #0
 80004cc:	4699      	mov	r9, r3
 80004ce:	469b      	mov	fp, r3
 80004d0:	4643      	mov	r3, r8
 80004d2:	4642      	mov	r2, r8
 80004d4:	031e      	lsls	r6, r3, #12
 80004d6:	0fd2      	lsrs	r2, r2, #31
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	4650      	mov	r0, sl
 80004dc:	4690      	mov	r8, r2
 80004de:	0b36      	lsrs	r6, r6, #12
 80004e0:	0d5b      	lsrs	r3, r3, #21
 80004e2:	d100      	bne.n	80004e6 <__aeabi_dmul+0x5e>
 80004e4:	e120      	b.n	8000728 <__aeabi_dmul+0x2a0>
 80004e6:	4acb      	ldr	r2, [pc, #812]	; (8000814 <__aeabi_dmul+0x38c>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d100      	bne.n	80004ee <__aeabi_dmul+0x66>
 80004ec:	e162      	b.n	80007b4 <__aeabi_dmul+0x32c>
 80004ee:	49ca      	ldr	r1, [pc, #808]	; (8000818 <__aeabi_dmul+0x390>)
 80004f0:	0f42      	lsrs	r2, r0, #29
 80004f2:	468c      	mov	ip, r1
 80004f4:	9900      	ldr	r1, [sp, #0]
 80004f6:	4463      	add	r3, ip
 80004f8:	00f6      	lsls	r6, r6, #3
 80004fa:	468c      	mov	ip, r1
 80004fc:	4316      	orrs	r6, r2
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	449c      	add	ip, r3
 8000502:	0412      	lsls	r2, r2, #16
 8000504:	4663      	mov	r3, ip
 8000506:	4316      	orrs	r6, r2
 8000508:	00c2      	lsls	r2, r0, #3
 800050a:	2000      	movs	r0, #0
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	9900      	ldr	r1, [sp, #0]
 8000510:	4643      	mov	r3, r8
 8000512:	3101      	adds	r1, #1
 8000514:	468c      	mov	ip, r1
 8000516:	4649      	mov	r1, r9
 8000518:	407b      	eors	r3, r7
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	290f      	cmp	r1, #15
 800051e:	d826      	bhi.n	800056e <__aeabi_dmul+0xe6>
 8000520:	4bbe      	ldr	r3, [pc, #760]	; (800081c <__aeabi_dmul+0x394>)
 8000522:	0089      	lsls	r1, r1, #2
 8000524:	5859      	ldr	r1, [r3, r1]
 8000526:	468f      	mov	pc, r1
 8000528:	4643      	mov	r3, r8
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	0034      	movs	r4, r6
 800052e:	0015      	movs	r5, r2
 8000530:	4683      	mov	fp, r0
 8000532:	465b      	mov	r3, fp
 8000534:	2b02      	cmp	r3, #2
 8000536:	d016      	beq.n	8000566 <__aeabi_dmul+0xde>
 8000538:	2b03      	cmp	r3, #3
 800053a:	d100      	bne.n	800053e <__aeabi_dmul+0xb6>
 800053c:	e203      	b.n	8000946 <__aeabi_dmul+0x4be>
 800053e:	2b01      	cmp	r3, #1
 8000540:	d000      	beq.n	8000544 <__aeabi_dmul+0xbc>
 8000542:	e0cd      	b.n	80006e0 <__aeabi_dmul+0x258>
 8000544:	2200      	movs	r2, #0
 8000546:	2400      	movs	r4, #0
 8000548:	2500      	movs	r5, #0
 800054a:	9b01      	ldr	r3, [sp, #4]
 800054c:	0512      	lsls	r2, r2, #20
 800054e:	4322      	orrs	r2, r4
 8000550:	07db      	lsls	r3, r3, #31
 8000552:	431a      	orrs	r2, r3
 8000554:	0028      	movs	r0, r5
 8000556:	0011      	movs	r1, r2
 8000558:	b007      	add	sp, #28
 800055a:	bcf0      	pop	{r4, r5, r6, r7}
 800055c:	46bb      	mov	fp, r7
 800055e:	46b2      	mov	sl, r6
 8000560:	46a9      	mov	r9, r5
 8000562:	46a0      	mov	r8, r4
 8000564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000566:	2400      	movs	r4, #0
 8000568:	2500      	movs	r5, #0
 800056a:	4aaa      	ldr	r2, [pc, #680]	; (8000814 <__aeabi_dmul+0x38c>)
 800056c:	e7ed      	b.n	800054a <__aeabi_dmul+0xc2>
 800056e:	0c28      	lsrs	r0, r5, #16
 8000570:	042d      	lsls	r5, r5, #16
 8000572:	0c2d      	lsrs	r5, r5, #16
 8000574:	002b      	movs	r3, r5
 8000576:	0c11      	lsrs	r1, r2, #16
 8000578:	0412      	lsls	r2, r2, #16
 800057a:	0c12      	lsrs	r2, r2, #16
 800057c:	4353      	muls	r3, r2
 800057e:	4698      	mov	r8, r3
 8000580:	0013      	movs	r3, r2
 8000582:	002f      	movs	r7, r5
 8000584:	4343      	muls	r3, r0
 8000586:	4699      	mov	r9, r3
 8000588:	434f      	muls	r7, r1
 800058a:	444f      	add	r7, r9
 800058c:	46bb      	mov	fp, r7
 800058e:	4647      	mov	r7, r8
 8000590:	000b      	movs	r3, r1
 8000592:	0c3f      	lsrs	r7, r7, #16
 8000594:	46ba      	mov	sl, r7
 8000596:	4343      	muls	r3, r0
 8000598:	44da      	add	sl, fp
 800059a:	9302      	str	r3, [sp, #8]
 800059c:	45d1      	cmp	r9, sl
 800059e:	d904      	bls.n	80005aa <__aeabi_dmul+0x122>
 80005a0:	2780      	movs	r7, #128	; 0x80
 80005a2:	027f      	lsls	r7, r7, #9
 80005a4:	46b9      	mov	r9, r7
 80005a6:	444b      	add	r3, r9
 80005a8:	9302      	str	r3, [sp, #8]
 80005aa:	4653      	mov	r3, sl
 80005ac:	0c1b      	lsrs	r3, r3, #16
 80005ae:	469b      	mov	fp, r3
 80005b0:	4653      	mov	r3, sl
 80005b2:	041f      	lsls	r7, r3, #16
 80005b4:	4643      	mov	r3, r8
 80005b6:	041b      	lsls	r3, r3, #16
 80005b8:	0c1b      	lsrs	r3, r3, #16
 80005ba:	4698      	mov	r8, r3
 80005bc:	003b      	movs	r3, r7
 80005be:	4443      	add	r3, r8
 80005c0:	9304      	str	r3, [sp, #16]
 80005c2:	0c33      	lsrs	r3, r6, #16
 80005c4:	0436      	lsls	r6, r6, #16
 80005c6:	0c36      	lsrs	r6, r6, #16
 80005c8:	4698      	mov	r8, r3
 80005ca:	0033      	movs	r3, r6
 80005cc:	4343      	muls	r3, r0
 80005ce:	4699      	mov	r9, r3
 80005d0:	4643      	mov	r3, r8
 80005d2:	4343      	muls	r3, r0
 80005d4:	002f      	movs	r7, r5
 80005d6:	469a      	mov	sl, r3
 80005d8:	4643      	mov	r3, r8
 80005da:	4377      	muls	r7, r6
 80005dc:	435d      	muls	r5, r3
 80005de:	0c38      	lsrs	r0, r7, #16
 80005e0:	444d      	add	r5, r9
 80005e2:	1945      	adds	r5, r0, r5
 80005e4:	45a9      	cmp	r9, r5
 80005e6:	d903      	bls.n	80005f0 <__aeabi_dmul+0x168>
 80005e8:	2380      	movs	r3, #128	; 0x80
 80005ea:	025b      	lsls	r3, r3, #9
 80005ec:	4699      	mov	r9, r3
 80005ee:	44ca      	add	sl, r9
 80005f0:	043f      	lsls	r7, r7, #16
 80005f2:	0c28      	lsrs	r0, r5, #16
 80005f4:	0c3f      	lsrs	r7, r7, #16
 80005f6:	042d      	lsls	r5, r5, #16
 80005f8:	19ed      	adds	r5, r5, r7
 80005fa:	0c27      	lsrs	r7, r4, #16
 80005fc:	0424      	lsls	r4, r4, #16
 80005fe:	0c24      	lsrs	r4, r4, #16
 8000600:	0003      	movs	r3, r0
 8000602:	0020      	movs	r0, r4
 8000604:	4350      	muls	r0, r2
 8000606:	437a      	muls	r2, r7
 8000608:	4691      	mov	r9, r2
 800060a:	003a      	movs	r2, r7
 800060c:	4453      	add	r3, sl
 800060e:	9305      	str	r3, [sp, #20]
 8000610:	0c03      	lsrs	r3, r0, #16
 8000612:	469a      	mov	sl, r3
 8000614:	434a      	muls	r2, r1
 8000616:	4361      	muls	r1, r4
 8000618:	4449      	add	r1, r9
 800061a:	4451      	add	r1, sl
 800061c:	44ab      	add	fp, r5
 800061e:	4589      	cmp	r9, r1
 8000620:	d903      	bls.n	800062a <__aeabi_dmul+0x1a2>
 8000622:	2380      	movs	r3, #128	; 0x80
 8000624:	025b      	lsls	r3, r3, #9
 8000626:	4699      	mov	r9, r3
 8000628:	444a      	add	r2, r9
 800062a:	0400      	lsls	r0, r0, #16
 800062c:	0c0b      	lsrs	r3, r1, #16
 800062e:	0c00      	lsrs	r0, r0, #16
 8000630:	0409      	lsls	r1, r1, #16
 8000632:	1809      	adds	r1, r1, r0
 8000634:	0020      	movs	r0, r4
 8000636:	4699      	mov	r9, r3
 8000638:	4643      	mov	r3, r8
 800063a:	4370      	muls	r0, r6
 800063c:	435c      	muls	r4, r3
 800063e:	437e      	muls	r6, r7
 8000640:	435f      	muls	r7, r3
 8000642:	0c03      	lsrs	r3, r0, #16
 8000644:	4698      	mov	r8, r3
 8000646:	19a4      	adds	r4, r4, r6
 8000648:	4444      	add	r4, r8
 800064a:	444a      	add	r2, r9
 800064c:	9703      	str	r7, [sp, #12]
 800064e:	42a6      	cmp	r6, r4
 8000650:	d904      	bls.n	800065c <__aeabi_dmul+0x1d4>
 8000652:	2380      	movs	r3, #128	; 0x80
 8000654:	025b      	lsls	r3, r3, #9
 8000656:	4698      	mov	r8, r3
 8000658:	4447      	add	r7, r8
 800065a:	9703      	str	r7, [sp, #12]
 800065c:	0423      	lsls	r3, r4, #16
 800065e:	9e02      	ldr	r6, [sp, #8]
 8000660:	469a      	mov	sl, r3
 8000662:	9b05      	ldr	r3, [sp, #20]
 8000664:	445e      	add	r6, fp
 8000666:	4698      	mov	r8, r3
 8000668:	42ae      	cmp	r6, r5
 800066a:	41ad      	sbcs	r5, r5
 800066c:	1876      	adds	r6, r6, r1
 800066e:	428e      	cmp	r6, r1
 8000670:	4189      	sbcs	r1, r1
 8000672:	0400      	lsls	r0, r0, #16
 8000674:	0c00      	lsrs	r0, r0, #16
 8000676:	4450      	add	r0, sl
 8000678:	4440      	add	r0, r8
 800067a:	426d      	negs	r5, r5
 800067c:	1947      	adds	r7, r0, r5
 800067e:	46b8      	mov	r8, r7
 8000680:	4693      	mov	fp, r2
 8000682:	4249      	negs	r1, r1
 8000684:	4689      	mov	r9, r1
 8000686:	44c3      	add	fp, r8
 8000688:	44d9      	add	r9, fp
 800068a:	4298      	cmp	r0, r3
 800068c:	4180      	sbcs	r0, r0
 800068e:	45a8      	cmp	r8, r5
 8000690:	41ad      	sbcs	r5, r5
 8000692:	4593      	cmp	fp, r2
 8000694:	4192      	sbcs	r2, r2
 8000696:	4589      	cmp	r9, r1
 8000698:	4189      	sbcs	r1, r1
 800069a:	426d      	negs	r5, r5
 800069c:	4240      	negs	r0, r0
 800069e:	4328      	orrs	r0, r5
 80006a0:	0c24      	lsrs	r4, r4, #16
 80006a2:	4252      	negs	r2, r2
 80006a4:	4249      	negs	r1, r1
 80006a6:	430a      	orrs	r2, r1
 80006a8:	9b03      	ldr	r3, [sp, #12]
 80006aa:	1900      	adds	r0, r0, r4
 80006ac:	1880      	adds	r0, r0, r2
 80006ae:	18c7      	adds	r7, r0, r3
 80006b0:	464b      	mov	r3, r9
 80006b2:	0ddc      	lsrs	r4, r3, #23
 80006b4:	9b04      	ldr	r3, [sp, #16]
 80006b6:	0275      	lsls	r5, r6, #9
 80006b8:	431d      	orrs	r5, r3
 80006ba:	1e6a      	subs	r2, r5, #1
 80006bc:	4195      	sbcs	r5, r2
 80006be:	464b      	mov	r3, r9
 80006c0:	0df6      	lsrs	r6, r6, #23
 80006c2:	027f      	lsls	r7, r7, #9
 80006c4:	4335      	orrs	r5, r6
 80006c6:	025a      	lsls	r2, r3, #9
 80006c8:	433c      	orrs	r4, r7
 80006ca:	4315      	orrs	r5, r2
 80006cc:	01fb      	lsls	r3, r7, #7
 80006ce:	d400      	bmi.n	80006d2 <__aeabi_dmul+0x24a>
 80006d0:	e11c      	b.n	800090c <__aeabi_dmul+0x484>
 80006d2:	2101      	movs	r1, #1
 80006d4:	086a      	lsrs	r2, r5, #1
 80006d6:	400d      	ands	r5, r1
 80006d8:	4315      	orrs	r5, r2
 80006da:	07e2      	lsls	r2, r4, #31
 80006dc:	4315      	orrs	r5, r2
 80006de:	0864      	lsrs	r4, r4, #1
 80006e0:	494f      	ldr	r1, [pc, #316]	; (8000820 <__aeabi_dmul+0x398>)
 80006e2:	4461      	add	r1, ip
 80006e4:	2900      	cmp	r1, #0
 80006e6:	dc00      	bgt.n	80006ea <__aeabi_dmul+0x262>
 80006e8:	e0b0      	b.n	800084c <__aeabi_dmul+0x3c4>
 80006ea:	076b      	lsls	r3, r5, #29
 80006ec:	d009      	beq.n	8000702 <__aeabi_dmul+0x27a>
 80006ee:	220f      	movs	r2, #15
 80006f0:	402a      	ands	r2, r5
 80006f2:	2a04      	cmp	r2, #4
 80006f4:	d005      	beq.n	8000702 <__aeabi_dmul+0x27a>
 80006f6:	1d2a      	adds	r2, r5, #4
 80006f8:	42aa      	cmp	r2, r5
 80006fa:	41ad      	sbcs	r5, r5
 80006fc:	426d      	negs	r5, r5
 80006fe:	1964      	adds	r4, r4, r5
 8000700:	0015      	movs	r5, r2
 8000702:	01e3      	lsls	r3, r4, #7
 8000704:	d504      	bpl.n	8000710 <__aeabi_dmul+0x288>
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	4a46      	ldr	r2, [pc, #280]	; (8000824 <__aeabi_dmul+0x39c>)
 800070a:	00c9      	lsls	r1, r1, #3
 800070c:	4014      	ands	r4, r2
 800070e:	4461      	add	r1, ip
 8000710:	4a45      	ldr	r2, [pc, #276]	; (8000828 <__aeabi_dmul+0x3a0>)
 8000712:	4291      	cmp	r1, r2
 8000714:	dd00      	ble.n	8000718 <__aeabi_dmul+0x290>
 8000716:	e726      	b.n	8000566 <__aeabi_dmul+0xde>
 8000718:	0762      	lsls	r2, r4, #29
 800071a:	08ed      	lsrs	r5, r5, #3
 800071c:	0264      	lsls	r4, r4, #9
 800071e:	0549      	lsls	r1, r1, #21
 8000720:	4315      	orrs	r5, r2
 8000722:	0b24      	lsrs	r4, r4, #12
 8000724:	0d4a      	lsrs	r2, r1, #21
 8000726:	e710      	b.n	800054a <__aeabi_dmul+0xc2>
 8000728:	4652      	mov	r2, sl
 800072a:	4332      	orrs	r2, r6
 800072c:	d100      	bne.n	8000730 <__aeabi_dmul+0x2a8>
 800072e:	e07f      	b.n	8000830 <__aeabi_dmul+0x3a8>
 8000730:	2e00      	cmp	r6, #0
 8000732:	d100      	bne.n	8000736 <__aeabi_dmul+0x2ae>
 8000734:	e0dc      	b.n	80008f0 <__aeabi_dmul+0x468>
 8000736:	0030      	movs	r0, r6
 8000738:	f000 f978 	bl	8000a2c <__clzsi2>
 800073c:	0002      	movs	r2, r0
 800073e:	3a0b      	subs	r2, #11
 8000740:	231d      	movs	r3, #29
 8000742:	0001      	movs	r1, r0
 8000744:	1a9b      	subs	r3, r3, r2
 8000746:	4652      	mov	r2, sl
 8000748:	3908      	subs	r1, #8
 800074a:	40da      	lsrs	r2, r3
 800074c:	408e      	lsls	r6, r1
 800074e:	4316      	orrs	r6, r2
 8000750:	4652      	mov	r2, sl
 8000752:	408a      	lsls	r2, r1
 8000754:	9b00      	ldr	r3, [sp, #0]
 8000756:	4935      	ldr	r1, [pc, #212]	; (800082c <__aeabi_dmul+0x3a4>)
 8000758:	1a18      	subs	r0, r3, r0
 800075a:	0003      	movs	r3, r0
 800075c:	468c      	mov	ip, r1
 800075e:	4463      	add	r3, ip
 8000760:	2000      	movs	r0, #0
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	e6d3      	b.n	800050e <__aeabi_dmul+0x86>
 8000766:	0025      	movs	r5, r4
 8000768:	4305      	orrs	r5, r0
 800076a:	d04a      	beq.n	8000802 <__aeabi_dmul+0x37a>
 800076c:	2c00      	cmp	r4, #0
 800076e:	d100      	bne.n	8000772 <__aeabi_dmul+0x2ea>
 8000770:	e0b0      	b.n	80008d4 <__aeabi_dmul+0x44c>
 8000772:	0020      	movs	r0, r4
 8000774:	f000 f95a 	bl	8000a2c <__clzsi2>
 8000778:	0001      	movs	r1, r0
 800077a:	0002      	movs	r2, r0
 800077c:	390b      	subs	r1, #11
 800077e:	231d      	movs	r3, #29
 8000780:	0010      	movs	r0, r2
 8000782:	1a5b      	subs	r3, r3, r1
 8000784:	0031      	movs	r1, r6
 8000786:	0035      	movs	r5, r6
 8000788:	3808      	subs	r0, #8
 800078a:	4084      	lsls	r4, r0
 800078c:	40d9      	lsrs	r1, r3
 800078e:	4085      	lsls	r5, r0
 8000790:	430c      	orrs	r4, r1
 8000792:	4826      	ldr	r0, [pc, #152]	; (800082c <__aeabi_dmul+0x3a4>)
 8000794:	1a83      	subs	r3, r0, r2
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	2300      	movs	r3, #0
 800079a:	4699      	mov	r9, r3
 800079c:	469b      	mov	fp, r3
 800079e:	e697      	b.n	80004d0 <__aeabi_dmul+0x48>
 80007a0:	0005      	movs	r5, r0
 80007a2:	4325      	orrs	r5, r4
 80007a4:	d126      	bne.n	80007f4 <__aeabi_dmul+0x36c>
 80007a6:	2208      	movs	r2, #8
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2302      	movs	r3, #2
 80007ac:	2400      	movs	r4, #0
 80007ae:	4691      	mov	r9, r2
 80007b0:	469b      	mov	fp, r3
 80007b2:	e68d      	b.n	80004d0 <__aeabi_dmul+0x48>
 80007b4:	4652      	mov	r2, sl
 80007b6:	9b00      	ldr	r3, [sp, #0]
 80007b8:	4332      	orrs	r2, r6
 80007ba:	d110      	bne.n	80007de <__aeabi_dmul+0x356>
 80007bc:	4915      	ldr	r1, [pc, #84]	; (8000814 <__aeabi_dmul+0x38c>)
 80007be:	2600      	movs	r6, #0
 80007c0:	468c      	mov	ip, r1
 80007c2:	4463      	add	r3, ip
 80007c4:	4649      	mov	r1, r9
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	2302      	movs	r3, #2
 80007ca:	4319      	orrs	r1, r3
 80007cc:	4689      	mov	r9, r1
 80007ce:	2002      	movs	r0, #2
 80007d0:	e69d      	b.n	800050e <__aeabi_dmul+0x86>
 80007d2:	465b      	mov	r3, fp
 80007d4:	9701      	str	r7, [sp, #4]
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d000      	beq.n	80007dc <__aeabi_dmul+0x354>
 80007da:	e6ad      	b.n	8000538 <__aeabi_dmul+0xb0>
 80007dc:	e6c3      	b.n	8000566 <__aeabi_dmul+0xde>
 80007de:	4a0d      	ldr	r2, [pc, #52]	; (8000814 <__aeabi_dmul+0x38c>)
 80007e0:	2003      	movs	r0, #3
 80007e2:	4694      	mov	ip, r2
 80007e4:	4463      	add	r3, ip
 80007e6:	464a      	mov	r2, r9
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2303      	movs	r3, #3
 80007ec:	431a      	orrs	r2, r3
 80007ee:	4691      	mov	r9, r2
 80007f0:	4652      	mov	r2, sl
 80007f2:	e68c      	b.n	800050e <__aeabi_dmul+0x86>
 80007f4:	220c      	movs	r2, #12
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2303      	movs	r3, #3
 80007fa:	0005      	movs	r5, r0
 80007fc:	4691      	mov	r9, r2
 80007fe:	469b      	mov	fp, r3
 8000800:	e666      	b.n	80004d0 <__aeabi_dmul+0x48>
 8000802:	2304      	movs	r3, #4
 8000804:	4699      	mov	r9, r3
 8000806:	2300      	movs	r3, #0
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	3301      	adds	r3, #1
 800080c:	2400      	movs	r4, #0
 800080e:	469b      	mov	fp, r3
 8000810:	e65e      	b.n	80004d0 <__aeabi_dmul+0x48>
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	000007ff 	.word	0x000007ff
 8000818:	fffffc01 	.word	0xfffffc01
 800081c:	080056c4 	.word	0x080056c4
 8000820:	000003ff 	.word	0x000003ff
 8000824:	feffffff 	.word	0xfeffffff
 8000828:	000007fe 	.word	0x000007fe
 800082c:	fffffc0d 	.word	0xfffffc0d
 8000830:	4649      	mov	r1, r9
 8000832:	2301      	movs	r3, #1
 8000834:	4319      	orrs	r1, r3
 8000836:	4689      	mov	r9, r1
 8000838:	2600      	movs	r6, #0
 800083a:	2001      	movs	r0, #1
 800083c:	e667      	b.n	800050e <__aeabi_dmul+0x86>
 800083e:	2300      	movs	r3, #0
 8000840:	2480      	movs	r4, #128	; 0x80
 8000842:	2500      	movs	r5, #0
 8000844:	4a43      	ldr	r2, [pc, #268]	; (8000954 <__aeabi_dmul+0x4cc>)
 8000846:	9301      	str	r3, [sp, #4]
 8000848:	0324      	lsls	r4, r4, #12
 800084a:	e67e      	b.n	800054a <__aeabi_dmul+0xc2>
 800084c:	2001      	movs	r0, #1
 800084e:	1a40      	subs	r0, r0, r1
 8000850:	2838      	cmp	r0, #56	; 0x38
 8000852:	dd00      	ble.n	8000856 <__aeabi_dmul+0x3ce>
 8000854:	e676      	b.n	8000544 <__aeabi_dmul+0xbc>
 8000856:	281f      	cmp	r0, #31
 8000858:	dd5b      	ble.n	8000912 <__aeabi_dmul+0x48a>
 800085a:	221f      	movs	r2, #31
 800085c:	0023      	movs	r3, r4
 800085e:	4252      	negs	r2, r2
 8000860:	1a51      	subs	r1, r2, r1
 8000862:	40cb      	lsrs	r3, r1
 8000864:	0019      	movs	r1, r3
 8000866:	2820      	cmp	r0, #32
 8000868:	d003      	beq.n	8000872 <__aeabi_dmul+0x3ea>
 800086a:	4a3b      	ldr	r2, [pc, #236]	; (8000958 <__aeabi_dmul+0x4d0>)
 800086c:	4462      	add	r2, ip
 800086e:	4094      	lsls	r4, r2
 8000870:	4325      	orrs	r5, r4
 8000872:	1e6a      	subs	r2, r5, #1
 8000874:	4195      	sbcs	r5, r2
 8000876:	002a      	movs	r2, r5
 8000878:	430a      	orrs	r2, r1
 800087a:	2107      	movs	r1, #7
 800087c:	000d      	movs	r5, r1
 800087e:	2400      	movs	r4, #0
 8000880:	4015      	ands	r5, r2
 8000882:	4211      	tst	r1, r2
 8000884:	d05b      	beq.n	800093e <__aeabi_dmul+0x4b6>
 8000886:	210f      	movs	r1, #15
 8000888:	2400      	movs	r4, #0
 800088a:	4011      	ands	r1, r2
 800088c:	2904      	cmp	r1, #4
 800088e:	d053      	beq.n	8000938 <__aeabi_dmul+0x4b0>
 8000890:	1d11      	adds	r1, r2, #4
 8000892:	4291      	cmp	r1, r2
 8000894:	4192      	sbcs	r2, r2
 8000896:	4252      	negs	r2, r2
 8000898:	18a4      	adds	r4, r4, r2
 800089a:	000a      	movs	r2, r1
 800089c:	0223      	lsls	r3, r4, #8
 800089e:	d54b      	bpl.n	8000938 <__aeabi_dmul+0x4b0>
 80008a0:	2201      	movs	r2, #1
 80008a2:	2400      	movs	r4, #0
 80008a4:	2500      	movs	r5, #0
 80008a6:	e650      	b.n	800054a <__aeabi_dmul+0xc2>
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	031b      	lsls	r3, r3, #12
 80008ac:	421c      	tst	r4, r3
 80008ae:	d009      	beq.n	80008c4 <__aeabi_dmul+0x43c>
 80008b0:	421e      	tst	r6, r3
 80008b2:	d107      	bne.n	80008c4 <__aeabi_dmul+0x43c>
 80008b4:	4333      	orrs	r3, r6
 80008b6:	031c      	lsls	r4, r3, #12
 80008b8:	4643      	mov	r3, r8
 80008ba:	0015      	movs	r5, r2
 80008bc:	0b24      	lsrs	r4, r4, #12
 80008be:	4a25      	ldr	r2, [pc, #148]	; (8000954 <__aeabi_dmul+0x4cc>)
 80008c0:	9301      	str	r3, [sp, #4]
 80008c2:	e642      	b.n	800054a <__aeabi_dmul+0xc2>
 80008c4:	2280      	movs	r2, #128	; 0x80
 80008c6:	0312      	lsls	r2, r2, #12
 80008c8:	4314      	orrs	r4, r2
 80008ca:	0324      	lsls	r4, r4, #12
 80008cc:	4a21      	ldr	r2, [pc, #132]	; (8000954 <__aeabi_dmul+0x4cc>)
 80008ce:	0b24      	lsrs	r4, r4, #12
 80008d0:	9701      	str	r7, [sp, #4]
 80008d2:	e63a      	b.n	800054a <__aeabi_dmul+0xc2>
 80008d4:	f000 f8aa 	bl	8000a2c <__clzsi2>
 80008d8:	0001      	movs	r1, r0
 80008da:	0002      	movs	r2, r0
 80008dc:	3115      	adds	r1, #21
 80008de:	3220      	adds	r2, #32
 80008e0:	291c      	cmp	r1, #28
 80008e2:	dc00      	bgt.n	80008e6 <__aeabi_dmul+0x45e>
 80008e4:	e74b      	b.n	800077e <__aeabi_dmul+0x2f6>
 80008e6:	0034      	movs	r4, r6
 80008e8:	3808      	subs	r0, #8
 80008ea:	2500      	movs	r5, #0
 80008ec:	4084      	lsls	r4, r0
 80008ee:	e750      	b.n	8000792 <__aeabi_dmul+0x30a>
 80008f0:	f000 f89c 	bl	8000a2c <__clzsi2>
 80008f4:	0003      	movs	r3, r0
 80008f6:	001a      	movs	r2, r3
 80008f8:	3215      	adds	r2, #21
 80008fa:	3020      	adds	r0, #32
 80008fc:	2a1c      	cmp	r2, #28
 80008fe:	dc00      	bgt.n	8000902 <__aeabi_dmul+0x47a>
 8000900:	e71e      	b.n	8000740 <__aeabi_dmul+0x2b8>
 8000902:	4656      	mov	r6, sl
 8000904:	3b08      	subs	r3, #8
 8000906:	2200      	movs	r2, #0
 8000908:	409e      	lsls	r6, r3
 800090a:	e723      	b.n	8000754 <__aeabi_dmul+0x2cc>
 800090c:	9b00      	ldr	r3, [sp, #0]
 800090e:	469c      	mov	ip, r3
 8000910:	e6e6      	b.n	80006e0 <__aeabi_dmul+0x258>
 8000912:	4912      	ldr	r1, [pc, #72]	; (800095c <__aeabi_dmul+0x4d4>)
 8000914:	0022      	movs	r2, r4
 8000916:	4461      	add	r1, ip
 8000918:	002e      	movs	r6, r5
 800091a:	408d      	lsls	r5, r1
 800091c:	408a      	lsls	r2, r1
 800091e:	40c6      	lsrs	r6, r0
 8000920:	1e69      	subs	r1, r5, #1
 8000922:	418d      	sbcs	r5, r1
 8000924:	4332      	orrs	r2, r6
 8000926:	432a      	orrs	r2, r5
 8000928:	40c4      	lsrs	r4, r0
 800092a:	0753      	lsls	r3, r2, #29
 800092c:	d0b6      	beq.n	800089c <__aeabi_dmul+0x414>
 800092e:	210f      	movs	r1, #15
 8000930:	4011      	ands	r1, r2
 8000932:	2904      	cmp	r1, #4
 8000934:	d1ac      	bne.n	8000890 <__aeabi_dmul+0x408>
 8000936:	e7b1      	b.n	800089c <__aeabi_dmul+0x414>
 8000938:	0765      	lsls	r5, r4, #29
 800093a:	0264      	lsls	r4, r4, #9
 800093c:	0b24      	lsrs	r4, r4, #12
 800093e:	08d2      	lsrs	r2, r2, #3
 8000940:	4315      	orrs	r5, r2
 8000942:	2200      	movs	r2, #0
 8000944:	e601      	b.n	800054a <__aeabi_dmul+0xc2>
 8000946:	2280      	movs	r2, #128	; 0x80
 8000948:	0312      	lsls	r2, r2, #12
 800094a:	4314      	orrs	r4, r2
 800094c:	0324      	lsls	r4, r4, #12
 800094e:	4a01      	ldr	r2, [pc, #4]	; (8000954 <__aeabi_dmul+0x4cc>)
 8000950:	0b24      	lsrs	r4, r4, #12
 8000952:	e5fa      	b.n	800054a <__aeabi_dmul+0xc2>
 8000954:	000007ff 	.word	0x000007ff
 8000958:	0000043e 	.word	0x0000043e
 800095c:	0000041e 	.word	0x0000041e

08000960 <__aeabi_d2iz>:
 8000960:	000a      	movs	r2, r1
 8000962:	b530      	push	{r4, r5, lr}
 8000964:	4c13      	ldr	r4, [pc, #76]	; (80009b4 <__aeabi_d2iz+0x54>)
 8000966:	0053      	lsls	r3, r2, #1
 8000968:	0309      	lsls	r1, r1, #12
 800096a:	0005      	movs	r5, r0
 800096c:	0b09      	lsrs	r1, r1, #12
 800096e:	2000      	movs	r0, #0
 8000970:	0d5b      	lsrs	r3, r3, #21
 8000972:	0fd2      	lsrs	r2, r2, #31
 8000974:	42a3      	cmp	r3, r4
 8000976:	dd04      	ble.n	8000982 <__aeabi_d2iz+0x22>
 8000978:	480f      	ldr	r0, [pc, #60]	; (80009b8 <__aeabi_d2iz+0x58>)
 800097a:	4283      	cmp	r3, r0
 800097c:	dd02      	ble.n	8000984 <__aeabi_d2iz+0x24>
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <__aeabi_d2iz+0x5c>)
 8000980:	18d0      	adds	r0, r2, r3
 8000982:	bd30      	pop	{r4, r5, pc}
 8000984:	2080      	movs	r0, #128	; 0x80
 8000986:	0340      	lsls	r0, r0, #13
 8000988:	4301      	orrs	r1, r0
 800098a:	480d      	ldr	r0, [pc, #52]	; (80009c0 <__aeabi_d2iz+0x60>)
 800098c:	1ac0      	subs	r0, r0, r3
 800098e:	281f      	cmp	r0, #31
 8000990:	dd08      	ble.n	80009a4 <__aeabi_d2iz+0x44>
 8000992:	480c      	ldr	r0, [pc, #48]	; (80009c4 <__aeabi_d2iz+0x64>)
 8000994:	1ac3      	subs	r3, r0, r3
 8000996:	40d9      	lsrs	r1, r3
 8000998:	000b      	movs	r3, r1
 800099a:	4258      	negs	r0, r3
 800099c:	2a00      	cmp	r2, #0
 800099e:	d1f0      	bne.n	8000982 <__aeabi_d2iz+0x22>
 80009a0:	0018      	movs	r0, r3
 80009a2:	e7ee      	b.n	8000982 <__aeabi_d2iz+0x22>
 80009a4:	4c08      	ldr	r4, [pc, #32]	; (80009c8 <__aeabi_d2iz+0x68>)
 80009a6:	40c5      	lsrs	r5, r0
 80009a8:	46a4      	mov	ip, r4
 80009aa:	4463      	add	r3, ip
 80009ac:	4099      	lsls	r1, r3
 80009ae:	000b      	movs	r3, r1
 80009b0:	432b      	orrs	r3, r5
 80009b2:	e7f2      	b.n	800099a <__aeabi_d2iz+0x3a>
 80009b4:	000003fe 	.word	0x000003fe
 80009b8:	0000041d 	.word	0x0000041d
 80009bc:	7fffffff 	.word	0x7fffffff
 80009c0:	00000433 	.word	0x00000433
 80009c4:	00000413 	.word	0x00000413
 80009c8:	fffffbed 	.word	0xfffffbed

080009cc <__aeabi_i2d>:
 80009cc:	b570      	push	{r4, r5, r6, lr}
 80009ce:	2800      	cmp	r0, #0
 80009d0:	d016      	beq.n	8000a00 <__aeabi_i2d+0x34>
 80009d2:	17c3      	asrs	r3, r0, #31
 80009d4:	18c5      	adds	r5, r0, r3
 80009d6:	405d      	eors	r5, r3
 80009d8:	0fc4      	lsrs	r4, r0, #31
 80009da:	0028      	movs	r0, r5
 80009dc:	f000 f826 	bl	8000a2c <__clzsi2>
 80009e0:	4a11      	ldr	r2, [pc, #68]	; (8000a28 <__aeabi_i2d+0x5c>)
 80009e2:	1a12      	subs	r2, r2, r0
 80009e4:	280a      	cmp	r0, #10
 80009e6:	dc16      	bgt.n	8000a16 <__aeabi_i2d+0x4a>
 80009e8:	0003      	movs	r3, r0
 80009ea:	002e      	movs	r6, r5
 80009ec:	3315      	adds	r3, #21
 80009ee:	409e      	lsls	r6, r3
 80009f0:	230b      	movs	r3, #11
 80009f2:	1a18      	subs	r0, r3, r0
 80009f4:	40c5      	lsrs	r5, r0
 80009f6:	0552      	lsls	r2, r2, #21
 80009f8:	032d      	lsls	r5, r5, #12
 80009fa:	0b2d      	lsrs	r5, r5, #12
 80009fc:	0d53      	lsrs	r3, r2, #21
 80009fe:	e003      	b.n	8000a08 <__aeabi_i2d+0x3c>
 8000a00:	2400      	movs	r4, #0
 8000a02:	2300      	movs	r3, #0
 8000a04:	2500      	movs	r5, #0
 8000a06:	2600      	movs	r6, #0
 8000a08:	051b      	lsls	r3, r3, #20
 8000a0a:	432b      	orrs	r3, r5
 8000a0c:	07e4      	lsls	r4, r4, #31
 8000a0e:	4323      	orrs	r3, r4
 8000a10:	0030      	movs	r0, r6
 8000a12:	0019      	movs	r1, r3
 8000a14:	bd70      	pop	{r4, r5, r6, pc}
 8000a16:	380b      	subs	r0, #11
 8000a18:	4085      	lsls	r5, r0
 8000a1a:	0552      	lsls	r2, r2, #21
 8000a1c:	032d      	lsls	r5, r5, #12
 8000a1e:	2600      	movs	r6, #0
 8000a20:	0b2d      	lsrs	r5, r5, #12
 8000a22:	0d53      	lsrs	r3, r2, #21
 8000a24:	e7f0      	b.n	8000a08 <__aeabi_i2d+0x3c>
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	0000041e 	.word	0x0000041e

08000a2c <__clzsi2>:
 8000a2c:	211c      	movs	r1, #28
 8000a2e:	2301      	movs	r3, #1
 8000a30:	041b      	lsls	r3, r3, #16
 8000a32:	4298      	cmp	r0, r3
 8000a34:	d301      	bcc.n	8000a3a <__clzsi2+0xe>
 8000a36:	0c00      	lsrs	r0, r0, #16
 8000a38:	3910      	subs	r1, #16
 8000a3a:	0a1b      	lsrs	r3, r3, #8
 8000a3c:	4298      	cmp	r0, r3
 8000a3e:	d301      	bcc.n	8000a44 <__clzsi2+0x18>
 8000a40:	0a00      	lsrs	r0, r0, #8
 8000a42:	3908      	subs	r1, #8
 8000a44:	091b      	lsrs	r3, r3, #4
 8000a46:	4298      	cmp	r0, r3
 8000a48:	d301      	bcc.n	8000a4e <__clzsi2+0x22>
 8000a4a:	0900      	lsrs	r0, r0, #4
 8000a4c:	3904      	subs	r1, #4
 8000a4e:	a202      	add	r2, pc, #8	; (adr r2, 8000a58 <__clzsi2+0x2c>)
 8000a50:	5c10      	ldrb	r0, [r2, r0]
 8000a52:	1840      	adds	r0, r0, r1
 8000a54:	4770      	bx	lr
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	02020304 	.word	0x02020304
 8000a5c:	01010101 	.word	0x01010101
	...

08000a68 <_ZN3LEDC1EP6WS2812>:
#include "led.h"

LED::LED(WS2812* neopixel){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
    NEOPIXEL = neopixel;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	683a      	ldr	r2, [r7, #0]
 8000a76:	601a      	str	r2, [r3, #0]
}
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b002      	add	sp, #8
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <_ZN3LED4initEh>:

void LED::init(uint8_t panel_id){
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	000a      	movs	r2, r1
 8000a8c:	1cfb      	adds	r3, r7, #3
 8000a8e:	701a      	strb	r2, [r3, #0]
    NEOPIXEL->clear();
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	0018      	movs	r0, r3
 8000a96:	f000 ff95 	bl	80019c4 <_ZN6WS28125clearEv>
    if	   (panel_id==0){PANEL_START_X = 0; PANEL_START_Z = 0;}
 8000a9a:	1cfb      	adds	r3, r7, #3
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d106      	bne.n	8000ab0 <_ZN3LED4initEh+0x2e>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	71da      	strb	r2, [r3, #7]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	721a      	strb	r2, [r3, #8]
    else if(panel_id==5){PANEL_START_X = 16; PANEL_START_Z = 32;}

    else if(panel_id==6){PANEL_START_X = 32; PANEL_START_Z = 0;}
    else if(panel_id==7){PANEL_START_X = 32; PANEL_START_Z = 16;}
    else if(panel_id==8){PANEL_START_X = 32; PANEL_START_Z = 32;}
}
 8000aae:	e056      	b.n	8000b5e <_ZN3LED4initEh+0xdc>
    else if(panel_id==1){PANEL_START_X = 0; PANEL_START_Z = 16;}
 8000ab0:	1cfb      	adds	r3, r7, #3
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d106      	bne.n	8000ac6 <_ZN3LED4initEh+0x44>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	71da      	strb	r2, [r3, #7]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2210      	movs	r2, #16
 8000ac2:	721a      	strb	r2, [r3, #8]
}
 8000ac4:	e04b      	b.n	8000b5e <_ZN3LED4initEh+0xdc>
    else if(panel_id==2){PANEL_START_X = 0; PANEL_START_Z = 32;}
 8000ac6:	1cfb      	adds	r3, r7, #3
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d106      	bne.n	8000adc <_ZN3LED4initEh+0x5a>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	71da      	strb	r2, [r3, #7]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2220      	movs	r2, #32
 8000ad8:	721a      	strb	r2, [r3, #8]
}
 8000ada:	e040      	b.n	8000b5e <_ZN3LED4initEh+0xdc>
    else if(panel_id==3){PANEL_START_X = 16; PANEL_START_Z = 0;}
 8000adc:	1cfb      	adds	r3, r7, #3
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b03      	cmp	r3, #3
 8000ae2:	d106      	bne.n	8000af2 <_ZN3LED4initEh+0x70>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2210      	movs	r2, #16
 8000ae8:	71da      	strb	r2, [r3, #7]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2200      	movs	r2, #0
 8000aee:	721a      	strb	r2, [r3, #8]
}
 8000af0:	e035      	b.n	8000b5e <_ZN3LED4initEh+0xdc>
    else if(panel_id==4){PANEL_START_X = 16; PANEL_START_Z = 16;}
 8000af2:	1cfb      	adds	r3, r7, #3
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	d106      	bne.n	8000b08 <_ZN3LED4initEh+0x86>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2210      	movs	r2, #16
 8000afe:	71da      	strb	r2, [r3, #7]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2210      	movs	r2, #16
 8000b04:	721a      	strb	r2, [r3, #8]
}
 8000b06:	e02a      	b.n	8000b5e <_ZN3LED4initEh+0xdc>
    else if(panel_id==5){PANEL_START_X = 16; PANEL_START_Z = 32;}
 8000b08:	1cfb      	adds	r3, r7, #3
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b05      	cmp	r3, #5
 8000b0e:	d106      	bne.n	8000b1e <_ZN3LED4initEh+0x9c>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2210      	movs	r2, #16
 8000b14:	71da      	strb	r2, [r3, #7]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2220      	movs	r2, #32
 8000b1a:	721a      	strb	r2, [r3, #8]
}
 8000b1c:	e01f      	b.n	8000b5e <_ZN3LED4initEh+0xdc>
    else if(panel_id==6){PANEL_START_X = 32; PANEL_START_Z = 0;}
 8000b1e:	1cfb      	adds	r3, r7, #3
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b06      	cmp	r3, #6
 8000b24:	d106      	bne.n	8000b34 <_ZN3LED4initEh+0xb2>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2220      	movs	r2, #32
 8000b2a:	71da      	strb	r2, [r3, #7]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	721a      	strb	r2, [r3, #8]
}
 8000b32:	e014      	b.n	8000b5e <_ZN3LED4initEh+0xdc>
    else if(panel_id==7){PANEL_START_X = 32; PANEL_START_Z = 16;}
 8000b34:	1cfb      	adds	r3, r7, #3
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b07      	cmp	r3, #7
 8000b3a:	d106      	bne.n	8000b4a <_ZN3LED4initEh+0xc8>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2220      	movs	r2, #32
 8000b40:	71da      	strb	r2, [r3, #7]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2210      	movs	r2, #16
 8000b46:	721a      	strb	r2, [r3, #8]
}
 8000b48:	e009      	b.n	8000b5e <_ZN3LED4initEh+0xdc>
    else if(panel_id==8){PANEL_START_X = 32; PANEL_START_Z = 32;}
 8000b4a:	1cfb      	adds	r3, r7, #3
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b08      	cmp	r3, #8
 8000b50:	d105      	bne.n	8000b5e <_ZN3LED4initEh+0xdc>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2220      	movs	r2, #32
 8000b56:	71da      	strb	r2, [r3, #7]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2220      	movs	r2, #32
 8000b5c:	721a      	strb	r2, [r3, #8]
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b002      	add	sp, #8
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <_ZN3LED4showEiiiiii>:

void LED::show(int travel_x, int circle_x, int circle_z, int circle_r, int hue, int hue_of_back){
 8000b66:	b590      	push	{r4, r7, lr}
 8000b68:	b08d      	sub	sp, #52	; 0x34
 8000b6a:	af04      	add	r7, sp, #16
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	603b      	str	r3, [r7, #0]
    NEOPIXEL->clear();
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f000 ff23 	bl	80019c4 <_ZN6WS28125clearEv>
    for(int px=0; px<16; px++){
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	2b0f      	cmp	r3, #15
 8000b86:	dc3a      	bgt.n	8000bfe <_ZN3LED4showEiiiiii+0x98>
        for(int pz=0; pz<16; pz++){
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	2b0f      	cmp	r3, #15
 8000b90:	dc31      	bgt.n	8000bf6 <_ZN3LED4showEiiiiii+0x90>
            int x = px + PANEL_START_X + travel_x;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	79db      	ldrb	r3, [r3, #7]
 8000b96:	001a      	movs	r2, r3
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	18d3      	adds	r3, r2, r3
 8000b9c:	68ba      	ldr	r2, [r7, #8]
 8000b9e:	18d3      	adds	r3, r2, r3
 8000ba0:	617b      	str	r3, [r7, #20]
            int z = pz + PANEL_START_Z;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	7a1b      	ldrb	r3, [r3, #8]
 8000ba6:	001a      	movs	r2, r3
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	189b      	adds	r3, r3, r2
 8000bac:	613b      	str	r3, [r7, #16]

            set_under(hue_of_back);
 8000bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	0011      	movs	r1, r2
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f000 f87a 	bl	8000cae <_ZN3LED9set_underEi>
            set_circle(x, z, circle_x, circle_z, circle_r, hue);
 8000bba:	687c      	ldr	r4, [r7, #4]
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	6979      	ldr	r1, [r7, #20]
 8000bc0:	68f8      	ldr	r0, [r7, #12]
 8000bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc4:	9302      	str	r3, [sp, #8]
 8000bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc8:	9301      	str	r3, [sp, #4]
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	0023      	movs	r3, r4
 8000bd0:	f000 f81e 	bl	8000c10 <_ZN3LED10set_circleEiiiiii>
            set_color(change_coord_to_num(px, pz));
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	69f9      	ldr	r1, [r7, #28]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f000 f893 	bl	8000d06 <_ZN3LED19change_coord_to_numEii>
 8000be0:	0003      	movs	r3, r0
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	0011      	movs	r1, r2
 8000be8:	0018      	movs	r0, r3
 8000bea:	f000 f872 	bl	8000cd2 <_ZN3LED9set_colorEt>
        for(int pz=0; pz<16; pz++){
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	61bb      	str	r3, [r7, #24]
 8000bf4:	e7ca      	b.n	8000b8c <_ZN3LED4showEiiiiii+0x26>
    for(int px=0; px<16; px++){
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	61fb      	str	r3, [r7, #28]
 8000bfc:	e7c1      	b.n	8000b82 <_ZN3LED4showEiiiiii+0x1c>
        }
    }
    NEOPIXEL->show();
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	0018      	movs	r0, r3
 8000c04:	f000 fe56 	bl	80018b4 <_ZN6WS28124showEv>
}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b009      	add	sp, #36	; 0x24
 8000c0e:	bd90      	pop	{r4, r7, pc}

08000c10 <_ZN3LED10set_circleEiiiiii>:

void LED::set_circle(int x, int z, int cx, int cz, int ro, int h){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
 8000c1c:	603b      	str	r3, [r7, #0]
    float distance = (x-cx)*(x-cx)+(z-cz)*(z-cz);
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	1a8a      	subs	r2, r1, r2
 8000c2a:	435a      	muls	r2, r3
 8000c2c:	6879      	ldr	r1, [r7, #4]
 8000c2e:	6a3b      	ldr	r3, [r7, #32]
 8000c30:	1acb      	subs	r3, r1, r3
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	6a39      	ldr	r1, [r7, #32]
 8000c36:	1a41      	subs	r1, r0, r1
 8000c38:	434b      	muls	r3, r1
 8000c3a:	18d3      	adds	r3, r2, r3
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f7ff fbd5 	bl	80003ec <__aeabi_i2f>
 8000c42:	1c03      	adds	r3, r0, #0
 8000c44:	617b      	str	r3, [r7, #20]
    if(ro*ro>=distance){
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	435b      	muls	r3, r3
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f7ff fbce 	bl	80003ec <__aeabi_i2f>
 8000c50:	1c03      	adds	r3, r0, #0
 8000c52:	1c19      	adds	r1, r3, #0
 8000c54:	6978      	ldr	r0, [r7, #20]
 8000c56:	f7ff fafb 	bl	8000250 <__aeabi_fcmple>
 8000c5a:	1e03      	subs	r3, r0, #0
 8000c5c:	d100      	bne.n	8000c60 <_ZN3LED10set_circleEiiiiii+0x50>
//        red = 10; green = 0; blue = 0;
    	hue = h; sat = 240; val = 20;
    }else{}
}
 8000c5e:	e008      	b.n	8000c72 <_ZN3LED10set_circleEiiiiii+0x62>
    	hue = h; sat = 240; val = 20;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	22f0      	movs	r2, #240	; 0xf0
 8000c6a:	611a      	str	r2, [r3, #16]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2214      	movs	r2, #20
 8000c70:	615a      	str	r2, [r3, #20]
}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b006      	add	sp, #24
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <_ZN3LED17do_forwardRewriteEv>:

void LED::do_forwardRewrite(){
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
    NEOPIXEL->do_forwardRewrite();
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	0018      	movs	r0, r3
 8000c88:	f000 ffa8 	bl	8001bdc <_ZN6WS281217do_forwardRewriteEv>
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b002      	add	sp, #8
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <_ZN3LED14do_backRewriteEv>:

void LED::do_backRewrite(){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
    NEOPIXEL->do_backRewrite();
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f001 f845 	bl	8001d30 <_ZN6WS281214do_backRewriteEv>
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b002      	add	sp, #8
 8000cac:	bd80      	pop	{r7, pc}

08000cae <_ZN3LED9set_underEi>:

void LED::set_under(int hue_of_back){
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
 8000cb6:	6039      	str	r1, [r7, #0]
    hue = hue_of_back;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	683a      	ldr	r2, [r7, #0]
 8000cbc:	60da      	str	r2, [r3, #12]
    sat = 230;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	22e6      	movs	r2, #230	; 0xe6
 8000cc2:	611a      	str	r2, [r3, #16]
    val = 8;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2208      	movs	r2, #8
 8000cc8:	615a      	str	r2, [r3, #20]
}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b002      	add	sp, #8
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <_ZN3LED9set_colorEt>:

void LED::set_color(uint16_t pixel_num){
 8000cd2:	b590      	push	{r4, r7, lr}
 8000cd4:	b085      	sub	sp, #20
 8000cd6:	af02      	add	r7, sp, #8
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	000a      	movs	r2, r1
 8000cdc:	1cbb      	adds	r3, r7, #2
 8000cde:	801a      	strh	r2, [r3, #0]
//    NEOPIXEL->set_rgb(pixel_num, red, green, blue);
	NEOPIXEL->set_hsv(pixel_num, hue, sat, val);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6818      	ldr	r0, [r3, #0]
 8000ce4:	1cbb      	adds	r3, r7, #2
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	b2d9      	uxtb	r1, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	68da      	ldr	r2, [r3, #12]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	691c      	ldr	r4, [r3, #16]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	0023      	movs	r3, r4
 8000cfa:	f000 fe91 	bl	8001a20 <_ZN6WS28127set_hsvEhiii>
}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b003      	add	sp, #12
 8000d04:	bd90      	pop	{r4, r7, pc}

08000d06 <_ZN3LED19change_coord_to_numEii>:

int LED::change_coord_to_num(int px, int pz){
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
    int return_pixel_num = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]

    if(pz%2 == 0){
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	d105      	bne.n	8000d2a <_ZN3LED19change_coord_to_numEii+0x24>
        return_pixel_num = pz*16 + px;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	011b      	lsls	r3, r3, #4
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	18d3      	adds	r3, r2, r3
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	e006      	b.n	8000d38 <_ZN3LED19change_coord_to_numEii+0x32>
    }
    else{
        return_pixel_num = pz*16 + 15 - px;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	011b      	lsls	r3, r3, #4
 8000d2e:	330f      	adds	r3, #15
 8000d30:	001a      	movs	r2, r3
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
    }

    return return_pixel_num;
 8000d38:	697b      	ldr	r3, [r7, #20]
}
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b006      	add	sp, #24
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	led.do_forwardRewrite();
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x18>)
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff ff93 	bl	8000c7a <_ZN3LED17do_forwardRewriteEv>
}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b002      	add	sp, #8
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000504 	.word	0x20000504

08000d60 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	led.do_backRewrite();
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff ff92 	bl	8000c94 <_ZN3LED14do_backRewriteEv>
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b002      	add	sp, #8
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000504 	.word	0x20000504

08000d7c <_Z6readIDv>:

uint8_t readID(){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
	uint8_t ID = 0;
 8000d82:	1dfb      	adds	r3, r7, #7
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin)==1){ID=0;}
 8000d88:	4b2f      	ldr	r3, [pc, #188]	; (8000e48 <_Z6readIDv+0xcc>)
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f001 fe59 	bl	8002a44 <HAL_GPIO_ReadPin>
 8000d92:	0003      	movs	r3, r0
 8000d94:	3b01      	subs	r3, #1
 8000d96:	425a      	negs	r2, r3
 8000d98:	4153      	adcs	r3, r2
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d003      	beq.n	8000da8 <_Z6readIDv+0x2c>
 8000da0:	1dfb      	adds	r3, r7, #7
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	e01e      	b.n	8000de6 <_Z6readIDv+0x6a>
	else if(HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin)==1){ID=1;}
 8000da8:	4b27      	ldr	r3, [pc, #156]	; (8000e48 <_Z6readIDv+0xcc>)
 8000daa:	2120      	movs	r1, #32
 8000dac:	0018      	movs	r0, r3
 8000dae:	f001 fe49 	bl	8002a44 <HAL_GPIO_ReadPin>
 8000db2:	0003      	movs	r3, r0
 8000db4:	3b01      	subs	r3, #1
 8000db6:	425a      	negs	r2, r3
 8000db8:	4153      	adcs	r3, r2
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <_Z6readIDv+0x4c>
 8000dc0:	1dfb      	adds	r3, r7, #7
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
 8000dc6:	e00e      	b.n	8000de6 <_Z6readIDv+0x6a>
	else if(HAL_GPIO_ReadPin(SW5_GPIO_Port, SW5_Pin)==1){ID=2;}
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <_Z6readIDv+0xcc>)
 8000dca:	2140      	movs	r1, #64	; 0x40
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f001 fe39 	bl	8002a44 <HAL_GPIO_ReadPin>
 8000dd2:	0003      	movs	r3, r0
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	425a      	negs	r2, r3
 8000dd8:	4153      	adcs	r3, r2
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <_Z6readIDv+0x6a>
 8000de0:	1dfb      	adds	r3, r7, #7
 8000de2:	2202      	movs	r2, #2
 8000de4:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin)==1){ID=ID+3;}
 8000de6:	2380      	movs	r3, #128	; 0x80
 8000de8:	015a      	lsls	r2, r3, #5
 8000dea:	23a0      	movs	r3, #160	; 0xa0
 8000dec:	05db      	lsls	r3, r3, #23
 8000dee:	0011      	movs	r1, r2
 8000df0:	0018      	movs	r0, r3
 8000df2:	f001 fe27 	bl	8002a44 <HAL_GPIO_ReadPin>
 8000df6:	0003      	movs	r3, r0
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	425a      	negs	r2, r3
 8000dfc:	4153      	adcs	r3, r2
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d005      	beq.n	8000e10 <_Z6readIDv+0x94>
 8000e04:	1dfb      	adds	r3, r7, #7
 8000e06:	1dfa      	adds	r2, r7, #7
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	3203      	adds	r2, #3
 8000e0c:	701a      	strb	r2, [r3, #0]
 8000e0e:	e015      	b.n	8000e3c <_Z6readIDv+0xc0>
	else if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin)==1){ID=ID+6;}
 8000e10:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <_Z6readIDv+0xcc>)
 8000e12:	2108      	movs	r1, #8
 8000e14:	0018      	movs	r0, r3
 8000e16:	f001 fe15 	bl	8002a44 <HAL_GPIO_ReadPin>
 8000e1a:	0003      	movs	r3, r0
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	425a      	negs	r2, r3
 8000e20:	4153      	adcs	r3, r2
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d005      	beq.n	8000e34 <_Z6readIDv+0xb8>
 8000e28:	1dfb      	adds	r3, r7, #7
 8000e2a:	1dfa      	adds	r2, r7, #7
 8000e2c:	7812      	ldrb	r2, [r2, #0]
 8000e2e:	3206      	adds	r2, #6
 8000e30:	701a      	strb	r2, [r3, #0]
 8000e32:	e003      	b.n	8000e3c <_Z6readIDv+0xc0>
	else{ID = ID;}
 8000e34:	1dfb      	adds	r3, r7, #7
 8000e36:	1dfa      	adds	r2, r7, #7
 8000e38:	7812      	ldrb	r2, [r2, #0]
 8000e3a:	701a      	strb	r2, [r3, #0]
	return ID;
 8000e3c:	1dfb      	adds	r3, r7, #7
 8000e3e:	781b      	ldrb	r3, [r3, #0]
}
 8000e40:	0018      	movs	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b002      	add	sp, #8
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	50000400 	.word	0x50000400

08000e4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e52:	f001 f84f 	bl	8001ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e56:	f000 f879 	bl	8000f4c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e5a:	f000 f9c3 	bl	80011e4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000e5e:	f000 f99b 	bl	8001198 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8000e62:	f000 f961 	bl	8001128 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 8000e66:	f000 f8cd 	bl	8001004 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  led.init(readID());
 8000e6a:	f7ff ff87 	bl	8000d7c <_Z6readIDv>
 8000e6e:	0003      	movs	r3, r0
 8000e70:	001a      	movs	r2, r3
 8000e72:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <main+0xe8>)
 8000e74:	0011      	movs	r1, r2
 8000e76:	0018      	movs	r0, r3
 8000e78:	f7ff fe03 	bl	8000a82 <_ZN3LED4initEh>
  id = readID();
 8000e7c:	f7ff ff7e 	bl	8000d7c <_Z6readIDv>
 8000e80:	0003      	movs	r3, r0
 8000e82:	001a      	movs	r2, r3
 8000e84:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <main+0xec>)
 8000e86:	601a      	str	r2, [r3, #0]
  fromMother.begin_dma();
 8000e88:	4b2c      	ldr	r3, [pc, #176]	; (8000f3c <main+0xf0>)
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f000 fa79 	bl	8001382 <_ZN13SDMA_TRANSMIT9begin_dmaEv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    fromMother.check_buf();
 8000e90:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <main+0xf0>)
 8000e92:	0018      	movs	r0, r3
 8000e94:	f000 fa88 	bl	80013a8 <_ZN13SDMA_TRANSMIT9check_bufEv>
    out_hue1 = 2.5 * fromMother.in_hue1;
 8000e98:	4b28      	ldr	r3, [pc, #160]	; (8000f3c <main+0xf0>)
 8000e9a:	22a8      	movs	r2, #168	; 0xa8
 8000e9c:	589b      	ldr	r3, [r3, r2]
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f7ff fd94 	bl	80009cc <__aeabi_i2d>
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	4b26      	ldr	r3, [pc, #152]	; (8000f40 <main+0xf4>)
 8000ea8:	f7ff faee 	bl	8000488 <__aeabi_dmul>
 8000eac:	0002      	movs	r2, r0
 8000eae:	000b      	movs	r3, r1
 8000eb0:	0010      	movs	r0, r2
 8000eb2:	0019      	movs	r1, r3
 8000eb4:	f7ff fd54 	bl	8000960 <__aeabi_d2iz>
 8000eb8:	0002      	movs	r2, r0
 8000eba:	4b22      	ldr	r3, [pc, #136]	; (8000f44 <main+0xf8>)
 8000ebc:	601a      	str	r2, [r3, #0]
    if(out_hue1>=255){out_hue1 = 255;}
 8000ebe:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <main+0xf8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2bfe      	cmp	r3, #254	; 0xfe
 8000ec4:	dd02      	ble.n	8000ecc <main+0x80>
 8000ec6:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <main+0xf8>)
 8000ec8:	22ff      	movs	r2, #255	; 0xff
 8000eca:	601a      	str	r2, [r3, #0]
    out_hue2 = 2.5 * fromMother.in_hue2;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <main+0xf0>)
 8000ece:	22ac      	movs	r2, #172	; 0xac
 8000ed0:	589b      	ldr	r3, [r3, r2]
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f7ff fd7a 	bl	80009cc <__aeabi_i2d>
 8000ed8:	2200      	movs	r2, #0
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <main+0xf4>)
 8000edc:	f7ff fad4 	bl	8000488 <__aeabi_dmul>
 8000ee0:	0002      	movs	r2, r0
 8000ee2:	000b      	movs	r3, r1
 8000ee4:	0010      	movs	r0, r2
 8000ee6:	0019      	movs	r1, r3
 8000ee8:	f7ff fd3a 	bl	8000960 <__aeabi_d2iz>
 8000eec:	0002      	movs	r2, r0
 8000eee:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <main+0xfc>)
 8000ef0:	601a      	str	r2, [r3, #0]
    if(out_hue2>=255){out_hue2 = 255;}
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <main+0xfc>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2bfe      	cmp	r3, #254	; 0xfe
 8000ef8:	dd02      	ble.n	8000f00 <main+0xb4>
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <main+0xfc>)
 8000efc:	22ff      	movs	r2, #255	; 0xff
 8000efe:	601a      	str	r2, [r3, #0]
     led.show(fromMother.travel_x, fromMother.circle_x, fromMother.circle_z, fromMother.radius, out_hue1, out_hue2);
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <main+0xf0>)
 8000f02:	2298      	movs	r2, #152	; 0x98
 8000f04:	5899      	ldr	r1, [r3, r2]
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <main+0xf0>)
 8000f08:	229c      	movs	r2, #156	; 0x9c
 8000f0a:	589c      	ldr	r4, [r3, r2]
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <main+0xf0>)
 8000f0e:	22a0      	movs	r2, #160	; 0xa0
 8000f10:	589d      	ldr	r5, [r3, r2]
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <main+0xf0>)
 8000f14:	22a4      	movs	r2, #164	; 0xa4
 8000f16:	5c9b      	ldrb	r3, [r3, r2]
 8000f18:	001e      	movs	r6, r3
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <main+0xf8>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <main+0xfc>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4804      	ldr	r0, [pc, #16]	; (8000f34 <main+0xe8>)
 8000f24:	9302      	str	r3, [sp, #8]
 8000f26:	9201      	str	r2, [sp, #4]
 8000f28:	9600      	str	r6, [sp, #0]
 8000f2a:	002b      	movs	r3, r5
 8000f2c:	0022      	movs	r2, r4
 8000f2e:	f7ff fe1a 	bl	8000b66 <_ZN3LED4showEiiiiii>
    fromMother.check_buf();
 8000f32:	e7ad      	b.n	8000e90 <main+0x44>
 8000f34:	20000504 	.word	0x20000504
 8000f38:	200005d4 	.word	0x200005d4
 8000f3c:	2000051c 	.word	0x2000051c
 8000f40:	40040000 	.word	0x40040000
 8000f44:	200005cc 	.word	0x200005cc
 8000f48:	200005d0 	.word	0x200005d0

08000f4c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b093      	sub	sp, #76	; 0x4c
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	2414      	movs	r4, #20
 8000f54:	193b      	adds	r3, r7, r4
 8000f56:	0018      	movs	r0, r3
 8000f58:	2334      	movs	r3, #52	; 0x34
 8000f5a:	001a      	movs	r2, r3
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	f004 fb9d 	bl	800569c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	0018      	movs	r0, r3
 8000f66:	2310      	movs	r3, #16
 8000f68:	001a      	movs	r2, r3
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	f004 fb96 	bl	800569c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	0018      	movs	r0, r3
 8000f76:	f001 fd9f 	bl	8002ab8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f7a:	193b      	adds	r3, r7, r4
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f80:	193b      	adds	r3, r7, r4
 8000f82:	22a0      	movs	r2, #160	; 0xa0
 8000f84:	02d2      	lsls	r2, r2, #11
 8000f86:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f88:	0021      	movs	r1, r4
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	2203      	movs	r2, #3
 8000f94:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000f96:	187b      	adds	r3, r7, r1
 8000f98:	2200      	movs	r2, #0
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	2209      	movs	r2, #9
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	2280      	movs	r2, #128	; 0x80
 8000fa6:	0292      	lsls	r2, r2, #10
 8000fa8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	05d2      	lsls	r2, r2, #23
 8000fb0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb2:	187b      	adds	r3, r7, r1
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f001 fdcb 	bl	8002b50 <HAL_RCC_OscConfig>
 8000fba:	0003      	movs	r3, r0
 8000fbc:	1e5a      	subs	r2, r3, #1
 8000fbe:	4193      	sbcs	r3, r2
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <_Z18SystemClock_Configv+0x7e>
  {
    Error_Handler();
 8000fc6:	f000 f97d 	bl	80012c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f002 f8c2 	bl	8003170 <HAL_RCC_ClockConfig>
 8000fec:	0003      	movs	r3, r0
 8000fee:	1e5a      	subs	r2, r3, #1
 8000ff0:	4193      	sbcs	r3, r2
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
 8000ff8:	f000 f964 	bl	80012c4 <Error_Handler>
  }
}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b013      	add	sp, #76	; 0x4c
 8001002:	bd90      	pop	{r4, r7, pc}

08001004 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08e      	sub	sp, #56	; 0x38
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800100a:	2328      	movs	r3, #40	; 0x28
 800100c:	18fb      	adds	r3, r7, r3
 800100e:	0018      	movs	r0, r3
 8001010:	2310      	movs	r3, #16
 8001012:	001a      	movs	r2, r3
 8001014:	2100      	movs	r1, #0
 8001016:	f004 fb41 	bl	800569c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800101a:	231c      	movs	r3, #28
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	0018      	movs	r0, r3
 8001020:	230c      	movs	r3, #12
 8001022:	001a      	movs	r2, r3
 8001024:	2100      	movs	r1, #0
 8001026:	f004 fb39 	bl	800569c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800102a:	003b      	movs	r3, r7
 800102c:	0018      	movs	r0, r3
 800102e:	231c      	movs	r3, #28
 8001030:	001a      	movs	r2, r3
 8001032:	2100      	movs	r1, #0
 8001034:	f004 fb32 	bl	800569c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001038:	4b39      	ldr	r3, [pc, #228]	; (8001120 <_ZL12MX_TIM3_Initv+0x11c>)
 800103a:	4a3a      	ldr	r2, [pc, #232]	; (8001124 <_ZL12MX_TIM3_Initv+0x120>)
 800103c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 800103e:	4b38      	ldr	r3, [pc, #224]	; (8001120 <_ZL12MX_TIM3_Initv+0x11c>)
 8001040:	2203      	movs	r2, #3
 8001042:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001044:	4b36      	ldr	r3, [pc, #216]	; (8001120 <_ZL12MX_TIM3_Initv+0x11c>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15-1;
 800104a:	4b35      	ldr	r3, [pc, #212]	; (8001120 <_ZL12MX_TIM3_Initv+0x11c>)
 800104c:	220e      	movs	r2, #14
 800104e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001050:	4b33      	ldr	r3, [pc, #204]	; (8001120 <_ZL12MX_TIM3_Initv+0x11c>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001056:	4b32      	ldr	r3, [pc, #200]	; (8001120 <_ZL12MX_TIM3_Initv+0x11c>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800105c:	4b30      	ldr	r3, [pc, #192]	; (8001120 <_ZL12MX_TIM3_Initv+0x11c>)
 800105e:	0018      	movs	r0, r3
 8001060:	f002 fa2e 	bl	80034c0 <HAL_TIM_Base_Init>
 8001064:	0003      	movs	r3, r0
 8001066:	1e5a      	subs	r2, r3, #1
 8001068:	4193      	sbcs	r3, r2
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8001070:	f000 f928 	bl	80012c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001074:	2128      	movs	r1, #40	; 0x28
 8001076:	187b      	adds	r3, r7, r1
 8001078:	2280      	movs	r2, #128	; 0x80
 800107a:	0152      	lsls	r2, r2, #5
 800107c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800107e:	187a      	adds	r2, r7, r1
 8001080:	4b27      	ldr	r3, [pc, #156]	; (8001120 <_ZL12MX_TIM3_Initv+0x11c>)
 8001082:	0011      	movs	r1, r2
 8001084:	0018      	movs	r0, r3
 8001086:	f002 feab 	bl	8003de0 <HAL_TIM_ConfigClockSource>
 800108a:	0003      	movs	r3, r0
 800108c:	1e5a      	subs	r2, r3, #1
 800108e:	4193      	sbcs	r3, r2
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8001096:	f000 f915 	bl	80012c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800109a:	4b21      	ldr	r3, [pc, #132]	; (8001120 <_ZL12MX_TIM3_Initv+0x11c>)
 800109c:	0018      	movs	r0, r3
 800109e:	f002 fa67 	bl	8003570 <HAL_TIM_PWM_Init>
 80010a2:	0003      	movs	r3, r0
 80010a4:	1e5a      	subs	r2, r3, #1
 80010a6:	4193      	sbcs	r3, r2
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 80010ae:	f000 f909 	bl	80012c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b2:	211c      	movs	r1, #28
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010c0:	187a      	adds	r2, r7, r1
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <_ZL12MX_TIM3_Initv+0x11c>)
 80010c4:	0011      	movs	r1, r2
 80010c6:	0018      	movs	r0, r3
 80010c8:	f003 fc12 	bl	80048f0 <HAL_TIMEx_MasterConfigSynchronization>
 80010cc:	0003      	movs	r3, r0
 80010ce:	1e5a      	subs	r2, r3, #1
 80010d0:	4193      	sbcs	r3, r2
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 80010d8:	f000 f8f4 	bl	80012c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010dc:	003b      	movs	r3, r7
 80010de:	2260      	movs	r2, #96	; 0x60
 80010e0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80010e2:	003b      	movs	r3, r7
 80010e4:	2200      	movs	r2, #0
 80010e6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e8:	003b      	movs	r3, r7
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80010ee:	003b      	movs	r3, r7
 80010f0:	2204      	movs	r2, #4
 80010f2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010f4:	0039      	movs	r1, r7
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <_ZL12MX_TIM3_Initv+0x11c>)
 80010f8:	2204      	movs	r2, #4
 80010fa:	0018      	movs	r0, r3
 80010fc:	f002 fd70 	bl	8003be0 <HAL_TIM_PWM_ConfigChannel>
 8001100:	0003      	movs	r3, r0
 8001102:	1e5a      	subs	r2, r3, #1
 8001104:	4193      	sbcs	r3, r2
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <_ZL12MX_TIM3_Initv+0x10c>
  {
    Error_Handler();
 800110c:	f000 f8da 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <_ZL12MX_TIM3_Initv+0x11c>)
 8001112:	0018      	movs	r0, r3
 8001114:	f000 faba 	bl	800168c <HAL_TIM_MspPostInit>

}
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	b00e      	add	sp, #56	; 0x38
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000028 	.word	0x20000028
 8001124:	40000400 	.word	0x40000400

08001128 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <_ZL19MX_USART2_UART_Initv+0x68>)
 800112e:	4a19      	ldr	r2, [pc, #100]	; (8001194 <_ZL19MX_USART2_UART_Initv+0x6c>)
 8001130:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001134:	22e1      	movs	r2, #225	; 0xe1
 8001136:	0252      	lsls	r2, r2, #9
 8001138:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <_ZL19MX_USART2_UART_Initv+0x68>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800114c:	4b10      	ldr	r3, [pc, #64]	; (8001190 <_ZL19MX_USART2_UART_Initv+0x68>)
 800114e:	220c      	movs	r2, #12
 8001150:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001158:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <_ZL19MX_USART2_UART_Initv+0x68>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001166:	2200      	movs	r2, #0
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <_ZL19MX_USART2_UART_Initv+0x68>)
 800116c:	2200      	movs	r2, #0
 800116e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001172:	0018      	movs	r0, r3
 8001174:	f003 fc1e 	bl	80049b4 <HAL_UART_Init>
 8001178:	0003      	movs	r3, r0
 800117a:	1e5a      	subs	r2, r3, #1
 800117c:	4193      	sbcs	r3, r2
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <_ZL19MX_USART2_UART_Initv+0x60>
  {
    Error_Handler();
 8001184:	f000 f89e 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	200000d0 	.word	0x200000d0
 8001194:	40004400 	.word	0x40004400

08001198 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <_ZL11MX_DMA_Initv+0x48>)
 80011a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <_ZL11MX_DMA_Initv+0x48>)
 80011a4:	2101      	movs	r1, #1
 80011a6:	430a      	orrs	r2, r1
 80011a8:	639a      	str	r2, [r3, #56]	; 0x38
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <_ZL11MX_DMA_Initv+0x48>)
 80011ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ae:	2201      	movs	r2, #1
 80011b0:	4013      	ands	r3, r2
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	2009      	movs	r0, #9
 80011bc:	f000 fff0 	bl	80021a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011c0:	2009      	movs	r0, #9
 80011c2:	f001 f802 	bl	80021ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	200a      	movs	r0, #10
 80011cc:	f000 ffe8 	bl	80021a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80011d0:	200a      	movs	r0, #10
 80011d2:	f000 fffa 	bl	80021ca <HAL_NVIC_EnableIRQ>

}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	b002      	add	sp, #8
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	40021000 	.word	0x40021000

080011e4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b089      	sub	sp, #36	; 0x24
 80011e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ea:	240c      	movs	r4, #12
 80011ec:	193b      	adds	r3, r7, r4
 80011ee:	0018      	movs	r0, r3
 80011f0:	2314      	movs	r3, #20
 80011f2:	001a      	movs	r2, r3
 80011f4:	2100      	movs	r1, #0
 80011f6:	f004 fa51 	bl	800569c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fa:	4b30      	ldr	r3, [pc, #192]	; (80012bc <_ZL12MX_GPIO_Initv+0xd8>)
 80011fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011fe:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <_ZL12MX_GPIO_Initv+0xd8>)
 8001200:	2104      	movs	r1, #4
 8001202:	430a      	orrs	r2, r1
 8001204:	635a      	str	r2, [r3, #52]	; 0x34
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <_ZL12MX_GPIO_Initv+0xd8>)
 8001208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800120a:	2204      	movs	r2, #4
 800120c:	4013      	ands	r3, r2
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <_ZL12MX_GPIO_Initv+0xd8>)
 8001214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001216:	4b29      	ldr	r3, [pc, #164]	; (80012bc <_ZL12MX_GPIO_Initv+0xd8>)
 8001218:	2101      	movs	r1, #1
 800121a:	430a      	orrs	r2, r1
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
 800121e:	4b27      	ldr	r3, [pc, #156]	; (80012bc <_ZL12MX_GPIO_Initv+0xd8>)
 8001220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001222:	2201      	movs	r2, #1
 8001224:	4013      	ands	r3, r2
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	4b24      	ldr	r3, [pc, #144]	; (80012bc <_ZL12MX_GPIO_Initv+0xd8>)
 800122c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800122e:	4b23      	ldr	r3, [pc, #140]	; (80012bc <_ZL12MX_GPIO_Initv+0xd8>)
 8001230:	2102      	movs	r1, #2
 8001232:	430a      	orrs	r2, r1
 8001234:	635a      	str	r2, [r3, #52]	; 0x34
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <_ZL12MX_GPIO_Initv+0xd8>)
 8001238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800123a:	2202      	movs	r2, #2
 800123c:	4013      	ands	r3, r2
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001242:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <_ZL12MX_GPIO_Initv+0xdc>)
 8001244:	2200      	movs	r2, #0
 8001246:	2104      	movs	r1, #4
 8001248:	0018      	movs	r0, r3
 800124a:	f001 fc18 	bl	8002a7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800124e:	193b      	adds	r3, r7, r4
 8001250:	2204      	movs	r2, #4
 8001252:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	193b      	adds	r3, r7, r4
 8001256:	2201      	movs	r2, #1
 8001258:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	193b      	adds	r3, r7, r4
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	193b      	adds	r3, r7, r4
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001266:	193b      	adds	r3, r7, r4
 8001268:	4a15      	ldr	r2, [pc, #84]	; (80012c0 <_ZL12MX_GPIO_Initv+0xdc>)
 800126a:	0019      	movs	r1, r3
 800126c:	0010      	movs	r0, r2
 800126e:	f001 fa85 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8001272:	193b      	adds	r3, r7, r4
 8001274:	2280      	movs	r2, #128	; 0x80
 8001276:	0152      	lsls	r2, r2, #5
 8001278:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127a:	193b      	adds	r3, r7, r4
 800127c:	2200      	movs	r2, #0
 800127e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	193b      	adds	r3, r7, r4
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001286:	193a      	adds	r2, r7, r4
 8001288:	23a0      	movs	r3, #160	; 0xa0
 800128a:	05db      	lsls	r3, r3, #23
 800128c:	0011      	movs	r1, r2
 800128e:	0018      	movs	r0, r3
 8001290:	f001 fa74 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin SW3_Pin SW4_Pin SW5_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin|SW4_Pin|SW5_Pin;
 8001294:	193b      	adds	r3, r7, r4
 8001296:	2278      	movs	r2, #120	; 0x78
 8001298:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129a:	193b      	adds	r3, r7, r4
 800129c:	2200      	movs	r2, #0
 800129e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	193b      	adds	r3, r7, r4
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	193b      	adds	r3, r7, r4
 80012a8:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <_ZL12MX_GPIO_Initv+0xdc>)
 80012aa:	0019      	movs	r1, r3
 80012ac:	0010      	movs	r0, r2
 80012ae:	f001 fa65 	bl	800277c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b009      	add	sp, #36	; 0x24
 80012b8:	bd90      	pop	{r4, r7, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	40021000 	.word	0x40021000
 80012c0:	50000400 	.word	0x50000400

080012c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c8:	b672      	cpsid	i
}
 80012ca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012cc:	e7fe      	b.n	80012cc <Error_Handler+0x8>
	...

080012d0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d115      	bne.n	800130c <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	4a0c      	ldr	r2, [pc, #48]	; (8001314 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d111      	bne.n	800130c <_Z41__static_initialization_and_destruction_0ii+0x3c>
WS2812 Neopixel(&htim3, TIM_CHANNEL_2, &hdma_tim3_ch2);
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80012ea:	490c      	ldr	r1, [pc, #48]	; (800131c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80012ec:	480c      	ldr	r0, [pc, #48]	; (8001320 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80012ee:	2204      	movs	r2, #4
 80012f0:	f000 faba 	bl	8001868 <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
LED led(&Neopixel);
 80012f4:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80012f8:	0011      	movs	r1, r2
 80012fa:	0018      	movs	r0, r3
 80012fc:	f7ff fbb4 	bl	8000a68 <_ZN3LEDC1EP6WS2812>
SDMA_TRANSMIT fromMother(&huart2,0);
 8001300:	4909      	ldr	r1, [pc, #36]	; (8001328 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001304:	2200      	movs	r2, #0
 8001306:	0018      	movs	r0, r3
 8001308:	f000 f81e 	bl	8001348 <_ZN13SDMA_TRANSMITC1EP20__UART_HandleTypeDefh>
}
 800130c:	46c0      	nop			; (mov r8, r8)
 800130e:	46bd      	mov	sp, r7
 8001310:	b002      	add	sp, #8
 8001312:	bd80      	pop	{r7, pc}
 8001314:	0000ffff 	.word	0x0000ffff
 8001318:	20000074 	.word	0x20000074
 800131c:	20000028 	.word	0x20000028
 8001320:	200001c0 	.word	0x200001c0
 8001324:	20000504 	.word	0x20000504
 8001328:	200000d0 	.word	0x200000d0
 800132c:	2000051c 	.word	0x2000051c

08001330 <_GLOBAL__sub_I_htim3>:
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <_GLOBAL__sub_I_htim3+0x14>)
 8001336:	0019      	movs	r1, r3
 8001338:	2001      	movs	r0, #1
 800133a:	f7ff ffc9 	bl	80012d0 <_Z41__static_initialization_and_destruction_0ii>
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	0000ffff 	.word	0x0000ffff

08001348 <_ZN13SDMA_TRANSMITC1EP20__UART_HandleTypeDefh>:

#include "sdma_transmit.h"

SDMA_TRANSMIT::SDMA_TRANSMIT(UART_HandleTypeDef* uart, uint8_t id){
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	701a      	strb	r2, [r3, #0]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2280      	movs	r2, #128	; 0x80
 800135a:	2100      	movs	r1, #0
 800135c:	5099      	str	r1, [r3, r2]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2284      	movs	r2, #132	; 0x84
 8001362:	2100      	movs	r1, #0
 8001364:	5499      	strb	r1, [r3, r2]
    UART = uart;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2190      	movs	r1, #144	; 0x90
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	505a      	str	r2, [r3, r1]
    ID = id;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	1dfa      	adds	r2, r7, #7
 8001372:	2185      	movs	r1, #133	; 0x85
 8001374:	7812      	ldrb	r2, [r2, #0]
 8001376:	545a      	strb	r2, [r3, r1]
}
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	0018      	movs	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	b004      	add	sp, #16
 8001380:	bd80      	pop	{r7, pc}

08001382 <_ZN13SDMA_TRANSMIT9begin_dmaEv>:

void SDMA_TRANSMIT::begin_dma(){
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_DMA(UART, rxBuf, sizeof(rxBuf));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2290      	movs	r2, #144	; 0x90
 800138e:	589b      	ldr	r3, [r3, r2]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	2280      	movs	r2, #128	; 0x80
 8001394:	0018      	movs	r0, r3
 8001396:	f003 fb63 	bl	8004a60 <HAL_UART_Receive_DMA>
    HAL_Delay(1);
 800139a:	2001      	movs	r0, #1
 800139c:	f000 fe30 	bl	8002000 <HAL_Delay>
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b002      	add	sp, #8
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <_ZN13SDMA_TRANSMIT9check_bufEv>:

void SDMA_TRANSMIT::check_buf(){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	index = UART->hdmarx->Instance->CNDTR;//バッファー残容量
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2290      	movs	r2, #144	; 0x90
 80013b4:	589b      	ldr	r3, [r3, r2]
 80013b6:	2280      	movs	r2, #128	; 0x80
 80013b8:	589b      	ldr	r3, [r3, r2]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	0019      	movs	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2294      	movs	r2, #148	; 0x94
 80013c4:	5099      	str	r1, [r3, r2]
 	index = sizeof(rxBuf) - index;//最新の受信データ位置
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2294      	movs	r2, #148	; 0x94
 80013ca:	589b      	ldr	r3, [r3, r2]
 80013cc:	001a      	movs	r2, r3
 80013ce:	2380      	movs	r3, #128	; 0x80
 80013d0:	1a9b      	subs	r3, r3, r2
 80013d2:	0019      	movs	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2294      	movs	r2, #148	; 0x94
 80013d8:	5099      	str	r1, [r3, r2]

 	int check_buf_point = index - 21;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2294      	movs	r2, #148	; 0x94
 80013de:	589b      	ldr	r3, [r3, r2]
 80013e0:	3b15      	subs	r3, #21
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
 	if(check_buf_point < 0){check_buf_point = check_buf_point + sizeof(rxBuf);}
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	da02      	bge.n	80013f0 <_ZN13SDMA_TRANSMIT9check_bufEv+0x48>
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	3380      	adds	r3, #128	; 0x80
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
 	//読み込み済みデータ位置より最新の受信データ位置が前にある時(バッファー内で受信データが一周してた場合)値を補正

	while(1){
		readData = rxBuf[check_buf_point];
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	18d3      	adds	r3, r2, r3
 80013f6:	7819      	ldrb	r1, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2284      	movs	r2, #132	; 0x84
 80013fc:	5499      	strb	r1, [r3, r2]
		if(readData == 220+ID){
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2284      	movs	r2, #132	; 0x84
 8001402:	5c9b      	ldrb	r3, [r3, r2]
 8001404:	0019      	movs	r1, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2285      	movs	r2, #133	; 0x85
 800140a:	5c9b      	ldrb	r3, [r3, r2]
 800140c:	33dc      	adds	r3, #220	; 0xdc
 800140e:	4299      	cmp	r1, r3
 8001410:	d11e      	bne.n	8001450 <_ZN13SDMA_TRANSMIT9check_bufEv+0xa8>
			for(int i=1; i<10; i++){
 8001412:	2301      	movs	r3, #1
 8001414:	623b      	str	r3, [r7, #32]
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	2b09      	cmp	r3, #9
 800141a:	dc29      	bgt.n	8001470 <_ZN13SDMA_TRANSMIT9check_bufEv+0xc8>
				int read_buf_point = check_buf_point + i;
 800141c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	18d3      	adds	r3, r2, r3
 8001422:	61fb      	str	r3, [r7, #28]
				if(read_buf_point>sizeof(rxBuf)-1){read_buf_point = read_buf_point - sizeof(rxBuf);}
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	2b7f      	cmp	r3, #127	; 0x7f
 8001428:	d902      	bls.n	8001430 <_ZN13SDMA_TRANSMIT9check_bufEv+0x88>
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b80      	subs	r3, #128	; 0x80
 800142e:	61fb      	str	r3, [r7, #28]
				rcvBuf[i-1] = rxBuf[read_buf_point];
 8001430:	6a3b      	ldr	r3, [r7, #32]
 8001432:	3b01      	subs	r3, #1
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	69fa      	ldr	r2, [r7, #28]
 8001438:	188a      	adds	r2, r1, r2
 800143a:	7810      	ldrb	r0, [r2, #0]
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	2186      	movs	r1, #134	; 0x86
 8001440:	18d3      	adds	r3, r2, r3
 8001442:	185b      	adds	r3, r3, r1
 8001444:	1c02      	adds	r2, r0, #0
 8001446:	701a      	strb	r2, [r3, #0]
			for(int i=1; i<10; i++){
 8001448:	6a3b      	ldr	r3, [r7, #32]
 800144a:	3301      	adds	r3, #1
 800144c:	623b      	str	r3, [r7, #32]
 800144e:	e7e2      	b.n	8001416 <_ZN13SDMA_TRANSMIT9check_bufEv+0x6e>
			}
			break;
		}
		check_buf_point++;
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	3301      	adds	r3, #1
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
		if(check_buf_point>sizeof(rxBuf)-1){check_buf_point = check_buf_point - sizeof(rxBuf);}
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	2b7f      	cmp	r3, #127	; 0x7f
 800145a:	d902      	bls.n	8001462 <_ZN13SDMA_TRANSMIT9check_bufEv+0xba>
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	3b80      	subs	r3, #128	; 0x80
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
		if(check_buf_point==index){break;}
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2294      	movs	r2, #148	; 0x94
 8001466:	589b      	ldr	r3, [r3, r2]
 8001468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800146a:	429a      	cmp	r2, r3
 800146c:	d002      	beq.n	8001474 <_ZN13SDMA_TRANSMIT9check_bufEv+0xcc>
	}
 800146e:	e7bf      	b.n	80013f0 <_ZN13SDMA_TRANSMIT9check_bufEv+0x48>
			break;
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	e000      	b.n	8001476 <_ZN13SDMA_TRANSMIT9check_bufEv+0xce>
		if(check_buf_point==index){break;}
 8001474:	46c0      	nop			; (mov r8, r8)

 	travel_x = 0; int hyaku = 1;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2298      	movs	r2, #152	; 0x98
 800147a:	2100      	movs	r1, #0
 800147c:	5099      	str	r1, [r3, r2]
 800147e:	2301      	movs	r3, #1
 8001480:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i <2 ; i++){
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2b01      	cmp	r3, #1
 800148a:	dc17      	bgt.n	80014bc <_ZN13SDMA_TRANSMIT9check_bufEv+0x114>
		travel_x = travel_x + (rcvBuf[i]*hyaku);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2298      	movs	r2, #152	; 0x98
 8001490:	589a      	ldr	r2, [r3, r2]
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	2086      	movs	r0, #134	; 0x86
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	18cb      	adds	r3, r1, r3
 800149a:	181b      	adds	r3, r3, r0
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	0019      	movs	r1, r3
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	434b      	muls	r3, r1
 80014a4:	18d2      	adds	r2, r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2198      	movs	r1, #152	; 0x98
 80014aa:	505a      	str	r2, [r3, r1]
		hyaku = hyaku*100;
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2264      	movs	r2, #100	; 0x64
 80014b0:	4353      	muls	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i <2 ; i++){
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	3301      	adds	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	e7e4      	b.n	8001486 <_ZN13SDMA_TRANSMIT9check_bufEv+0xde>
	}
	travel_x -= 5000;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2298      	movs	r2, #152	; 0x98
 80014c0:	589b      	ldr	r3, [r3, r2]
 80014c2:	4a39      	ldr	r2, [pc, #228]	; (80015a8 <_ZN13SDMA_TRANSMIT9check_bufEv+0x200>)
 80014c4:	189a      	adds	r2, r3, r2
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2198      	movs	r1, #152	; 0x98
 80014ca:	505a      	str	r2, [r3, r1]

	circle_x = 0; hyaku = 1;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	229c      	movs	r2, #156	; 0x9c
 80014d0:	2100      	movs	r1, #0
 80014d2:	5099      	str	r1, [r3, r2]
 80014d4:	2301      	movs	r3, #1
 80014d6:	61bb      	str	r3, [r7, #24]
	for(int i = 2; i <4 ; i++){
 80014d8:	2302      	movs	r3, #2
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	2b03      	cmp	r3, #3
 80014e0:	dc17      	bgt.n	8001512 <_ZN13SDMA_TRANSMIT9check_bufEv+0x16a>
		circle_x = circle_x + (rcvBuf[i]*hyaku);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	229c      	movs	r2, #156	; 0x9c
 80014e6:	589a      	ldr	r2, [r3, r2]
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	2086      	movs	r0, #134	; 0x86
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	18cb      	adds	r3, r1, r3
 80014f0:	181b      	adds	r3, r3, r0
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	0019      	movs	r1, r3
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	434b      	muls	r3, r1
 80014fa:	18d2      	adds	r2, r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	219c      	movs	r1, #156	; 0x9c
 8001500:	505a      	str	r2, [r3, r1]
		hyaku = hyaku*100;
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	2264      	movs	r2, #100	; 0x64
 8001506:	4353      	muls	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
	for(int i = 2; i <4 ; i++){
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	3301      	adds	r3, #1
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	e7e4      	b.n	80014dc <_ZN13SDMA_TRANSMIT9check_bufEv+0x134>
	}
	circle_x -= 5000;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	229c      	movs	r2, #156	; 0x9c
 8001516:	589b      	ldr	r3, [r3, r2]
 8001518:	4a23      	ldr	r2, [pc, #140]	; (80015a8 <_ZN13SDMA_TRANSMIT9check_bufEv+0x200>)
 800151a:	189a      	adds	r2, r3, r2
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	219c      	movs	r1, #156	; 0x9c
 8001520:	505a      	str	r2, [r3, r1]

	circle_z = 0; hyaku = 1;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	22a0      	movs	r2, #160	; 0xa0
 8001526:	2100      	movs	r1, #0
 8001528:	5099      	str	r1, [r3, r2]
 800152a:	2301      	movs	r3, #1
 800152c:	61bb      	str	r3, [r7, #24]
	for(int i = 4; i <6 ; i++){
 800152e:	2304      	movs	r3, #4
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2b05      	cmp	r3, #5
 8001536:	dc17      	bgt.n	8001568 <_ZN13SDMA_TRANSMIT9check_bufEv+0x1c0>
		circle_z = circle_z + (rcvBuf[i]*hyaku);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	22a0      	movs	r2, #160	; 0xa0
 800153c:	589a      	ldr	r2, [r3, r2]
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	2086      	movs	r0, #134	; 0x86
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	18cb      	adds	r3, r1, r3
 8001546:	181b      	adds	r3, r3, r0
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	0019      	movs	r1, r3
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	434b      	muls	r3, r1
 8001550:	18d2      	adds	r2, r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	21a0      	movs	r1, #160	; 0xa0
 8001556:	505a      	str	r2, [r3, r1]
		hyaku = hyaku*100;
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	2264      	movs	r2, #100	; 0x64
 800155c:	4353      	muls	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
	for(int i = 4; i <6 ; i++){
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3301      	adds	r3, #1
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	e7e4      	b.n	8001532 <_ZN13SDMA_TRANSMIT9check_bufEv+0x18a>
	}
	circle_z -= 5000;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	22a0      	movs	r2, #160	; 0xa0
 800156c:	589b      	ldr	r3, [r3, r2]
 800156e:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <_ZN13SDMA_TRANSMIT9check_bufEv+0x200>)
 8001570:	189a      	adds	r2, r3, r2
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	21a0      	movs	r1, #160	; 0xa0
 8001576:	505a      	str	r2, [r3, r1]

	radius = rcvBuf[6];
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	228c      	movs	r2, #140	; 0x8c
 800157c:	5c99      	ldrb	r1, [r3, r2]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	22a4      	movs	r2, #164	; 0xa4
 8001582:	5499      	strb	r1, [r3, r2]
	in_hue1 = rcvBuf[7];
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	228d      	movs	r2, #141	; 0x8d
 8001588:	5c9b      	ldrb	r3, [r3, r2]
 800158a:	0019      	movs	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	22a8      	movs	r2, #168	; 0xa8
 8001590:	5099      	str	r1, [r3, r2]
	in_hue2 = rcvBuf[8];
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	228e      	movs	r2, #142	; 0x8e
 8001596:	5c9b      	ldrb	r3, [r3, r2]
 8001598:	0019      	movs	r1, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	22ac      	movs	r2, #172	; 0xac
 800159e:	5099      	str	r1, [r3, r2]

}
 80015a0:	46c0      	nop			; (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b00a      	add	sp, #40	; 0x28
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	ffffec78 	.word	0xffffec78

080015ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <HAL_MspInit+0x44>)
 80015b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <HAL_MspInit+0x44>)
 80015b8:	2101      	movs	r1, #1
 80015ba:	430a      	orrs	r2, r1
 80015bc:	641a      	str	r2, [r3, #64]	; 0x40
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <HAL_MspInit+0x44>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	2201      	movs	r2, #1
 80015c4:	4013      	ands	r3, r2
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_MspInit+0x44>)
 80015cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <HAL_MspInit+0x44>)
 80015d0:	2180      	movs	r1, #128	; 0x80
 80015d2:	0549      	lsls	r1, r1, #21
 80015d4:	430a      	orrs	r2, r1
 80015d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_MspInit+0x44>)
 80015da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	055b      	lsls	r3, r3, #21
 80015e0:	4013      	ands	r3, r2
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	46bd      	mov	sp, r7
 80015ea:	b002      	add	sp, #8
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	40021000 	.word	0x40021000

080015f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a1e      	ldr	r2, [pc, #120]	; (800167c <HAL_TIM_Base_MspInit+0x88>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d136      	bne.n	8001674 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001606:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <HAL_TIM_Base_MspInit+0x8c>)
 8001608:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800160a:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <HAL_TIM_Base_MspInit+0x8c>)
 800160c:	2102      	movs	r1, #2
 800160e:	430a      	orrs	r2, r1
 8001610:	63da      	str	r2, [r3, #60]	; 0x3c
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_TIM_Base_MspInit+0x8c>)
 8001614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001616:	2202      	movs	r2, #2
 8001618:	4013      	ands	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Channel2;
 800161e:	4b19      	ldr	r3, [pc, #100]	; (8001684 <HAL_TIM_Base_MspInit+0x90>)
 8001620:	4a19      	ldr	r2, [pc, #100]	; (8001688 <HAL_TIM_Base_MspInit+0x94>)
 8001622:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8001624:	4b17      	ldr	r3, [pc, #92]	; (8001684 <HAL_TIM_Base_MspInit+0x90>)
 8001626:	2221      	movs	r2, #33	; 0x21
 8001628:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_TIM_Base_MspInit+0x90>)
 800162c:	2210      	movs	r2, #16
 800162e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <HAL_TIM_Base_MspInit+0x90>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <HAL_TIM_Base_MspInit+0x90>)
 8001638:	2280      	movs	r2, #128	; 0x80
 800163a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <HAL_TIM_Base_MspInit+0x90>)
 800163e:	2280      	movs	r2, #128	; 0x80
 8001640:	0092      	lsls	r2, r2, #2
 8001642:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_TIM_Base_MspInit+0x90>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <HAL_TIM_Base_MspInit+0x90>)
 800164c:	2220      	movs	r2, #32
 800164e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_TIM_Base_MspInit+0x90>)
 8001652:	22c0      	movs	r2, #192	; 0xc0
 8001654:	0192      	lsls	r2, r2, #6
 8001656:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_TIM_Base_MspInit+0x90>)
 800165a:	0018      	movs	r0, r3
 800165c:	f000 fdd2 	bl	8002204 <HAL_DMA_Init>
 8001660:	1e03      	subs	r3, r0, #0
 8001662:	d001      	beq.n	8001668 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8001664:	f7ff fe2e 	bl	80012c4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a06      	ldr	r2, [pc, #24]	; (8001684 <HAL_TIM_Base_MspInit+0x90>)
 800166c:	629a      	str	r2, [r3, #40]	; 0x28
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_TIM_Base_MspInit+0x90>)
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	b004      	add	sp, #16
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40000400 	.word	0x40000400
 8001680:	40021000 	.word	0x40021000
 8001684:	20000074 	.word	0x20000074
 8001688:	4002001c 	.word	0x4002001c

0800168c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b089      	sub	sp, #36	; 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	240c      	movs	r4, #12
 8001696:	193b      	adds	r3, r7, r4
 8001698:	0018      	movs	r0, r3
 800169a:	2314      	movs	r3, #20
 800169c:	001a      	movs	r2, r3
 800169e:	2100      	movs	r1, #0
 80016a0:	f003 fffc 	bl	800569c <memset>
  if(htim->Instance==TIM3)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a14      	ldr	r2, [pc, #80]	; (80016fc <HAL_TIM_MspPostInit+0x70>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d122      	bne.n	80016f4 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <HAL_TIM_MspPostInit+0x74>)
 80016b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016b2:	4b13      	ldr	r3, [pc, #76]	; (8001700 <HAL_TIM_MspPostInit+0x74>)
 80016b4:	2101      	movs	r1, #1
 80016b6:	430a      	orrs	r2, r1
 80016b8:	635a      	str	r2, [r3, #52]	; 0x34
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_TIM_MspPostInit+0x74>)
 80016bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016be:	2201      	movs	r2, #1
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016c6:	0021      	movs	r1, r4
 80016c8:	187b      	adds	r3, r7, r1
 80016ca:	2280      	movs	r2, #128	; 0x80
 80016cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	187b      	adds	r3, r7, r1
 80016d0:	2202      	movs	r2, #2
 80016d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	2200      	movs	r2, #0
 80016de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	2201      	movs	r2, #1
 80016e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e6:	187a      	adds	r2, r7, r1
 80016e8:	23a0      	movs	r3, #160	; 0xa0
 80016ea:	05db      	lsls	r3, r3, #23
 80016ec:	0011      	movs	r1, r2
 80016ee:	0018      	movs	r0, r3
 80016f0:	f001 f844 	bl	800277c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016f4:	46c0      	nop			; (mov r8, r8)
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b009      	add	sp, #36	; 0x24
 80016fa:	bd90      	pop	{r4, r7, pc}
 80016fc:	40000400 	.word	0x40000400
 8001700:	40021000 	.word	0x40021000

08001704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b08b      	sub	sp, #44	; 0x2c
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	2414      	movs	r4, #20
 800170e:	193b      	adds	r3, r7, r4
 8001710:	0018      	movs	r0, r3
 8001712:	2314      	movs	r3, #20
 8001714:	001a      	movs	r2, r3
 8001716:	2100      	movs	r1, #0
 8001718:	f003 ffc0 	bl	800569c <memset>
  if(huart->Instance==USART2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a31      	ldr	r2, [pc, #196]	; (80017e8 <HAL_UART_MspInit+0xe4>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d15b      	bne.n	80017de <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001726:	4b31      	ldr	r3, [pc, #196]	; (80017ec <HAL_UART_MspInit+0xe8>)
 8001728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800172a:	4b30      	ldr	r3, [pc, #192]	; (80017ec <HAL_UART_MspInit+0xe8>)
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	0289      	lsls	r1, r1, #10
 8001730:	430a      	orrs	r2, r1
 8001732:	63da      	str	r2, [r3, #60]	; 0x3c
 8001734:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <HAL_UART_MspInit+0xe8>)
 8001736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	029b      	lsls	r3, r3, #10
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <HAL_UART_MspInit+0xe8>)
 8001744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001746:	4b29      	ldr	r3, [pc, #164]	; (80017ec <HAL_UART_MspInit+0xe8>)
 8001748:	2101      	movs	r1, #1
 800174a:	430a      	orrs	r2, r1
 800174c:	635a      	str	r2, [r3, #52]	; 0x34
 800174e:	4b27      	ldr	r3, [pc, #156]	; (80017ec <HAL_UART_MspInit+0xe8>)
 8001750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001752:	2201      	movs	r2, #1
 8001754:	4013      	ands	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800175a:	0021      	movs	r1, r4
 800175c:	187b      	adds	r3, r7, r1
 800175e:	4a24      	ldr	r2, [pc, #144]	; (80017f0 <HAL_UART_MspInit+0xec>)
 8001760:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	187b      	adds	r3, r7, r1
 8001764:	2202      	movs	r2, #2
 8001766:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	187b      	adds	r3, r7, r1
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	187b      	adds	r3, r7, r1
 8001770:	2200      	movs	r2, #0
 8001772:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001774:	187b      	adds	r3, r7, r1
 8001776:	2201      	movs	r2, #1
 8001778:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	187a      	adds	r2, r7, r1
 800177c:	23a0      	movs	r3, #160	; 0xa0
 800177e:	05db      	lsls	r3, r3, #23
 8001780:	0011      	movs	r1, r2
 8001782:	0018      	movs	r0, r3
 8001784:	f000 fffa 	bl	800277c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <HAL_UART_MspInit+0xf0>)
 800178a:	4a1b      	ldr	r2, [pc, #108]	; (80017f8 <HAL_UART_MspInit+0xf4>)
 800178c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_UART_MspInit+0xf0>)
 8001790:	2234      	movs	r2, #52	; 0x34
 8001792:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001794:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <HAL_UART_MspInit+0xf0>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <HAL_UART_MspInit+0xf0>)
 800179c:	2200      	movs	r2, #0
 800179e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <HAL_UART_MspInit+0xf0>)
 80017a2:	2280      	movs	r2, #128	; 0x80
 80017a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017a6:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <HAL_UART_MspInit+0xf0>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_UART_MspInit+0xf0>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <HAL_UART_MspInit+0xf0>)
 80017b4:	2220      	movs	r2, #32
 80017b6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_UART_MspInit+0xf0>)
 80017ba:	2280      	movs	r2, #128	; 0x80
 80017bc:	0192      	lsls	r2, r2, #6
 80017be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_UART_MspInit+0xf0>)
 80017c2:	0018      	movs	r0, r3
 80017c4:	f000 fd1e 	bl	8002204 <HAL_DMA_Init>
 80017c8:	1e03      	subs	r3, r0, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80017cc:	f7ff fd7a 	bl	80012c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2180      	movs	r1, #128	; 0x80
 80017d4:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <HAL_UART_MspInit+0xf0>)
 80017d6:	505a      	str	r2, [r3, r1]
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_UART_MspInit+0xf0>)
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b00b      	add	sp, #44	; 0x2c
 80017e4:	bd90      	pop	{r4, r7, pc}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	40004400 	.word	0x40004400
 80017ec:	40021000 	.word	0x40021000
 80017f0:	00008004 	.word	0x00008004
 80017f4:	20000164 	.word	0x20000164
 80017f8:	40020008 	.word	0x40020008

080017fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <NMI_Handler+0x4>

08001802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <HardFault_Handler+0x4>

08001808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800180c:	46c0      	nop			; (mov r8, r8)
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001820:	f000 fbd2 	bl	8001fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001824:	46c0      	nop			; (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <DMA1_Channel1_IRQHandler+0x14>)
 8001832:	0018      	movs	r0, r3
 8001834:	f000 fe60 	bl	80024f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001838:	46c0      	nop			; (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	20000164 	.word	0x20000164

08001844 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <DMA1_Channel2_3_IRQHandler+0x14>)
 800184a:	0018      	movs	r0, r3
 800184c:	f000 fe54 	bl	80024f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001850:	46c0      	nop			; (mov r8, r8)
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	20000074 	.word	0x20000074

0800185c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001860:	46c0      	nop			; (mov r8, r8)
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>:
 *      Author: famil
 */

#include "ws2812.h"

WS2812::WS2812(TIM_HandleTypeDef* htim, uint32_t tim_channel_x, DMA_HandleTypeDef* hdma){
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	603b      	str	r3, [r7, #0]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4a0d      	ldr	r2, [pc, #52]	; (80018b0 <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef+0x48>)
 800187a:	189b      	adds	r3, r3, r2
 800187c:	2230      	movs	r2, #48	; 0x30
 800187e:	2100      	movs	r1, #0
 8001880:	0018      	movs	r0, r3
 8001882:	f003 ff0b 	bl	800569c <memset>
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	23d0      	movs	r3, #208	; 0xd0
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	2100      	movs	r1, #0
 800188e:	50d1      	str	r1, [r2, r3]
    HTIM = htim;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	605a      	str	r2, [r3, #4]
    TIM_CHANNEL_X = tim_channel_x;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	701a      	strb	r2, [r3, #0]
    HDMA =hdma;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	609a      	str	r2, [r3, #8]
}
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	0018      	movs	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b004      	add	sp, #16
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	0000030f 	.word	0x0000030f

080018b4 <_ZN6WS28124showEv>:


void WS2812::show(){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
    if(wr_buf_p != 0 || HDMA->State != HAL_DMA_STATE_READY){
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	23d0      	movs	r3, #208	; 0xd0
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	58d3      	ldr	r3, [r2, r3]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d106      	bne.n	80018d6 <_ZN6WS28124showEv+0x22>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2225      	movs	r2, #37	; 0x25
 80018ce:	5c9b      	ldrb	r3, [r3, r2]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d001      	beq.n	80018da <_ZN6WS28124showEv+0x26>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <_ZN6WS28124showEv+0x28>
 80018da:	2300      	movs	r3, #0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d023      	beq.n	8001928 <_ZN6WS28124showEv+0x74>
        HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	0019      	movs	r1, r3
 80018ea:	0010      	movs	r0, r2
 80018ec:	f002 f88e 	bl	8003a0c <HAL_TIM_PWM_Stop_DMA>
        wr_buf_p = 0;
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	23d0      	movs	r3, #208	; 0xd0
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	2100      	movs	r1, #0
 80018f8:	50d1      	str	r1, [r2, r3]
        for(uint8_t i=0; i <48; i++){wr_buf[i] = 0;}
 80018fa:	230f      	movs	r3, #15
 80018fc:	18fb      	adds	r3, r7, r3
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
 8001902:	200f      	movs	r0, #15
 8001904:	183b      	adds	r3, r7, r0
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b2f      	cmp	r3, #47	; 0x2f
 800190a:	d854      	bhi.n	80019b6 <_ZN6WS28124showEv+0x102>
 800190c:	183b      	adds	r3, r7, r0
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	492b      	ldr	r1, [pc, #172]	; (80019c0 <_ZN6WS28124showEv+0x10c>)
 8001914:	18d3      	adds	r3, r2, r3
 8001916:	185b      	adds	r3, r3, r1
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
 800191c:	183b      	adds	r3, r7, r0
 800191e:	781a      	ldrb	r2, [r3, #0]
 8001920:	183b      	adds	r3, r7, r0
 8001922:	3201      	adds	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]
 8001926:	e7ec      	b.n	8001902 <_ZN6WS28124showEv+0x4e>
        return;
    }
    for(uint_fast8_t i = 0; i < 8; i++){
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2b07      	cmp	r3, #7
 8001930:	d832      	bhi.n	8001998 <_ZN6WS28124showEv+0xe4>
        wr_buf[i   ] = 0;
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	4922      	ldr	r1, [pc, #136]	; (80019c0 <_ZN6WS28124showEv+0x10c>)
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	18d3      	adds	r3, r2, r3
 800193a:	185b      	adds	r3, r3, r1
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
        wr_buf[i+ 8] = 0;
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	3308      	adds	r3, #8
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	491e      	ldr	r1, [pc, #120]	; (80019c0 <_ZN6WS28124showEv+0x10c>)
 8001948:	18d3      	adds	r3, r2, r3
 800194a:	185b      	adds	r3, r3, r1
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
        wr_buf[i+16] = 0;
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	3310      	adds	r3, #16
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	491a      	ldr	r1, [pc, #104]	; (80019c0 <_ZN6WS28124showEv+0x10c>)
 8001958:	18d3      	adds	r3, r2, r3
 800195a:	185b      	adds	r3, r3, r1
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]

        wr_buf[i+24] = 0;
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	3318      	adds	r3, #24
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	4916      	ldr	r1, [pc, #88]	; (80019c0 <_ZN6WS28124showEv+0x10c>)
 8001968:	18d3      	adds	r3, r2, r3
 800196a:	185b      	adds	r3, r3, r1
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
        wr_buf[i+32] = 0;
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	3320      	adds	r3, #32
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	4912      	ldr	r1, [pc, #72]	; (80019c0 <_ZN6WS28124showEv+0x10c>)
 8001978:	18d3      	adds	r3, r2, r3
 800197a:	185b      	adds	r3, r3, r1
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
        wr_buf[i+40] = 0;
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	3328      	adds	r3, #40	; 0x28
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	490e      	ldr	r1, [pc, #56]	; (80019c0 <_ZN6WS28124showEv+0x10c>)
 8001988:	18d3      	adds	r3, r2, r3
 800198a:	185b      	adds	r3, r3, r1
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
    for(uint_fast8_t i = 0; i < 8; i++){
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	3301      	adds	r3, #1
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	e7c9      	b.n	800192c <_ZN6WS28124showEv+0x78>
    }
    HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, (uint32_t *)wr_buf, 48);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6858      	ldr	r0, [r3, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	0019      	movs	r1, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a06      	ldr	r2, [pc, #24]	; (80019c0 <_ZN6WS28124showEv+0x10c>)
 80019a6:	189a      	adds	r2, r3, r2
 80019a8:	2330      	movs	r3, #48	; 0x30
 80019aa:	f001 fe41 	bl	8003630 <HAL_TIM_PWM_Start_DMA>
    HAL_Delay(8);
 80019ae:	2008      	movs	r0, #8
 80019b0:	f000 fb26 	bl	8002000 <HAL_Delay>
 80019b4:	e000      	b.n	80019b8 <_ZN6WS28124showEv+0x104>
        return;
 80019b6:	46c0      	nop			; (mov r8, r8)
}
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b004      	add	sp, #16
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	0000030f 	.word	0x0000030f

080019c4 <_ZN6WS28125clearEv>:

void WS2812::clear(){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
    for(int i=0; i<NUM_PIXELS; i++){
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	429a      	cmp	r2, r3
 80019d8:	dc1e      	bgt.n	8001a18 <_ZN6WS28125clearEv+0x54>
        rgb_buf[i][0]=0;
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	0013      	movs	r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	189b      	adds	r3, r3, r2
 80019e4:	18cb      	adds	r3, r1, r3
 80019e6:	330c      	adds	r3, #12
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
        rgb_buf[i][1]=0;
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	0013      	movs	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	189b      	adds	r3, r3, r2
 80019f6:	18cb      	adds	r3, r1, r3
 80019f8:	330d      	adds	r3, #13
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
        rgb_buf[i][2]=0;
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	0013      	movs	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	189b      	adds	r3, r3, r2
 8001a08:	18cb      	adds	r3, r1, r3
 8001a0a:	330e      	adds	r3, #14
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<NUM_PIXELS; i++){
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	3301      	adds	r3, #1
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	e7db      	b.n	80019d0 <_ZN6WS28125clearEv+0xc>
    }
}
 8001a18:	46c0      	nop			; (mov r8, r8)
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b004      	add	sp, #16
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <_ZN6WS28127set_hsvEhiii>:

void WS2812::set_hsv(uint8_t id, int h, int s, int v){
 8001a20:	b5b0      	push	{r4, r5, r7, lr}
 8001a22:	b08e      	sub	sp, #56	; 0x38
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	230b      	movs	r3, #11
 8001a2e:	18fb      	adds	r3, r7, r3
 8001a30:	1c0a      	adds	r2, r1, #0
 8001a32:	701a      	strb	r2, [r3, #0]
	int r,g,b;
	if (s == 0) {
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d106      	bne.n	8001a48 <_ZN6WS28127set_hsvEhiii+0x28>
	    r = g = b = v;
 8001a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a46:	e077      	b.n	8001b38 <_ZN6WS28127set_hsvEhiii+0x118>
	}else{
	    h = h * 6; // sector 0 to 5
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	0013      	movs	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	189b      	adds	r3, r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	607b      	str	r3, [r7, #4]
	    int i = h / 256;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	da00      	bge.n	8001a5c <_ZN6WS28127set_hsvEhiii+0x3c>
 8001a5a:	33ff      	adds	r3, #255	; 0xff
 8001a5c:	121b      	asrs	r3, r3, #8
 8001a5e:	623b      	str	r3, [r7, #32]
	    int f = h % 256;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a3f      	ldr	r2, [pc, #252]	; (8001b60 <_ZN6WS28127set_hsvEhiii+0x140>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	d503      	bpl.n	8001a70 <_ZN6WS28127set_hsvEhiii+0x50>
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	4a3e      	ldr	r2, [pc, #248]	; (8001b64 <_ZN6WS28127set_hsvEhiii+0x144>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	3301      	adds	r3, #1
 8001a70:	61fb      	str	r3, [r7, #28]
	    int p = (v * (256 - s)) / 256;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2280      	movs	r2, #128	; 0x80
 8001a76:	0052      	lsls	r2, r2, #1
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a7c:	4353      	muls	r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	da00      	bge.n	8001a84 <_ZN6WS28127set_hsvEhiii+0x64>
 8001a82:	33ff      	adds	r3, #255	; 0xff
 8001a84:	121b      	asrs	r3, r3, #8
 8001a86:	61bb      	str	r3, [r7, #24]
	    int q = (v * (256 - (s * f) / 256)) / 256;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	4353      	muls	r3, r2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	da00      	bge.n	8001a94 <_ZN6WS28127set_hsvEhiii+0x74>
 8001a92:	33ff      	adds	r3, #255	; 0xff
 8001a94:	121b      	asrs	r3, r3, #8
 8001a96:	425b      	negs	r3, r3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	33ff      	adds	r3, #255	; 0xff
 8001a9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a9e:	4353      	muls	r3, r2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	da00      	bge.n	8001aa6 <_ZN6WS28127set_hsvEhiii+0x86>
 8001aa4:	33ff      	adds	r3, #255	; 0xff
 8001aa6:	121b      	asrs	r3, r3, #8
 8001aa8:	617b      	str	r3, [r7, #20]
	    int t = (v * (256 - (s * (256 - f)) / 256)) / 256;
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	2280      	movs	r2, #128	; 0x80
 8001aae:	0052      	lsls	r2, r2, #1
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	4353      	muls	r3, r2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	da00      	bge.n	8001abc <_ZN6WS28127set_hsvEhiii+0x9c>
 8001aba:	33ff      	adds	r3, #255	; 0xff
 8001abc:	121b      	asrs	r3, r3, #8
 8001abe:	425b      	negs	r3, r3
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	33ff      	adds	r3, #255	; 0xff
 8001ac4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ac6:	4353      	muls	r3, r2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	da00      	bge.n	8001ace <_ZN6WS28127set_hsvEhiii+0xae>
 8001acc:	33ff      	adds	r3, #255	; 0xff
 8001ace:	121b      	asrs	r3, r3, #8
 8001ad0:	613b      	str	r3, [r7, #16]

	    switch (i) {
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d828      	bhi.n	8001b2a <_ZN6WS28127set_hsvEhiii+0x10a>
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	009a      	lsls	r2, r3, #2
 8001adc:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <_ZN6WS28127set_hsvEhiii+0x148>)
 8001ade:	18d3      	adds	r3, r2, r3
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	469f      	mov	pc, r3
	        case 0: r = v; g = t; b = p; break;
 8001ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
 8001af0:	e022      	b.n	8001b38 <_ZN6WS28127set_hsvEhiii+0x118>
	        case 1: r = q; g = v; b = p; break;
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
 8001afe:	e01b      	b.n	8001b38 <_ZN6WS28127set_hsvEhiii+0x118>
	        case 2: r = p; g = v; b = t; break;
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0c:	e014      	b.n	8001b38 <_ZN6WS28127set_hsvEhiii+0x118>
	        case 3: r = p; g = q; b = v; break;
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1a:	e00d      	b.n	8001b38 <_ZN6WS28127set_hsvEhiii+0x118>
	        case 4: r = t; g = p; b = v; break;
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
 8001b28:	e006      	b.n	8001b38 <_ZN6WS28127set_hsvEhiii+0x118>
	        default: r = v; g = p;b = q; break;
 8001b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
 8001b36:	46c0      	nop			; (mov r8, r8)
	    }
	}
	set_rgb(id, r, g, b);
 8001b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3a:	b2dc      	uxtb	r4, r3
 8001b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3e:	b2dd      	uxtb	r5, r3
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	220b      	movs	r2, #11
 8001b46:	18ba      	adds	r2, r7, r2
 8001b48:	7811      	ldrb	r1, [r2, #0]
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	002b      	movs	r3, r5
 8001b50:	0022      	movs	r2, r4
 8001b52:	f000 f80b 	bl	8001b6c <_ZN6WS28127set_rgbEhhhh>

}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	b00c      	add	sp, #48	; 0x30
 8001b5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	800000ff 	.word	0x800000ff
 8001b64:	ffffff00 	.word	0xffffff00
 8001b68:	08005764 	.word	0x08005764

08001b6c <_ZN6WS28127set_rgbEhhhh>:

void WS2812::set_rgb(uint8_t id, uint8_t r, uint8_t g,uint8_t b){
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	000c      	movs	r4, r1
 8001b76:	0010      	movs	r0, r2
 8001b78:	0019      	movs	r1, r3
 8001b7a:	1cfb      	adds	r3, r7, #3
 8001b7c:	1c22      	adds	r2, r4, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
 8001b80:	1cbb      	adds	r3, r7, #2
 8001b82:	1c02      	adds	r2, r0, #0
 8001b84:	701a      	strb	r2, [r3, #0]
 8001b86:	1c7b      	adds	r3, r7, #1
 8001b88:	1c0a      	adds	r2, r1, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
    rgb_buf[id][0]=r;
 8001b8c:	1cfb      	adds	r3, r7, #3
 8001b8e:	781a      	ldrb	r2, [r3, #0]
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	0013      	movs	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	189b      	adds	r3, r3, r2
 8001b98:	18cb      	adds	r3, r1, r3
 8001b9a:	330c      	adds	r3, #12
 8001b9c:	1cba      	adds	r2, r7, #2
 8001b9e:	7812      	ldrb	r2, [r2, #0]
 8001ba0:	701a      	strb	r2, [r3, #0]
    rgb_buf[id][1]=g;
 8001ba2:	1cfb      	adds	r3, r7, #3
 8001ba4:	781a      	ldrb	r2, [r3, #0]
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	0013      	movs	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	189b      	adds	r3, r3, r2
 8001bae:	18cb      	adds	r3, r1, r3
 8001bb0:	330d      	adds	r3, #13
 8001bb2:	1c7a      	adds	r2, r7, #1
 8001bb4:	7812      	ldrb	r2, [r2, #0]
 8001bb6:	701a      	strb	r2, [r3, #0]
    rgb_buf[id][2]=b;
 8001bb8:	1cfb      	adds	r3, r7, #3
 8001bba:	781a      	ldrb	r2, [r3, #0]
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	0013      	movs	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	189b      	adds	r3, r3, r2
 8001bc4:	18cb      	adds	r3, r1, r3
 8001bc6:	330e      	adds	r3, #14
 8001bc8:	001a      	movs	r2, r3
 8001bca:	2318      	movs	r3, #24
 8001bcc:	18fb      	adds	r3, r7, r3
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	7013      	strb	r3, [r2, #0]
}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	b003      	add	sp, #12
 8001bd8:	bd90      	pop	{r4, r7, pc}
	...

08001bdc <_ZN6WS281217do_forwardRewriteEv>:

void WS2812::do_forwardRewrite(){
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
    if(wr_buf_p < NUM_PIXELS) {
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	23d0      	movs	r3, #208	; 0xd0
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	58d2      	ldr	r2, [r2, r3]
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d86e      	bhi.n	8001cd2 <_ZN6WS281217do_forwardRewriteEv+0xf6>
        for(uint_fast8_t i = 0; i < 8; i++) {
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2b07      	cmp	r3, #7
 8001bfc:	d85f      	bhi.n	8001cbe <_ZN6WS281217do_forwardRewriteEv+0xe2>
            wr_buf[i     ] = ((rgb_buf[wr_buf_p][1]>>(7-i))&1) ? HIGH : LOW;
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	23d0      	movs	r3, #208	; 0xd0
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	58d2      	ldr	r2, [r2, r3]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	0013      	movs	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	189b      	adds	r3, r3, r2
 8001c0e:	18cb      	adds	r3, r1, r3
 8001c10:	330d      	adds	r3, #13
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	0019      	movs	r1, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2207      	movs	r2, #7
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	4119      	asrs	r1, r3
 8001c1e:	000b      	movs	r3, r1
 8001c20:	2201      	movs	r2, #1
 8001c22:	4013      	ands	r3, r2
 8001c24:	d001      	beq.n	8001c2a <_ZN6WS281217do_forwardRewriteEv+0x4e>
 8001c26:	200a      	movs	r0, #10
 8001c28:	e000      	b.n	8001c2c <_ZN6WS281217do_forwardRewriteEv+0x50>
 8001c2a:	2005      	movs	r0, #5
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	493f      	ldr	r1, [pc, #252]	; (8001d2c <_ZN6WS281217do_forwardRewriteEv+0x150>)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	18d3      	adds	r3, r2, r3
 8001c34:	185b      	adds	r3, r3, r1
 8001c36:	1c02      	adds	r2, r0, #0
 8001c38:	701a      	strb	r2, [r3, #0]
            wr_buf[i +  8] = ((rgb_buf[wr_buf_p][0]>>(7-i))&1) ? HIGH : LOW;
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	23d0      	movs	r3, #208	; 0xd0
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	58d2      	ldr	r2, [r2, r3]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	0013      	movs	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	189b      	adds	r3, r3, r2
 8001c4a:	18cb      	adds	r3, r1, r3
 8001c4c:	330c      	adds	r3, #12
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	0019      	movs	r1, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2207      	movs	r2, #7
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	4119      	asrs	r1, r3
 8001c5a:	000b      	movs	r3, r1
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d001      	beq.n	8001c66 <_ZN6WS281217do_forwardRewriteEv+0x8a>
 8001c62:	200a      	movs	r0, #10
 8001c64:	e000      	b.n	8001c68 <_ZN6WS281217do_forwardRewriteEv+0x8c>
 8001c66:	2005      	movs	r0, #5
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	3308      	adds	r3, #8
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	492f      	ldr	r1, [pc, #188]	; (8001d2c <_ZN6WS281217do_forwardRewriteEv+0x150>)
 8001c70:	18d3      	adds	r3, r2, r3
 8001c72:	185b      	adds	r3, r3, r1
 8001c74:	1c02      	adds	r2, r0, #0
 8001c76:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 16] = ((rgb_buf[wr_buf_p][2]>>(7-i))&1) ? HIGH : LOW;
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	23d0      	movs	r3, #208	; 0xd0
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	58d2      	ldr	r2, [r2, r3]
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	0013      	movs	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	189b      	adds	r3, r3, r2
 8001c88:	18cb      	adds	r3, r1, r3
 8001c8a:	330e      	adds	r3, #14
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	0019      	movs	r1, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2207      	movs	r2, #7
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	4119      	asrs	r1, r3
 8001c98:	000b      	movs	r3, r1
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d001      	beq.n	8001ca4 <_ZN6WS281217do_forwardRewriteEv+0xc8>
 8001ca0:	200a      	movs	r0, #10
 8001ca2:	e000      	b.n	8001ca6 <_ZN6WS281217do_forwardRewriteEv+0xca>
 8001ca4:	2005      	movs	r0, #5
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	3310      	adds	r3, #16
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	491f      	ldr	r1, [pc, #124]	; (8001d2c <_ZN6WS281217do_forwardRewriteEv+0x150>)
 8001cae:	18d3      	adds	r3, r2, r3
 8001cb0:	185b      	adds	r3, r3, r1
 8001cb2:	1c02      	adds	r2, r0, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
        for(uint_fast8_t i = 0; i < 8; i++) {
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	e79c      	b.n	8001bf8 <_ZN6WS281217do_forwardRewriteEv+0x1c>
        }
        wr_buf_p++;
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	23d0      	movs	r3, #208	; 0xd0
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	58d3      	ldr	r3, [r2, r3]
 8001cc6:	1c59      	adds	r1, r3, #1
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	23d0      	movs	r3, #208	; 0xd0
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	50d1      	str	r1, [r2, r3]
    } else if (wr_buf_p < NUM_PIXELS + 2) {
        for(uint8_t i = 0; i < 24; i++){ wr_buf[i] = 0;}
        wr_buf_p++;
    }
}
 8001cd0:	e027      	b.n	8001d22 <_ZN6WS281217do_forwardRewriteEv+0x146>
    } else if (wr_buf_p < NUM_PIXELS + 2) {
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	23d0      	movs	r3, #208	; 0xd0
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	58d2      	ldr	r2, [r2, r3]
 8001cda:	2381      	movs	r3, #129	; 0x81
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d81f      	bhi.n	8001d22 <_ZN6WS281217do_forwardRewriteEv+0x146>
        for(uint8_t i = 0; i < 24; i++){ wr_buf[i] = 0;}
 8001ce2:	230b      	movs	r3, #11
 8001ce4:	18fb      	adds	r3, r7, r3
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
 8001cea:	200b      	movs	r0, #11
 8001cec:	183b      	adds	r3, r7, r0
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b17      	cmp	r3, #23
 8001cf2:	d80d      	bhi.n	8001d10 <_ZN6WS281217do_forwardRewriteEv+0x134>
 8001cf4:	183b      	adds	r3, r7, r0
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	490c      	ldr	r1, [pc, #48]	; (8001d2c <_ZN6WS281217do_forwardRewriteEv+0x150>)
 8001cfc:	18d3      	adds	r3, r2, r3
 8001cfe:	185b      	adds	r3, r3, r1
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	183b      	adds	r3, r7, r0
 8001d06:	781a      	ldrb	r2, [r3, #0]
 8001d08:	183b      	adds	r3, r7, r0
 8001d0a:	3201      	adds	r2, #1
 8001d0c:	701a      	strb	r2, [r3, #0]
 8001d0e:	e7ec      	b.n	8001cea <_ZN6WS281217do_forwardRewriteEv+0x10e>
        wr_buf_p++;
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	23d0      	movs	r3, #208	; 0xd0
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	58d3      	ldr	r3, [r2, r3]
 8001d18:	1c59      	adds	r1, r3, #1
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	23d0      	movs	r3, #208	; 0xd0
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	50d1      	str	r1, [r2, r3]
}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b004      	add	sp, #16
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	0000030f 	.word	0x0000030f

08001d30 <_ZN6WS281214do_backRewriteEv>:

void WS2812::do_backRewrite(){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
    if(wr_buf_p < NUM_PIXELS) {
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	23d0      	movs	r3, #208	; 0xd0
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	58d2      	ldr	r2, [r2, r3]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d86f      	bhi.n	8001e28 <_ZN6WS281214do_backRewriteEv+0xf8>
        for(uint_fast8_t i = 0; i < 8; ++i) {
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b07      	cmp	r3, #7
 8001d50:	d860      	bhi.n	8001e14 <_ZN6WS281214do_backRewriteEv+0xe4>
            wr_buf[i + 24] = ((rgb_buf[wr_buf_p][1]>>(7-i))&1) ? HIGH : LOW;
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	23d0      	movs	r3, #208	; 0xd0
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	58d2      	ldr	r2, [r2, r3]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	0013      	movs	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	189b      	adds	r3, r3, r2
 8001d62:	18cb      	adds	r3, r1, r3
 8001d64:	330d      	adds	r3, #13
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	0019      	movs	r1, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	4119      	asrs	r1, r3
 8001d72:	000b      	movs	r3, r1
 8001d74:	2201      	movs	r2, #1
 8001d76:	4013      	ands	r3, r2
 8001d78:	d001      	beq.n	8001d7e <_ZN6WS281214do_backRewriteEv+0x4e>
 8001d7a:	200a      	movs	r0, #10
 8001d7c:	e000      	b.n	8001d80 <_ZN6WS281214do_backRewriteEv+0x50>
 8001d7e:	2005      	movs	r0, #5
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3318      	adds	r3, #24
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	4945      	ldr	r1, [pc, #276]	; (8001e9c <_ZN6WS281214do_backRewriteEv+0x16c>)
 8001d88:	18d3      	adds	r3, r2, r3
 8001d8a:	185b      	adds	r3, r3, r1
 8001d8c:	1c02      	adds	r2, r0, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 32] = ((rgb_buf[wr_buf_p][0]>>(7-i))&1) ? HIGH : LOW;
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	23d0      	movs	r3, #208	; 0xd0
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	58d2      	ldr	r2, [r2, r3]
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	0013      	movs	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	189b      	adds	r3, r3, r2
 8001da0:	18cb      	adds	r3, r1, r3
 8001da2:	330c      	adds	r3, #12
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	0019      	movs	r1, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2207      	movs	r2, #7
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	4119      	asrs	r1, r3
 8001db0:	000b      	movs	r3, r1
 8001db2:	2201      	movs	r2, #1
 8001db4:	4013      	ands	r3, r2
 8001db6:	d001      	beq.n	8001dbc <_ZN6WS281214do_backRewriteEv+0x8c>
 8001db8:	200a      	movs	r0, #10
 8001dba:	e000      	b.n	8001dbe <_ZN6WS281214do_backRewriteEv+0x8e>
 8001dbc:	2005      	movs	r0, #5
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	3320      	adds	r3, #32
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	4935      	ldr	r1, [pc, #212]	; (8001e9c <_ZN6WS281214do_backRewriteEv+0x16c>)
 8001dc6:	18d3      	adds	r3, r2, r3
 8001dc8:	185b      	adds	r3, r3, r1
 8001dca:	1c02      	adds	r2, r0, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 40] = ((rgb_buf[wr_buf_p][2]>>(7-i))&1) ? HIGH : LOW;
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	23d0      	movs	r3, #208	; 0xd0
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	58d2      	ldr	r2, [r2, r3]
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	0013      	movs	r3, r2
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	189b      	adds	r3, r3, r2
 8001dde:	18cb      	adds	r3, r1, r3
 8001de0:	330e      	adds	r3, #14
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	0019      	movs	r1, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2207      	movs	r2, #7
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	4119      	asrs	r1, r3
 8001dee:	000b      	movs	r3, r1
 8001df0:	2201      	movs	r2, #1
 8001df2:	4013      	ands	r3, r2
 8001df4:	d001      	beq.n	8001dfa <_ZN6WS281214do_backRewriteEv+0xca>
 8001df6:	200a      	movs	r0, #10
 8001df8:	e000      	b.n	8001dfc <_ZN6WS281214do_backRewriteEv+0xcc>
 8001dfa:	2005      	movs	r0, #5
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	3328      	adds	r3, #40	; 0x28
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	4926      	ldr	r1, [pc, #152]	; (8001e9c <_ZN6WS281214do_backRewriteEv+0x16c>)
 8001e04:	18d3      	adds	r3, r2, r3
 8001e06:	185b      	adds	r3, r3, r1
 8001e08:	1c02      	adds	r2, r0, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
        for(uint_fast8_t i = 0; i < 8; ++i) {
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	e79b      	b.n	8001d4c <_ZN6WS281214do_backRewriteEv+0x1c>
        }
        wr_buf_p++;
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	23d0      	movs	r3, #208	; 0xd0
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	58d3      	ldr	r3, [r2, r3]
 8001e1c:	1c59      	adds	r1, r3, #1
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	23d0      	movs	r3, #208	; 0xd0
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	50d1      	str	r1, [r2, r3]
        wr_buf_p++;
    } else {
        wr_buf_p = 0;
        HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
    }
}
 8001e26:	e035      	b.n	8001e94 <_ZN6WS281214do_backRewriteEv+0x164>
    } else if (wr_buf_p < NUM_PIXELS + 2) {
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	23d0      	movs	r3, #208	; 0xd0
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	58d2      	ldr	r2, [r2, r3]
 8001e30:	2381      	movs	r3, #129	; 0x81
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d820      	bhi.n	8001e7a <_ZN6WS281214do_backRewriteEv+0x14a>
        for(uint8_t i = 24; i < 48; i++){ wr_buf[i] = 0;};
 8001e38:	230b      	movs	r3, #11
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	2218      	movs	r2, #24
 8001e3e:	701a      	strb	r2, [r3, #0]
 8001e40:	200b      	movs	r0, #11
 8001e42:	183b      	adds	r3, r7, r0
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b2f      	cmp	r3, #47	; 0x2f
 8001e48:	d80d      	bhi.n	8001e66 <_ZN6WS281214do_backRewriteEv+0x136>
 8001e4a:	183b      	adds	r3, r7, r0
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	4912      	ldr	r1, [pc, #72]	; (8001e9c <_ZN6WS281214do_backRewriteEv+0x16c>)
 8001e52:	18d3      	adds	r3, r2, r3
 8001e54:	185b      	adds	r3, r3, r1
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
 8001e5a:	183b      	adds	r3, r7, r0
 8001e5c:	781a      	ldrb	r2, [r3, #0]
 8001e5e:	183b      	adds	r3, r7, r0
 8001e60:	3201      	adds	r2, #1
 8001e62:	701a      	strb	r2, [r3, #0]
 8001e64:	e7ec      	b.n	8001e40 <_ZN6WS281214do_backRewriteEv+0x110>
        wr_buf_p++;
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	23d0      	movs	r3, #208	; 0xd0
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	58d3      	ldr	r3, [r2, r3]
 8001e6e:	1c59      	adds	r1, r3, #1
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	23d0      	movs	r3, #208	; 0xd0
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	50d1      	str	r1, [r2, r3]
}
 8001e78:	e00c      	b.n	8001e94 <_ZN6WS281214do_backRewriteEv+0x164>
        wr_buf_p = 0;
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	23d0      	movs	r3, #208	; 0xd0
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	2100      	movs	r1, #0
 8001e82:	50d1      	str	r1, [r2, r3]
        HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	0010      	movs	r0, r2
 8001e90:	f001 fdbc 	bl	8003a0c <HAL_TIM_PWM_Stop_DMA>
}
 8001e94:	46c0      	nop			; (mov r8, r8)
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b004      	add	sp, #16
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	0000030f 	.word	0x0000030f

08001ea0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ea0:	480d      	ldr	r0, [pc, #52]	; (8001ed8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ea2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ea4:	f7ff fcda 	bl	800185c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ea8:	480c      	ldr	r0, [pc, #48]	; (8001edc <LoopForever+0x6>)
  ldr r1, =_edata
 8001eaa:	490d      	ldr	r1, [pc, #52]	; (8001ee0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001eac:	4a0d      	ldr	r2, [pc, #52]	; (8001ee4 <LoopForever+0xe>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb0:	e002      	b.n	8001eb8 <LoopCopyDataInit>

08001eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb6:	3304      	adds	r3, #4

08001eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ebc:	d3f9      	bcc.n	8001eb2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ec0:	4c0a      	ldr	r4, [pc, #40]	; (8001eec <LoopForever+0x16>)
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec4:	e001      	b.n	8001eca <LoopFillZerobss>

08001ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec8:	3204      	adds	r2, #4

08001eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ecc:	d3fb      	bcc.n	8001ec6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ece:	f003 fbc1 	bl	8005654 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001ed2:	f7fe ffbb 	bl	8000e4c <main>

08001ed6 <LoopForever>:

LoopForever:
  b LoopForever
 8001ed6:	e7fe      	b.n	8001ed6 <LoopForever>
  ldr   r0, =_estack
 8001ed8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ee4:	080057f0 	.word	0x080057f0
  ldr r2, =_sbss
 8001ee8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001eec:	200005dc 	.word	0x200005dc

08001ef0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ef0:	e7fe      	b.n	8001ef0 <ADC1_IRQHandler>
	...

08001ef4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001efa:	1dfb      	adds	r3, r7, #7
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_Init+0x3c>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_Init+0x3c>)
 8001f06:	2180      	movs	r1, #128	; 0x80
 8001f08:	0049      	lsls	r1, r1, #1
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f0e:	2003      	movs	r0, #3
 8001f10:	f000 f810 	bl	8001f34 <HAL_InitTick>
 8001f14:	1e03      	subs	r3, r0, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001f18:	1dfb      	adds	r3, r7, #7
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	701a      	strb	r2, [r3, #0]
 8001f1e:	e001      	b.n	8001f24 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001f20:	f7ff fb44 	bl	80015ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f24:	1dfb      	adds	r3, r7, #7
 8001f26:	781b      	ldrb	r3, [r3, #0]
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b002      	add	sp, #8
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40022000 	.word	0x40022000

08001f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f3c:	230f      	movs	r3, #15
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <HAL_InitTick+0x88>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d02b      	beq.n	8001fa4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001f4c:	4b1c      	ldr	r3, [pc, #112]	; (8001fc0 <HAL_InitTick+0x8c>)
 8001f4e:	681c      	ldr	r4, [r3, #0]
 8001f50:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <HAL_InitTick+0x88>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	0019      	movs	r1, r3
 8001f56:	23fa      	movs	r3, #250	; 0xfa
 8001f58:	0098      	lsls	r0, r3, #2
 8001f5a:	f7fe f8d1 	bl	8000100 <__udivsi3>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	0019      	movs	r1, r3
 8001f62:	0020      	movs	r0, r4
 8001f64:	f7fe f8cc 	bl	8000100 <__udivsi3>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f000 f93d 	bl	80021ea <HAL_SYSTICK_Config>
 8001f70:	1e03      	subs	r3, r0, #0
 8001f72:	d112      	bne.n	8001f9a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d80a      	bhi.n	8001f90 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	425b      	negs	r3, r3
 8001f80:	2200      	movs	r2, #0
 8001f82:	0018      	movs	r0, r3
 8001f84:	f000 f90c 	bl	80021a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f88:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <HAL_InitTick+0x90>)
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	e00d      	b.n	8001fac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001f90:	230f      	movs	r3, #15
 8001f92:	18fb      	adds	r3, r7, r3
 8001f94:	2201      	movs	r2, #1
 8001f96:	701a      	strb	r2, [r3, #0]
 8001f98:	e008      	b.n	8001fac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f9a:	230f      	movs	r3, #15
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	701a      	strb	r2, [r3, #0]
 8001fa2:	e003      	b.n	8001fac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fa4:	230f      	movs	r3, #15
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001fac:	230f      	movs	r3, #15
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	781b      	ldrb	r3, [r3, #0]
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b005      	add	sp, #20
 8001fb8:	bd90      	pop	{r4, r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	20000008 	.word	0x20000008
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	20000004 	.word	0x20000004

08001fc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_IncTick+0x1c>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	001a      	movs	r2, r3
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_IncTick+0x20>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	18d2      	adds	r2, r2, r3
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <HAL_IncTick+0x20>)
 8001fda:	601a      	str	r2, [r3, #0]
}
 8001fdc:	46c0      	nop			; (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	20000008 	.word	0x20000008
 8001fe8:	200005d8 	.word	0x200005d8

08001fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff0:	4b02      	ldr	r3, [pc, #8]	; (8001ffc <HAL_GetTick+0x10>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	200005d8 	.word	0x200005d8

08002000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff fff0 	bl	8001fec <HAL_GetTick>
 800200c:	0003      	movs	r3, r0
 800200e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	3301      	adds	r3, #1
 8002018:	d005      	beq.n	8002026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_Delay+0x44>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	001a      	movs	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	189b      	adds	r3, r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	f7ff ffe0 	bl	8001fec <HAL_GetTick>
 800202c:	0002      	movs	r2, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	429a      	cmp	r2, r3
 8002036:	d8f7      	bhi.n	8002028 <HAL_Delay+0x28>
  {
  }
}
 8002038:	46c0      	nop			; (mov r8, r8)
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	46bd      	mov	sp, r7
 800203e:	b004      	add	sp, #16
 8002040:	bd80      	pop	{r7, pc}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	20000008 	.word	0x20000008

08002048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	0002      	movs	r2, r0
 8002050:	1dfb      	adds	r3, r7, #7
 8002052:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002054:	1dfb      	adds	r3, r7, #7
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b7f      	cmp	r3, #127	; 0x7f
 800205a:	d809      	bhi.n	8002070 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205c:	1dfb      	adds	r3, r7, #7
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	001a      	movs	r2, r3
 8002062:	231f      	movs	r3, #31
 8002064:	401a      	ands	r2, r3
 8002066:	4b04      	ldr	r3, [pc, #16]	; (8002078 <__NVIC_EnableIRQ+0x30>)
 8002068:	2101      	movs	r1, #1
 800206a:	4091      	lsls	r1, r2
 800206c:	000a      	movs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002070:	46c0      	nop			; (mov r8, r8)
 8002072:	46bd      	mov	sp, r7
 8002074:	b002      	add	sp, #8
 8002076:	bd80      	pop	{r7, pc}
 8002078:	e000e100 	.word	0xe000e100

0800207c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800207c:	b590      	push	{r4, r7, lr}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	0002      	movs	r2, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	1dfb      	adds	r3, r7, #7
 8002088:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800208a:	1dfb      	adds	r3, r7, #7
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b7f      	cmp	r3, #127	; 0x7f
 8002090:	d828      	bhi.n	80020e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002092:	4a2f      	ldr	r2, [pc, #188]	; (8002150 <__NVIC_SetPriority+0xd4>)
 8002094:	1dfb      	adds	r3, r7, #7
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	b25b      	sxtb	r3, r3
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	33c0      	adds	r3, #192	; 0xc0
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	589b      	ldr	r3, [r3, r2]
 80020a2:	1dfa      	adds	r2, r7, #7
 80020a4:	7812      	ldrb	r2, [r2, #0]
 80020a6:	0011      	movs	r1, r2
 80020a8:	2203      	movs	r2, #3
 80020aa:	400a      	ands	r2, r1
 80020ac:	00d2      	lsls	r2, r2, #3
 80020ae:	21ff      	movs	r1, #255	; 0xff
 80020b0:	4091      	lsls	r1, r2
 80020b2:	000a      	movs	r2, r1
 80020b4:	43d2      	mvns	r2, r2
 80020b6:	401a      	ands	r2, r3
 80020b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	019b      	lsls	r3, r3, #6
 80020be:	22ff      	movs	r2, #255	; 0xff
 80020c0:	401a      	ands	r2, r3
 80020c2:	1dfb      	adds	r3, r7, #7
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	0018      	movs	r0, r3
 80020c8:	2303      	movs	r3, #3
 80020ca:	4003      	ands	r3, r0
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020d0:	481f      	ldr	r0, [pc, #124]	; (8002150 <__NVIC_SetPriority+0xd4>)
 80020d2:	1dfb      	adds	r3, r7, #7
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	b25b      	sxtb	r3, r3
 80020d8:	089b      	lsrs	r3, r3, #2
 80020da:	430a      	orrs	r2, r1
 80020dc:	33c0      	adds	r3, #192	; 0xc0
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80020e2:	e031      	b.n	8002148 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020e4:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <__NVIC_SetPriority+0xd8>)
 80020e6:	1dfb      	adds	r3, r7, #7
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	0019      	movs	r1, r3
 80020ec:	230f      	movs	r3, #15
 80020ee:	400b      	ands	r3, r1
 80020f0:	3b08      	subs	r3, #8
 80020f2:	089b      	lsrs	r3, r3, #2
 80020f4:	3306      	adds	r3, #6
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	18d3      	adds	r3, r2, r3
 80020fa:	3304      	adds	r3, #4
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	1dfa      	adds	r2, r7, #7
 8002100:	7812      	ldrb	r2, [r2, #0]
 8002102:	0011      	movs	r1, r2
 8002104:	2203      	movs	r2, #3
 8002106:	400a      	ands	r2, r1
 8002108:	00d2      	lsls	r2, r2, #3
 800210a:	21ff      	movs	r1, #255	; 0xff
 800210c:	4091      	lsls	r1, r2
 800210e:	000a      	movs	r2, r1
 8002110:	43d2      	mvns	r2, r2
 8002112:	401a      	ands	r2, r3
 8002114:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	019b      	lsls	r3, r3, #6
 800211a:	22ff      	movs	r2, #255	; 0xff
 800211c:	401a      	ands	r2, r3
 800211e:	1dfb      	adds	r3, r7, #7
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	0018      	movs	r0, r3
 8002124:	2303      	movs	r3, #3
 8002126:	4003      	ands	r3, r0
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800212c:	4809      	ldr	r0, [pc, #36]	; (8002154 <__NVIC_SetPriority+0xd8>)
 800212e:	1dfb      	adds	r3, r7, #7
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	001c      	movs	r4, r3
 8002134:	230f      	movs	r3, #15
 8002136:	4023      	ands	r3, r4
 8002138:	3b08      	subs	r3, #8
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	430a      	orrs	r2, r1
 800213e:	3306      	adds	r3, #6
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	18c3      	adds	r3, r0, r3
 8002144:	3304      	adds	r3, #4
 8002146:	601a      	str	r2, [r3, #0]
}
 8002148:	46c0      	nop			; (mov r8, r8)
 800214a:	46bd      	mov	sp, r7
 800214c:	b003      	add	sp, #12
 800214e:	bd90      	pop	{r4, r7, pc}
 8002150:	e000e100 	.word	0xe000e100
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	1e5a      	subs	r2, r3, #1
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	045b      	lsls	r3, r3, #17
 8002168:	429a      	cmp	r2, r3
 800216a:	d301      	bcc.n	8002170 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800216c:	2301      	movs	r3, #1
 800216e:	e010      	b.n	8002192 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002170:	4b0a      	ldr	r3, [pc, #40]	; (800219c <SysTick_Config+0x44>)
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	3a01      	subs	r2, #1
 8002176:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002178:	2301      	movs	r3, #1
 800217a:	425b      	negs	r3, r3
 800217c:	2103      	movs	r1, #3
 800217e:	0018      	movs	r0, r3
 8002180:	f7ff ff7c 	bl	800207c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <SysTick_Config+0x44>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <SysTick_Config+0x44>)
 800218c:	2207      	movs	r2, #7
 800218e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002190:	2300      	movs	r3, #0
}
 8002192:	0018      	movs	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	b002      	add	sp, #8
 8002198:	bd80      	pop	{r7, pc}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	e000e010 	.word	0xe000e010

080021a0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	210f      	movs	r1, #15
 80021ac:	187b      	adds	r3, r7, r1
 80021ae:	1c02      	adds	r2, r0, #0
 80021b0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	187b      	adds	r3, r7, r1
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	b25b      	sxtb	r3, r3
 80021ba:	0011      	movs	r1, r2
 80021bc:	0018      	movs	r0, r3
 80021be:	f7ff ff5d 	bl	800207c <__NVIC_SetPriority>
}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b004      	add	sp, #16
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	0002      	movs	r2, r0
 80021d2:	1dfb      	adds	r3, r7, #7
 80021d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d6:	1dfb      	adds	r3, r7, #7
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	b25b      	sxtb	r3, r3
 80021dc:	0018      	movs	r0, r3
 80021de:	f7ff ff33 	bl	8002048 <__NVIC_EnableIRQ>
}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b002      	add	sp, #8
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7ff ffaf 	bl	8002158 <SysTick_Config>
 80021fa:	0003      	movs	r3, r0
}
 80021fc:	0018      	movs	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	b002      	add	sp, #8
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e077      	b.n	8002306 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a3d      	ldr	r2, [pc, #244]	; (8002310 <HAL_DMA_Init+0x10c>)
 800221c:	4694      	mov	ip, r2
 800221e:	4463      	add	r3, ip
 8002220:	2114      	movs	r1, #20
 8002222:	0018      	movs	r0, r3
 8002224:	f7fd ff6c 	bl	8000100 <__udivsi3>
 8002228:	0003      	movs	r3, r0
 800222a:	009a      	lsls	r2, r3, #2
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2225      	movs	r2, #37	; 0x25
 8002234:	2102      	movs	r1, #2
 8002236:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4934      	ldr	r1, [pc, #208]	; (8002314 <HAL_DMA_Init+0x110>)
 8002244:	400a      	ands	r2, r1
 8002246:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6819      	ldr	r1, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	0018      	movs	r0, r3
 8002282:	f000 fa2b 	bl	80026dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	01db      	lsls	r3, r3, #7
 800228e:	429a      	cmp	r2, r3
 8002290:	d102      	bne.n	8002298 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a0:	213f      	movs	r1, #63	; 0x3f
 80022a2:	400a      	ands	r2, r1
 80022a4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80022ae:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d011      	beq.n	80022dc <HAL_DMA_Init+0xd8>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d80d      	bhi.n	80022dc <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 fa36 	bl	8002734 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	e008      	b.n	80022ee <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2225      	movs	r2, #37	; 0x25
 80022f8:	2101      	movs	r1, #1
 80022fa:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2224      	movs	r2, #36	; 0x24
 8002300:	2100      	movs	r1, #0
 8002302:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	0018      	movs	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	b002      	add	sp, #8
 800230c:	bd80      	pop	{r7, pc}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	bffdfff8 	.word	0xbffdfff8
 8002314:	ffff800f 	.word	0xffff800f

08002318 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
 8002324:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002326:	2317      	movs	r3, #23
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2224      	movs	r2, #36	; 0x24
 8002332:	5c9b      	ldrb	r3, [r3, r2]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_DMA_Start_IT+0x24>
 8002338:	2302      	movs	r3, #2
 800233a:	e06f      	b.n	800241c <HAL_DMA_Start_IT+0x104>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2224      	movs	r2, #36	; 0x24
 8002340:	2101      	movs	r1, #1
 8002342:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2225      	movs	r2, #37	; 0x25
 8002348:	5c9b      	ldrb	r3, [r3, r2]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b01      	cmp	r3, #1
 800234e:	d157      	bne.n	8002400 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2225      	movs	r2, #37	; 0x25
 8002354:	2102      	movs	r1, #2
 8002356:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2101      	movs	r1, #1
 800236a:	438a      	bics	r2, r1
 800236c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	68b9      	ldr	r1, [r7, #8]
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 f971 	bl	800265c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	2b00      	cmp	r3, #0
 8002380:	d008      	beq.n	8002394 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	210e      	movs	r1, #14
 800238e:	430a      	orrs	r2, r1
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	e00f      	b.n	80023b4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2104      	movs	r1, #4
 80023a0:	438a      	bics	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	210a      	movs	r1, #10
 80023b0:	430a      	orrs	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	025b      	lsls	r3, r3, #9
 80023be:	4013      	ands	r3, r2
 80023c0:	d008      	beq.n	80023d4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023cc:	2180      	movs	r1, #128	; 0x80
 80023ce:	0049      	lsls	r1, r1, #1
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e6:	2180      	movs	r1, #128	; 0x80
 80023e8:	0049      	lsls	r1, r1, #1
 80023ea:	430a      	orrs	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2101      	movs	r1, #1
 80023fa:	430a      	orrs	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	e00a      	b.n	8002416 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2280      	movs	r2, #128	; 0x80
 8002404:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2224      	movs	r2, #36	; 0x24
 800240a:	2100      	movs	r1, #0
 800240c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800240e:	2317      	movs	r3, #23
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	2201      	movs	r2, #1
 8002414:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002416:	2317      	movs	r3, #23
 8002418:	18fb      	adds	r3, r7, r3
 800241a:	781b      	ldrb	r3, [r3, #0]
}
 800241c:	0018      	movs	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	b006      	add	sp, #24
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800242c:	210f      	movs	r1, #15
 800242e:	187b      	adds	r3, r7, r1
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2225      	movs	r2, #37	; 0x25
 8002438:	5c9b      	ldrb	r3, [r3, r2]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d006      	beq.n	800244e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2204      	movs	r2, #4
 8002444:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002446:	187b      	adds	r3, r7, r1
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
 800244c:	e049      	b.n	80024e2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	210e      	movs	r1, #14
 800245a:	438a      	bics	r2, r1
 800245c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2101      	movs	r1, #1
 800246a:	438a      	bics	r2, r1
 800246c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002478:	491d      	ldr	r1, [pc, #116]	; (80024f0 <HAL_DMA_Abort_IT+0xcc>)
 800247a:	400a      	ands	r2, r1
 800247c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800247e:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <HAL_DMA_Abort_IT+0xd0>)
 8002480:	6859      	ldr	r1, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	221c      	movs	r2, #28
 8002488:	4013      	ands	r3, r2
 800248a:	2201      	movs	r2, #1
 800248c:	409a      	lsls	r2, r3
 800248e:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_DMA_Abort_IT+0xd0>)
 8002490:	430a      	orrs	r2, r1
 8002492:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800249c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00c      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b0:	490f      	ldr	r1, [pc, #60]	; (80024f0 <HAL_DMA_Abort_IT+0xcc>)
 80024b2:	400a      	ands	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80024be:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2225      	movs	r2, #37	; 0x25
 80024c4:	2101      	movs	r1, #1
 80024c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2224      	movs	r2, #36	; 0x24
 80024cc:	2100      	movs	r1, #0
 80024ce:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d004      	beq.n	80024e2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	0010      	movs	r0, r2
 80024e0:	4798      	blx	r3
    }
  }
  return status;
 80024e2:	230f      	movs	r3, #15
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	781b      	ldrb	r3, [r3, #0]
}
 80024e8:	0018      	movs	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b004      	add	sp, #16
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	fffffeff 	.word	0xfffffeff
 80024f4:	40020000 	.word	0x40020000

080024f8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002500:	4b55      	ldr	r3, [pc, #340]	; (8002658 <HAL_DMA_IRQHandler+0x160>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	221c      	movs	r2, #28
 8002514:	4013      	ands	r3, r2
 8002516:	2204      	movs	r2, #4
 8002518:	409a      	lsls	r2, r3
 800251a:	0013      	movs	r3, r2
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4013      	ands	r3, r2
 8002520:	d027      	beq.n	8002572 <HAL_DMA_IRQHandler+0x7a>
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2204      	movs	r2, #4
 8002526:	4013      	ands	r3, r2
 8002528:	d023      	beq.n	8002572 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2220      	movs	r2, #32
 8002532:	4013      	ands	r3, r2
 8002534:	d107      	bne.n	8002546 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2104      	movs	r1, #4
 8002542:	438a      	bics	r2, r1
 8002544:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002546:	4b44      	ldr	r3, [pc, #272]	; (8002658 <HAL_DMA_IRQHandler+0x160>)
 8002548:	6859      	ldr	r1, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	221c      	movs	r2, #28
 8002550:	4013      	ands	r3, r2
 8002552:	2204      	movs	r2, #4
 8002554:	409a      	lsls	r2, r3
 8002556:	4b40      	ldr	r3, [pc, #256]	; (8002658 <HAL_DMA_IRQHandler+0x160>)
 8002558:	430a      	orrs	r2, r1
 800255a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	2b00      	cmp	r3, #0
 8002562:	d100      	bne.n	8002566 <HAL_DMA_IRQHandler+0x6e>
 8002564:	e073      	b.n	800264e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	0010      	movs	r0, r2
 800256e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002570:	e06d      	b.n	800264e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	221c      	movs	r2, #28
 8002578:	4013      	ands	r3, r2
 800257a:	2202      	movs	r2, #2
 800257c:	409a      	lsls	r2, r3
 800257e:	0013      	movs	r3, r2
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4013      	ands	r3, r2
 8002584:	d02e      	beq.n	80025e4 <HAL_DMA_IRQHandler+0xec>
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2202      	movs	r2, #2
 800258a:	4013      	ands	r3, r2
 800258c:	d02a      	beq.n	80025e4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2220      	movs	r2, #32
 8002596:	4013      	ands	r3, r2
 8002598:	d10b      	bne.n	80025b2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	210a      	movs	r1, #10
 80025a6:	438a      	bics	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2225      	movs	r2, #37	; 0x25
 80025ae:	2101      	movs	r1, #1
 80025b0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80025b2:	4b29      	ldr	r3, [pc, #164]	; (8002658 <HAL_DMA_IRQHandler+0x160>)
 80025b4:	6859      	ldr	r1, [r3, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	221c      	movs	r2, #28
 80025bc:	4013      	ands	r3, r2
 80025be:	2202      	movs	r2, #2
 80025c0:	409a      	lsls	r2, r3
 80025c2:	4b25      	ldr	r3, [pc, #148]	; (8002658 <HAL_DMA_IRQHandler+0x160>)
 80025c4:	430a      	orrs	r2, r1
 80025c6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2224      	movs	r2, #36	; 0x24
 80025cc:	2100      	movs	r1, #0
 80025ce:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d03a      	beq.n	800264e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	0010      	movs	r0, r2
 80025e0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80025e2:	e034      	b.n	800264e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	221c      	movs	r2, #28
 80025ea:	4013      	ands	r3, r2
 80025ec:	2208      	movs	r2, #8
 80025ee:	409a      	lsls	r2, r3
 80025f0:	0013      	movs	r3, r2
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	4013      	ands	r3, r2
 80025f6:	d02b      	beq.n	8002650 <HAL_DMA_IRQHandler+0x158>
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2208      	movs	r2, #8
 80025fc:	4013      	ands	r3, r2
 80025fe:	d027      	beq.n	8002650 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	210e      	movs	r1, #14
 800260c:	438a      	bics	r2, r1
 800260e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <HAL_DMA_IRQHandler+0x160>)
 8002612:	6859      	ldr	r1, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	221c      	movs	r2, #28
 800261a:	4013      	ands	r3, r2
 800261c:	2201      	movs	r2, #1
 800261e:	409a      	lsls	r2, r3
 8002620:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <HAL_DMA_IRQHandler+0x160>)
 8002622:	430a      	orrs	r2, r1
 8002624:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2225      	movs	r2, #37	; 0x25
 8002630:	2101      	movs	r1, #1
 8002632:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2224      	movs	r2, #36	; 0x24
 8002638:	2100      	movs	r1, #0
 800263a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	0010      	movs	r0, r2
 800264c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	46c0      	nop			; (mov r8, r8)
}
 8002652:	46bd      	mov	sp, r7
 8002654:	b004      	add	sp, #16
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40020000 	.word	0x40020000

0800265c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002672:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002678:	2b00      	cmp	r3, #0
 800267a:	d004      	beq.n	8002686 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002684:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002686:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <DMA_SetConfig+0x7c>)
 8002688:	6859      	ldr	r1, [r3, #4]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	221c      	movs	r2, #28
 8002690:	4013      	ands	r3, r2
 8002692:	2201      	movs	r2, #1
 8002694:	409a      	lsls	r2, r3
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <DMA_SetConfig+0x7c>)
 8002698:	430a      	orrs	r2, r1
 800269a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b10      	cmp	r3, #16
 80026aa:	d108      	bne.n	80026be <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026bc:	e007      	b.n	80026ce <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	60da      	str	r2, [r3, #12]
}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b004      	add	sp, #16
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	40020000 	.word	0x40020000

080026dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	089b      	lsrs	r3, r3, #2
 80026ea:	4a10      	ldr	r2, [pc, #64]	; (800272c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80026ec:	4694      	mov	ip, r2
 80026ee:	4463      	add	r3, ip
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	001a      	movs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	001a      	movs	r2, r3
 80026fe:	23ff      	movs	r3, #255	; 0xff
 8002700:	4013      	ands	r3, r2
 8002702:	3b08      	subs	r3, #8
 8002704:	2114      	movs	r1, #20
 8002706:	0018      	movs	r0, r3
 8002708:	f7fd fcfa 	bl	8000100 <__udivsi3>
 800270c:	0003      	movs	r3, r0
 800270e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a07      	ldr	r2, [pc, #28]	; (8002730 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002714:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	221f      	movs	r2, #31
 800271a:	4013      	ands	r3, r2
 800271c:	2201      	movs	r2, #1
 800271e:	409a      	lsls	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002724:	46c0      	nop			; (mov r8, r8)
 8002726:	46bd      	mov	sp, r7
 8002728:	b004      	add	sp, #16
 800272a:	bd80      	pop	{r7, pc}
 800272c:	10008200 	.word	0x10008200
 8002730:	40020880 	.word	0x40020880

08002734 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	223f      	movs	r2, #63	; 0x3f
 8002742:	4013      	ands	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800274a:	4694      	mov	ip, r2
 800274c:	4463      	add	r3, ip
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	001a      	movs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a07      	ldr	r2, [pc, #28]	; (8002778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800275a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	3b01      	subs	r3, #1
 8002760:	2203      	movs	r2, #3
 8002762:	4013      	ands	r3, r2
 8002764:	2201      	movs	r2, #1
 8002766:	409a      	lsls	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800276c:	46c0      	nop			; (mov r8, r8)
 800276e:	46bd      	mov	sp, r7
 8002770:	b004      	add	sp, #16
 8002772:	bd80      	pop	{r7, pc}
 8002774:	1000823f 	.word	0x1000823f
 8002778:	40020940 	.word	0x40020940

0800277c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800278a:	e147      	b.n	8002a1c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2101      	movs	r1, #1
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	4091      	lsls	r1, r2
 8002796:	000a      	movs	r2, r1
 8002798:	4013      	ands	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d100      	bne.n	80027a4 <HAL_GPIO_Init+0x28>
 80027a2:	e138      	b.n	8002a16 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2203      	movs	r2, #3
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d005      	beq.n	80027bc <HAL_GPIO_Init+0x40>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2203      	movs	r2, #3
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d130      	bne.n	800281e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	2203      	movs	r2, #3
 80027c8:	409a      	lsls	r2, r3
 80027ca:	0013      	movs	r3, r2
 80027cc:	43da      	mvns	r2, r3
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	409a      	lsls	r2, r3
 80027de:	0013      	movs	r3, r2
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027f2:	2201      	movs	r2, #1
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	409a      	lsls	r2, r3
 80027f8:	0013      	movs	r3, r2
 80027fa:	43da      	mvns	r2, r3
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4013      	ands	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	091b      	lsrs	r3, r3, #4
 8002808:	2201      	movs	r2, #1
 800280a:	401a      	ands	r2, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	409a      	lsls	r2, r3
 8002810:	0013      	movs	r3, r2
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2203      	movs	r2, #3
 8002824:	4013      	ands	r3, r2
 8002826:	2b03      	cmp	r3, #3
 8002828:	d017      	beq.n	800285a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	2203      	movs	r2, #3
 8002836:	409a      	lsls	r2, r3
 8002838:	0013      	movs	r3, r2
 800283a:	43da      	mvns	r2, r3
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4013      	ands	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	409a      	lsls	r2, r3
 800284c:	0013      	movs	r3, r2
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2203      	movs	r2, #3
 8002860:	4013      	ands	r3, r2
 8002862:	2b02      	cmp	r3, #2
 8002864:	d123      	bne.n	80028ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	08da      	lsrs	r2, r3, #3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3208      	adds	r2, #8
 800286e:	0092      	lsls	r2, r2, #2
 8002870:	58d3      	ldr	r3, [r2, r3]
 8002872:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2207      	movs	r2, #7
 8002878:	4013      	ands	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	220f      	movs	r2, #15
 800287e:	409a      	lsls	r2, r3
 8002880:	0013      	movs	r3, r2
 8002882:	43da      	mvns	r2, r3
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	691a      	ldr	r2, [r3, #16]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2107      	movs	r1, #7
 8002892:	400b      	ands	r3, r1
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	409a      	lsls	r2, r3
 8002898:	0013      	movs	r3, r2
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	08da      	lsrs	r2, r3, #3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3208      	adds	r2, #8
 80028a8:	0092      	lsls	r2, r2, #2
 80028aa:	6939      	ldr	r1, [r7, #16]
 80028ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	2203      	movs	r2, #3
 80028ba:	409a      	lsls	r2, r3
 80028bc:	0013      	movs	r3, r2
 80028be:	43da      	mvns	r2, r3
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2203      	movs	r2, #3
 80028cc:	401a      	ands	r2, r3
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	409a      	lsls	r2, r3
 80028d4:	0013      	movs	r3, r2
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	23c0      	movs	r3, #192	; 0xc0
 80028e8:	029b      	lsls	r3, r3, #10
 80028ea:	4013      	ands	r3, r2
 80028ec:	d100      	bne.n	80028f0 <HAL_GPIO_Init+0x174>
 80028ee:	e092      	b.n	8002a16 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80028f0:	4a50      	ldr	r2, [pc, #320]	; (8002a34 <HAL_GPIO_Init+0x2b8>)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	089b      	lsrs	r3, r3, #2
 80028f6:	3318      	adds	r3, #24
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	589b      	ldr	r3, [r3, r2]
 80028fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2203      	movs	r2, #3
 8002902:	4013      	ands	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	220f      	movs	r2, #15
 8002908:	409a      	lsls	r2, r3
 800290a:	0013      	movs	r3, r2
 800290c:	43da      	mvns	r2, r3
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4013      	ands	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	23a0      	movs	r3, #160	; 0xa0
 8002918:	05db      	lsls	r3, r3, #23
 800291a:	429a      	cmp	r2, r3
 800291c:	d013      	beq.n	8002946 <HAL_GPIO_Init+0x1ca>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a45      	ldr	r2, [pc, #276]	; (8002a38 <HAL_GPIO_Init+0x2bc>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00d      	beq.n	8002942 <HAL_GPIO_Init+0x1c6>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a44      	ldr	r2, [pc, #272]	; (8002a3c <HAL_GPIO_Init+0x2c0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d007      	beq.n	800293e <HAL_GPIO_Init+0x1c2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a43      	ldr	r2, [pc, #268]	; (8002a40 <HAL_GPIO_Init+0x2c4>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d101      	bne.n	800293a <HAL_GPIO_Init+0x1be>
 8002936:	2303      	movs	r3, #3
 8002938:	e006      	b.n	8002948 <HAL_GPIO_Init+0x1cc>
 800293a:	2305      	movs	r3, #5
 800293c:	e004      	b.n	8002948 <HAL_GPIO_Init+0x1cc>
 800293e:	2302      	movs	r3, #2
 8002940:	e002      	b.n	8002948 <HAL_GPIO_Init+0x1cc>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <HAL_GPIO_Init+0x1cc>
 8002946:	2300      	movs	r3, #0
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	2103      	movs	r1, #3
 800294c:	400a      	ands	r2, r1
 800294e:	00d2      	lsls	r2, r2, #3
 8002950:	4093      	lsls	r3, r2
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002958:	4936      	ldr	r1, [pc, #216]	; (8002a34 <HAL_GPIO_Init+0x2b8>)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	089b      	lsrs	r3, r3, #2
 800295e:	3318      	adds	r3, #24
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002966:	4b33      	ldr	r3, [pc, #204]	; (8002a34 <HAL_GPIO_Init+0x2b8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	43da      	mvns	r2, r3
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	035b      	lsls	r3, r3, #13
 800297e:	4013      	ands	r3, r2
 8002980:	d003      	beq.n	800298a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800298a:	4b2a      	ldr	r3, [pc, #168]	; (8002a34 <HAL_GPIO_Init+0x2b8>)
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002990:	4b28      	ldr	r3, [pc, #160]	; (8002a34 <HAL_GPIO_Init+0x2b8>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	43da      	mvns	r2, r3
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	039b      	lsls	r3, r3, #14
 80029a8:	4013      	ands	r3, r2
 80029aa:	d003      	beq.n	80029b4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029b4:	4b1f      	ldr	r3, [pc, #124]	; (8002a34 <HAL_GPIO_Init+0x2b8>)
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80029ba:	4a1e      	ldr	r2, [pc, #120]	; (8002a34 <HAL_GPIO_Init+0x2b8>)
 80029bc:	2384      	movs	r3, #132	; 0x84
 80029be:	58d3      	ldr	r3, [r2, r3]
 80029c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	43da      	mvns	r2, r3
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4013      	ands	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	2380      	movs	r3, #128	; 0x80
 80029d2:	029b      	lsls	r3, r3, #10
 80029d4:	4013      	ands	r3, r2
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029e0:	4914      	ldr	r1, [pc, #80]	; (8002a34 <HAL_GPIO_Init+0x2b8>)
 80029e2:	2284      	movs	r2, #132	; 0x84
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80029e8:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <HAL_GPIO_Init+0x2b8>)
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	58d3      	ldr	r3, [r2, r3]
 80029ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	43da      	mvns	r2, r3
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	2380      	movs	r3, #128	; 0x80
 8002a00:	025b      	lsls	r3, r3, #9
 8002a02:	4013      	ands	r3, r2
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a0e:	4909      	ldr	r1, [pc, #36]	; (8002a34 <HAL_GPIO_Init+0x2b8>)
 8002a10:	2280      	movs	r2, #128	; 0x80
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	40da      	lsrs	r2, r3
 8002a24:	1e13      	subs	r3, r2, #0
 8002a26:	d000      	beq.n	8002a2a <HAL_GPIO_Init+0x2ae>
 8002a28:	e6b0      	b.n	800278c <HAL_GPIO_Init+0x10>
  }
}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	46c0      	nop			; (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b006      	add	sp, #24
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40021800 	.word	0x40021800
 8002a38:	50000400 	.word	0x50000400
 8002a3c:	50000800 	.word	0x50000800
 8002a40:	50000c00 	.word	0x50000c00

08002a44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	000a      	movs	r2, r1
 8002a4e:	1cbb      	adds	r3, r7, #2
 8002a50:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	1cba      	adds	r2, r7, #2
 8002a58:	8812      	ldrh	r2, [r2, #0]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d004      	beq.n	8002a68 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002a5e:	230f      	movs	r3, #15
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	2201      	movs	r2, #1
 8002a64:	701a      	strb	r2, [r3, #0]
 8002a66:	e003      	b.n	8002a70 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a68:	230f      	movs	r3, #15
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002a70:	230f      	movs	r3, #15
 8002a72:	18fb      	adds	r3, r7, r3
 8002a74:	781b      	ldrb	r3, [r3, #0]
}
 8002a76:	0018      	movs	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b004      	add	sp, #16
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	0008      	movs	r0, r1
 8002a88:	0011      	movs	r1, r2
 8002a8a:	1cbb      	adds	r3, r7, #2
 8002a8c:	1c02      	adds	r2, r0, #0
 8002a8e:	801a      	strh	r2, [r3, #0]
 8002a90:	1c7b      	adds	r3, r7, #1
 8002a92:	1c0a      	adds	r2, r1, #0
 8002a94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a96:	1c7b      	adds	r3, r7, #1
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d004      	beq.n	8002aa8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a9e:	1cbb      	adds	r3, r7, #2
 8002aa0:	881a      	ldrh	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002aa6:	e003      	b.n	8002ab0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aa8:	1cbb      	adds	r3, r7, #2
 8002aaa:	881a      	ldrh	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ab0:	46c0      	nop			; (mov r8, r8)
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b002      	add	sp, #8
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002ac0:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a19      	ldr	r2, [pc, #100]	; (8002b2c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	0019      	movs	r1, r3
 8002aca:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d11f      	bne.n	8002b1c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002adc:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	0013      	movs	r3, r2
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	189b      	adds	r3, r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4912      	ldr	r1, [pc, #72]	; (8002b34 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002aea:	0018      	movs	r0, r3
 8002aec:	f7fd fb08 	bl	8000100 <__udivsi3>
 8002af0:	0003      	movs	r3, r0
 8002af2:	3301      	adds	r3, #1
 8002af4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002af6:	e008      	b.n	8002b0a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	e001      	b.n	8002b0a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e009      	b.n	8002b1e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	2380      	movs	r3, #128	; 0x80
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	401a      	ands	r2, r3
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d0ed      	beq.n	8002af8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	0018      	movs	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b004      	add	sp, #16
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	40007000 	.word	0x40007000
 8002b2c:	fffff9ff 	.word	0xfffff9ff
 8002b30:	20000000 	.word	0x20000000
 8002b34:	000f4240 	.word	0x000f4240

08002b38 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002b3c:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <LL_RCC_GetAPB1Prescaler+0x14>)
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	23e0      	movs	r3, #224	; 0xe0
 8002b42:	01db      	lsls	r3, r3, #7
 8002b44:	4013      	ands	r3, r2
}
 8002b46:	0018      	movs	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40021000 	.word	0x40021000

08002b50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e2f3      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2201      	movs	r2, #1
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d100      	bne.n	8002b6e <HAL_RCC_OscConfig+0x1e>
 8002b6c:	e07c      	b.n	8002c68 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b6e:	4bc3      	ldr	r3, [pc, #780]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2238      	movs	r2, #56	; 0x38
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b78:	4bc0      	ldr	r3, [pc, #768]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	4013      	ands	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2b10      	cmp	r3, #16
 8002b86:	d102      	bne.n	8002b8e <HAL_RCC_OscConfig+0x3e>
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d002      	beq.n	8002b94 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d10b      	bne.n	8002bac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b94:	4bb9      	ldr	r3, [pc, #740]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	029b      	lsls	r3, r3, #10
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d062      	beq.n	8002c66 <HAL_RCC_OscConfig+0x116>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d15e      	bne.n	8002c66 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e2ce      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	2380      	movs	r3, #128	; 0x80
 8002bb2:	025b      	lsls	r3, r3, #9
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d107      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x78>
 8002bb8:	4bb0      	ldr	r3, [pc, #704]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4baf      	ldr	r3, [pc, #700]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002bbe:	2180      	movs	r1, #128	; 0x80
 8002bc0:	0249      	lsls	r1, r1, #9
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	e020      	b.n	8002c0a <HAL_RCC_OscConfig+0xba>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	23a0      	movs	r3, #160	; 0xa0
 8002bce:	02db      	lsls	r3, r3, #11
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d10e      	bne.n	8002bf2 <HAL_RCC_OscConfig+0xa2>
 8002bd4:	4ba9      	ldr	r3, [pc, #676]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4ba8      	ldr	r3, [pc, #672]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002bda:	2180      	movs	r1, #128	; 0x80
 8002bdc:	02c9      	lsls	r1, r1, #11
 8002bde:	430a      	orrs	r2, r1
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	4ba6      	ldr	r3, [pc, #664]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	4ba5      	ldr	r3, [pc, #660]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002be8:	2180      	movs	r1, #128	; 0x80
 8002bea:	0249      	lsls	r1, r1, #9
 8002bec:	430a      	orrs	r2, r1
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	e00b      	b.n	8002c0a <HAL_RCC_OscConfig+0xba>
 8002bf2:	4ba2      	ldr	r3, [pc, #648]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	4ba1      	ldr	r3, [pc, #644]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002bf8:	49a1      	ldr	r1, [pc, #644]	; (8002e80 <HAL_RCC_OscConfig+0x330>)
 8002bfa:	400a      	ands	r2, r1
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	4b9f      	ldr	r3, [pc, #636]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	4b9e      	ldr	r3, [pc, #632]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002c04:	499f      	ldr	r1, [pc, #636]	; (8002e84 <HAL_RCC_OscConfig+0x334>)
 8002c06:	400a      	ands	r2, r1
 8002c08:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d014      	beq.n	8002c3c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c12:	f7ff f9eb 	bl	8001fec <HAL_GetTick>
 8002c16:	0003      	movs	r3, r0
 8002c18:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7ff f9e6 	bl	8001fec <HAL_GetTick>
 8002c20:	0002      	movs	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e28d      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c2e:	4b93      	ldr	r3, [pc, #588]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	029b      	lsls	r3, r3, #10
 8002c36:	4013      	ands	r3, r2
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0xcc>
 8002c3a:	e015      	b.n	8002c68 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7ff f9d6 	bl	8001fec <HAL_GetTick>
 8002c40:	0003      	movs	r3, r0
 8002c42:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c46:	f7ff f9d1 	bl	8001fec <HAL_GetTick>
 8002c4a:	0002      	movs	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b64      	cmp	r3, #100	; 0x64
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e278      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c58:	4b88      	ldr	r3, [pc, #544]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	029b      	lsls	r3, r3, #10
 8002c60:	4013      	ands	r3, r2
 8002c62:	d1f0      	bne.n	8002c46 <HAL_RCC_OscConfig+0xf6>
 8002c64:	e000      	b.n	8002c68 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c66:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d100      	bne.n	8002c74 <HAL_RCC_OscConfig+0x124>
 8002c72:	e099      	b.n	8002da8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c74:	4b81      	ldr	r3, [pc, #516]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2238      	movs	r2, #56	; 0x38
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c7e:	4b7f      	ldr	r3, [pc, #508]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2203      	movs	r2, #3
 8002c84:	4013      	ands	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	2b10      	cmp	r3, #16
 8002c8c:	d102      	bne.n	8002c94 <HAL_RCC_OscConfig+0x144>
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d002      	beq.n	8002c9a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d135      	bne.n	8002d06 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c9a:	4b78      	ldr	r3, [pc, #480]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	2380      	movs	r3, #128	; 0x80
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d005      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x162>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e24b      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb2:	4b72      	ldr	r3, [pc, #456]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4a74      	ldr	r2, [pc, #464]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	0019      	movs	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	021a      	lsls	r2, r3, #8
 8002cc2:	4b6e      	ldr	r3, [pc, #440]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d112      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002cce:	4b6b      	ldr	r3, [pc, #428]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a6e      	ldr	r2, [pc, #440]	; (8002e8c <HAL_RCC_OscConfig+0x33c>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	4b67      	ldr	r3, [pc, #412]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002ce2:	4b66      	ldr	r3, [pc, #408]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	0adb      	lsrs	r3, r3, #11
 8002ce8:	2207      	movs	r2, #7
 8002cea:	4013      	ands	r3, r2
 8002cec:	4a68      	ldr	r2, [pc, #416]	; (8002e90 <HAL_RCC_OscConfig+0x340>)
 8002cee:	40da      	lsrs	r2, r3
 8002cf0:	4b68      	ldr	r3, [pc, #416]	; (8002e94 <HAL_RCC_OscConfig+0x344>)
 8002cf2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cf4:	4b68      	ldr	r3, [pc, #416]	; (8002e98 <HAL_RCC_OscConfig+0x348>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f7ff f91b 	bl	8001f34 <HAL_InitTick>
 8002cfe:	1e03      	subs	r3, r0, #0
 8002d00:	d051      	beq.n	8002da6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e221      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d030      	beq.n	8002d70 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d0e:	4b5b      	ldr	r3, [pc, #364]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a5e      	ldr	r2, [pc, #376]	; (8002e8c <HAL_RCC_OscConfig+0x33c>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	0019      	movs	r1, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	4b57      	ldr	r3, [pc, #348]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002d22:	4b56      	ldr	r3, [pc, #344]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4b55      	ldr	r3, [pc, #340]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002d28:	2180      	movs	r1, #128	; 0x80
 8002d2a:	0049      	lsls	r1, r1, #1
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7ff f95c 	bl	8001fec <HAL_GetTick>
 8002d34:	0003      	movs	r3, r0
 8002d36:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3a:	f7ff f957 	bl	8001fec <HAL_GetTick>
 8002d3e:	0002      	movs	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e1fe      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d4c:	4b4b      	ldr	r3, [pc, #300]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	2380      	movs	r3, #128	; 0x80
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4013      	ands	r3, r2
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d58:	4b48      	ldr	r3, [pc, #288]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4a4a      	ldr	r2, [pc, #296]	; (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	0019      	movs	r1, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	021a      	lsls	r2, r3, #8
 8002d68:	4b44      	ldr	r3, [pc, #272]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	e01b      	b.n	8002da8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002d70:	4b42      	ldr	r3, [pc, #264]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4b41      	ldr	r3, [pc, #260]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002d76:	4949      	ldr	r1, [pc, #292]	; (8002e9c <HAL_RCC_OscConfig+0x34c>)
 8002d78:	400a      	ands	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7ff f936 	bl	8001fec <HAL_GetTick>
 8002d80:	0003      	movs	r3, r0
 8002d82:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d86:	f7ff f931 	bl	8001fec <HAL_GetTick>
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e1d8      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d98:	4b38      	ldr	r3, [pc, #224]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	2380      	movs	r3, #128	; 0x80
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4013      	ands	r3, r2
 8002da2:	d1f0      	bne.n	8002d86 <HAL_RCC_OscConfig+0x236>
 8002da4:	e000      	b.n	8002da8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002da6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2208      	movs	r2, #8
 8002dae:	4013      	ands	r3, r2
 8002db0:	d047      	beq.n	8002e42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002db2:	4b32      	ldr	r3, [pc, #200]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2238      	movs	r2, #56	; 0x38
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b18      	cmp	r3, #24
 8002dbc:	d10a      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002dbe:	4b2f      	ldr	r3, [pc, #188]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d03c      	beq.n	8002e42 <HAL_RCC_OscConfig+0x2f2>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d138      	bne.n	8002e42 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e1ba      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d019      	beq.n	8002e10 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002ddc:	4b27      	ldr	r3, [pc, #156]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002dde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002de0:	4b26      	ldr	r3, [pc, #152]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002de2:	2101      	movs	r1, #1
 8002de4:	430a      	orrs	r2, r1
 8002de6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de8:	f7ff f900 	bl	8001fec <HAL_GetTick>
 8002dec:	0003      	movs	r3, r0
 8002dee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df2:	f7ff f8fb 	bl	8001fec <HAL_GetTick>
 8002df6:	0002      	movs	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e1a2      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e04:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e08:	2202      	movs	r2, #2
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d0f1      	beq.n	8002df2 <HAL_RCC_OscConfig+0x2a2>
 8002e0e:	e018      	b.n	8002e42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002e10:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002e12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e14:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002e16:	2101      	movs	r1, #1
 8002e18:	438a      	bics	r2, r1
 8002e1a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7ff f8e6 	bl	8001fec <HAL_GetTick>
 8002e20:	0003      	movs	r3, r0
 8002e22:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e26:	f7ff f8e1 	bl	8001fec <HAL_GetTick>
 8002e2a:	0002      	movs	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e188      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e38:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d1f1      	bne.n	8002e26 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2204      	movs	r2, #4
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d100      	bne.n	8002e4e <HAL_RCC_OscConfig+0x2fe>
 8002e4c:	e0c6      	b.n	8002fdc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4e:	231f      	movs	r3, #31
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002e56:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2238      	movs	r2, #56	; 0x38
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	d11e      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002e62:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e66:	2202      	movs	r2, #2
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d100      	bne.n	8002e6e <HAL_RCC_OscConfig+0x31e>
 8002e6c:	e0b6      	b.n	8002fdc <HAL_RCC_OscConfig+0x48c>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d000      	beq.n	8002e78 <HAL_RCC_OscConfig+0x328>
 8002e76:	e0b1      	b.n	8002fdc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e166      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	fffeffff 	.word	0xfffeffff
 8002e84:	fffbffff 	.word	0xfffbffff
 8002e88:	ffff80ff 	.word	0xffff80ff
 8002e8c:	ffffc7ff 	.word	0xffffc7ff
 8002e90:	00f42400 	.word	0x00f42400
 8002e94:	20000000 	.word	0x20000000
 8002e98:	20000004 	.word	0x20000004
 8002e9c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ea0:	4bac      	ldr	r3, [pc, #688]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8002ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	055b      	lsls	r3, r3, #21
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x360>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <HAL_RCC_OscConfig+0x362>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d011      	beq.n	8002eda <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002eb6:	4ba7      	ldr	r3, [pc, #668]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8002eb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eba:	4ba6      	ldr	r3, [pc, #664]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8002ebc:	2180      	movs	r1, #128	; 0x80
 8002ebe:	0549      	lsls	r1, r1, #21
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ec4:	4ba3      	ldr	r3, [pc, #652]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8002ec6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	055b      	lsls	r3, r3, #21
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002ed2:	231f      	movs	r3, #31
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eda:	4b9f      	ldr	r3, [pc, #636]	; (8003158 <HAL_RCC_OscConfig+0x608>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	2380      	movs	r3, #128	; 0x80
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d11a      	bne.n	8002f1c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ee6:	4b9c      	ldr	r3, [pc, #624]	; (8003158 <HAL_RCC_OscConfig+0x608>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4b9b      	ldr	r3, [pc, #620]	; (8003158 <HAL_RCC_OscConfig+0x608>)
 8002eec:	2180      	movs	r1, #128	; 0x80
 8002eee:	0049      	lsls	r1, r1, #1
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002ef4:	f7ff f87a 	bl	8001fec <HAL_GetTick>
 8002ef8:	0003      	movs	r3, r0
 8002efa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efe:	f7ff f875 	bl	8001fec <HAL_GetTick>
 8002f02:	0002      	movs	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e11c      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f10:	4b91      	ldr	r3, [pc, #580]	; (8003158 <HAL_RCC_OscConfig+0x608>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d106      	bne.n	8002f32 <HAL_RCC_OscConfig+0x3e2>
 8002f24:	4b8b      	ldr	r3, [pc, #556]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8002f26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f28:	4b8a      	ldr	r3, [pc, #552]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f30:	e01c      	b.n	8002f6c <HAL_RCC_OscConfig+0x41c>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b05      	cmp	r3, #5
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x404>
 8002f3a:	4b86      	ldr	r3, [pc, #536]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8002f3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f3e:	4b85      	ldr	r3, [pc, #532]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8002f40:	2104      	movs	r1, #4
 8002f42:	430a      	orrs	r2, r1
 8002f44:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f46:	4b83      	ldr	r3, [pc, #524]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8002f48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f4a:	4b82      	ldr	r3, [pc, #520]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f52:	e00b      	b.n	8002f6c <HAL_RCC_OscConfig+0x41c>
 8002f54:	4b7f      	ldr	r3, [pc, #508]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8002f56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f58:	4b7e      	ldr	r3, [pc, #504]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	438a      	bics	r2, r1
 8002f5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f60:	4b7c      	ldr	r3, [pc, #496]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8002f62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f64:	4b7b      	ldr	r3, [pc, #492]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8002f66:	2104      	movs	r1, #4
 8002f68:	438a      	bics	r2, r1
 8002f6a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d014      	beq.n	8002f9e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7ff f83a 	bl	8001fec <HAL_GetTick>
 8002f78:	0003      	movs	r3, r0
 8002f7a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f7c:	e009      	b.n	8002f92 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7e:	f7ff f835 	bl	8001fec <HAL_GetTick>
 8002f82:	0002      	movs	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	4a74      	ldr	r2, [pc, #464]	; (800315c <HAL_RCC_OscConfig+0x60c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e0db      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f92:	4b70      	ldr	r3, [pc, #448]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8002f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f96:	2202      	movs	r2, #2
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d0f0      	beq.n	8002f7e <HAL_RCC_OscConfig+0x42e>
 8002f9c:	e013      	b.n	8002fc6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9e:	f7ff f825 	bl	8001fec <HAL_GetTick>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fa6:	e009      	b.n	8002fbc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa8:	f7ff f820 	bl	8001fec <HAL_GetTick>
 8002fac:	0002      	movs	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	4a6a      	ldr	r2, [pc, #424]	; (800315c <HAL_RCC_OscConfig+0x60c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e0c6      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fbc:	4b65      	ldr	r3, [pc, #404]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8002fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002fc6:	231f      	movs	r3, #31
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d105      	bne.n	8002fdc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002fd0:	4b60      	ldr	r3, [pc, #384]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8002fd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fd4:	4b5f      	ldr	r3, [pc, #380]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8002fd6:	4962      	ldr	r1, [pc, #392]	; (8003160 <HAL_RCC_OscConfig+0x610>)
 8002fd8:	400a      	ands	r2, r1
 8002fda:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d100      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x496>
 8002fe4:	e0b0      	b.n	8003148 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fe6:	4b5b      	ldr	r3, [pc, #364]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2238      	movs	r2, #56	; 0x38
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b10      	cmp	r3, #16
 8002ff0:	d100      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x4a4>
 8002ff2:	e078      	b.n	80030e6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d153      	bne.n	80030a4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffc:	4b55      	ldr	r3, [pc, #340]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4b54      	ldr	r3, [pc, #336]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8003002:	4958      	ldr	r1, [pc, #352]	; (8003164 <HAL_RCC_OscConfig+0x614>)
 8003004:	400a      	ands	r2, r1
 8003006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe fff0 	bl	8001fec <HAL_GetTick>
 800300c:	0003      	movs	r3, r0
 800300e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003012:	f7fe ffeb 	bl	8001fec <HAL_GetTick>
 8003016:	0002      	movs	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e092      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003024:	4b4b      	ldr	r3, [pc, #300]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	2380      	movs	r3, #128	; 0x80
 800302a:	049b      	lsls	r3, r3, #18
 800302c:	4013      	ands	r3, r2
 800302e:	d1f0      	bne.n	8003012 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003030:	4b48      	ldr	r3, [pc, #288]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4a4c      	ldr	r2, [pc, #304]	; (8003168 <HAL_RCC_OscConfig+0x618>)
 8003036:	4013      	ands	r3, r2
 8003038:	0019      	movs	r1, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1a      	ldr	r2, [r3, #32]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	431a      	orrs	r2, r3
 8003058:	4b3e      	ldr	r3, [pc, #248]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 800305a:	430a      	orrs	r2, r1
 800305c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800305e:	4b3d      	ldr	r3, [pc, #244]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4b3c      	ldr	r3, [pc, #240]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8003064:	2180      	movs	r1, #128	; 0x80
 8003066:	0449      	lsls	r1, r1, #17
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800306c:	4b39      	ldr	r3, [pc, #228]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	4b38      	ldr	r3, [pc, #224]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8003072:	2180      	movs	r1, #128	; 0x80
 8003074:	0549      	lsls	r1, r1, #21
 8003076:	430a      	orrs	r2, r1
 8003078:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7fe ffb7 	bl	8001fec <HAL_GetTick>
 800307e:	0003      	movs	r3, r0
 8003080:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003084:	f7fe ffb2 	bl	8001fec <HAL_GetTick>
 8003088:	0002      	movs	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e059      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003096:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	049b      	lsls	r3, r3, #18
 800309e:	4013      	ands	r3, r2
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0x534>
 80030a2:	e051      	b.n	8003148 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a4:	4b2b      	ldr	r3, [pc, #172]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 80030aa:	492e      	ldr	r1, [pc, #184]	; (8003164 <HAL_RCC_OscConfig+0x614>)
 80030ac:	400a      	ands	r2, r1
 80030ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fe ff9c 	bl	8001fec <HAL_GetTick>
 80030b4:	0003      	movs	r3, r0
 80030b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fe ff97 	bl	8001fec <HAL_GetTick>
 80030be:	0002      	movs	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e03e      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030cc:	4b21      	ldr	r3, [pc, #132]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	049b      	lsls	r3, r3, #18
 80030d4:	4013      	ands	r3, r2
 80030d6:	d1f0      	bne.n	80030ba <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80030d8:	4b1e      	ldr	r3, [pc, #120]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 80030de:	4923      	ldr	r1, [pc, #140]	; (800316c <HAL_RCC_OscConfig+0x61c>)
 80030e0:	400a      	ands	r2, r1
 80030e2:	60da      	str	r2, [r3, #12]
 80030e4:	e030      	b.n	8003148 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e02b      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80030f2:	4b18      	ldr	r3, [pc, #96]	; (8003154 <HAL_RCC_OscConfig+0x604>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2203      	movs	r2, #3
 80030fc:	401a      	ands	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	429a      	cmp	r2, r3
 8003104:	d11e      	bne.n	8003144 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2270      	movs	r2, #112	; 0x70
 800310a:	401a      	ands	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003110:	429a      	cmp	r2, r3
 8003112:	d117      	bne.n	8003144 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	23fe      	movs	r3, #254	; 0xfe
 8003118:	01db      	lsls	r3, r3, #7
 800311a:	401a      	ands	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d10e      	bne.n	8003144 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	23f8      	movs	r3, #248	; 0xf8
 800312a:	039b      	lsls	r3, r3, #14
 800312c:	401a      	ands	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d106      	bne.n	8003144 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	0f5b      	lsrs	r3, r3, #29
 800313a:	075a      	lsls	r2, r3, #29
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	0018      	movs	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	b008      	add	sp, #32
 8003150:	bd80      	pop	{r7, pc}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	40021000 	.word	0x40021000
 8003158:	40007000 	.word	0x40007000
 800315c:	00001388 	.word	0x00001388
 8003160:	efffffff 	.word	0xefffffff
 8003164:	feffffff 	.word	0xfeffffff
 8003168:	1fc1808c 	.word	0x1fc1808c
 800316c:	effefffc 	.word	0xeffefffc

08003170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0e9      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003184:	4b76      	ldr	r3, [pc, #472]	; (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2207      	movs	r2, #7
 800318a:	4013      	ands	r3, r2
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d91e      	bls.n	80031d0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003192:	4b73      	ldr	r3, [pc, #460]	; (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2207      	movs	r2, #7
 8003198:	4393      	bics	r3, r2
 800319a:	0019      	movs	r1, r3
 800319c:	4b70      	ldr	r3, [pc, #448]	; (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031a4:	f7fe ff22 	bl	8001fec <HAL_GetTick>
 80031a8:	0003      	movs	r3, r0
 80031aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031ac:	e009      	b.n	80031c2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ae:	f7fe ff1d 	bl	8001fec <HAL_GetTick>
 80031b2:	0002      	movs	r2, r0
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	4a6a      	ldr	r2, [pc, #424]	; (8003364 <HAL_RCC_ClockConfig+0x1f4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e0ca      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031c2:	4b67      	ldr	r3, [pc, #412]	; (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2207      	movs	r2, #7
 80031c8:	4013      	ands	r3, r2
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d1ee      	bne.n	80031ae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2202      	movs	r2, #2
 80031d6:	4013      	ands	r3, r2
 80031d8:	d015      	beq.n	8003206 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2204      	movs	r2, #4
 80031e0:	4013      	ands	r3, r2
 80031e2:	d006      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80031e4:	4b60      	ldr	r3, [pc, #384]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	4b5f      	ldr	r3, [pc, #380]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 80031ea:	21e0      	movs	r1, #224	; 0xe0
 80031ec:	01c9      	lsls	r1, r1, #7
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f2:	4b5d      	ldr	r3, [pc, #372]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	4a5d      	ldr	r2, [pc, #372]	; (800336c <HAL_RCC_ClockConfig+0x1fc>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	0019      	movs	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	4b59      	ldr	r3, [pc, #356]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 8003202:	430a      	orrs	r2, r1
 8003204:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2201      	movs	r2, #1
 800320c:	4013      	ands	r3, r2
 800320e:	d057      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d107      	bne.n	8003228 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003218:	4b53      	ldr	r3, [pc, #332]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	029b      	lsls	r3, r3, #10
 8003220:	4013      	ands	r3, r2
 8003222:	d12b      	bne.n	800327c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e097      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d107      	bne.n	8003240 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003230:	4b4d      	ldr	r3, [pc, #308]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	049b      	lsls	r3, r3, #18
 8003238:	4013      	ands	r3, r2
 800323a:	d11f      	bne.n	800327c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e08b      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d107      	bne.n	8003258 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003248:	4b47      	ldr	r3, [pc, #284]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4013      	ands	r3, r2
 8003252:	d113      	bne.n	800327c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e07f      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b03      	cmp	r3, #3
 800325e:	d106      	bne.n	800326e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003260:	4b41      	ldr	r3, [pc, #260]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 8003262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003264:	2202      	movs	r2, #2
 8003266:	4013      	ands	r3, r2
 8003268:	d108      	bne.n	800327c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e074      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800326e:	4b3e      	ldr	r3, [pc, #248]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 8003270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003272:	2202      	movs	r2, #2
 8003274:	4013      	ands	r3, r2
 8003276:	d101      	bne.n	800327c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e06d      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800327c:	4b3a      	ldr	r3, [pc, #232]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2207      	movs	r2, #7
 8003282:	4393      	bics	r3, r2
 8003284:	0019      	movs	r1, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	4b37      	ldr	r3, [pc, #220]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 800328c:	430a      	orrs	r2, r1
 800328e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003290:	f7fe feac 	bl	8001fec <HAL_GetTick>
 8003294:	0003      	movs	r3, r0
 8003296:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003298:	e009      	b.n	80032ae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800329a:	f7fe fea7 	bl	8001fec <HAL_GetTick>
 800329e:	0002      	movs	r2, r0
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	4a2f      	ldr	r2, [pc, #188]	; (8003364 <HAL_RCC_ClockConfig+0x1f4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e054      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ae:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2238      	movs	r2, #56	; 0x38
 80032b4:	401a      	ands	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	429a      	cmp	r2, r3
 80032be:	d1ec      	bne.n	800329a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032c0:	4b27      	ldr	r3, [pc, #156]	; (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2207      	movs	r2, #7
 80032c6:	4013      	ands	r3, r2
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d21e      	bcs.n	800330c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ce:	4b24      	ldr	r3, [pc, #144]	; (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2207      	movs	r2, #7
 80032d4:	4393      	bics	r3, r2
 80032d6:	0019      	movs	r1, r3
 80032d8:	4b21      	ldr	r3, [pc, #132]	; (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032e0:	f7fe fe84 	bl	8001fec <HAL_GetTick>
 80032e4:	0003      	movs	r3, r0
 80032e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032e8:	e009      	b.n	80032fe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ea:	f7fe fe7f 	bl	8001fec <HAL_GetTick>
 80032ee:	0002      	movs	r2, r0
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	4a1b      	ldr	r2, [pc, #108]	; (8003364 <HAL_RCC_ClockConfig+0x1f4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e02c      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032fe:	4b18      	ldr	r3, [pc, #96]	; (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2207      	movs	r2, #7
 8003304:	4013      	ands	r3, r2
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d1ee      	bne.n	80032ea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2204      	movs	r2, #4
 8003312:	4013      	ands	r3, r2
 8003314:	d009      	beq.n	800332a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003316:	4b14      	ldr	r3, [pc, #80]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	4a15      	ldr	r2, [pc, #84]	; (8003370 <HAL_RCC_ClockConfig+0x200>)
 800331c:	4013      	ands	r3, r2
 800331e:	0019      	movs	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	4b10      	ldr	r3, [pc, #64]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 8003326:	430a      	orrs	r2, r1
 8003328:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800332a:	f000 f829 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 800332e:	0001      	movs	r1, r0
 8003330:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	0a1b      	lsrs	r3, r3, #8
 8003336:	220f      	movs	r2, #15
 8003338:	401a      	ands	r2, r3
 800333a:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <HAL_RCC_ClockConfig+0x204>)
 800333c:	0092      	lsls	r2, r2, #2
 800333e:	58d3      	ldr	r3, [r2, r3]
 8003340:	221f      	movs	r2, #31
 8003342:	4013      	ands	r3, r2
 8003344:	000a      	movs	r2, r1
 8003346:	40da      	lsrs	r2, r3
 8003348:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <HAL_RCC_ClockConfig+0x208>)
 800334a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_RCC_ClockConfig+0x20c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	0018      	movs	r0, r3
 8003352:	f7fe fdef 	bl	8001f34 <HAL_InitTick>
 8003356:	0003      	movs	r3, r0
}
 8003358:	0018      	movs	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	b004      	add	sp, #16
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40022000 	.word	0x40022000
 8003364:	00001388 	.word	0x00001388
 8003368:	40021000 	.word	0x40021000
 800336c:	fffff0ff 	.word	0xfffff0ff
 8003370:	ffff8fff 	.word	0xffff8fff
 8003374:	08005704 	.word	0x08005704
 8003378:	20000000 	.word	0x20000000
 800337c:	20000004 	.word	0x20000004

08003380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003386:	4b3c      	ldr	r3, [pc, #240]	; (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2238      	movs	r2, #56	; 0x38
 800338c:	4013      	ands	r3, r2
 800338e:	d10f      	bne.n	80033b0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003390:	4b39      	ldr	r3, [pc, #228]	; (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	0adb      	lsrs	r3, r3, #11
 8003396:	2207      	movs	r2, #7
 8003398:	4013      	ands	r3, r2
 800339a:	2201      	movs	r2, #1
 800339c:	409a      	lsls	r2, r3
 800339e:	0013      	movs	r3, r2
 80033a0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80033a2:	6839      	ldr	r1, [r7, #0]
 80033a4:	4835      	ldr	r0, [pc, #212]	; (800347c <HAL_RCC_GetSysClockFreq+0xfc>)
 80033a6:	f7fc feab 	bl	8000100 <__udivsi3>
 80033aa:	0003      	movs	r3, r0
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	e05d      	b.n	800346c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033b0:	4b31      	ldr	r3, [pc, #196]	; (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2238      	movs	r2, #56	; 0x38
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d102      	bne.n	80033c2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033bc:	4b2f      	ldr	r3, [pc, #188]	; (800347c <HAL_RCC_GetSysClockFreq+0xfc>)
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	e054      	b.n	800346c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033c2:	4b2d      	ldr	r3, [pc, #180]	; (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2238      	movs	r2, #56	; 0x38
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b10      	cmp	r3, #16
 80033cc:	d138      	bne.n	8003440 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80033ce:	4b2a      	ldr	r3, [pc, #168]	; (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2203      	movs	r2, #3
 80033d4:	4013      	ands	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033d8:	4b27      	ldr	r3, [pc, #156]	; (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	2207      	movs	r2, #7
 80033e0:	4013      	ands	r3, r2
 80033e2:	3301      	adds	r3, #1
 80033e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b03      	cmp	r3, #3
 80033ea:	d10d      	bne.n	8003408 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033ec:	68b9      	ldr	r1, [r7, #8]
 80033ee:	4823      	ldr	r0, [pc, #140]	; (800347c <HAL_RCC_GetSysClockFreq+0xfc>)
 80033f0:	f7fc fe86 	bl	8000100 <__udivsi3>
 80033f4:	0003      	movs	r3, r0
 80033f6:	0019      	movs	r1, r3
 80033f8:	4b1f      	ldr	r3, [pc, #124]	; (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	0a1b      	lsrs	r3, r3, #8
 80033fe:	227f      	movs	r2, #127	; 0x7f
 8003400:	4013      	ands	r3, r2
 8003402:	434b      	muls	r3, r1
 8003404:	617b      	str	r3, [r7, #20]
        break;
 8003406:	e00d      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003408:	68b9      	ldr	r1, [r7, #8]
 800340a:	481c      	ldr	r0, [pc, #112]	; (800347c <HAL_RCC_GetSysClockFreq+0xfc>)
 800340c:	f7fc fe78 	bl	8000100 <__udivsi3>
 8003410:	0003      	movs	r3, r0
 8003412:	0019      	movs	r1, r3
 8003414:	4b18      	ldr	r3, [pc, #96]	; (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	0a1b      	lsrs	r3, r3, #8
 800341a:	227f      	movs	r2, #127	; 0x7f
 800341c:	4013      	ands	r3, r2
 800341e:	434b      	muls	r3, r1
 8003420:	617b      	str	r3, [r7, #20]
        break;
 8003422:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003424:	4b14      	ldr	r3, [pc, #80]	; (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	0f5b      	lsrs	r3, r3, #29
 800342a:	2207      	movs	r2, #7
 800342c:	4013      	ands	r3, r2
 800342e:	3301      	adds	r3, #1
 8003430:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	6978      	ldr	r0, [r7, #20]
 8003436:	f7fc fe63 	bl	8000100 <__udivsi3>
 800343a:	0003      	movs	r3, r0
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	e015      	b.n	800346c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003440:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2238      	movs	r2, #56	; 0x38
 8003446:	4013      	ands	r3, r2
 8003448:	2b20      	cmp	r3, #32
 800344a:	d103      	bne.n	8003454 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800344c:	2380      	movs	r3, #128	; 0x80
 800344e:	021b      	lsls	r3, r3, #8
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	e00b      	b.n	800346c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003454:	4b08      	ldr	r3, [pc, #32]	; (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2238      	movs	r2, #56	; 0x38
 800345a:	4013      	ands	r3, r2
 800345c:	2b18      	cmp	r3, #24
 800345e:	d103      	bne.n	8003468 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003460:	23fa      	movs	r3, #250	; 0xfa
 8003462:	01db      	lsls	r3, r3, #7
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	e001      	b.n	800346c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800346c:	693b      	ldr	r3, [r7, #16]
}
 800346e:	0018      	movs	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	b006      	add	sp, #24
 8003474:	bd80      	pop	{r7, pc}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	40021000 	.word	0x40021000
 800347c:	00f42400 	.word	0x00f42400

08003480 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003484:	4b02      	ldr	r3, [pc, #8]	; (8003490 <HAL_RCC_GetHCLKFreq+0x10>)
 8003486:	681b      	ldr	r3, [r3, #0]
}
 8003488:	0018      	movs	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	20000000 	.word	0x20000000

08003494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003494:	b5b0      	push	{r4, r5, r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003498:	f7ff fff2 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 800349c:	0004      	movs	r4, r0
 800349e:	f7ff fb4b 	bl	8002b38 <LL_RCC_GetAPB1Prescaler>
 80034a2:	0003      	movs	r3, r0
 80034a4:	0b1a      	lsrs	r2, r3, #12
 80034a6:	4b05      	ldr	r3, [pc, #20]	; (80034bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80034a8:	0092      	lsls	r2, r2, #2
 80034aa:	58d3      	ldr	r3, [r2, r3]
 80034ac:	221f      	movs	r2, #31
 80034ae:	4013      	ands	r3, r2
 80034b0:	40dc      	lsrs	r4, r3
 80034b2:	0023      	movs	r3, r4
}
 80034b4:	0018      	movs	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bdb0      	pop	{r4, r5, r7, pc}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	08005744 	.word	0x08005744

080034c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e04a      	b.n	8003568 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	223d      	movs	r2, #61	; 0x3d
 80034d6:	5c9b      	ldrb	r3, [r3, r2]
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d107      	bne.n	80034ee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	223c      	movs	r2, #60	; 0x3c
 80034e2:	2100      	movs	r1, #0
 80034e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	0018      	movs	r0, r3
 80034ea:	f7fe f883 	bl	80015f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	223d      	movs	r2, #61	; 0x3d
 80034f2:	2102      	movs	r1, #2
 80034f4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3304      	adds	r3, #4
 80034fe:	0019      	movs	r1, r3
 8003500:	0010      	movs	r0, r2
 8003502:	f000 fe1f 	bl	8004144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2248      	movs	r2, #72	; 0x48
 800350a:	2101      	movs	r1, #1
 800350c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	223e      	movs	r2, #62	; 0x3e
 8003512:	2101      	movs	r1, #1
 8003514:	5499      	strb	r1, [r3, r2]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	223f      	movs	r2, #63	; 0x3f
 800351a:	2101      	movs	r1, #1
 800351c:	5499      	strb	r1, [r3, r2]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2240      	movs	r2, #64	; 0x40
 8003522:	2101      	movs	r1, #1
 8003524:	5499      	strb	r1, [r3, r2]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2241      	movs	r2, #65	; 0x41
 800352a:	2101      	movs	r1, #1
 800352c:	5499      	strb	r1, [r3, r2]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2242      	movs	r2, #66	; 0x42
 8003532:	2101      	movs	r1, #1
 8003534:	5499      	strb	r1, [r3, r2]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2243      	movs	r2, #67	; 0x43
 800353a:	2101      	movs	r1, #1
 800353c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2244      	movs	r2, #68	; 0x44
 8003542:	2101      	movs	r1, #1
 8003544:	5499      	strb	r1, [r3, r2]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2245      	movs	r2, #69	; 0x45
 800354a:	2101      	movs	r1, #1
 800354c:	5499      	strb	r1, [r3, r2]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2246      	movs	r2, #70	; 0x46
 8003552:	2101      	movs	r1, #1
 8003554:	5499      	strb	r1, [r3, r2]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2247      	movs	r2, #71	; 0x47
 800355a:	2101      	movs	r1, #1
 800355c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	223d      	movs	r2, #61	; 0x3d
 8003562:	2101      	movs	r1, #1
 8003564:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	0018      	movs	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	b002      	add	sp, #8
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e04a      	b.n	8003618 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	223d      	movs	r2, #61	; 0x3d
 8003586:	5c9b      	ldrb	r3, [r3, r2]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d107      	bne.n	800359e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	223c      	movs	r2, #60	; 0x3c
 8003592:	2100      	movs	r1, #0
 8003594:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	0018      	movs	r0, r3
 800359a:	f000 f841 	bl	8003620 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	223d      	movs	r2, #61	; 0x3d
 80035a2:	2102      	movs	r1, #2
 80035a4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3304      	adds	r3, #4
 80035ae:	0019      	movs	r1, r3
 80035b0:	0010      	movs	r0, r2
 80035b2:	f000 fdc7 	bl	8004144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2248      	movs	r2, #72	; 0x48
 80035ba:	2101      	movs	r1, #1
 80035bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	223e      	movs	r2, #62	; 0x3e
 80035c2:	2101      	movs	r1, #1
 80035c4:	5499      	strb	r1, [r3, r2]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	223f      	movs	r2, #63	; 0x3f
 80035ca:	2101      	movs	r1, #1
 80035cc:	5499      	strb	r1, [r3, r2]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2240      	movs	r2, #64	; 0x40
 80035d2:	2101      	movs	r1, #1
 80035d4:	5499      	strb	r1, [r3, r2]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2241      	movs	r2, #65	; 0x41
 80035da:	2101      	movs	r1, #1
 80035dc:	5499      	strb	r1, [r3, r2]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2242      	movs	r2, #66	; 0x42
 80035e2:	2101      	movs	r1, #1
 80035e4:	5499      	strb	r1, [r3, r2]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2243      	movs	r2, #67	; 0x43
 80035ea:	2101      	movs	r1, #1
 80035ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2244      	movs	r2, #68	; 0x44
 80035f2:	2101      	movs	r1, #1
 80035f4:	5499      	strb	r1, [r3, r2]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2245      	movs	r2, #69	; 0x45
 80035fa:	2101      	movs	r1, #1
 80035fc:	5499      	strb	r1, [r3, r2]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2246      	movs	r2, #70	; 0x46
 8003602:	2101      	movs	r1, #1
 8003604:	5499      	strb	r1, [r3, r2]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2247      	movs	r2, #71	; 0x47
 800360a:	2101      	movs	r1, #1
 800360c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	223d      	movs	r2, #61	; 0x3d
 8003612:	2101      	movs	r1, #1
 8003614:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	0018      	movs	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	b002      	add	sp, #8
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003628:	46c0      	nop			; (mov r8, r8)
 800362a:	46bd      	mov	sp, r7
 800362c:	b002      	add	sp, #8
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	001a      	movs	r2, r3
 800363e:	1cbb      	adds	r3, r7, #2
 8003640:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003642:	2317      	movs	r3, #23
 8003644:	18fb      	adds	r3, r7, r3
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d108      	bne.n	8003662 <HAL_TIM_PWM_Start_DMA+0x32>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	223e      	movs	r2, #62	; 0x3e
 8003654:	5c9b      	ldrb	r3, [r3, r2]
 8003656:	b2db      	uxtb	r3, r3
 8003658:	3b02      	subs	r3, #2
 800365a:	425a      	negs	r2, r3
 800365c:	4153      	adcs	r3, r2
 800365e:	b2db      	uxtb	r3, r3
 8003660:	e037      	b.n	80036d2 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b04      	cmp	r3, #4
 8003666:	d108      	bne.n	800367a <HAL_TIM_PWM_Start_DMA+0x4a>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	223f      	movs	r2, #63	; 0x3f
 800366c:	5c9b      	ldrb	r3, [r3, r2]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	3b02      	subs	r3, #2
 8003672:	425a      	negs	r2, r3
 8003674:	4153      	adcs	r3, r2
 8003676:	b2db      	uxtb	r3, r3
 8003678:	e02b      	b.n	80036d2 <HAL_TIM_PWM_Start_DMA+0xa2>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b08      	cmp	r3, #8
 800367e:	d108      	bne.n	8003692 <HAL_TIM_PWM_Start_DMA+0x62>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2240      	movs	r2, #64	; 0x40
 8003684:	5c9b      	ldrb	r3, [r3, r2]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	3b02      	subs	r3, #2
 800368a:	425a      	negs	r2, r3
 800368c:	4153      	adcs	r3, r2
 800368e:	b2db      	uxtb	r3, r3
 8003690:	e01f      	b.n	80036d2 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b0c      	cmp	r3, #12
 8003696:	d108      	bne.n	80036aa <HAL_TIM_PWM_Start_DMA+0x7a>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2241      	movs	r2, #65	; 0x41
 800369c:	5c9b      	ldrb	r3, [r3, r2]
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	3b02      	subs	r3, #2
 80036a2:	425a      	negs	r2, r3
 80036a4:	4153      	adcs	r3, r2
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	e013      	b.n	80036d2 <HAL_TIM_PWM_Start_DMA+0xa2>
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2b10      	cmp	r3, #16
 80036ae:	d108      	bne.n	80036c2 <HAL_TIM_PWM_Start_DMA+0x92>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2242      	movs	r2, #66	; 0x42
 80036b4:	5c9b      	ldrb	r3, [r3, r2]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	3b02      	subs	r3, #2
 80036ba:	425a      	negs	r2, r3
 80036bc:	4153      	adcs	r3, r2
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	e007      	b.n	80036d2 <HAL_TIM_PWM_Start_DMA+0xa2>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2243      	movs	r2, #67	; 0x43
 80036c6:	5c9b      	ldrb	r3, [r3, r2]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	3b02      	subs	r3, #2
 80036cc:	425a      	negs	r2, r3
 80036ce:	4153      	adcs	r3, r2
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 80036d6:	2302      	movs	r3, #2
 80036d8:	e183      	b.n	80039e2 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d108      	bne.n	80036f2 <HAL_TIM_PWM_Start_DMA+0xc2>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	223e      	movs	r2, #62	; 0x3e
 80036e4:	5c9b      	ldrb	r3, [r3, r2]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	425a      	negs	r2, r3
 80036ec:	4153      	adcs	r3, r2
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	e037      	b.n	8003762 <HAL_TIM_PWM_Start_DMA+0x132>
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d108      	bne.n	800370a <HAL_TIM_PWM_Start_DMA+0xda>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	223f      	movs	r2, #63	; 0x3f
 80036fc:	5c9b      	ldrb	r3, [r3, r2]
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	425a      	negs	r2, r3
 8003704:	4153      	adcs	r3, r2
 8003706:	b2db      	uxtb	r3, r3
 8003708:	e02b      	b.n	8003762 <HAL_TIM_PWM_Start_DMA+0x132>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b08      	cmp	r3, #8
 800370e:	d108      	bne.n	8003722 <HAL_TIM_PWM_Start_DMA+0xf2>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2240      	movs	r2, #64	; 0x40
 8003714:	5c9b      	ldrb	r3, [r3, r2]
 8003716:	b2db      	uxtb	r3, r3
 8003718:	3b01      	subs	r3, #1
 800371a:	425a      	negs	r2, r3
 800371c:	4153      	adcs	r3, r2
 800371e:	b2db      	uxtb	r3, r3
 8003720:	e01f      	b.n	8003762 <HAL_TIM_PWM_Start_DMA+0x132>
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b0c      	cmp	r3, #12
 8003726:	d108      	bne.n	800373a <HAL_TIM_PWM_Start_DMA+0x10a>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2241      	movs	r2, #65	; 0x41
 800372c:	5c9b      	ldrb	r3, [r3, r2]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	425a      	negs	r2, r3
 8003734:	4153      	adcs	r3, r2
 8003736:	b2db      	uxtb	r3, r3
 8003738:	e013      	b.n	8003762 <HAL_TIM_PWM_Start_DMA+0x132>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b10      	cmp	r3, #16
 800373e:	d108      	bne.n	8003752 <HAL_TIM_PWM_Start_DMA+0x122>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2242      	movs	r2, #66	; 0x42
 8003744:	5c9b      	ldrb	r3, [r3, r2]
 8003746:	b2db      	uxtb	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	425a      	negs	r2, r3
 800374c:	4153      	adcs	r3, r2
 800374e:	b2db      	uxtb	r3, r3
 8003750:	e007      	b.n	8003762 <HAL_TIM_PWM_Start_DMA+0x132>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2243      	movs	r2, #67	; 0x43
 8003756:	5c9b      	ldrb	r3, [r3, r2]
 8003758:	b2db      	uxtb	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	425a      	negs	r2, r3
 800375e:	4153      	adcs	r3, r2
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d035      	beq.n	80037d2 <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_TIM_PWM_Start_DMA+0x144>
 800376c:	1cbb      	adds	r3, r7, #2
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e134      	b.n	80039e2 <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d104      	bne.n	8003788 <HAL_TIM_PWM_Start_DMA+0x158>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	223e      	movs	r2, #62	; 0x3e
 8003782:	2102      	movs	r1, #2
 8003784:	5499      	strb	r1, [r3, r2]
 8003786:	e026      	b.n	80037d6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b04      	cmp	r3, #4
 800378c:	d104      	bne.n	8003798 <HAL_TIM_PWM_Start_DMA+0x168>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	223f      	movs	r2, #63	; 0x3f
 8003792:	2102      	movs	r1, #2
 8003794:	5499      	strb	r1, [r3, r2]
 8003796:	e01e      	b.n	80037d6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b08      	cmp	r3, #8
 800379c:	d104      	bne.n	80037a8 <HAL_TIM_PWM_Start_DMA+0x178>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2240      	movs	r2, #64	; 0x40
 80037a2:	2102      	movs	r1, #2
 80037a4:	5499      	strb	r1, [r3, r2]
 80037a6:	e016      	b.n	80037d6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b0c      	cmp	r3, #12
 80037ac:	d104      	bne.n	80037b8 <HAL_TIM_PWM_Start_DMA+0x188>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2241      	movs	r2, #65	; 0x41
 80037b2:	2102      	movs	r1, #2
 80037b4:	5499      	strb	r1, [r3, r2]
 80037b6:	e00e      	b.n	80037d6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b10      	cmp	r3, #16
 80037bc:	d104      	bne.n	80037c8 <HAL_TIM_PWM_Start_DMA+0x198>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2242      	movs	r2, #66	; 0x42
 80037c2:	2102      	movs	r1, #2
 80037c4:	5499      	strb	r1, [r3, r2]
 80037c6:	e006      	b.n	80037d6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2243      	movs	r2, #67	; 0x43
 80037cc:	2102      	movs	r1, #2
 80037ce:	5499      	strb	r1, [r3, r2]
 80037d0:	e001      	b.n	80037d6 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e105      	b.n	80039e2 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b0c      	cmp	r3, #12
 80037da:	d100      	bne.n	80037de <HAL_TIM_PWM_Start_DMA+0x1ae>
 80037dc:	e080      	b.n	80038e0 <HAL_TIM_PWM_Start_DMA+0x2b0>
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b0c      	cmp	r3, #12
 80037e2:	d900      	bls.n	80037e6 <HAL_TIM_PWM_Start_DMA+0x1b6>
 80037e4:	e0a1      	b.n	800392a <HAL_TIM_PWM_Start_DMA+0x2fa>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d054      	beq.n	8003896 <HAL_TIM_PWM_Start_DMA+0x266>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d900      	bls.n	80037f4 <HAL_TIM_PWM_Start_DMA+0x1c4>
 80037f2:	e09a      	b.n	800392a <HAL_TIM_PWM_Start_DMA+0x2fa>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_TIM_PWM_Start_DMA+0x1d2>
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d025      	beq.n	800384c <HAL_TIM_PWM_Start_DMA+0x21c>
 8003800:	e093      	b.n	800392a <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	4a79      	ldr	r2, [pc, #484]	; (80039ec <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8003808:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	4a78      	ldr	r2, [pc, #480]	; (80039f0 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8003810:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	4a77      	ldr	r2, [pc, #476]	; (80039f4 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8003818:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3334      	adds	r3, #52	; 0x34
 8003826:	001a      	movs	r2, r3
 8003828:	1cbb      	adds	r3, r7, #2
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	f7fe fd74 	bl	8002318 <HAL_DMA_Start_IT>
 8003830:	1e03      	subs	r3, r0, #0
 8003832:	d001      	beq.n	8003838 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0d4      	b.n	80039e2 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2180      	movs	r1, #128	; 0x80
 8003844:	0089      	lsls	r1, r1, #2
 8003846:	430a      	orrs	r2, r1
 8003848:	60da      	str	r2, [r3, #12]
      break;
 800384a:	e073      	b.n	8003934 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	4a66      	ldr	r2, [pc, #408]	; (80039ec <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8003852:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	4a65      	ldr	r2, [pc, #404]	; (80039f0 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800385a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003860:	4a64      	ldr	r2, [pc, #400]	; (80039f4 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8003862:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3338      	adds	r3, #56	; 0x38
 8003870:	001a      	movs	r2, r3
 8003872:	1cbb      	adds	r3, r7, #2
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	f7fe fd4f 	bl	8002318 <HAL_DMA_Start_IT>
 800387a:	1e03      	subs	r3, r0, #0
 800387c:	d001      	beq.n	8003882 <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e0af      	b.n	80039e2 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2180      	movs	r1, #128	; 0x80
 800388e:	00c9      	lsls	r1, r1, #3
 8003890:	430a      	orrs	r2, r1
 8003892:	60da      	str	r2, [r3, #12]
      break;
 8003894:	e04e      	b.n	8003934 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	4a54      	ldr	r2, [pc, #336]	; (80039ec <HAL_TIM_PWM_Start_DMA+0x3bc>)
 800389c:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	4a53      	ldr	r2, [pc, #332]	; (80039f0 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	4a52      	ldr	r2, [pc, #328]	; (80039f4 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80038ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	333c      	adds	r3, #60	; 0x3c
 80038ba:	001a      	movs	r2, r3
 80038bc:	1cbb      	adds	r3, r7, #2
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	f7fe fd2a 	bl	8002318 <HAL_DMA_Start_IT>
 80038c4:	1e03      	subs	r3, r0, #0
 80038c6:	d001      	beq.n	80038cc <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e08a      	b.n	80039e2 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2180      	movs	r1, #128	; 0x80
 80038d8:	0109      	lsls	r1, r1, #4
 80038da:	430a      	orrs	r2, r1
 80038dc:	60da      	str	r2, [r3, #12]
      break;
 80038de:	e029      	b.n	8003934 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e4:	4a41      	ldr	r2, [pc, #260]	; (80039ec <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80038e6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	4a40      	ldr	r2, [pc, #256]	; (80039f0 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f4:	4a3f      	ldr	r2, [pc, #252]	; (80039f4 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80038f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80038fc:	6879      	ldr	r1, [r7, #4]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3340      	adds	r3, #64	; 0x40
 8003904:	001a      	movs	r2, r3
 8003906:	1cbb      	adds	r3, r7, #2
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	f7fe fd05 	bl	8002318 <HAL_DMA_Start_IT>
 800390e:	1e03      	subs	r3, r0, #0
 8003910:	d001      	beq.n	8003916 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e065      	b.n	80039e2 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2180      	movs	r1, #128	; 0x80
 8003922:	0149      	lsls	r1, r1, #5
 8003924:	430a      	orrs	r2, r1
 8003926:	60da      	str	r2, [r3, #12]
      break;
 8003928:	e004      	b.n	8003934 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 800392a:	2317      	movs	r3, #23
 800392c:	18fb      	adds	r3, r7, r3
 800392e:	2201      	movs	r2, #1
 8003930:	701a      	strb	r2, [r3, #0]
      break;
 8003932:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8003934:	2317      	movs	r3, #23
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d14e      	bne.n	80039dc <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	2201      	movs	r2, #1
 8003946:	0018      	movs	r0, r3
 8003948:	f000 ffae 	bl	80048a8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a29      	ldr	r2, [pc, #164]	; (80039f8 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d009      	beq.n	800396a <HAL_TIM_PWM_Start_DMA+0x33a>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a28      	ldr	r2, [pc, #160]	; (80039fc <HAL_TIM_PWM_Start_DMA+0x3cc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d004      	beq.n	800396a <HAL_TIM_PWM_Start_DMA+0x33a>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a26      	ldr	r2, [pc, #152]	; (8003a00 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d101      	bne.n	800396e <HAL_TIM_PWM_Start_DMA+0x33e>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <HAL_TIM_PWM_Start_DMA+0x340>
 800396e:	2300      	movs	r3, #0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2180      	movs	r1, #128	; 0x80
 8003980:	0209      	lsls	r1, r1, #8
 8003982:	430a      	orrs	r2, r1
 8003984:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a1b      	ldr	r2, [pc, #108]	; (80039f8 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d004      	beq.n	800399a <HAL_TIM_PWM_Start_DMA+0x36a>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1b      	ldr	r2, [pc, #108]	; (8003a04 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d116      	bne.n	80039c8 <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	4a19      	ldr	r2, [pc, #100]	; (8003a08 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	2b06      	cmp	r3, #6
 80039aa:	d016      	beq.n	80039da <HAL_TIM_PWM_Start_DMA+0x3aa>
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	025b      	lsls	r3, r3, #9
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d011      	beq.n	80039da <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2101      	movs	r1, #1
 80039c2:	430a      	orrs	r2, r1
 80039c4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c6:	e008      	b.n	80039da <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2101      	movs	r1, #1
 80039d4:	430a      	orrs	r2, r1
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	e000      	b.n	80039dc <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039da:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 80039dc:	2317      	movs	r3, #23
 80039de:	18fb      	adds	r3, r7, r3
 80039e0:	781b      	ldrb	r3, [r3, #0]
}
 80039e2:	0018      	movs	r0, r3
 80039e4:	46bd      	mov	sp, r7
 80039e6:	b006      	add	sp, #24
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	46c0      	nop			; (mov r8, r8)
 80039ec:	08004031 	.word	0x08004031
 80039f0:	080040db 	.word	0x080040db
 80039f4:	08003f9d 	.word	0x08003f9d
 80039f8:	40012c00 	.word	0x40012c00
 80039fc:	40014400 	.word	0x40014400
 8003a00:	40014800 	.word	0x40014800
 8003a04:	40000400 	.word	0x40000400
 8003a08:	00010007 	.word	0x00010007

08003a0c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a16:	230f      	movs	r3, #15
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b0c      	cmp	r3, #12
 8003a22:	d039      	beq.n	8003a98 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2b0c      	cmp	r3, #12
 8003a28:	d844      	bhi.n	8003ab4 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d025      	beq.n	8003a7c <HAL_TIM_PWM_Stop_DMA+0x70>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d83e      	bhi.n	8003ab4 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_TIM_PWM_Stop_DMA+0x38>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d00e      	beq.n	8003a60 <HAL_TIM_PWM_Stop_DMA+0x54>
 8003a42:	e037      	b.n	8003ab4 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	495a      	ldr	r1, [pc, #360]	; (8003bb8 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8003a50:	400a      	ands	r2, r1
 8003a52:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f7fe fce3 	bl	8002424 <HAL_DMA_Abort_IT>
      break;
 8003a5e:	e02e      	b.n	8003abe <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4954      	ldr	r1, [pc, #336]	; (8003bbc <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8003a6c:	400a      	ands	r2, r1
 8003a6e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	0018      	movs	r0, r3
 8003a76:	f7fe fcd5 	bl	8002424 <HAL_DMA_Abort_IT>
      break;
 8003a7a:	e020      	b.n	8003abe <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	494e      	ldr	r1, [pc, #312]	; (8003bc0 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8003a88:	400a      	ands	r2, r1
 8003a8a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	0018      	movs	r0, r3
 8003a92:	f7fe fcc7 	bl	8002424 <HAL_DMA_Abort_IT>
      break;
 8003a96:	e012      	b.n	8003abe <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4948      	ldr	r1, [pc, #288]	; (8003bc4 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8003aa4:	400a      	ands	r2, r1
 8003aa6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	0018      	movs	r0, r3
 8003aae:	f7fe fcb9 	bl	8002424 <HAL_DMA_Abort_IT>
      break;
 8003ab2:	e004      	b.n	8003abe <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8003ab4:	230f      	movs	r3, #15
 8003ab6:	18fb      	adds	r3, r7, r3
 8003ab8:	2201      	movs	r2, #1
 8003aba:	701a      	strb	r2, [r3, #0]
      break;
 8003abc:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8003abe:	230f      	movs	r3, #15
 8003ac0:	18fb      	adds	r3, r7, r3
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d000      	beq.n	8003aca <HAL_TIM_PWM_Stop_DMA+0xbe>
 8003ac8:	e06e      	b.n	8003ba8 <HAL_TIM_PWM_Stop_DMA+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6839      	ldr	r1, [r7, #0]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f000 fee8 	bl	80048a8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a3a      	ldr	r2, [pc, #232]	; (8003bc8 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d009      	beq.n	8003af6 <HAL_TIM_PWM_Stop_DMA+0xea>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a39      	ldr	r2, [pc, #228]	; (8003bcc <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d004      	beq.n	8003af6 <HAL_TIM_PWM_Stop_DMA+0xea>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a37      	ldr	r2, [pc, #220]	; (8003bd0 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d101      	bne.n	8003afa <HAL_TIM_PWM_Stop_DMA+0xee>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <HAL_TIM_PWM_Stop_DMA+0xf0>
 8003afa:	2300      	movs	r3, #0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d013      	beq.n	8003b28 <HAL_TIM_PWM_Stop_DMA+0x11c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	4a33      	ldr	r2, [pc, #204]	; (8003bd4 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d10d      	bne.n	8003b28 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	4a31      	ldr	r2, [pc, #196]	; (8003bd8 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	d107      	bne.n	8003b28 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	492e      	ldr	r1, [pc, #184]	; (8003bdc <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8003b24:	400a      	ands	r2, r1
 8003b26:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	4a29      	ldr	r2, [pc, #164]	; (8003bd4 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	d10d      	bne.n	8003b50 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	4a27      	ldr	r2, [pc, #156]	; (8003bd8 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d107      	bne.n	8003b50 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	438a      	bics	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d104      	bne.n	8003b60 <HAL_TIM_PWM_Stop_DMA+0x154>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	223e      	movs	r2, #62	; 0x3e
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	5499      	strb	r1, [r3, r2]
 8003b5e:	e023      	b.n	8003ba8 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d104      	bne.n	8003b70 <HAL_TIM_PWM_Stop_DMA+0x164>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	223f      	movs	r2, #63	; 0x3f
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	5499      	strb	r1, [r3, r2]
 8003b6e:	e01b      	b.n	8003ba8 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d104      	bne.n	8003b80 <HAL_TIM_PWM_Stop_DMA+0x174>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2240      	movs	r2, #64	; 0x40
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	5499      	strb	r1, [r3, r2]
 8003b7e:	e013      	b.n	8003ba8 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b0c      	cmp	r3, #12
 8003b84:	d104      	bne.n	8003b90 <HAL_TIM_PWM_Stop_DMA+0x184>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2241      	movs	r2, #65	; 0x41
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	5499      	strb	r1, [r3, r2]
 8003b8e:	e00b      	b.n	8003ba8 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2b10      	cmp	r3, #16
 8003b94:	d104      	bne.n	8003ba0 <HAL_TIM_PWM_Stop_DMA+0x194>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2242      	movs	r2, #66	; 0x42
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	5499      	strb	r1, [r3, r2]
 8003b9e:	e003      	b.n	8003ba8 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2243      	movs	r2, #67	; 0x43
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8003ba8:	230f      	movs	r3, #15
 8003baa:	18fb      	adds	r3, r7, r3
 8003bac:	781b      	ldrb	r3, [r3, #0]
}
 8003bae:	0018      	movs	r0, r3
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	b004      	add	sp, #16
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	fffffdff 	.word	0xfffffdff
 8003bbc:	fffffbff 	.word	0xfffffbff
 8003bc0:	fffff7ff 	.word	0xfffff7ff
 8003bc4:	ffffefff 	.word	0xffffefff
 8003bc8:	40012c00 	.word	0x40012c00
 8003bcc:	40014400 	.word	0x40014400
 8003bd0:	40014800 	.word	0x40014800
 8003bd4:	00001111 	.word	0x00001111
 8003bd8:	00000444 	.word	0x00000444
 8003bdc:	ffff7fff 	.word	0xffff7fff

08003be0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bec:	2317      	movs	r3, #23
 8003bee:	18fb      	adds	r3, r7, r3
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	223c      	movs	r2, #60	; 0x3c
 8003bf8:	5c9b      	ldrb	r3, [r3, r2]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e0e5      	b.n	8003dce <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	223c      	movs	r2, #60	; 0x3c
 8003c06:	2101      	movs	r1, #1
 8003c08:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b14      	cmp	r3, #20
 8003c0e:	d900      	bls.n	8003c12 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003c10:	e0d1      	b.n	8003db6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	009a      	lsls	r2, r3, #2
 8003c16:	4b70      	ldr	r3, [pc, #448]	; (8003dd8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003c18:	18d3      	adds	r3, r2, r3
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	0011      	movs	r1, r2
 8003c26:	0018      	movs	r0, r3
 8003c28:	f000 fb06 	bl	8004238 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2108      	movs	r1, #8
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2104      	movs	r1, #4
 8003c48:	438a      	bics	r2, r1
 8003c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6999      	ldr	r1, [r3, #24]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	619a      	str	r2, [r3, #24]
      break;
 8003c5e:	e0af      	b.n	8003dc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	0011      	movs	r1, r2
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f000 fb65 	bl	8004338 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699a      	ldr	r2, [r3, #24]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2180      	movs	r1, #128	; 0x80
 8003c7a:	0109      	lsls	r1, r1, #4
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4954      	ldr	r1, [pc, #336]	; (8003ddc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003c8c:	400a      	ands	r2, r1
 8003c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6999      	ldr	r1, [r3, #24]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	021a      	lsls	r2, r3, #8
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	619a      	str	r2, [r3, #24]
      break;
 8003ca4:	e08c      	b.n	8003dc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	0011      	movs	r1, r2
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f000 fbc0 	bl	8004434 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	69da      	ldr	r2, [r3, #28]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2108      	movs	r1, #8
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	69da      	ldr	r2, [r3, #28]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2104      	movs	r1, #4
 8003cd0:	438a      	bics	r2, r1
 8003cd2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	69d9      	ldr	r1, [r3, #28]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	691a      	ldr	r2, [r3, #16]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	61da      	str	r2, [r3, #28]
      break;
 8003ce6:	e06b      	b.n	8003dc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	0011      	movs	r1, r2
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f000 fc21 	bl	8004538 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69da      	ldr	r2, [r3, #28]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2180      	movs	r1, #128	; 0x80
 8003d02:	0109      	lsls	r1, r1, #4
 8003d04:	430a      	orrs	r2, r1
 8003d06:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	69da      	ldr	r2, [r3, #28]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4932      	ldr	r1, [pc, #200]	; (8003ddc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003d14:	400a      	ands	r2, r1
 8003d16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	69d9      	ldr	r1, [r3, #28]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	021a      	lsls	r2, r3, #8
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	61da      	str	r2, [r3, #28]
      break;
 8003d2c:	e048      	b.n	8003dc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	0011      	movs	r1, r2
 8003d36:	0018      	movs	r0, r3
 8003d38:	f000 fc62 	bl	8004600 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2108      	movs	r1, #8
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2104      	movs	r1, #4
 8003d58:	438a      	bics	r2, r1
 8003d5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d6e:	e027      	b.n	8003dc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	0011      	movs	r1, r2
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f000 fc9b 	bl	80046b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2180      	movs	r1, #128	; 0x80
 8003d8a:	0109      	lsls	r1, r1, #4
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4910      	ldr	r1, [pc, #64]	; (8003ddc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003d9c:	400a      	ands	r2, r1
 8003d9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	021a      	lsls	r2, r3, #8
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003db4:	e004      	b.n	8003dc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003db6:	2317      	movs	r3, #23
 8003db8:	18fb      	adds	r3, r7, r3
 8003dba:	2201      	movs	r2, #1
 8003dbc:	701a      	strb	r2, [r3, #0]
      break;
 8003dbe:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	223c      	movs	r2, #60	; 0x3c
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	5499      	strb	r1, [r3, r2]

  return status;
 8003dc8:	2317      	movs	r3, #23
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	781b      	ldrb	r3, [r3, #0]
}
 8003dce:	0018      	movs	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b006      	add	sp, #24
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	08005778 	.word	0x08005778
 8003ddc:	fffffbff 	.word	0xfffffbff

08003de0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dea:	230f      	movs	r3, #15
 8003dec:	18fb      	adds	r3, r7, r3
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	223c      	movs	r2, #60	; 0x3c
 8003df6:	5c9b      	ldrb	r3, [r3, r2]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_TIM_ConfigClockSource+0x20>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e0bc      	b.n	8003f7a <HAL_TIM_ConfigClockSource+0x19a>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	223c      	movs	r2, #60	; 0x3c
 8003e04:	2101      	movs	r1, #1
 8003e06:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	223d      	movs	r2, #61	; 0x3d
 8003e0c:	2102      	movs	r1, #2
 8003e0e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4a5a      	ldr	r2, [pc, #360]	; (8003f84 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4a59      	ldr	r2, [pc, #356]	; (8003f88 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2280      	movs	r2, #128	; 0x80
 8003e36:	0192      	lsls	r2, r2, #6
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d040      	beq.n	8003ebe <HAL_TIM_ConfigClockSource+0xde>
 8003e3c:	2280      	movs	r2, #128	; 0x80
 8003e3e:	0192      	lsls	r2, r2, #6
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d900      	bls.n	8003e46 <HAL_TIM_ConfigClockSource+0x66>
 8003e44:	e088      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x178>
 8003e46:	2280      	movs	r2, #128	; 0x80
 8003e48:	0152      	lsls	r2, r2, #5
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d100      	bne.n	8003e50 <HAL_TIM_ConfigClockSource+0x70>
 8003e4e:	e088      	b.n	8003f62 <HAL_TIM_ConfigClockSource+0x182>
 8003e50:	2280      	movs	r2, #128	; 0x80
 8003e52:	0152      	lsls	r2, r2, #5
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d900      	bls.n	8003e5a <HAL_TIM_ConfigClockSource+0x7a>
 8003e58:	e07e      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x178>
 8003e5a:	2b70      	cmp	r3, #112	; 0x70
 8003e5c:	d018      	beq.n	8003e90 <HAL_TIM_ConfigClockSource+0xb0>
 8003e5e:	d900      	bls.n	8003e62 <HAL_TIM_ConfigClockSource+0x82>
 8003e60:	e07a      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x178>
 8003e62:	2b60      	cmp	r3, #96	; 0x60
 8003e64:	d04f      	beq.n	8003f06 <HAL_TIM_ConfigClockSource+0x126>
 8003e66:	d900      	bls.n	8003e6a <HAL_TIM_ConfigClockSource+0x8a>
 8003e68:	e076      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x178>
 8003e6a:	2b50      	cmp	r3, #80	; 0x50
 8003e6c:	d03b      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0x106>
 8003e6e:	d900      	bls.n	8003e72 <HAL_TIM_ConfigClockSource+0x92>
 8003e70:	e072      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x178>
 8003e72:	2b40      	cmp	r3, #64	; 0x40
 8003e74:	d057      	beq.n	8003f26 <HAL_TIM_ConfigClockSource+0x146>
 8003e76:	d900      	bls.n	8003e7a <HAL_TIM_ConfigClockSource+0x9a>
 8003e78:	e06e      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x178>
 8003e7a:	2b30      	cmp	r3, #48	; 0x30
 8003e7c:	d063      	beq.n	8003f46 <HAL_TIM_ConfigClockSource+0x166>
 8003e7e:	d86b      	bhi.n	8003f58 <HAL_TIM_ConfigClockSource+0x178>
 8003e80:	2b20      	cmp	r3, #32
 8003e82:	d060      	beq.n	8003f46 <HAL_TIM_ConfigClockSource+0x166>
 8003e84:	d868      	bhi.n	8003f58 <HAL_TIM_ConfigClockSource+0x178>
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d05d      	beq.n	8003f46 <HAL_TIM_ConfigClockSource+0x166>
 8003e8a:	2b10      	cmp	r3, #16
 8003e8c:	d05b      	beq.n	8003f46 <HAL_TIM_ConfigClockSource+0x166>
 8003e8e:	e063      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	6899      	ldr	r1, [r3, #8]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f000 fce2 	bl	8004868 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2277      	movs	r2, #119	; 0x77
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	609a      	str	r2, [r3, #8]
      break;
 8003ebc:	e052      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	6899      	ldr	r1, [r3, #8]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f000 fccb 	bl	8004868 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2180      	movs	r1, #128	; 0x80
 8003ede:	01c9      	lsls	r1, r1, #7
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	609a      	str	r2, [r3, #8]
      break;
 8003ee4:	e03e      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6859      	ldr	r1, [r3, #4]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	001a      	movs	r2, r3
 8003ef4:	f000 fc3c 	bl	8004770 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2150      	movs	r1, #80	; 0x50
 8003efe:	0018      	movs	r0, r3
 8003f00:	f000 fc96 	bl	8004830 <TIM_ITRx_SetConfig>
      break;
 8003f04:	e02e      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	6859      	ldr	r1, [r3, #4]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	001a      	movs	r2, r3
 8003f14:	f000 fc5a 	bl	80047cc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2160      	movs	r1, #96	; 0x60
 8003f1e:	0018      	movs	r0, r3
 8003f20:	f000 fc86 	bl	8004830 <TIM_ITRx_SetConfig>
      break;
 8003f24:	e01e      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	6859      	ldr	r1, [r3, #4]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	001a      	movs	r2, r3
 8003f34:	f000 fc1c 	bl	8004770 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2140      	movs	r1, #64	; 0x40
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f000 fc76 	bl	8004830 <TIM_ITRx_SetConfig>
      break;
 8003f44:	e00e      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	0019      	movs	r1, r3
 8003f50:	0010      	movs	r0, r2
 8003f52:	f000 fc6d 	bl	8004830 <TIM_ITRx_SetConfig>
      break;
 8003f56:	e005      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003f58:	230f      	movs	r3, #15
 8003f5a:	18fb      	adds	r3, r7, r3
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	701a      	strb	r2, [r3, #0]
      break;
 8003f60:	e000      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003f62:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	223d      	movs	r2, #61	; 0x3d
 8003f68:	2101      	movs	r1, #1
 8003f6a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	223c      	movs	r2, #60	; 0x3c
 8003f70:	2100      	movs	r1, #0
 8003f72:	5499      	strb	r1, [r3, r2]

  return status;
 8003f74:	230f      	movs	r3, #15
 8003f76:	18fb      	adds	r3, r7, r3
 8003f78:	781b      	ldrb	r3, [r3, #0]
}
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b004      	add	sp, #16
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	ffceff88 	.word	0xffceff88
 8003f88:	ffff00ff 	.word	0xffff00ff

08003f8c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003f94:	46c0      	nop			; (mov r8, r8)
 8003f96:	46bd      	mov	sp, r7
 8003f98:	b002      	add	sp, #8
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d107      	bne.n	8003fc4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	223e      	movs	r2, #62	; 0x3e
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	5499      	strb	r1, [r3, r2]
 8003fc2:	e02a      	b.n	800401a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d107      	bne.n	8003fde <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	223f      	movs	r2, #63	; 0x3f
 8003fd8:	2101      	movs	r1, #1
 8003fda:	5499      	strb	r1, [r3, r2]
 8003fdc:	e01d      	b.n	800401a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d107      	bne.n	8003ff8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2204      	movs	r2, #4
 8003fec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2240      	movs	r2, #64	; 0x40
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	5499      	strb	r1, [r3, r2]
 8003ff6:	e010      	b.n	800401a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d107      	bne.n	8004012 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2208      	movs	r2, #8
 8004006:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2241      	movs	r2, #65	; 0x41
 800400c:	2101      	movs	r1, #1
 800400e:	5499      	strb	r1, [r3, r2]
 8004010:	e003      	b.n	800401a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	223d      	movs	r2, #61	; 0x3d
 8004016:	2101      	movs	r1, #1
 8004018:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	0018      	movs	r0, r3
 800401e:	f7ff ffb5 	bl	8003f8c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	771a      	strb	r2, [r3, #28]
}
 8004028:	46c0      	nop			; (mov r8, r8)
 800402a:	46bd      	mov	sp, r7
 800402c:	b004      	add	sp, #16
 800402e:	bd80      	pop	{r7, pc}

08004030 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	429a      	cmp	r2, r3
 8004046:	d10b      	bne.n	8004060 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2201      	movs	r2, #1
 800404c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d136      	bne.n	80040c4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	223e      	movs	r2, #62	; 0x3e
 800405a:	2101      	movs	r1, #1
 800405c:	5499      	strb	r1, [r3, r2]
 800405e:	e031      	b.n	80040c4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	429a      	cmp	r2, r3
 8004068:	d10b      	bne.n	8004082 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2202      	movs	r2, #2
 800406e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d125      	bne.n	80040c4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	223f      	movs	r2, #63	; 0x3f
 800407c:	2101      	movs	r1, #1
 800407e:	5499      	strb	r1, [r3, r2]
 8004080:	e020      	b.n	80040c4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	429a      	cmp	r2, r3
 800408a:	d10b      	bne.n	80040a4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2204      	movs	r2, #4
 8004090:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d114      	bne.n	80040c4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2240      	movs	r2, #64	; 0x40
 800409e:	2101      	movs	r1, #1
 80040a0:	5499      	strb	r1, [r3, r2]
 80040a2:	e00f      	b.n	80040c4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d10a      	bne.n	80040c4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2208      	movs	r2, #8
 80040b2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d103      	bne.n	80040c4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2241      	movs	r2, #65	; 0x41
 80040c0:	2101      	movs	r1, #1
 80040c2:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	0018      	movs	r0, r3
 80040c8:	f7fc fe4a 	bl	8000d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	771a      	strb	r2, [r3, #28]
}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	46bd      	mov	sp, r7
 80040d6:	b004      	add	sp, #16
 80040d8:	bd80      	pop	{r7, pc}

080040da <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b084      	sub	sp, #16
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d103      	bne.n	80040fa <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2201      	movs	r2, #1
 80040f6:	771a      	strb	r2, [r3, #28]
 80040f8:	e019      	b.n	800412e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	429a      	cmp	r2, r3
 8004102:	d103      	bne.n	800410c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2202      	movs	r2, #2
 8004108:	771a      	strb	r2, [r3, #28]
 800410a:	e010      	b.n	800412e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	429a      	cmp	r2, r3
 8004114:	d103      	bne.n	800411e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2204      	movs	r2, #4
 800411a:	771a      	strb	r2, [r3, #28]
 800411c:	e007      	b.n	800412e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	429a      	cmp	r2, r3
 8004126:	d102      	bne.n	800412e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2208      	movs	r2, #8
 800412c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	0018      	movs	r0, r3
 8004132:	f7fc fe07 	bl	8000d44 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	771a      	strb	r2, [r3, #28]
}
 800413c:	46c0      	nop			; (mov r8, r8)
 800413e:	46bd      	mov	sp, r7
 8004140:	b004      	add	sp, #16
 8004142:	bd80      	pop	{r7, pc}

08004144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a32      	ldr	r2, [pc, #200]	; (8004220 <TIM_Base_SetConfig+0xdc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d003      	beq.n	8004164 <TIM_Base_SetConfig+0x20>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a31      	ldr	r2, [pc, #196]	; (8004224 <TIM_Base_SetConfig+0xe0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d108      	bne.n	8004176 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2270      	movs	r2, #112	; 0x70
 8004168:	4393      	bics	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a29      	ldr	r2, [pc, #164]	; (8004220 <TIM_Base_SetConfig+0xdc>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00f      	beq.n	800419e <TIM_Base_SetConfig+0x5a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a28      	ldr	r2, [pc, #160]	; (8004224 <TIM_Base_SetConfig+0xe0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00b      	beq.n	800419e <TIM_Base_SetConfig+0x5a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a27      	ldr	r2, [pc, #156]	; (8004228 <TIM_Base_SetConfig+0xe4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d007      	beq.n	800419e <TIM_Base_SetConfig+0x5a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a26      	ldr	r2, [pc, #152]	; (800422c <TIM_Base_SetConfig+0xe8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d003      	beq.n	800419e <TIM_Base_SetConfig+0x5a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a25      	ldr	r2, [pc, #148]	; (8004230 <TIM_Base_SetConfig+0xec>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d108      	bne.n	80041b0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4a24      	ldr	r2, [pc, #144]	; (8004234 <TIM_Base_SetConfig+0xf0>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2280      	movs	r2, #128	; 0x80
 80041b4:	4393      	bics	r3, r2
 80041b6:	001a      	movs	r2, r3
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a11      	ldr	r2, [pc, #68]	; (8004220 <TIM_Base_SetConfig+0xdc>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d007      	beq.n	80041ee <TIM_Base_SetConfig+0xaa>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a12      	ldr	r2, [pc, #72]	; (800422c <TIM_Base_SetConfig+0xe8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d003      	beq.n	80041ee <TIM_Base_SetConfig+0xaa>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a11      	ldr	r2, [pc, #68]	; (8004230 <TIM_Base_SetConfig+0xec>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d103      	bne.n	80041f6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	2201      	movs	r2, #1
 8004202:	4013      	ands	r3, r2
 8004204:	2b01      	cmp	r3, #1
 8004206:	d106      	bne.n	8004216 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	2201      	movs	r2, #1
 800420e:	4393      	bics	r3, r2
 8004210:	001a      	movs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	611a      	str	r2, [r3, #16]
  }
}
 8004216:	46c0      	nop			; (mov r8, r8)
 8004218:	46bd      	mov	sp, r7
 800421a:	b004      	add	sp, #16
 800421c:	bd80      	pop	{r7, pc}
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	40012c00 	.word	0x40012c00
 8004224:	40000400 	.word	0x40000400
 8004228:	40002000 	.word	0x40002000
 800422c:	40014400 	.word	0x40014400
 8004230:	40014800 	.word	0x40014800
 8004234:	fffffcff 	.word	0xfffffcff

08004238 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	2201      	movs	r2, #1
 800424e:	4393      	bics	r3, r2
 8004250:	001a      	movs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4a2e      	ldr	r2, [pc, #184]	; (8004320 <TIM_OC1_SetConfig+0xe8>)
 8004266:	4013      	ands	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2203      	movs	r2, #3
 800426e:	4393      	bics	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4313      	orrs	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2202      	movs	r2, #2
 8004280:	4393      	bics	r3, r2
 8004282:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a24      	ldr	r2, [pc, #144]	; (8004324 <TIM_OC1_SetConfig+0xec>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d007      	beq.n	80042a6 <TIM_OC1_SetConfig+0x6e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a23      	ldr	r2, [pc, #140]	; (8004328 <TIM_OC1_SetConfig+0xf0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d003      	beq.n	80042a6 <TIM_OC1_SetConfig+0x6e>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a22      	ldr	r2, [pc, #136]	; (800432c <TIM_OC1_SetConfig+0xf4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d10c      	bne.n	80042c0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2208      	movs	r2, #8
 80042aa:	4393      	bics	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2204      	movs	r2, #4
 80042bc:	4393      	bics	r3, r2
 80042be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a18      	ldr	r2, [pc, #96]	; (8004324 <TIM_OC1_SetConfig+0xec>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d007      	beq.n	80042d8 <TIM_OC1_SetConfig+0xa0>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a17      	ldr	r2, [pc, #92]	; (8004328 <TIM_OC1_SetConfig+0xf0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d003      	beq.n	80042d8 <TIM_OC1_SetConfig+0xa0>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a16      	ldr	r2, [pc, #88]	; (800432c <TIM_OC1_SetConfig+0xf4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d111      	bne.n	80042fc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	4a15      	ldr	r2, [pc, #84]	; (8004330 <TIM_OC1_SetConfig+0xf8>)
 80042dc:	4013      	ands	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4a14      	ldr	r2, [pc, #80]	; (8004334 <TIM_OC1_SetConfig+0xfc>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	621a      	str	r2, [r3, #32]
}
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	46bd      	mov	sp, r7
 800431a:	b006      	add	sp, #24
 800431c:	bd80      	pop	{r7, pc}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	fffeff8f 	.word	0xfffeff8f
 8004324:	40012c00 	.word	0x40012c00
 8004328:	40014400 	.word	0x40014400
 800432c:	40014800 	.word	0x40014800
 8004330:	fffffeff 	.word	0xfffffeff
 8004334:	fffffdff 	.word	0xfffffdff

08004338 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	2210      	movs	r2, #16
 800434e:	4393      	bics	r3, r2
 8004350:	001a      	movs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4a2c      	ldr	r2, [pc, #176]	; (8004418 <TIM_OC2_SetConfig+0xe0>)
 8004366:	4013      	ands	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4a2b      	ldr	r2, [pc, #172]	; (800441c <TIM_OC2_SetConfig+0xe4>)
 800436e:	4013      	ands	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2220      	movs	r2, #32
 8004382:	4393      	bics	r3, r2
 8004384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a22      	ldr	r2, [pc, #136]	; (8004420 <TIM_OC2_SetConfig+0xe8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d10d      	bne.n	80043b6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2280      	movs	r2, #128	; 0x80
 800439e:	4393      	bics	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2240      	movs	r2, #64	; 0x40
 80043b2:	4393      	bics	r3, r2
 80043b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a19      	ldr	r2, [pc, #100]	; (8004420 <TIM_OC2_SetConfig+0xe8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d007      	beq.n	80043ce <TIM_OC2_SetConfig+0x96>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a18      	ldr	r2, [pc, #96]	; (8004424 <TIM_OC2_SetConfig+0xec>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d003      	beq.n	80043ce <TIM_OC2_SetConfig+0x96>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a17      	ldr	r2, [pc, #92]	; (8004428 <TIM_OC2_SetConfig+0xf0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d113      	bne.n	80043f6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4a16      	ldr	r2, [pc, #88]	; (800442c <TIM_OC2_SetConfig+0xf4>)
 80043d2:	4013      	ands	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	4a15      	ldr	r2, [pc, #84]	; (8004430 <TIM_OC2_SetConfig+0xf8>)
 80043da:	4013      	ands	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	621a      	str	r2, [r3, #32]
}
 8004410:	46c0      	nop			; (mov r8, r8)
 8004412:	46bd      	mov	sp, r7
 8004414:	b006      	add	sp, #24
 8004416:	bd80      	pop	{r7, pc}
 8004418:	feff8fff 	.word	0xfeff8fff
 800441c:	fffffcff 	.word	0xfffffcff
 8004420:	40012c00 	.word	0x40012c00
 8004424:	40014400 	.word	0x40014400
 8004428:	40014800 	.word	0x40014800
 800442c:	fffffbff 	.word	0xfffffbff
 8004430:	fffff7ff 	.word	0xfffff7ff

08004434 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	4a31      	ldr	r2, [pc, #196]	; (8004510 <TIM_OC3_SetConfig+0xdc>)
 800444a:	401a      	ands	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4a2d      	ldr	r2, [pc, #180]	; (8004514 <TIM_OC3_SetConfig+0xe0>)
 8004460:	4013      	ands	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2203      	movs	r2, #3
 8004468:	4393      	bics	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	4a27      	ldr	r2, [pc, #156]	; (8004518 <TIM_OC3_SetConfig+0xe4>)
 800447a:	4013      	ands	r3, r2
 800447c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	021b      	lsls	r3, r3, #8
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a23      	ldr	r2, [pc, #140]	; (800451c <TIM_OC3_SetConfig+0xe8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d10d      	bne.n	80044ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	4a22      	ldr	r2, [pc, #136]	; (8004520 <TIM_OC3_SetConfig+0xec>)
 8004496:	4013      	ands	r3, r2
 8004498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	021b      	lsls	r3, r3, #8
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	4a1e      	ldr	r2, [pc, #120]	; (8004524 <TIM_OC3_SetConfig+0xf0>)
 80044aa:	4013      	ands	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a1a      	ldr	r2, [pc, #104]	; (800451c <TIM_OC3_SetConfig+0xe8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d007      	beq.n	80044c6 <TIM_OC3_SetConfig+0x92>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a1b      	ldr	r2, [pc, #108]	; (8004528 <TIM_OC3_SetConfig+0xf4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d003      	beq.n	80044c6 <TIM_OC3_SetConfig+0x92>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a1a      	ldr	r2, [pc, #104]	; (800452c <TIM_OC3_SetConfig+0xf8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d113      	bne.n	80044ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4a19      	ldr	r2, [pc, #100]	; (8004530 <TIM_OC3_SetConfig+0xfc>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	4a18      	ldr	r2, [pc, #96]	; (8004534 <TIM_OC3_SetConfig+0x100>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4313      	orrs	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	621a      	str	r2, [r3, #32]
}
 8004508:	46c0      	nop			; (mov r8, r8)
 800450a:	46bd      	mov	sp, r7
 800450c:	b006      	add	sp, #24
 800450e:	bd80      	pop	{r7, pc}
 8004510:	fffffeff 	.word	0xfffffeff
 8004514:	fffeff8f 	.word	0xfffeff8f
 8004518:	fffffdff 	.word	0xfffffdff
 800451c:	40012c00 	.word	0x40012c00
 8004520:	fffff7ff 	.word	0xfffff7ff
 8004524:	fffffbff 	.word	0xfffffbff
 8004528:	40014400 	.word	0x40014400
 800452c:	40014800 	.word	0x40014800
 8004530:	ffffefff 	.word	0xffffefff
 8004534:	ffffdfff 	.word	0xffffdfff

08004538 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	4a24      	ldr	r2, [pc, #144]	; (80045e0 <TIM_OC4_SetConfig+0xa8>)
 800454e:	401a      	ands	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4a20      	ldr	r2, [pc, #128]	; (80045e4 <TIM_OC4_SetConfig+0xac>)
 8004564:	4013      	ands	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4a1f      	ldr	r2, [pc, #124]	; (80045e8 <TIM_OC4_SetConfig+0xb0>)
 800456c:	4013      	ands	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	021b      	lsls	r3, r3, #8
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4313      	orrs	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	4a1b      	ldr	r2, [pc, #108]	; (80045ec <TIM_OC4_SetConfig+0xb4>)
 8004580:	4013      	ands	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	031b      	lsls	r3, r3, #12
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a17      	ldr	r2, [pc, #92]	; (80045f0 <TIM_OC4_SetConfig+0xb8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d007      	beq.n	80045a8 <TIM_OC4_SetConfig+0x70>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a16      	ldr	r2, [pc, #88]	; (80045f4 <TIM_OC4_SetConfig+0xbc>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d003      	beq.n	80045a8 <TIM_OC4_SetConfig+0x70>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a15      	ldr	r2, [pc, #84]	; (80045f8 <TIM_OC4_SetConfig+0xc0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d109      	bne.n	80045bc <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	4a14      	ldr	r2, [pc, #80]	; (80045fc <TIM_OC4_SetConfig+0xc4>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	019b      	lsls	r3, r3, #6
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	621a      	str	r2, [r3, #32]
}
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	46bd      	mov	sp, r7
 80045da:	b006      	add	sp, #24
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	ffffefff 	.word	0xffffefff
 80045e4:	feff8fff 	.word	0xfeff8fff
 80045e8:	fffffcff 	.word	0xfffffcff
 80045ec:	ffffdfff 	.word	0xffffdfff
 80045f0:	40012c00 	.word	0x40012c00
 80045f4:	40014400 	.word	0x40014400
 80045f8:	40014800 	.word	0x40014800
 80045fc:	ffffbfff 	.word	0xffffbfff

08004600 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	4a21      	ldr	r2, [pc, #132]	; (800469c <TIM_OC5_SetConfig+0x9c>)
 8004616:	401a      	ands	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4a1d      	ldr	r2, [pc, #116]	; (80046a0 <TIM_OC5_SetConfig+0xa0>)
 800462c:	4013      	ands	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	4a19      	ldr	r2, [pc, #100]	; (80046a4 <TIM_OC5_SetConfig+0xa4>)
 800463e:	4013      	ands	r3, r2
 8004640:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	041b      	lsls	r3, r3, #16
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a15      	ldr	r2, [pc, #84]	; (80046a8 <TIM_OC5_SetConfig+0xa8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d007      	beq.n	8004666 <TIM_OC5_SetConfig+0x66>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a14      	ldr	r2, [pc, #80]	; (80046ac <TIM_OC5_SetConfig+0xac>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d003      	beq.n	8004666 <TIM_OC5_SetConfig+0x66>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a13      	ldr	r2, [pc, #76]	; (80046b0 <TIM_OC5_SetConfig+0xb0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d109      	bne.n	800467a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	4a0c      	ldr	r2, [pc, #48]	; (800469c <TIM_OC5_SetConfig+0x9c>)
 800466a:	4013      	ands	r3, r2
 800466c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	621a      	str	r2, [r3, #32]
}
 8004694:	46c0      	nop			; (mov r8, r8)
 8004696:	46bd      	mov	sp, r7
 8004698:	b006      	add	sp, #24
 800469a:	bd80      	pop	{r7, pc}
 800469c:	fffeffff 	.word	0xfffeffff
 80046a0:	fffeff8f 	.word	0xfffeff8f
 80046a4:	fffdffff 	.word	0xfffdffff
 80046a8:	40012c00 	.word	0x40012c00
 80046ac:	40014400 	.word	0x40014400
 80046b0:	40014800 	.word	0x40014800

080046b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	4a22      	ldr	r2, [pc, #136]	; (8004754 <TIM_OC6_SetConfig+0xa0>)
 80046ca:	401a      	ands	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4a1e      	ldr	r2, [pc, #120]	; (8004758 <TIM_OC6_SetConfig+0xa4>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	021b      	lsls	r3, r3, #8
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4a1a      	ldr	r2, [pc, #104]	; (800475c <TIM_OC6_SetConfig+0xa8>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	051b      	lsls	r3, r3, #20
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a16      	ldr	r2, [pc, #88]	; (8004760 <TIM_OC6_SetConfig+0xac>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d007      	beq.n	800471c <TIM_OC6_SetConfig+0x68>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a15      	ldr	r2, [pc, #84]	; (8004764 <TIM_OC6_SetConfig+0xb0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d003      	beq.n	800471c <TIM_OC6_SetConfig+0x68>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a14      	ldr	r2, [pc, #80]	; (8004768 <TIM_OC6_SetConfig+0xb4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d109      	bne.n	8004730 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	4a13      	ldr	r2, [pc, #76]	; (800476c <TIM_OC6_SetConfig+0xb8>)
 8004720:	4013      	ands	r3, r2
 8004722:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	029b      	lsls	r3, r3, #10
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	621a      	str	r2, [r3, #32]
}
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	46bd      	mov	sp, r7
 800474e:	b006      	add	sp, #24
 8004750:	bd80      	pop	{r7, pc}
 8004752:	46c0      	nop			; (mov r8, r8)
 8004754:	ffefffff 	.word	0xffefffff
 8004758:	feff8fff 	.word	0xfeff8fff
 800475c:	ffdfffff 	.word	0xffdfffff
 8004760:	40012c00 	.word	0x40012c00
 8004764:	40014400 	.word	0x40014400
 8004768:	40014800 	.word	0x40014800
 800476c:	fffbffff 	.word	0xfffbffff

08004770 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	2201      	movs	r2, #1
 8004788:	4393      	bics	r3, r2
 800478a:	001a      	movs	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	22f0      	movs	r2, #240	; 0xf0
 800479a:	4393      	bics	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	220a      	movs	r2, #10
 80047ac:	4393      	bics	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	621a      	str	r2, [r3, #32]
}
 80047c4:	46c0      	nop			; (mov r8, r8)
 80047c6:	46bd      	mov	sp, r7
 80047c8:	b006      	add	sp, #24
 80047ca:	bd80      	pop	{r7, pc}

080047cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	2210      	movs	r2, #16
 80047e4:	4393      	bics	r3, r2
 80047e6:	001a      	movs	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	4a0d      	ldr	r2, [pc, #52]	; (800482c <TIM_TI2_ConfigInputStage+0x60>)
 80047f6:	4013      	ands	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	031b      	lsls	r3, r3, #12
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	22a0      	movs	r2, #160	; 0xa0
 8004808:	4393      	bics	r3, r2
 800480a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	621a      	str	r2, [r3, #32]
}
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	46bd      	mov	sp, r7
 8004826:	b006      	add	sp, #24
 8004828:	bd80      	pop	{r7, pc}
 800482a:	46c0      	nop			; (mov r8, r8)
 800482c:	ffff0fff 	.word	0xffff0fff

08004830 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4a08      	ldr	r2, [pc, #32]	; (8004864 <TIM_ITRx_SetConfig+0x34>)
 8004844:	4013      	ands	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4313      	orrs	r3, r2
 800484e:	2207      	movs	r2, #7
 8004850:	4313      	orrs	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	609a      	str	r2, [r3, #8]
}
 800485a:	46c0      	nop			; (mov r8, r8)
 800485c:	46bd      	mov	sp, r7
 800485e:	b004      	add	sp, #16
 8004860:	bd80      	pop	{r7, pc}
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	ffcfff8f 	.word	0xffcfff8f

08004868 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
 8004874:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <TIM_ETR_SetConfig+0x3c>)
 8004880:	4013      	ands	r3, r2
 8004882:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	021a      	lsls	r2, r3, #8
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	431a      	orrs	r2, r3
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	4313      	orrs	r3, r2
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	609a      	str	r2, [r3, #8]
}
 800489c:	46c0      	nop			; (mov r8, r8)
 800489e:	46bd      	mov	sp, r7
 80048a0:	b006      	add	sp, #24
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	ffff00ff 	.word	0xffff00ff

080048a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	221f      	movs	r2, #31
 80048b8:	4013      	ands	r3, r2
 80048ba:	2201      	movs	r2, #1
 80048bc:	409a      	lsls	r2, r3
 80048be:	0013      	movs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	43d2      	mvns	r2, r2
 80048ca:	401a      	ands	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a1a      	ldr	r2, [r3, #32]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	211f      	movs	r1, #31
 80048d8:	400b      	ands	r3, r1
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	4099      	lsls	r1, r3
 80048de:	000b      	movs	r3, r1
 80048e0:	431a      	orrs	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	621a      	str	r2, [r3, #32]
}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	46bd      	mov	sp, r7
 80048ea:	b006      	add	sp, #24
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	223c      	movs	r2, #60	; 0x3c
 80048fe:	5c9b      	ldrb	r3, [r3, r2]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004904:	2302      	movs	r3, #2
 8004906:	e04a      	b.n	800499e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	223c      	movs	r2, #60	; 0x3c
 800490c:	2101      	movs	r1, #1
 800490e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	223d      	movs	r2, #61	; 0x3d
 8004914:	2102      	movs	r1, #2
 8004916:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a1e      	ldr	r2, [pc, #120]	; (80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d108      	bne.n	8004944 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4a1d      	ldr	r2, [pc, #116]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004936:	4013      	ands	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2270      	movs	r2, #112	; 0x70
 8004948:	4393      	bics	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a11      	ldr	r2, [pc, #68]	; (80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d004      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a10      	ldr	r2, [pc, #64]	; (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d10c      	bne.n	800498c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2280      	movs	r2, #128	; 0x80
 8004976:	4393      	bics	r3, r2
 8004978:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	4313      	orrs	r3, r2
 8004982:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	223d      	movs	r2, #61	; 0x3d
 8004990:	2101      	movs	r1, #1
 8004992:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	223c      	movs	r2, #60	; 0x3c
 8004998:	2100      	movs	r1, #0
 800499a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	0018      	movs	r0, r3
 80049a0:	46bd      	mov	sp, r7
 80049a2:	b004      	add	sp, #16
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	46c0      	nop			; (mov r8, r8)
 80049a8:	40012c00 	.word	0x40012c00
 80049ac:	ff0fffff 	.word	0xff0fffff
 80049b0:	40000400 	.word	0x40000400

080049b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e046      	b.n	8004a54 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2288      	movs	r2, #136	; 0x88
 80049ca:	589b      	ldr	r3, [r3, r2]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d107      	bne.n	80049e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2284      	movs	r2, #132	; 0x84
 80049d4:	2100      	movs	r1, #0
 80049d6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	0018      	movs	r0, r3
 80049dc:	f7fc fe92 	bl	8001704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2288      	movs	r2, #136	; 0x88
 80049e4:	2124      	movs	r1, #36	; 0x24
 80049e6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2101      	movs	r1, #1
 80049f4:	438a      	bics	r2, r1
 80049f6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	0018      	movs	r0, r3
 8004a04:	f000 fa10 	bl	8004e28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	f000 f8a2 	bl	8004b54 <UART_SetConfig>
 8004a10:	0003      	movs	r3, r0
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e01c      	b.n	8004a54 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	490d      	ldr	r1, [pc, #52]	; (8004a5c <HAL_UART_Init+0xa8>)
 8004a26:	400a      	ands	r2, r1
 8004a28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	212a      	movs	r1, #42	; 0x2a
 8004a36:	438a      	bics	r2, r1
 8004a38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2101      	movs	r1, #1
 8004a46:	430a      	orrs	r2, r1
 8004a48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f000 fa9f 	bl	8004f90 <UART_CheckIdleState>
 8004a52:	0003      	movs	r3, r0
}
 8004a54:	0018      	movs	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	b002      	add	sp, #8
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	ffffb7ff 	.word	0xffffb7ff

08004a60 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	1dbb      	adds	r3, r7, #6
 8004a6c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	228c      	movs	r2, #140	; 0x8c
 8004a72:	589b      	ldr	r3, [r3, r2]
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d145      	bne.n	8004b04 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_UART_Receive_DMA+0x26>
 8004a7e:	1dbb      	adds	r3, r7, #6
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e03d      	b.n	8004b06 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	2380      	movs	r3, #128	; 0x80
 8004a90:	015b      	lsls	r3, r3, #5
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d109      	bne.n	8004aaa <HAL_UART_Receive_DMA+0x4a>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d105      	bne.n	8004aaa <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d001      	beq.n	8004aaa <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e02d      	b.n	8004b06 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	2380      	movs	r3, #128	; 0x80
 8004ab8:	041b      	lsls	r3, r3, #16
 8004aba:	4013      	ands	r3, r2
 8004abc:	d019      	beq.n	8004af2 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004abe:	f3ef 8310 	mrs	r3, PRIMASK
 8004ac2:	613b      	str	r3, [r7, #16]
  return(result);
 8004ac4:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ac6:	61fb      	str	r3, [r7, #28]
 8004ac8:	2301      	movs	r3, #1
 8004aca:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f383 8810 	msr	PRIMASK, r3
}
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2180      	movs	r1, #128	; 0x80
 8004ae0:	04c9      	lsls	r1, r1, #19
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	f383 8810 	msr	PRIMASK, r3
}
 8004af0:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004af2:	1dbb      	adds	r3, r7, #6
 8004af4:	881a      	ldrh	r2, [r3, #0]
 8004af6:	68b9      	ldr	r1, [r7, #8]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	0018      	movs	r0, r3
 8004afc:	f000 fb62 	bl	80051c4 <UART_Start_Receive_DMA>
 8004b00:	0003      	movs	r3, r0
 8004b02:	e000      	b.n	8004b06 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004b04:	2302      	movs	r3, #2
  }
}
 8004b06:	0018      	movs	r0, r3
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	b008      	add	sp, #32
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b082      	sub	sp, #8
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	b002      	add	sp, #8
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	b002      	add	sp, #8
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b082      	sub	sp, #8
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	b002      	add	sp, #8
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	000a      	movs	r2, r1
 8004b48:	1cbb      	adds	r3, r7, #2
 8004b4a:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b4c:	46c0      	nop			; (mov r8, r8)
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	b002      	add	sp, #8
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b5c:	231a      	movs	r3, #26
 8004b5e:	18fb      	adds	r3, r7, r3
 8004b60:	2200      	movs	r2, #0
 8004b62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4aa1      	ldr	r2, [pc, #644]	; (8004e08 <UART_SetConfig+0x2b4>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	0019      	movs	r1, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	69fa      	ldr	r2, [r7, #28]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	4a9c      	ldr	r2, [pc, #624]	; (8004e0c <UART_SetConfig+0x2b8>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	0019      	movs	r1, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	69fa      	ldr	r2, [r7, #28]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	4a93      	ldr	r2, [pc, #588]	; (8004e10 <UART_SetConfig+0x2bc>)
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	0019      	movs	r1, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69fa      	ldr	r2, [r7, #28]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd6:	220f      	movs	r2, #15
 8004bd8:	4393      	bics	r3, r2
 8004bda:	0019      	movs	r1, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a89      	ldr	r2, [pc, #548]	; (8004e14 <UART_SetConfig+0x2c0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d127      	bne.n	8004c42 <UART_SetConfig+0xee>
 8004bf2:	4b89      	ldr	r3, [pc, #548]	; (8004e18 <UART_SetConfig+0x2c4>)
 8004bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf6:	2203      	movs	r2, #3
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d017      	beq.n	8004c2e <UART_SetConfig+0xda>
 8004bfe:	d81b      	bhi.n	8004c38 <UART_SetConfig+0xe4>
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d00a      	beq.n	8004c1a <UART_SetConfig+0xc6>
 8004c04:	d818      	bhi.n	8004c38 <UART_SetConfig+0xe4>
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <UART_SetConfig+0xbc>
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d00a      	beq.n	8004c24 <UART_SetConfig+0xd0>
 8004c0e:	e013      	b.n	8004c38 <UART_SetConfig+0xe4>
 8004c10:	231b      	movs	r3, #27
 8004c12:	18fb      	adds	r3, r7, r3
 8004c14:	2200      	movs	r2, #0
 8004c16:	701a      	strb	r2, [r3, #0]
 8004c18:	e021      	b.n	8004c5e <UART_SetConfig+0x10a>
 8004c1a:	231b      	movs	r3, #27
 8004c1c:	18fb      	adds	r3, r7, r3
 8004c1e:	2202      	movs	r2, #2
 8004c20:	701a      	strb	r2, [r3, #0]
 8004c22:	e01c      	b.n	8004c5e <UART_SetConfig+0x10a>
 8004c24:	231b      	movs	r3, #27
 8004c26:	18fb      	adds	r3, r7, r3
 8004c28:	2204      	movs	r2, #4
 8004c2a:	701a      	strb	r2, [r3, #0]
 8004c2c:	e017      	b.n	8004c5e <UART_SetConfig+0x10a>
 8004c2e:	231b      	movs	r3, #27
 8004c30:	18fb      	adds	r3, r7, r3
 8004c32:	2208      	movs	r2, #8
 8004c34:	701a      	strb	r2, [r3, #0]
 8004c36:	e012      	b.n	8004c5e <UART_SetConfig+0x10a>
 8004c38:	231b      	movs	r3, #27
 8004c3a:	18fb      	adds	r3, r7, r3
 8004c3c:	2210      	movs	r2, #16
 8004c3e:	701a      	strb	r2, [r3, #0]
 8004c40:	e00d      	b.n	8004c5e <UART_SetConfig+0x10a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a75      	ldr	r2, [pc, #468]	; (8004e1c <UART_SetConfig+0x2c8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d104      	bne.n	8004c56 <UART_SetConfig+0x102>
 8004c4c:	231b      	movs	r3, #27
 8004c4e:	18fb      	adds	r3, r7, r3
 8004c50:	2200      	movs	r2, #0
 8004c52:	701a      	strb	r2, [r3, #0]
 8004c54:	e003      	b.n	8004c5e <UART_SetConfig+0x10a>
 8004c56:	231b      	movs	r3, #27
 8004c58:	18fb      	adds	r3, r7, r3
 8004c5a:	2210      	movs	r2, #16
 8004c5c:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69da      	ldr	r2, [r3, #28]
 8004c62:	2380      	movs	r3, #128	; 0x80
 8004c64:	021b      	lsls	r3, r3, #8
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d000      	beq.n	8004c6c <UART_SetConfig+0x118>
 8004c6a:	e065      	b.n	8004d38 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8004c6c:	231b      	movs	r3, #27
 8004c6e:	18fb      	adds	r3, r7, r3
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d015      	beq.n	8004ca2 <UART_SetConfig+0x14e>
 8004c76:	dc18      	bgt.n	8004caa <UART_SetConfig+0x156>
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d00d      	beq.n	8004c98 <UART_SetConfig+0x144>
 8004c7c:	dc15      	bgt.n	8004caa <UART_SetConfig+0x156>
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <UART_SetConfig+0x134>
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d005      	beq.n	8004c92 <UART_SetConfig+0x13e>
 8004c86:	e010      	b.n	8004caa <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c88:	f7fe fc04 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
 8004c8c:	0003      	movs	r3, r0
 8004c8e:	617b      	str	r3, [r7, #20]
        break;
 8004c90:	e012      	b.n	8004cb8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c92:	4b63      	ldr	r3, [pc, #396]	; (8004e20 <UART_SetConfig+0x2cc>)
 8004c94:	617b      	str	r3, [r7, #20]
        break;
 8004c96:	e00f      	b.n	8004cb8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c98:	f7fe fb72 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 8004c9c:	0003      	movs	r3, r0
 8004c9e:	617b      	str	r3, [r7, #20]
        break;
 8004ca0:	e00a      	b.n	8004cb8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ca2:	2380      	movs	r3, #128	; 0x80
 8004ca4:	021b      	lsls	r3, r3, #8
 8004ca6:	617b      	str	r3, [r7, #20]
        break;
 8004ca8:	e006      	b.n	8004cb8 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004cae:	231a      	movs	r3, #26
 8004cb0:	18fb      	adds	r3, r7, r3
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	701a      	strb	r2, [r3, #0]
        break;
 8004cb6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d100      	bne.n	8004cc0 <UART_SetConfig+0x16c>
 8004cbe:	e08d      	b.n	8004ddc <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cc4:	4b57      	ldr	r3, [pc, #348]	; (8004e24 <UART_SetConfig+0x2d0>)
 8004cc6:	0052      	lsls	r2, r2, #1
 8004cc8:	5ad3      	ldrh	r3, [r2, r3]
 8004cca:	0019      	movs	r1, r3
 8004ccc:	6978      	ldr	r0, [r7, #20]
 8004cce:	f7fb fa17 	bl	8000100 <__udivsi3>
 8004cd2:	0003      	movs	r3, r0
 8004cd4:	005a      	lsls	r2, r3, #1
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	085b      	lsrs	r3, r3, #1
 8004cdc:	18d2      	adds	r2, r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	0019      	movs	r1, r3
 8004ce4:	0010      	movs	r0, r2
 8004ce6:	f7fb fa0b 	bl	8000100 <__udivsi3>
 8004cea:	0003      	movs	r3, r0
 8004cec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	2b0f      	cmp	r3, #15
 8004cf2:	d91c      	bls.n	8004d2e <UART_SetConfig+0x1da>
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	2380      	movs	r3, #128	; 0x80
 8004cf8:	025b      	lsls	r3, r3, #9
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d217      	bcs.n	8004d2e <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	200e      	movs	r0, #14
 8004d04:	183b      	adds	r3, r7, r0
 8004d06:	210f      	movs	r1, #15
 8004d08:	438a      	bics	r2, r1
 8004d0a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	085b      	lsrs	r3, r3, #1
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2207      	movs	r2, #7
 8004d14:	4013      	ands	r3, r2
 8004d16:	b299      	uxth	r1, r3
 8004d18:	183b      	adds	r3, r7, r0
 8004d1a:	183a      	adds	r2, r7, r0
 8004d1c:	8812      	ldrh	r2, [r2, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	183a      	adds	r2, r7, r0
 8004d28:	8812      	ldrh	r2, [r2, #0]
 8004d2a:	60da      	str	r2, [r3, #12]
 8004d2c:	e056      	b.n	8004ddc <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004d2e:	231a      	movs	r3, #26
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	2201      	movs	r2, #1
 8004d34:	701a      	strb	r2, [r3, #0]
 8004d36:	e051      	b.n	8004ddc <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d38:	231b      	movs	r3, #27
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d015      	beq.n	8004d6e <UART_SetConfig+0x21a>
 8004d42:	dc18      	bgt.n	8004d76 <UART_SetConfig+0x222>
 8004d44:	2b04      	cmp	r3, #4
 8004d46:	d00d      	beq.n	8004d64 <UART_SetConfig+0x210>
 8004d48:	dc15      	bgt.n	8004d76 <UART_SetConfig+0x222>
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <UART_SetConfig+0x200>
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d005      	beq.n	8004d5e <UART_SetConfig+0x20a>
 8004d52:	e010      	b.n	8004d76 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d54:	f7fe fb9e 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
 8004d58:	0003      	movs	r3, r0
 8004d5a:	617b      	str	r3, [r7, #20]
        break;
 8004d5c:	e012      	b.n	8004d84 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d5e:	4b30      	ldr	r3, [pc, #192]	; (8004e20 <UART_SetConfig+0x2cc>)
 8004d60:	617b      	str	r3, [r7, #20]
        break;
 8004d62:	e00f      	b.n	8004d84 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d64:	f7fe fb0c 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 8004d68:	0003      	movs	r3, r0
 8004d6a:	617b      	str	r3, [r7, #20]
        break;
 8004d6c:	e00a      	b.n	8004d84 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d6e:	2380      	movs	r3, #128	; 0x80
 8004d70:	021b      	lsls	r3, r3, #8
 8004d72:	617b      	str	r3, [r7, #20]
        break;
 8004d74:	e006      	b.n	8004d84 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d7a:	231a      	movs	r3, #26
 8004d7c:	18fb      	adds	r3, r7, r3
 8004d7e:	2201      	movs	r2, #1
 8004d80:	701a      	strb	r2, [r3, #0]
        break;
 8004d82:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d028      	beq.n	8004ddc <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d8e:	4b25      	ldr	r3, [pc, #148]	; (8004e24 <UART_SetConfig+0x2d0>)
 8004d90:	0052      	lsls	r2, r2, #1
 8004d92:	5ad3      	ldrh	r3, [r2, r3]
 8004d94:	0019      	movs	r1, r3
 8004d96:	6978      	ldr	r0, [r7, #20]
 8004d98:	f7fb f9b2 	bl	8000100 <__udivsi3>
 8004d9c:	0003      	movs	r3, r0
 8004d9e:	001a      	movs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	085b      	lsrs	r3, r3, #1
 8004da6:	18d2      	adds	r2, r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	0019      	movs	r1, r3
 8004dae:	0010      	movs	r0, r2
 8004db0:	f7fb f9a6 	bl	8000100 <__udivsi3>
 8004db4:	0003      	movs	r3, r0
 8004db6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	2b0f      	cmp	r3, #15
 8004dbc:	d90a      	bls.n	8004dd4 <UART_SetConfig+0x280>
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	2380      	movs	r3, #128	; 0x80
 8004dc2:	025b      	lsls	r3, r3, #9
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d205      	bcs.n	8004dd4 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	60da      	str	r2, [r3, #12]
 8004dd2:	e003      	b.n	8004ddc <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004dd4:	231a      	movs	r3, #26
 8004dd6:	18fb      	adds	r3, r7, r3
 8004dd8:	2201      	movs	r2, #1
 8004dda:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	226a      	movs	r2, #106	; 0x6a
 8004de0:	2101      	movs	r1, #1
 8004de2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2268      	movs	r2, #104	; 0x68
 8004de8:	2101      	movs	r1, #1
 8004dea:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004df8:	231a      	movs	r3, #26
 8004dfa:	18fb      	adds	r3, r7, r3
 8004dfc:	781b      	ldrb	r3, [r3, #0]
}
 8004dfe:	0018      	movs	r0, r3
 8004e00:	46bd      	mov	sp, r7
 8004e02:	b008      	add	sp, #32
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	cfff69f3 	.word	0xcfff69f3
 8004e0c:	ffffcfff 	.word	0xffffcfff
 8004e10:	11fff4ff 	.word	0x11fff4ff
 8004e14:	40013800 	.word	0x40013800
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	40004400 	.word	0x40004400
 8004e20:	00f42400 	.word	0x00f42400
 8004e24:	080057cc 	.word	0x080057cc

08004e28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e34:	2208      	movs	r2, #8
 8004e36:	4013      	ands	r3, r2
 8004e38:	d00b      	beq.n	8004e52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	4a4a      	ldr	r2, [pc, #296]	; (8004f6c <UART_AdvFeatureConfig+0x144>)
 8004e42:	4013      	ands	r3, r2
 8004e44:	0019      	movs	r1, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e56:	2201      	movs	r2, #1
 8004e58:	4013      	ands	r3, r2
 8004e5a:	d00b      	beq.n	8004e74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	4a43      	ldr	r2, [pc, #268]	; (8004f70 <UART_AdvFeatureConfig+0x148>)
 8004e64:	4013      	ands	r3, r2
 8004e66:	0019      	movs	r1, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e78:	2202      	movs	r2, #2
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	d00b      	beq.n	8004e96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	4a3b      	ldr	r2, [pc, #236]	; (8004f74 <UART_AdvFeatureConfig+0x14c>)
 8004e86:	4013      	ands	r3, r2
 8004e88:	0019      	movs	r1, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d00b      	beq.n	8004eb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	4a34      	ldr	r2, [pc, #208]	; (8004f78 <UART_AdvFeatureConfig+0x150>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	0019      	movs	r1, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebc:	2210      	movs	r2, #16
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	d00b      	beq.n	8004eda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	4a2c      	ldr	r2, [pc, #176]	; (8004f7c <UART_AdvFeatureConfig+0x154>)
 8004eca:	4013      	ands	r3, r2
 8004ecc:	0019      	movs	r1, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ede:	2220      	movs	r2, #32
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	d00b      	beq.n	8004efc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	4a25      	ldr	r2, [pc, #148]	; (8004f80 <UART_AdvFeatureConfig+0x158>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	0019      	movs	r1, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f00:	2240      	movs	r2, #64	; 0x40
 8004f02:	4013      	ands	r3, r2
 8004f04:	d01d      	beq.n	8004f42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	4a1d      	ldr	r2, [pc, #116]	; (8004f84 <UART_AdvFeatureConfig+0x15c>)
 8004f0e:	4013      	ands	r3, r2
 8004f10:	0019      	movs	r1, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f22:	2380      	movs	r3, #128	; 0x80
 8004f24:	035b      	lsls	r3, r3, #13
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d10b      	bne.n	8004f42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4a15      	ldr	r2, [pc, #84]	; (8004f88 <UART_AdvFeatureConfig+0x160>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	0019      	movs	r1, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f46:	2280      	movs	r2, #128	; 0x80
 8004f48:	4013      	ands	r3, r2
 8004f4a:	d00b      	beq.n	8004f64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	4a0e      	ldr	r2, [pc, #56]	; (8004f8c <UART_AdvFeatureConfig+0x164>)
 8004f54:	4013      	ands	r3, r2
 8004f56:	0019      	movs	r1, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	605a      	str	r2, [r3, #4]
  }
}
 8004f64:	46c0      	nop			; (mov r8, r8)
 8004f66:	46bd      	mov	sp, r7
 8004f68:	b002      	add	sp, #8
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	ffff7fff 	.word	0xffff7fff
 8004f70:	fffdffff 	.word	0xfffdffff
 8004f74:	fffeffff 	.word	0xfffeffff
 8004f78:	fffbffff 	.word	0xfffbffff
 8004f7c:	ffffefff 	.word	0xffffefff
 8004f80:	ffffdfff 	.word	0xffffdfff
 8004f84:	ffefffff 	.word	0xffefffff
 8004f88:	ff9fffff 	.word	0xff9fffff
 8004f8c:	fff7ffff 	.word	0xfff7ffff

08004f90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b092      	sub	sp, #72	; 0x48
 8004f94:	af02      	add	r7, sp, #8
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2290      	movs	r2, #144	; 0x90
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fa0:	f7fd f824 	bl	8001fec <HAL_GetTick>
 8004fa4:	0003      	movs	r3, r0
 8004fa6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2208      	movs	r2, #8
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	2b08      	cmp	r3, #8
 8004fb4:	d12d      	bne.n	8005012 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb8:	2280      	movs	r2, #128	; 0x80
 8004fba:	0391      	lsls	r1, r2, #14
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	4a47      	ldr	r2, [pc, #284]	; (80050dc <UART_CheckIdleState+0x14c>)
 8004fc0:	9200      	str	r2, [sp, #0]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f000 f88e 	bl	80050e4 <UART_WaitOnFlagUntilTimeout>
 8004fc8:	1e03      	subs	r3, r0, #0
 8004fca:	d022      	beq.n	8005012 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004fd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	f383 8810 	msr	PRIMASK, r3
}
 8004fe0:	46c0      	nop			; (mov r8, r8)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2180      	movs	r1, #128	; 0x80
 8004fee:	438a      	bics	r2, r1
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff8:	f383 8810 	msr	PRIMASK, r3
}
 8004ffc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2288      	movs	r2, #136	; 0x88
 8005002:	2120      	movs	r1, #32
 8005004:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2284      	movs	r2, #132	; 0x84
 800500a:	2100      	movs	r1, #0
 800500c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e060      	b.n	80050d4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2204      	movs	r2, #4
 800501a:	4013      	ands	r3, r2
 800501c:	2b04      	cmp	r3, #4
 800501e:	d146      	bne.n	80050ae <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005022:	2280      	movs	r2, #128	; 0x80
 8005024:	03d1      	lsls	r1, r2, #15
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	4a2c      	ldr	r2, [pc, #176]	; (80050dc <UART_CheckIdleState+0x14c>)
 800502a:	9200      	str	r2, [sp, #0]
 800502c:	2200      	movs	r2, #0
 800502e:	f000 f859 	bl	80050e4 <UART_WaitOnFlagUntilTimeout>
 8005032:	1e03      	subs	r3, r0, #0
 8005034:	d03b      	beq.n	80050ae <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005036:	f3ef 8310 	mrs	r3, PRIMASK
 800503a:	60fb      	str	r3, [r7, #12]
  return(result);
 800503c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800503e:	637b      	str	r3, [r7, #52]	; 0x34
 8005040:	2301      	movs	r3, #1
 8005042:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f383 8810 	msr	PRIMASK, r3
}
 800504a:	46c0      	nop			; (mov r8, r8)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4922      	ldr	r1, [pc, #136]	; (80050e0 <UART_CheckIdleState+0x150>)
 8005058:	400a      	ands	r2, r1
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f383 8810 	msr	PRIMASK, r3
}
 8005066:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005068:	f3ef 8310 	mrs	r3, PRIMASK
 800506c:	61bb      	str	r3, [r7, #24]
  return(result);
 800506e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005070:	633b      	str	r3, [r7, #48]	; 0x30
 8005072:	2301      	movs	r3, #1
 8005074:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f383 8810 	msr	PRIMASK, r3
}
 800507c:	46c0      	nop			; (mov r8, r8)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2101      	movs	r1, #1
 800508a:	438a      	bics	r2, r1
 800508c:	609a      	str	r2, [r3, #8]
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	f383 8810 	msr	PRIMASK, r3
}
 8005098:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	228c      	movs	r2, #140	; 0x8c
 800509e:	2120      	movs	r1, #32
 80050a0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2284      	movs	r2, #132	; 0x84
 80050a6:	2100      	movs	r1, #0
 80050a8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e012      	b.n	80050d4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2288      	movs	r2, #136	; 0x88
 80050b2:	2120      	movs	r1, #32
 80050b4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	228c      	movs	r2, #140	; 0x8c
 80050ba:	2120      	movs	r1, #32
 80050bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2284      	movs	r2, #132	; 0x84
 80050ce:	2100      	movs	r1, #0
 80050d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	0018      	movs	r0, r3
 80050d6:	46bd      	mov	sp, r7
 80050d8:	b010      	add	sp, #64	; 0x40
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	01ffffff 	.word	0x01ffffff
 80050e0:	fffffedf 	.word	0xfffffedf

080050e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	1dfb      	adds	r3, r7, #7
 80050f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f4:	e051      	b.n	800519a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	3301      	adds	r3, #1
 80050fa:	d04e      	beq.n	800519a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fc:	f7fc ff76 	bl	8001fec <HAL_GetTick>
 8005100:	0002      	movs	r2, r0
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	429a      	cmp	r2, r3
 800510a:	d302      	bcc.n	8005112 <UART_WaitOnFlagUntilTimeout+0x2e>
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e051      	b.n	80051ba <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2204      	movs	r2, #4
 800511e:	4013      	ands	r3, r2
 8005120:	d03b      	beq.n	800519a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2b80      	cmp	r3, #128	; 0x80
 8005126:	d038      	beq.n	800519a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b40      	cmp	r3, #64	; 0x40
 800512c:	d035      	beq.n	800519a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	2208      	movs	r2, #8
 8005136:	4013      	ands	r3, r2
 8005138:	2b08      	cmp	r3, #8
 800513a:	d111      	bne.n	8005160 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2208      	movs	r2, #8
 8005142:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	0018      	movs	r0, r3
 8005148:	f000 f922 	bl	8005390 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2290      	movs	r2, #144	; 0x90
 8005150:	2108      	movs	r1, #8
 8005152:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2284      	movs	r2, #132	; 0x84
 8005158:	2100      	movs	r1, #0
 800515a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e02c      	b.n	80051ba <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69da      	ldr	r2, [r3, #28]
 8005166:	2380      	movs	r3, #128	; 0x80
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	401a      	ands	r2, r3
 800516c:	2380      	movs	r3, #128	; 0x80
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	429a      	cmp	r2, r3
 8005172:	d112      	bne.n	800519a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2280      	movs	r2, #128	; 0x80
 800517a:	0112      	lsls	r2, r2, #4
 800517c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	0018      	movs	r0, r3
 8005182:	f000 f905 	bl	8005390 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2290      	movs	r2, #144	; 0x90
 800518a:	2120      	movs	r1, #32
 800518c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2284      	movs	r2, #132	; 0x84
 8005192:	2100      	movs	r1, #0
 8005194:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e00f      	b.n	80051ba <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	4013      	ands	r3, r2
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	425a      	negs	r2, r3
 80051aa:	4153      	adcs	r3, r2
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	001a      	movs	r2, r3
 80051b0:	1dfb      	adds	r3, r7, #7
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d09e      	beq.n	80050f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	0018      	movs	r0, r3
 80051bc:	46bd      	mov	sp, r7
 80051be:	b004      	add	sp, #16
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b090      	sub	sp, #64	; 0x40
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	1dbb      	adds	r3, r7, #6
 80051d0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	1dba      	adds	r2, r7, #6
 80051dc:	215c      	movs	r1, #92	; 0x5c
 80051de:	8812      	ldrh	r2, [r2, #0]
 80051e0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2290      	movs	r2, #144	; 0x90
 80051e6:	2100      	movs	r1, #0
 80051e8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	228c      	movs	r2, #140	; 0x8c
 80051ee:	2122      	movs	r1, #34	; 0x22
 80051f0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2280      	movs	r2, #128	; 0x80
 80051f6:	589b      	ldr	r3, [r3, r2]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d02d      	beq.n	8005258 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2280      	movs	r2, #128	; 0x80
 8005200:	589b      	ldr	r3, [r3, r2]
 8005202:	4a40      	ldr	r2, [pc, #256]	; (8005304 <UART_Start_Receive_DMA+0x140>)
 8005204:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2280      	movs	r2, #128	; 0x80
 800520a:	589b      	ldr	r3, [r3, r2]
 800520c:	4a3e      	ldr	r2, [pc, #248]	; (8005308 <UART_Start_Receive_DMA+0x144>)
 800520e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2280      	movs	r2, #128	; 0x80
 8005214:	589b      	ldr	r3, [r3, r2]
 8005216:	4a3d      	ldr	r2, [pc, #244]	; (800530c <UART_Start_Receive_DMA+0x148>)
 8005218:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2280      	movs	r2, #128	; 0x80
 800521e:	589b      	ldr	r3, [r3, r2]
 8005220:	2200      	movs	r2, #0
 8005222:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2280      	movs	r2, #128	; 0x80
 8005228:	5898      	ldr	r0, [r3, r2]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3324      	adds	r3, #36	; 0x24
 8005230:	0019      	movs	r1, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005236:	001a      	movs	r2, r3
 8005238:	1dbb      	adds	r3, r7, #6
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	f7fd f86c 	bl	8002318 <HAL_DMA_Start_IT>
 8005240:	1e03      	subs	r3, r0, #0
 8005242:	d009      	beq.n	8005258 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2290      	movs	r2, #144	; 0x90
 8005248:	2110      	movs	r1, #16
 800524a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	228c      	movs	r2, #140	; 0x8c
 8005250:	2120      	movs	r1, #32
 8005252:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e050      	b.n	80052fa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d019      	beq.n	8005294 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005260:	f3ef 8310 	mrs	r3, PRIMASK
 8005264:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005266:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005268:	63fb      	str	r3, [r7, #60]	; 0x3c
 800526a:	2301      	movs	r3, #1
 800526c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800526e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005270:	f383 8810 	msr	PRIMASK, r3
}
 8005274:	46c0      	nop			; (mov r8, r8)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2180      	movs	r1, #128	; 0x80
 8005282:	0049      	lsls	r1, r1, #1
 8005284:	430a      	orrs	r2, r1
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800528a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800528c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528e:	f383 8810 	msr	PRIMASK, r3
}
 8005292:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005294:	f3ef 8310 	mrs	r3, PRIMASK
 8005298:	613b      	str	r3, [r7, #16]
  return(result);
 800529a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800529c:	63bb      	str	r3, [r7, #56]	; 0x38
 800529e:	2301      	movs	r3, #1
 80052a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f383 8810 	msr	PRIMASK, r3
}
 80052a8:	46c0      	nop			; (mov r8, r8)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2101      	movs	r1, #1
 80052b6:	430a      	orrs	r2, r1
 80052b8:	609a      	str	r2, [r3, #8]
 80052ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	f383 8810 	msr	PRIMASK, r3
}
 80052c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052c6:	f3ef 8310 	mrs	r3, PRIMASK
 80052ca:	61fb      	str	r3, [r7, #28]
  return(result);
 80052cc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ce:	637b      	str	r3, [r7, #52]	; 0x34
 80052d0:	2301      	movs	r3, #1
 80052d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	f383 8810 	msr	PRIMASK, r3
}
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2140      	movs	r1, #64	; 0x40
 80052e8:	430a      	orrs	r2, r1
 80052ea:	609a      	str	r2, [r3, #8]
 80052ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	f383 8810 	msr	PRIMASK, r3
}
 80052f6:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	0018      	movs	r0, r3
 80052fc:	46bd      	mov	sp, r7
 80052fe:	b010      	add	sp, #64	; 0x40
 8005300:	bd80      	pop	{r7, pc}
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	0800545d 	.word	0x0800545d
 8005308:	0800558d 	.word	0x0800558d
 800530c:	080055cf 	.word	0x080055cf

08005310 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b08a      	sub	sp, #40	; 0x28
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005318:	f3ef 8310 	mrs	r3, PRIMASK
 800531c:	60bb      	str	r3, [r7, #8]
  return(result);
 800531e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
 8005322:	2301      	movs	r3, #1
 8005324:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f383 8810 	msr	PRIMASK, r3
}
 800532c:	46c0      	nop			; (mov r8, r8)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	21c0      	movs	r1, #192	; 0xc0
 800533a:	438a      	bics	r2, r1
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f383 8810 	msr	PRIMASK, r3
}
 8005348:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800534a:	f3ef 8310 	mrs	r3, PRIMASK
 800534e:	617b      	str	r3, [r7, #20]
  return(result);
 8005350:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005352:	623b      	str	r3, [r7, #32]
 8005354:	2301      	movs	r3, #1
 8005356:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	f383 8810 	msr	PRIMASK, r3
}
 800535e:	46c0      	nop			; (mov r8, r8)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689a      	ldr	r2, [r3, #8]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4908      	ldr	r1, [pc, #32]	; (800538c <UART_EndTxTransfer+0x7c>)
 800536c:	400a      	ands	r2, r1
 800536e:	609a      	str	r2, [r3, #8]
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	f383 8810 	msr	PRIMASK, r3
}
 800537a:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2288      	movs	r2, #136	; 0x88
 8005380:	2120      	movs	r1, #32
 8005382:	5099      	str	r1, [r3, r2]
}
 8005384:	46c0      	nop			; (mov r8, r8)
 8005386:	46bd      	mov	sp, r7
 8005388:	b00a      	add	sp, #40	; 0x28
 800538a:	bd80      	pop	{r7, pc}
 800538c:	ff7fffff 	.word	0xff7fffff

08005390 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b08e      	sub	sp, #56	; 0x38
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005398:	f3ef 8310 	mrs	r3, PRIMASK
 800539c:	617b      	str	r3, [r7, #20]
  return(result);
 800539e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053a0:	637b      	str	r3, [r7, #52]	; 0x34
 80053a2:	2301      	movs	r3, #1
 80053a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	f383 8810 	msr	PRIMASK, r3
}
 80053ac:	46c0      	nop			; (mov r8, r8)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4926      	ldr	r1, [pc, #152]	; (8005454 <UART_EndRxTransfer+0xc4>)
 80053ba:	400a      	ands	r2, r1
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	f383 8810 	msr	PRIMASK, r3
}
 80053c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ca:	f3ef 8310 	mrs	r3, PRIMASK
 80053ce:	623b      	str	r3, [r7, #32]
  return(result);
 80053d0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053d2:	633b      	str	r3, [r7, #48]	; 0x30
 80053d4:	2301      	movs	r3, #1
 80053d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	f383 8810 	msr	PRIMASK, r3
}
 80053de:	46c0      	nop			; (mov r8, r8)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689a      	ldr	r2, [r3, #8]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	491b      	ldr	r1, [pc, #108]	; (8005458 <UART_EndRxTransfer+0xc8>)
 80053ec:	400a      	ands	r2, r1
 80053ee:	609a      	str	r2, [r3, #8]
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	f383 8810 	msr	PRIMASK, r3
}
 80053fa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005400:	2b01      	cmp	r3, #1
 8005402:	d118      	bne.n	8005436 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005404:	f3ef 8310 	mrs	r3, PRIMASK
 8005408:	60bb      	str	r3, [r7, #8]
  return(result);
 800540a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800540c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800540e:	2301      	movs	r3, #1
 8005410:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f383 8810 	msr	PRIMASK, r3
}
 8005418:	46c0      	nop			; (mov r8, r8)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2110      	movs	r1, #16
 8005426:	438a      	bics	r2, r1
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f383 8810 	msr	PRIMASK, r3
}
 8005434:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	228c      	movs	r2, #140	; 0x8c
 800543a:	2120      	movs	r1, #32
 800543c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	675a      	str	r2, [r3, #116]	; 0x74
}
 800544a:	46c0      	nop			; (mov r8, r8)
 800544c:	46bd      	mov	sp, r7
 800544e:	b00e      	add	sp, #56	; 0x38
 8005450:	bd80      	pop	{r7, pc}
 8005452:	46c0      	nop			; (mov r8, r8)
 8005454:	fffffedf 	.word	0xfffffedf
 8005458:	effffffe 	.word	0xeffffffe

0800545c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b094      	sub	sp, #80	; 0x50
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005468:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2220      	movs	r2, #32
 8005472:	4013      	ands	r3, r2
 8005474:	d16f      	bne.n	8005556 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8005476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005478:	225e      	movs	r2, #94	; 0x5e
 800547a:	2100      	movs	r1, #0
 800547c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800547e:	f3ef 8310 	mrs	r3, PRIMASK
 8005482:	61bb      	str	r3, [r7, #24]
  return(result);
 8005484:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005486:	64bb      	str	r3, [r7, #72]	; 0x48
 8005488:	2301      	movs	r3, #1
 800548a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f383 8810 	msr	PRIMASK, r3
}
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	493a      	ldr	r1, [pc, #232]	; (8005588 <UART_DMAReceiveCplt+0x12c>)
 80054a0:	400a      	ands	r2, r1
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	f383 8810 	msr	PRIMASK, r3
}
 80054ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054b0:	f3ef 8310 	mrs	r3, PRIMASK
 80054b4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b8:	647b      	str	r3, [r7, #68]	; 0x44
 80054ba:	2301      	movs	r3, #1
 80054bc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c0:	f383 8810 	msr	PRIMASK, r3
}
 80054c4:	46c0      	nop			; (mov r8, r8)
 80054c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2101      	movs	r1, #1
 80054d2:	438a      	bics	r2, r1
 80054d4:	609a      	str	r2, [r3, #8]
 80054d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054dc:	f383 8810 	msr	PRIMASK, r3
}
 80054e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054e2:	f3ef 8310 	mrs	r3, PRIMASK
 80054e6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80054e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ea:	643b      	str	r3, [r7, #64]	; 0x40
 80054ec:	2301      	movs	r3, #1
 80054ee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f2:	f383 8810 	msr	PRIMASK, r3
}
 80054f6:	46c0      	nop			; (mov r8, r8)
 80054f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2140      	movs	r1, #64	; 0x40
 8005504:	438a      	bics	r2, r1
 8005506:	609a      	str	r2, [r3, #8]
 8005508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800550a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800550c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550e:	f383 8810 	msr	PRIMASK, r3
}
 8005512:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005516:	228c      	movs	r2, #140	; 0x8c
 8005518:	2120      	movs	r1, #32
 800551a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800551c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800551e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005520:	2b01      	cmp	r3, #1
 8005522:	d118      	bne.n	8005556 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005524:	f3ef 8310 	mrs	r3, PRIMASK
 8005528:	60fb      	str	r3, [r7, #12]
  return(result);
 800552a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800552c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800552e:	2301      	movs	r3, #1
 8005530:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f383 8810 	msr	PRIMASK, r3
}
 8005538:	46c0      	nop			; (mov r8, r8)
 800553a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2110      	movs	r1, #16
 8005546:	438a      	bics	r2, r1
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800554c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f383 8810 	msr	PRIMASK, r3
}
 8005554:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005558:	2200      	movs	r2, #0
 800555a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800555c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005560:	2b01      	cmp	r3, #1
 8005562:	d108      	bne.n	8005576 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005566:	225c      	movs	r2, #92	; 0x5c
 8005568:	5a9a      	ldrh	r2, [r3, r2]
 800556a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800556c:	0011      	movs	r1, r2
 800556e:	0018      	movs	r0, r3
 8005570:	f7ff fae5 	bl	8004b3e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005574:	e003      	b.n	800557e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8005576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005578:	0018      	movs	r0, r3
 800557a:	f7ff fac8 	bl	8004b0e <HAL_UART_RxCpltCallback>
}
 800557e:	46c0      	nop			; (mov r8, r8)
 8005580:	46bd      	mov	sp, r7
 8005582:	b014      	add	sp, #80	; 0x50
 8005584:	bd80      	pop	{r7, pc}
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	fffffeff 	.word	0xfffffeff

0800558c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005598:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d10a      	bne.n	80055be <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	225c      	movs	r2, #92	; 0x5c
 80055ac:	5a9b      	ldrh	r3, [r3, r2]
 80055ae:	085b      	lsrs	r3, r3, #1
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	0011      	movs	r1, r2
 80055b6:	0018      	movs	r0, r3
 80055b8:	f7ff fac1 	bl	8004b3e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055bc:	e003      	b.n	80055c6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	0018      	movs	r0, r3
 80055c2:	f7ff faac 	bl	8004b1e <HAL_UART_RxHalfCpltCallback>
}
 80055c6:	46c0      	nop			; (mov r8, r8)
 80055c8:	46bd      	mov	sp, r7
 80055ca:	b004      	add	sp, #16
 80055cc:	bd80      	pop	{r7, pc}

080055ce <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b086      	sub	sp, #24
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055da:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	2288      	movs	r2, #136	; 0x88
 80055e0:	589b      	ldr	r3, [r3, r2]
 80055e2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	228c      	movs	r2, #140	; 0x8c
 80055e8:	589b      	ldr	r3, [r3, r2]
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	2280      	movs	r2, #128	; 0x80
 80055f4:	4013      	ands	r3, r2
 80055f6:	2b80      	cmp	r3, #128	; 0x80
 80055f8:	d10a      	bne.n	8005610 <UART_DMAError+0x42>
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	2b21      	cmp	r3, #33	; 0x21
 80055fe:	d107      	bne.n	8005610 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	2256      	movs	r2, #86	; 0x56
 8005604:	2100      	movs	r1, #0
 8005606:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	0018      	movs	r0, r3
 800560c:	f7ff fe80 	bl	8005310 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2240      	movs	r2, #64	; 0x40
 8005618:	4013      	ands	r3, r2
 800561a:	2b40      	cmp	r3, #64	; 0x40
 800561c:	d10a      	bne.n	8005634 <UART_DMAError+0x66>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b22      	cmp	r3, #34	; 0x22
 8005622:	d107      	bne.n	8005634 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	225e      	movs	r2, #94	; 0x5e
 8005628:	2100      	movs	r1, #0
 800562a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	0018      	movs	r0, r3
 8005630:	f7ff feae 	bl	8005390 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2290      	movs	r2, #144	; 0x90
 8005638:	589b      	ldr	r3, [r3, r2]
 800563a:	2210      	movs	r2, #16
 800563c:	431a      	orrs	r2, r3
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2190      	movs	r1, #144	; 0x90
 8005642:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	0018      	movs	r0, r3
 8005648:	f7ff fa71 	bl	8004b2e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800564c:	46c0      	nop			; (mov r8, r8)
 800564e:	46bd      	mov	sp, r7
 8005650:	b006      	add	sp, #24
 8005652:	bd80      	pop	{r7, pc}

08005654 <__libc_init_array>:
 8005654:	b570      	push	{r4, r5, r6, lr}
 8005656:	2600      	movs	r6, #0
 8005658:	4d0c      	ldr	r5, [pc, #48]	; (800568c <__libc_init_array+0x38>)
 800565a:	4c0d      	ldr	r4, [pc, #52]	; (8005690 <__libc_init_array+0x3c>)
 800565c:	1b64      	subs	r4, r4, r5
 800565e:	10a4      	asrs	r4, r4, #2
 8005660:	42a6      	cmp	r6, r4
 8005662:	d109      	bne.n	8005678 <__libc_init_array+0x24>
 8005664:	2600      	movs	r6, #0
 8005666:	f000 f821 	bl	80056ac <_init>
 800566a:	4d0a      	ldr	r5, [pc, #40]	; (8005694 <__libc_init_array+0x40>)
 800566c:	4c0a      	ldr	r4, [pc, #40]	; (8005698 <__libc_init_array+0x44>)
 800566e:	1b64      	subs	r4, r4, r5
 8005670:	10a4      	asrs	r4, r4, #2
 8005672:	42a6      	cmp	r6, r4
 8005674:	d105      	bne.n	8005682 <__libc_init_array+0x2e>
 8005676:	bd70      	pop	{r4, r5, r6, pc}
 8005678:	00b3      	lsls	r3, r6, #2
 800567a:	58eb      	ldr	r3, [r5, r3]
 800567c:	4798      	blx	r3
 800567e:	3601      	adds	r6, #1
 8005680:	e7ee      	b.n	8005660 <__libc_init_array+0xc>
 8005682:	00b3      	lsls	r3, r6, #2
 8005684:	58eb      	ldr	r3, [r5, r3]
 8005686:	4798      	blx	r3
 8005688:	3601      	adds	r6, #1
 800568a:	e7f2      	b.n	8005672 <__libc_init_array+0x1e>
 800568c:	080057e4 	.word	0x080057e4
 8005690:	080057e4 	.word	0x080057e4
 8005694:	080057e4 	.word	0x080057e4
 8005698:	080057ec 	.word	0x080057ec

0800569c <memset>:
 800569c:	0003      	movs	r3, r0
 800569e:	1882      	adds	r2, r0, r2
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d100      	bne.n	80056a6 <memset+0xa>
 80056a4:	4770      	bx	lr
 80056a6:	7019      	strb	r1, [r3, #0]
 80056a8:	3301      	adds	r3, #1
 80056aa:	e7f9      	b.n	80056a0 <memset+0x4>

080056ac <_init>:
 80056ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056b2:	bc08      	pop	{r3}
 80056b4:	469e      	mov	lr, r3
 80056b6:	4770      	bx	lr

080056b8 <_fini>:
 80056b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ba:	46c0      	nop			; (mov r8, r8)
 80056bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056be:	bc08      	pop	{r3}
 80056c0:	469e      	mov	lr, r3
 80056c2:	4770      	bx	lr
