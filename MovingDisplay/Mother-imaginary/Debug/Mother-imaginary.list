
Mother-imaginary.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aef4  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  0800b0c0  0800b0c0  0000c0c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b360  0800b360  0000d098  2**0
                  CONTENTS
  4 .ARM          00000008  0800b360  0800b360  0000c360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b368  0800b368  0000d098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b368  0800b368  0000c368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b36c  0800b36c  0000c36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800b370  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  20000098  0800b408  0000d098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  0800b408  0000d5a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157dd  00000000  00000000  0000d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029da  00000000  00000000  000228a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00025280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d25  00000000  00000000  00026308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025416  00000000  00000000  0002702d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017398  00000000  00000000  0004c443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7389  00000000  00000000  000637db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ab64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ed0  00000000  00000000  0013aba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0013fa78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000098 	.word	0x20000098
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800b0a4 	.word	0x0800b0a4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000009c 	.word	0x2000009c
 8000204:	0800b0a4 	.word	0x0800b0a4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b96a 	b.w	8000ebc <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	460c      	mov	r4, r1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d14e      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0c:	4694      	mov	ip, r2
 8000c0e:	458c      	cmp	ip, r1
 8000c10:	4686      	mov	lr, r0
 8000c12:	fab2 f282 	clz	r2, r2
 8000c16:	d962      	bls.n	8000cde <__udivmoddi4+0xde>
 8000c18:	b14a      	cbz	r2, 8000c2e <__udivmoddi4+0x2e>
 8000c1a:	f1c2 0320 	rsb	r3, r2, #32
 8000c1e:	4091      	lsls	r1, r2
 8000c20:	fa20 f303 	lsr.w	r3, r0, r3
 8000c24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c28:	4319      	orrs	r1, r3
 8000c2a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f f68c 	uxth.w	r6, ip
 8000c36:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb04 f106 	mul.w	r1, r4, r6
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c56:	f080 8112 	bcs.w	8000e7e <__udivmoddi4+0x27e>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 810f 	bls.w	8000e7e <__udivmoddi4+0x27e>
 8000c60:	3c02      	subs	r4, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a59      	subs	r1, r3, r1
 8000c66:	fa1f f38e 	uxth.w	r3, lr
 8000c6a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c76:	fb00 f606 	mul.w	r6, r0, r6
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	d90a      	bls.n	8000c94 <__udivmoddi4+0x94>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c86:	f080 80fc 	bcs.w	8000e82 <__udivmoddi4+0x282>
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	f240 80f9 	bls.w	8000e82 <__udivmoddi4+0x282>
 8000c90:	4463      	add	r3, ip
 8000c92:	3802      	subs	r0, #2
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	b11d      	cbz	r5, 8000ca6 <__udivmoddi4+0xa6>
 8000c9e:	40d3      	lsrs	r3, r2
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d905      	bls.n	8000cba <__udivmoddi4+0xba>
 8000cae:	b10d      	cbz	r5, 8000cb4 <__udivmoddi4+0xb4>
 8000cb0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e7f5      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cba:	fab3 f183 	clz	r1, r3
 8000cbe:	2900      	cmp	r1, #0
 8000cc0:	d146      	bne.n	8000d50 <__udivmoddi4+0x150>
 8000cc2:	42a3      	cmp	r3, r4
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xcc>
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	f0c0 80f0 	bcc.w	8000eac <__udivmoddi4+0x2ac>
 8000ccc:	1a86      	subs	r6, r0, r2
 8000cce:	eb64 0303 	sbc.w	r3, r4, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	2d00      	cmp	r5, #0
 8000cd6:	d0e6      	beq.n	8000ca6 <__udivmoddi4+0xa6>
 8000cd8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cdc:	e7e3      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	f040 8090 	bne.w	8000e04 <__udivmoddi4+0x204>
 8000ce4:	eba1 040c 	sub.w	r4, r1, ip
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	fa1f f78c 	uxth.w	r7, ip
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cf6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cfa:	fb08 4416 	mls	r4, r8, r6, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb07 f006 	mul.w	r0, r7, r6
 8000d06:	4298      	cmp	r0, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x11c>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x11a>
 8000d14:	4298      	cmp	r0, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2b4>
 8000d1a:	4626      	mov	r6, r4
 8000d1c:	1a1c      	subs	r4, r3, r0
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d26:	fb08 4410 	mls	r4, r8, r0, r4
 8000d2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2e:	fb00 f707 	mul.w	r7, r0, r7
 8000d32:	429f      	cmp	r7, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x148>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x146>
 8000d40:	429f      	cmp	r7, r3
 8000d42:	f200 80b0 	bhi.w	8000ea6 <__udivmoddi4+0x2a6>
 8000d46:	4620      	mov	r0, r4
 8000d48:	1bdb      	subs	r3, r3, r7
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	e7a5      	b.n	8000c9c <__udivmoddi4+0x9c>
 8000d50:	f1c1 0620 	rsb	r6, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 f706 	lsr.w	r7, r2, r6
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d60:	fa04 f301 	lsl.w	r3, r4, r1
 8000d64:	ea43 030c 	orr.w	r3, r3, ip
 8000d68:	40f4      	lsrs	r4, r6
 8000d6a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d6e:	0c38      	lsrs	r0, r7, #16
 8000d70:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d74:	fbb4 fef0 	udiv	lr, r4, r0
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d80:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d84:	fb0e f90c 	mul.w	r9, lr, ip
 8000d88:	45a1      	cmp	r9, r4
 8000d8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x1a6>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d96:	f080 8084 	bcs.w	8000ea2 <__udivmoddi4+0x2a2>
 8000d9a:	45a1      	cmp	r9, r4
 8000d9c:	f240 8081 	bls.w	8000ea2 <__udivmoddi4+0x2a2>
 8000da0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	eba4 0409 	sub.w	r4, r4, r9
 8000daa:	fa1f f983 	uxth.w	r9, r3
 8000dae:	fbb4 f3f0 	udiv	r3, r4, r0
 8000db2:	fb00 4413 	mls	r4, r0, r3, r4
 8000db6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dba:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x1d2>
 8000dc2:	193c      	adds	r4, r7, r4
 8000dc4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc8:	d267      	bcs.n	8000e9a <__udivmoddi4+0x29a>
 8000dca:	45a4      	cmp	ip, r4
 8000dcc:	d965      	bls.n	8000e9a <__udivmoddi4+0x29a>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	443c      	add	r4, r7
 8000dd2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dd6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dda:	eba4 040c 	sub.w	r4, r4, ip
 8000dde:	429c      	cmp	r4, r3
 8000de0:	46ce      	mov	lr, r9
 8000de2:	469c      	mov	ip, r3
 8000de4:	d351      	bcc.n	8000e8a <__udivmoddi4+0x28a>
 8000de6:	d04e      	beq.n	8000e86 <__udivmoddi4+0x286>
 8000de8:	b155      	cbz	r5, 8000e00 <__udivmoddi4+0x200>
 8000dea:	ebb8 030e 	subs.w	r3, r8, lr
 8000dee:	eb64 040c 	sbc.w	r4, r4, ip
 8000df2:	fa04 f606 	lsl.w	r6, r4, r6
 8000df6:	40cb      	lsrs	r3, r1
 8000df8:	431e      	orrs	r6, r3
 8000dfa:	40cc      	lsrs	r4, r1
 8000dfc:	e9c5 6400 	strd	r6, r4, [r5]
 8000e00:	2100      	movs	r1, #0
 8000e02:	e750      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000e04:	f1c2 0320 	rsb	r3, r2, #32
 8000e08:	fa20 f103 	lsr.w	r1, r0, r3
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	fa24 f303 	lsr.w	r3, r4, r3
 8000e14:	4094      	lsls	r4, r2
 8000e16:	430c      	orrs	r4, r1
 8000e18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e1c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e28:	fb08 3110 	mls	r1, r8, r0, r3
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e32:	fb00 f107 	mul.w	r1, r0, r7
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x24c>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e42:	d22c      	bcs.n	8000e9e <__udivmoddi4+0x29e>
 8000e44:	4299      	cmp	r1, r3
 8000e46:	d92a      	bls.n	8000e9e <__udivmoddi4+0x29e>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e54:	fb08 3311 	mls	r3, r8, r1, r3
 8000e58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e5c:	fb01 f307 	mul.w	r3, r1, r7
 8000e60:	42a3      	cmp	r3, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x276>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e6c:	d213      	bcs.n	8000e96 <__udivmoddi4+0x296>
 8000e6e:	42a3      	cmp	r3, r4
 8000e70:	d911      	bls.n	8000e96 <__udivmoddi4+0x296>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4464      	add	r4, ip
 8000e76:	1ae4      	subs	r4, r4, r3
 8000e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e7c:	e739      	b.n	8000cf2 <__udivmoddi4+0xf2>
 8000e7e:	4604      	mov	r4, r0
 8000e80:	e6f0      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e82:	4608      	mov	r0, r1
 8000e84:	e706      	b.n	8000c94 <__udivmoddi4+0x94>
 8000e86:	45c8      	cmp	r8, r9
 8000e88:	d2ae      	bcs.n	8000de8 <__udivmoddi4+0x1e8>
 8000e8a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e8e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e92:	3801      	subs	r0, #1
 8000e94:	e7a8      	b.n	8000de8 <__udivmoddi4+0x1e8>
 8000e96:	4631      	mov	r1, r6
 8000e98:	e7ed      	b.n	8000e76 <__udivmoddi4+0x276>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	e799      	b.n	8000dd2 <__udivmoddi4+0x1d2>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e7d4      	b.n	8000e4c <__udivmoddi4+0x24c>
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1a6>
 8000ea6:	4463      	add	r3, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e74d      	b.n	8000d48 <__udivmoddi4+0x148>
 8000eac:	4606      	mov	r6, r0
 8000eae:	4623      	mov	r3, r4
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e70f      	b.n	8000cd4 <__udivmoddi4+0xd4>
 8000eb4:	3e02      	subs	r6, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	e730      	b.n	8000d1c <__udivmoddi4+0x11c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <_ZN6BNO055C1EP17I2C_HandleTypeDefh>:


#include "BNO055.h"
#include "main.h"

BNO055::BNO055(I2C_HandleTypeDef* i2cHandle, uint8_t address)
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	71fb      	strb	r3, [r7, #7]
    : _i2cHandle(i2cHandle), _address(address << 1) {}
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	68ba      	ldr	r2, [r7, #8]
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	711a      	strb	r2, [r3, #4]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <_ZN6BNO0555beginEv>:

bool BNO055::begin() {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
    uint8_t configMode = 0x00; // CONFIGMODE
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]
    if (write(0x3D, &configMode, 1) != HAL_OK) {
 8000ef8:	f107 020f 	add.w	r2, r7, #15
 8000efc:	2301      	movs	r3, #1
 8000efe:	213d      	movs	r1, #61	@ 0x3d
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 f893 	bl	800102c <_ZN6BNO0555writeEhPht>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	bf14      	ite	ne
 8000f0c:	2301      	movne	r3, #1
 8000f0e:	2300      	moveq	r3, #0
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <_ZN6BNO0555beginEv+0x2e>
        return false;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e019      	b.n	8000f4e <_ZN6BNO0555beginEv+0x62>
    }
    HAL_Delay(30);
 8000f1a:	201e      	movs	r0, #30
 8000f1c:	f003 fc52 	bl	80047c4 <HAL_Delay>

    uint8_t ndofMode = 0x0C;
 8000f20:	230c      	movs	r3, #12
 8000f22:	73bb      	strb	r3, [r7, #14]
//    uint8_t imuMode = 0x08;
    if (write(0x3D, &ndofMode, 1) != HAL_OK) {
 8000f24:	f107 020e 	add.w	r2, r7, #14
 8000f28:	2301      	movs	r3, #1
 8000f2a:	213d      	movs	r1, #61	@ 0x3d
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 f87d 	bl	800102c <_ZN6BNO0555writeEhPht>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	bf14      	ite	ne
 8000f38:	2301      	movne	r3, #1
 8000f3a:	2300      	moveq	r3, #0
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <_ZN6BNO0555beginEv+0x5a>
        return false;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e003      	b.n	8000f4e <_ZN6BNO0555beginEv+0x62>
    }
    HAL_Delay(30);
 8000f46:	201e      	movs	r0, #30
 8000f48:	f003 fc3c 	bl	80047c4 <HAL_Delay>

    return true;
 8000f4c:	2301      	movs	r3, #1
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <_ZN6BNO05514getEulerAnglesERfS0_S0_>:
void BNO055::setMode(uint8_t mode) {
    write(0x3D, &mode, 1);
    HAL_Delay(30);
}

void BNO055::getEulerAngles(float& heading, float& roll, float& pitch) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
 8000f64:	603b      	str	r3, [r7, #0]
    uint8_t eulerData[6];
    if (read(0x1A, eulerData, 6) == HAL_OK) {
 8000f66:	f107 0214 	add.w	r2, r7, #20
 8000f6a:	2306      	movs	r3, #6
 8000f6c:	211a      	movs	r1, #26
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f000 f87c 	bl	800106c <_ZN6BNO0554readEhPht>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	bf0c      	ite	eq
 8000f7a:	2301      	moveq	r3, #1
 8000f7c:	2300      	movne	r3, #0
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d04d      	beq.n	8001020 <_ZN6BNO05514getEulerAnglesERfS0_S0_+0xc8>
        int16_t headingRaw = ((int16_t)eulerData[1] << 8) | eulerData[0];
 8000f84:	7d7b      	ldrb	r3, [r7, #21]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	7d3b      	ldrb	r3, [r7, #20]
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	83fb      	strh	r3, [r7, #30]
        int16_t rollRaw = ((int16_t)eulerData[3] << 8) | eulerData[2];
 8000f92:	7dfb      	ldrb	r3, [r7, #23]
 8000f94:	021b      	lsls	r3, r3, #8
 8000f96:	b21a      	sxth	r2, r3
 8000f98:	7dbb      	ldrb	r3, [r7, #22]
 8000f9a:	b21b      	sxth	r3, r3
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	83bb      	strh	r3, [r7, #28]
        int16_t pitchRaw = ((int16_t)eulerData[5] << 8) | eulerData[4];
 8000fa0:	7e7b      	ldrb	r3, [r7, #25]
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	7e3b      	ldrb	r3, [r7, #24]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	4313      	orrs	r3, r2
 8000fac:	837b      	strh	r3, [r7, #26]

        heading = headingRaw / 16.0;
 8000fae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fa7a 	bl	80004ac <__aeabi_i2d>
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001028 <_ZN6BNO05514getEulerAnglesERfS0_S0_+0xd0>)
 8000fbe:	f7ff fc09 	bl	80007d4 <__aeabi_ddiv>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f7ff fdb1 	bl	8000b30 <__aeabi_d2f>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	601a      	str	r2, [r3, #0]
        roll = rollRaw / 16.0;
 8000fd4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fa67 	bl	80004ac <__aeabi_i2d>
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <_ZN6BNO05514getEulerAnglesERfS0_S0_+0xd0>)
 8000fe4:	f7ff fbf6 	bl	80007d4 <__aeabi_ddiv>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4610      	mov	r0, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f7ff fd9e 	bl	8000b30 <__aeabi_d2f>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	601a      	str	r2, [r3, #0]
        pitch = pitchRaw / 16.0;
 8000ffa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fa54 	bl	80004ac <__aeabi_i2d>
 8001004:	f04f 0200 	mov.w	r2, #0
 8001008:	4b07      	ldr	r3, [pc, #28]	@ (8001028 <_ZN6BNO05514getEulerAnglesERfS0_S0_+0xd0>)
 800100a:	f7ff fbe3 	bl	80007d4 <__aeabi_ddiv>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f7ff fd8b 	bl	8000b30 <__aeabi_d2f>
 800101a:	4602      	mov	r2, r0
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	601a      	str	r2, [r3, #0]
    }
}
 8001020:	bf00      	nop
 8001022:	3720      	adds	r7, #32
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40300000 	.word	0x40300000

0800102c <_ZN6BNO0555writeEhPht>:

HAL_StatusTypeDef BNO055::write(uint8_t reg, uint8_t* data, uint16_t size) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af04      	add	r7, sp, #16
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	461a      	mov	r2, r3
 8001038:	460b      	mov	r3, r1
 800103a:	72fb      	strb	r3, [r7, #11]
 800103c:	4613      	mov	r3, r2
 800103e:	813b      	strh	r3, [r7, #8]
    return HAL_I2C_Mem_Write(_i2cHandle, _address, reg, I2C_MEMADD_SIZE_8BIT, data, size, HAL_MAX_DELAY);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	791b      	ldrb	r3, [r3, #4]
 8001048:	4619      	mov	r1, r3
 800104a:	7afb      	ldrb	r3, [r7, #11]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	893b      	ldrh	r3, [r7, #8]
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	f004 fb7b 	bl	8005758 <HAL_I2C_Mem_Write>
 8001062:	4603      	mov	r3, r0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_ZN6BNO0554readEhPht>:

HAL_StatusTypeDef BNO055::read(uint8_t reg, uint8_t* data, uint16_t size) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af04      	add	r7, sp, #16
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	461a      	mov	r2, r3
 8001078:	460b      	mov	r3, r1
 800107a:	72fb      	strb	r3, [r7, #11]
 800107c:	4613      	mov	r3, r2
 800107e:	813b      	strh	r3, [r7, #8]
    return HAL_I2C_Mem_Read(_i2cHandle, _address, reg, I2C_MEMADD_SIZE_8BIT, data, size, HAL_MAX_DELAY);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	791b      	ldrb	r3, [r3, #4]
 8001088:	4619      	mov	r1, r3
 800108a:	7afb      	ldrb	r3, [r7, #11]
 800108c:	b29a      	uxth	r2, r3
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	9302      	str	r3, [sp, #8]
 8001094:	893b      	ldrh	r3, [r7, #8]
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	f004 fc55 	bl	800594c <HAL_I2C_Mem_Read>
 80010a2:	4603      	mov	r3, r0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
    if (htim == &htim2){
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a07      	ldr	r2, [pc, #28]	@ (80010d4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d104      	bne.n	80010c6 <HAL_TIM_PeriodElapsedCallback+0x1a>
        m_counter++;
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	4a05      	ldr	r2, [pc, #20]	@ (80010d8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80010c4:	6013      	str	r3, [r2, #0]
    }
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000108 	.word	0x20000108
 80010d8:	20000378 	.word	0x20000378
 80010dc:	00000000 	.word	0x00000000

080010e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	b0ba      	sub	sp, #232	@ 0xe8
 80010e4:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e6:	f003 fafb 	bl	80046e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ea:	f000 fe9d 	bl	8001e28 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ee:	f001 f91d 	bl	800232c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80010f2:	f001 f8f3 	bl	80022dc <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 80010f6:	f000 ff19 	bl	8001f2c <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 80010fa:	f000 ff4b 	bl	8001f94 <_ZL12MX_TIM2_Initv>
  MX_USART6_UART_Init();
 80010fe:	f001 f8bf 	bl	8002280 <_ZL19MX_USART6_UART_Initv>
  MX_UART5_Init();
 8001102:	f001 f833 	bl	800216c <_ZL13MX_UART5_Initv>
  MX_USART3_UART_Init();
 8001106:	f001 f88d 	bl	8002224 <_ZL19MX_USART3_UART_Initv>
  MX_TIM4_Init();
 800110a:	f000 ff9f 	bl	800204c <_ZL12MX_TIM4_Initv>
  MX_USART2_UART_Init();
 800110e:	f001 f85b 	bl	80021c8 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(Servo_ON_GPIO_Port, Servo_ON_Pin, GPIO_PIN_SET);
 8001112:	2201      	movs	r2, #1
 8001114:	2102      	movs	r1, #2
 8001116:	481e      	ldr	r0, [pc, #120]	@ (8001190 <main+0xb0>)
 8001118:	f004 f9a6 	bl	8005468 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim2);
 800111c:	481d      	ldr	r0, [pc, #116]	@ (8001194 <main+0xb4>)
 800111e:	f006 f881 	bl	8007224 <HAL_TIM_Base_Start_IT>
  HAL_UART_Transmit(&huart6, send_array, 12, 10);
 8001122:	230a      	movs	r3, #10
 8001124:	220c      	movs	r2, #12
 8001126:	491c      	ldr	r1, [pc, #112]	@ (8001198 <main+0xb8>)
 8001128:	481c      	ldr	r0, [pc, #112]	@ (800119c <main+0xbc>)
 800112a:	f006 ffbd 	bl	80080a8 <HAL_UART_Transmit>

  HAL_UART_Receive_DMA(&huart5,rxBufA,64);
 800112e:	2240      	movs	r2, #64	@ 0x40
 8001130:	491b      	ldr	r1, [pc, #108]	@ (80011a0 <main+0xc0>)
 8001132:	481c      	ldr	r0, [pc, #112]	@ (80011a4 <main+0xc4>)
 8001134:	f007 f8da 	bl	80082ec <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2,rxBufB,64);
 8001138:	2240      	movs	r2, #64	@ 0x40
 800113a:	491b      	ldr	r1, [pc, #108]	@ (80011a8 <main+0xc8>)
 800113c:	481b      	ldr	r0, [pc, #108]	@ (80011ac <main+0xcc>)
 800113e:	f007 f8d5 	bl	80082ec <HAL_UART_Receive_DMA>

  BNO055 bno055(&hi2c1);
 8001142:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001146:	2228      	movs	r2, #40	@ 0x28
 8001148:	4919      	ldr	r1, [pc, #100]	@ (80011b0 <main+0xd0>)
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff feb8 	bl	8000ec0 <_ZN6BNO055C1EP17I2C_HandleTypeDefh>

  if (!bno055.begin()) {
 8001150:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fec9 	bl	8000eec <_ZN6BNO0555beginEv>
 800115a:	4603      	mov	r3, r0
 800115c:	f083 0301 	eor.w	r3, r3, #1
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d02a      	beq.n	80011bc <main+0xdc>
	  // センサ初期化失敗時の処?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
	  uint32_t Ltika_pcounter = m_counter;
 8001166:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <main+0xd4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	  while (1){
		if(m_counter - Ltika_pcounter > 100){
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <main+0xd4>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b64      	cmp	r3, #100	@ 0x64
 800117a:	d9f8      	bls.n	800116e <main+0x8e>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800117c:	2104      	movs	r1, #4
 800117e:	480e      	ldr	r0, [pc, #56]	@ (80011b8 <main+0xd8>)
 8001180:	f004 f98b 	bl	800549a <HAL_GPIO_TogglePin>
		Ltika_pcounter = m_counter;
 8001184:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <main+0xd4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
		if(m_counter - Ltika_pcounter > 100){
 800118c:	e7ef      	b.n	800116e <main+0x8e>
 800118e:	bf00      	nop
 8001190:	40020000 	.word	0x40020000
 8001194:	20000108 	.word	0x20000108
 8001198:	20000000 	.word	0x20000000
 800119c:	20000270 	.word	0x20000270
 80011a0:	200003c4 	.word	0x200003c4
 80011a4:	20000198 	.word	0x20000198
 80011a8:	20000410 	.word	0x20000410
 80011ac:	200001e0 	.word	0x200001e0
 80011b0:	200000b4 	.word	0x200000b4
 80011b4:	20000378 	.word	0x20000378
 80011b8:	40020400 	.word	0x40020400
	  };
  }

  float heading, roll, pitch;

  HAL_Delay(1000);
 80011bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011c0:	f003 fb00 	bl	80047c4 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PERFORMANCE performance(perform, camera, cur_movement, display, circle_position, position);
 80011c4:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80011c8:	4baf      	ldr	r3, [pc, #700]	@ (8001488 <main+0x3a8>)
 80011ca:	9302      	str	r3, [sp, #8]
 80011cc:	4baf      	ldr	r3, [pc, #700]	@ (800148c <main+0x3ac>)
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	4baf      	ldr	r3, [pc, #700]	@ (8001490 <main+0x3b0>)
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	4baf      	ldr	r3, [pc, #700]	@ (8001494 <main+0x3b4>)
 80011d6:	4ab0      	ldr	r2, [pc, #704]	@ (8001498 <main+0x3b8>)
 80011d8:	49b0      	ldr	r1, [pc, #704]	@ (800149c <main+0x3bc>)
 80011da:	f001 fc0a 	bl	80029f2 <_ZN11PERFORMANCEC1EPtPhPsS1_S2_S2_>

  uint32_t Ltika_pcounter = m_counter;
 80011de:	4bb0      	ldr	r3, [pc, #704]	@ (80014a0 <main+0x3c0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  uint32_t d_pcounter = m_counter;
 80011e6:	4bae      	ldr	r3, [pc, #696]	@ (80014a0 <main+0x3c0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t speed_pcounter = m_counter;
 80011ee:	4bac      	ldr	r3, [pc, #688]	@ (80014a0 <main+0x3c0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  uint8_t OdoX_ID[3] = {248, 210, 210};
 80011f6:	4aab      	ldr	r2, [pc, #684]	@ (80014a4 <main+0x3c4>)
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	6812      	ldr	r2, [r2, #0]
 80011fe:	4611      	mov	r1, r2
 8001200:	8019      	strh	r1, [r3, #0]
 8001202:	3302      	adds	r3, #2
 8001204:	0c12      	lsrs	r2, r2, #16
 8001206:	701a      	strb	r2, [r3, #0]
  uint8_t OdoY_ID[3] = {249, 210, 210};
 8001208:	4aa7      	ldr	r2, [pc, #668]	@ (80014a8 <main+0x3c8>)
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	6812      	ldr	r2, [r2, #0]
 8001210:	4611      	mov	r1, r2
 8001212:	8019      	strh	r1, [r3, #0]
 8001214:	3302      	adds	r3, #2
 8001216:	0c12      	lsrs	r2, r2, #16
 8001218:	701a      	strb	r2, [r3, #0]

//  int16_t cur_position_rec[2];
//  int16_t cur_position_pol[2];

  int16_t speed;
  int16_t p_speed = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
  int16_t degree;

//setup p_position
  HAL_UART_Transmit(&huart6, OdoX_ID, 3, 1);
 8001220:	f107 0120 	add.w	r1, r7, #32
 8001224:	2301      	movs	r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	48a0      	ldr	r0, [pc, #640]	@ (80014ac <main+0x3cc>)
 800122a:	f006 ff3d 	bl	80080a8 <HAL_UART_Transmit>
  if(HAL_UART_Receive(&huart6, rxDataX, 3, 1) == HAL_OK){
 800122e:	2301      	movs	r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	499f      	ldr	r1, [pc, #636]	@ (80014b0 <main+0x3d0>)
 8001234:	489d      	ldr	r0, [pc, #628]	@ (80014ac <main+0x3cc>)
 8001236:	f006 ffc2 	bl	80081be <HAL_UART_Receive>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	bf0c      	ite	eq
 8001240:	2301      	moveq	r3, #1
 8001242:	2300      	movne	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <main+0x172>
    HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800124a:	2104      	movs	r1, #4
 800124c:	4899      	ldr	r0, [pc, #612]	@ (80014b4 <main+0x3d4>)
 800124e:	f004 f924 	bl	800549a <HAL_GPIO_TogglePin>
  }else{}
  p_position[0] = rxDataX[1] + rxDataX[2]*200 - 20000;
 8001252:	4b97      	ldr	r3, [pc, #604]	@ (80014b0 <main+0x3d0>)
 8001254:	785b      	ldrb	r3, [r3, #1]
 8001256:	461a      	mov	r2, r3
 8001258:	4b95      	ldr	r3, [pc, #596]	@ (80014b0 <main+0x3d0>)
 800125a:	789b      	ldrb	r3, [r3, #2]
 800125c:	4619      	mov	r1, r3
 800125e:	0089      	lsls	r1, r1, #2
 8001260:	440b      	add	r3, r1
 8001262:	4619      	mov	r1, r3
 8001264:	0088      	lsls	r0, r1, #2
 8001266:	4619      	mov	r1, r3
 8001268:	4603      	mov	r3, r0
 800126a:	440b      	add	r3, r1
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	b29b      	uxth	r3, r3
 8001270:	4413      	add	r3, r2
 8001272:	b29b      	uxth	r3, r3
 8001274:	f5a3 439c 	sub.w	r3, r3, #19968	@ 0x4e00
 8001278:	3b20      	subs	r3, #32
 800127a:	b29b      	uxth	r3, r3
 800127c:	b21a      	sxth	r2, r3
 800127e:	4b8e      	ldr	r3, [pc, #568]	@ (80014b8 <main+0x3d8>)
 8001280:	801a      	strh	r2, [r3, #0]

  HAL_UART_Transmit(&huart6, OdoY_ID, 3, 1);
 8001282:	f107 011c 	add.w	r1, r7, #28
 8001286:	2301      	movs	r3, #1
 8001288:	2203      	movs	r2, #3
 800128a:	4888      	ldr	r0, [pc, #544]	@ (80014ac <main+0x3cc>)
 800128c:	f006 ff0c 	bl	80080a8 <HAL_UART_Transmit>
  if(HAL_UART_Receive(&huart6, rxDataY, 3, 1) == HAL_OK){
 8001290:	2301      	movs	r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	4989      	ldr	r1, [pc, #548]	@ (80014bc <main+0x3dc>)
 8001296:	4885      	ldr	r0, [pc, #532]	@ (80014ac <main+0x3cc>)
 8001298:	f006 ff91 	bl	80081be <HAL_UART_Receive>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	bf0c      	ite	eq
 80012a2:	2301      	moveq	r3, #1
 80012a4:	2300      	movne	r3, #0
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <main+0x1d4>
    HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80012ac:	2104      	movs	r1, #4
 80012ae:	4881      	ldr	r0, [pc, #516]	@ (80014b4 <main+0x3d4>)
 80012b0:	f004 f8f3 	bl	800549a <HAL_GPIO_TogglePin>
  }else{}
  p_position[1] = rxDataY[1] + rxDataY[2]*200 - 20000;
 80012b4:	4b81      	ldr	r3, [pc, #516]	@ (80014bc <main+0x3dc>)
 80012b6:	785b      	ldrb	r3, [r3, #1]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b80      	ldr	r3, [pc, #512]	@ (80014bc <main+0x3dc>)
 80012bc:	789b      	ldrb	r3, [r3, #2]
 80012be:	4619      	mov	r1, r3
 80012c0:	0089      	lsls	r1, r1, #2
 80012c2:	440b      	add	r3, r1
 80012c4:	4619      	mov	r1, r3
 80012c6:	0088      	lsls	r0, r1, #2
 80012c8:	4619      	mov	r1, r3
 80012ca:	4603      	mov	r3, r0
 80012cc:	440b      	add	r3, r1
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	4413      	add	r3, r2
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	f5a3 439c 	sub.w	r3, r3, #19968	@ 0x4e00
 80012da:	3b20      	subs	r3, #32
 80012dc:	b29b      	uxth	r3, r3
 80012de:	b21a      	sxth	r2, r3
 80012e0:	4b75      	ldr	r3, [pc, #468]	@ (80014b8 <main+0x3d8>)
 80012e2:	805a      	strh	r2, [r3, #2]

  speed_pcounter = m_counter;
 80012e4:	4b6e      	ldr	r3, [pc, #440]	@ (80014a0 <main+0x3c0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

////START loop

  while (1)
  {
	dtime = m_counter - d_pcounter;
 80012ec:	4b6c      	ldr	r3, [pc, #432]	@ (80014a0 <main+0x3c0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	4b70      	ldr	r3, [pc, #448]	@ (80014c0 <main+0x3e0>)
 80012fe:	801a      	strh	r2, [r3, #0]
	d_pcounter = m_counter;
 8001300:	4b67      	ldr	r3, [pc, #412]	@ (80014a0 <main+0x3c0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

	if(HAL_GPIO_ReadPin(TACTSW0_GPIO_Port, TACTSW0_Pin) == 1){rst_mcounter = m_counter;}
 8001308:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800130c:	4869      	ldr	r0, [pc, #420]	@ (80014b4 <main+0x3d4>)
 800130e:	f004 f893 	bl	8005438 <HAL_GPIO_ReadPin>
 8001312:	4603      	mov	r3, r0
 8001314:	2b01      	cmp	r3, #1
 8001316:	bf0c      	ite	eq
 8001318:	2301      	moveq	r3, #1
 800131a:	2300      	movne	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <main+0x24a>
 8001322:	4b5f      	ldr	r3, [pc, #380]	@ (80014a0 <main+0x3c0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a67      	ldr	r2, [pc, #412]	@ (80014c4 <main+0x3e4>)
 8001328:	6013      	str	r3, [r2, #0]
	now_mcounter = m_counter - rst_mcounter;
 800132a:	4b5d      	ldr	r3, [pc, #372]	@ (80014a0 <main+0x3c0>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4b65      	ldr	r3, [pc, #404]	@ (80014c4 <main+0x3e4>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	4a64      	ldr	r2, [pc, #400]	@ (80014c8 <main+0x3e8>)
 8001336:	6013      	str	r3, [r2, #0]

////START get NOW-STATUS

//get rotate
	bno055.getEulerAngles(heading, roll, pitch);
 8001338:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800133c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8001340:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 8001344:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 8001348:	f7ff fe06 	bl	8000f58 <_ZN6BNO05514getEulerAnglesERfS0_S0_>
	rotate = (int)heading;
 800134c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001358:	4b5c      	ldr	r3, [pc, #368]	@ (80014cc <main+0x3ec>)
 800135a:	edc3 7a00 	vstr	s15, [r3]

//get x coordinate
	HAL_UART_Transmit(&huart6, OdoX_ID, 3, 1);
 800135e:	f107 0120 	add.w	r1, r7, #32
 8001362:	2301      	movs	r3, #1
 8001364:	2203      	movs	r2, #3
 8001366:	4851      	ldr	r0, [pc, #324]	@ (80014ac <main+0x3cc>)
 8001368:	f006 fe9e 	bl	80080a8 <HAL_UART_Transmit>
	if(HAL_UART_Receive(&huart6, rxDataX, 3, 1) == HAL_OK){
 800136c:	2301      	movs	r3, #1
 800136e:	2203      	movs	r2, #3
 8001370:	494f      	ldr	r1, [pc, #316]	@ (80014b0 <main+0x3d0>)
 8001372:	484e      	ldr	r0, [pc, #312]	@ (80014ac <main+0x3cc>)
 8001374:	f006 ff23 	bl	80081be <HAL_UART_Receive>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	bf0c      	ite	eq
 800137e:	2301      	moveq	r3, #1
 8001380:	2300      	movne	r3, #0
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <main+0x2b0>
	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8001388:	2104      	movs	r1, #4
 800138a:	484a      	ldr	r0, [pc, #296]	@ (80014b4 <main+0x3d4>)
 800138c:	f004 f885 	bl	800549a <HAL_GPIO_TogglePin>
	}else{}
	position[0] = rxDataX[1] + rxDataX[2]*200 - 20000;
 8001390:	4b47      	ldr	r3, [pc, #284]	@ (80014b0 <main+0x3d0>)
 8001392:	785b      	ldrb	r3, [r3, #1]
 8001394:	461a      	mov	r2, r3
 8001396:	4b46      	ldr	r3, [pc, #280]	@ (80014b0 <main+0x3d0>)
 8001398:	789b      	ldrb	r3, [r3, #2]
 800139a:	4619      	mov	r1, r3
 800139c:	0089      	lsls	r1, r1, #2
 800139e:	440b      	add	r3, r1
 80013a0:	4619      	mov	r1, r3
 80013a2:	0088      	lsls	r0, r1, #2
 80013a4:	4619      	mov	r1, r3
 80013a6:	4603      	mov	r3, r0
 80013a8:	440b      	add	r3, r1
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	4413      	add	r3, r2
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	f5a3 439c 	sub.w	r3, r3, #19968	@ 0x4e00
 80013b6:	3b20      	subs	r3, #32
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	b21a      	sxth	r2, r3
 80013bc:	4b32      	ldr	r3, [pc, #200]	@ (8001488 <main+0x3a8>)
 80013be:	801a      	strh	r2, [r3, #0]

//get y coordinate
	HAL_UART_Transmit(&huart6, OdoY_ID, 3, 1);
 80013c0:	f107 011c 	add.w	r1, r7, #28
 80013c4:	2301      	movs	r3, #1
 80013c6:	2203      	movs	r2, #3
 80013c8:	4838      	ldr	r0, [pc, #224]	@ (80014ac <main+0x3cc>)
 80013ca:	f006 fe6d 	bl	80080a8 <HAL_UART_Transmit>
	if(HAL_UART_Receive(&huart6, rxDataY, 3, 1) == HAL_OK){
 80013ce:	2301      	movs	r3, #1
 80013d0:	2203      	movs	r2, #3
 80013d2:	493a      	ldr	r1, [pc, #232]	@ (80014bc <main+0x3dc>)
 80013d4:	4835      	ldr	r0, [pc, #212]	@ (80014ac <main+0x3cc>)
 80013d6:	f006 fef2 	bl	80081be <HAL_UART_Receive>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	bf0c      	ite	eq
 80013e0:	2301      	moveq	r3, #1
 80013e2:	2300      	movne	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <main+0x312>
	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80013ea:	2104      	movs	r1, #4
 80013ec:	4831      	ldr	r0, [pc, #196]	@ (80014b4 <main+0x3d4>)
 80013ee:	f004 f854 	bl	800549a <HAL_GPIO_TogglePin>
	}else{}
	position[1] = rxDataY[1] + rxDataY[2]*200 - 20000;
 80013f2:	4b32      	ldr	r3, [pc, #200]	@ (80014bc <main+0x3dc>)
 80013f4:	785b      	ldrb	r3, [r3, #1]
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b30      	ldr	r3, [pc, #192]	@ (80014bc <main+0x3dc>)
 80013fa:	789b      	ldrb	r3, [r3, #2]
 80013fc:	4619      	mov	r1, r3
 80013fe:	0089      	lsls	r1, r1, #2
 8001400:	440b      	add	r3, r1
 8001402:	4619      	mov	r1, r3
 8001404:	0088      	lsls	r0, r1, #2
 8001406:	4619      	mov	r1, r3
 8001408:	4603      	mov	r3, r0
 800140a:	440b      	add	r3, r1
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	b29b      	uxth	r3, r3
 8001410:	4413      	add	r3, r2
 8001412:	b29b      	uxth	r3, r3
 8001414:	f5a3 439c 	sub.w	r3, r3, #19968	@ 0x4e00
 8001418:	3b20      	subs	r3, #32
 800141a:	b29b      	uxth	r3, r3
 800141c:	b21a      	sxth	r2, r3
 800141e:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <main+0x3a8>)
 8001420:	805a      	strh	r2, [r3, #2]

//get speed
	if(m_counter - speed_pcounter >= 20){
 8001422:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <main+0x3c0>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b13      	cmp	r3, #19
 800142e:	f240 80c4 	bls.w	80015ba <main+0x4da>
		dposition[0] = position[0] - p_position[0];
 8001432:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <main+0x3a8>)
 8001434:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001438:	b29a      	uxth	r2, r3
 800143a:	4b1f      	ldr	r3, [pc, #124]	@ (80014b8 <main+0x3d8>)
 800143c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001440:	b29b      	uxth	r3, r3
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	b29b      	uxth	r3, r3
 8001446:	b21a      	sxth	r2, r3
 8001448:	4b21      	ldr	r3, [pc, #132]	@ (80014d0 <main+0x3f0>)
 800144a:	801a      	strh	r2, [r3, #0]
		p_position[0] = position[0];
 800144c:	4b0e      	ldr	r3, [pc, #56]	@ (8001488 <main+0x3a8>)
 800144e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001452:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <main+0x3d8>)
 8001454:	801a      	strh	r2, [r3, #0]

		dposition[1] = position[1] - p_position[1];
 8001456:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <main+0x3a8>)
 8001458:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800145c:	b29a      	uxth	r2, r3
 800145e:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <main+0x3d8>)
 8001460:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001464:	b29b      	uxth	r3, r3
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	b29b      	uxth	r3, r3
 800146a:	b21a      	sxth	r2, r3
 800146c:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <main+0x3f0>)
 800146e:	805a      	strh	r2, [r3, #2]
		p_position[1] = position[1];
 8001470:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <main+0x3a8>)
 8001472:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001476:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <main+0x3d8>)
 8001478:	805a      	strh	r2, [r3, #2]

		position[2] = pow(pow(dposition[0], 2) + pow(dposition[1], 2), 0.5)*1000 / (m_counter - speed_pcounter);
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <main+0x3f0>)
 800147c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001480:	2102      	movs	r1, #2
 8001482:	4618      	mov	r0, r3
 8001484:	e026      	b.n	80014d4 <main+0x3f4>
 8001486:	bf00      	nop
 8001488:	20000394 	.word	0x20000394
 800148c:	200003a0 	.word	0x200003a0
 8001490:	2000000c 	.word	0x2000000c
 8001494:	200003b4 	.word	0x200003b4
 8001498:	20000464 	.word	0x20000464
 800149c:	2000045c 	.word	0x2000045c
 80014a0:	20000378 	.word	0x20000378
 80014a4:	0800b0c0 	.word	0x0800b0c0
 80014a8:	0800b0c4 	.word	0x0800b0c4
 80014ac:	20000270 	.word	0x20000270
 80014b0:	2000038c 	.word	0x2000038c
 80014b4:	40020400 	.word	0x40020400
 80014b8:	200003a8 	.word	0x200003a8
 80014bc:	20000390 	.word	0x20000390
 80014c0:	20000466 	.word	0x20000466
 80014c4:	2000037c 	.word	0x2000037c
 80014c8:	20000380 	.word	0x20000380
 80014cc:	2000039c 	.word	0x2000039c
 80014d0:	200003b0 	.word	0x200003b0
 80014d4:	f001 fa43 	bl	800295e <_ZSt3powIsiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014d8:	ec55 4b10 	vmov	r4, r5, d0
 80014dc:	4bb8      	ldr	r3, [pc, #736]	@ (80017c0 <main+0x6e0>)
 80014de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014e2:	2102      	movs	r1, #2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f001 fa3a 	bl	800295e <_ZSt3powIsiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014ea:	ec53 2b10 	vmov	r2, r3, d0
 80014ee:	4620      	mov	r0, r4
 80014f0:	4629      	mov	r1, r5
 80014f2:	f7fe fe8f 	bl	8000214 <__adddf3>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	ec43 2b17 	vmov	d7, r2, r3
 80014fe:	ed9f 1baa 	vldr	d1, [pc, #680]	@ 80017a8 <main+0x6c8>
 8001502:	eeb0 0a47 	vmov.f32	s0, s14
 8001506:	eef0 0a67 	vmov.f32	s1, s15
 800150a:	f007 fc31 	bl	8008d70 <pow>
 800150e:	ec51 0b10 	vmov	r0, r1, d0
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	4bab      	ldr	r3, [pc, #684]	@ (80017c4 <main+0x6e4>)
 8001518:	f7ff f832 	bl	8000580 <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4614      	mov	r4, r2
 8001522:	461d      	mov	r5, r3
 8001524:	4ba8      	ldr	r3, [pc, #672]	@ (80017c8 <main+0x6e8>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	4618      	mov	r0, r3
 8001530:	f7fe ffac 	bl	800048c <__aeabi_ui2d>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4620      	mov	r0, r4
 800153a:	4629      	mov	r1, r5
 800153c:	f7ff f94a 	bl	80007d4 <__aeabi_ddiv>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff faca 	bl	8000ae0 <__aeabi_d2iz>
 800154c:	4603      	mov	r3, r0
 800154e:	b21a      	sxth	r2, r3
 8001550:	4b9e      	ldr	r3, [pc, #632]	@ (80017cc <main+0x6ec>)
 8001552:	809a      	strh	r2, [r3, #4]
		position[2] = (position[2]*0.8) + (p_position[2]*0.2);
 8001554:	4b9d      	ldr	r3, [pc, #628]	@ (80017cc <main+0x6ec>)
 8001556:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe ffa6 	bl	80004ac <__aeabi_i2d>
 8001560:	a393      	add	r3, pc, #588	@ (adr r3, 80017b0 <main+0x6d0>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	f7ff f80b 	bl	8000580 <__aeabi_dmul>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4614      	mov	r4, r2
 8001570:	461d      	mov	r5, r3
 8001572:	4b97      	ldr	r3, [pc, #604]	@ (80017d0 <main+0x6f0>)
 8001574:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ff97 	bl	80004ac <__aeabi_i2d>
 800157e:	a38e      	add	r3, pc, #568	@ (adr r3, 80017b8 <main+0x6d8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7fe fffc 	bl	8000580 <__aeabi_dmul>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4620      	mov	r0, r4
 800158e:	4629      	mov	r1, r5
 8001590:	f7fe fe40 	bl	8000214 <__adddf3>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4610      	mov	r0, r2
 800159a:	4619      	mov	r1, r3
 800159c:	f7ff faa0 	bl	8000ae0 <__aeabi_d2iz>
 80015a0:	4603      	mov	r3, r0
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	4b89      	ldr	r3, [pc, #548]	@ (80017cc <main+0x6ec>)
 80015a6:	809a      	strh	r2, [r3, #4]
		p_position[2] = position[2];
 80015a8:	4b88      	ldr	r3, [pc, #544]	@ (80017cc <main+0x6ec>)
 80015aa:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80015ae:	4b88      	ldr	r3, [pc, #544]	@ (80017d0 <main+0x6f0>)
 80015b0:	809a      	strh	r2, [r3, #4]

		speed_pcounter = m_counter;
 80015b2:	4b85      	ldr	r3, [pc, #532]	@ (80017c8 <main+0x6e8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8


////START get PERFORMANCE STATUS

//get perform[] from TweLite
	readBuf(&huart5, rxBufA, 64, rxDataA, 4, 0, &p_wrtptA, &p_rdptA, &stop_counterA, &error_counterA, 10);
 80015ba:	230a      	movs	r3, #10
 80015bc:	9306      	str	r3, [sp, #24]
 80015be:	4b85      	ldr	r3, [pc, #532]	@ (80017d4 <main+0x6f4>)
 80015c0:	9305      	str	r3, [sp, #20]
 80015c2:	4b85      	ldr	r3, [pc, #532]	@ (80017d8 <main+0x6f8>)
 80015c4:	9304      	str	r3, [sp, #16]
 80015c6:	4b85      	ldr	r3, [pc, #532]	@ (80017dc <main+0x6fc>)
 80015c8:	9303      	str	r3, [sp, #12]
 80015ca:	4b85      	ldr	r3, [pc, #532]	@ (80017e0 <main+0x700>)
 80015cc:	9302      	str	r3, [sp, #8]
 80015ce:	2300      	movs	r3, #0
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	2304      	movs	r3, #4
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	4b83      	ldr	r3, [pc, #524]	@ (80017e4 <main+0x704>)
 80015d8:	2240      	movs	r2, #64	@ 0x40
 80015da:	4983      	ldr	r1, [pc, #524]	@ (80017e8 <main+0x708>)
 80015dc:	4883      	ldr	r0, [pc, #524]	@ (80017ec <main+0x70c>)
 80015de:	f001 f8a7 	bl	8002730 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h>
	perform[0] = rxDataA[0] - 5;
 80015e2:	4b80      	ldr	r3, [pc, #512]	@ (80017e4 <main+0x704>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	3b05      	subs	r3, #5
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	4b81      	ldr	r3, [pc, #516]	@ (80017f0 <main+0x710>)
 80015ec:	801a      	strh	r2, [r3, #0]
	perform[1] = (rxDataA[1] - 5)*240 + (rxDataA[2] - 5);
 80015ee:	4b7d      	ldr	r3, [pc, #500]	@ (80017e4 <main+0x704>)
 80015f0:	785b      	ldrb	r3, [r3, #1]
 80015f2:	3b05      	subs	r3, #5
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	0112      	lsls	r2, r2, #4
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	011b      	lsls	r3, r3, #4
 80015fe:	b29b      	uxth	r3, r3
 8001600:	4a78      	ldr	r2, [pc, #480]	@ (80017e4 <main+0x704>)
 8001602:	7892      	ldrb	r2, [r2, #2]
 8001604:	4413      	add	r3, r2
 8001606:	b29b      	uxth	r3, r3
 8001608:	3b05      	subs	r3, #5
 800160a:	b29a      	uxth	r2, r3
 800160c:	4b78      	ldr	r3, [pc, #480]	@ (80017f0 <main+0x710>)
 800160e:	805a      	strh	r2, [r3, #2]
	perform[2] = perform[1] * 1000 / 20391;
 8001610:	4b77      	ldr	r3, [pc, #476]	@ (80017f0 <main+0x710>)
 8001612:	885b      	ldrh	r3, [r3, #2]
 8001614:	461a      	mov	r2, r3
 8001616:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	4a75      	ldr	r2, [pc, #468]	@ (80017f4 <main+0x714>)
 8001620:	fb82 1203 	smull	r1, r2, r2, r3
 8001624:	1312      	asrs	r2, r2, #12
 8001626:	17db      	asrs	r3, r3, #31
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	b29a      	uxth	r2, r3
 800162c:	4b70      	ldr	r3, [pc, #448]	@ (80017f0 <main+0x710>)
 800162e:	809a      	strh	r2, [r3, #4]
	perform[3] = rxDataA[3];
 8001630:	4b6c      	ldr	r3, [pc, #432]	@ (80017e4 <main+0x704>)
 8001632:	78db      	ldrb	r3, [r3, #3]
 8001634:	461a      	mov	r2, r3
 8001636:	4b6e      	ldr	r3, [pc, #440]	@ (80017f0 <main+0x710>)
 8001638:	80da      	strh	r2, [r3, #6]

//get camera[] from TweLite
	readBuf(&huart2, rxBufB, 64, rxDataB, 3, 0, &p_wrtptB, &p_rdptB, &stop_counterB, &error_counterB, 10);
 800163a:	230a      	movs	r3, #10
 800163c:	9306      	str	r3, [sp, #24]
 800163e:	4b6e      	ldr	r3, [pc, #440]	@ (80017f8 <main+0x718>)
 8001640:	9305      	str	r3, [sp, #20]
 8001642:	4b6e      	ldr	r3, [pc, #440]	@ (80017fc <main+0x71c>)
 8001644:	9304      	str	r3, [sp, #16]
 8001646:	4b6e      	ldr	r3, [pc, #440]	@ (8001800 <main+0x720>)
 8001648:	9303      	str	r3, [sp, #12]
 800164a:	4b6e      	ldr	r3, [pc, #440]	@ (8001804 <main+0x724>)
 800164c:	9302      	str	r3, [sp, #8]
 800164e:	2300      	movs	r3, #0
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	2303      	movs	r3, #3
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	4b6c      	ldr	r3, [pc, #432]	@ (8001808 <main+0x728>)
 8001658:	2240      	movs	r2, #64	@ 0x40
 800165a:	496c      	ldr	r1, [pc, #432]	@ (800180c <main+0x72c>)
 800165c:	486c      	ldr	r0, [pc, #432]	@ (8001810 <main+0x730>)
 800165e:	f001 f867 	bl	8002730 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h>

	if(rxDataB[0] == 15 && rxDataB[1] == 15 && rxDataB[2] == 15){camera[1] = 0;}
 8001662:	4b69      	ldr	r3, [pc, #420]	@ (8001808 <main+0x728>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b0f      	cmp	r3, #15
 8001668:	d10b      	bne.n	8001682 <main+0x5a2>
 800166a:	4b67      	ldr	r3, [pc, #412]	@ (8001808 <main+0x728>)
 800166c:	785b      	ldrb	r3, [r3, #1]
 800166e:	2b0f      	cmp	r3, #15
 8001670:	d107      	bne.n	8001682 <main+0x5a2>
 8001672:	4b65      	ldr	r3, [pc, #404]	@ (8001808 <main+0x728>)
 8001674:	789b      	ldrb	r3, [r3, #2]
 8001676:	2b0f      	cmp	r3, #15
 8001678:	d103      	bne.n	8001682 <main+0x5a2>
 800167a:	4b66      	ldr	r3, [pc, #408]	@ (8001814 <main+0x734>)
 800167c:	2200      	movs	r2, #0
 800167e:	705a      	strb	r2, [r3, #1]
 8001680:	e002      	b.n	8001688 <main+0x5a8>
	else{camera[1] = 1;}
 8001682:	4b64      	ldr	r3, [pc, #400]	@ (8001814 <main+0x734>)
 8001684:	2201      	movs	r2, #1
 8001686:	705a      	strb	r2, [r3, #1]


    // RGB値を0-15から0-1に正規化
    float rf = rxDataB[0] / 15.0;
 8001688:	4b5f      	ldr	r3, [pc, #380]	@ (8001808 <main+0x728>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff0d 	bl	80004ac <__aeabi_i2d>
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	4b60      	ldr	r3, [pc, #384]	@ (8001818 <main+0x738>)
 8001698:	f7ff f89c 	bl	80007d4 <__aeabi_ddiv>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f7ff fa44 	bl	8000b30 <__aeabi_d2f>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    float gf = rxDataB[1] / 15.0;
 80016ae:	4b56      	ldr	r3, [pc, #344]	@ (8001808 <main+0x728>)
 80016b0:	785b      	ldrb	r3, [r3, #1]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe fefa 	bl	80004ac <__aeabi_i2d>
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	4b56      	ldr	r3, [pc, #344]	@ (8001818 <main+0x738>)
 80016be:	f7ff f889 	bl	80007d4 <__aeabi_ddiv>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	f7ff fa31 	bl	8000b30 <__aeabi_d2f>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    float bf = rxDataB[2] / 15.0;
 80016d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001808 <main+0x728>)
 80016d6:	789b      	ldrb	r3, [r3, #2]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe fee7 	bl	80004ac <__aeabi_i2d>
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	4b4d      	ldr	r3, [pc, #308]	@ (8001818 <main+0x738>)
 80016e4:	f7ff f876 	bl	80007d4 <__aeabi_ddiv>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	f7ff fa1e 	bl	8000b30 <__aeabi_d2f>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    // 最大値、最小値、および範囲を求める
    float max_val = rf;
 80016fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80016fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (gf > max_val) max_val = gf;
 8001702:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8001706:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800170a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800170e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001712:	dd03      	ble.n	800171c <main+0x63c>
 8001714:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001718:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (bf > max_val) max_val = bf;
 800171c:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8001720:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8001724:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172c:	dd03      	ble.n	8001736 <main+0x656>
 800172e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001732:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

    float min_val = rf;
 8001736:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800173a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (gf < min_val) min_val = gf;
 800173e:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8001742:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8001746:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174e:	d503      	bpl.n	8001758 <main+0x678>
 8001750:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001754:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (bf < min_val) min_val = bf;
 8001758:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 800175c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8001760:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001768:	d503      	bpl.n	8001772 <main+0x692>
 800176a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800176e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    float delta = max_val - min_val;
 8001772:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8001776:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800177a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800177e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

    float h = 0.0;
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

    // 色相（H）の計算
    if (delta == 0) {
 800178a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 800178e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001796:	d147      	bne.n	8001828 <main+0x748>
        h = 0; // 無彩色（グレースケール）
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80017a0:	e0a6      	b.n	80018f0 <main+0x810>
 80017a2:	bf00      	nop
 80017a4:	f3af 8000 	nop.w
 80017a8:	00000000 	.word	0x00000000
 80017ac:	3fe00000 	.word	0x3fe00000
 80017b0:	9999999a 	.word	0x9999999a
 80017b4:	3fe99999 	.word	0x3fe99999
 80017b8:	9999999a 	.word	0x9999999a
 80017bc:	3fc99999 	.word	0x3fc99999
 80017c0:	200003b0 	.word	0x200003b0
 80017c4:	408f4000 	.word	0x408f4000
 80017c8:	20000378 	.word	0x20000378
 80017cc:	20000394 	.word	0x20000394
 80017d0:	200003a8 	.word	0x200003a8
 80017d4:	2000040c 	.word	0x2000040c
 80017d8:	2000040a 	.word	0x2000040a
 80017dc:	20000409 	.word	0x20000409
 80017e0:	20000408 	.word	0x20000408
 80017e4:	20000404 	.word	0x20000404
 80017e8:	200003c4 	.word	0x200003c4
 80017ec:	20000198 	.word	0x20000198
 80017f0:	2000045c 	.word	0x2000045c
 80017f4:	336c689b 	.word	0x336c689b
 80017f8:	20000458 	.word	0x20000458
 80017fc:	20000456 	.word	0x20000456
 8001800:	20000454 	.word	0x20000454
 8001804:	20000453 	.word	0x20000453
 8001808:	20000450 	.word	0x20000450
 800180c:	20000410 	.word	0x20000410
 8001810:	200001e0 	.word	0x200001e0
 8001814:	20000464 	.word	0x20000464
 8001818:	402e0000 	.word	0x402e0000
 800181c:	42700000 	.word	0x42700000
 8001820:	43b40000 	.word	0x43b40000
 8001824:	437f0000 	.word	0x437f0000
    } else {
        if (max_val == rf) {
 8001828:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800182c:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8001830:	eeb4 7a67 	vcmp.f32	s14, s15
 8001834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001838:	d11f      	bne.n	800187a <main+0x79a>
            h = 60 * ((gf - bf) / delta);
 800183a:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 800183e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001842:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001846:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 800184a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800184e:	ed1f 7a0d 	vldr	s14, [pc, #-52]	@ 800181c <main+0x73c>
 8001852:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001856:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            if (h < 0) h += 360; // Hが負の場合360を加算
 800185a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800185e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001866:	d543      	bpl.n	80018f0 <main+0x810>
 8001868:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800186c:	ed1f 7a14 	vldr	s14, [pc, #-80]	@ 8001820 <main+0x740>
 8001870:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001874:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
 8001878:	e03a      	b.n	80018f0 <main+0x810>
        } else if (max_val == gf) {
 800187a:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800187e:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001882:	eeb4 7a67 	vcmp.f32	s14, s15
 8001886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188a:	d114      	bne.n	80018b6 <main+0x7d6>
            h = 60 * ((bf - rf) / delta + 2);
 800188c:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8001890:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8001894:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001898:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 800189c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018a0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80018a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018a8:	ed1f 7a24 	vldr	s14, [pc, #-144]	@ 800181c <main+0x73c>
 80018ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b0:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
 80018b4:	e01c      	b.n	80018f0 <main+0x810>
        } else if (max_val == bf) {
 80018b6:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 80018ba:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80018be:	eeb4 7a67 	vcmp.f32	s14, s15
 80018c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c6:	d113      	bne.n	80018f0 <main+0x810>
            h = 60 * ((rf - gf) / delta + 4);
 80018c8:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80018cc:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80018d0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80018d4:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 80018d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018dc:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80018e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018e4:	ed1f 7a33 	vldr	s14, [pc, #-204]	@ 800181c <main+0x73c>
 80018e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ec:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
        }
    }

    // Hを0-255の範囲にスケール変換
    h = (h / 360) * 255;
 80018f0:	ed97 7a2a 	vldr	s14, [r7, #168]	@ 0xa8
 80018f4:	ed5f 6a36 	vldr	s13, [pc, #-216]	@ 8001820 <main+0x740>
 80018f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018fc:	ed1f 7a37 	vldr	s14, [pc, #-220]	@ 8001824 <main+0x744>
 8001900:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001904:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8

    camera[0] = h;
 8001908:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800190c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001910:	edc7 7a01 	vstr	s15, [r7, #4]
 8001914:	793b      	ldrb	r3, [r7, #4]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4bad      	ldr	r3, [pc, #692]	@ (8001bd0 <main+0xaf0>)
 800191a:	701a      	strb	r2, [r3, #0]

//get target
	performance.get_target_status(m_counter);
 800191c:	4bad      	ldr	r3, [pc, #692]	@ (8001bd4 <main+0xaf4>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001924:	4611      	mov	r1, r2
 8001926:	4618      	mov	r0, r3
 8001928:	f001 f8c5 	bl	8002ab6 <_ZN11PERFORMANCE17get_target_statusEm>


////START do MOVEMENT

//get movement distance
	for(int i=0; i<2; i++){cur_position_rec[i] = cur_movement[i] - position[i];}
 800192c:	2300      	movs	r3, #0
 800192e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001932:	e018      	b.n	8001966 <main+0x886>
 8001934:	4aa8      	ldr	r2, [pc, #672]	@ (8001bd8 <main+0xaf8>)
 8001936:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800193a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800193e:	b29a      	uxth	r2, r3
 8001940:	49a6      	ldr	r1, [pc, #664]	@ (8001bdc <main+0xafc>)
 8001942:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001946:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800194a:	b29b      	uxth	r3, r3
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	b29b      	uxth	r3, r3
 8001950:	b219      	sxth	r1, r3
 8001952:	4aa3      	ldr	r2, [pc, #652]	@ (8001be0 <main+0xb00>)
 8001954:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001958:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800195c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001960:	3301      	adds	r3, #1
 8001962:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001966:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800196a:	2b01      	cmp	r3, #1
 800196c:	dde2      	ble.n	8001934 <main+0x854>

//convert movement distance to polar coordinates
	cur_position_pol[0] = pow(pow(cur_position_rec[0], 2) + pow(cur_position_rec[1], 2), 0.5);
 800196e:	4b9c      	ldr	r3, [pc, #624]	@ (8001be0 <main+0xb00>)
 8001970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001974:	2102      	movs	r1, #2
 8001976:	4618      	mov	r0, r3
 8001978:	f000 fff1 	bl	800295e <_ZSt3powIsiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800197c:	ec55 4b10 	vmov	r4, r5, d0
 8001980:	4b97      	ldr	r3, [pc, #604]	@ (8001be0 <main+0xb00>)
 8001982:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001986:	2102      	movs	r1, #2
 8001988:	4618      	mov	r0, r3
 800198a:	f000 ffe8 	bl	800295e <_ZSt3powIsiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800198e:	ec53 2b10 	vmov	r2, r3, d0
 8001992:	4620      	mov	r0, r4
 8001994:	4629      	mov	r1, r5
 8001996:	f7fe fc3d 	bl	8000214 <__adddf3>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	ec43 2b17 	vmov	d7, r2, r3
 80019a2:	ed9f 1b87 	vldr	d1, [pc, #540]	@ 8001bc0 <main+0xae0>
 80019a6:	eeb0 0a47 	vmov.f32	s0, s14
 80019aa:	eef0 0a67 	vmov.f32	s1, s15
 80019ae:	f007 f9df 	bl	8008d70 <pow>
 80019b2:	ec53 2b10 	vmov	r2, r3, d0
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	f7ff f891 	bl	8000ae0 <__aeabi_d2iz>
 80019be:	4603      	mov	r3, r0
 80019c0:	b21a      	sxth	r2, r3
 80019c2:	4b88      	ldr	r3, [pc, #544]	@ (8001be4 <main+0xb04>)
 80019c4:	801a      	strh	r2, [r3, #0]
	cur_position_pol[1] = atan2(cur_position_rec[0], cur_position_rec[1]) / 3.1415 * 180.0;
 80019c6:	4b86      	ldr	r3, [pc, #536]	@ (8001be0 <main+0xb00>)
 80019c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019cc:	4a84      	ldr	r2, [pc, #528]	@ (8001be0 <main+0xb00>)
 80019ce:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 ffe5 	bl	80029a4 <_ZSt5atan2IssEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80019da:	ec51 0b10 	vmov	r0, r1, d0
 80019de:	a37a      	add	r3, pc, #488	@ (adr r3, 8001bc8 <main+0xae8>)
 80019e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e4:	f7fe fef6 	bl	80007d4 <__aeabi_ddiv>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	4b7c      	ldr	r3, [pc, #496]	@ (8001be8 <main+0xb08>)
 80019f6:	f7fe fdc3 	bl	8000580 <__aeabi_dmul>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	f7ff f86d 	bl	8000ae0 <__aeabi_d2iz>
 8001a06:	4603      	mov	r3, r0
 8001a08:	b21a      	sxth	r2, r3
 8001a0a:	4b76      	ldr	r3, [pc, #472]	@ (8001be4 <main+0xb04>)
 8001a0c:	805a      	strh	r2, [r3, #2]

//calculate movement speed from movement distance

	if((position[2] < cur_movement[2]) && (cur_position_pol[0] > dclr_thr)){speed ++;}
 8001a0e:	4b73      	ldr	r3, [pc, #460]	@ (8001bdc <main+0xafc>)
 8001a10:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001a14:	4b70      	ldr	r3, [pc, #448]	@ (8001bd8 <main+0xaf8>)
 8001a16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	da0f      	bge.n	8001a3e <main+0x95e>
 8001a1e:	4b71      	ldr	r3, [pc, #452]	@ (8001be4 <main+0xb04>)
 8001a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b71      	ldr	r3, [pc, #452]	@ (8001bec <main+0xb0c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	dd07      	ble.n	8001a3e <main+0x95e>
 8001a2e:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	3301      	adds	r3, #1
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 8001a3c:	e029      	b.n	8001a92 <main+0x9b2>
	else if(cur_position_pol[0] <= dclr_thr && cur_position_pol[0] > zero_thr){speed -= 2;}//速度制御
 8001a3e:	4b69      	ldr	r3, [pc, #420]	@ (8001be4 <main+0xb04>)
 8001a40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b69      	ldr	r3, [pc, #420]	@ (8001bec <main+0xb0c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	dc0e      	bgt.n	8001a6c <main+0x98c>
 8001a4e:	4b65      	ldr	r3, [pc, #404]	@ (8001be4 <main+0xb04>)
 8001a50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b66      	ldr	r3, [pc, #408]	@ (8001bf0 <main+0xb10>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	dd06      	ble.n	8001a6c <main+0x98c>
 8001a5e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8001a62:	3b02      	subs	r3, #2
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 8001a6a:	e012      	b.n	8001a92 <main+0x9b2>
	else if(position[2] >= cur_movement[2]){speed --;}
 8001a6c:	4b5b      	ldr	r3, [pc, #364]	@ (8001bdc <main+0xafc>)
 8001a6e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001a72:	4b59      	ldr	r3, [pc, #356]	@ (8001bd8 <main+0xaf8>)
 8001a74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	db07      	blt.n	8001a8c <main+0x9ac>
 8001a7c:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	3b01      	subs	r3, #1
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 8001a8a:	e002      	b.n	8001a92 <main+0x9b2>
	else{speed = 0;}
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6

	if(cur_position_pol[0] <= dclr_thr && cur_position_pol[0] > zero_thr && speed < 100){speed = 100;}
 8001a92:	4b54      	ldr	r3, [pc, #336]	@ (8001be4 <main+0xb04>)
 8001a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b54      	ldr	r3, [pc, #336]	@ (8001bec <main+0xb0c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	dc0e      	bgt.n	8001ac0 <main+0x9e0>
 8001aa2:	4b50      	ldr	r3, [pc, #320]	@ (8001be4 <main+0xb04>)
 8001aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b51      	ldr	r3, [pc, #324]	@ (8001bf0 <main+0xb10>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	dd06      	ble.n	8001ac0 <main+0x9e0>
 8001ab2:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 8001ab6:	2b63      	cmp	r3, #99	@ 0x63
 8001ab8:	dc02      	bgt.n	8001ac0 <main+0x9e0>
 8001aba:	2364      	movs	r3, #100	@ 0x64
 8001abc:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6

	if(speed > cur_movement[2]*3){speed = cur_movement[2]*3;}
 8001ac0:	f9b7 20b6 	ldrsh.w	r2, [r7, #182]	@ 0xb6
 8001ac4:	4b44      	ldr	r3, [pc, #272]	@ (8001bd8 <main+0xaf8>)
 8001ac6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001aca:	4619      	mov	r1, r3
 8001acc:	460b      	mov	r3, r1
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	440b      	add	r3, r1
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	dd0a      	ble.n	8001aec <main+0xa0c>
 8001ad6:	4b40      	ldr	r3, [pc, #256]	@ (8001bd8 <main+0xaf8>)
 8001ad8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	461a      	mov	r2, r3
 8001ae0:	0052      	lsls	r2, r2, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 8001aea:	e006      	b.n	8001afa <main+0xa1a>
	else if(speed < 0){speed = 0;}
 8001aec:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	da02      	bge.n	8001afa <main+0xa1a>
 8001af4:	2300      	movs	r3, #0
 8001af6:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6

	speed = ((speed*8) + (p_speed*2) + 10-1)/ 10;
 8001afa:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 8001afe:	009a      	lsls	r2, r3, #2
 8001b00:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 8001b04:	4413      	add	r3, r2
 8001b06:	3305      	adds	r3, #5
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	4a39      	ldr	r2, [pc, #228]	@ (8001bf4 <main+0xb14>)
 8001b0e:	fb82 1203 	smull	r1, r2, r2, r3
 8001b12:	1092      	asrs	r2, r2, #2
 8001b14:	17db      	asrs	r3, r3, #31
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
	p_speed = speed;
 8001b1c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8001b20:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4

	degree = cur_position_pol[1];
 8001b24:	4b2f      	ldr	r3, [pc, #188]	@ (8001be4 <main+0xb04>)
 8001b26:	885b      	ldrh	r3, [r3, #2]
 8001b28:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86


//calculate motor speed from movement speed
	speed_set(rotate, speed, degree, MTRS, 0.7);
 8001b2c:	4b32      	ldr	r3, [pc, #200]	@ (8001bf8 <main+0xb18>)
 8001b2e:	edd3 7a00 	vldr	s15, [r3]
 8001b32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b36:	f9b7 10b6 	ldrsh.w	r1, [r7, #182]	@ 0xb6
 8001b3a:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	@ 0x86
 8001b3e:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8001bfc <main+0xb1c>
 8001b42:	4b2f      	ldr	r3, [pc, #188]	@ (8001c00 <main+0xb20>)
 8001b44:	ee17 0a90 	vmov	r0, s15
 8001b48:	f000 fc7e 	bl	8002448 <_Z9speed_setiiiPsf>

//calculate sending array from motor speed
	set_array(MTRS, send_array);
 8001b4c:	492d      	ldr	r1, [pc, #180]	@ (8001c04 <main+0xb24>)
 8001b4e:	482c      	ldr	r0, [pc, #176]	@ (8001c00 <main+0xb20>)
 8001b50:	f000 fd84 	bl	800265c <_Z9set_arrayPsPh>

//stop_flag
	if(HAL_GPIO_ReadPin(STRTSW_GPIO_Port, STRTSW_Pin) != 1){stop_flag = 0;}
 8001b54:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b58:	482b      	ldr	r0, [pc, #172]	@ (8001c08 <main+0xb28>)
 8001b5a:	f003 fc6d 	bl	8005438 <HAL_GPIO_ReadPin>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	bf14      	ite	ne
 8001b64:	2301      	movne	r3, #1
 8001b66:	2300      	moveq	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <main+0xa96>
 8001b6e:	4b27      	ldr	r3, [pc, #156]	@ (8001c0c <main+0xb2c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
 8001b74:	e013      	b.n	8001b9e <main+0xabe>
//	else if(stop_counter > 10000){stop_flag = 0;}
//	else if(error_counter > 10000){stop_flag = 0;}
	else if(performance.get_shutdown() != 1){stop_flag = 0;}
 8001b76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 ff81 	bl	8002a82 <_ZN11PERFORMANCE12get_shutdownEv>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	bf14      	ite	ne
 8001b86:	2301      	movne	r3, #1
 8001b88:	2300      	moveq	r3, #0
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <main+0xab8>
 8001b90:	4b1e      	ldr	r3, [pc, #120]	@ (8001c0c <main+0xb2c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
 8001b96:	e002      	b.n	8001b9e <main+0xabe>
	else{stop_flag = 1;}
 8001b98:	4b1c      	ldr	r3, [pc, #112]	@ (8001c0c <main+0xb2c>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	701a      	strb	r2, [r3, #0]

//send to motor
	if(stop_flag == 1){
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c0c <main+0xb2c>)
 8001ba0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d106      	bne.n	8001bb6 <main+0xad6>
	  HAL_UART_Transmit(&huart6, send_array, 12, 1);
 8001ba8:	2301      	movs	r3, #1
 8001baa:	220c      	movs	r2, #12
 8001bac:	4915      	ldr	r1, [pc, #84]	@ (8001c04 <main+0xb24>)
 8001bae:	4818      	ldr	r0, [pc, #96]	@ (8001c10 <main+0xb30>)
 8001bb0:	f006 fa7a 	bl	80080a8 <HAL_UART_Transmit>
 8001bb4:	e05b      	b.n	8001c6e <main+0xb8e>
	}else{
		for(int i=0; i<4; i++){
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001bbc:	e04d      	b.n	8001c5a <main+0xb7a>
 8001bbe:	bf00      	nop
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	3fe00000 	.word	0x3fe00000
 8001bc8:	c083126f 	.word	0xc083126f
 8001bcc:	400921ca 	.word	0x400921ca
 8001bd0:	20000464 	.word	0x20000464
 8001bd4:	20000378 	.word	0x20000378
 8001bd8:	200003b4 	.word	0x200003b4
 8001bdc:	20000394 	.word	0x20000394
 8001be0:	200003bc 	.word	0x200003bc
 8001be4:	200003c0 	.word	0x200003c0
 8001be8:	40668000 	.word	0x40668000
 8001bec:	20000020 	.word	0x20000020
 8001bf0:	2000001c 	.word	0x2000001c
 8001bf4:	66666667 	.word	0x66666667
 8001bf8:	2000039c 	.word	0x2000039c
 8001bfc:	3f333333 	.word	0x3f333333
 8001c00:	20000384 	.word	0x20000384
 8001c04:	20000000 	.word	0x20000000
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	20000468 	.word	0x20000468
 8001c10:	20000270 	.word	0x20000270
		  send_array[3*i] = 250 + i;
 8001c14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c18:	b2d9      	uxtb	r1, r3
 8001c1a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001c1e:	4613      	mov	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	1f8a      	subs	r2, r1, #6
 8001c26:	b2d1      	uxtb	r1, r2
 8001c28:	4a75      	ldr	r2, [pc, #468]	@ (8001e00 <main+0xd20>)
 8001c2a:	54d1      	strb	r1, [r2, r3]
		  send_array[3*i + 1] = 210;
 8001c2c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001c30:	4613      	mov	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	4413      	add	r3, r2
 8001c36:	3301      	adds	r3, #1
 8001c38:	4a71      	ldr	r2, [pc, #452]	@ (8001e00 <main+0xd20>)
 8001c3a:	21d2      	movs	r1, #210	@ 0xd2
 8001c3c:	54d1      	strb	r1, [r2, r3]
		  send_array[3*i + 2] = 210;
 8001c3e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	3302      	adds	r3, #2
 8001c4a:	4a6d      	ldr	r2, [pc, #436]	@ (8001e00 <main+0xd20>)
 8001c4c:	21d2      	movs	r1, #210	@ 0xd2
 8001c4e:	54d1      	strb	r1, [r2, r3]
		for(int i=0; i<4; i++){
 8001c50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c54:	3301      	adds	r3, #1
 8001c56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	ddd8      	ble.n	8001c14 <main+0xb34>
		}
		HAL_UART_Transmit(&huart6, send_array, 12, 1);
 8001c62:	2301      	movs	r3, #1
 8001c64:	220c      	movs	r2, #12
 8001c66:	4966      	ldr	r1, [pc, #408]	@ (8001e00 <main+0xd20>)
 8001c68:	4866      	ldr	r0, [pc, #408]	@ (8001e04 <main+0xd24>)
 8001c6a:	f006 fa1d 	bl	80080a8 <HAL_UART_Transmit>
	}

//send to panel
	uint8_t display_send_array[13];
	for(int i=0; i<13; i++){
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001c74:	e010      	b.n	8001c98 <main+0xbb8>
		display_send_array[i] = display[i];
 8001c76:	4a64      	ldr	r2, [pc, #400]	@ (8001e08 <main+0xd28>)
 8001c78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c7c:	4413      	add	r3, r2
 8001c7e:	7819      	ldrb	r1, [r3, #0]
 8001c80:	f107 020c 	add.w	r2, r7, #12
 8001c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c88:	4413      	add	r3, r2
 8001c8a:	460a      	mov	r2, r1
 8001c8c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<13; i++){
 8001c8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c92:	3301      	adds	r3, #1
 8001c94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001c98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c9c:	2b0c      	cmp	r3, #12
 8001c9e:	ddea      	ble.n	8001c76 <main+0xb96>
	}

	if(performance.get_fixing() == 1){
 8001ca0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 fef9 	bl	8002a9c <_ZN11PERFORMANCE10get_fixingEv>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	bf0c      	ite	eq
 8001cb0:	2301      	moveq	r3, #1
 8001cb2:	2300      	movne	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d054      	beq.n	8001d64 <main+0xc84>
		int16_t fixing1;
		int16_t fixing2;
		fixing1 = circle_position[0] - position[0];
 8001cba:	4b54      	ldr	r3, [pc, #336]	@ (8001e0c <main+0xd2c>)
 8001cbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	4b53      	ldr	r3, [pc, #332]	@ (8001e10 <main+0xd30>)
 8001cc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
		fixing1 = fixing1 / 10;
 8001cd2:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	@ 0x84
 8001cd6:	4a4f      	ldr	r2, [pc, #316]	@ (8001e14 <main+0xd34>)
 8001cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8001cdc:	1092      	asrs	r2, r2, #2
 8001cde:	17db      	asrs	r3, r3, #31
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
		fixing1 = 24 + fixing1;
 8001ce6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8001cea:	3318      	adds	r3, #24
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
		display_send_array[1] = fixing1+100;
 8001cf2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	3364      	adds	r3, #100	@ 0x64
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	737b      	strb	r3, [r7, #13]

		display_send_array[2] = circle_position[1] / 10 + 100;
 8001cfe:	4b43      	ldr	r3, [pc, #268]	@ (8001e0c <main+0xd2c>)
 8001d00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d04:	4a43      	ldr	r2, [pc, #268]	@ (8001e14 <main+0xd34>)
 8001d06:	fb82 1203 	smull	r1, r2, r2, r3
 8001d0a:	1092      	asrs	r2, r2, #2
 8001d0c:	17db      	asrs	r3, r3, #31
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	3364      	adds	r3, #100	@ 0x64
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	73bb      	strb	r3, [r7, #14]

		fixing2 = circle_position[2] - position[1] * circle_position[2] / shrink_const;
 8001d1a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e0c <main+0xd2c>)
 8001d1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	4b3b      	ldr	r3, [pc, #236]	@ (8001e10 <main+0xd30>)
 8001d24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4b38      	ldr	r3, [pc, #224]	@ (8001e0c <main+0xd2c>)
 8001d2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	4938      	ldr	r1, [pc, #224]	@ (8001e18 <main+0xd38>)
 8001d36:	8809      	ldrh	r1, [r1, #0]
 8001d38:	fb93 f3f1 	sdiv	r3, r3, r1
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
		fixing2 = fixing2 / 10;
 8001d46:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 8001d4a:	4a32      	ldr	r2, [pc, #200]	@ (8001e14 <main+0xd34>)
 8001d4c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d50:	1092      	asrs	r2, r2, #2
 8001d52:	17db      	asrs	r3, r3, #31
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
		display_send_array[3] = fixing2;
 8001d5a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	73fb      	strb	r3, [r7, #15]
 8001d62:	e009      	b.n	8001d78 <main+0xc98>
	}else{
		display_send_array[1] = display[1] + 100;
 8001d64:	4b28      	ldr	r3, [pc, #160]	@ (8001e08 <main+0xd28>)
 8001d66:	785b      	ldrb	r3, [r3, #1]
 8001d68:	3364      	adds	r3, #100	@ 0x64
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	737b      	strb	r3, [r7, #13]
		display_send_array[2] = display[2] + 100;
 8001d6e:	4b26      	ldr	r3, [pc, #152]	@ (8001e08 <main+0xd28>)
 8001d70:	789b      	ldrb	r3, [r3, #2]
 8001d72:	3364      	adds	r3, #100	@ 0x64
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	73bb      	strb	r3, [r7, #14]
	}

	for(int i=0; i<12; i++){
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001d7e:	e021      	b.n	8001dc4 <main+0xce4>
		if(display_send_array[i+1] == 250){display_send_array[i+1]++;}
 8001d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d84:	3301      	adds	r3, #1
 8001d86:	33c0      	adds	r3, #192	@ 0xc0
 8001d88:	f107 0208 	add.w	r2, r7, #8
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f813 3cbc 	ldrb.w	r3, [r3, #-188]
 8001d92:	2bfa      	cmp	r3, #250	@ 0xfa
 8001d94:	d111      	bne.n	8001dba <main+0xcda>
 8001d96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8001da0:	f107 0108 	add.w	r1, r7, #8
 8001da4:	440a      	add	r2, r1
 8001da6:	f812 2cbc 	ldrb.w	r2, [r2, #-188]
 8001daa:	3201      	adds	r2, #1
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	33c0      	adds	r3, #192	@ 0xc0
 8001db0:	f107 0108 	add.w	r1, r7, #8
 8001db4:	440b      	add	r3, r1
 8001db6:	f803 2cbc 	strb.w	r2, [r3, #-188]
	for(int i=0; i<12; i++){
 8001dba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001dc8:	2b0b      	cmp	r3, #11
 8001dca:	ddd9      	ble.n	8001d80 <main+0xca0>
		else{}
	}
	HAL_UART_Transmit(&huart3, display_send_array, 13, 1);
 8001dcc:	f107 010c 	add.w	r1, r7, #12
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	220d      	movs	r2, #13
 8001dd4:	4811      	ldr	r0, [pc, #68]	@ (8001e1c <main+0xd3c>)
 8001dd6:	f006 f967 	bl	80080a8 <HAL_UART_Transmit>

////END do MOVEMENT


//Lチカ
	if(m_counter - Ltika_pcounter > 1000){
 8001dda:	4b11      	ldr	r3, [pc, #68]	@ (8001e20 <main+0xd40>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001de8:	f67f aa80 	bls.w	80012ec <main+0x20c>
	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8001dec:	2104      	movs	r1, #4
 8001dee:	480d      	ldr	r0, [pc, #52]	@ (8001e24 <main+0xd44>)
 8001df0:	f003 fb53 	bl	800549a <HAL_GPIO_TogglePin>
	Ltika_pcounter = m_counter;
 8001df4:	4b0a      	ldr	r3, [pc, #40]	@ (8001e20 <main+0xd40>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001dfc:	f7ff ba76 	b.w	80012ec <main+0x20c>
 8001e00:	20000000 	.word	0x20000000
 8001e04:	20000270 	.word	0x20000270
 8001e08:	2000000c 	.word	0x2000000c
 8001e0c:	200003a0 	.word	0x200003a0
 8001e10:	20000394 	.word	0x20000394
 8001e14:	66666667 	.word	0x66666667
 8001e18:	20000024 	.word	0x20000024
 8001e1c:	20000228 	.word	0x20000228
 8001e20:	20000378 	.word	0x20000378
 8001e24:	40020400 	.word	0x40020400

08001e28 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b094      	sub	sp, #80	@ 0x50
 8001e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e2e:	f107 031c 	add.w	r3, r7, #28
 8001e32:	2234      	movs	r2, #52	@ 0x34
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f009 f902 	bl	800b040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e3c:	f107 0308 	add.w	r3, r7, #8
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	4b34      	ldr	r3, [pc, #208]	@ (8001f24 <_Z18SystemClock_Configv+0xfc>)
 8001e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e54:	4a33      	ldr	r2, [pc, #204]	@ (8001f24 <_Z18SystemClock_Configv+0xfc>)
 8001e56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e5c:	4b31      	ldr	r3, [pc, #196]	@ (8001f24 <_Z18SystemClock_Configv+0xfc>)
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e68:	2300      	movs	r3, #0
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f28 <_Z18SystemClock_Configv+0x100>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a2d      	ldr	r2, [pc, #180]	@ (8001f28 <_Z18SystemClock_Configv+0x100>)
 8001e72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b2b      	ldr	r3, [pc, #172]	@ (8001f28 <_Z18SystemClock_Configv+0x100>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e80:	603b      	str	r3, [r7, #0]
 8001e82:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e84:	2302      	movs	r3, #2
 8001e86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e8c:	2310      	movs	r3, #16
 8001e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e90:	2302      	movs	r3, #2
 8001e92:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e94:	2300      	movs	r3, #0
 8001e96:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001e98:	2310      	movs	r3, #16
 8001e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001e9c:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8001ea0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f004 fec8 	bl	8006c48 <HAL_RCC_OscConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	bf14      	ite	ne
 8001ebe:	2301      	movne	r3, #1
 8001ec0:	2300      	moveq	r3, #0
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8001ec8:	f000 fd43 	bl	8002952 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ecc:	f004 fb24 	bl	8006518 <HAL_PWREx_EnableOverDrive>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	bf14      	ite	ne
 8001ed6:	2301      	movne	r3, #1
 8001ed8:	2300      	moveq	r3, #0
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8001ee0:	f000 fd37 	bl	8002952 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ee4:	230f      	movs	r3, #15
 8001ee6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eec:	2300      	movs	r3, #0
 8001eee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ef0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ef4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001ef6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001efa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001efc:	f107 0308 	add.w	r3, r7, #8
 8001f00:	2105      	movs	r1, #5
 8001f02:	4618      	mov	r0, r3
 8001f04:	f004 fb58 	bl	80065b8 <HAL_RCC_ClockConfig>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	bf14      	ite	ne
 8001f0e:	2301      	movne	r3, #1
 8001f10:	2300      	moveq	r3, #0
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <_Z18SystemClock_Configv+0xf4>
  {
    Error_Handler();
 8001f18:	f000 fd1b 	bl	8002952 <Error_Handler>
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	3750      	adds	r7, #80	@ 0x50
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40007000 	.word	0x40007000

08001f2c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f30:	4b15      	ldr	r3, [pc, #84]	@ (8001f88 <_ZL12MX_I2C1_Initv+0x5c>)
 8001f32:	4a16      	ldr	r2, [pc, #88]	@ (8001f8c <_ZL12MX_I2C1_Initv+0x60>)
 8001f34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f36:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <_ZL12MX_I2C1_Initv+0x5c>)
 8001f38:	4a15      	ldr	r2, [pc, #84]	@ (8001f90 <_ZL12MX_I2C1_Initv+0x64>)
 8001f3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f3c:	4b12      	ldr	r3, [pc, #72]	@ (8001f88 <_ZL12MX_I2C1_Initv+0x5c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f42:	4b11      	ldr	r3, [pc, #68]	@ (8001f88 <_ZL12MX_I2C1_Initv+0x5c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f48:	4b0f      	ldr	r3, [pc, #60]	@ (8001f88 <_ZL12MX_I2C1_Initv+0x5c>)
 8001f4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f50:	4b0d      	ldr	r3, [pc, #52]	@ (8001f88 <_ZL12MX_I2C1_Initv+0x5c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f56:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <_ZL12MX_I2C1_Initv+0x5c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f88 <_ZL12MX_I2C1_Initv+0x5c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f62:	4b09      	ldr	r3, [pc, #36]	@ (8001f88 <_ZL12MX_I2C1_Initv+0x5c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f68:	4807      	ldr	r0, [pc, #28]	@ (8001f88 <_ZL12MX_I2C1_Initv+0x5c>)
 8001f6a:	f003 fab1 	bl	80054d0 <HAL_I2C_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bf14      	ite	ne
 8001f74:	2301      	movne	r3, #1
 8001f76:	2300      	moveq	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001f7e:	f000 fce8 	bl	8002952 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200000b4 	.word	0x200000b4
 8001f8c:	40005400 	.word	0x40005400
 8001f90:	000186a0 	.word	0x000186a0

08001f94 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f9a:	f107 0308 	add.w	r3, r7, #8
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa8:	463b      	mov	r3, r7
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fb0:	4b25      	ldr	r3, [pc, #148]	@ (8002048 <_ZL12MX_TIM2_Initv+0xb4>)
 8001fb2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001fb8:	4b23      	ldr	r3, [pc, #140]	@ (8002048 <_ZL12MX_TIM2_Initv+0xb4>)
 8001fba:	2259      	movs	r2, #89	@ 0x59
 8001fbc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fbe:	4b22      	ldr	r3, [pc, #136]	@ (8002048 <_ZL12MX_TIM2_Initv+0xb4>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001fc4:	4b20      	ldr	r3, [pc, #128]	@ (8002048 <_ZL12MX_TIM2_Initv+0xb4>)
 8001fc6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fcc:	4b1e      	ldr	r3, [pc, #120]	@ (8002048 <_ZL12MX_TIM2_Initv+0xb4>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002048 <_ZL12MX_TIM2_Initv+0xb4>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fd8:	481b      	ldr	r0, [pc, #108]	@ (8002048 <_ZL12MX_TIM2_Initv+0xb4>)
 8001fda:	f005 f8d3 	bl	8007184 <HAL_TIM_Base_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	bf14      	ite	ne
 8001fe4:	2301      	movne	r3, #1
 8001fe6:	2300      	moveq	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001fee:	f000 fcb0 	bl	8002952 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ff6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ff8:	f107 0308 	add.w	r3, r7, #8
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4812      	ldr	r0, [pc, #72]	@ (8002048 <_ZL12MX_TIM2_Initv+0xb4>)
 8002000:	f005 fb8c 	bl	800771c <HAL_TIM_ConfigClockSource>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	bf14      	ite	ne
 800200a:	2301      	movne	r3, #1
 800200c:	2300      	moveq	r3, #0
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8002014:	f000 fc9d 	bl	8002952 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002018:	2300      	movs	r3, #0
 800201a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002020:	463b      	mov	r3, r7
 8002022:	4619      	mov	r1, r3
 8002024:	4808      	ldr	r0, [pc, #32]	@ (8002048 <_ZL12MX_TIM2_Initv+0xb4>)
 8002026:	f005 ff5f 	bl	8007ee8 <HAL_TIMEx_MasterConfigSynchronization>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	bf14      	ite	ne
 8002030:	2301      	movne	r3, #1
 8002032:	2300      	moveq	r3, #0
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 800203a:	f000 fc8a 	bl	8002952 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800203e:	bf00      	nop
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000108 	.word	0x20000108

0800204c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08e      	sub	sp, #56	@ 0x38
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002052:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002060:	f107 0320 	add.w	r3, r7, #32
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
 8002078:	615a      	str	r2, [r3, #20]
 800207a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800207c:	4b39      	ldr	r3, [pc, #228]	@ (8002164 <_ZL12MX_TIM4_Initv+0x118>)
 800207e:	4a3a      	ldr	r2, [pc, #232]	@ (8002168 <_ZL12MX_TIM4_Initv+0x11c>)
 8002080:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002082:	4b38      	ldr	r3, [pc, #224]	@ (8002164 <_ZL12MX_TIM4_Initv+0x118>)
 8002084:	2200      	movs	r2, #0
 8002086:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002088:	4b36      	ldr	r3, [pc, #216]	@ (8002164 <_ZL12MX_TIM4_Initv+0x118>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800208e:	4b35      	ldr	r3, [pc, #212]	@ (8002164 <_ZL12MX_TIM4_Initv+0x118>)
 8002090:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002094:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002096:	4b33      	ldr	r3, [pc, #204]	@ (8002164 <_ZL12MX_TIM4_Initv+0x118>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209c:	4b31      	ldr	r3, [pc, #196]	@ (8002164 <_ZL12MX_TIM4_Initv+0x118>)
 800209e:	2200      	movs	r2, #0
 80020a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80020a2:	4830      	ldr	r0, [pc, #192]	@ (8002164 <_ZL12MX_TIM4_Initv+0x118>)
 80020a4:	f005 f86e 	bl	8007184 <HAL_TIM_Base_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	bf14      	ite	ne
 80020ae:	2301      	movne	r3, #1
 80020b0:	2300      	moveq	r3, #0
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <_ZL12MX_TIM4_Initv+0x70>
  {
    Error_Handler();
 80020b8:	f000 fc4b 	bl	8002952 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80020c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020c6:	4619      	mov	r1, r3
 80020c8:	4826      	ldr	r0, [pc, #152]	@ (8002164 <_ZL12MX_TIM4_Initv+0x118>)
 80020ca:	f005 fb27 	bl	800771c <HAL_TIM_ConfigClockSource>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bf14      	ite	ne
 80020d4:	2301      	movne	r3, #1
 80020d6:	2300      	moveq	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <_ZL12MX_TIM4_Initv+0x96>
  {
    Error_Handler();
 80020de:	f000 fc38 	bl	8002952 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80020e2:	4820      	ldr	r0, [pc, #128]	@ (8002164 <_ZL12MX_TIM4_Initv+0x118>)
 80020e4:	f005 f90e 	bl	8007304 <HAL_TIM_PWM_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	bf14      	ite	ne
 80020ee:	2301      	movne	r3, #1
 80020f0:	2300      	moveq	r3, #0
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <_ZL12MX_TIM4_Initv+0xb0>
  {
    Error_Handler();
 80020f8:	f000 fc2b 	bl	8002952 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020fc:	2300      	movs	r3, #0
 80020fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002104:	f107 0320 	add.w	r3, r7, #32
 8002108:	4619      	mov	r1, r3
 800210a:	4816      	ldr	r0, [pc, #88]	@ (8002164 <_ZL12MX_TIM4_Initv+0x118>)
 800210c:	f005 feec 	bl	8007ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	bf14      	ite	ne
 8002116:	2301      	movne	r3, #1
 8002118:	2300      	moveq	r3, #0
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <_ZL12MX_TIM4_Initv+0xd8>
  {
    Error_Handler();
 8002120:	f000 fc17 	bl	8002952 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002124:	2360      	movs	r3, #96	@ 0x60
 8002126:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002134:	1d3b      	adds	r3, r7, #4
 8002136:	2200      	movs	r2, #0
 8002138:	4619      	mov	r1, r3
 800213a:	480a      	ldr	r0, [pc, #40]	@ (8002164 <_ZL12MX_TIM4_Initv+0x118>)
 800213c:	f005 fa2c 	bl	8007598 <HAL_TIM_PWM_ConfigChannel>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	bf14      	ite	ne
 8002146:	2301      	movne	r3, #1
 8002148:	2300      	moveq	r3, #0
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <_ZL12MX_TIM4_Initv+0x108>
  {
    Error_Handler();
 8002150:	f000 fbff 	bl	8002952 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002154:	4803      	ldr	r0, [pc, #12]	@ (8002164 <_ZL12MX_TIM4_Initv+0x118>)
 8002156:	f002 f86d 	bl	8004234 <HAL_TIM_MspPostInit>

}
 800215a:	bf00      	nop
 800215c:	3738      	adds	r7, #56	@ 0x38
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000150 	.word	0x20000150
 8002168:	40000800 	.word	0x40000800

0800216c <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002170:	4b13      	ldr	r3, [pc, #76]	@ (80021c0 <_ZL13MX_UART5_Initv+0x54>)
 8002172:	4a14      	ldr	r2, [pc, #80]	@ (80021c4 <_ZL13MX_UART5_Initv+0x58>)
 8002174:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002176:	4b12      	ldr	r3, [pc, #72]	@ (80021c0 <_ZL13MX_UART5_Initv+0x54>)
 8002178:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800217c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800217e:	4b10      	ldr	r3, [pc, #64]	@ (80021c0 <_ZL13MX_UART5_Initv+0x54>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002184:	4b0e      	ldr	r3, [pc, #56]	@ (80021c0 <_ZL13MX_UART5_Initv+0x54>)
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800218a:	4b0d      	ldr	r3, [pc, #52]	@ (80021c0 <_ZL13MX_UART5_Initv+0x54>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002190:	4b0b      	ldr	r3, [pc, #44]	@ (80021c0 <_ZL13MX_UART5_Initv+0x54>)
 8002192:	220c      	movs	r2, #12
 8002194:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002196:	4b0a      	ldr	r3, [pc, #40]	@ (80021c0 <_ZL13MX_UART5_Initv+0x54>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800219c:	4b08      	ldr	r3, [pc, #32]	@ (80021c0 <_ZL13MX_UART5_Initv+0x54>)
 800219e:	2200      	movs	r2, #0
 80021a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80021a2:	4807      	ldr	r0, [pc, #28]	@ (80021c0 <_ZL13MX_UART5_Initv+0x54>)
 80021a4:	f005 ff30 	bl	8008008 <HAL_UART_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	bf14      	ite	ne
 80021ae:	2301      	movne	r3, #1
 80021b0:	2300      	moveq	r3, #0
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <_ZL13MX_UART5_Initv+0x50>
  {
    Error_Handler();
 80021b8:	f000 fbcb 	bl	8002952 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000198 	.word	0x20000198
 80021c4:	40005000 	.word	0x40005000

080021c8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021cc:	4b13      	ldr	r3, [pc, #76]	@ (800221c <_ZL19MX_USART2_UART_Initv+0x54>)
 80021ce:	4a14      	ldr	r2, [pc, #80]	@ (8002220 <_ZL19MX_USART2_UART_Initv+0x58>)
 80021d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021d2:	4b12      	ldr	r3, [pc, #72]	@ (800221c <_ZL19MX_USART2_UART_Initv+0x54>)
 80021d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021da:	4b10      	ldr	r3, [pc, #64]	@ (800221c <_ZL19MX_USART2_UART_Initv+0x54>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021e0:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <_ZL19MX_USART2_UART_Initv+0x54>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021e6:	4b0d      	ldr	r3, [pc, #52]	@ (800221c <_ZL19MX_USART2_UART_Initv+0x54>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021ec:	4b0b      	ldr	r3, [pc, #44]	@ (800221c <_ZL19MX_USART2_UART_Initv+0x54>)
 80021ee:	220c      	movs	r2, #12
 80021f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021f2:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <_ZL19MX_USART2_UART_Initv+0x54>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f8:	4b08      	ldr	r3, [pc, #32]	@ (800221c <_ZL19MX_USART2_UART_Initv+0x54>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021fe:	4807      	ldr	r0, [pc, #28]	@ (800221c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002200:	f005 ff02 	bl	8008008 <HAL_UART_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf14      	ite	ne
 800220a:	2301      	movne	r3, #1
 800220c:	2300      	moveq	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002214:	f000 fb9d 	bl	8002952 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}
 800221c:	200001e0 	.word	0x200001e0
 8002220:	40004400 	.word	0x40004400

08002224 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002228:	4b13      	ldr	r3, [pc, #76]	@ (8002278 <_ZL19MX_USART3_UART_Initv+0x54>)
 800222a:	4a14      	ldr	r2, [pc, #80]	@ (800227c <_ZL19MX_USART3_UART_Initv+0x58>)
 800222c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800222e:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002230:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002234:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002236:	4b10      	ldr	r3, [pc, #64]	@ (8002278 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800223c:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <_ZL19MX_USART3_UART_Initv+0x54>)
 800223e:	2200      	movs	r2, #0
 8002240:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002242:	4b0d      	ldr	r3, [pc, #52]	@ (8002278 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002248:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <_ZL19MX_USART3_UART_Initv+0x54>)
 800224a:	220c      	movs	r2, #12
 800224c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800224e:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002254:	4b08      	ldr	r3, [pc, #32]	@ (8002278 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002256:	2200      	movs	r2, #0
 8002258:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800225a:	4807      	ldr	r0, [pc, #28]	@ (8002278 <_ZL19MX_USART3_UART_Initv+0x54>)
 800225c:	f005 fed4 	bl	8008008 <HAL_UART_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	bf14      	ite	ne
 8002266:	2301      	movne	r3, #1
 8002268:	2300      	moveq	r3, #0
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8002270:	f000 fb6f 	bl	8002952 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000228 	.word	0x20000228
 800227c:	40004800 	.word	0x40004800

08002280 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002284:	4b13      	ldr	r3, [pc, #76]	@ (80022d4 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002286:	4a14      	ldr	r2, [pc, #80]	@ (80022d8 <_ZL19MX_USART6_UART_Initv+0x58>)
 8002288:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800228a:	4b12      	ldr	r3, [pc, #72]	@ (80022d4 <_ZL19MX_USART6_UART_Initv+0x54>)
 800228c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002290:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002292:	4b10      	ldr	r3, [pc, #64]	@ (80022d4 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002298:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <_ZL19MX_USART6_UART_Initv+0x54>)
 800229a:	2200      	movs	r2, #0
 800229c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800229e:	4b0d      	ldr	r3, [pc, #52]	@ (80022d4 <_ZL19MX_USART6_UART_Initv+0x54>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80022a4:	4b0b      	ldr	r3, [pc, #44]	@ (80022d4 <_ZL19MX_USART6_UART_Initv+0x54>)
 80022a6:	220c      	movs	r2, #12
 80022a8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022aa:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <_ZL19MX_USART6_UART_Initv+0x54>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b0:	4b08      	ldr	r3, [pc, #32]	@ (80022d4 <_ZL19MX_USART6_UART_Initv+0x54>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80022b6:	4807      	ldr	r0, [pc, #28]	@ (80022d4 <_ZL19MX_USART6_UART_Initv+0x54>)
 80022b8:	f005 fea6 	bl	8008008 <HAL_UART_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	bf14      	ite	ne
 80022c2:	2301      	movne	r3, #1
 80022c4:	2300      	moveq	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 80022cc:	f000 fb41 	bl	8002952 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000270 	.word	0x20000270
 80022d8:	40011400 	.word	0x40011400

080022dc <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	607b      	str	r3, [r7, #4]
 80022e6:	4b10      	ldr	r3, [pc, #64]	@ (8002328 <_ZL11MX_DMA_Initv+0x4c>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002328 <_ZL11MX_DMA_Initv+0x4c>)
 80022ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002328 <_ZL11MX_DMA_Initv+0x4c>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2100      	movs	r1, #0
 8002302:	200b      	movs	r0, #11
 8002304:	f002 fb5d 	bl	80049c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002308:	200b      	movs	r0, #11
 800230a:	f002 fb76 	bl	80049fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800230e:	2200      	movs	r2, #0
 8002310:	2100      	movs	r1, #0
 8002312:	2010      	movs	r0, #16
 8002314:	f002 fb55 	bl	80049c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002318:	2010      	movs	r0, #16
 800231a:	f002 fb6e 	bl	80049fa <HAL_NVIC_EnableIRQ>

}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40023800 	.word	0x40023800

0800232c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	@ 0x28
 8002330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	605a      	str	r2, [r3, #4]
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	60da      	str	r2, [r3, #12]
 8002340:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	4b3d      	ldr	r3, [pc, #244]	@ (800243c <_ZL12MX_GPIO_Initv+0x110>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	4a3c      	ldr	r2, [pc, #240]	@ (800243c <_ZL12MX_GPIO_Initv+0x110>)
 800234c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002350:	6313      	str	r3, [r2, #48]	@ 0x30
 8002352:	4b3a      	ldr	r3, [pc, #232]	@ (800243c <_ZL12MX_GPIO_Initv+0x110>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	4b36      	ldr	r3, [pc, #216]	@ (800243c <_ZL12MX_GPIO_Initv+0x110>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	4a35      	ldr	r2, [pc, #212]	@ (800243c <_ZL12MX_GPIO_Initv+0x110>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6313      	str	r3, [r2, #48]	@ 0x30
 800236e:	4b33      	ldr	r3, [pc, #204]	@ (800243c <_ZL12MX_GPIO_Initv+0x110>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	4b2f      	ldr	r3, [pc, #188]	@ (800243c <_ZL12MX_GPIO_Initv+0x110>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	4a2e      	ldr	r2, [pc, #184]	@ (800243c <_ZL12MX_GPIO_Initv+0x110>)
 8002384:	f043 0304 	orr.w	r3, r3, #4
 8002388:	6313      	str	r3, [r2, #48]	@ 0x30
 800238a:	4b2c      	ldr	r3, [pc, #176]	@ (800243c <_ZL12MX_GPIO_Initv+0x110>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	4b28      	ldr	r3, [pc, #160]	@ (800243c <_ZL12MX_GPIO_Initv+0x110>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	4a27      	ldr	r2, [pc, #156]	@ (800243c <_ZL12MX_GPIO_Initv+0x110>)
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a6:	4b25      	ldr	r3, [pc, #148]	@ (800243c <_ZL12MX_GPIO_Initv+0x110>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	4b21      	ldr	r3, [pc, #132]	@ (800243c <_ZL12MX_GPIO_Initv+0x110>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	4a20      	ldr	r2, [pc, #128]	@ (800243c <_ZL12MX_GPIO_Initv+0x110>)
 80023bc:	f043 0308 	orr.w	r3, r3, #8
 80023c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023c2:	4b1e      	ldr	r3, [pc, #120]	@ (800243c <_ZL12MX_GPIO_Initv+0x110>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Servo_ON_GPIO_Port, Servo_ON_Pin, GPIO_PIN_RESET);
 80023ce:	2200      	movs	r2, #0
 80023d0:	2102      	movs	r1, #2
 80023d2:	481b      	ldr	r0, [pc, #108]	@ (8002440 <_ZL12MX_GPIO_Initv+0x114>)
 80023d4:	f003 f848 	bl	8005468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80023d8:	2200      	movs	r2, #0
 80023da:	2104      	movs	r1, #4
 80023dc:	4819      	ldr	r0, [pc, #100]	@ (8002444 <_ZL12MX_GPIO_Initv+0x118>)
 80023de:	f003 f843 	bl	8005468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Servo_ON_Pin */
  GPIO_InitStruct.Pin = Servo_ON_Pin;
 80023e2:	2302      	movs	r3, #2
 80023e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e6:	2301      	movs	r3, #1
 80023e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ee:	2300      	movs	r3, #0
 80023f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Servo_ON_GPIO_Port, &GPIO_InitStruct);
 80023f2:	f107 0314 	add.w	r3, r7, #20
 80023f6:	4619      	mov	r1, r3
 80023f8:	4811      	ldr	r0, [pc, #68]	@ (8002440 <_ZL12MX_GPIO_Initv+0x114>)
 80023fa:	f002 fe89 	bl	8005110 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80023fe:	2304      	movs	r3, #4
 8002400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002402:	2301      	movs	r3, #1
 8002404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	4619      	mov	r1, r3
 8002414:	480b      	ldr	r0, [pc, #44]	@ (8002444 <_ZL12MX_GPIO_Initv+0x118>)
 8002416:	f002 fe7b 	bl	8005110 <HAL_GPIO_Init>

  /*Configure GPIO pins : STRTSW_Pin TACTSW0_Pin */
  GPIO_InitStruct.Pin = STRTSW_Pin|TACTSW0_Pin;
 800241a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800241e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002420:	2300      	movs	r3, #0
 8002422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	4619      	mov	r1, r3
 800242e:	4805      	ldr	r0, [pc, #20]	@ (8002444 <_ZL12MX_GPIO_Initv+0x118>)
 8002430:	f002 fe6e 	bl	8005110 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002434:	bf00      	nop
 8002436:	3728      	adds	r7, #40	@ 0x28
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40023800 	.word	0x40023800
 8002440:	40020000 	.word	0x40020000
 8002444:	40020400 	.word	0x40020400

08002448 <_Z9speed_setiiiPsf>:

/* USER CODE BEGIN 4 */
void speed_set(int gyro_degree, int goal_speed, int goal_degree, int16_t* mtrspeed, float motor_rate){
 8002448:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800244c:	b08a      	sub	sp, #40	@ 0x28
 800244e:	af00      	add	r7, sp, #0
 8002450:	6178      	str	r0, [r7, #20]
 8002452:	6139      	str	r1, [r7, #16]
 8002454:	60fa      	str	r2, [r7, #12]
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	ed87 0a01 	vstr	s0, [r7, #4]
	goal_degree = goal_degree % 360;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4a7a      	ldr	r2, [pc, #488]	@ (8002648 <_Z9speed_setiiiPsf+0x200>)
 8002460:	fb82 1203 	smull	r1, r2, r2, r3
 8002464:	441a      	add	r2, r3
 8002466:	1211      	asrs	r1, r2, #8
 8002468:	17da      	asrs	r2, r3, #31
 800246a:	1a8a      	subs	r2, r1, r2
 800246c:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8002470:	fb01 f202 	mul.w	r2, r1, r2
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	60fb      	str	r3, [r7, #12]
	if(goal_degree < 0){goal_degree += 360;}
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	da03      	bge.n	8002486 <_Z9speed_setiiiPsf+0x3e>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002484:	60fb      	str	r3, [r7, #12]


    int roll_speed;
    if(gyro_degree > 180){gyro_degree -= 360;}
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2bb4      	cmp	r3, #180	@ 0xb4
 800248a:	dd04      	ble.n	8002496 <_Z9speed_setiiiPsf+0x4e>
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	e007      	b.n	80024a6 <_Z9speed_setiiiPsf+0x5e>
    else if(gyro_degree <-180){gyro_degree += 360;}
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f113 0fb4 	cmn.w	r3, #180	@ 0xb4
 800249c:	da03      	bge.n	80024a6 <_Z9speed_setiiiPsf+0x5e>
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80024a4:	617b      	str	r3, [r7, #20]
    else{}


    if (gyro_degree > 0){
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	dd11      	ble.n	80024d0 <_Z9speed_setiiiPsf+0x88>
        roll_speed = gyro_degree * 50;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2232      	movs	r2, #50	@ 0x32
 80024b0:	fb02 f303 	mul.w	r3, r2, r3
 80024b4:	627b      	str	r3, [r7, #36]	@ 0x24
        if (gyro_degree < 2){
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	dc01      	bgt.n	80024c0 <_Z9speed_setiiiPsf+0x78>
            roll_speed = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        if (roll_speed > 500){
 80024c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80024c6:	dd1a      	ble.n	80024fe <_Z9speed_setiiiPsf+0xb6>
            roll_speed = 500;
 80024c8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80024cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ce:	e016      	b.n	80024fe <_Z9speed_setiiiPsf+0xb6>
        }
    }else if (gyro_degree < 0){
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	da11      	bge.n	80024fa <_Z9speed_setiiiPsf+0xb2>
        roll_speed = gyro_degree * 50;
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2232      	movs	r2, #50	@ 0x32
 80024da:	fb02 f303 	mul.w	r3, r2, r3
 80024de:	627b      	str	r3, [r7, #36]	@ 0x24
        if (gyro_degree > -2){
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e6:	db01      	blt.n	80024ec <_Z9speed_setiiiPsf+0xa4>
            roll_speed = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
		if (roll_speed < -500){
 80024ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ee:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 80024f2:	da04      	bge.n	80024fe <_Z9speed_setiiiPsf+0xb6>
			roll_speed = -500;
 80024f4:	4b55      	ldr	r3, [pc, #340]	@ (800264c <_Z9speed_setiiiPsf+0x204>)
 80024f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f8:	e001      	b.n	80024fe <_Z9speed_setiiiPsf+0xb6>
        }

    }else{
        roll_speed = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	627b      	str	r3, [r7, #36]	@ 0x24
    }


	int conv_degree = -goal_degree + 45;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f1c3 032d 	rsb	r3, r3, #45	@ 0x2d
 8002504:	623b      	str	r3, [r7, #32]
	if(conv_degree < 0){conv_degree = conv_degree + 360;}
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	2b00      	cmp	r3, #0
 800250a:	da03      	bge.n	8002514 <_Z9speed_setiiiPsf+0xcc>
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002512:	623b      	str	r3, [r7, #32]

	for(int i=0; i<4; i++){
 8002514:	2300      	movs	r3, #0
 8002516:	61fb      	str	r3, [r7, #28]
 8002518:	e085      	b.n	8002626 <_Z9speed_setiiiPsf+0x1de>
		mtrspeed[i] = goal_speed * sin((conv_degree + 90.0*i) / 180.0 * 3.1415);
 800251a:	6938      	ldr	r0, [r7, #16]
 800251c:	f7fd ffc6 	bl	80004ac <__aeabi_i2d>
 8002520:	4604      	mov	r4, r0
 8002522:	460d      	mov	r5, r1
 8002524:	6a38      	ldr	r0, [r7, #32]
 8002526:	f7fd ffc1 	bl	80004ac <__aeabi_i2d>
 800252a:	4680      	mov	r8, r0
 800252c:	4689      	mov	r9, r1
 800252e:	69f8      	ldr	r0, [r7, #28]
 8002530:	f7fd ffbc 	bl	80004ac <__aeabi_i2d>
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	4b45      	ldr	r3, [pc, #276]	@ (8002650 <_Z9speed_setiiiPsf+0x208>)
 800253a:	f7fe f821 	bl	8000580 <__aeabi_dmul>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4640      	mov	r0, r8
 8002544:	4649      	mov	r1, r9
 8002546:	f7fd fe65 	bl	8000214 <__adddf3>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	4b3f      	ldr	r3, [pc, #252]	@ (8002654 <_Z9speed_setiiiPsf+0x20c>)
 8002558:	f7fe f93c 	bl	80007d4 <__aeabi_ddiv>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4610      	mov	r0, r2
 8002562:	4619      	mov	r1, r3
 8002564:	a336      	add	r3, pc, #216	@ (adr r3, 8002640 <_Z9speed_setiiiPsf+0x1f8>)
 8002566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256a:	f7fe f809 	bl	8000580 <__aeabi_dmul>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	ec43 2b17 	vmov	d7, r2, r3
 8002576:	eeb0 0a47 	vmov.f32	s0, s14
 800257a:	eef0 0a67 	vmov.f32	s1, s15
 800257e:	f006 fc67 	bl	8008e50 <sin>
 8002582:	ec53 2b10 	vmov	r2, r3, d0
 8002586:	4620      	mov	r0, r4
 8002588:	4629      	mov	r1, r5
 800258a:	f7fd fff9 	bl	8000580 <__aeabi_dmul>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4610      	mov	r0, r2
 8002594:	4619      	mov	r1, r3
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	18d4      	adds	r4, r2, r3
 800259e:	f7fe fa9f 	bl	8000ae0 <__aeabi_d2iz>
 80025a2:	4603      	mov	r3, r0
 80025a4:	b21b      	sxth	r3, r3
 80025a6:	8023      	strh	r3, [r4, #0]
		mtrspeed[i] = (mtrspeed[i] * motor_rate) + (roll_speed * (1.0 - motor_rate));
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	4413      	add	r3, r2
 80025b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025b4:	ee07 3a90 	vmov	s15, r3
 80025b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80025c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c4:	ee17 0a90 	vmov	r0, s15
 80025c8:	f7fd ff82 	bl	80004d0 <__aeabi_f2d>
 80025cc:	4604      	mov	r4, r0
 80025ce:	460d      	mov	r5, r1
 80025d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025d2:	f7fd ff6b 	bl	80004ac <__aeabi_i2d>
 80025d6:	4680      	mov	r8, r0
 80025d8:	4689      	mov	r9, r1
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7fd ff78 	bl	80004d0 <__aeabi_f2d>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	f04f 0000 	mov.w	r0, #0
 80025e8:	491b      	ldr	r1, [pc, #108]	@ (8002658 <_Z9speed_setiiiPsf+0x210>)
 80025ea:	f7fd fe11 	bl	8000210 <__aeabi_dsub>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4640      	mov	r0, r8
 80025f4:	4649      	mov	r1, r9
 80025f6:	f7fd ffc3 	bl	8000580 <__aeabi_dmul>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4620      	mov	r0, r4
 8002600:	4629      	mov	r1, r5
 8002602:	f7fd fe07 	bl	8000214 <__adddf3>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	18d4      	adds	r4, r2, r3
 8002616:	f7fe fa63 	bl	8000ae0 <__aeabi_d2iz>
 800261a:	4603      	mov	r3, r0
 800261c:	b21b      	sxth	r3, r3
 800261e:	8023      	strh	r3, [r4, #0]
	for(int i=0; i<4; i++){
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	3301      	adds	r3, #1
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	2b03      	cmp	r3, #3
 800262a:	f77f af76 	ble.w	800251a <_Z9speed_setiiiPsf+0xd2>
	}
}
 800262e:	bf00      	nop
 8002630:	bf00      	nop
 8002632:	3728      	adds	r7, #40	@ 0x28
 8002634:	46bd      	mov	sp, r7
 8002636:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800263a:	bf00      	nop
 800263c:	f3af 8000 	nop.w
 8002640:	c083126f 	.word	0xc083126f
 8002644:	400921ca 	.word	0x400921ca
 8002648:	b60b60b7 	.word	0xb60b60b7
 800264c:	fffffe0c 	.word	0xfffffe0c
 8002650:	40568000 	.word	0x40568000
 8002654:	40668000 	.word	0x40668000
 8002658:	3ff00000 	.word	0x3ff00000

0800265c <_Z9set_arrayPsPh>:

void set_array(int16_t* mtrspeed, uint8_t* sendarray){
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
	uint16_t conv_mtrspeed[4];
	for(int i=0; i<4; i++){conv_mtrspeed[i] = 10000 - (mtrspeed[i] + 5000);}
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	e013      	b.n	8002694 <_Z9set_arrayPsPh+0x38>
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	4413      	add	r3, r2
 8002674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002678:	b29b      	uxth	r3, r3
 800267a:	f5c3 539c 	rsb	r3, r3, #4992	@ 0x1380
 800267e:	3308      	adds	r3, #8
 8002680:	b29a      	uxth	r2, r3
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	3318      	adds	r3, #24
 8002688:	443b      	add	r3, r7
 800268a:	f823 2c10 	strh.w	r2, [r3, #-16]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	3301      	adds	r3, #1
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2b03      	cmp	r3, #3
 8002698:	dde8      	ble.n	800266c <_Z9set_arrayPsPh+0x10>
	for(int i=0; i<4; i++){
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	e03a      	b.n	8002716 <_Z9set_arrayPsPh+0xba>
		sendarray[3*i] = 250+i;
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	b2d9      	uxtb	r1, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4613      	mov	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	4413      	add	r3, r2
 80026ac:	461a      	mov	r2, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	4413      	add	r3, r2
 80026b2:	1f8a      	subs	r2, r1, #6
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	701a      	strb	r2, [r3, #0]
		sendarray[3*i+1] = conv_mtrspeed[i] % 100;
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	3318      	adds	r3, #24
 80026be:	443b      	add	r3, r7
 80026c0:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80026c4:	4a19      	ldr	r2, [pc, #100]	@ (800272c <_Z9set_arrayPsPh+0xd0>)
 80026c6:	fba2 1203 	umull	r1, r2, r2, r3
 80026ca:	0952      	lsrs	r2, r2, #5
 80026cc:	2164      	movs	r1, #100	@ 0x64
 80026ce:	fb01 f202 	mul.w	r2, r1, r2
 80026d2:	1a9b      	subs	r3, r3, r2
 80026d4:	b299      	uxth	r1, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4613      	mov	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4413      	add	r3, r2
 80026de:	3301      	adds	r3, #1
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	b2ca      	uxtb	r2, r1
 80026e6:	701a      	strb	r2, [r3, #0]
		sendarray[3*i+2] = conv_mtrspeed[i] / 100;
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	3318      	adds	r3, #24
 80026ee:	443b      	add	r3, r7
 80026f0:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80026f4:	4a0d      	ldr	r2, [pc, #52]	@ (800272c <_Z9set_arrayPsPh+0xd0>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	b299      	uxth	r1, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4613      	mov	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4413      	add	r3, r2
 8002706:	3302      	adds	r3, #2
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	4413      	add	r3, r2
 800270c:	b2ca      	uxtb	r2, r1
 800270e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<4; i++){
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	3301      	adds	r3, #1
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	2b03      	cmp	r3, #3
 800271a:	ddc1      	ble.n	80026a0 <_Z9set_arrayPsPh+0x44>
	}
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	371c      	adds	r7, #28
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	51eb851f 	.word	0x51eb851f

08002730 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h>:

void readBuf(UART_HandleTypeDef* uart, uint8_t* buf, int buf_size, uint8_t* data, int data_size, uint8_t id, uint8_t* p_wrtpt, uint8_t* p_rdpt, uint16_t* stop_counter, uint16_t* error_counter, uint8_t go_back){
 8002730:	b480      	push	{r7}
 8002732:	b08d      	sub	sp, #52	@ 0x34
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	603b      	str	r3, [r7, #0]
	int wrt_pt = uart->hdmarx->Instance->NDTR;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	61bb      	str	r3, [r7, #24]
	wrt_pt= buf_size - wrt_pt;
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	61bb      	str	r3, [r7, #24]
	int rd_pt;

	if(wrt_pt != *p_rdpt){//wrtに追?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?付かれてな?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
 8002750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	461a      	mov	r2, r3
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	4293      	cmp	r3, r2
 800275a:	d031      	beq.n	80027c0 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x90>
		if(buf[*p_rdpt] == 255){//p_rdptが書き換えられてな?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?=追?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?越されてな?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
 800275c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	4413      	add	r3, r2
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2bff      	cmp	r3, #255	@ 0xff
 800276a:	d116      	bne.n	800279a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x6a>
			if(wrt_pt != *p_wrtpt){//wrt_ptが�??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��んだ=受信した
 800276c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	4293      	cmp	r3, r2
 8002776:	d006      	beq.n	8002786 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x56>
//正常
				*stop_counter = 0;
 8002778:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800277a:	2200      	movs	r2, #0
 800277c:	801a      	strh	r2, [r3, #0]
				rd_pt = *p_rdpt;
 800277e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002784:	e049      	b.n	800281a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
			}else{//wrt_ptが�??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��んでな?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?=受信してな?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
//受信してな?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
				(*stop_counter)++;
 8002786:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	3301      	adds	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002790:	801a      	strh	r2, [r3, #0]
				rd_pt = *p_rdpt;
 8002792:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002798:	e03f      	b.n	800281a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
			}
		}else{//p_rdptが書き換えられた=追?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?越された
//追?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?越された
			(*error_counter)++;
 800279a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	3301      	adds	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027a4:	801a      	strh	r2, [r3, #0]
			rd_pt = wrt_pt - go_back;
 80027a6:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if(rd_pt < 0){rd_pt += buf_size;}
 80027b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	da31      	bge.n	800281a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
 80027b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4413      	add	r3, r2
 80027bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027be:	e02c      	b.n	800281a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
		}
	}else{//wrtに追?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?付かれた,追?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?付い?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
		int front_pt = wrt_pt + 1;
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	3301      	adds	r3, #1
 80027c4:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(front_pt>buf_size-1){front_pt -= buf_size;}
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ca:	429a      	cmp	r2, r3
 80027cc:	dc03      	bgt.n	80027d6 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xa6>
 80027ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	62bb      	str	r3, [r7, #40]	@ 0x28

		if(buf[front_pt] == 255){
 80027d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	4413      	add	r3, r2
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2bff      	cmp	r3, #255	@ 0xff
 80027e0:	d109      	bne.n	80027f6 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xc6>
//追?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?付い?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
			(*stop_counter)++;
 80027e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	3301      	adds	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027ec:	801a      	strh	r2, [r3, #0]
			rd_pt = *p_rdpt;
 80027ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027f4:	e011      	b.n	800281a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
		}else{
//追?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?付かれた
			(*error_counter)++;
 80027f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	3301      	adds	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002800:	801a      	strh	r2, [r3, #0]
			rd_pt = wrt_pt - go_back;
 8002802:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if(rd_pt < 0){rd_pt += buf_size;}
 800280c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800280e:	2b00      	cmp	r3, #0
 8002810:	da03      	bge.n	800281a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
 8002812:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4413      	add	r3, r2
 8002818:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
	}

	if(*stop_counter > 65500){*stop_counter = 65500;}
 800281a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8002822:	4293      	cmp	r3, r2
 8002824:	d903      	bls.n	800282e <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xfe>
 8002826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002828:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 800282c:	801a      	strh	r2, [r3, #0]
	if(*error_counter > 65500){*error_counter = 65500;}
 800282e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8002836:	4293      	cmp	r3, r2
 8002838:	d903      	bls.n	8002842 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x112>
 800283a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800283c:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8002840:	801a      	strh	r2, [r3, #0]


	while(1){
		int dif_pt = wrt_pt - rd_pt;
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	627b      	str	r3, [r7, #36]	@ 0x24
			if(dif_pt < 0){dif_pt += buf_size;}
 800284a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284c:	2b00      	cmp	r3, #0
 800284e:	da03      	bge.n	8002858 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x128>
 8002850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4413      	add	r3, r2
 8002856:	627b      	str	r3, [r7, #36]	@ 0x24
		if(dif_pt <= go_back/2){break;}
 8002858:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800285c:	085b      	lsrs	r3, r3, #1
 800285e:	b2db      	uxtb	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002864:	4293      	cmp	r3, r2
 8002866:	dd65      	ble.n	8002934 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x204>

		rd_pt++;
 8002868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800286a:	3301      	adds	r3, #1
 800286c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(rd_pt>buf_size-1){rd_pt -= buf_size;}
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002872:	429a      	cmp	r2, r3
 8002874:	dc03      	bgt.n	800287e <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x14e>
 8002876:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if(buf[rd_pt] == 250+id){
 800287e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	4413      	add	r3, r2
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800288c:	33fa      	adds	r3, #250	@ 0xfa
 800288e:	429a      	cmp	r2, r3
 8002890:	d14a      	bne.n	8002928 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1f8>
			int goal_rdpt = rd_pt + data_size;//data_sizeに0はとれな?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?,25以上も?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
 8002892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002896:	4413      	add	r3, r2
 8002898:	617b      	str	r3, [r7, #20]

				if(goal_rdpt>buf_size-1){goal_rdpt -= buf_size;}
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	429a      	cmp	r2, r3
 80028a0:	dc03      	bgt.n	80028aa <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x17a>
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	617b      	str	r3, [r7, #20]
			int temp_rdpt = rd_pt;
 80028aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ac:	623b      	str	r3, [r7, #32]

			buf[rd_pt] = 255;
 80028ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	4413      	add	r3, r2
 80028b4:	22ff      	movs	r2, #255	@ 0xff
 80028b6:	701a      	strb	r2, [r3, #0]

			for(int i=0; i<data_size; i++){
 80028b8:	2300      	movs	r3, #0
 80028ba:	61fb      	str	r3, [r7, #28]
 80028bc:	e01a      	b.n	80028f4 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1c4>
				temp_rdpt += 1;
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	3301      	adds	r3, #1
 80028c2:	623b      	str	r3, [r7, #32]
					if(temp_rdpt>buf_size-1){temp_rdpt -= buf_size;}
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	dc03      	bgt.n	80028d4 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1a4>
 80028cc:	6a3a      	ldr	r2, [r7, #32]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	623b      	str	r3, [r7, #32]

				data[i] = buf[temp_rdpt];
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	441a      	add	r2, r3
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	6839      	ldr	r1, [r7, #0]
 80028de:	440b      	add	r3, r1
 80028e0:	7812      	ldrb	r2, [r2, #0]
 80028e2:	701a      	strb	r2, [r3, #0]
				buf[temp_rdpt] = 255;
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	4413      	add	r3, r2
 80028ea:	22ff      	movs	r2, #255	@ 0xff
 80028ec:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<data_size; i++){
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3301      	adds	r3, #1
 80028f2:	61fb      	str	r3, [r7, #28]
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028f8:	429a      	cmp	r2, r3
 80028fa:	dbe0      	blt.n	80028be <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x18e>
			}

			rd_pt = temp_rdpt;
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

			dif_pt = wrt_pt - rd_pt;
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	627b      	str	r3, [r7, #36]	@ 0x24
				if(dif_pt < 0){dif_pt += buf_size;}
 8002908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290a:	2b00      	cmp	r3, #0
 800290c:	da03      	bge.n	8002916 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1e6>
 800290e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4413      	add	r3, r2
 8002914:	627b      	str	r3, [r7, #36]	@ 0x24
			if(dif_pt >= buf_size/2){}
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	0fda      	lsrs	r2, r3, #31
 800291a:	4413      	add	r3, r2
 800291c:	105b      	asrs	r3, r3, #1
 800291e:	461a      	mov	r2, r3
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	4293      	cmp	r3, r2
 8002924:	da8d      	bge.n	8002842 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x112>
			else{break;}
 8002926:	e006      	b.n	8002936 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x206>
		}else{buf[rd_pt] = 255;}
 8002928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	4413      	add	r3, r2
 800292e:	22ff      	movs	r2, #255	@ 0xff
 8002930:	701a      	strb	r2, [r3, #0]
	}
 8002932:	e786      	b.n	8002842 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x112>
		if(dif_pt <= go_back/2){break;}
 8002934:	bf00      	nop

	*p_rdpt = rd_pt;
 8002936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002938:	b2da      	uxtb	r2, r3
 800293a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800293c:	701a      	strb	r2, [r3, #0]
//	*p_wrtpt = buf_size - (uart->hdmarx->Instance->CNDTR);
	*p_wrtpt = wrt_pt;
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002944:	701a      	strb	r2, [r3, #0]
}
 8002946:	bf00      	nop
 8002948:	3734      	adds	r7, #52	@ 0x34
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002952:	b480      	push	{r7}
 8002954:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002956:	b672      	cpsid	i
}
 8002958:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800295a:	bf00      	nop
 800295c:	e7fd      	b.n	800295a <Error_Handler+0x8>

0800295e <_ZSt3powIsiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 800295e:	b5b0      	push	{r4, r5, r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	4603      	mov	r3, r0
 8002966:	6039      	str	r1, [r7, #0]
 8002968:	80fb      	strh	r3, [r7, #6]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 800296a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fd fd9c 	bl	80004ac <__aeabi_i2d>
 8002974:	4604      	mov	r4, r0
 8002976:	460d      	mov	r5, r1
 8002978:	6838      	ldr	r0, [r7, #0]
 800297a:	f7fd fd97 	bl	80004ac <__aeabi_i2d>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	ec43 2b11 	vmov	d1, r2, r3
 8002986:	ec45 4b10 	vmov	d0, r4, r5
 800298a:	f006 f9f1 	bl	8008d70 <pow>
 800298e:	eeb0 7a40 	vmov.f32	s14, s0
 8002992:	eef0 7a60 	vmov.f32	s15, s1
    }
 8002996:	eeb0 0a47 	vmov.f32	s0, s14
 800299a:	eef0 0a67 	vmov.f32	s1, s15
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bdb0      	pop	{r4, r5, r7, pc}

080029a4 <_ZSt5atan2IssEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    atan2(_Tp __y, _Up __x)
 80029a4:	b5b0      	push	{r4, r5, r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	460a      	mov	r2, r1
 80029ae:	80fb      	strh	r3, [r7, #6]
 80029b0:	4613      	mov	r3, r2
 80029b2:	80bb      	strh	r3, [r7, #4]
      return atan2(__type(__y), __type(__x));
 80029b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fd77 	bl	80004ac <__aeabi_i2d>
 80029be:	4604      	mov	r4, r0
 80029c0:	460d      	mov	r5, r1
 80029c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fd fd70 	bl	80004ac <__aeabi_i2d>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	ec43 2b11 	vmov	d1, r2, r3
 80029d4:	ec45 4b10 	vmov	d0, r4, r5
 80029d8:	f006 f9c8 	bl	8008d6c <atan2>
 80029dc:	eeb0 7a40 	vmov.f32	s14, s0
 80029e0:	eef0 7a60 	vmov.f32	s15, s1
    }
 80029e4:	eeb0 0a47 	vmov.f32	s0, s14
 80029e8:	eef0 0a67 	vmov.f32	s1, s15
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bdb0      	pop	{r4, r5, r7, pc}

080029f2 <_ZN11PERFORMANCEC1EPtPhPsS1_S2_S2_>:

#include "performance.h"

PERFORMANCE::PERFORMANCE(uint16_t* ptr_perform_array, uint8_t* ptr_camera_array, int16_t* ptr_movement_array, uint8_t* ptr_display_array, int16_t* ptr_circle_position_array, int16_t* ptr_position_array){
 80029f2:	b480      	push	{r7}
 80029f4:	b085      	sub	sp, #20
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	3330      	adds	r3, #48	@ 0x30
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	741a      	strb	r2, [r3, #16]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	220a      	movs	r2, #10
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	22fb      	movs	r2, #251	@ 0xfb
 8002a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2232      	movs	r2, #50	@ 0x32
 8002a3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2205      	movs	r2, #5
 8002a44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2296      	movs	r2, #150	@ 0x96
 8002a4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	perform_array = ptr_perform_array;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	601a      	str	r2, [r3, #0]
	camera_array = ptr_camera_array;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	605a      	str	r2, [r3, #4]
	movement_array = ptr_movement_array;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	609a      	str	r2, [r3, #8]
	display_array = ptr_display_array;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	60da      	str	r2, [r3, #12]
	circle_position_array = ptr_circle_position_array;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	615a      	str	r2, [r3, #20]
	position_array = ptr_position_array;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a3a      	ldr	r2, [r7, #32]
 8002a72:	619a      	str	r2, [r3, #24]
}
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <_ZN11PERFORMANCE12get_shutdownEv>:


int PERFORMANCE::get_shutdown(){
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
	return shdn_flag;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <_ZN11PERFORMANCE10get_fixingEv>:

int PERFORMANCE::get_fixing(){
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
	return fix_flag;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <_ZN11PERFORMANCE17get_target_statusEm>:

void PERFORMANCE::get_target_status(uint32_t time){
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]

	if(perform_array[0] == 0){
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f040 80e0 	bne.w	8002c8c <_ZN11PERFORMANCE17get_target_statusEm+0x1d6>
		shdn_flag = 1;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
//		display_array[9] = V_standard;//background_V
//		display_array[10] = perform_array[3];//frame_H
//		display_array[11] = S_standard;//frame_S
//		display_array[12] = V_standard;//frame_V

		fix_flag = 1;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		circle_position_array[0] = 0;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	801a      	strh	r2, [r3, #0]
		circle_position_array[1] = 24 * 10;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	3302      	adds	r3, #2
 8002aea:	22f0      	movs	r2, #240	@ 0xf0
 8002aec:	801a      	strh	r2, [r3, #0]
		circle_position_array[2] = r_standard * 10;//r
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af4:	461a      	mov	r2, r3
 8002af6:	0092      	lsls	r2, r2, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	3304      	adds	r3, #4
 8002b04:	b212      	sxth	r2, r2
 8002b06:	801a      	strh	r2, [r3, #0]

		movement_array[0] = 2000;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002b10:	801a      	strh	r2, [r3, #0]
		movement_array[1] = 0;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	3302      	adds	r3, #2
 8002b18:	2200      	movs	r2, #0
 8002b1a:	801a      	strh	r2, [r3, #0]
		movement_array[2] = 200;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	3304      	adds	r3, #4
 8002b22:	22c8      	movs	r2, #200	@ 0xc8
 8002b24:	801a      	strh	r2, [r3, #0]

		display_array[1] = 24;//x
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	2218      	movs	r2, #24
 8002b2e:	701a      	strb	r2, [r3, #0]
		display_array[2] = 24;//y
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	3302      	adds	r3, #2
 8002b36:	2218      	movs	r2, #24
 8002b38:	701a      	strb	r2, [r3, #0]
		display_array[3] = r_standard;//r
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	3303      	adds	r3, #3
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 8002b46:	701a      	strb	r2, [r3, #0]
		display_array[4] = perform_array[3];//circle_H
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	3306      	adds	r3, #6
 8002b4e:	881a      	ldrh	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	3304      	adds	r3, #4
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	701a      	strb	r2, [r3, #0]
		display_array[5] = S_standard;//circle_S
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	3305      	adds	r3, #5
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8002b66:	701a      	strb	r2, [r3, #0]
		display_array[6] = V_standard;//circle_V
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	3306      	adds	r3, #6
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8002b74:	701a      	strb	r2, [r3, #0]
		display_array[7] = perform_array[3];//background_H
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	3306      	adds	r3, #6
 8002b7c:	881a      	ldrh	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	3307      	adds	r3, #7
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	701a      	strb	r2, [r3, #0]
		display_array[8] = S_standard;//background_S
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	3308      	adds	r3, #8
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8002b94:	701a      	strb	r2, [r3, #0]
		display_array[9] = V_standard;//background_V
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	3309      	adds	r3, #9
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8002ba2:	701a      	strb	r2, [r3, #0]
		display_array[10] = perform_array[3];//frame_H
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	3306      	adds	r3, #6
 8002baa:	881a      	ldrh	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	330a      	adds	r3, #10
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	701a      	strb	r2, [r3, #0]
		display_array[11] = S_standard;//frame_S
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	330b      	adds	r3, #11
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8002bc2:	701a      	strb	r2, [r3, #0]
		display_array[12] = V_standard;//frame_V
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	330c      	adds	r3, #12
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8002bd0:	701a      	strb	r2, [r3, #0]


		if(camera_array[1] == 1){display_array[4] = camera_array[0];}
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d107      	bne.n	8002bee <_ZN11PERFORMANCE17get_target_statusEm+0x138>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	3304      	adds	r3, #4
 8002be8:	7812      	ldrb	r2, [r2, #0]
 8002bea:	701a      	strb	r2, [r3, #0]
 8002bec:	e008      	b.n	8002c00 <_ZN11PERFORMANCE17get_target_statusEm+0x14a>
		else{display_array[4] = perform_array[3];}
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	3306      	adds	r3, #6
 8002bf4:	881a      	ldrh	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	701a      	strb	r2, [r3, #0]



		mode_flag[0] = 0;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		mode_flag[1] = 0;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		mode_flag[2] = 0;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
		mode_flag[3] = 0;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
		mode_flag[4] = 0;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		mode_flag[5] = 0;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
		mode_flag[6] = 0;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
		mode_flag[7] = 0;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		mode_flag[8] = 0;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		mode_flag[9] = 0;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
		mode_flag[10] = 0;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
		mode_flag[11] = 0;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
		mode_flag[12] = 0;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		mode_flag[13] = 0;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		mode_flag[14] = 0;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		mode_flag[15] = 0;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
		mode_flag[16] = 0;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		display_array[10] = 0;//frame_H
		display_array[11] = 0;//frame_S
		display_array[12] = 0;//frame_V

	}
}
 8002c88:	f001 ba22 	b.w	80040d0 <_ZN11PERFORMANCE17get_target_statusEm+0x161a>
	}else if(perform_array[0] == 1){//はじまり　1~15
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	f040 811f 	bne.w	8002ed6 <_ZN11PERFORMANCE17get_target_statusEm+0x420>
		shdn_flag = 1;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		if(mode_flag[1] == 0){
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d17e      	bne.n	8002da8 <_ZN11PERFORMANCE17get_target_statusEm+0x2f2>
			fix_flag = 0;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
			katamuki = 1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			p_beat = first_beat = perform_array[2];
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	889a      	ldrh	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	851a      	strh	r2, [r3, #40]	@ 0x28
			p_count = first_count = perform_array[1];
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	885a      	ldrh	r2, [r3, #2]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	84da      	strh	r2, [r3, #38]	@ 0x26
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	849a      	strh	r2, [r3, #36]	@ 0x24
			movement_array[0] = 2000;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002ce6:	801a      	strh	r2, [r3, #0]
			movement_array[1] = 0;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	3302      	adds	r3, #2
 8002cee:	2200      	movs	r2, #0
 8002cf0:	801a      	strh	r2, [r3, #0]
			movement_array[2] = 200;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	22c8      	movs	r2, #200	@ 0xc8
 8002cfa:	801a      	strh	r2, [r3, #0]
			display_array[1] = 24;//x
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	3301      	adds	r3, #1
 8002d02:	2218      	movs	r2, #24
 8002d04:	701a      	strb	r2, [r3, #0]
			display_array[2] = 24;//y
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	2218      	movs	r2, #24
 8002d0e:	701a      	strb	r2, [r3, #0]
			display_array[3] = r_standard;//r
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	3303      	adds	r3, #3
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 8002d1c:	701a      	strb	r2, [r3, #0]
			display_array[4] = perform_array[3];//circle_H
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3306      	adds	r3, #6
 8002d24:	881a      	ldrh	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	701a      	strb	r2, [r3, #0]
			display_array[5] = S_standard;//circle_S
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	3305      	adds	r3, #5
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8002d3c:	701a      	strb	r2, [r3, #0]
			display_array[6] = V_standard;//circle_V
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	3306      	adds	r3, #6
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8002d4a:	701a      	strb	r2, [r3, #0]
			display_array[7] = perform_array[3];//background_H
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3306      	adds	r3, #6
 8002d52:	881a      	ldrh	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	3307      	adds	r3, #7
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]
			display_array[8] = S_standard;//background_S
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	3308      	adds	r3, #8
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8002d6a:	701a      	strb	r2, [r3, #0]
			display_array[9] = V_standard;//background_V
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	3309      	adds	r3, #9
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8002d78:	701a      	strb	r2, [r3, #0]
			display_array[10] = perform_array[3];//frame_H
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3306      	adds	r3, #6
 8002d80:	881a      	ldrh	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	330a      	adds	r3, #10
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	701a      	strb	r2, [r3, #0]
			display_array[11] = S_standard;//frame_S
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	330b      	adds	r3, #11
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8002d98:	701a      	strb	r2, [r3, #0]
			display_array[12] = V_standard;//frame_V
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	330c      	adds	r3, #12
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8002da6:	701a      	strb	r2, [r3, #0]
		if(camera_array[1] == 1){display_array[4] = camera_array[0];}
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	3301      	adds	r3, #1
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d107      	bne.n	8002dc4 <_ZN11PERFORMANCE17get_target_statusEm+0x30e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	7812      	ldrb	r2, [r2, #0]
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	e008      	b.n	8002dd6 <_ZN11PERFORMANCE17get_target_statusEm+0x320>
		else{display_array[4] = perform_array[3];}
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3306      	adds	r3, #6
 8002dca:	881a      	ldrh	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	701a      	strb	r2, [r3, #0]
		if((perform_array[2] >= 8 && perform_array[1] - p_count) >= 1){
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	3304      	adds	r3, #4
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	2b07      	cmp	r3, #7
 8002de0:	d909      	bls.n	8002df6 <_ZN11PERFORMANCE17get_target_statusEm+0x340>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	3302      	adds	r3, #2
 8002de8:	881a      	ldrh	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d001      	beq.n	8002df6 <_ZN11PERFORMANCE17get_target_statusEm+0x340>
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <_ZN11PERFORMANCE17get_target_statusEm+0x342>
 8002df6:	2300      	movs	r3, #0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	dd66      	ble.n	8002eca <_ZN11PERFORMANCE17get_target_statusEm+0x414>
			if(display_array[3] > 4 && display_array[3] < 20 && katamuki == -1){
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	3303      	adds	r3, #3
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d916      	bls.n	8002e36 <_ZN11PERFORMANCE17get_target_statusEm+0x380>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	3303      	adds	r3, #3
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b13      	cmp	r3, #19
 8002e12:	d810      	bhi.n	8002e36 <_ZN11PERFORMANCE17get_target_statusEm+0x380>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 8002e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1e:	d10a      	bne.n	8002e36 <_ZN11PERFORMANCE17get_target_statusEm+0x380>
				display_array[3] -= 2;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	3303      	adds	r3, #3
 8002e26:	781a      	ldrb	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	3303      	adds	r3, #3
 8002e2e:	3a02      	subs	r2, #2
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	701a      	strb	r2, [r3, #0]
 8002e34:	e044      	b.n	8002ec0 <_ZN11PERFORMANCE17get_target_statusEm+0x40a>
			}else if(display_array[3] > 4 && display_array[3] < 20 && katamuki == 1){
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	3303      	adds	r3, #3
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d915      	bls.n	8002e6e <_ZN11PERFORMANCE17get_target_statusEm+0x3b8>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	3303      	adds	r3, #3
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b13      	cmp	r3, #19
 8002e4c:	d80f      	bhi.n	8002e6e <_ZN11PERFORMANCE17get_target_statusEm+0x3b8>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d10a      	bne.n	8002e6e <_ZN11PERFORMANCE17get_target_statusEm+0x3b8>
				display_array[3] += 2;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	3303      	adds	r3, #3
 8002e5e:	781a      	ldrb	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	3303      	adds	r3, #3
 8002e66:	3202      	adds	r2, #2
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	701a      	strb	r2, [r3, #0]
 8002e6c:	e028      	b.n	8002ec0 <_ZN11PERFORMANCE17get_target_statusEm+0x40a>
			}else if(display_array[3] <= 4){
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	3303      	adds	r3, #3
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d80e      	bhi.n	8002e98 <_ZN11PERFORMANCE17get_target_statusEm+0x3e2>
				katamuki = 1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
				display_array[3] += 2;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	3303      	adds	r3, #3
 8002e88:	781a      	ldrb	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	3303      	adds	r3, #3
 8002e90:	3202      	adds	r2, #2
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]
 8002e96:	e013      	b.n	8002ec0 <_ZN11PERFORMANCE17get_target_statusEm+0x40a>
			}else if(display_array[3] >= 20){
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	3303      	adds	r3, #3
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b13      	cmp	r3, #19
 8002ea2:	d90d      	bls.n	8002ec0 <_ZN11PERFORMANCE17get_target_statusEm+0x40a>
				katamuki = -1;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	22ff      	movs	r2, #255	@ 0xff
 8002ea8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
				display_array[3] -= 2;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	3303      	adds	r3, #3
 8002eb2:	781a      	ldrb	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	3303      	adds	r3, #3
 8002eba:	3a02      	subs	r2, #2
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	701a      	strb	r2, [r3, #0]
			p_count = perform_array[1];
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	885a      	ldrh	r2, [r3, #2]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	849a      	strh	r2, [r3, #36]	@ 0x24
		mode_flag[1] = 1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
}
 8002ed2:	f001 b8fd 	b.w	80040d0 <_ZN11PERFORMANCE17get_target_statusEm+0x161a>
	}else if(perform_array[0] == 2){//アームに渡しににいく 16~47
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	f040 81ba 	bne.w	8003256 <_ZN11PERFORMANCE17get_target_statusEm+0x7a0>
		shdn_flag = 1;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		if(mode_flag[2] == 0){
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d17d      	bne.n	8002ff0 <_ZN11PERFORMANCE17get_target_statusEm+0x53a>
			p_beat = first_beat = perform_array[2];
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	889a      	ldrh	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	851a      	strh	r2, [r3, #40]	@ 0x28
			p_count = first_count = perform_array[1];
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	885a      	ldrh	r2, [r3, #2]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	84da      	strh	r2, [r3, #38]	@ 0x26
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	849a      	strh	r2, [r3, #36]	@ 0x24
			flame_H_goal = perform_array[3] + 128;//枠表示
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3306      	adds	r3, #6
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	3b80      	subs	r3, #128	@ 0x80
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
				flame_H_goal %= 256;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			first_position_array[0] = position_array[0];
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	821a      	strh	r2, [r3, #16]
			first_position_array[1] = position_array[1];
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	825a      	strh	r2, [r3, #18]
			movement_array[0] = 2000;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002f58:	801a      	strh	r2, [r3, #0]
			movement_array[1] = 0;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	3302      	adds	r3, #2
 8002f60:	2200      	movs	r2, #0
 8002f62:	801a      	strh	r2, [r3, #0]
			movement_array[2] = 200;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	22c8      	movs	r2, #200	@ 0xc8
 8002f6c:	801a      	strh	r2, [r3, #0]
			display_array[4] = 0;//circle_H
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	3304      	adds	r3, #4
 8002f74:	2200      	movs	r2, #0
 8002f76:	701a      	strb	r2, [r3, #0]
			display_array[5] = S_standard;//circle_S
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	3305      	adds	r3, #5
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8002f84:	701a      	strb	r2, [r3, #0]
			display_array[6] = V_standard;//circle_V
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	3306      	adds	r3, #6
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8002f92:	701a      	strb	r2, [r3, #0]
			display_array[7] = perform_array[3];//background_H
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3306      	adds	r3, #6
 8002f9a:	881a      	ldrh	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	3307      	adds	r3, #7
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	701a      	strb	r2, [r3, #0]
			display_array[8] = S_standard;//background_S
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	3308      	adds	r3, #8
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8002fb2:	701a      	strb	r2, [r3, #0]
			display_array[9] = V_standard;//background_V
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	3309      	adds	r3, #9
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8002fc0:	701a      	strb	r2, [r3, #0]
			display_array[10] = perform_array[3];//frame_H
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3306      	adds	r3, #6
 8002fc8:	881a      	ldrh	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	330a      	adds	r3, #10
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	701a      	strb	r2, [r3, #0]
			display_array[11] = S_standard;//frame_S
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	330b      	adds	r3, #11
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8002fe0:	701a      	strb	r2, [r3, #0]
			display_array[12] = V_standard;//frame_V
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	330c      	adds	r3, #12
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8002fee:	701a      	strb	r2, [r3, #0]
		if(perform_array[2] >= 16 && perform_array[2] < 20 && (perform_array[1] - p_count) >= 2){
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	2b0f      	cmp	r3, #15
 8002ffa:	d936      	bls.n	800306a <_ZN11PERFORMANCE17get_target_statusEm+0x5b4>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	3304      	adds	r3, #4
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	2b13      	cmp	r3, #19
 8003006:	d830      	bhi.n	800306a <_ZN11PERFORMANCE17get_target_statusEm+0x5b4>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	3302      	adds	r3, #2
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b01      	cmp	r3, #1
 800301a:	dd26      	ble.n	800306a <_ZN11PERFORMANCE17get_target_statusEm+0x5b4>
			if(display_array[3] < r_standard){//半径調整
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	3303      	adds	r3, #3
 8003022:	781a      	ldrb	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800302a:	429a      	cmp	r2, r3
 800302c:	d207      	bcs.n	800303e <_ZN11PERFORMANCE17get_target_statusEm+0x588>
				display_array[3]++;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	3303      	adds	r3, #3
 8003034:	781a      	ldrb	r2, [r3, #0]
 8003036:	3201      	adds	r2, #1
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	701a      	strb	r2, [r3, #0]
 800303c:	e00f      	b.n	800305e <_ZN11PERFORMANCE17get_target_statusEm+0x5a8>
			}else if(display_array[3] > r_standard){
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	3303      	adds	r3, #3
 8003044:	781a      	ldrb	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800304c:	429a      	cmp	r2, r3
 800304e:	d906      	bls.n	800305e <_ZN11PERFORMANCE17get_target_statusEm+0x5a8>
				display_array[3]--;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	3303      	adds	r3, #3
 8003056:	781a      	ldrb	r2, [r3, #0]
 8003058:	3a01      	subs	r2, #1
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]
			p_count = perform_array[1];
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	885a      	ldrh	r2, [r3, #2]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	849a      	strh	r2, [r3, #36]	@ 0x24
 8003068:	e0ef      	b.n	800324a <_ZN11PERFORMANCE17get_target_statusEm+0x794>
		}else if(perform_array[2] >= 20 && perform_array[2] < 24 && (perform_array[1] - p_count) >= 1){
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	3304      	adds	r3, #4
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	2b13      	cmp	r3, #19
 8003074:	d934      	bls.n	80030e0 <_ZN11PERFORMANCE17get_target_statusEm+0x62a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3304      	adds	r3, #4
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	2b17      	cmp	r3, #23
 8003080:	d82e      	bhi.n	80030e0 <_ZN11PERFORMANCE17get_target_statusEm+0x62a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	3302      	adds	r3, #2
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	dd24      	ble.n	80030e0 <_ZN11PERFORMANCE17get_target_statusEm+0x62a>
			if(display_array[10] != flame_H_goal){
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	330a      	adds	r3, #10
 800309c:	781a      	ldrb	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d00e      	beq.n	80030c6 <_ZN11PERFORMANCE17get_target_statusEm+0x610>
				display_array[10]++;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	330a      	adds	r3, #10
 80030ae:	781a      	ldrb	r2, [r3, #0]
 80030b0:	3201      	adds	r2, #1
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]
				display_array[10] %= 256;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	330a      	adds	r3, #10
 80030c0:	7a92      	ldrb	r2, [r2, #10]
 80030c2:	701a      	strb	r2, [r3, #0]
 80030c4:	e006      	b.n	80030d4 <_ZN11PERFORMANCE17get_target_statusEm+0x61e>
				display_array[10] = flame_H_goal;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	330a      	adds	r3, #10
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	f892 202d 	ldrb.w	r2, [r2, #45]	@ 0x2d
 80030d2:	701a      	strb	r2, [r3, #0]
			p_count = perform_array[1];
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	885a      	ldrh	r2, [r3, #2]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	849a      	strh	r2, [r3, #36]	@ 0x24
 80030de:	e0b4      	b.n	800324a <_ZN11PERFORMANCE17get_target_statusEm+0x794>
		}else if(perform_array[2] >= 24){
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3304      	adds	r3, #4
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	2b17      	cmp	r3, #23
 80030ea:	d95f      	bls.n	80031ac <_ZN11PERFORMANCE17get_target_statusEm+0x6f6>
			movement_array[0] = 500;//移動はじめ
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80030f4:	801a      	strh	r2, [r3, #0]
			movement_array[1] = 700;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	3302      	adds	r3, #2
 80030fc:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8003100:	801a      	strh	r2, [r3, #0]
			movement_array[2] = 200;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	3304      	adds	r3, #4
 8003108:	22c8      	movs	r2, #200	@ 0xc8
 800310a:	801a      	strh	r2, [r3, #0]
			circle_position_array[0] = first_position_array[0];
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8003116:	801a      	strh	r2, [r3, #0]
			circle_position_array[1] = 24 * 10;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	3302      	adds	r3, #2
 800311e:	22f0      	movs	r2, #240	@ 0xf0
 8003120:	801a      	strh	r2, [r3, #0]
			circle_position_array[2] = r_standard * 10;//r
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003128:	461a      	mov	r2, r3
 800312a:	0092      	lsls	r2, r2, #2
 800312c:	4413      	add	r3, r2
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	3304      	adds	r3, #4
 8003138:	b212      	sxth	r2, r2
 800313a:	801a      	strh	r2, [r3, #0]
			if(circle_position_array[0] - position_array[0] < 120){
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003144:	461a      	mov	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b77      	cmp	r3, #119	@ 0x77
 8003152:	dc04      	bgt.n	800315e <_ZN11PERFORMANCE17get_target_statusEm+0x6a8>
				fix_flag = 1;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 800315c:	e020      	b.n	80031a0 <_ZN11PERFORMANCE17get_target_statusEm+0x6ea>
			}else if(circle_position_array[0] - position_array[0] >= 120){//枠にひっぱられる
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003166:	461a      	mov	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b77      	cmp	r3, #119	@ 0x77
 8003174:	dd14      	ble.n	80031a0 <_ZN11PERFORMANCE17get_target_statusEm+0x6ea>
				fix_flag = 0;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
				display_array[1] = 35;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	3301      	adds	r3, #1
 8003184:	2223      	movs	r2, #35	@ 0x23
 8003186:	701a      	strb	r2, [r3, #0]
				display_array[2] = 24;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	3302      	adds	r3, #2
 800318e:	2218      	movs	r2, #24
 8003190:	701a      	strb	r2, [r3, #0]
				display_array[3] = r_standard;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	3303      	adds	r3, #3
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 800319e:	701a      	strb	r2, [r3, #0]
			p_count = perform_array[1];
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	885a      	ldrh	r2, [r3, #2]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	849a      	strh	r2, [r3, #36]	@ 0x24
 80031aa:	e04e      	b.n	800324a <_ZN11PERFORMANCE17get_target_statusEm+0x794>
		}else if(position_array[0] <= 600 && perform_array[2] - first_beat > 8){//魂あげるために止まる
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031b4:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80031b8:	dc47      	bgt.n	800324a <_ZN11PERFORMANCE17get_target_statusEm+0x794>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3304      	adds	r3, #4
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	dd3d      	ble.n	800324a <_ZN11PERFORMANCE17get_target_statusEm+0x794>
			fix_flag = 0;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
			if((perform_array[1] - p_count) >= 2){
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3302      	adds	r3, #2
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	dd2f      	ble.n	800324a <_ZN11PERFORMANCE17get_target_statusEm+0x794>
				if(display_array[1] >= 24){
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	3301      	adds	r3, #1
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b17      	cmp	r3, #23
 80031f4:	d913      	bls.n	800321e <_ZN11PERFORMANCE17get_target_statusEm+0x768>
					display_array[1]--;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	3301      	adds	r3, #1
 80031fc:	781a      	ldrb	r2, [r3, #0]
 80031fe:	3a01      	subs	r2, #1
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	701a      	strb	r2, [r3, #0]
					display_array[2] = 24;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	3302      	adds	r3, #2
 800320a:	2218      	movs	r2, #24
 800320c:	701a      	strb	r2, [r3, #0]
					display_array[3] = r_standard;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	3303      	adds	r3, #3
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 800321a:	701a      	strb	r2, [r3, #0]
 800321c:	e010      	b.n	8003240 <_ZN11PERFORMANCE17get_target_statusEm+0x78a>
					display_array[1] = 24;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	3301      	adds	r3, #1
 8003224:	2218      	movs	r2, #24
 8003226:	701a      	strb	r2, [r3, #0]
					display_array[2] = 24;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	3302      	adds	r3, #2
 800322e:	2218      	movs	r2, #24
 8003230:	701a      	strb	r2, [r3, #0]
					display_array[3] = r_standard;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	3303      	adds	r3, #3
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 800323e:	701a      	strb	r2, [r3, #0]
				p_count = perform_array[1];
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	885a      	ldrh	r2, [r3, #2]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	849a      	strh	r2, [r3, #36]	@ 0x24
		mode_flag[2] = 1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 8003252:	f000 bf3d 	b.w	80040d0 <_ZN11PERFORMANCE17get_target_statusEm+0x161a>
	}else if(perform_array[0] == 3){//アーム 48~79
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	2b03      	cmp	r3, #3
 800325e:	d145      	bne.n	80032ec <_ZN11PERFORMANCE17get_target_statusEm+0x836>
		shdn_flag = 0;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		mode_flag[3] = 1;//
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
		display_array[1] = 0;//x
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	3301      	adds	r3, #1
 8003276:	2200      	movs	r2, #0
 8003278:	701a      	strb	r2, [r3, #0]
		display_array[2] = 0;//y
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	3302      	adds	r3, #2
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
		display_array[3] = 0;//r
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	3303      	adds	r3, #3
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]
		display_array[4] = 0;//circle_H
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	3304      	adds	r3, #4
 8003294:	2200      	movs	r2, #0
 8003296:	701a      	strb	r2, [r3, #0]
		display_array[5] = 0;//circle_S
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	3305      	adds	r3, #5
 800329e:	2200      	movs	r2, #0
 80032a0:	701a      	strb	r2, [r3, #0]
		display_array[6] = 0;//circle_V
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	3306      	adds	r3, #6
 80032a8:	2200      	movs	r2, #0
 80032aa:	701a      	strb	r2, [r3, #0]
		display_array[7] = 0;//background_H
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	3307      	adds	r3, #7
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]
		display_array[8] = 0;//background_S
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	3308      	adds	r3, #8
 80032bc:	2200      	movs	r2, #0
 80032be:	701a      	strb	r2, [r3, #0]
		display_array[9] = 0;//background_V
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	3309      	adds	r3, #9
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
		display_array[10] = 0;//frame_H
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	330a      	adds	r3, #10
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
		display_array[11] = 0;//frame_S
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	330b      	adds	r3, #11
 80032da:	2200      	movs	r2, #0
 80032dc:	701a      	strb	r2, [r3, #0]
		display_array[12] = 0;//frame_V
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	330c      	adds	r3, #12
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
}
 80032e8:	f000 bef2 	b.w	80040d0 <_ZN11PERFORMANCE17get_target_statusEm+0x161a>
	}else if(perform_array[0] == 4){//アーム 80~111
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d145      	bne.n	8003382 <_ZN11PERFORMANCE17get_target_statusEm+0x8cc>
		shdn_flag = 0;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		mode_flag[4] = 1;//
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		display_array[1] = 0;//x
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	3301      	adds	r3, #1
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
		display_array[2] = 0;//y
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	3302      	adds	r3, #2
 8003316:	2200      	movs	r2, #0
 8003318:	701a      	strb	r2, [r3, #0]
		display_array[3] = 0;//r
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	3303      	adds	r3, #3
 8003320:	2200      	movs	r2, #0
 8003322:	701a      	strb	r2, [r3, #0]
		display_array[4] = 0;//circle_H
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	3304      	adds	r3, #4
 800332a:	2200      	movs	r2, #0
 800332c:	701a      	strb	r2, [r3, #0]
		display_array[5] = 0;//circle_S
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	3305      	adds	r3, #5
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
		display_array[6] = 0;//circle_V
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	3306      	adds	r3, #6
 800333e:	2200      	movs	r2, #0
 8003340:	701a      	strb	r2, [r3, #0]
		display_array[7] = 0;//background_H
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	3307      	adds	r3, #7
 8003348:	2200      	movs	r2, #0
 800334a:	701a      	strb	r2, [r3, #0]
		display_array[8] = 0;//background_S
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	3308      	adds	r3, #8
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
		display_array[9] = 0;//background_V
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	3309      	adds	r3, #9
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]
		display_array[10] = 0;//frame_H
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	330a      	adds	r3, #10
 8003366:	2200      	movs	r2, #0
 8003368:	701a      	strb	r2, [r3, #0]
		display_array[11] = 0;//frame_S
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	330b      	adds	r3, #11
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]
		display_array[12] = 0;//frame_V
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	330c      	adds	r3, #12
 800337a:	2200      	movs	r2, #0
 800337c:	701a      	strb	r2, [r3, #0]
}
 800337e:	f000 bea7 	b.w	80040d0 <_ZN11PERFORMANCE17get_target_statusEm+0x161a>
	}else if(perform_array[0] == 5){//ポール 112~127
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	2b05      	cmp	r3, #5
 800338a:	d145      	bne.n	8003418 <_ZN11PERFORMANCE17get_target_statusEm+0x962>
		shdn_flag = 0;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		mode_flag[5] = 1;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
		display_array[1] = 0;//x
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	3301      	adds	r3, #1
 80033a2:	2200      	movs	r2, #0
 80033a4:	701a      	strb	r2, [r3, #0]
		display_array[2] = 0;//y
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	3302      	adds	r3, #2
 80033ac:	2200      	movs	r2, #0
 80033ae:	701a      	strb	r2, [r3, #0]
		display_array[3] = 0;//r
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	3303      	adds	r3, #3
 80033b6:	2200      	movs	r2, #0
 80033b8:	701a      	strb	r2, [r3, #0]
		display_array[4] = 0;//circle_H
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	3304      	adds	r3, #4
 80033c0:	2200      	movs	r2, #0
 80033c2:	701a      	strb	r2, [r3, #0]
		display_array[5] = 0;//circle_S
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	3305      	adds	r3, #5
 80033ca:	2200      	movs	r2, #0
 80033cc:	701a      	strb	r2, [r3, #0]
		display_array[6] = 0;//circle_V
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	3306      	adds	r3, #6
 80033d4:	2200      	movs	r2, #0
 80033d6:	701a      	strb	r2, [r3, #0]
		display_array[7] = 0;//background_H
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	3307      	adds	r3, #7
 80033de:	2200      	movs	r2, #0
 80033e0:	701a      	strb	r2, [r3, #0]
		display_array[8] = 0;//background_S
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	3308      	adds	r3, #8
 80033e8:	2200      	movs	r2, #0
 80033ea:	701a      	strb	r2, [r3, #0]
		display_array[9] = 0;//background_V
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	3309      	adds	r3, #9
 80033f2:	2200      	movs	r2, #0
 80033f4:	701a      	strb	r2, [r3, #0]
		display_array[10] = 0;//frame_H
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	330a      	adds	r3, #10
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
		display_array[11] = 0;//frame_S
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	330b      	adds	r3, #11
 8003406:	2200      	movs	r2, #0
 8003408:	701a      	strb	r2, [r3, #0]
		display_array[12] = 0;//frame_V
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	330c      	adds	r3, #12
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]
}
 8003414:	f000 be5c 	b.w	80040d0 <_ZN11PERFORMANCE17get_target_statusEm+0x161a>
	}else if(perform_array[0] == 6){//ポール 128~142
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	2b06      	cmp	r3, #6
 8003420:	f040 80bf 	bne.w	80035a2 <_ZN11PERFORMANCE17get_target_statusEm+0xaec>
		shdn_flag = 1;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		if(mode_flag[6] == 0){
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003432:	2b00      	cmp	r3, #0
 8003434:	d13b      	bne.n	80034ae <_ZN11PERFORMANCE17get_target_statusEm+0x9f8>
			display_array[1] = 0;//x
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	3301      	adds	r3, #1
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
			display_array[2] = 0;//y
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	3302      	adds	r3, #2
 8003446:	2200      	movs	r2, #0
 8003448:	701a      	strb	r2, [r3, #0]
			display_array[3] = 0;//r
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	3303      	adds	r3, #3
 8003450:	2200      	movs	r2, #0
 8003452:	701a      	strb	r2, [r3, #0]
			display_array[4] = 0;//circle_H
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	3304      	adds	r3, #4
 800345a:	2200      	movs	r2, #0
 800345c:	701a      	strb	r2, [r3, #0]
			display_array[5] = 0;//circle_S
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	3305      	adds	r3, #5
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
			display_array[6] = 0;//circle_V
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	3306      	adds	r3, #6
 800346e:	2200      	movs	r2, #0
 8003470:	701a      	strb	r2, [r3, #0]
			display_array[7] = 0;//background_H
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	3307      	adds	r3, #7
 8003478:	2200      	movs	r2, #0
 800347a:	701a      	strb	r2, [r3, #0]
			display_array[8] = 0;//background_S
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	3308      	adds	r3, #8
 8003482:	2200      	movs	r2, #0
 8003484:	701a      	strb	r2, [r3, #0]
			display_array[9] = 0;//background_V
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	3309      	adds	r3, #9
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
			display_array[10] = 0;//frame_H
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	330a      	adds	r3, #10
 8003496:	2200      	movs	r2, #0
 8003498:	701a      	strb	r2, [r3, #0]
			display_array[11] = 0;//frame_S
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	330b      	adds	r3, #11
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
			display_array[12] = 0;//frame_V
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	330c      	adds	r3, #12
 80034aa:	2200      	movs	r2, #0
 80034ac:	701a      	strb	r2, [r3, #0]
		if(perform_array[2] >= 136){
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3304      	adds	r3, #4
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	2b87      	cmp	r3, #135	@ 0x87
 80034b8:	d96d      	bls.n	8003596 <_ZN11PERFORMANCE17get_target_statusEm+0xae0>
			movement_array[0] = 2000;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80034c2:	801a      	strh	r2, [r3, #0]
			movement_array[1] = 0;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	3302      	adds	r3, #2
 80034ca:	2200      	movs	r2, #0
 80034cc:	801a      	strh	r2, [r3, #0]
			movement_array[2] = 200;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	3304      	adds	r3, #4
 80034d4:	22c8      	movs	r2, #200	@ 0xc8
 80034d6:	801a      	strh	r2, [r3, #0]
			display_array[1] = 24;//x
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	3301      	adds	r3, #1
 80034de:	2218      	movs	r2, #24
 80034e0:	701a      	strb	r2, [r3, #0]
			display_array[2] = 24;//y
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	3302      	adds	r3, #2
 80034e8:	2218      	movs	r2, #24
 80034ea:	701a      	strb	r2, [r3, #0]
			display_array[3] = r_standard;//r
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	3303      	adds	r3, #3
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 80034f8:	701a      	strb	r2, [r3, #0]
			display_array[4] = perform_array[3] + 128;//circle_H
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3306      	adds	r3, #6
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	b2da      	uxtb	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	3304      	adds	r3, #4
 800350a:	3a80      	subs	r2, #128	@ 0x80
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	701a      	strb	r2, [r3, #0]
				display_array[4] %= 256;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	3304      	adds	r3, #4
 800351a:	7912      	ldrb	r2, [r2, #4]
 800351c:	701a      	strb	r2, [r3, #0]
			display_array[5] = S_standard;//circle_S
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	3305      	adds	r3, #5
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 800352a:	701a      	strb	r2, [r3, #0]
			display_array[6] = V_standard;//circle_V
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	3306      	adds	r3, #6
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8003538:	701a      	strb	r2, [r3, #0]
			display_array[7] = perform_array[3];//background_H
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3306      	adds	r3, #6
 8003540:	881a      	ldrh	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	3307      	adds	r3, #7
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	701a      	strb	r2, [r3, #0]
			display_array[8] = S_standard;//background_S
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	3308      	adds	r3, #8
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8003558:	701a      	strb	r2, [r3, #0]
			display_array[9] = V_standard;//background_V
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	3309      	adds	r3, #9
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8003566:	701a      	strb	r2, [r3, #0]
			display_array[10] = perform_array[3];//frame_H
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3306      	adds	r3, #6
 800356e:	881a      	ldrh	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	330a      	adds	r3, #10
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	701a      	strb	r2, [r3, #0]
			display_array[11] = S_standard;//frame_S
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	330b      	adds	r3, #11
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8003586:	701a      	strb	r2, [r3, #0]
			display_array[12] = V_standard;//frame_V
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	330c      	adds	r3, #12
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8003594:	701a      	strb	r2, [r3, #0]
		mode_flag[6] = 1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
}
 800359e:	f000 bd97 	b.w	80040d0 <_ZN11PERFORMANCE17get_target_statusEm+0x161a>
	}else if(perform_array[0] == 7){//すなあらあし 143~158
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	2b07      	cmp	r3, #7
 80035aa:	f040 80af 	bne.w	800370c <_ZN11PERFORMANCE17get_target_statusEm+0xc56>
		shdn_flag = 1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		if(mode_flag[7] == 0){
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d16b      	bne.n	8003698 <_ZN11PERFORMANCE17get_target_statusEm+0xbe2>
			movement_array[0] = 2000;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80035c8:	801a      	strh	r2, [r3, #0]
			movement_array[1] = 0;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	3302      	adds	r3, #2
 80035d0:	2200      	movs	r2, #0
 80035d2:	801a      	strh	r2, [r3, #0]
			movement_array[2] = 200;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	3304      	adds	r3, #4
 80035da:	22c8      	movs	r2, #200	@ 0xc8
 80035dc:	801a      	strh	r2, [r3, #0]
			display_array[1] = 0;//x
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	3301      	adds	r3, #1
 80035e4:	2200      	movs	r2, #0
 80035e6:	701a      	strb	r2, [r3, #0]
			display_array[2] = 0;//y
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	3302      	adds	r3, #2
 80035ee:	2200      	movs	r2, #0
 80035f0:	701a      	strb	r2, [r3, #0]
			display_array[3] = 0;//r
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	3303      	adds	r3, #3
 80035f8:	2200      	movs	r2, #0
 80035fa:	701a      	strb	r2, [r3, #0]
			display_array[4] = perform_array[3] + 128;//circle_H
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3306      	adds	r3, #6
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	b2da      	uxtb	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	3304      	adds	r3, #4
 800360c:	3a80      	subs	r2, #128	@ 0x80
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	701a      	strb	r2, [r3, #0]
				display_array[4] %= 256;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	3304      	adds	r3, #4
 800361c:	7912      	ldrb	r2, [r2, #4]
 800361e:	701a      	strb	r2, [r3, #0]
			display_array[5] = S_standard;//circle_S
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	3305      	adds	r3, #5
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 800362c:	701a      	strb	r2, [r3, #0]
			display_array[6] = V_standard;//circle_V
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	3306      	adds	r3, #6
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 800363a:	701a      	strb	r2, [r3, #0]
			display_array[7] = perform_array[3];//background_H
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3306      	adds	r3, #6
 8003642:	881a      	ldrh	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	3307      	adds	r3, #7
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]
			display_array[8] = S_standard;//background_S
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	3308      	adds	r3, #8
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 800365a:	701a      	strb	r2, [r3, #0]
			display_array[9] = V_standard;//background_V
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	3309      	adds	r3, #9
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8003668:	701a      	strb	r2, [r3, #0]
			display_array[10] = perform_array[3];//frame_H
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3306      	adds	r3, #6
 8003670:	881a      	ldrh	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	330a      	adds	r3, #10
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	701a      	strb	r2, [r3, #0]
			display_array[11] = S_standard;//frame_S
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	330b      	adds	r3, #11
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8003688:	701a      	strb	r2, [r3, #0]
			display_array[12] = V_standard;//frame_V
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	330c      	adds	r3, #12
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8003696:	701a      	strb	r2, [r3, #0]
		if(perform_array[2] >= 144){
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3304      	adds	r3, #4
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	2b8f      	cmp	r3, #143	@ 0x8f
 80036a2:	d92d      	bls.n	8003700 <_ZN11PERFORMANCE17get_target_statusEm+0xc4a>
			shdn_flag = 0;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			display_array[4] ++;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	3304      	adds	r3, #4
 80036b2:	781a      	ldrb	r2, [r3, #0]
 80036b4:	3201      	adds	r2, #1
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	701a      	strb	r2, [r3, #0]
				display_array[4] %= 256;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	3304      	adds	r3, #4
 80036c4:	7912      	ldrb	r2, [r2, #4]
 80036c6:	701a      	strb	r2, [r3, #0]
			display_array[7] ++;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	3307      	adds	r3, #7
 80036ce:	781a      	ldrb	r2, [r3, #0]
 80036d0:	3201      	adds	r2, #1
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]
				display_array[4] %= 256;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	3304      	adds	r3, #4
 80036e0:	7912      	ldrb	r2, [r2, #4]
 80036e2:	701a      	strb	r2, [r3, #0]
			display_array[10] ++;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	330a      	adds	r3, #10
 80036ea:	781a      	ldrb	r2, [r3, #0]
 80036ec:	3201      	adds	r2, #1
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]
				display_array[4] %= 256;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	3304      	adds	r3, #4
 80036fc:	7912      	ldrb	r2, [r2, #4]
 80036fe:	701a      	strb	r2, [r3, #0]
		mode_flag[7] = 1;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
}
 8003708:	f000 bce2 	b.w	80040d0 <_ZN11PERFORMANCE17get_target_statusEm+0x161a>
	}else if(perform_array[0] == 8){//しぬ 159~
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	2b08      	cmp	r3, #8
 8003714:	d14a      	bne.n	80037ac <_ZN11PERFORMANCE17get_target_statusEm+0xcf6>
		shdn_flag = 0;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		mode_flag[8] = 1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		movement_array[2] = 0;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	3304      	adds	r3, #4
 800372c:	2200      	movs	r2, #0
 800372e:	801a      	strh	r2, [r3, #0]
		display_array[1] = 0;//x
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	3301      	adds	r3, #1
 8003736:	2200      	movs	r2, #0
 8003738:	701a      	strb	r2, [r3, #0]
		display_array[2] = 0;//y
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	3302      	adds	r3, #2
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
		display_array[3] = 0;//r
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	3303      	adds	r3, #3
 800374a:	2200      	movs	r2, #0
 800374c:	701a      	strb	r2, [r3, #0]
		display_array[4] = 0;//circle_H
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	3304      	adds	r3, #4
 8003754:	2200      	movs	r2, #0
 8003756:	701a      	strb	r2, [r3, #0]
		display_array[5] = 0;//circle_S
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	3305      	adds	r3, #5
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]
		display_array[6] = 0;//circle_V
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	3306      	adds	r3, #6
 8003768:	2200      	movs	r2, #0
 800376a:	701a      	strb	r2, [r3, #0]
		display_array[7] = 0;//background_H
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	3307      	adds	r3, #7
 8003772:	2200      	movs	r2, #0
 8003774:	701a      	strb	r2, [r3, #0]
		display_array[8] = 0;//background_S
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	3308      	adds	r3, #8
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]
		display_array[9] = 0;//background_V
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	3309      	adds	r3, #9
 8003786:	2200      	movs	r2, #0
 8003788:	701a      	strb	r2, [r3, #0]
		display_array[10] = 0;//frame_H
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	330a      	adds	r3, #10
 8003790:	2200      	movs	r2, #0
 8003792:	701a      	strb	r2, [r3, #0]
		display_array[11] = 0;//frame_S
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	330b      	adds	r3, #11
 800379a:	2200      	movs	r2, #0
 800379c:	701a      	strb	r2, [r3, #0]
		display_array[12] = 0;//frame_V
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	330c      	adds	r3, #12
 80037a4:	2200      	movs	r2, #0
 80037a6:	701a      	strb	r2, [r3, #0]
}
 80037a8:	f000 bc92 	b.w	80040d0 <_ZN11PERFORMANCE17get_target_statusEm+0x161a>
	}else if(perform_array[0] == 9){//たまいれる 15s
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	2b09      	cmp	r3, #9
 80037b4:	d14a      	bne.n	800384c <_ZN11PERFORMANCE17get_target_statusEm+0xd96>
		shdn_flag = 0;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		mode_flag[9] = 1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
		movement_array[2] = 0;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	3304      	adds	r3, #4
 80037cc:	2200      	movs	r2, #0
 80037ce:	801a      	strh	r2, [r3, #0]
		display_array[1] = 0;//x
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	3301      	adds	r3, #1
 80037d6:	2200      	movs	r2, #0
 80037d8:	701a      	strb	r2, [r3, #0]
		display_array[2] = 0;//y
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	3302      	adds	r3, #2
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
		display_array[3] = 0;//r
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	3303      	adds	r3, #3
 80037ea:	2200      	movs	r2, #0
 80037ec:	701a      	strb	r2, [r3, #0]
		display_array[4] = 0;//circle_H
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	3304      	adds	r3, #4
 80037f4:	2200      	movs	r2, #0
 80037f6:	701a      	strb	r2, [r3, #0]
		display_array[5] = 0;//circle_S
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	3305      	adds	r3, #5
 80037fe:	2200      	movs	r2, #0
 8003800:	701a      	strb	r2, [r3, #0]
		display_array[6] = 0;//circle_V
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	3306      	adds	r3, #6
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]
		display_array[7] = 0;//background_H
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	3307      	adds	r3, #7
 8003812:	2200      	movs	r2, #0
 8003814:	701a      	strb	r2, [r3, #0]
		display_array[8] = 0;//background_S
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	3308      	adds	r3, #8
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
		display_array[9] = 0;//background_V
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	3309      	adds	r3, #9
 8003826:	2200      	movs	r2, #0
 8003828:	701a      	strb	r2, [r3, #0]
		display_array[10] = 0;//frame_H
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	330a      	adds	r3, #10
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
		display_array[11] = 0;//frame_S
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	330b      	adds	r3, #11
 800383a:	2200      	movs	r2, #0
 800383c:	701a      	strb	r2, [r3, #0]
		display_array[12] = 0;//frame_V
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	330c      	adds	r3, #12
 8003844:	2200      	movs	r2, #0
 8003846:	701a      	strb	r2, [r3, #0]
}
 8003848:	f000 bc42 	b.w	80040d0 <_ZN11PERFORMANCE17get_target_statusEm+0x161a>
	}else if(perform_array[0] == 10){//チャージ 1~17
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	2b0a      	cmp	r3, #10
 8003854:	f040 80a0 	bne.w	8003998 <_ZN11PERFORMANCE17get_target_statusEm+0xee2>
		shdn_flag = 1;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		mode_flag[10] = 1;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
		movement_array[2] = 0;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	3304      	adds	r3, #4
 800386e:	2200      	movs	r2, #0
 8003870:	801a      	strh	r2, [r3, #0]
		if(mode_flag[10] == 0){
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003878:	2b00      	cmp	r3, #0
 800387a:	d16e      	bne.n	800395a <_ZN11PERFORMANCE17get_target_statusEm+0xea4>
			p_beat = first_beat = perform_array[2];
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	889a      	ldrh	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	851a      	strh	r2, [r3, #40]	@ 0x28
			p_count = first_count = perform_array[1];
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	885a      	ldrh	r2, [r3, #2]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	84da      	strh	r2, [r3, #38]	@ 0x26
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	849a      	strh	r2, [r3, #36]	@ 0x24
			display_array[1] = 24;//x
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	3301      	adds	r3, #1
 80038a6:	2218      	movs	r2, #24
 80038a8:	701a      	strb	r2, [r3, #0]
			display_array[2] = 24;//y
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	3302      	adds	r3, #2
 80038b0:	2218      	movs	r2, #24
 80038b2:	701a      	strb	r2, [r3, #0]
			display_array[3] = 0;//r
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	3303      	adds	r3, #3
 80038ba:	2200      	movs	r2, #0
 80038bc:	701a      	strb	r2, [r3, #0]
			display_array[4] = perform_array[3];//circle_H
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3306      	adds	r3, #6
 80038c4:	881a      	ldrh	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	3304      	adds	r3, #4
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	701a      	strb	r2, [r3, #0]
			display_array[5] = S_standard;//circle_S
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	3305      	adds	r3, #5
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 80038dc:	701a      	strb	r2, [r3, #0]
			display_array[6] = V_standard;//circle_V
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	3306      	adds	r3, #6
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 80038ea:	701a      	strb	r2, [r3, #0]
			display_array[7] = perform_array[3] + 128;//background_H
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	3306      	adds	r3, #6
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	3307      	adds	r3, #7
 80038fc:	3a80      	subs	r2, #128	@ 0x80
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]
				display_array[7] %= 256;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	3307      	adds	r3, #7
 800390c:	79d2      	ldrb	r2, [r2, #7]
 800390e:	701a      	strb	r2, [r3, #0]
			display_array[8] = S_standard;//background_S
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	3308      	adds	r3, #8
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 800391c:	701a      	strb	r2, [r3, #0]
			display_array[9] = V_standard;//background_V
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	3309      	adds	r3, #9
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 800392a:	701a      	strb	r2, [r3, #0]
			display_array[10] = perform_array[3];//frame_H
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3306      	adds	r3, #6
 8003932:	881a      	ldrh	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	330a      	adds	r3, #10
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]
			display_array[11] = S_standard;//frame_S
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	330b      	adds	r3, #11
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 800394a:	701a      	strb	r2, [r3, #0]
			display_array[12] = V_standard;//frame_V
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	330c      	adds	r3, #12
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8003958:	701a      	strb	r2, [r3, #0]
		if(perform_array[2] >= 2){
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3304      	adds	r3, #4
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	2b01      	cmp	r3, #1
 8003964:	f240 83b4 	bls.w	80040d0 <_ZN11PERFORMANCE17get_target_statusEm+0x161a>
			if(perform_array[1] - p_count > 7){
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	3302      	adds	r3, #2
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	461a      	mov	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b07      	cmp	r3, #7
 800397a:	f340 83a9 	ble.w	80040d0 <_ZN11PERFORMANCE17get_target_statusEm+0x161a>
				display_array[3]++;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	3303      	adds	r3, #3
 8003984:	781a      	ldrb	r2, [r3, #0]
 8003986:	3201      	adds	r2, #1
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	701a      	strb	r2, [r3, #0]
				p_count = perform_array[1];
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	885a      	ldrh	r2, [r3, #2]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	849a      	strh	r2, [r3, #36]	@ 0x24
}
 8003996:	e39b      	b.n	80040d0 <_ZN11PERFORMANCE17get_target_statusEm+0x161a>
	}else if(perform_array[0] == 11 || perform_array[0] == 12){//もりあがり 18~47 48~73
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	2b0b      	cmp	r3, #11
 80039a0:	d005      	beq.n	80039ae <_ZN11PERFORMANCE17get_target_statusEm+0xef8>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	2b0c      	cmp	r3, #12
 80039aa:	f040 8162 	bne.w	8003c72 <_ZN11PERFORMANCE17get_target_statusEm+0x11bc>
		shdn_flag = 1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		fix_flag = 1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		if(mode_flag[11] == 0 || mode_flag[12] == 0){
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <_ZN11PERFORMANCE17get_target_statusEm+0xf1e>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f040 8084 	bne.w	8003adc <_ZN11PERFORMANCE17get_target_statusEm+0x1026>
			p_beat = first_beat = perform_array[2];
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	889a      	ldrh	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	851a      	strh	r2, [r3, #40]	@ 0x28
			p_count = first_count = perform_array[1];
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	885a      	ldrh	r2, [r3, #2]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	84da      	strh	r2, [r3, #38]	@ 0x26
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	849a      	strh	r2, [r3, #36]	@ 0x24
			katamuki = -1;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	22ff      	movs	r2, #255	@ 0xff
 80039fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			movement_array[0] = 2000;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003a08:	801a      	strh	r2, [r3, #0]
			movement_array[1] = 0;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	3302      	adds	r3, #2
 8003a10:	2200      	movs	r2, #0
 8003a12:	801a      	strh	r2, [r3, #0]
			movement_array[2] = 0;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	801a      	strh	r2, [r3, #0]
			display_array[1] = 24;//x
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	3301      	adds	r3, #1
 8003a24:	2218      	movs	r2, #24
 8003a26:	701a      	strb	r2, [r3, #0]
			display_array[2] = 24;//y
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	2218      	movs	r2, #24
 8003a30:	701a      	strb	r2, [r3, #0]
			display_array[3] = r_standard;//r
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	3303      	adds	r3, #3
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 8003a3e:	701a      	strb	r2, [r3, #0]
			display_array[4] = perform_array[3] + 128;//circle_H
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3306      	adds	r3, #6
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	3a80      	subs	r2, #128	@ 0x80
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	701a      	strb	r2, [r3, #0]
				display_array[7] %= 256;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	3307      	adds	r3, #7
 8003a60:	79d2      	ldrb	r2, [r2, #7]
 8003a62:	701a      	strb	r2, [r3, #0]
			display_array[5] = S_standard;//circle_S
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	3305      	adds	r3, #5
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8003a70:	701a      	strb	r2, [r3, #0]
			display_array[6] = V_standard;//circle_V
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	3306      	adds	r3, #6
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8003a7e:	701a      	strb	r2, [r3, #0]
			display_array[7] = perform_array[3];//background_H
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3306      	adds	r3, #6
 8003a86:	881a      	ldrh	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	3307      	adds	r3, #7
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	701a      	strb	r2, [r3, #0]
			display_array[8] = S_standard;//background_S
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	3308      	adds	r3, #8
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8003a9e:	701a      	strb	r2, [r3, #0]
			display_array[9] = V_standard;//background_V
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	3309      	adds	r3, #9
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8003aac:	701a      	strb	r2, [r3, #0]
			display_array[10] = perform_array[3];//frame_H
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3306      	adds	r3, #6
 8003ab4:	881a      	ldrh	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	330a      	adds	r3, #10
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	701a      	strb	r2, [r3, #0]
			display_array[11] = S_standard;//frame_S
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	330b      	adds	r3, #11
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8003acc:	701a      	strb	r2, [r3, #0]
			display_array[12] = V_standard;//frame_V
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	330c      	adds	r3, #12
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8003ada:	701a      	strb	r2, [r3, #0]
		if(position_array[0] > 1000 && position_array[0] < 4000){
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ae4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ae8:	dd4a      	ble.n	8003b80 <_ZN11PERFORMANCE17get_target_statusEm+0x10ca>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003af2:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8003af6:	da43      	bge.n	8003b80 <_ZN11PERFORMANCE17get_target_statusEm+0x10ca>
			if(katamuki == -1){
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 8003afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b02:	d110      	bne.n	8003b26 <_ZN11PERFORMANCE17get_target_statusEm+0x1070>
				movement_array[0] = 1000;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b0c:	801a      	strh	r2, [r3, #0]
				movement_array[1] = 0;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	3302      	adds	r3, #2
 8003b14:	2200      	movs	r2, #0
 8003b16:	801a      	strh	r2, [r3, #0]
				movement_array[2] = 300;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b22:	801a      	strh	r2, [r3, #0]
 8003b24:	e014      	b.n	8003b50 <_ZN11PERFORMANCE17get_target_statusEm+0x109a>
			}else if(katamuki == 1){
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d10f      	bne.n	8003b50 <_ZN11PERFORMANCE17get_target_statusEm+0x109a>
				movement_array[0] = 4000;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8003b38:	801a      	strh	r2, [r3, #0]
				movement_array[1] = 0;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	3302      	adds	r3, #2
 8003b40:	2200      	movs	r2, #0
 8003b42:	801a      	strh	r2, [r3, #0]
				movement_array[2] = 300;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b4e:	801a      	strh	r2, [r3, #0]
			circle_position_array[0] = 2500;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003b58:	801a      	strh	r2, [r3, #0]
			circle_position_array[1] = 24 * 10;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	3302      	adds	r3, #2
 8003b60:	22f0      	movs	r2, #240	@ 0xf0
 8003b62:	801a      	strh	r2, [r3, #0]
			circle_position_array[2] = r_standard * 10;//r
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	0092      	lsls	r2, r2, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	b212      	sxth	r2, r2
 8003b7c:	801a      	strh	r2, [r3, #0]
 8003b7e:	e036      	b.n	8003bee <_ZN11PERFORMANCE17get_target_statusEm+0x1138>
		}else if(position_array[0] <= 1000){
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b8c:	dc14      	bgt.n	8003bb8 <_ZN11PERFORMANCE17get_target_statusEm+0x1102>
			katamuki = 1;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			movement_array[0] = 4000;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8003b9e:	801a      	strh	r2, [r3, #0]
			movement_array[1] = 0;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	801a      	strh	r2, [r3, #0]
			movement_array[2] = 300;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003bb4:	801a      	strh	r2, [r3, #0]
 8003bb6:	e01a      	b.n	8003bee <_ZN11PERFORMANCE17get_target_statusEm+0x1138>
		}else if(position_array[0] >=4000){
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bc0:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8003bc4:	db13      	blt.n	8003bee <_ZN11PERFORMANCE17get_target_statusEm+0x1138>
			katamuki = -1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	22ff      	movs	r2, #255	@ 0xff
 8003bca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			movement_array[0] = 1000;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003bd6:	801a      	strh	r2, [r3, #0]
			movement_array[1] = 0;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	3302      	adds	r3, #2
 8003bde:	2200      	movs	r2, #0
 8003be0:	801a      	strh	r2, [r3, #0]
			movement_array[2] = 300;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	3304      	adds	r3, #4
 8003be8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003bec:	801a      	strh	r2, [r3, #0]
		if(position_array[0] <= 1300){
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bf6:	f240 5214 	movw	r2, #1300	@ 0x514
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	dc14      	bgt.n	8003c28 <_ZN11PERFORMANCE17get_target_statusEm+0x1172>
			katamuki = 1;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			movement_array[0] = 4000;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8003c0e:	801a      	strh	r2, [r3, #0]
			movement_array[1] = 0;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	3302      	adds	r3, #2
 8003c16:	2200      	movs	r2, #0
 8003c18:	801a      	strh	r2, [r3, #0]
			movement_array[2] = 300;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c24:	801a      	strh	r2, [r3, #0]
 8003c26:	e01b      	b.n	8003c60 <_ZN11PERFORMANCE17get_target_statusEm+0x11aa>
		}else if(position_array[0] >= 3700){
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c30:	f640 6273 	movw	r2, #3699	@ 0xe73
 8003c34:	4293      	cmp	r3, r2
 8003c36:	dd13      	ble.n	8003c60 <_ZN11PERFORMANCE17get_target_statusEm+0x11aa>
			katamuki = -1;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	22ff      	movs	r2, #255	@ 0xff
 8003c3c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			movement_array[0] = 1000;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c48:	801a      	strh	r2, [r3, #0]
			movement_array[1] = 0;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	3302      	adds	r3, #2
 8003c50:	2200      	movs	r2, #0
 8003c52:	801a      	strh	r2, [r3, #0]
			movement_array[2] = 300;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c5e:	801a      	strh	r2, [r3, #0]
		mode_flag[11] = 1;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
		mode_flag[12] = 1;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003c70:	e22e      	b.n	80040d0 <_ZN11PERFORMANCE17get_target_statusEm+0x161a>
	}else if(perform_array[0] == 13){//盛り上がりの最後 74~80
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	2b0d      	cmp	r3, #13
 8003c7a:	d154      	bne.n	8003d26 <_ZN11PERFORMANCE17get_target_statusEm+0x1270>
		shdn_flag = 1;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		display_array[1] = 0;//x
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	701a      	strb	r2, [r3, #0]
		display_array[2] = 0;//y
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	3302      	adds	r3, #2
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
		display_array[3] = 0;//r
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	3303      	adds	r3, #3
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	701a      	strb	r2, [r3, #0]
		display_array[4] = 0;//circle_H
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	2200      	movs	r2, #0
 8003caa:	701a      	strb	r2, [r3, #0]
		display_array[5] = 0;//circle_S
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	3305      	adds	r3, #5
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	701a      	strb	r2, [r3, #0]
		display_array[6] = 0;//circle_V
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	3306      	adds	r3, #6
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	701a      	strb	r2, [r3, #0]
		display_array[7] = perform_array[3];//background_H
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3306      	adds	r3, #6
 8003cc6:	881a      	ldrh	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	3307      	adds	r3, #7
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]
		display_array[8] = S_standard;//background_S
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	3308      	adds	r3, #8
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8003cde:	701a      	strb	r2, [r3, #0]
		display_array[9] = V_standard;//background_V
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	3309      	adds	r3, #9
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8003cec:	701a      	strb	r2, [r3, #0]
		display_array[10] = perform_array[3];//frame_H
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3306      	adds	r3, #6
 8003cf4:	881a      	ldrh	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	330a      	adds	r3, #10
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	701a      	strb	r2, [r3, #0]
		display_array[11] = S_standard;//frame_S
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	330b      	adds	r3, #11
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8003d0c:	701a      	strb	r2, [r3, #0]
		display_array[12] = V_standard;//frame_V
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	330c      	adds	r3, #12
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8003d1a:	701a      	strb	r2, [r3, #0]
		mode_flag[13] = 1;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8003d24:	e1d4      	b.n	80040d0 <_ZN11PERFORMANCE17get_target_statusEm+0x161a>
	}else if(perform_array[0] == 14){//フェードアウト 81~94
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	2b0e      	cmp	r3, #14
 8003d2e:	f040 813c 	bne.w	8003faa <_ZN11PERFORMANCE17get_target_statusEm+0x14f4>
		if(mode_flag[14] == 0){
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f040 8086 	bne.w	8003e4a <_ZN11PERFORMANCE17get_target_statusEm+0x1394>
			p_beat = first_beat = perform_array[2];
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	889a      	ldrh	r2, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
			p_count = first_count = perform_array[1];
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	885a      	ldrh	r2, [r3, #2]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	84da      	strh	r2, [r3, #38]	@ 0x26
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	849a      	strh	r2, [r3, #36]	@ 0x24
			katamuki = 1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			shdn_flag = 1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			movement_array[0] = 2000;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003d7a:	801a      	strh	r2, [r3, #0]
			movement_array[1] = 0;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	3302      	adds	r3, #2
 8003d82:	2200      	movs	r2, #0
 8003d84:	801a      	strh	r2, [r3, #0]
			movement_array[2] = 200;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	22c8      	movs	r2, #200	@ 0xc8
 8003d8e:	801a      	strh	r2, [r3, #0]
			display_array[1] = 24;//x
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	3301      	adds	r3, #1
 8003d96:	2218      	movs	r2, #24
 8003d98:	701a      	strb	r2, [r3, #0]
			display_array[2] = 24;//y
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	3302      	adds	r3, #2
 8003da0:	2218      	movs	r2, #24
 8003da2:	701a      	strb	r2, [r3, #0]
			display_array[3] = 0;//r
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	3303      	adds	r3, #3
 8003daa:	2200      	movs	r2, #0
 8003dac:	701a      	strb	r2, [r3, #0]
			display_array[4] = perform_array[3] + 128;//circle_H
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3306      	adds	r3, #6
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	3a80      	subs	r2, #128	@ 0x80
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	701a      	strb	r2, [r3, #0]
				display_array[7] %= 256;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	3307      	adds	r3, #7
 8003dce:	79d2      	ldrb	r2, [r2, #7]
 8003dd0:	701a      	strb	r2, [r3, #0]
			display_array[5] = S_standard;//circle_S
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	3305      	adds	r3, #5
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8003dde:	701a      	strb	r2, [r3, #0]
			display_array[6] = V_standard;//circle_V
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	3306      	adds	r3, #6
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8003dec:	701a      	strb	r2, [r3, #0]
			display_array[7] = perform_array[3];//background_H
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3306      	adds	r3, #6
 8003df4:	881a      	ldrh	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	3307      	adds	r3, #7
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	701a      	strb	r2, [r3, #0]
			display_array[8] = S_standard;//background_S
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	3308      	adds	r3, #8
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8003e0c:	701a      	strb	r2, [r3, #0]
			display_array[9] = V_standard;//background_V
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	3309      	adds	r3, #9
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8003e1a:	701a      	strb	r2, [r3, #0]
			display_array[10] = perform_array[3];//frame_H
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3306      	adds	r3, #6
 8003e22:	881a      	ldrh	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	330a      	adds	r3, #10
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	701a      	strb	r2, [r3, #0]
			display_array[11] = S_standard;//frame_S
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	330b      	adds	r3, #11
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8003e3a:	701a      	strb	r2, [r3, #0]
			display_array[12] = V_standard;//frame_V
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	330c      	adds	r3, #12
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8003e48:	701a      	strb	r2, [r3, #0]
		if((perform_array[1] - p_count) >= 1){
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3302      	adds	r3, #2
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f340 80a0 	ble.w	8003fa0 <_ZN11PERFORMANCE17get_target_statusEm+0x14ea>
			if(display_array[3] > 4 && display_array[3] < 20 && katamuki == -1){
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	3303      	adds	r3, #3
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d913      	bls.n	8003e94 <_ZN11PERFORMANCE17get_target_statusEm+0x13de>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	3303      	adds	r3, #3
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b13      	cmp	r3, #19
 8003e76:	d80d      	bhi.n	8003e94 <_ZN11PERFORMANCE17get_target_statusEm+0x13de>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 8003e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e82:	d107      	bne.n	8003e94 <_ZN11PERFORMANCE17get_target_statusEm+0x13de>
				display_array[3]--;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	3303      	adds	r3, #3
 8003e8a:	781a      	ldrb	r2, [r3, #0]
 8003e8c:	3a01      	subs	r2, #1
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]
 8003e92:	e059      	b.n	8003f48 <_ZN11PERFORMANCE17get_target_statusEm+0x1492>
			}else if(display_array[3] > 4 && display_array[3] < 20 && katamuki == 1){
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	3303      	adds	r3, #3
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d912      	bls.n	8003ec6 <_ZN11PERFORMANCE17get_target_statusEm+0x1410>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	3303      	adds	r3, #3
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b13      	cmp	r3, #19
 8003eaa:	d80c      	bhi.n	8003ec6 <_ZN11PERFORMANCE17get_target_statusEm+0x1410>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d107      	bne.n	8003ec6 <_ZN11PERFORMANCE17get_target_statusEm+0x1410>
				display_array[3]++;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	3303      	adds	r3, #3
 8003ebc:	781a      	ldrb	r2, [r3, #0]
 8003ebe:	3201      	adds	r2, #1
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	701a      	strb	r2, [r3, #0]
 8003ec4:	e040      	b.n	8003f48 <_ZN11PERFORMANCE17get_target_statusEm+0x1492>
			}else if(display_array[3] <= 4 && (perform_array[2] - p_beat) >= 2){
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	3303      	adds	r3, #3
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d81a      	bhi.n	8003f08 <_ZN11PERFORMANCE17get_target_statusEm+0x1452>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	dd10      	ble.n	8003f08 <_ZN11PERFORMANCE17get_target_statusEm+0x1452>
				katamuki = 1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
				display_array[3]++;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	3303      	adds	r3, #3
 8003ef4:	781a      	ldrb	r2, [r3, #0]
 8003ef6:	3201      	adds	r2, #1
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	701a      	strb	r2, [r3, #0]
				p_beat = perform_array[2];
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	889a      	ldrh	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003f06:	e01f      	b.n	8003f48 <_ZN11PERFORMANCE17get_target_statusEm+0x1492>
			}else if(display_array[3] >= 20 && (perform_array[2] - p_beat) >= 2){
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	3303      	adds	r3, #3
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2b13      	cmp	r3, #19
 8003f12:	d919      	bls.n	8003f48 <_ZN11PERFORMANCE17get_target_statusEm+0x1492>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	dd0f      	ble.n	8003f48 <_ZN11PERFORMANCE17get_target_statusEm+0x1492>
				katamuki = -1;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	22ff      	movs	r2, #255	@ 0xff
 8003f2c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
				display_array[3]--;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	3303      	adds	r3, #3
 8003f36:	781a      	ldrb	r2, [r3, #0]
 8003f38:	3a01      	subs	r2, #1
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	701a      	strb	r2, [r3, #0]
				p_beat = perform_array[2];
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	889a      	ldrh	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	851a      	strh	r2, [r3, #40]	@ 0x28
			if(display_array[6] != 0){
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	3306      	adds	r3, #6
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d006      	beq.n	8003f62 <_ZN11PERFORMANCE17get_target_statusEm+0x14ac>
				display_array[6]--;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	3306      	adds	r3, #6
 8003f5a:	781a      	ldrb	r2, [r3, #0]
 8003f5c:	3a01      	subs	r2, #1
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]
			if(display_array[9] != 0){
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	3309      	adds	r3, #9
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d006      	beq.n	8003f7c <_ZN11PERFORMANCE17get_target_statusEm+0x14c6>
				display_array[9]--;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	3309      	adds	r3, #9
 8003f74:	781a      	ldrb	r2, [r3, #0]
 8003f76:	3a01      	subs	r2, #1
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	701a      	strb	r2, [r3, #0]
			if(display_array[12] != 0){
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	330c      	adds	r3, #12
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d006      	beq.n	8003f96 <_ZN11PERFORMANCE17get_target_statusEm+0x14e0>
				display_array[12]--;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	330c      	adds	r3, #12
 8003f8e:	781a      	ldrb	r2, [r3, #0]
 8003f90:	3a01      	subs	r2, #1
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]
			p_count = perform_array[1];
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	885a      	ldrh	r2, [r3, #2]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	849a      	strh	r2, [r3, #36]	@ 0x24
		mode_flag[14] = 1;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
}
 8003fa8:	e092      	b.n	80040d0 <_ZN11PERFORMANCE17get_target_statusEm+0x161a>
	}else if(perform_array[0] == 15){//余韻 95~105
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	2b0f      	cmp	r3, #15
 8003fb2:	d144      	bne.n	800403e <_ZN11PERFORMANCE17get_target_statusEm+0x1588>
		shdn_flag = 0;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		mode_flag[15] = 1;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
		display_array[1] = 0;//x
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	2200      	movs	r2, #0
 8003fcc:	701a      	strb	r2, [r3, #0]
		display_array[2] = 0;//y
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	3302      	adds	r3, #2
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	701a      	strb	r2, [r3, #0]
		display_array[3] = 0;//r
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	3303      	adds	r3, #3
 8003fde:	2200      	movs	r2, #0
 8003fe0:	701a      	strb	r2, [r3, #0]
		display_array[4] = 0;//circle_H
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	2200      	movs	r2, #0
 8003fea:	701a      	strb	r2, [r3, #0]
		display_array[5] = 0;//circle_S
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	3305      	adds	r3, #5
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	701a      	strb	r2, [r3, #0]
		display_array[6] = 0;//circle_V
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	3306      	adds	r3, #6
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	701a      	strb	r2, [r3, #0]
		display_array[7] = 0;//background_H
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	3307      	adds	r3, #7
 8004006:	2200      	movs	r2, #0
 8004008:	701a      	strb	r2, [r3, #0]
		display_array[8] = 0;//background_S
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	3308      	adds	r3, #8
 8004010:	2200      	movs	r2, #0
 8004012:	701a      	strb	r2, [r3, #0]
		display_array[9] = 0;//background_V
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	3309      	adds	r3, #9
 800401a:	2200      	movs	r2, #0
 800401c:	701a      	strb	r2, [r3, #0]
		display_array[10] = 0;//frame_H
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	330a      	adds	r3, #10
 8004024:	2200      	movs	r2, #0
 8004026:	701a      	strb	r2, [r3, #0]
		display_array[11] = 0;//frame_S
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	330b      	adds	r3, #11
 800402e:	2200      	movs	r2, #0
 8004030:	701a      	strb	r2, [r3, #0]
		display_array[12] = 0;//frame_V
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	330c      	adds	r3, #12
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
}
 800403c:	e048      	b.n	80040d0 <_ZN11PERFORMANCE17get_target_statusEm+0x161a>
	}else if(perform_array[0] == 16){//おわり 106~
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	2b10      	cmp	r3, #16
 8004046:	d143      	bne.n	80040d0 <_ZN11PERFORMANCE17get_target_statusEm+0x161a>
		shdn_flag = 0;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		mode_flag[16] = 1;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		display_array[1] = 0;//x
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	3301      	adds	r3, #1
 800405e:	2200      	movs	r2, #0
 8004060:	701a      	strb	r2, [r3, #0]
		display_array[2] = 0;//y
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	3302      	adds	r3, #2
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]
		display_array[3] = 0;//r
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	3303      	adds	r3, #3
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]
		display_array[4] = 0;//circle_H
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	3304      	adds	r3, #4
 800407c:	2200      	movs	r2, #0
 800407e:	701a      	strb	r2, [r3, #0]
		display_array[5] = 0;//circle_S
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	3305      	adds	r3, #5
 8004086:	2200      	movs	r2, #0
 8004088:	701a      	strb	r2, [r3, #0]
		display_array[6] = 0;//circle_V
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	3306      	adds	r3, #6
 8004090:	2200      	movs	r2, #0
 8004092:	701a      	strb	r2, [r3, #0]
		display_array[7] = 0;//background_H
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	3307      	adds	r3, #7
 800409a:	2200      	movs	r2, #0
 800409c:	701a      	strb	r2, [r3, #0]
		display_array[8] = 0;//background_S
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	3308      	adds	r3, #8
 80040a4:	2200      	movs	r2, #0
 80040a6:	701a      	strb	r2, [r3, #0]
		display_array[9] = 0;//background_V
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	3309      	adds	r3, #9
 80040ae:	2200      	movs	r2, #0
 80040b0:	701a      	strb	r2, [r3, #0]
		display_array[10] = 0;//frame_H
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	330a      	adds	r3, #10
 80040b8:	2200      	movs	r2, #0
 80040ba:	701a      	strb	r2, [r3, #0]
		display_array[11] = 0;//frame_S
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	330b      	adds	r3, #11
 80040c2:	2200      	movs	r2, #0
 80040c4:	701a      	strb	r2, [r3, #0]
		display_array[12] = 0;//frame_V
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	330c      	adds	r3, #12
 80040cc:	2200      	movs	r2, #0
 80040ce:	701a      	strb	r2, [r3, #0]
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040e2:	2300      	movs	r3, #0
 80040e4:	607b      	str	r3, [r7, #4]
 80040e6:	4b10      	ldr	r3, [pc, #64]	@ (8004128 <HAL_MspInit+0x4c>)
 80040e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ea:	4a0f      	ldr	r2, [pc, #60]	@ (8004128 <HAL_MspInit+0x4c>)
 80040ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80040f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004128 <HAL_MspInit+0x4c>)
 80040f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040fa:	607b      	str	r3, [r7, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040fe:	2300      	movs	r3, #0
 8004100:	603b      	str	r3, [r7, #0]
 8004102:	4b09      	ldr	r3, [pc, #36]	@ (8004128 <HAL_MspInit+0x4c>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	4a08      	ldr	r2, [pc, #32]	@ (8004128 <HAL_MspInit+0x4c>)
 8004108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800410c:	6413      	str	r3, [r2, #64]	@ 0x40
 800410e:	4b06      	ldr	r3, [pc, #24]	@ (8004128 <HAL_MspInit+0x4c>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40023800 	.word	0x40023800

0800412c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08a      	sub	sp, #40	@ 0x28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004134:	f107 0314 	add.w	r3, r7, #20
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	609a      	str	r2, [r3, #8]
 8004140:	60da      	str	r2, [r3, #12]
 8004142:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a19      	ldr	r2, [pc, #100]	@ (80041b0 <HAL_I2C_MspInit+0x84>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d12c      	bne.n	80041a8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800414e:	2300      	movs	r3, #0
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	4b18      	ldr	r3, [pc, #96]	@ (80041b4 <HAL_I2C_MspInit+0x88>)
 8004154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004156:	4a17      	ldr	r2, [pc, #92]	@ (80041b4 <HAL_I2C_MspInit+0x88>)
 8004158:	f043 0302 	orr.w	r3, r3, #2
 800415c:	6313      	str	r3, [r2, #48]	@ 0x30
 800415e:	4b15      	ldr	r3, [pc, #84]	@ (80041b4 <HAL_I2C_MspInit+0x88>)
 8004160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800416a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800416e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004170:	2312      	movs	r3, #18
 8004172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004174:	2300      	movs	r3, #0
 8004176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004178:	2303      	movs	r3, #3
 800417a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800417c:	2304      	movs	r3, #4
 800417e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004180:	f107 0314 	add.w	r3, r7, #20
 8004184:	4619      	mov	r1, r3
 8004186:	480c      	ldr	r0, [pc, #48]	@ (80041b8 <HAL_I2C_MspInit+0x8c>)
 8004188:	f000 ffc2 	bl	8005110 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800418c:	2300      	movs	r3, #0
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	4b08      	ldr	r3, [pc, #32]	@ (80041b4 <HAL_I2C_MspInit+0x88>)
 8004192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004194:	4a07      	ldr	r2, [pc, #28]	@ (80041b4 <HAL_I2C_MspInit+0x88>)
 8004196:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800419a:	6413      	str	r3, [r2, #64]	@ 0x40
 800419c:	4b05      	ldr	r3, [pc, #20]	@ (80041b4 <HAL_I2C_MspInit+0x88>)
 800419e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80041a8:	bf00      	nop
 80041aa:	3728      	adds	r7, #40	@ 0x28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40005400 	.word	0x40005400
 80041b4:	40023800 	.word	0x40023800
 80041b8:	40020400 	.word	0x40020400

080041bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041cc:	d116      	bne.n	80041fc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	4b16      	ldr	r3, [pc, #88]	@ (800422c <HAL_TIM_Base_MspInit+0x70>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d6:	4a15      	ldr	r2, [pc, #84]	@ (800422c <HAL_TIM_Base_MspInit+0x70>)
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80041de:	4b13      	ldr	r3, [pc, #76]	@ (800422c <HAL_TIM_Base_MspInit+0x70>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80041ea:	2200      	movs	r2, #0
 80041ec:	2100      	movs	r1, #0
 80041ee:	201c      	movs	r0, #28
 80041f0:	f000 fbe7 	bl	80049c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80041f4:	201c      	movs	r0, #28
 80041f6:	f000 fc00 	bl	80049fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80041fa:	e012      	b.n	8004222 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a0b      	ldr	r2, [pc, #44]	@ (8004230 <HAL_TIM_Base_MspInit+0x74>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d10d      	bne.n	8004222 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004206:	2300      	movs	r3, #0
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	4b08      	ldr	r3, [pc, #32]	@ (800422c <HAL_TIM_Base_MspInit+0x70>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420e:	4a07      	ldr	r2, [pc, #28]	@ (800422c <HAL_TIM_Base_MspInit+0x70>)
 8004210:	f043 0304 	orr.w	r3, r3, #4
 8004214:	6413      	str	r3, [r2, #64]	@ 0x40
 8004216:	4b05      	ldr	r3, [pc, #20]	@ (800422c <HAL_TIM_Base_MspInit+0x70>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	60bb      	str	r3, [r7, #8]
 8004220:	68bb      	ldr	r3, [r7, #8]
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40023800 	.word	0x40023800
 8004230:	40000800 	.word	0x40000800

08004234 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800423c:	f107 030c 	add.w	r3, r7, #12
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	605a      	str	r2, [r3, #4]
 8004246:	609a      	str	r2, [r3, #8]
 8004248:	60da      	str	r2, [r3, #12]
 800424a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a12      	ldr	r2, [pc, #72]	@ (800429c <HAL_TIM_MspPostInit+0x68>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d11d      	bne.n	8004292 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004256:	2300      	movs	r3, #0
 8004258:	60bb      	str	r3, [r7, #8]
 800425a:	4b11      	ldr	r3, [pc, #68]	@ (80042a0 <HAL_TIM_MspPostInit+0x6c>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425e:	4a10      	ldr	r2, [pc, #64]	@ (80042a0 <HAL_TIM_MspPostInit+0x6c>)
 8004260:	f043 0302 	orr.w	r3, r3, #2
 8004264:	6313      	str	r3, [r2, #48]	@ 0x30
 8004266:	4b0e      	ldr	r3, [pc, #56]	@ (80042a0 <HAL_TIM_MspPostInit+0x6c>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	60bb      	str	r3, [r7, #8]
 8004270:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004272:	2340      	movs	r3, #64	@ 0x40
 8004274:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004276:	2302      	movs	r3, #2
 8004278:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800427e:	2300      	movs	r3, #0
 8004280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004282:	2302      	movs	r3, #2
 8004284:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004286:	f107 030c 	add.w	r3, r7, #12
 800428a:	4619      	mov	r1, r3
 800428c:	4805      	ldr	r0, [pc, #20]	@ (80042a4 <HAL_TIM_MspPostInit+0x70>)
 800428e:	f000 ff3f 	bl	8005110 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004292:	bf00      	nop
 8004294:	3720      	adds	r7, #32
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40000800 	.word	0x40000800
 80042a0:	40023800 	.word	0x40023800
 80042a4:	40020400 	.word	0x40020400

080042a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b092      	sub	sp, #72	@ 0x48
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	605a      	str	r2, [r3, #4]
 80042ba:	609a      	str	r2, [r3, #8]
 80042bc:	60da      	str	r2, [r3, #12]
 80042be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a97      	ldr	r2, [pc, #604]	@ (8004524 <HAL_UART_MspInit+0x27c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d17a      	bne.n	80043c0 <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80042ca:	2300      	movs	r3, #0
 80042cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80042ce:	4b96      	ldr	r3, [pc, #600]	@ (8004528 <HAL_UART_MspInit+0x280>)
 80042d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d2:	4a95      	ldr	r2, [pc, #596]	@ (8004528 <HAL_UART_MspInit+0x280>)
 80042d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80042da:	4b93      	ldr	r3, [pc, #588]	@ (8004528 <HAL_UART_MspInit+0x280>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80042e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042e6:	2300      	movs	r3, #0
 80042e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042ea:	4b8f      	ldr	r3, [pc, #572]	@ (8004528 <HAL_UART_MspInit+0x280>)
 80042ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ee:	4a8e      	ldr	r2, [pc, #568]	@ (8004528 <HAL_UART_MspInit+0x280>)
 80042f0:	f043 0304 	orr.w	r3, r3, #4
 80042f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80042f6:	4b8c      	ldr	r3, [pc, #560]	@ (8004528 <HAL_UART_MspInit+0x280>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fa:	f003 0304 	and.w	r3, r3, #4
 80042fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004302:	2300      	movs	r3, #0
 8004304:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004306:	4b88      	ldr	r3, [pc, #544]	@ (8004528 <HAL_UART_MspInit+0x280>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430a:	4a87      	ldr	r2, [pc, #540]	@ (8004528 <HAL_UART_MspInit+0x280>)
 800430c:	f043 0308 	orr.w	r3, r3, #8
 8004310:	6313      	str	r3, [r2, #48]	@ 0x30
 8004312:	4b85      	ldr	r3, [pc, #532]	@ (8004528 <HAL_UART_MspInit+0x280>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800431c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800431e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004322:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004324:	2302      	movs	r3, #2
 8004326:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004328:	2300      	movs	r3, #0
 800432a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800432c:	2303      	movs	r3, #3
 800432e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004330:	2308      	movs	r3, #8
 8004332:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004334:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004338:	4619      	mov	r1, r3
 800433a:	487c      	ldr	r0, [pc, #496]	@ (800452c <HAL_UART_MspInit+0x284>)
 800433c:	f000 fee8 	bl	8005110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004340:	2304      	movs	r3, #4
 8004342:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004344:	2302      	movs	r3, #2
 8004346:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004348:	2300      	movs	r3, #0
 800434a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800434c:	2303      	movs	r3, #3
 800434e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004350:	2308      	movs	r3, #8
 8004352:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004354:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004358:	4619      	mov	r1, r3
 800435a:	4875      	ldr	r0, [pc, #468]	@ (8004530 <HAL_UART_MspInit+0x288>)
 800435c:	f000 fed8 	bl	8005110 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8004360:	4b74      	ldr	r3, [pc, #464]	@ (8004534 <HAL_UART_MspInit+0x28c>)
 8004362:	4a75      	ldr	r2, [pc, #468]	@ (8004538 <HAL_UART_MspInit+0x290>)
 8004364:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8004366:	4b73      	ldr	r3, [pc, #460]	@ (8004534 <HAL_UART_MspInit+0x28c>)
 8004368:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800436c:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800436e:	4b71      	ldr	r3, [pc, #452]	@ (8004534 <HAL_UART_MspInit+0x28c>)
 8004370:	2200      	movs	r2, #0
 8004372:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004374:	4b6f      	ldr	r3, [pc, #444]	@ (8004534 <HAL_UART_MspInit+0x28c>)
 8004376:	2200      	movs	r2, #0
 8004378:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800437a:	4b6e      	ldr	r3, [pc, #440]	@ (8004534 <HAL_UART_MspInit+0x28c>)
 800437c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004380:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004382:	4b6c      	ldr	r3, [pc, #432]	@ (8004534 <HAL_UART_MspInit+0x28c>)
 8004384:	2200      	movs	r2, #0
 8004386:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004388:	4b6a      	ldr	r3, [pc, #424]	@ (8004534 <HAL_UART_MspInit+0x28c>)
 800438a:	2200      	movs	r2, #0
 800438c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800438e:	4b69      	ldr	r3, [pc, #420]	@ (8004534 <HAL_UART_MspInit+0x28c>)
 8004390:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004394:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004396:	4b67      	ldr	r3, [pc, #412]	@ (8004534 <HAL_UART_MspInit+0x28c>)
 8004398:	2200      	movs	r2, #0
 800439a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800439c:	4b65      	ldr	r3, [pc, #404]	@ (8004534 <HAL_UART_MspInit+0x28c>)
 800439e:	2200      	movs	r2, #0
 80043a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80043a2:	4864      	ldr	r0, [pc, #400]	@ (8004534 <HAL_UART_MspInit+0x28c>)
 80043a4:	f000 fb44 	bl	8004a30 <HAL_DMA_Init>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80043ae:	f7fe fad0 	bl	8002952 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a5f      	ldr	r2, [pc, #380]	@ (8004534 <HAL_UART_MspInit+0x28c>)
 80043b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80043b8:	4a5e      	ldr	r2, [pc, #376]	@ (8004534 <HAL_UART_MspInit+0x28c>)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80043be:	e0fa      	b.n	80045b6 <HAL_UART_MspInit+0x30e>
  else if(huart->Instance==USART2)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a5d      	ldr	r2, [pc, #372]	@ (800453c <HAL_UART_MspInit+0x294>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d15b      	bne.n	8004482 <HAL_UART_MspInit+0x1da>
    __HAL_RCC_USART2_CLK_ENABLE();
 80043ca:	2300      	movs	r3, #0
 80043cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ce:	4b56      	ldr	r3, [pc, #344]	@ (8004528 <HAL_UART_MspInit+0x280>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d2:	4a55      	ldr	r2, [pc, #340]	@ (8004528 <HAL_UART_MspInit+0x280>)
 80043d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80043da:	4b53      	ldr	r3, [pc, #332]	@ (8004528 <HAL_UART_MspInit+0x280>)
 80043dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80043e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043e6:	2300      	movs	r3, #0
 80043e8:	623b      	str	r3, [r7, #32]
 80043ea:	4b4f      	ldr	r3, [pc, #316]	@ (8004528 <HAL_UART_MspInit+0x280>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ee:	4a4e      	ldr	r2, [pc, #312]	@ (8004528 <HAL_UART_MspInit+0x280>)
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80043f6:	4b4c      	ldr	r3, [pc, #304]	@ (8004528 <HAL_UART_MspInit+0x280>)
 80043f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	623b      	str	r3, [r7, #32]
 8004400:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004402:	230c      	movs	r3, #12
 8004404:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004406:	2302      	movs	r3, #2
 8004408:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440a:	2300      	movs	r3, #0
 800440c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800440e:	2303      	movs	r3, #3
 8004410:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004412:	2307      	movs	r3, #7
 8004414:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004416:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800441a:	4619      	mov	r1, r3
 800441c:	4848      	ldr	r0, [pc, #288]	@ (8004540 <HAL_UART_MspInit+0x298>)
 800441e:	f000 fe77 	bl	8005110 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004422:	4b48      	ldr	r3, [pc, #288]	@ (8004544 <HAL_UART_MspInit+0x29c>)
 8004424:	4a48      	ldr	r2, [pc, #288]	@ (8004548 <HAL_UART_MspInit+0x2a0>)
 8004426:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004428:	4b46      	ldr	r3, [pc, #280]	@ (8004544 <HAL_UART_MspInit+0x29c>)
 800442a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800442e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004430:	4b44      	ldr	r3, [pc, #272]	@ (8004544 <HAL_UART_MspInit+0x29c>)
 8004432:	2200      	movs	r2, #0
 8004434:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004436:	4b43      	ldr	r3, [pc, #268]	@ (8004544 <HAL_UART_MspInit+0x29c>)
 8004438:	2200      	movs	r2, #0
 800443a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800443c:	4b41      	ldr	r3, [pc, #260]	@ (8004544 <HAL_UART_MspInit+0x29c>)
 800443e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004442:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004444:	4b3f      	ldr	r3, [pc, #252]	@ (8004544 <HAL_UART_MspInit+0x29c>)
 8004446:	2200      	movs	r2, #0
 8004448:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800444a:	4b3e      	ldr	r3, [pc, #248]	@ (8004544 <HAL_UART_MspInit+0x29c>)
 800444c:	2200      	movs	r2, #0
 800444e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004450:	4b3c      	ldr	r3, [pc, #240]	@ (8004544 <HAL_UART_MspInit+0x29c>)
 8004452:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004456:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004458:	4b3a      	ldr	r3, [pc, #232]	@ (8004544 <HAL_UART_MspInit+0x29c>)
 800445a:	2200      	movs	r2, #0
 800445c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800445e:	4b39      	ldr	r3, [pc, #228]	@ (8004544 <HAL_UART_MspInit+0x29c>)
 8004460:	2200      	movs	r2, #0
 8004462:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004464:	4837      	ldr	r0, [pc, #220]	@ (8004544 <HAL_UART_MspInit+0x29c>)
 8004466:	f000 fae3 	bl	8004a30 <HAL_DMA_Init>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <HAL_UART_MspInit+0x1cc>
      Error_Handler();
 8004470:	f7fe fa6f 	bl	8002952 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a33      	ldr	r2, [pc, #204]	@ (8004544 <HAL_UART_MspInit+0x29c>)
 8004478:	63da      	str	r2, [r3, #60]	@ 0x3c
 800447a:	4a32      	ldr	r2, [pc, #200]	@ (8004544 <HAL_UART_MspInit+0x29c>)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004480:	e099      	b.n	80045b6 <HAL_UART_MspInit+0x30e>
  else if(huart->Instance==USART3)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a31      	ldr	r2, [pc, #196]	@ (800454c <HAL_UART_MspInit+0x2a4>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d163      	bne.n	8004554 <HAL_UART_MspInit+0x2ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 800448c:	2300      	movs	r3, #0
 800448e:	61fb      	str	r3, [r7, #28]
 8004490:	4b25      	ldr	r3, [pc, #148]	@ (8004528 <HAL_UART_MspInit+0x280>)
 8004492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004494:	4a24      	ldr	r2, [pc, #144]	@ (8004528 <HAL_UART_MspInit+0x280>)
 8004496:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800449a:	6413      	str	r3, [r2, #64]	@ 0x40
 800449c:	4b22      	ldr	r3, [pc, #136]	@ (8004528 <HAL_UART_MspInit+0x280>)
 800449e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044a4:	61fb      	str	r3, [r7, #28]
 80044a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044a8:	2300      	movs	r3, #0
 80044aa:	61bb      	str	r3, [r7, #24]
 80044ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004528 <HAL_UART_MspInit+0x280>)
 80044ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004528 <HAL_UART_MspInit+0x280>)
 80044b2:	f043 0304 	orr.w	r3, r3, #4
 80044b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80044b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004528 <HAL_UART_MspInit+0x280>)
 80044ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	61bb      	str	r3, [r7, #24]
 80044c2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	4b17      	ldr	r3, [pc, #92]	@ (8004528 <HAL_UART_MspInit+0x280>)
 80044ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044cc:	4a16      	ldr	r2, [pc, #88]	@ (8004528 <HAL_UART_MspInit+0x280>)
 80044ce:	f043 0302 	orr.w	r3, r3, #2
 80044d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80044d4:	4b14      	ldr	r3, [pc, #80]	@ (8004528 <HAL_UART_MspInit+0x280>)
 80044d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80044e0:	2320      	movs	r3, #32
 80044e2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e4:	2302      	movs	r3, #2
 80044e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ec:	2303      	movs	r3, #3
 80044ee:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80044f0:	2307      	movs	r3, #7
 80044f2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80044f8:	4619      	mov	r1, r3
 80044fa:	480c      	ldr	r0, [pc, #48]	@ (800452c <HAL_UART_MspInit+0x284>)
 80044fc:	f000 fe08 	bl	8005110 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004500:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004504:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004506:	2302      	movs	r3, #2
 8004508:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450a:	2300      	movs	r3, #0
 800450c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800450e:	2303      	movs	r3, #3
 8004510:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004512:	2307      	movs	r3, #7
 8004514:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004516:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800451a:	4619      	mov	r1, r3
 800451c:	480c      	ldr	r0, [pc, #48]	@ (8004550 <HAL_UART_MspInit+0x2a8>)
 800451e:	f000 fdf7 	bl	8005110 <HAL_GPIO_Init>
}
 8004522:	e048      	b.n	80045b6 <HAL_UART_MspInit+0x30e>
 8004524:	40005000 	.word	0x40005000
 8004528:	40023800 	.word	0x40023800
 800452c:	40020800 	.word	0x40020800
 8004530:	40020c00 	.word	0x40020c00
 8004534:	200002b8 	.word	0x200002b8
 8004538:	40026010 	.word	0x40026010
 800453c:	40004400 	.word	0x40004400
 8004540:	40020000 	.word	0x40020000
 8004544:	20000318 	.word	0x20000318
 8004548:	40026088 	.word	0x40026088
 800454c:	40004800 	.word	0x40004800
 8004550:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a19      	ldr	r2, [pc, #100]	@ (80045c0 <HAL_UART_MspInit+0x318>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d12b      	bne.n	80045b6 <HAL_UART_MspInit+0x30e>
    __HAL_RCC_USART6_CLK_ENABLE();
 800455e:	2300      	movs	r3, #0
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	4b18      	ldr	r3, [pc, #96]	@ (80045c4 <HAL_UART_MspInit+0x31c>)
 8004564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004566:	4a17      	ldr	r2, [pc, #92]	@ (80045c4 <HAL_UART_MspInit+0x31c>)
 8004568:	f043 0320 	orr.w	r3, r3, #32
 800456c:	6453      	str	r3, [r2, #68]	@ 0x44
 800456e:	4b15      	ldr	r3, [pc, #84]	@ (80045c4 <HAL_UART_MspInit+0x31c>)
 8004570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	613b      	str	r3, [r7, #16]
 8004578:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	4b11      	ldr	r3, [pc, #68]	@ (80045c4 <HAL_UART_MspInit+0x31c>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004582:	4a10      	ldr	r2, [pc, #64]	@ (80045c4 <HAL_UART_MspInit+0x31c>)
 8004584:	f043 0304 	orr.w	r3, r3, #4
 8004588:	6313      	str	r3, [r2, #48]	@ 0x30
 800458a:	4b0e      	ldr	r3, [pc, #56]	@ (80045c4 <HAL_UART_MspInit+0x31c>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004596:	23c0      	movs	r3, #192	@ 0xc0
 8004598:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459a:	2302      	movs	r3, #2
 800459c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a2:	2303      	movs	r3, #3
 80045a4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80045a6:	2308      	movs	r3, #8
 80045a8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045aa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80045ae:	4619      	mov	r1, r3
 80045b0:	4805      	ldr	r0, [pc, #20]	@ (80045c8 <HAL_UART_MspInit+0x320>)
 80045b2:	f000 fdad 	bl	8005110 <HAL_GPIO_Init>
}
 80045b6:	bf00      	nop
 80045b8:	3748      	adds	r7, #72	@ 0x48
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40011400 	.word	0x40011400
 80045c4:	40023800 	.word	0x40023800
 80045c8:	40020800 	.word	0x40020800

080045cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80045d0:	bf00      	nop
 80045d2:	e7fd      	b.n	80045d0 <NMI_Handler+0x4>

080045d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045d8:	bf00      	nop
 80045da:	e7fd      	b.n	80045d8 <HardFault_Handler+0x4>

080045dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045e0:	bf00      	nop
 80045e2:	e7fd      	b.n	80045e0 <MemManage_Handler+0x4>

080045e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045e8:	bf00      	nop
 80045ea:	e7fd      	b.n	80045e8 <BusFault_Handler+0x4>

080045ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045f0:	bf00      	nop
 80045f2:	e7fd      	b.n	80045f0 <UsageFault_Handler+0x4>

080045f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045f8:	bf00      	nop
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004602:	b480      	push	{r7}
 8004604:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004606:	bf00      	nop
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004614:	bf00      	nop
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004622:	f000 f8af 	bl	8004784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004626:	bf00      	nop
 8004628:	bd80      	pop	{r7, pc}
	...

0800462c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004630:	4802      	ldr	r0, [pc, #8]	@ (800463c <DMA1_Stream0_IRQHandler+0x10>)
 8004632:	f000 fb03 	bl	8004c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004636:	bf00      	nop
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	200002b8 	.word	0x200002b8

08004640 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004644:	4802      	ldr	r0, [pc, #8]	@ (8004650 <DMA1_Stream5_IRQHandler+0x10>)
 8004646:	f000 faf9 	bl	8004c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800464a:	bf00      	nop
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	20000318 	.word	0x20000318

08004654 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004658:	4802      	ldr	r0, [pc, #8]	@ (8004664 <TIM2_IRQHandler+0x10>)
 800465a:	f002 feac 	bl	80073b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800465e:	bf00      	nop
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20000108 	.word	0x20000108

08004668 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800466c:	4b06      	ldr	r3, [pc, #24]	@ (8004688 <SystemInit+0x20>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004672:	4a05      	ldr	r2, [pc, #20]	@ (8004688 <SystemInit+0x20>)
 8004674:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004678:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800467c:	bf00      	nop
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	e000ed00 	.word	0xe000ed00

0800468c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800468c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80046c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004690:	f7ff ffea 	bl	8004668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004694:	480c      	ldr	r0, [pc, #48]	@ (80046c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004696:	490d      	ldr	r1, [pc, #52]	@ (80046cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004698:	4a0d      	ldr	r2, [pc, #52]	@ (80046d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800469a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800469c:	e002      	b.n	80046a4 <LoopCopyDataInit>

0800469e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800469e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046a2:	3304      	adds	r3, #4

080046a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046a8:	d3f9      	bcc.n	800469e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046aa:	4a0a      	ldr	r2, [pc, #40]	@ (80046d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80046ac:	4c0a      	ldr	r4, [pc, #40]	@ (80046d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80046ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046b0:	e001      	b.n	80046b6 <LoopFillZerobss>

080046b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046b4:	3204      	adds	r2, #4

080046b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046b8:	d3fb      	bcc.n	80046b2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80046ba:	f006 fccf 	bl	800b05c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046be:	f7fc fd0f 	bl	80010e0 <main>
  bx  lr    
 80046c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80046c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80046c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046cc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80046d0:	0800b370 	.word	0x0800b370
  ldr r2, =_sbss
 80046d4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80046d8:	200005a8 	.word	0x200005a8

080046dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046dc:	e7fe      	b.n	80046dc <ADC_IRQHandler>
	...

080046e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004720 <HAL_Init+0x40>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a0d      	ldr	r2, [pc, #52]	@ (8004720 <HAL_Init+0x40>)
 80046ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80046f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004720 <HAL_Init+0x40>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a0a      	ldr	r2, [pc, #40]	@ (8004720 <HAL_Init+0x40>)
 80046f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046fc:	4b08      	ldr	r3, [pc, #32]	@ (8004720 <HAL_Init+0x40>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a07      	ldr	r2, [pc, #28]	@ (8004720 <HAL_Init+0x40>)
 8004702:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004708:	2003      	movs	r0, #3
 800470a:	f000 f94f 	bl	80049ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800470e:	200f      	movs	r0, #15
 8004710:	f000 f808 	bl	8004724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004714:	f7ff fce2 	bl	80040dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40023c00 	.word	0x40023c00

08004724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800472c:	4b12      	ldr	r3, [pc, #72]	@ (8004778 <HAL_InitTick+0x54>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4b12      	ldr	r3, [pc, #72]	@ (800477c <HAL_InitTick+0x58>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	4619      	mov	r1, r3
 8004736:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800473a:	fbb3 f3f1 	udiv	r3, r3, r1
 800473e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004742:	4618      	mov	r0, r3
 8004744:	f000 f967 	bl	8004a16 <HAL_SYSTICK_Config>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e00e      	b.n	8004770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b0f      	cmp	r3, #15
 8004756:	d80a      	bhi.n	800476e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004758:	2200      	movs	r2, #0
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	f04f 30ff 	mov.w	r0, #4294967295
 8004760:	f000 f92f 	bl	80049c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004764:	4a06      	ldr	r2, [pc, #24]	@ (8004780 <HAL_InitTick+0x5c>)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
 800476c:	e000      	b.n	8004770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
}
 8004770:	4618      	mov	r0, r3
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	20000028 	.word	0x20000028
 800477c:	20000030 	.word	0x20000030
 8004780:	2000002c 	.word	0x2000002c

08004784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004788:	4b06      	ldr	r3, [pc, #24]	@ (80047a4 <HAL_IncTick+0x20>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	4b06      	ldr	r3, [pc, #24]	@ (80047a8 <HAL_IncTick+0x24>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4413      	add	r3, r2
 8004794:	4a04      	ldr	r2, [pc, #16]	@ (80047a8 <HAL_IncTick+0x24>)
 8004796:	6013      	str	r3, [r2, #0]
}
 8004798:	bf00      	nop
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	20000030 	.word	0x20000030
 80047a8:	2000046c 	.word	0x2000046c

080047ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  return uwTick;
 80047b0:	4b03      	ldr	r3, [pc, #12]	@ (80047c0 <HAL_GetTick+0x14>)
 80047b2:	681b      	ldr	r3, [r3, #0]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	2000046c 	.word	0x2000046c

080047c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047cc:	f7ff ffee 	bl	80047ac <HAL_GetTick>
 80047d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047dc:	d005      	beq.n	80047ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047de:	4b0a      	ldr	r3, [pc, #40]	@ (8004808 <HAL_Delay+0x44>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	461a      	mov	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4413      	add	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80047ea:	bf00      	nop
 80047ec:	f7ff ffde 	bl	80047ac <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d8f7      	bhi.n	80047ec <HAL_Delay+0x28>
  {
  }
}
 80047fc:	bf00      	nop
 80047fe:	bf00      	nop
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20000030 	.word	0x20000030

0800480c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800481c:	4b0c      	ldr	r3, [pc, #48]	@ (8004850 <__NVIC_SetPriorityGrouping+0x44>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004828:	4013      	ands	r3, r2
 800482a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004834:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800483c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800483e:	4a04      	ldr	r2, [pc, #16]	@ (8004850 <__NVIC_SetPriorityGrouping+0x44>)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	60d3      	str	r3, [r2, #12]
}
 8004844:	bf00      	nop
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	e000ed00 	.word	0xe000ed00

08004854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004858:	4b04      	ldr	r3, [pc, #16]	@ (800486c <__NVIC_GetPriorityGrouping+0x18>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	0a1b      	lsrs	r3, r3, #8
 800485e:	f003 0307 	and.w	r3, r3, #7
}
 8004862:	4618      	mov	r0, r3
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	e000ed00 	.word	0xe000ed00

08004870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	4603      	mov	r3, r0
 8004878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800487a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487e:	2b00      	cmp	r3, #0
 8004880:	db0b      	blt.n	800489a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	f003 021f 	and.w	r2, r3, #31
 8004888:	4907      	ldr	r1, [pc, #28]	@ (80048a8 <__NVIC_EnableIRQ+0x38>)
 800488a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	2001      	movs	r0, #1
 8004892:	fa00 f202 	lsl.w	r2, r0, r2
 8004896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	e000e100 	.word	0xe000e100

080048ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	4603      	mov	r3, r0
 80048b4:	6039      	str	r1, [r7, #0]
 80048b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	db0a      	blt.n	80048d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	490c      	ldr	r1, [pc, #48]	@ (80048f8 <__NVIC_SetPriority+0x4c>)
 80048c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ca:	0112      	lsls	r2, r2, #4
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	440b      	add	r3, r1
 80048d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048d4:	e00a      	b.n	80048ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	4908      	ldr	r1, [pc, #32]	@ (80048fc <__NVIC_SetPriority+0x50>)
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	3b04      	subs	r3, #4
 80048e4:	0112      	lsls	r2, r2, #4
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	440b      	add	r3, r1
 80048ea:	761a      	strb	r2, [r3, #24]
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	e000e100 	.word	0xe000e100
 80048fc:	e000ed00 	.word	0xe000ed00

08004900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004900:	b480      	push	{r7}
 8004902:	b089      	sub	sp, #36	@ 0x24
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f1c3 0307 	rsb	r3, r3, #7
 800491a:	2b04      	cmp	r3, #4
 800491c:	bf28      	it	cs
 800491e:	2304      	movcs	r3, #4
 8004920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	3304      	adds	r3, #4
 8004926:	2b06      	cmp	r3, #6
 8004928:	d902      	bls.n	8004930 <NVIC_EncodePriority+0x30>
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	3b03      	subs	r3, #3
 800492e:	e000      	b.n	8004932 <NVIC_EncodePriority+0x32>
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004934:	f04f 32ff 	mov.w	r2, #4294967295
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	43da      	mvns	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	401a      	ands	r2, r3
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004948:	f04f 31ff 	mov.w	r1, #4294967295
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	fa01 f303 	lsl.w	r3, r1, r3
 8004952:	43d9      	mvns	r1, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004958:	4313      	orrs	r3, r2
         );
}
 800495a:	4618      	mov	r0, r3
 800495c:	3724      	adds	r7, #36	@ 0x24
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
	...

08004968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3b01      	subs	r3, #1
 8004974:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004978:	d301      	bcc.n	800497e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800497a:	2301      	movs	r3, #1
 800497c:	e00f      	b.n	800499e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800497e:	4a0a      	ldr	r2, [pc, #40]	@ (80049a8 <SysTick_Config+0x40>)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3b01      	subs	r3, #1
 8004984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004986:	210f      	movs	r1, #15
 8004988:	f04f 30ff 	mov.w	r0, #4294967295
 800498c:	f7ff ff8e 	bl	80048ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004990:	4b05      	ldr	r3, [pc, #20]	@ (80049a8 <SysTick_Config+0x40>)
 8004992:	2200      	movs	r2, #0
 8004994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004996:	4b04      	ldr	r3, [pc, #16]	@ (80049a8 <SysTick_Config+0x40>)
 8004998:	2207      	movs	r2, #7
 800499a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	e000e010 	.word	0xe000e010

080049ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7ff ff29 	bl	800480c <__NVIC_SetPriorityGrouping>
}
 80049ba:	bf00      	nop
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b086      	sub	sp, #24
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	4603      	mov	r3, r0
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	607a      	str	r2, [r7, #4]
 80049ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049d4:	f7ff ff3e 	bl	8004854 <__NVIC_GetPriorityGrouping>
 80049d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	68b9      	ldr	r1, [r7, #8]
 80049de:	6978      	ldr	r0, [r7, #20]
 80049e0:	f7ff ff8e 	bl	8004900 <NVIC_EncodePriority>
 80049e4:	4602      	mov	r2, r0
 80049e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ea:	4611      	mov	r1, r2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff ff5d 	bl	80048ac <__NVIC_SetPriority>
}
 80049f2:	bf00      	nop
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	4603      	mov	r3, r0
 8004a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff ff31 	bl	8004870 <__NVIC_EnableIRQ>
}
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b082      	sub	sp, #8
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7ff ffa2 	bl	8004968 <SysTick_Config>
 8004a24:	4603      	mov	r3, r0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a3c:	f7ff feb6 	bl	80047ac <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e099      	b.n	8004b80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0201 	bic.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a6c:	e00f      	b.n	8004a8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a6e:	f7ff fe9d 	bl	80047ac <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b05      	cmp	r3, #5
 8004a7a:	d908      	bls.n	8004a8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2203      	movs	r2, #3
 8004a86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e078      	b.n	8004b80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1e8      	bne.n	8004a6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	4b38      	ldr	r3, [pc, #224]	@ (8004b88 <HAL_DMA_Init+0x158>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004aba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ad2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d107      	bne.n	8004af8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af0:	4313      	orrs	r3, r2
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f023 0307 	bic.w	r3, r3, #7
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d117      	bne.n	8004b52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00e      	beq.n	8004b52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 fa6f 	bl	8005018 <DMA_CheckFifoParam>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d008      	beq.n	8004b52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2240      	movs	r2, #64	@ 0x40
 8004b44:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e016      	b.n	8004b80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fa26 	bl	8004fac <DMA_CalcBaseAndBitshift>
 8004b60:	4603      	mov	r3, r0
 8004b62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b68:	223f      	movs	r2, #63	@ 0x3f
 8004b6a:	409a      	lsls	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	f010803f 	.word	0xf010803f

08004b8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <HAL_DMA_Start_IT+0x26>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e040      	b.n	8004c34 <HAL_DMA_Start_IT+0xa8>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d12f      	bne.n	8004c26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 f9b8 	bl	8004f50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004be4:	223f      	movs	r2, #63	@ 0x3f
 8004be6:	409a      	lsls	r2, r3
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0216 	orr.w	r2, r2, #22
 8004bfa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d007      	beq.n	8004c14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0208 	orr.w	r2, r2, #8
 8004c12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0201 	orr.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	e005      	b.n	8004c32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004c2e:	2302      	movs	r3, #2
 8004c30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c48:	4b8e      	ldr	r3, [pc, #568]	@ (8004e84 <HAL_DMA_IRQHandler+0x248>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a8e      	ldr	r2, [pc, #568]	@ (8004e88 <HAL_DMA_IRQHandler+0x24c>)
 8004c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c52:	0a9b      	lsrs	r3, r3, #10
 8004c54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c66:	2208      	movs	r2, #8
 8004c68:	409a      	lsls	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d01a      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d013      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0204 	bic.w	r2, r2, #4
 8004c8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c94:	2208      	movs	r2, #8
 8004c96:	409a      	lsls	r2, r3
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca0:	f043 0201 	orr.w	r2, r3, #1
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cac:	2201      	movs	r2, #1
 8004cae:	409a      	lsls	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d012      	beq.n	8004cde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00b      	beq.n	8004cde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cca:	2201      	movs	r2, #1
 8004ccc:	409a      	lsls	r2, r3
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd6:	f043 0202 	orr.w	r2, r3, #2
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce2:	2204      	movs	r2, #4
 8004ce4:	409a      	lsls	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d012      	beq.n	8004d14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00b      	beq.n	8004d14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d00:	2204      	movs	r2, #4
 8004d02:	409a      	lsls	r2, r3
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0c:	f043 0204 	orr.w	r2, r3, #4
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d18:	2210      	movs	r2, #16
 8004d1a:	409a      	lsls	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d043      	beq.n	8004dac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d03c      	beq.n	8004dac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d36:	2210      	movs	r2, #16
 8004d38:	409a      	lsls	r2, r3
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d018      	beq.n	8004d7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d108      	bne.n	8004d6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d024      	beq.n	8004dac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	4798      	blx	r3
 8004d6a:	e01f      	b.n	8004dac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01b      	beq.n	8004dac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	4798      	blx	r3
 8004d7c:	e016      	b.n	8004dac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d107      	bne.n	8004d9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0208 	bic.w	r2, r2, #8
 8004d9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db0:	2220      	movs	r2, #32
 8004db2:	409a      	lsls	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4013      	ands	r3, r2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 808f 	beq.w	8004edc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0310 	and.w	r3, r3, #16
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 8087 	beq.w	8004edc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	409a      	lsls	r2, r3
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b05      	cmp	r3, #5
 8004de4:	d136      	bne.n	8004e54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0216 	bic.w	r2, r2, #22
 8004df4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695a      	ldr	r2, [r3, #20]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d103      	bne.n	8004e16 <HAL_DMA_IRQHandler+0x1da>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d007      	beq.n	8004e26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0208 	bic.w	r2, r2, #8
 8004e24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e2a:	223f      	movs	r2, #63	@ 0x3f
 8004e2c:	409a      	lsls	r2, r3
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d07e      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	4798      	blx	r3
        }
        return;
 8004e52:	e079      	b.n	8004f48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d01d      	beq.n	8004e9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10d      	bne.n	8004e8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d031      	beq.n	8004edc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	4798      	blx	r3
 8004e80:	e02c      	b.n	8004edc <HAL_DMA_IRQHandler+0x2a0>
 8004e82:	bf00      	nop
 8004e84:	20000028 	.word	0x20000028
 8004e88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d023      	beq.n	8004edc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	4798      	blx	r3
 8004e9c:	e01e      	b.n	8004edc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10f      	bne.n	8004ecc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0210 	bic.w	r2, r2, #16
 8004eba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d032      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d022      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2205      	movs	r2, #5
 8004ef4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0201 	bic.w	r2, r2, #1
 8004f06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	60bb      	str	r3, [r7, #8]
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d307      	bcc.n	8004f24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1f2      	bne.n	8004f08 <HAL_DMA_IRQHandler+0x2cc>
 8004f22:	e000      	b.n	8004f26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004f24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d005      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	4798      	blx	r3
 8004f46:	e000      	b.n	8004f4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f48:	bf00      	nop
    }
  }
}
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004f6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b40      	cmp	r3, #64	@ 0x40
 8004f7c:	d108      	bne.n	8004f90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f8e:	e007      	b.n	8004fa0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	60da      	str	r2, [r3, #12]
}
 8004fa0:	bf00      	nop
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	3b10      	subs	r3, #16
 8004fbc:	4a14      	ldr	r2, [pc, #80]	@ (8005010 <DMA_CalcBaseAndBitshift+0x64>)
 8004fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc2:	091b      	lsrs	r3, r3, #4
 8004fc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004fc6:	4a13      	ldr	r2, [pc, #76]	@ (8005014 <DMA_CalcBaseAndBitshift+0x68>)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4413      	add	r3, r2
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d909      	bls.n	8004fee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004fe2:	f023 0303 	bic.w	r3, r3, #3
 8004fe6:	1d1a      	adds	r2, r3, #4
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	659a      	str	r2, [r3, #88]	@ 0x58
 8004fec:	e007      	b.n	8004ffe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004ff6:	f023 0303 	bic.w	r3, r3, #3
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	aaaaaaab 	.word	0xaaaaaaab
 8005014:	0800b0e0 	.word	0x0800b0e0

08005018 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005020:	2300      	movs	r3, #0
 8005022:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005028:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d11f      	bne.n	8005072 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2b03      	cmp	r3, #3
 8005036:	d856      	bhi.n	80050e6 <DMA_CheckFifoParam+0xce>
 8005038:	a201      	add	r2, pc, #4	@ (adr r2, 8005040 <DMA_CheckFifoParam+0x28>)
 800503a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503e:	bf00      	nop
 8005040:	08005051 	.word	0x08005051
 8005044:	08005063 	.word	0x08005063
 8005048:	08005051 	.word	0x08005051
 800504c:	080050e7 	.word	0x080050e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005054:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d046      	beq.n	80050ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005060:	e043      	b.n	80050ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005066:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800506a:	d140      	bne.n	80050ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005070:	e03d      	b.n	80050ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800507a:	d121      	bne.n	80050c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2b03      	cmp	r3, #3
 8005080:	d837      	bhi.n	80050f2 <DMA_CheckFifoParam+0xda>
 8005082:	a201      	add	r2, pc, #4	@ (adr r2, 8005088 <DMA_CheckFifoParam+0x70>)
 8005084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005088:	08005099 	.word	0x08005099
 800508c:	0800509f 	.word	0x0800509f
 8005090:	08005099 	.word	0x08005099
 8005094:	080050b1 	.word	0x080050b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	73fb      	strb	r3, [r7, #15]
      break;
 800509c:	e030      	b.n	8005100 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d025      	beq.n	80050f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050ae:	e022      	b.n	80050f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050b8:	d11f      	bne.n	80050fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80050be:	e01c      	b.n	80050fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d903      	bls.n	80050ce <DMA_CheckFifoParam+0xb6>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d003      	beq.n	80050d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80050cc:	e018      	b.n	8005100 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	73fb      	strb	r3, [r7, #15]
      break;
 80050d2:	e015      	b.n	8005100 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00e      	beq.n	80050fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	73fb      	strb	r3, [r7, #15]
      break;
 80050e4:	e00b      	b.n	80050fe <DMA_CheckFifoParam+0xe6>
      break;
 80050e6:	bf00      	nop
 80050e8:	e00a      	b.n	8005100 <DMA_CheckFifoParam+0xe8>
      break;
 80050ea:	bf00      	nop
 80050ec:	e008      	b.n	8005100 <DMA_CheckFifoParam+0xe8>
      break;
 80050ee:	bf00      	nop
 80050f0:	e006      	b.n	8005100 <DMA_CheckFifoParam+0xe8>
      break;
 80050f2:	bf00      	nop
 80050f4:	e004      	b.n	8005100 <DMA_CheckFifoParam+0xe8>
      break;
 80050f6:	bf00      	nop
 80050f8:	e002      	b.n	8005100 <DMA_CheckFifoParam+0xe8>
      break;   
 80050fa:	bf00      	nop
 80050fc:	e000      	b.n	8005100 <DMA_CheckFifoParam+0xe8>
      break;
 80050fe:	bf00      	nop
    }
  } 
  
  return status; 
 8005100:	7bfb      	ldrb	r3, [r7, #15]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop

08005110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005110:	b480      	push	{r7}
 8005112:	b089      	sub	sp, #36	@ 0x24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800511e:	2300      	movs	r3, #0
 8005120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005122:	2300      	movs	r3, #0
 8005124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005126:	2300      	movs	r3, #0
 8005128:	61fb      	str	r3, [r7, #28]
 800512a:	e165      	b.n	80053f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800512c:	2201      	movs	r2, #1
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4013      	ands	r3, r2
 800513e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	429a      	cmp	r2, r3
 8005146:	f040 8154 	bne.w	80053f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	2b01      	cmp	r3, #1
 8005154:	d005      	beq.n	8005162 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800515e:	2b02      	cmp	r3, #2
 8005160:	d130      	bne.n	80051c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	005b      	lsls	r3, r3, #1
 800516c:	2203      	movs	r2, #3
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	43db      	mvns	r3, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4013      	ands	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	fa02 f303 	lsl.w	r3, r2, r3
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4313      	orrs	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005198:	2201      	movs	r2, #1
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	fa02 f303 	lsl.w	r3, r2, r3
 80051a0:	43db      	mvns	r3, r3
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	4013      	ands	r3, r2
 80051a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	091b      	lsrs	r3, r3, #4
 80051ae:	f003 0201 	and.w	r2, r3, #1
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	fa02 f303 	lsl.w	r3, r2, r3
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f003 0303 	and.w	r3, r3, #3
 80051cc:	2b03      	cmp	r3, #3
 80051ce:	d017      	beq.n	8005200 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	2203      	movs	r2, #3
 80051dc:	fa02 f303 	lsl.w	r3, r2, r3
 80051e0:	43db      	mvns	r3, r3
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	4013      	ands	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	fa02 f303 	lsl.w	r3, r2, r3
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f003 0303 	and.w	r3, r3, #3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d123      	bne.n	8005254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	08da      	lsrs	r2, r3, #3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3208      	adds	r2, #8
 8005214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	220f      	movs	r2, #15
 8005224:	fa02 f303 	lsl.w	r3, r2, r3
 8005228:	43db      	mvns	r3, r3
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	4013      	ands	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	4313      	orrs	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	08da      	lsrs	r2, r3, #3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3208      	adds	r2, #8
 800524e:	69b9      	ldr	r1, [r7, #24]
 8005250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	2203      	movs	r2, #3
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	43db      	mvns	r3, r3
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	4013      	ands	r3, r2
 800526a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f003 0203 	and.w	r2, r3, #3
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	4313      	orrs	r3, r2
 8005280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 80ae 	beq.w	80053f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005296:	2300      	movs	r3, #0
 8005298:	60fb      	str	r3, [r7, #12]
 800529a:	4b5d      	ldr	r3, [pc, #372]	@ (8005410 <HAL_GPIO_Init+0x300>)
 800529c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800529e:	4a5c      	ldr	r2, [pc, #368]	@ (8005410 <HAL_GPIO_Init+0x300>)
 80052a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80052a6:	4b5a      	ldr	r3, [pc, #360]	@ (8005410 <HAL_GPIO_Init+0x300>)
 80052a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052b2:	4a58      	ldr	r2, [pc, #352]	@ (8005414 <HAL_GPIO_Init+0x304>)
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	089b      	lsrs	r3, r3, #2
 80052b8:	3302      	adds	r3, #2
 80052ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	220f      	movs	r2, #15
 80052ca:	fa02 f303 	lsl.w	r3, r2, r3
 80052ce:	43db      	mvns	r3, r3
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	4013      	ands	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a4f      	ldr	r2, [pc, #316]	@ (8005418 <HAL_GPIO_Init+0x308>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d025      	beq.n	800532a <HAL_GPIO_Init+0x21a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a4e      	ldr	r2, [pc, #312]	@ (800541c <HAL_GPIO_Init+0x30c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d01f      	beq.n	8005326 <HAL_GPIO_Init+0x216>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a4d      	ldr	r2, [pc, #308]	@ (8005420 <HAL_GPIO_Init+0x310>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d019      	beq.n	8005322 <HAL_GPIO_Init+0x212>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a4c      	ldr	r2, [pc, #304]	@ (8005424 <HAL_GPIO_Init+0x314>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d013      	beq.n	800531e <HAL_GPIO_Init+0x20e>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a4b      	ldr	r2, [pc, #300]	@ (8005428 <HAL_GPIO_Init+0x318>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00d      	beq.n	800531a <HAL_GPIO_Init+0x20a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a4a      	ldr	r2, [pc, #296]	@ (800542c <HAL_GPIO_Init+0x31c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d007      	beq.n	8005316 <HAL_GPIO_Init+0x206>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a49      	ldr	r2, [pc, #292]	@ (8005430 <HAL_GPIO_Init+0x320>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d101      	bne.n	8005312 <HAL_GPIO_Init+0x202>
 800530e:	2306      	movs	r3, #6
 8005310:	e00c      	b.n	800532c <HAL_GPIO_Init+0x21c>
 8005312:	2307      	movs	r3, #7
 8005314:	e00a      	b.n	800532c <HAL_GPIO_Init+0x21c>
 8005316:	2305      	movs	r3, #5
 8005318:	e008      	b.n	800532c <HAL_GPIO_Init+0x21c>
 800531a:	2304      	movs	r3, #4
 800531c:	e006      	b.n	800532c <HAL_GPIO_Init+0x21c>
 800531e:	2303      	movs	r3, #3
 8005320:	e004      	b.n	800532c <HAL_GPIO_Init+0x21c>
 8005322:	2302      	movs	r3, #2
 8005324:	e002      	b.n	800532c <HAL_GPIO_Init+0x21c>
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <HAL_GPIO_Init+0x21c>
 800532a:	2300      	movs	r3, #0
 800532c:	69fa      	ldr	r2, [r7, #28]
 800532e:	f002 0203 	and.w	r2, r2, #3
 8005332:	0092      	lsls	r2, r2, #2
 8005334:	4093      	lsls	r3, r2
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	4313      	orrs	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800533c:	4935      	ldr	r1, [pc, #212]	@ (8005414 <HAL_GPIO_Init+0x304>)
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	089b      	lsrs	r3, r3, #2
 8005342:	3302      	adds	r3, #2
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800534a:	4b3a      	ldr	r3, [pc, #232]	@ (8005434 <HAL_GPIO_Init+0x324>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	43db      	mvns	r3, r3
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	4013      	ands	r3, r2
 8005358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	4313      	orrs	r3, r2
 800536c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800536e:	4a31      	ldr	r2, [pc, #196]	@ (8005434 <HAL_GPIO_Init+0x324>)
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005374:	4b2f      	ldr	r3, [pc, #188]	@ (8005434 <HAL_GPIO_Init+0x324>)
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	43db      	mvns	r3, r3
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	4013      	ands	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005398:	4a26      	ldr	r2, [pc, #152]	@ (8005434 <HAL_GPIO_Init+0x324>)
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800539e:	4b25      	ldr	r3, [pc, #148]	@ (8005434 <HAL_GPIO_Init+0x324>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	43db      	mvns	r3, r3
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	4013      	ands	r3, r2
 80053ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005434 <HAL_GPIO_Init+0x324>)
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005434 <HAL_GPIO_Init+0x324>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	43db      	mvns	r3, r3
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	4013      	ands	r3, r2
 80053d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d003      	beq.n	80053ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053ec:	4a11      	ldr	r2, [pc, #68]	@ (8005434 <HAL_GPIO_Init+0x324>)
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	3301      	adds	r3, #1
 80053f6:	61fb      	str	r3, [r7, #28]
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	2b0f      	cmp	r3, #15
 80053fc:	f67f ae96 	bls.w	800512c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005400:	bf00      	nop
 8005402:	bf00      	nop
 8005404:	3724      	adds	r7, #36	@ 0x24
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40023800 	.word	0x40023800
 8005414:	40013800 	.word	0x40013800
 8005418:	40020000 	.word	0x40020000
 800541c:	40020400 	.word	0x40020400
 8005420:	40020800 	.word	0x40020800
 8005424:	40020c00 	.word	0x40020c00
 8005428:	40021000 	.word	0x40021000
 800542c:	40021400 	.word	0x40021400
 8005430:	40021800 	.word	0x40021800
 8005434:	40013c00 	.word	0x40013c00

08005438 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	460b      	mov	r3, r1
 8005442:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	887b      	ldrh	r3, [r7, #2]
 800544a:	4013      	ands	r3, r2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005450:	2301      	movs	r3, #1
 8005452:	73fb      	strb	r3, [r7, #15]
 8005454:	e001      	b.n	800545a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005456:	2300      	movs	r3, #0
 8005458:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800545a:	7bfb      	ldrb	r3, [r7, #15]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	460b      	mov	r3, r1
 8005472:	807b      	strh	r3, [r7, #2]
 8005474:	4613      	mov	r3, r2
 8005476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005478:	787b      	ldrb	r3, [r7, #1]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800547e:	887a      	ldrh	r2, [r7, #2]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005484:	e003      	b.n	800548e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005486:	887b      	ldrh	r3, [r7, #2]
 8005488:	041a      	lsls	r2, r3, #16
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	619a      	str	r2, [r3, #24]
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800549a:	b480      	push	{r7}
 800549c:	b085      	sub	sp, #20
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	460b      	mov	r3, r1
 80054a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054ac:	887a      	ldrh	r2, [r7, #2]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4013      	ands	r3, r2
 80054b2:	041a      	lsls	r2, r3, #16
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	43d9      	mvns	r1, r3
 80054b8:	887b      	ldrh	r3, [r7, #2]
 80054ba:	400b      	ands	r3, r1
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	619a      	str	r2, [r3, #24]
}
 80054c2:	bf00      	nop
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
	...

080054d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e12b      	b.n	800573a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d106      	bne.n	80054fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7fe fe18 	bl	800412c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2224      	movs	r2, #36	@ 0x24
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0201 	bic.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005522:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005532:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005534:	f001 f932 	bl	800679c <HAL_RCC_GetPCLK1Freq>
 8005538:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	4a81      	ldr	r2, [pc, #516]	@ (8005744 <HAL_I2C_Init+0x274>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d807      	bhi.n	8005554 <HAL_I2C_Init+0x84>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4a80      	ldr	r2, [pc, #512]	@ (8005748 <HAL_I2C_Init+0x278>)
 8005548:	4293      	cmp	r3, r2
 800554a:	bf94      	ite	ls
 800554c:	2301      	movls	r3, #1
 800554e:	2300      	movhi	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	e006      	b.n	8005562 <HAL_I2C_Init+0x92>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4a7d      	ldr	r2, [pc, #500]	@ (800574c <HAL_I2C_Init+0x27c>)
 8005558:	4293      	cmp	r3, r2
 800555a:	bf94      	ite	ls
 800555c:	2301      	movls	r3, #1
 800555e:	2300      	movhi	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e0e7      	b.n	800573a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4a78      	ldr	r2, [pc, #480]	@ (8005750 <HAL_I2C_Init+0x280>)
 800556e:	fba2 2303 	umull	r2, r3, r2, r3
 8005572:	0c9b      	lsrs	r3, r3, #18
 8005574:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	430a      	orrs	r2, r1
 8005588:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	4a6a      	ldr	r2, [pc, #424]	@ (8005744 <HAL_I2C_Init+0x274>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d802      	bhi.n	80055a4 <HAL_I2C_Init+0xd4>
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	3301      	adds	r3, #1
 80055a2:	e009      	b.n	80055b8 <HAL_I2C_Init+0xe8>
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80055aa:	fb02 f303 	mul.w	r3, r2, r3
 80055ae:	4a69      	ldr	r2, [pc, #420]	@ (8005754 <HAL_I2C_Init+0x284>)
 80055b0:	fba2 2303 	umull	r2, r3, r2, r3
 80055b4:	099b      	lsrs	r3, r3, #6
 80055b6:	3301      	adds	r3, #1
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6812      	ldr	r2, [r2, #0]
 80055bc:	430b      	orrs	r3, r1
 80055be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80055ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	495c      	ldr	r1, [pc, #368]	@ (8005744 <HAL_I2C_Init+0x274>)
 80055d4:	428b      	cmp	r3, r1
 80055d6:	d819      	bhi.n	800560c <HAL_I2C_Init+0x13c>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	1e59      	subs	r1, r3, #1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80055e6:	1c59      	adds	r1, r3, #1
 80055e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80055ec:	400b      	ands	r3, r1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <HAL_I2C_Init+0x138>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	1e59      	subs	r1, r3, #1
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005600:	3301      	adds	r3, #1
 8005602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005606:	e051      	b.n	80056ac <HAL_I2C_Init+0x1dc>
 8005608:	2304      	movs	r3, #4
 800560a:	e04f      	b.n	80056ac <HAL_I2C_Init+0x1dc>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d111      	bne.n	8005638 <HAL_I2C_Init+0x168>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	1e58      	subs	r0, r3, #1
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6859      	ldr	r1, [r3, #4]
 800561c:	460b      	mov	r3, r1
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	440b      	add	r3, r1
 8005622:	fbb0 f3f3 	udiv	r3, r0, r3
 8005626:	3301      	adds	r3, #1
 8005628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800562c:	2b00      	cmp	r3, #0
 800562e:	bf0c      	ite	eq
 8005630:	2301      	moveq	r3, #1
 8005632:	2300      	movne	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	e012      	b.n	800565e <HAL_I2C_Init+0x18e>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	1e58      	subs	r0, r3, #1
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6859      	ldr	r1, [r3, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	0099      	lsls	r1, r3, #2
 8005648:	440b      	add	r3, r1
 800564a:	fbb0 f3f3 	udiv	r3, r0, r3
 800564e:	3301      	adds	r3, #1
 8005650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005654:	2b00      	cmp	r3, #0
 8005656:	bf0c      	ite	eq
 8005658:	2301      	moveq	r3, #1
 800565a:	2300      	movne	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <HAL_I2C_Init+0x196>
 8005662:	2301      	movs	r3, #1
 8005664:	e022      	b.n	80056ac <HAL_I2C_Init+0x1dc>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10e      	bne.n	800568c <HAL_I2C_Init+0x1bc>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	1e58      	subs	r0, r3, #1
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6859      	ldr	r1, [r3, #4]
 8005676:	460b      	mov	r3, r1
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	440b      	add	r3, r1
 800567c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005680:	3301      	adds	r3, #1
 8005682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800568a:	e00f      	b.n	80056ac <HAL_I2C_Init+0x1dc>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	1e58      	subs	r0, r3, #1
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6859      	ldr	r1, [r3, #4]
 8005694:	460b      	mov	r3, r1
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	0099      	lsls	r1, r3, #2
 800569c:	440b      	add	r3, r1
 800569e:	fbb0 f3f3 	udiv	r3, r0, r3
 80056a2:	3301      	adds	r3, #1
 80056a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056ac:	6879      	ldr	r1, [r7, #4]
 80056ae:	6809      	ldr	r1, [r1, #0]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69da      	ldr	r2, [r3, #28]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	431a      	orrs	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80056da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	6911      	ldr	r1, [r2, #16]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	68d2      	ldr	r2, [r2, #12]
 80056e6:	4311      	orrs	r1, r2
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6812      	ldr	r2, [r2, #0]
 80056ec:	430b      	orrs	r3, r1
 80056ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695a      	ldr	r2, [r3, #20]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0201 	orr.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	000186a0 	.word	0x000186a0
 8005748:	001e847f 	.word	0x001e847f
 800574c:	003d08ff 	.word	0x003d08ff
 8005750:	431bde83 	.word	0x431bde83
 8005754:	10624dd3 	.word	0x10624dd3

08005758 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af02      	add	r7, sp, #8
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	4608      	mov	r0, r1
 8005762:	4611      	mov	r1, r2
 8005764:	461a      	mov	r2, r3
 8005766:	4603      	mov	r3, r0
 8005768:	817b      	strh	r3, [r7, #10]
 800576a:	460b      	mov	r3, r1
 800576c:	813b      	strh	r3, [r7, #8]
 800576e:	4613      	mov	r3, r2
 8005770:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005772:	f7ff f81b 	bl	80047ac <HAL_GetTick>
 8005776:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b20      	cmp	r3, #32
 8005782:	f040 80d9 	bne.w	8005938 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	2319      	movs	r3, #25
 800578c:	2201      	movs	r2, #1
 800578e:	496d      	ldr	r1, [pc, #436]	@ (8005944 <HAL_I2C_Mem_Write+0x1ec>)
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 fc8b 	bl	80060ac <I2C_WaitOnFlagUntilTimeout>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800579c:	2302      	movs	r3, #2
 800579e:	e0cc      	b.n	800593a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d101      	bne.n	80057ae <HAL_I2C_Mem_Write+0x56>
 80057aa:	2302      	movs	r3, #2
 80057ac:	e0c5      	b.n	800593a <HAL_I2C_Mem_Write+0x1e2>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d007      	beq.n	80057d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0201 	orr.w	r2, r2, #1
 80057d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2221      	movs	r2, #33	@ 0x21
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2240      	movs	r2, #64	@ 0x40
 80057f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a3a      	ldr	r2, [r7, #32]
 80057fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005804:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800580a:	b29a      	uxth	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4a4d      	ldr	r2, [pc, #308]	@ (8005948 <HAL_I2C_Mem_Write+0x1f0>)
 8005814:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005816:	88f8      	ldrh	r0, [r7, #6]
 8005818:	893a      	ldrh	r2, [r7, #8]
 800581a:	8979      	ldrh	r1, [r7, #10]
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	9301      	str	r3, [sp, #4]
 8005820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	4603      	mov	r3, r0
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 fac2 	bl	8005db0 <I2C_RequestMemoryWrite>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d052      	beq.n	80058d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e081      	b.n	800593a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 fd50 	bl	80062e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00d      	beq.n	8005862 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584a:	2b04      	cmp	r3, #4
 800584c:	d107      	bne.n	800585e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800585c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e06b      	b.n	800593a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005866:	781a      	ldrb	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800587c:	3b01      	subs	r3, #1
 800587e:	b29a      	uxth	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005888:	b29b      	uxth	r3, r3
 800588a:	3b01      	subs	r3, #1
 800588c:	b29a      	uxth	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b04      	cmp	r3, #4
 800589e:	d11b      	bne.n	80058d8 <HAL_I2C_Mem_Write+0x180>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d017      	beq.n	80058d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ac:	781a      	ldrb	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058c2:	3b01      	subs	r3, #1
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	3b01      	subs	r3, #1
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1aa      	bne.n	8005836 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 fd43 	bl	8006370 <I2C_WaitOnBTFFlagUntilTimeout>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00d      	beq.n	800590c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d107      	bne.n	8005908 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005906:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e016      	b.n	800593a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800591a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	e000      	b.n	800593a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005938:	2302      	movs	r3, #2
  }
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	00100002 	.word	0x00100002
 8005948:	ffff0000 	.word	0xffff0000

0800594c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08c      	sub	sp, #48	@ 0x30
 8005950:	af02      	add	r7, sp, #8
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	4608      	mov	r0, r1
 8005956:	4611      	mov	r1, r2
 8005958:	461a      	mov	r2, r3
 800595a:	4603      	mov	r3, r0
 800595c:	817b      	strh	r3, [r7, #10]
 800595e:	460b      	mov	r3, r1
 8005960:	813b      	strh	r3, [r7, #8]
 8005962:	4613      	mov	r3, r2
 8005964:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005966:	f7fe ff21 	bl	80047ac <HAL_GetTick>
 800596a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b20      	cmp	r3, #32
 8005976:	f040 8214 	bne.w	8005da2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800597a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	2319      	movs	r3, #25
 8005980:	2201      	movs	r2, #1
 8005982:	497b      	ldr	r1, [pc, #492]	@ (8005b70 <HAL_I2C_Mem_Read+0x224>)
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 fb91 	bl	80060ac <I2C_WaitOnFlagUntilTimeout>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005990:	2302      	movs	r3, #2
 8005992:	e207      	b.n	8005da4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800599a:	2b01      	cmp	r3, #1
 800599c:	d101      	bne.n	80059a2 <HAL_I2C_Mem_Read+0x56>
 800599e:	2302      	movs	r3, #2
 80059a0:	e200      	b.n	8005da4 <HAL_I2C_Mem_Read+0x458>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d007      	beq.n	80059c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0201 	orr.w	r2, r2, #1
 80059c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2222      	movs	r2, #34	@ 0x22
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2240      	movs	r2, #64	@ 0x40
 80059e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80059f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4a5b      	ldr	r2, [pc, #364]	@ (8005b74 <HAL_I2C_Mem_Read+0x228>)
 8005a08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a0a:	88f8      	ldrh	r0, [r7, #6]
 8005a0c:	893a      	ldrh	r2, [r7, #8]
 8005a0e:	8979      	ldrh	r1, [r7, #10]
 8005a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a12:	9301      	str	r3, [sp, #4]
 8005a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	4603      	mov	r3, r0
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 fa5e 	bl	8005edc <I2C_RequestMemoryRead>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e1bc      	b.n	8005da4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d113      	bne.n	8005a5a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a32:	2300      	movs	r3, #0
 8005a34:	623b      	str	r3, [r7, #32]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	623b      	str	r3, [r7, #32]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	623b      	str	r3, [r7, #32]
 8005a46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	e190      	b.n	8005d7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d11b      	bne.n	8005a9a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a72:	2300      	movs	r3, #0
 8005a74:	61fb      	str	r3, [r7, #28]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	61fb      	str	r3, [r7, #28]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	61fb      	str	r3, [r7, #28]
 8005a86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	e170      	b.n	8005d7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d11b      	bne.n	8005ada <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ab0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ac0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	61bb      	str	r3, [r7, #24]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	61bb      	str	r3, [r7, #24]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	61bb      	str	r3, [r7, #24]
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	e150      	b.n	8005d7c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ada:	2300      	movs	r3, #0
 8005adc:	617b      	str	r3, [r7, #20]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005af0:	e144      	b.n	8005d7c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005af6:	2b03      	cmp	r3, #3
 8005af8:	f200 80f1 	bhi.w	8005cde <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d123      	bne.n	8005b4c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 fc79 	bl	8006400 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e145      	b.n	8005da4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691a      	ldr	r2, [r3, #16]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b22:	b2d2      	uxtb	r2, r2
 8005b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b34:	3b01      	subs	r3, #1
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005b4a:	e117      	b.n	8005d7c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d14e      	bne.n	8005bf2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	4906      	ldr	r1, [pc, #24]	@ (8005b78 <HAL_I2C_Mem_Read+0x22c>)
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 faa4 	bl	80060ac <I2C_WaitOnFlagUntilTimeout>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d008      	beq.n	8005b7c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e11a      	b.n	8005da4 <HAL_I2C_Mem_Read+0x458>
 8005b6e:	bf00      	nop
 8005b70:	00100002 	.word	0x00100002
 8005b74:	ffff0000 	.word	0xffff0000
 8005b78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691a      	ldr	r2, [r3, #16]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b96:	b2d2      	uxtb	r2, r2
 8005b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9e:	1c5a      	adds	r2, r3, #1
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	691a      	ldr	r2, [r3, #16]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	3b01      	subs	r3, #1
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005bf0:	e0c4      	b.n	8005d7c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	496c      	ldr	r1, [pc, #432]	@ (8005dac <HAL_I2C_Mem_Read+0x460>)
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 fa55 	bl	80060ac <I2C_WaitOnFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e0cb      	b.n	8005da4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691a      	ldr	r2, [r3, #16]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c54:	2200      	movs	r2, #0
 8005c56:	4955      	ldr	r1, [pc, #340]	@ (8005dac <HAL_I2C_Mem_Read+0x460>)
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 fa27 	bl	80060ac <I2C_WaitOnFlagUntilTimeout>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e09d      	b.n	8005da4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691a      	ldr	r2, [r3, #16]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	691a      	ldr	r2, [r3, #16]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb4:	b2d2      	uxtb	r2, r2
 8005cb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005cdc:	e04e      	b.n	8005d7c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ce0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 fb8c 	bl	8006400 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e058      	b.n	8005da4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	691a      	ldr	r2, [r3, #16]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	f003 0304 	and.w	r3, r3, #4
 8005d2e:	2b04      	cmp	r3, #4
 8005d30:	d124      	bne.n	8005d7c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d36:	2b03      	cmp	r3, #3
 8005d38:	d107      	bne.n	8005d4a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d48:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	691a      	ldr	r2, [r3, #16]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d54:	b2d2      	uxtb	r2, r2
 8005d56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5c:	1c5a      	adds	r2, r3, #1
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d66:	3b01      	subs	r3, #1
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	3b01      	subs	r3, #1
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f47f aeb6 	bne.w	8005af2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e000      	b.n	8005da4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005da2:	2302      	movs	r3, #2
  }
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3728      	adds	r7, #40	@ 0x28
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	00010004 	.word	0x00010004

08005db0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b088      	sub	sp, #32
 8005db4:	af02      	add	r7, sp, #8
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	4608      	mov	r0, r1
 8005dba:	4611      	mov	r1, r2
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	817b      	strh	r3, [r7, #10]
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	813b      	strh	r3, [r7, #8]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 f960 	bl	80060ac <I2C_WaitOnFlagUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00d      	beq.n	8005e0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e00:	d103      	bne.n	8005e0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e08:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e05f      	b.n	8005ece <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e0e:	897b      	ldrh	r3, [r7, #10]
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	461a      	mov	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	6a3a      	ldr	r2, [r7, #32]
 8005e22:	492d      	ldr	r1, [pc, #180]	@ (8005ed8 <I2C_RequestMemoryWrite+0x128>)
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 f9bb 	bl	80061a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e04c      	b.n	8005ece <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e34:	2300      	movs	r3, #0
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	617b      	str	r3, [r7, #20]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	617b      	str	r3, [r7, #20]
 8005e48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e4c:	6a39      	ldr	r1, [r7, #32]
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f000 fa46 	bl	80062e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00d      	beq.n	8005e76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d107      	bne.n	8005e72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e02b      	b.n	8005ece <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e76:	88fb      	ldrh	r3, [r7, #6]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d105      	bne.n	8005e88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e7c:	893b      	ldrh	r3, [r7, #8]
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	611a      	str	r2, [r3, #16]
 8005e86:	e021      	b.n	8005ecc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e88:	893b      	ldrh	r3, [r7, #8]
 8005e8a:	0a1b      	lsrs	r3, r3, #8
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e98:	6a39      	ldr	r1, [r7, #32]
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 fa20 	bl	80062e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00d      	beq.n	8005ec2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eaa:	2b04      	cmp	r3, #4
 8005eac:	d107      	bne.n	8005ebe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ebc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e005      	b.n	8005ece <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ec2:	893b      	ldrh	r3, [r7, #8]
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	00010002 	.word	0x00010002

08005edc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af02      	add	r7, sp, #8
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	4608      	mov	r0, r1
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	461a      	mov	r2, r3
 8005eea:	4603      	mov	r3, r0
 8005eec:	817b      	strh	r3, [r7, #10]
 8005eee:	460b      	mov	r3, r1
 8005ef0:	813b      	strh	r3, [r7, #8]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 f8c2 	bl	80060ac <I2C_WaitOnFlagUntilTimeout>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00d      	beq.n	8005f4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f3c:	d103      	bne.n	8005f46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e0aa      	b.n	80060a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f4a:	897b      	ldrh	r3, [r7, #10]
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	461a      	mov	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005f58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5c:	6a3a      	ldr	r2, [r7, #32]
 8005f5e:	4952      	ldr	r1, [pc, #328]	@ (80060a8 <I2C_RequestMemoryRead+0x1cc>)
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 f91d 	bl	80061a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e097      	b.n	80060a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f70:	2300      	movs	r3, #0
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	617b      	str	r3, [r7, #20]
 8005f84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f88:	6a39      	ldr	r1, [r7, #32]
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f000 f9a8 	bl	80062e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00d      	beq.n	8005fb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d107      	bne.n	8005fae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e076      	b.n	80060a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fb2:	88fb      	ldrh	r3, [r7, #6]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d105      	bne.n	8005fc4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fb8:	893b      	ldrh	r3, [r7, #8]
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	611a      	str	r2, [r3, #16]
 8005fc2:	e021      	b.n	8006008 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fc4:	893b      	ldrh	r3, [r7, #8]
 8005fc6:	0a1b      	lsrs	r3, r3, #8
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fd4:	6a39      	ldr	r1, [r7, #32]
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 f982 	bl	80062e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00d      	beq.n	8005ffe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d107      	bne.n	8005ffa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ff8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e050      	b.n	80060a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ffe:	893b      	ldrh	r3, [r7, #8]
 8006000:	b2da      	uxtb	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006008:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800600a:	6a39      	ldr	r1, [r7, #32]
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 f967 	bl	80062e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00d      	beq.n	8006034 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601c:	2b04      	cmp	r3, #4
 800601e:	d107      	bne.n	8006030 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800602e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e035      	b.n	80060a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006042:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	2200      	movs	r2, #0
 800604c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 f82b 	bl	80060ac <I2C_WaitOnFlagUntilTimeout>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00d      	beq.n	8006078 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800606a:	d103      	bne.n	8006074 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006072:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e013      	b.n	80060a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006078:	897b      	ldrh	r3, [r7, #10]
 800607a:	b2db      	uxtb	r3, r3
 800607c:	f043 0301 	orr.w	r3, r3, #1
 8006080:	b2da      	uxtb	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608a:	6a3a      	ldr	r2, [r7, #32]
 800608c:	4906      	ldr	r1, [pc, #24]	@ (80060a8 <I2C_RequestMemoryRead+0x1cc>)
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 f886 	bl	80061a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e000      	b.n	80060a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	00010002 	.word	0x00010002

080060ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	4613      	mov	r3, r2
 80060ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060bc:	e048      	b.n	8006150 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c4:	d044      	beq.n	8006150 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c6:	f7fe fb71 	bl	80047ac <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d302      	bcc.n	80060dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d139      	bne.n	8006150 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	0c1b      	lsrs	r3, r3, #16
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d10d      	bne.n	8006102 <I2C_WaitOnFlagUntilTimeout+0x56>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	43da      	mvns	r2, r3
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	4013      	ands	r3, r2
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	bf0c      	ite	eq
 80060f8:	2301      	moveq	r3, #1
 80060fa:	2300      	movne	r3, #0
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	461a      	mov	r2, r3
 8006100:	e00c      	b.n	800611c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	43da      	mvns	r2, r3
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	4013      	ands	r3, r2
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	bf0c      	ite	eq
 8006114:	2301      	moveq	r3, #1
 8006116:	2300      	movne	r3, #0
 8006118:	b2db      	uxtb	r3, r3
 800611a:	461a      	mov	r2, r3
 800611c:	79fb      	ldrb	r3, [r7, #7]
 800611e:	429a      	cmp	r2, r3
 8006120:	d116      	bne.n	8006150 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2220      	movs	r2, #32
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613c:	f043 0220 	orr.w	r2, r3, #32
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e023      	b.n	8006198 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	0c1b      	lsrs	r3, r3, #16
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b01      	cmp	r3, #1
 8006158:	d10d      	bne.n	8006176 <I2C_WaitOnFlagUntilTimeout+0xca>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	43da      	mvns	r2, r3
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	4013      	ands	r3, r2
 8006166:	b29b      	uxth	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	bf0c      	ite	eq
 800616c:	2301      	moveq	r3, #1
 800616e:	2300      	movne	r3, #0
 8006170:	b2db      	uxtb	r3, r3
 8006172:	461a      	mov	r2, r3
 8006174:	e00c      	b.n	8006190 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	43da      	mvns	r2, r3
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	4013      	ands	r3, r2
 8006182:	b29b      	uxth	r3, r3
 8006184:	2b00      	cmp	r3, #0
 8006186:	bf0c      	ite	eq
 8006188:	2301      	moveq	r3, #1
 800618a:	2300      	movne	r3, #0
 800618c:	b2db      	uxtb	r3, r3
 800618e:	461a      	mov	r2, r3
 8006190:	79fb      	ldrb	r3, [r7, #7]
 8006192:	429a      	cmp	r2, r3
 8006194:	d093      	beq.n	80060be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061ae:	e071      	b.n	8006294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061be:	d123      	bne.n	8006208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80061d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f4:	f043 0204 	orr.w	r2, r3, #4
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e067      	b.n	80062d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620e:	d041      	beq.n	8006294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006210:	f7fe facc 	bl	80047ac <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	429a      	cmp	r2, r3
 800621e:	d302      	bcc.n	8006226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d136      	bne.n	8006294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	0c1b      	lsrs	r3, r3, #16
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b01      	cmp	r3, #1
 800622e:	d10c      	bne.n	800624a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	43da      	mvns	r2, r3
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	4013      	ands	r3, r2
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	bf14      	ite	ne
 8006242:	2301      	movne	r3, #1
 8006244:	2300      	moveq	r3, #0
 8006246:	b2db      	uxtb	r3, r3
 8006248:	e00b      	b.n	8006262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	43da      	mvns	r2, r3
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	4013      	ands	r3, r2
 8006256:	b29b      	uxth	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	bf14      	ite	ne
 800625c:	2301      	movne	r3, #1
 800625e:	2300      	moveq	r3, #0
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d016      	beq.n	8006294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2220      	movs	r2, #32
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006280:	f043 0220 	orr.w	r2, r3, #32
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e021      	b.n	80062d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	0c1b      	lsrs	r3, r3, #16
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b01      	cmp	r3, #1
 800629c:	d10c      	bne.n	80062b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	43da      	mvns	r2, r3
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	4013      	ands	r3, r2
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	bf14      	ite	ne
 80062b0:	2301      	movne	r3, #1
 80062b2:	2300      	moveq	r3, #0
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	e00b      	b.n	80062d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	43da      	mvns	r2, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	4013      	ands	r3, r2
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	bf14      	ite	ne
 80062ca:	2301      	movne	r3, #1
 80062cc:	2300      	moveq	r3, #0
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f47f af6d 	bne.w	80061b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062ec:	e034      	b.n	8006358 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 f8e3 	bl	80064ba <I2C_IsAcknowledgeFailed>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e034      	b.n	8006368 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006304:	d028      	beq.n	8006358 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006306:	f7fe fa51 	bl	80047ac <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	429a      	cmp	r2, r3
 8006314:	d302      	bcc.n	800631c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d11d      	bne.n	8006358 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006326:	2b80      	cmp	r3, #128	@ 0x80
 8006328:	d016      	beq.n	8006358 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2220      	movs	r2, #32
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006344:	f043 0220 	orr.w	r2, r3, #32
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e007      	b.n	8006368 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006362:	2b80      	cmp	r3, #128	@ 0x80
 8006364:	d1c3      	bne.n	80062ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800637c:	e034      	b.n	80063e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f000 f89b 	bl	80064ba <I2C_IsAcknowledgeFailed>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e034      	b.n	80063f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006394:	d028      	beq.n	80063e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006396:	f7fe fa09 	bl	80047ac <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d302      	bcc.n	80063ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d11d      	bne.n	80063e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	f003 0304 	and.w	r3, r3, #4
 80063b6:	2b04      	cmp	r3, #4
 80063b8:	d016      	beq.n	80063e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d4:	f043 0220 	orr.w	r2, r3, #32
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e007      	b.n	80063f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	f003 0304 	and.w	r3, r3, #4
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d1c3      	bne.n	800637e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800640c:	e049      	b.n	80064a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	f003 0310 	and.w	r3, r3, #16
 8006418:	2b10      	cmp	r3, #16
 800641a:	d119      	bne.n	8006450 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f06f 0210 	mvn.w	r2, #16
 8006424:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2220      	movs	r2, #32
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e030      	b.n	80064b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006450:	f7fe f9ac 	bl	80047ac <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	429a      	cmp	r2, r3
 800645e:	d302      	bcc.n	8006466 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d11d      	bne.n	80064a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006470:	2b40      	cmp	r3, #64	@ 0x40
 8006472:	d016      	beq.n	80064a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2220      	movs	r2, #32
 800647e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800648e:	f043 0220 	orr.w	r2, r3, #32
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e007      	b.n	80064b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ac:	2b40      	cmp	r3, #64	@ 0x40
 80064ae:	d1ae      	bne.n	800640e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064d0:	d11b      	bne.n	800650a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80064da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f6:	f043 0204 	orr.w	r2, r3, #4
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e000      	b.n	800650c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006522:	2300      	movs	r3, #0
 8006524:	603b      	str	r3, [r7, #0]
 8006526:	4b20      	ldr	r3, [pc, #128]	@ (80065a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652a:	4a1f      	ldr	r2, [pc, #124]	@ (80065a8 <HAL_PWREx_EnableOverDrive+0x90>)
 800652c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006530:	6413      	str	r3, [r2, #64]	@ 0x40
 8006532:	4b1d      	ldr	r3, [pc, #116]	@ (80065a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800653e:	4b1b      	ldr	r3, [pc, #108]	@ (80065ac <HAL_PWREx_EnableOverDrive+0x94>)
 8006540:	2201      	movs	r2, #1
 8006542:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006544:	f7fe f932 	bl	80047ac <HAL_GetTick>
 8006548:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800654a:	e009      	b.n	8006560 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800654c:	f7fe f92e 	bl	80047ac <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800655a:	d901      	bls.n	8006560 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e01f      	b.n	80065a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006560:	4b13      	ldr	r3, [pc, #76]	@ (80065b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800656c:	d1ee      	bne.n	800654c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800656e:	4b11      	ldr	r3, [pc, #68]	@ (80065b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006570:	2201      	movs	r2, #1
 8006572:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006574:	f7fe f91a 	bl	80047ac <HAL_GetTick>
 8006578:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800657a:	e009      	b.n	8006590 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800657c:	f7fe f916 	bl	80047ac <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800658a:	d901      	bls.n	8006590 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e007      	b.n	80065a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006590:	4b07      	ldr	r3, [pc, #28]	@ (80065b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006598:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800659c:	d1ee      	bne.n	800657c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	40023800 	.word	0x40023800
 80065ac:	420e0040 	.word	0x420e0040
 80065b0:	40007000 	.word	0x40007000
 80065b4:	420e0044 	.word	0x420e0044

080065b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e0cc      	b.n	8006766 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065cc:	4b68      	ldr	r3, [pc, #416]	@ (8006770 <HAL_RCC_ClockConfig+0x1b8>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 030f 	and.w	r3, r3, #15
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d90c      	bls.n	80065f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065da:	4b65      	ldr	r3, [pc, #404]	@ (8006770 <HAL_RCC_ClockConfig+0x1b8>)
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	b2d2      	uxtb	r2, r2
 80065e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065e2:	4b63      	ldr	r3, [pc, #396]	@ (8006770 <HAL_RCC_ClockConfig+0x1b8>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 030f 	and.w	r3, r3, #15
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d001      	beq.n	80065f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e0b8      	b.n	8006766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0302 	and.w	r3, r3, #2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d020      	beq.n	8006642 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b00      	cmp	r3, #0
 800660a:	d005      	beq.n	8006618 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800660c:	4b59      	ldr	r3, [pc, #356]	@ (8006774 <HAL_RCC_ClockConfig+0x1bc>)
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	4a58      	ldr	r2, [pc, #352]	@ (8006774 <HAL_RCC_ClockConfig+0x1bc>)
 8006612:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006616:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0308 	and.w	r3, r3, #8
 8006620:	2b00      	cmp	r3, #0
 8006622:	d005      	beq.n	8006630 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006624:	4b53      	ldr	r3, [pc, #332]	@ (8006774 <HAL_RCC_ClockConfig+0x1bc>)
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	4a52      	ldr	r2, [pc, #328]	@ (8006774 <HAL_RCC_ClockConfig+0x1bc>)
 800662a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800662e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006630:	4b50      	ldr	r3, [pc, #320]	@ (8006774 <HAL_RCC_ClockConfig+0x1bc>)
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	494d      	ldr	r1, [pc, #308]	@ (8006774 <HAL_RCC_ClockConfig+0x1bc>)
 800663e:	4313      	orrs	r3, r2
 8006640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d044      	beq.n	80066d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d107      	bne.n	8006666 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006656:	4b47      	ldr	r3, [pc, #284]	@ (8006774 <HAL_RCC_ClockConfig+0x1bc>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d119      	bne.n	8006696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e07f      	b.n	8006766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	2b02      	cmp	r3, #2
 800666c:	d003      	beq.n	8006676 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006672:	2b03      	cmp	r3, #3
 8006674:	d107      	bne.n	8006686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006676:	4b3f      	ldr	r3, [pc, #252]	@ (8006774 <HAL_RCC_ClockConfig+0x1bc>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d109      	bne.n	8006696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e06f      	b.n	8006766 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006686:	4b3b      	ldr	r3, [pc, #236]	@ (8006774 <HAL_RCC_ClockConfig+0x1bc>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e067      	b.n	8006766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006696:	4b37      	ldr	r3, [pc, #220]	@ (8006774 <HAL_RCC_ClockConfig+0x1bc>)
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f023 0203 	bic.w	r2, r3, #3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	4934      	ldr	r1, [pc, #208]	@ (8006774 <HAL_RCC_ClockConfig+0x1bc>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066a8:	f7fe f880 	bl	80047ac <HAL_GetTick>
 80066ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ae:	e00a      	b.n	80066c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066b0:	f7fe f87c 	bl	80047ac <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066be:	4293      	cmp	r3, r2
 80066c0:	d901      	bls.n	80066c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e04f      	b.n	8006766 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066c6:	4b2b      	ldr	r3, [pc, #172]	@ (8006774 <HAL_RCC_ClockConfig+0x1bc>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f003 020c 	and.w	r2, r3, #12
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d1eb      	bne.n	80066b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066d8:	4b25      	ldr	r3, [pc, #148]	@ (8006770 <HAL_RCC_ClockConfig+0x1b8>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 030f 	and.w	r3, r3, #15
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d20c      	bcs.n	8006700 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066e6:	4b22      	ldr	r3, [pc, #136]	@ (8006770 <HAL_RCC_ClockConfig+0x1b8>)
 80066e8:	683a      	ldr	r2, [r7, #0]
 80066ea:	b2d2      	uxtb	r2, r2
 80066ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ee:	4b20      	ldr	r3, [pc, #128]	@ (8006770 <HAL_RCC_ClockConfig+0x1b8>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d001      	beq.n	8006700 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e032      	b.n	8006766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b00      	cmp	r3, #0
 800670a:	d008      	beq.n	800671e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800670c:	4b19      	ldr	r3, [pc, #100]	@ (8006774 <HAL_RCC_ClockConfig+0x1bc>)
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	4916      	ldr	r1, [pc, #88]	@ (8006774 <HAL_RCC_ClockConfig+0x1bc>)
 800671a:	4313      	orrs	r3, r2
 800671c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0308 	and.w	r3, r3, #8
 8006726:	2b00      	cmp	r3, #0
 8006728:	d009      	beq.n	800673e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800672a:	4b12      	ldr	r3, [pc, #72]	@ (8006774 <HAL_RCC_ClockConfig+0x1bc>)
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	00db      	lsls	r3, r3, #3
 8006738:	490e      	ldr	r1, [pc, #56]	@ (8006774 <HAL_RCC_ClockConfig+0x1bc>)
 800673a:	4313      	orrs	r3, r2
 800673c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800673e:	f000 f855 	bl	80067ec <HAL_RCC_GetSysClockFreq>
 8006742:	4602      	mov	r2, r0
 8006744:	4b0b      	ldr	r3, [pc, #44]	@ (8006774 <HAL_RCC_ClockConfig+0x1bc>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	091b      	lsrs	r3, r3, #4
 800674a:	f003 030f 	and.w	r3, r3, #15
 800674e:	490a      	ldr	r1, [pc, #40]	@ (8006778 <HAL_RCC_ClockConfig+0x1c0>)
 8006750:	5ccb      	ldrb	r3, [r1, r3]
 8006752:	fa22 f303 	lsr.w	r3, r2, r3
 8006756:	4a09      	ldr	r2, [pc, #36]	@ (800677c <HAL_RCC_ClockConfig+0x1c4>)
 8006758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800675a:	4b09      	ldr	r3, [pc, #36]	@ (8006780 <HAL_RCC_ClockConfig+0x1c8>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4618      	mov	r0, r3
 8006760:	f7fd ffe0 	bl	8004724 <HAL_InitTick>

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	40023c00 	.word	0x40023c00
 8006774:	40023800 	.word	0x40023800
 8006778:	0800b0c8 	.word	0x0800b0c8
 800677c:	20000028 	.word	0x20000028
 8006780:	2000002c 	.word	0x2000002c

08006784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006784:	b480      	push	{r7}
 8006786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006788:	4b03      	ldr	r3, [pc, #12]	@ (8006798 <HAL_RCC_GetHCLKFreq+0x14>)
 800678a:	681b      	ldr	r3, [r3, #0]
}
 800678c:	4618      	mov	r0, r3
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	20000028 	.word	0x20000028

0800679c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80067a0:	f7ff fff0 	bl	8006784 <HAL_RCC_GetHCLKFreq>
 80067a4:	4602      	mov	r2, r0
 80067a6:	4b05      	ldr	r3, [pc, #20]	@ (80067bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	0a9b      	lsrs	r3, r3, #10
 80067ac:	f003 0307 	and.w	r3, r3, #7
 80067b0:	4903      	ldr	r1, [pc, #12]	@ (80067c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067b2:	5ccb      	ldrb	r3, [r1, r3]
 80067b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	40023800 	.word	0x40023800
 80067c0:	0800b0d8 	.word	0x0800b0d8

080067c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80067c8:	f7ff ffdc 	bl	8006784 <HAL_RCC_GetHCLKFreq>
 80067cc:	4602      	mov	r2, r0
 80067ce:	4b05      	ldr	r3, [pc, #20]	@ (80067e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	0b5b      	lsrs	r3, r3, #13
 80067d4:	f003 0307 	and.w	r3, r3, #7
 80067d8:	4903      	ldr	r1, [pc, #12]	@ (80067e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067da:	5ccb      	ldrb	r3, [r1, r3]
 80067dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	40023800 	.word	0x40023800
 80067e8:	0800b0d8 	.word	0x0800b0d8

080067ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067f0:	b0ae      	sub	sp, #184	@ 0xb8
 80067f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006800:	2300      	movs	r3, #0
 8006802:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006806:	2300      	movs	r3, #0
 8006808:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006812:	4bcb      	ldr	r3, [pc, #812]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x354>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f003 030c 	and.w	r3, r3, #12
 800681a:	2b0c      	cmp	r3, #12
 800681c:	f200 8204 	bhi.w	8006c28 <HAL_RCC_GetSysClockFreq+0x43c>
 8006820:	a201      	add	r2, pc, #4	@ (adr r2, 8006828 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006826:	bf00      	nop
 8006828:	0800685d 	.word	0x0800685d
 800682c:	08006c29 	.word	0x08006c29
 8006830:	08006c29 	.word	0x08006c29
 8006834:	08006c29 	.word	0x08006c29
 8006838:	08006865 	.word	0x08006865
 800683c:	08006c29 	.word	0x08006c29
 8006840:	08006c29 	.word	0x08006c29
 8006844:	08006c29 	.word	0x08006c29
 8006848:	0800686d 	.word	0x0800686d
 800684c:	08006c29 	.word	0x08006c29
 8006850:	08006c29 	.word	0x08006c29
 8006854:	08006c29 	.word	0x08006c29
 8006858:	08006a5d 	.word	0x08006a5d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800685c:	4bb9      	ldr	r3, [pc, #740]	@ (8006b44 <HAL_RCC_GetSysClockFreq+0x358>)
 800685e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8006862:	e1e5      	b.n	8006c30 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006864:	4bb7      	ldr	r3, [pc, #732]	@ (8006b44 <HAL_RCC_GetSysClockFreq+0x358>)
 8006866:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800686a:	e1e1      	b.n	8006c30 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800686c:	4bb4      	ldr	r3, [pc, #720]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x354>)
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006874:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006878:	4bb1      	ldr	r3, [pc, #708]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x354>)
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d071      	beq.n	8006968 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006884:	4bae      	ldr	r3, [pc, #696]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x354>)
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	099b      	lsrs	r3, r3, #6
 800688a:	2200      	movs	r2, #0
 800688c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006890:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006894:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800689c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068a0:	2300      	movs	r3, #0
 80068a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80068a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80068aa:	4622      	mov	r2, r4
 80068ac:	462b      	mov	r3, r5
 80068ae:	f04f 0000 	mov.w	r0, #0
 80068b2:	f04f 0100 	mov.w	r1, #0
 80068b6:	0159      	lsls	r1, r3, #5
 80068b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068bc:	0150      	lsls	r0, r2, #5
 80068be:	4602      	mov	r2, r0
 80068c0:	460b      	mov	r3, r1
 80068c2:	4621      	mov	r1, r4
 80068c4:	1a51      	subs	r1, r2, r1
 80068c6:	6439      	str	r1, [r7, #64]	@ 0x40
 80068c8:	4629      	mov	r1, r5
 80068ca:	eb63 0301 	sbc.w	r3, r3, r1
 80068ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	f04f 0300 	mov.w	r3, #0
 80068d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80068dc:	4649      	mov	r1, r9
 80068de:	018b      	lsls	r3, r1, #6
 80068e0:	4641      	mov	r1, r8
 80068e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068e6:	4641      	mov	r1, r8
 80068e8:	018a      	lsls	r2, r1, #6
 80068ea:	4641      	mov	r1, r8
 80068ec:	1a51      	subs	r1, r2, r1
 80068ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80068f0:	4649      	mov	r1, r9
 80068f2:	eb63 0301 	sbc.w	r3, r3, r1
 80068f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068f8:	f04f 0200 	mov.w	r2, #0
 80068fc:	f04f 0300 	mov.w	r3, #0
 8006900:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006904:	4649      	mov	r1, r9
 8006906:	00cb      	lsls	r3, r1, #3
 8006908:	4641      	mov	r1, r8
 800690a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800690e:	4641      	mov	r1, r8
 8006910:	00ca      	lsls	r2, r1, #3
 8006912:	4610      	mov	r0, r2
 8006914:	4619      	mov	r1, r3
 8006916:	4603      	mov	r3, r0
 8006918:	4622      	mov	r2, r4
 800691a:	189b      	adds	r3, r3, r2
 800691c:	633b      	str	r3, [r7, #48]	@ 0x30
 800691e:	462b      	mov	r3, r5
 8006920:	460a      	mov	r2, r1
 8006922:	eb42 0303 	adc.w	r3, r2, r3
 8006926:	637b      	str	r3, [r7, #52]	@ 0x34
 8006928:	f04f 0200 	mov.w	r2, #0
 800692c:	f04f 0300 	mov.w	r3, #0
 8006930:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006934:	4629      	mov	r1, r5
 8006936:	028b      	lsls	r3, r1, #10
 8006938:	4621      	mov	r1, r4
 800693a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800693e:	4621      	mov	r1, r4
 8006940:	028a      	lsls	r2, r1, #10
 8006942:	4610      	mov	r0, r2
 8006944:	4619      	mov	r1, r3
 8006946:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800694a:	2200      	movs	r2, #0
 800694c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006950:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006954:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006958:	f7fa f93a 	bl	8000bd0 <__aeabi_uldivmod>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4613      	mov	r3, r2
 8006962:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006966:	e067      	b.n	8006a38 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006968:	4b75      	ldr	r3, [pc, #468]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x354>)
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	099b      	lsrs	r3, r3, #6
 800696e:	2200      	movs	r2, #0
 8006970:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006974:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006978:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800697c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006980:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006982:	2300      	movs	r3, #0
 8006984:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006986:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800698a:	4622      	mov	r2, r4
 800698c:	462b      	mov	r3, r5
 800698e:	f04f 0000 	mov.w	r0, #0
 8006992:	f04f 0100 	mov.w	r1, #0
 8006996:	0159      	lsls	r1, r3, #5
 8006998:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800699c:	0150      	lsls	r0, r2, #5
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	4621      	mov	r1, r4
 80069a4:	1a51      	subs	r1, r2, r1
 80069a6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80069a8:	4629      	mov	r1, r5
 80069aa:	eb63 0301 	sbc.w	r3, r3, r1
 80069ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069b0:	f04f 0200 	mov.w	r2, #0
 80069b4:	f04f 0300 	mov.w	r3, #0
 80069b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80069bc:	4649      	mov	r1, r9
 80069be:	018b      	lsls	r3, r1, #6
 80069c0:	4641      	mov	r1, r8
 80069c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80069c6:	4641      	mov	r1, r8
 80069c8:	018a      	lsls	r2, r1, #6
 80069ca:	4641      	mov	r1, r8
 80069cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80069d0:	4649      	mov	r1, r9
 80069d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80069d6:	f04f 0200 	mov.w	r2, #0
 80069da:	f04f 0300 	mov.w	r3, #0
 80069de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80069e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80069e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069ea:	4692      	mov	sl, r2
 80069ec:	469b      	mov	fp, r3
 80069ee:	4623      	mov	r3, r4
 80069f0:	eb1a 0303 	adds.w	r3, sl, r3
 80069f4:	623b      	str	r3, [r7, #32]
 80069f6:	462b      	mov	r3, r5
 80069f8:	eb4b 0303 	adc.w	r3, fp, r3
 80069fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80069fe:	f04f 0200 	mov.w	r2, #0
 8006a02:	f04f 0300 	mov.w	r3, #0
 8006a06:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006a0a:	4629      	mov	r1, r5
 8006a0c:	028b      	lsls	r3, r1, #10
 8006a0e:	4621      	mov	r1, r4
 8006a10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a14:	4621      	mov	r1, r4
 8006a16:	028a      	lsls	r2, r1, #10
 8006a18:	4610      	mov	r0, r2
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a20:	2200      	movs	r2, #0
 8006a22:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a24:	677a      	str	r2, [r7, #116]	@ 0x74
 8006a26:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006a2a:	f7fa f8d1 	bl	8000bd0 <__aeabi_uldivmod>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	460b      	mov	r3, r1
 8006a32:	4613      	mov	r3, r2
 8006a34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a38:	4b41      	ldr	r3, [pc, #260]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x354>)
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	0c1b      	lsrs	r3, r3, #16
 8006a3e:	f003 0303 	and.w	r3, r3, #3
 8006a42:	3301      	adds	r3, #1
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8006a4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006a5a:	e0e9      	b.n	8006c30 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a5c:	4b38      	ldr	r3, [pc, #224]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x354>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a68:	4b35      	ldr	r3, [pc, #212]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x354>)
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d069      	beq.n	8006b48 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a74:	4b32      	ldr	r3, [pc, #200]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x354>)
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	099b      	lsrs	r3, r3, #6
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a86:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a88:	2300      	movs	r3, #0
 8006a8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a8c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006a90:	4622      	mov	r2, r4
 8006a92:	462b      	mov	r3, r5
 8006a94:	f04f 0000 	mov.w	r0, #0
 8006a98:	f04f 0100 	mov.w	r1, #0
 8006a9c:	0159      	lsls	r1, r3, #5
 8006a9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006aa2:	0150      	lsls	r0, r2, #5
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4621      	mov	r1, r4
 8006aaa:	1a51      	subs	r1, r2, r1
 8006aac:	61b9      	str	r1, [r7, #24]
 8006aae:	4629      	mov	r1, r5
 8006ab0:	eb63 0301 	sbc.w	r3, r3, r1
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	f04f 0200 	mov.w	r2, #0
 8006aba:	f04f 0300 	mov.w	r3, #0
 8006abe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006ac2:	4659      	mov	r1, fp
 8006ac4:	018b      	lsls	r3, r1, #6
 8006ac6:	4651      	mov	r1, sl
 8006ac8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006acc:	4651      	mov	r1, sl
 8006ace:	018a      	lsls	r2, r1, #6
 8006ad0:	4651      	mov	r1, sl
 8006ad2:	ebb2 0801 	subs.w	r8, r2, r1
 8006ad6:	4659      	mov	r1, fp
 8006ad8:	eb63 0901 	sbc.w	r9, r3, r1
 8006adc:	f04f 0200 	mov.w	r2, #0
 8006ae0:	f04f 0300 	mov.w	r3, #0
 8006ae4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ae8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006aec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006af0:	4690      	mov	r8, r2
 8006af2:	4699      	mov	r9, r3
 8006af4:	4623      	mov	r3, r4
 8006af6:	eb18 0303 	adds.w	r3, r8, r3
 8006afa:	613b      	str	r3, [r7, #16]
 8006afc:	462b      	mov	r3, r5
 8006afe:	eb49 0303 	adc.w	r3, r9, r3
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	f04f 0200 	mov.w	r2, #0
 8006b08:	f04f 0300 	mov.w	r3, #0
 8006b0c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006b10:	4629      	mov	r1, r5
 8006b12:	028b      	lsls	r3, r1, #10
 8006b14:	4621      	mov	r1, r4
 8006b16:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	028a      	lsls	r2, r1, #10
 8006b1e:	4610      	mov	r0, r2
 8006b20:	4619      	mov	r1, r3
 8006b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b26:	2200      	movs	r2, #0
 8006b28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b2a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006b2c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006b30:	f7fa f84e 	bl	8000bd0 <__aeabi_uldivmod>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	4613      	mov	r3, r2
 8006b3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b3e:	e063      	b.n	8006c08 <HAL_RCC_GetSysClockFreq+0x41c>
 8006b40:	40023800 	.word	0x40023800
 8006b44:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b48:	4b3d      	ldr	r3, [pc, #244]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x454>)
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	099b      	lsrs	r3, r3, #6
 8006b4e:	2200      	movs	r2, #0
 8006b50:	4618      	mov	r0, r3
 8006b52:	4611      	mov	r1, r2
 8006b54:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b58:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b5e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006b62:	4642      	mov	r2, r8
 8006b64:	464b      	mov	r3, r9
 8006b66:	f04f 0000 	mov.w	r0, #0
 8006b6a:	f04f 0100 	mov.w	r1, #0
 8006b6e:	0159      	lsls	r1, r3, #5
 8006b70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b74:	0150      	lsls	r0, r2, #5
 8006b76:	4602      	mov	r2, r0
 8006b78:	460b      	mov	r3, r1
 8006b7a:	4641      	mov	r1, r8
 8006b7c:	1a51      	subs	r1, r2, r1
 8006b7e:	60b9      	str	r1, [r7, #8]
 8006b80:	4649      	mov	r1, r9
 8006b82:	eb63 0301 	sbc.w	r3, r3, r1
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	f04f 0200 	mov.w	r2, #0
 8006b8c:	f04f 0300 	mov.w	r3, #0
 8006b90:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006b94:	4659      	mov	r1, fp
 8006b96:	018b      	lsls	r3, r1, #6
 8006b98:	4651      	mov	r1, sl
 8006b9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b9e:	4651      	mov	r1, sl
 8006ba0:	018a      	lsls	r2, r1, #6
 8006ba2:	4651      	mov	r1, sl
 8006ba4:	1a54      	subs	r4, r2, r1
 8006ba6:	4659      	mov	r1, fp
 8006ba8:	eb63 0501 	sbc.w	r5, r3, r1
 8006bac:	f04f 0200 	mov.w	r2, #0
 8006bb0:	f04f 0300 	mov.w	r3, #0
 8006bb4:	00eb      	lsls	r3, r5, #3
 8006bb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bba:	00e2      	lsls	r2, r4, #3
 8006bbc:	4614      	mov	r4, r2
 8006bbe:	461d      	mov	r5, r3
 8006bc0:	4643      	mov	r3, r8
 8006bc2:	18e3      	adds	r3, r4, r3
 8006bc4:	603b      	str	r3, [r7, #0]
 8006bc6:	464b      	mov	r3, r9
 8006bc8:	eb45 0303 	adc.w	r3, r5, r3
 8006bcc:	607b      	str	r3, [r7, #4]
 8006bce:	f04f 0200 	mov.w	r2, #0
 8006bd2:	f04f 0300 	mov.w	r3, #0
 8006bd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bda:	4629      	mov	r1, r5
 8006bdc:	028b      	lsls	r3, r1, #10
 8006bde:	4621      	mov	r1, r4
 8006be0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006be4:	4621      	mov	r1, r4
 8006be6:	028a      	lsls	r2, r1, #10
 8006be8:	4610      	mov	r0, r2
 8006bea:	4619      	mov	r1, r3
 8006bec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bf4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006bf6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006bfa:	f7f9 ffe9 	bl	8000bd0 <__aeabi_uldivmod>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	4613      	mov	r3, r2
 8006c04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006c08:	4b0d      	ldr	r3, [pc, #52]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x454>)
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	0f1b      	lsrs	r3, r3, #28
 8006c0e:	f003 0307 	and.w	r3, r3, #7
 8006c12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8006c16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006c26:	e003      	b.n	8006c30 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c28:	4b06      	ldr	r3, [pc, #24]	@ (8006c44 <HAL_RCC_GetSysClockFreq+0x458>)
 8006c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006c2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	37b8      	adds	r7, #184	@ 0xb8
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c3e:	bf00      	nop
 8006c40:	40023800 	.word	0x40023800
 8006c44:	00f42400 	.word	0x00f42400

08006c48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e28d      	b.n	8007176 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f000 8083 	beq.w	8006d6e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006c68:	4b94      	ldr	r3, [pc, #592]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f003 030c 	and.w	r3, r3, #12
 8006c70:	2b04      	cmp	r3, #4
 8006c72:	d019      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006c74:	4b91      	ldr	r3, [pc, #580]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d106      	bne.n	8006c8e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006c80:	4b8e      	ldr	r3, [pc, #568]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c8c:	d00c      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c8e:	4b8b      	ldr	r3, [pc, #556]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006c96:	2b0c      	cmp	r3, #12
 8006c98:	d112      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c9a:	4b88      	ldr	r3, [pc, #544]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ca2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ca6:	d10b      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ca8:	4b84      	ldr	r3, [pc, #528]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d05b      	beq.n	8006d6c <HAL_RCC_OscConfig+0x124>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d157      	bne.n	8006d6c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e25a      	b.n	8007176 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cc8:	d106      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x90>
 8006cca:	4b7c      	ldr	r3, [pc, #496]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a7b      	ldr	r2, [pc, #492]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	e01d      	b.n	8006d14 <HAL_RCC_OscConfig+0xcc>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ce0:	d10c      	bne.n	8006cfc <HAL_RCC_OscConfig+0xb4>
 8006ce2:	4b76      	ldr	r3, [pc, #472]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a75      	ldr	r2, [pc, #468]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006ce8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006cec:	6013      	str	r3, [r2, #0]
 8006cee:	4b73      	ldr	r3, [pc, #460]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a72      	ldr	r2, [pc, #456]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cf8:	6013      	str	r3, [r2, #0]
 8006cfa:	e00b      	b.n	8006d14 <HAL_RCC_OscConfig+0xcc>
 8006cfc:	4b6f      	ldr	r3, [pc, #444]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a6e      	ldr	r2, [pc, #440]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006d02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d06:	6013      	str	r3, [r2, #0]
 8006d08:	4b6c      	ldr	r3, [pc, #432]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a6b      	ldr	r2, [pc, #428]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006d0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d013      	beq.n	8006d44 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d1c:	f7fd fd46 	bl	80047ac <HAL_GetTick>
 8006d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d22:	e008      	b.n	8006d36 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d24:	f7fd fd42 	bl	80047ac <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b64      	cmp	r3, #100	@ 0x64
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e21f      	b.n	8007176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d36:	4b61      	ldr	r3, [pc, #388]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d0f0      	beq.n	8006d24 <HAL_RCC_OscConfig+0xdc>
 8006d42:	e014      	b.n	8006d6e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d44:	f7fd fd32 	bl	80047ac <HAL_GetTick>
 8006d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d4a:	e008      	b.n	8006d5e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d4c:	f7fd fd2e 	bl	80047ac <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	2b64      	cmp	r3, #100	@ 0x64
 8006d58:	d901      	bls.n	8006d5e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e20b      	b.n	8007176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d5e:	4b57      	ldr	r3, [pc, #348]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1f0      	bne.n	8006d4c <HAL_RCC_OscConfig+0x104>
 8006d6a:	e000      	b.n	8006d6e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d06f      	beq.n	8006e5a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006d7a:	4b50      	ldr	r3, [pc, #320]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f003 030c 	and.w	r3, r3, #12
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d017      	beq.n	8006db6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006d86:	4b4d      	ldr	r3, [pc, #308]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006d8e:	2b08      	cmp	r3, #8
 8006d90:	d105      	bne.n	8006d9e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006d92:	4b4a      	ldr	r3, [pc, #296]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00b      	beq.n	8006db6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d9e:	4b47      	ldr	r3, [pc, #284]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006da6:	2b0c      	cmp	r3, #12
 8006da8:	d11c      	bne.n	8006de4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006daa:	4b44      	ldr	r3, [pc, #272]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d116      	bne.n	8006de4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006db6:	4b41      	ldr	r3, [pc, #260]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d005      	beq.n	8006dce <HAL_RCC_OscConfig+0x186>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d001      	beq.n	8006dce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e1d3      	b.n	8007176 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dce:	4b3b      	ldr	r3, [pc, #236]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	00db      	lsls	r3, r3, #3
 8006ddc:	4937      	ldr	r1, [pc, #220]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006de2:	e03a      	b.n	8006e5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d020      	beq.n	8006e2e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006dec:	4b34      	ldr	r3, [pc, #208]	@ (8006ec0 <HAL_RCC_OscConfig+0x278>)
 8006dee:	2201      	movs	r2, #1
 8006df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df2:	f7fd fcdb 	bl	80047ac <HAL_GetTick>
 8006df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006df8:	e008      	b.n	8006e0c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dfa:	f7fd fcd7 	bl	80047ac <HAL_GetTick>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d901      	bls.n	8006e0c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e1b4      	b.n	8007176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d0f0      	beq.n	8006dfa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e18:	4b28      	ldr	r3, [pc, #160]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	00db      	lsls	r3, r3, #3
 8006e26:	4925      	ldr	r1, [pc, #148]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	600b      	str	r3, [r1, #0]
 8006e2c:	e015      	b.n	8006e5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e2e:	4b24      	ldr	r3, [pc, #144]	@ (8006ec0 <HAL_RCC_OscConfig+0x278>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e34:	f7fd fcba 	bl	80047ac <HAL_GetTick>
 8006e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e3a:	e008      	b.n	8006e4e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e3c:	f7fd fcb6 	bl	80047ac <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e193      	b.n	8007176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1f0      	bne.n	8006e3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0308 	and.w	r3, r3, #8
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d036      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d016      	beq.n	8006e9c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e6e:	4b15      	ldr	r3, [pc, #84]	@ (8006ec4 <HAL_RCC_OscConfig+0x27c>)
 8006e70:	2201      	movs	r2, #1
 8006e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e74:	f7fd fc9a 	bl	80047ac <HAL_GetTick>
 8006e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e7a:	e008      	b.n	8006e8e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e7c:	f7fd fc96 	bl	80047ac <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d901      	bls.n	8006e8e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e173      	b.n	8007176 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e92:	f003 0302 	and.w	r3, r3, #2
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0f0      	beq.n	8006e7c <HAL_RCC_OscConfig+0x234>
 8006e9a:	e01b      	b.n	8006ed4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e9c:	4b09      	ldr	r3, [pc, #36]	@ (8006ec4 <HAL_RCC_OscConfig+0x27c>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea2:	f7fd fc83 	bl	80047ac <HAL_GetTick>
 8006ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ea8:	e00e      	b.n	8006ec8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006eaa:	f7fd fc7f 	bl	80047ac <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d907      	bls.n	8006ec8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e15c      	b.n	8007176 <HAL_RCC_OscConfig+0x52e>
 8006ebc:	40023800 	.word	0x40023800
 8006ec0:	42470000 	.word	0x42470000
 8006ec4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ec8:	4b8a      	ldr	r3, [pc, #552]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 8006eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ecc:	f003 0302 	and.w	r3, r3, #2
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1ea      	bne.n	8006eaa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0304 	and.w	r3, r3, #4
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 8097 	beq.w	8007010 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ee6:	4b83      	ldr	r3, [pc, #524]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10f      	bne.n	8006f12 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60bb      	str	r3, [r7, #8]
 8006ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efa:	4a7e      	ldr	r2, [pc, #504]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 8006efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f02:	4b7c      	ldr	r3, [pc, #496]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 8006f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f0a:	60bb      	str	r3, [r7, #8]
 8006f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f12:	4b79      	ldr	r3, [pc, #484]	@ (80070f8 <HAL_RCC_OscConfig+0x4b0>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d118      	bne.n	8006f50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f1e:	4b76      	ldr	r3, [pc, #472]	@ (80070f8 <HAL_RCC_OscConfig+0x4b0>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a75      	ldr	r2, [pc, #468]	@ (80070f8 <HAL_RCC_OscConfig+0x4b0>)
 8006f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f2a:	f7fd fc3f 	bl	80047ac <HAL_GetTick>
 8006f2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f30:	e008      	b.n	8006f44 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f32:	f7fd fc3b 	bl	80047ac <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d901      	bls.n	8006f44 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e118      	b.n	8007176 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f44:	4b6c      	ldr	r3, [pc, #432]	@ (80070f8 <HAL_RCC_OscConfig+0x4b0>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0f0      	beq.n	8006f32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d106      	bne.n	8006f66 <HAL_RCC_OscConfig+0x31e>
 8006f58:	4b66      	ldr	r3, [pc, #408]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 8006f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f5c:	4a65      	ldr	r2, [pc, #404]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 8006f5e:	f043 0301 	orr.w	r3, r3, #1
 8006f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f64:	e01c      	b.n	8006fa0 <HAL_RCC_OscConfig+0x358>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	2b05      	cmp	r3, #5
 8006f6c:	d10c      	bne.n	8006f88 <HAL_RCC_OscConfig+0x340>
 8006f6e:	4b61      	ldr	r3, [pc, #388]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 8006f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f72:	4a60      	ldr	r2, [pc, #384]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 8006f74:	f043 0304 	orr.w	r3, r3, #4
 8006f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f7a:	4b5e      	ldr	r3, [pc, #376]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 8006f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f7e:	4a5d      	ldr	r2, [pc, #372]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 8006f80:	f043 0301 	orr.w	r3, r3, #1
 8006f84:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f86:	e00b      	b.n	8006fa0 <HAL_RCC_OscConfig+0x358>
 8006f88:	4b5a      	ldr	r3, [pc, #360]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 8006f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f8c:	4a59      	ldr	r2, [pc, #356]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 8006f8e:	f023 0301 	bic.w	r3, r3, #1
 8006f92:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f94:	4b57      	ldr	r3, [pc, #348]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 8006f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f98:	4a56      	ldr	r2, [pc, #344]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 8006f9a:	f023 0304 	bic.w	r3, r3, #4
 8006f9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d015      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fa8:	f7fd fc00 	bl	80047ac <HAL_GetTick>
 8006fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fae:	e00a      	b.n	8006fc6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fb0:	f7fd fbfc 	bl	80047ac <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d901      	bls.n	8006fc6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e0d7      	b.n	8007176 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fc6:	4b4b      	ldr	r3, [pc, #300]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 8006fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0ee      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x368>
 8006fd2:	e014      	b.n	8006ffe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fd4:	f7fd fbea 	bl	80047ac <HAL_GetTick>
 8006fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fda:	e00a      	b.n	8006ff2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fdc:	f7fd fbe6 	bl	80047ac <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d901      	bls.n	8006ff2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e0c1      	b.n	8007176 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ff2:	4b40      	ldr	r3, [pc, #256]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 8006ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ff6:	f003 0302 	and.w	r3, r3, #2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1ee      	bne.n	8006fdc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d105      	bne.n	8007010 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007004:	4b3b      	ldr	r3, [pc, #236]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 8007006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007008:	4a3a      	ldr	r2, [pc, #232]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 800700a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800700e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 80ad 	beq.w	8007174 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800701a:	4b36      	ldr	r3, [pc, #216]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f003 030c 	and.w	r3, r3, #12
 8007022:	2b08      	cmp	r3, #8
 8007024:	d060      	beq.n	80070e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	2b02      	cmp	r3, #2
 800702c:	d145      	bne.n	80070ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800702e:	4b33      	ldr	r3, [pc, #204]	@ (80070fc <HAL_RCC_OscConfig+0x4b4>)
 8007030:	2200      	movs	r2, #0
 8007032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007034:	f7fd fbba 	bl	80047ac <HAL_GetTick>
 8007038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800703a:	e008      	b.n	800704e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800703c:	f7fd fbb6 	bl	80047ac <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b02      	cmp	r3, #2
 8007048:	d901      	bls.n	800704e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e093      	b.n	8007176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800704e:	4b29      	ldr	r3, [pc, #164]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1f0      	bne.n	800703c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	69da      	ldr	r2, [r3, #28]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	431a      	orrs	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007068:	019b      	lsls	r3, r3, #6
 800706a:	431a      	orrs	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007070:	085b      	lsrs	r3, r3, #1
 8007072:	3b01      	subs	r3, #1
 8007074:	041b      	lsls	r3, r3, #16
 8007076:	431a      	orrs	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707c:	061b      	lsls	r3, r3, #24
 800707e:	431a      	orrs	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007084:	071b      	lsls	r3, r3, #28
 8007086:	491b      	ldr	r1, [pc, #108]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 8007088:	4313      	orrs	r3, r2
 800708a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800708c:	4b1b      	ldr	r3, [pc, #108]	@ (80070fc <HAL_RCC_OscConfig+0x4b4>)
 800708e:	2201      	movs	r2, #1
 8007090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007092:	f7fd fb8b 	bl	80047ac <HAL_GetTick>
 8007096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007098:	e008      	b.n	80070ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800709a:	f7fd fb87 	bl	80047ac <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d901      	bls.n	80070ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e064      	b.n	8007176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070ac:	4b11      	ldr	r3, [pc, #68]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d0f0      	beq.n	800709a <HAL_RCC_OscConfig+0x452>
 80070b8:	e05c      	b.n	8007174 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070ba:	4b10      	ldr	r3, [pc, #64]	@ (80070fc <HAL_RCC_OscConfig+0x4b4>)
 80070bc:	2200      	movs	r2, #0
 80070be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c0:	f7fd fb74 	bl	80047ac <HAL_GetTick>
 80070c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070c6:	e008      	b.n	80070da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070c8:	f7fd fb70 	bl	80047ac <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d901      	bls.n	80070da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e04d      	b.n	8007176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070da:	4b06      	ldr	r3, [pc, #24]	@ (80070f4 <HAL_RCC_OscConfig+0x4ac>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1f0      	bne.n	80070c8 <HAL_RCC_OscConfig+0x480>
 80070e6:	e045      	b.n	8007174 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d107      	bne.n	8007100 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e040      	b.n	8007176 <HAL_RCC_OscConfig+0x52e>
 80070f4:	40023800 	.word	0x40023800
 80070f8:	40007000 	.word	0x40007000
 80070fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007100:	4b1f      	ldr	r3, [pc, #124]	@ (8007180 <HAL_RCC_OscConfig+0x538>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d030      	beq.n	8007170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007118:	429a      	cmp	r2, r3
 800711a:	d129      	bne.n	8007170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007126:	429a      	cmp	r2, r3
 8007128:	d122      	bne.n	8007170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007130:	4013      	ands	r3, r2
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007136:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007138:	4293      	cmp	r3, r2
 800713a:	d119      	bne.n	8007170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007146:	085b      	lsrs	r3, r3, #1
 8007148:	3b01      	subs	r3, #1
 800714a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800714c:	429a      	cmp	r2, r3
 800714e:	d10f      	bne.n	8007170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800715a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800715c:	429a      	cmp	r2, r3
 800715e:	d107      	bne.n	8007170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800716a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800716c:	429a      	cmp	r2, r3
 800716e:	d001      	beq.n	8007174 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e000      	b.n	8007176 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	40023800 	.word	0x40023800

08007184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e041      	b.n	800721a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d106      	bne.n	80071b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7fd f806 	bl	80041bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2202      	movs	r2, #2
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	3304      	adds	r3, #4
 80071c0:	4619      	mov	r1, r3
 80071c2:	4610      	mov	r0, r2
 80071c4:	f000 fb9a 	bl	80078fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
	...

08007224 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b01      	cmp	r3, #1
 8007236:	d001      	beq.n	800723c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e04e      	b.n	80072da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2202      	movs	r2, #2
 8007240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68da      	ldr	r2, [r3, #12]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f042 0201 	orr.w	r2, r2, #1
 8007252:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a23      	ldr	r2, [pc, #140]	@ (80072e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d022      	beq.n	80072a4 <HAL_TIM_Base_Start_IT+0x80>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007266:	d01d      	beq.n	80072a4 <HAL_TIM_Base_Start_IT+0x80>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a1f      	ldr	r2, [pc, #124]	@ (80072ec <HAL_TIM_Base_Start_IT+0xc8>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d018      	beq.n	80072a4 <HAL_TIM_Base_Start_IT+0x80>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a1e      	ldr	r2, [pc, #120]	@ (80072f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d013      	beq.n	80072a4 <HAL_TIM_Base_Start_IT+0x80>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a1c      	ldr	r2, [pc, #112]	@ (80072f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d00e      	beq.n	80072a4 <HAL_TIM_Base_Start_IT+0x80>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a1b      	ldr	r2, [pc, #108]	@ (80072f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d009      	beq.n	80072a4 <HAL_TIM_Base_Start_IT+0x80>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a19      	ldr	r2, [pc, #100]	@ (80072fc <HAL_TIM_Base_Start_IT+0xd8>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d004      	beq.n	80072a4 <HAL_TIM_Base_Start_IT+0x80>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a18      	ldr	r2, [pc, #96]	@ (8007300 <HAL_TIM_Base_Start_IT+0xdc>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d111      	bne.n	80072c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f003 0307 	and.w	r3, r3, #7
 80072ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2b06      	cmp	r3, #6
 80072b4:	d010      	beq.n	80072d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f042 0201 	orr.w	r2, r2, #1
 80072c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c6:	e007      	b.n	80072d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f042 0201 	orr.w	r2, r2, #1
 80072d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	40010000 	.word	0x40010000
 80072ec:	40000400 	.word	0x40000400
 80072f0:	40000800 	.word	0x40000800
 80072f4:	40000c00 	.word	0x40000c00
 80072f8:	40010400 	.word	0x40010400
 80072fc:	40014000 	.word	0x40014000
 8007300:	40001800 	.word	0x40001800

08007304 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e041      	b.n	800739a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d106      	bne.n	8007330 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f839 	bl	80073a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3304      	adds	r3, #4
 8007340:	4619      	mov	r1, r3
 8007342:	4610      	mov	r0, r2
 8007344:	f000 fada 	bl	80078fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b083      	sub	sp, #12
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80073aa:	bf00      	nop
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b084      	sub	sp, #16
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d020      	beq.n	800741a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d01b      	beq.n	800741a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f06f 0202 	mvn.w	r2, #2
 80073ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	f003 0303 	and.w	r3, r3, #3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fa5c 	bl	80078be <HAL_TIM_IC_CaptureCallback>
 8007406:	e005      	b.n	8007414 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fa4e 	bl	80078aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fa5f 	bl	80078d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	f003 0304 	and.w	r3, r3, #4
 8007420:	2b00      	cmp	r3, #0
 8007422:	d020      	beq.n	8007466 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f003 0304 	and.w	r3, r3, #4
 800742a:	2b00      	cmp	r3, #0
 800742c:	d01b      	beq.n	8007466 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f06f 0204 	mvn.w	r2, #4
 8007436:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2202      	movs	r2, #2
 800743c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fa36 	bl	80078be <HAL_TIM_IC_CaptureCallback>
 8007452:	e005      	b.n	8007460 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fa28 	bl	80078aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fa39 	bl	80078d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	f003 0308 	and.w	r3, r3, #8
 800746c:	2b00      	cmp	r3, #0
 800746e:	d020      	beq.n	80074b2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f003 0308 	and.w	r3, r3, #8
 8007476:	2b00      	cmp	r3, #0
 8007478:	d01b      	beq.n	80074b2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f06f 0208 	mvn.w	r2, #8
 8007482:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2204      	movs	r2, #4
 8007488:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	69db      	ldr	r3, [r3, #28]
 8007490:	f003 0303 	and.w	r3, r3, #3
 8007494:	2b00      	cmp	r3, #0
 8007496:	d003      	beq.n	80074a0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fa10 	bl	80078be <HAL_TIM_IC_CaptureCallback>
 800749e:	e005      	b.n	80074ac <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fa02 	bl	80078aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fa13 	bl	80078d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	f003 0310 	and.w	r3, r3, #16
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d020      	beq.n	80074fe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f003 0310 	and.w	r3, r3, #16
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d01b      	beq.n	80074fe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f06f 0210 	mvn.w	r2, #16
 80074ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2208      	movs	r2, #8
 80074d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	69db      	ldr	r3, [r3, #28]
 80074dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d003      	beq.n	80074ec <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f9ea 	bl	80078be <HAL_TIM_IC_CaptureCallback>
 80074ea:	e005      	b.n	80074f8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f9dc 	bl	80078aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f9ed 	bl	80078d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00c      	beq.n	8007522 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	d007      	beq.n	8007522 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f06f 0201 	mvn.w	r2, #1
 800751a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f7f9 fdc5 	bl	80010ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00c      	beq.n	8007546 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007532:	2b00      	cmp	r3, #0
 8007534:	d007      	beq.n	8007546 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800753e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fd57 	bl	8007ff4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00c      	beq.n	800756a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007556:	2b00      	cmp	r3, #0
 8007558:	d007      	beq.n	800756a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f9be 	bl	80078e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	f003 0320 	and.w	r3, r3, #32
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00c      	beq.n	800758e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f003 0320 	and.w	r3, r3, #32
 800757a:	2b00      	cmp	r3, #0
 800757c:	d007      	beq.n	800758e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f06f 0220 	mvn.w	r2, #32
 8007586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fd29 	bl	8007fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800758e:	bf00      	nop
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d101      	bne.n	80075b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075b2:	2302      	movs	r3, #2
 80075b4:	e0ae      	b.n	8007714 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b0c      	cmp	r3, #12
 80075c2:	f200 809f 	bhi.w	8007704 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80075c6:	a201      	add	r2, pc, #4	@ (adr r2, 80075cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80075c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075cc:	08007601 	.word	0x08007601
 80075d0:	08007705 	.word	0x08007705
 80075d4:	08007705 	.word	0x08007705
 80075d8:	08007705 	.word	0x08007705
 80075dc:	08007641 	.word	0x08007641
 80075e0:	08007705 	.word	0x08007705
 80075e4:	08007705 	.word	0x08007705
 80075e8:	08007705 	.word	0x08007705
 80075ec:	08007683 	.word	0x08007683
 80075f0:	08007705 	.word	0x08007705
 80075f4:	08007705 	.word	0x08007705
 80075f8:	08007705 	.word	0x08007705
 80075fc:	080076c3 	.word	0x080076c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68b9      	ldr	r1, [r7, #8]
 8007606:	4618      	mov	r0, r3
 8007608:	f000 fa24 	bl	8007a54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	699a      	ldr	r2, [r3, #24]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f042 0208 	orr.w	r2, r2, #8
 800761a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699a      	ldr	r2, [r3, #24]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f022 0204 	bic.w	r2, r2, #4
 800762a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6999      	ldr	r1, [r3, #24]
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	691a      	ldr	r2, [r3, #16]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	619a      	str	r2, [r3, #24]
      break;
 800763e:	e064      	b.n	800770a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68b9      	ldr	r1, [r7, #8]
 8007646:	4618      	mov	r0, r3
 8007648:	f000 fa74 	bl	8007b34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	699a      	ldr	r2, [r3, #24]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800765a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	699a      	ldr	r2, [r3, #24]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800766a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6999      	ldr	r1, [r3, #24]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	021a      	lsls	r2, r3, #8
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	430a      	orrs	r2, r1
 800767e:	619a      	str	r2, [r3, #24]
      break;
 8007680:	e043      	b.n	800770a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68b9      	ldr	r1, [r7, #8]
 8007688:	4618      	mov	r0, r3
 800768a:	f000 fac9 	bl	8007c20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	69da      	ldr	r2, [r3, #28]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f042 0208 	orr.w	r2, r2, #8
 800769c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	69da      	ldr	r2, [r3, #28]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f022 0204 	bic.w	r2, r2, #4
 80076ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	69d9      	ldr	r1, [r3, #28]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	691a      	ldr	r2, [r3, #16]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	61da      	str	r2, [r3, #28]
      break;
 80076c0:	e023      	b.n	800770a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68b9      	ldr	r1, [r7, #8]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 fb1d 	bl	8007d08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	69da      	ldr	r2, [r3, #28]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	69da      	ldr	r2, [r3, #28]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	69d9      	ldr	r1, [r3, #28]
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	021a      	lsls	r2, r3, #8
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	61da      	str	r2, [r3, #28]
      break;
 8007702:	e002      	b.n	800770a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	75fb      	strb	r3, [r7, #23]
      break;
 8007708:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007712:	7dfb      	ldrb	r3, [r7, #23]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3718      	adds	r7, #24
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007730:	2b01      	cmp	r3, #1
 8007732:	d101      	bne.n	8007738 <HAL_TIM_ConfigClockSource+0x1c>
 8007734:	2302      	movs	r3, #2
 8007736:	e0b4      	b.n	80078a2 <HAL_TIM_ConfigClockSource+0x186>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800775e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007770:	d03e      	beq.n	80077f0 <HAL_TIM_ConfigClockSource+0xd4>
 8007772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007776:	f200 8087 	bhi.w	8007888 <HAL_TIM_ConfigClockSource+0x16c>
 800777a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800777e:	f000 8086 	beq.w	800788e <HAL_TIM_ConfigClockSource+0x172>
 8007782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007786:	d87f      	bhi.n	8007888 <HAL_TIM_ConfigClockSource+0x16c>
 8007788:	2b70      	cmp	r3, #112	@ 0x70
 800778a:	d01a      	beq.n	80077c2 <HAL_TIM_ConfigClockSource+0xa6>
 800778c:	2b70      	cmp	r3, #112	@ 0x70
 800778e:	d87b      	bhi.n	8007888 <HAL_TIM_ConfigClockSource+0x16c>
 8007790:	2b60      	cmp	r3, #96	@ 0x60
 8007792:	d050      	beq.n	8007836 <HAL_TIM_ConfigClockSource+0x11a>
 8007794:	2b60      	cmp	r3, #96	@ 0x60
 8007796:	d877      	bhi.n	8007888 <HAL_TIM_ConfigClockSource+0x16c>
 8007798:	2b50      	cmp	r3, #80	@ 0x50
 800779a:	d03c      	beq.n	8007816 <HAL_TIM_ConfigClockSource+0xfa>
 800779c:	2b50      	cmp	r3, #80	@ 0x50
 800779e:	d873      	bhi.n	8007888 <HAL_TIM_ConfigClockSource+0x16c>
 80077a0:	2b40      	cmp	r3, #64	@ 0x40
 80077a2:	d058      	beq.n	8007856 <HAL_TIM_ConfigClockSource+0x13a>
 80077a4:	2b40      	cmp	r3, #64	@ 0x40
 80077a6:	d86f      	bhi.n	8007888 <HAL_TIM_ConfigClockSource+0x16c>
 80077a8:	2b30      	cmp	r3, #48	@ 0x30
 80077aa:	d064      	beq.n	8007876 <HAL_TIM_ConfigClockSource+0x15a>
 80077ac:	2b30      	cmp	r3, #48	@ 0x30
 80077ae:	d86b      	bhi.n	8007888 <HAL_TIM_ConfigClockSource+0x16c>
 80077b0:	2b20      	cmp	r3, #32
 80077b2:	d060      	beq.n	8007876 <HAL_TIM_ConfigClockSource+0x15a>
 80077b4:	2b20      	cmp	r3, #32
 80077b6:	d867      	bhi.n	8007888 <HAL_TIM_ConfigClockSource+0x16c>
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d05c      	beq.n	8007876 <HAL_TIM_ConfigClockSource+0x15a>
 80077bc:	2b10      	cmp	r3, #16
 80077be:	d05a      	beq.n	8007876 <HAL_TIM_ConfigClockSource+0x15a>
 80077c0:	e062      	b.n	8007888 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80077d2:	f000 fb69 	bl	8007ea8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80077e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	609a      	str	r2, [r3, #8]
      break;
 80077ee:	e04f      	b.n	8007890 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007800:	f000 fb52 	bl	8007ea8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689a      	ldr	r2, [r3, #8]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007812:	609a      	str	r2, [r3, #8]
      break;
 8007814:	e03c      	b.n	8007890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007822:	461a      	mov	r2, r3
 8007824:	f000 fac6 	bl	8007db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2150      	movs	r1, #80	@ 0x50
 800782e:	4618      	mov	r0, r3
 8007830:	f000 fb1f 	bl	8007e72 <TIM_ITRx_SetConfig>
      break;
 8007834:	e02c      	b.n	8007890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007842:	461a      	mov	r2, r3
 8007844:	f000 fae5 	bl	8007e12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2160      	movs	r1, #96	@ 0x60
 800784e:	4618      	mov	r0, r3
 8007850:	f000 fb0f 	bl	8007e72 <TIM_ITRx_SetConfig>
      break;
 8007854:	e01c      	b.n	8007890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007862:	461a      	mov	r2, r3
 8007864:	f000 faa6 	bl	8007db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2140      	movs	r1, #64	@ 0x40
 800786e:	4618      	mov	r0, r3
 8007870:	f000 faff 	bl	8007e72 <TIM_ITRx_SetConfig>
      break;
 8007874:	e00c      	b.n	8007890 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4619      	mov	r1, r3
 8007880:	4610      	mov	r0, r2
 8007882:	f000 faf6 	bl	8007e72 <TIM_ITRx_SetConfig>
      break;
 8007886:	e003      	b.n	8007890 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	73fb      	strb	r3, [r7, #15]
      break;
 800788c:	e000      	b.n	8007890 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800788e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b083      	sub	sp, #12
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078b2:	bf00      	nop
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078be:	b480      	push	{r7}
 80078c0:	b083      	sub	sp, #12
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078c6:	bf00      	nop
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b083      	sub	sp, #12
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078da:	bf00      	nop
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b083      	sub	sp, #12
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078ee:	bf00      	nop
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
	...

080078fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a46      	ldr	r2, [pc, #280]	@ (8007a28 <TIM_Base_SetConfig+0x12c>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d013      	beq.n	800793c <TIM_Base_SetConfig+0x40>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800791a:	d00f      	beq.n	800793c <TIM_Base_SetConfig+0x40>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a43      	ldr	r2, [pc, #268]	@ (8007a2c <TIM_Base_SetConfig+0x130>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d00b      	beq.n	800793c <TIM_Base_SetConfig+0x40>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a42      	ldr	r2, [pc, #264]	@ (8007a30 <TIM_Base_SetConfig+0x134>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d007      	beq.n	800793c <TIM_Base_SetConfig+0x40>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a41      	ldr	r2, [pc, #260]	@ (8007a34 <TIM_Base_SetConfig+0x138>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d003      	beq.n	800793c <TIM_Base_SetConfig+0x40>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a40      	ldr	r2, [pc, #256]	@ (8007a38 <TIM_Base_SetConfig+0x13c>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d108      	bne.n	800794e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	4313      	orrs	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a35      	ldr	r2, [pc, #212]	@ (8007a28 <TIM_Base_SetConfig+0x12c>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d02b      	beq.n	80079ae <TIM_Base_SetConfig+0xb2>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800795c:	d027      	beq.n	80079ae <TIM_Base_SetConfig+0xb2>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a32      	ldr	r2, [pc, #200]	@ (8007a2c <TIM_Base_SetConfig+0x130>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d023      	beq.n	80079ae <TIM_Base_SetConfig+0xb2>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a31      	ldr	r2, [pc, #196]	@ (8007a30 <TIM_Base_SetConfig+0x134>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d01f      	beq.n	80079ae <TIM_Base_SetConfig+0xb2>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a30      	ldr	r2, [pc, #192]	@ (8007a34 <TIM_Base_SetConfig+0x138>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d01b      	beq.n	80079ae <TIM_Base_SetConfig+0xb2>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a2f      	ldr	r2, [pc, #188]	@ (8007a38 <TIM_Base_SetConfig+0x13c>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d017      	beq.n	80079ae <TIM_Base_SetConfig+0xb2>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a2e      	ldr	r2, [pc, #184]	@ (8007a3c <TIM_Base_SetConfig+0x140>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d013      	beq.n	80079ae <TIM_Base_SetConfig+0xb2>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a2d      	ldr	r2, [pc, #180]	@ (8007a40 <TIM_Base_SetConfig+0x144>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d00f      	beq.n	80079ae <TIM_Base_SetConfig+0xb2>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a2c      	ldr	r2, [pc, #176]	@ (8007a44 <TIM_Base_SetConfig+0x148>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d00b      	beq.n	80079ae <TIM_Base_SetConfig+0xb2>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a2b      	ldr	r2, [pc, #172]	@ (8007a48 <TIM_Base_SetConfig+0x14c>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d007      	beq.n	80079ae <TIM_Base_SetConfig+0xb2>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a2a      	ldr	r2, [pc, #168]	@ (8007a4c <TIM_Base_SetConfig+0x150>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d003      	beq.n	80079ae <TIM_Base_SetConfig+0xb2>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a29      	ldr	r2, [pc, #164]	@ (8007a50 <TIM_Base_SetConfig+0x154>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d108      	bne.n	80079c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	4313      	orrs	r3, r2
 80079be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	689a      	ldr	r2, [r3, #8]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a10      	ldr	r2, [pc, #64]	@ (8007a28 <TIM_Base_SetConfig+0x12c>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d003      	beq.n	80079f4 <TIM_Base_SetConfig+0xf8>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a12      	ldr	r2, [pc, #72]	@ (8007a38 <TIM_Base_SetConfig+0x13c>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d103      	bne.n	80079fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	691a      	ldr	r2, [r3, #16]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d105      	bne.n	8007a1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	f023 0201 	bic.w	r2, r3, #1
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	611a      	str	r2, [r3, #16]
  }
}
 8007a1a:	bf00      	nop
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	40010000 	.word	0x40010000
 8007a2c:	40000400 	.word	0x40000400
 8007a30:	40000800 	.word	0x40000800
 8007a34:	40000c00 	.word	0x40000c00
 8007a38:	40010400 	.word	0x40010400
 8007a3c:	40014000 	.word	0x40014000
 8007a40:	40014400 	.word	0x40014400
 8007a44:	40014800 	.word	0x40014800
 8007a48:	40001800 	.word	0x40001800
 8007a4c:	40001c00 	.word	0x40001c00
 8007a50:	40002000 	.word	0x40002000

08007a54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b087      	sub	sp, #28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a1b      	ldr	r3, [r3, #32]
 8007a68:	f023 0201 	bic.w	r2, r3, #1
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f023 0303 	bic.w	r3, r3, #3
 8007a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f023 0302 	bic.w	r3, r3, #2
 8007a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a20      	ldr	r2, [pc, #128]	@ (8007b2c <TIM_OC1_SetConfig+0xd8>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d003      	beq.n	8007ab8 <TIM_OC1_SetConfig+0x64>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a1f      	ldr	r2, [pc, #124]	@ (8007b30 <TIM_OC1_SetConfig+0xdc>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d10c      	bne.n	8007ad2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f023 0308 	bic.w	r3, r3, #8
 8007abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	697a      	ldr	r2, [r7, #20]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f023 0304 	bic.w	r3, r3, #4
 8007ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a15      	ldr	r2, [pc, #84]	@ (8007b2c <TIM_OC1_SetConfig+0xd8>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d003      	beq.n	8007ae2 <TIM_OC1_SetConfig+0x8e>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a14      	ldr	r2, [pc, #80]	@ (8007b30 <TIM_OC1_SetConfig+0xdc>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d111      	bne.n	8007b06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	621a      	str	r2, [r3, #32]
}
 8007b20:	bf00      	nop
 8007b22:	371c      	adds	r7, #28
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	40010000 	.word	0x40010000
 8007b30:	40010400 	.word	0x40010400

08007b34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a1b      	ldr	r3, [r3, #32]
 8007b48:	f023 0210 	bic.w	r2, r3, #16
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	021b      	lsls	r3, r3, #8
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	f023 0320 	bic.w	r3, r3, #32
 8007b7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	011b      	lsls	r3, r3, #4
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a22      	ldr	r2, [pc, #136]	@ (8007c18 <TIM_OC2_SetConfig+0xe4>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d003      	beq.n	8007b9c <TIM_OC2_SetConfig+0x68>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a21      	ldr	r2, [pc, #132]	@ (8007c1c <TIM_OC2_SetConfig+0xe8>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d10d      	bne.n	8007bb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	011b      	lsls	r3, r3, #4
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a17      	ldr	r2, [pc, #92]	@ (8007c18 <TIM_OC2_SetConfig+0xe4>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d003      	beq.n	8007bc8 <TIM_OC2_SetConfig+0x94>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a16      	ldr	r2, [pc, #88]	@ (8007c1c <TIM_OC2_SetConfig+0xe8>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d113      	bne.n	8007bf0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007bce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	693a      	ldr	r2, [r7, #16]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	621a      	str	r2, [r3, #32]
}
 8007c0a:	bf00      	nop
 8007c0c:	371c      	adds	r7, #28
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	40010000 	.word	0x40010000
 8007c1c:	40010400 	.word	0x40010400

08007c20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b087      	sub	sp, #28
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a1b      	ldr	r3, [r3, #32]
 8007c34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f023 0303 	bic.w	r3, r3, #3
 8007c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	021b      	lsls	r3, r3, #8
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a21      	ldr	r2, [pc, #132]	@ (8007d00 <TIM_OC3_SetConfig+0xe0>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d003      	beq.n	8007c86 <TIM_OC3_SetConfig+0x66>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a20      	ldr	r2, [pc, #128]	@ (8007d04 <TIM_OC3_SetConfig+0xe4>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d10d      	bne.n	8007ca2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	021b      	lsls	r3, r3, #8
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a16      	ldr	r2, [pc, #88]	@ (8007d00 <TIM_OC3_SetConfig+0xe0>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d003      	beq.n	8007cb2 <TIM_OC3_SetConfig+0x92>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a15      	ldr	r2, [pc, #84]	@ (8007d04 <TIM_OC3_SetConfig+0xe4>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d113      	bne.n	8007cda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	011b      	lsls	r3, r3, #4
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	621a      	str	r2, [r3, #32]
}
 8007cf4:	bf00      	nop
 8007cf6:	371c      	adds	r7, #28
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	40010000 	.word	0x40010000
 8007d04:	40010400 	.word	0x40010400

08007d08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a1b      	ldr	r3, [r3, #32]
 8007d1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	021b      	lsls	r3, r3, #8
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	031b      	lsls	r3, r3, #12
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a12      	ldr	r2, [pc, #72]	@ (8007dac <TIM_OC4_SetConfig+0xa4>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d003      	beq.n	8007d70 <TIM_OC4_SetConfig+0x68>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a11      	ldr	r2, [pc, #68]	@ (8007db0 <TIM_OC4_SetConfig+0xa8>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d109      	bne.n	8007d84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	695b      	ldr	r3, [r3, #20]
 8007d7c:	019b      	lsls	r3, r3, #6
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	685a      	ldr	r2, [r3, #4]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	621a      	str	r2, [r3, #32]
}
 8007d9e:	bf00      	nop
 8007da0:	371c      	adds	r7, #28
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	40010000 	.word	0x40010000
 8007db0:	40010400 	.word	0x40010400

08007db4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b087      	sub	sp, #28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	f023 0201 	bic.w	r2, r3, #1
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	011b      	lsls	r3, r3, #4
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f023 030a 	bic.w	r3, r3, #10
 8007df0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	621a      	str	r2, [r3, #32]
}
 8007e06:	bf00      	nop
 8007e08:	371c      	adds	r7, #28
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b087      	sub	sp, #28
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	60f8      	str	r0, [r7, #12]
 8007e1a:	60b9      	str	r1, [r7, #8]
 8007e1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6a1b      	ldr	r3, [r3, #32]
 8007e28:	f023 0210 	bic.w	r2, r3, #16
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007e3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	031b      	lsls	r3, r3, #12
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007e4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	011b      	lsls	r3, r3, #4
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	621a      	str	r2, [r3, #32]
}
 8007e66:	bf00      	nop
 8007e68:	371c      	adds	r7, #28
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b085      	sub	sp, #20
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e8a:	683a      	ldr	r2, [r7, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	f043 0307 	orr.w	r3, r3, #7
 8007e94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	609a      	str	r2, [r3, #8]
}
 8007e9c:	bf00      	nop
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b087      	sub	sp, #28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
 8007eb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ec2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	021a      	lsls	r2, r3, #8
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	431a      	orrs	r2, r3
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	609a      	str	r2, [r3, #8]
}
 8007edc:	bf00      	nop
 8007ede:	371c      	adds	r7, #28
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d101      	bne.n	8007f00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007efc:	2302      	movs	r3, #2
 8007efe:	e05a      	b.n	8007fb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a21      	ldr	r2, [pc, #132]	@ (8007fc4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d022      	beq.n	8007f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f4c:	d01d      	beq.n	8007f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a1d      	ldr	r2, [pc, #116]	@ (8007fc8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d018      	beq.n	8007f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8007fcc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d013      	beq.n	8007f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a1a      	ldr	r2, [pc, #104]	@ (8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d00e      	beq.n	8007f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a18      	ldr	r2, [pc, #96]	@ (8007fd4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d009      	beq.n	8007f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a17      	ldr	r2, [pc, #92]	@ (8007fd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d004      	beq.n	8007f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a15      	ldr	r2, [pc, #84]	@ (8007fdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d10c      	bne.n	8007fa4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	40010000 	.word	0x40010000
 8007fc8:	40000400 	.word	0x40000400
 8007fcc:	40000800 	.word	0x40000800
 8007fd0:	40000c00 	.word	0x40000c00
 8007fd4:	40010400 	.word	0x40010400
 8007fd8:	40014000 	.word	0x40014000
 8007fdc:	40001800 	.word	0x40001800

08007fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e042      	b.n	80080a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d106      	bne.n	8008034 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7fc f93a 	bl	80042a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2224      	movs	r2, #36	@ 0x24
 8008038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68da      	ldr	r2, [r3, #12]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800804a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fc19 	bl	8008884 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	691a      	ldr	r2, [r3, #16]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008060:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	695a      	ldr	r2, [r3, #20]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008070:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68da      	ldr	r2, [r3, #12]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008080:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2220      	movs	r2, #32
 800808c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2220      	movs	r2, #32
 8008094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b08a      	sub	sp, #40	@ 0x28
 80080ac:	af02      	add	r7, sp, #8
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	603b      	str	r3, [r7, #0]
 80080b4:	4613      	mov	r3, r2
 80080b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80080b8:	2300      	movs	r3, #0
 80080ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b20      	cmp	r3, #32
 80080c6:	d175      	bne.n	80081b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d002      	beq.n	80080d4 <HAL_UART_Transmit+0x2c>
 80080ce:	88fb      	ldrh	r3, [r7, #6]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d101      	bne.n	80080d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e06e      	b.n	80081b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2221      	movs	r2, #33	@ 0x21
 80080e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80080e6:	f7fc fb61 	bl	80047ac <HAL_GetTick>
 80080ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	88fa      	ldrh	r2, [r7, #6]
 80080f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	88fa      	ldrh	r2, [r7, #6]
 80080f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008100:	d108      	bne.n	8008114 <HAL_UART_Transmit+0x6c>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d104      	bne.n	8008114 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800810a:	2300      	movs	r3, #0
 800810c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	61bb      	str	r3, [r7, #24]
 8008112:	e003      	b.n	800811c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008118:	2300      	movs	r3, #0
 800811a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800811c:	e02e      	b.n	800817c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	2200      	movs	r2, #0
 8008126:	2180      	movs	r1, #128	@ 0x80
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 fa2c 	bl	8008586 <UART_WaitOnFlagUntilTimeout>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d005      	beq.n	8008140 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2220      	movs	r2, #32
 8008138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800813c:	2303      	movs	r3, #3
 800813e:	e03a      	b.n	80081b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10b      	bne.n	800815e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	881b      	ldrh	r3, [r3, #0]
 800814a:	461a      	mov	r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008154:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	3302      	adds	r3, #2
 800815a:	61bb      	str	r3, [r7, #24]
 800815c:	e007      	b.n	800816e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	781a      	ldrb	r2, [r3, #0]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	3301      	adds	r3, #1
 800816c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008172:	b29b      	uxth	r3, r3
 8008174:	3b01      	subs	r3, #1
 8008176:	b29a      	uxth	r2, r3
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008180:	b29b      	uxth	r3, r3
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1cb      	bne.n	800811e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	2200      	movs	r2, #0
 800818e:	2140      	movs	r1, #64	@ 0x40
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f000 f9f8 	bl	8008586 <UART_WaitOnFlagUntilTimeout>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d005      	beq.n	80081a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2220      	movs	r2, #32
 80081a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e006      	b.n	80081b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2220      	movs	r2, #32
 80081ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	e000      	b.n	80081b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80081b4:	2302      	movs	r3, #2
  }
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3720      	adds	r7, #32
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b08a      	sub	sp, #40	@ 0x28
 80081c2:	af02      	add	r7, sp, #8
 80081c4:	60f8      	str	r0, [r7, #12]
 80081c6:	60b9      	str	r1, [r7, #8]
 80081c8:	603b      	str	r3, [r7, #0]
 80081ca:	4613      	mov	r3, r2
 80081cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b20      	cmp	r3, #32
 80081dc:	f040 8081 	bne.w	80082e2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d002      	beq.n	80081ec <HAL_UART_Receive+0x2e>
 80081e6:	88fb      	ldrh	r3, [r7, #6]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d101      	bne.n	80081f0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e079      	b.n	80082e4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2222      	movs	r2, #34	@ 0x22
 80081fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008204:	f7fc fad2 	bl	80047ac <HAL_GetTick>
 8008208:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	88fa      	ldrh	r2, [r7, #6]
 800820e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	88fa      	ldrh	r2, [r7, #6]
 8008214:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800821e:	d108      	bne.n	8008232 <HAL_UART_Receive+0x74>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d104      	bne.n	8008232 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8008228:	2300      	movs	r3, #0
 800822a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	61bb      	str	r3, [r7, #24]
 8008230:	e003      	b.n	800823a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008236:	2300      	movs	r3, #0
 8008238:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800823a:	e047      	b.n	80082cc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	2200      	movs	r2, #0
 8008244:	2120      	movs	r1, #32
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f000 f99d 	bl	8008586 <UART_WaitOnFlagUntilTimeout>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d005      	beq.n	800825e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2220      	movs	r2, #32
 8008256:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e042      	b.n	80082e4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10c      	bne.n	800827e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	b29b      	uxth	r3, r3
 800826c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008270:	b29a      	uxth	r2, r3
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	3302      	adds	r3, #2
 800827a:	61bb      	str	r3, [r7, #24]
 800827c:	e01f      	b.n	80082be <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008286:	d007      	beq.n	8008298 <HAL_UART_Receive+0xda>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10a      	bne.n	80082a6 <HAL_UART_Receive+0xe8>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d106      	bne.n	80082a6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	701a      	strb	r2, [r3, #0]
 80082a4:	e008      	b.n	80082b8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082b2:	b2da      	uxtb	r2, r3
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	3301      	adds	r3, #1
 80082bc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	3b01      	subs	r3, #1
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1b2      	bne.n	800823c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2220      	movs	r2, #32
 80082da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80082de:	2300      	movs	r3, #0
 80082e0:	e000      	b.n	80082e4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80082e2:	2302      	movs	r3, #2
  }
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3720      	adds	r7, #32
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	4613      	mov	r3, r2
 80082f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008300:	b2db      	uxtb	r3, r3
 8008302:	2b20      	cmp	r3, #32
 8008304:	d112      	bne.n	800832c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d002      	beq.n	8008312 <HAL_UART_Receive_DMA+0x26>
 800830c:	88fb      	ldrh	r3, [r7, #6]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e00b      	b.n	800832e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800831c:	88fb      	ldrh	r3, [r7, #6]
 800831e:	461a      	mov	r2, r3
 8008320:	68b9      	ldr	r1, [r7, #8]
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f000 f988 	bl	8008638 <UART_Start_Receive_DMA>
 8008328:	4603      	mov	r3, r0
 800832a:	e000      	b.n	800832e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800832c:	2302      	movs	r3, #2
  }
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008336:	b480      	push	{r7}
 8008338:	b083      	sub	sp, #12
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800833e:	bf00      	nop
 8008340:	370c      	adds	r7, #12
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800834a:	b480      	push	{r7}
 800834c:	b083      	sub	sp, #12
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008352:	bf00      	nop
 8008354:	370c      	adds	r7, #12
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr

0800835e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800835e:	b480      	push	{r7}
 8008360:	b083      	sub	sp, #12
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008366:	bf00      	nop
 8008368:	370c      	adds	r7, #12
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr

08008372 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008372:	b480      	push	{r7}
 8008374:	b083      	sub	sp, #12
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	460b      	mov	r3, r1
 800837c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800837e:	bf00      	nop
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b09c      	sub	sp, #112	@ 0x70
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008396:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d172      	bne.n	800848c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80083a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083a8:	2200      	movs	r2, #0
 80083aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	330c      	adds	r3, #12
 80083b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083b6:	e853 3f00 	ldrex	r3, [r3]
 80083ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80083bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	330c      	adds	r3, #12
 80083ca:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80083cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80083ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80083d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083d4:	e841 2300 	strex	r3, r2, [r1]
 80083d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80083da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1e5      	bne.n	80083ac <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	3314      	adds	r3, #20
 80083e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ea:	e853 3f00 	ldrex	r3, [r3]
 80083ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80083f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083f2:	f023 0301 	bic.w	r3, r3, #1
 80083f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80083f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3314      	adds	r3, #20
 80083fe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008400:	647a      	str	r2, [r7, #68]	@ 0x44
 8008402:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008404:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008406:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008408:	e841 2300 	strex	r3, r2, [r1]
 800840c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800840e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1e5      	bne.n	80083e0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	3314      	adds	r3, #20
 800841a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800841e:	e853 3f00 	ldrex	r3, [r3]
 8008422:	623b      	str	r3, [r7, #32]
   return(result);
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800842a:	663b      	str	r3, [r7, #96]	@ 0x60
 800842c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	3314      	adds	r3, #20
 8008432:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008434:	633a      	str	r2, [r7, #48]	@ 0x30
 8008436:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008438:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800843a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800843c:	e841 2300 	strex	r3, r2, [r1]
 8008440:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008444:	2b00      	cmp	r3, #0
 8008446:	d1e5      	bne.n	8008414 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008448:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800844a:	2220      	movs	r2, #32
 800844c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008454:	2b01      	cmp	r3, #1
 8008456:	d119      	bne.n	800848c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008458:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	330c      	adds	r3, #12
 800845e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	e853 3f00 	ldrex	r3, [r3]
 8008466:	60fb      	str	r3, [r7, #12]
   return(result);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f023 0310 	bic.w	r3, r3, #16
 800846e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008470:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	330c      	adds	r3, #12
 8008476:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008478:	61fa      	str	r2, [r7, #28]
 800847a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847c:	69b9      	ldr	r1, [r7, #24]
 800847e:	69fa      	ldr	r2, [r7, #28]
 8008480:	e841 2300 	strex	r3, r2, [r1]
 8008484:	617b      	str	r3, [r7, #20]
   return(result);
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1e5      	bne.n	8008458 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800848c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800848e:	2200      	movs	r2, #0
 8008490:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008496:	2b01      	cmp	r3, #1
 8008498:	d106      	bne.n	80084a8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800849a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800849c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800849e:	4619      	mov	r1, r3
 80084a0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80084a2:	f7ff ff66 	bl	8008372 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80084a6:	e002      	b.n	80084ae <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80084a8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80084aa:	f7ff ff44 	bl	8008336 <HAL_UART_RxCpltCallback>
}
 80084ae:	bf00      	nop
 80084b0:	3770      	adds	r7, #112	@ 0x70
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2201      	movs	r2, #1
 80084c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d108      	bne.n	80084e4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80084d6:	085b      	lsrs	r3, r3, #1
 80084d8:	b29b      	uxth	r3, r3
 80084da:	4619      	mov	r1, r3
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f7ff ff48 	bl	8008372 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80084e2:	e002      	b.n	80084ea <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f7ff ff30 	bl	800834a <HAL_UART_RxHalfCpltCallback>
}
 80084ea:	bf00      	nop
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80084fa:	2300      	movs	r3, #0
 80084fc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008502:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800850e:	2b80      	cmp	r3, #128	@ 0x80
 8008510:	bf0c      	ite	eq
 8008512:	2301      	moveq	r3, #1
 8008514:	2300      	movne	r3, #0
 8008516:	b2db      	uxtb	r3, r3
 8008518:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b21      	cmp	r3, #33	@ 0x21
 8008524:	d108      	bne.n	8008538 <UART_DMAError+0x46>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d005      	beq.n	8008538 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	2200      	movs	r2, #0
 8008530:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008532:	68b8      	ldr	r0, [r7, #8]
 8008534:	f000 f91a 	bl	800876c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008542:	2b40      	cmp	r3, #64	@ 0x40
 8008544:	bf0c      	ite	eq
 8008546:	2301      	moveq	r3, #1
 8008548:	2300      	movne	r3, #0
 800854a:	b2db      	uxtb	r3, r3
 800854c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008554:	b2db      	uxtb	r3, r3
 8008556:	2b22      	cmp	r3, #34	@ 0x22
 8008558:	d108      	bne.n	800856c <UART_DMAError+0x7a>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d005      	beq.n	800856c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	2200      	movs	r2, #0
 8008564:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008566:	68b8      	ldr	r0, [r7, #8]
 8008568:	f000 f928 	bl	80087bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008570:	f043 0210 	orr.w	r2, r3, #16
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008578:	68b8      	ldr	r0, [r7, #8]
 800857a:	f7ff fef0 	bl	800835e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800857e:	bf00      	nop
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b086      	sub	sp, #24
 800858a:	af00      	add	r7, sp, #0
 800858c:	60f8      	str	r0, [r7, #12]
 800858e:	60b9      	str	r1, [r7, #8]
 8008590:	603b      	str	r3, [r7, #0]
 8008592:	4613      	mov	r3, r2
 8008594:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008596:	e03b      	b.n	8008610 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008598:	6a3b      	ldr	r3, [r7, #32]
 800859a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859e:	d037      	beq.n	8008610 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085a0:	f7fc f904 	bl	80047ac <HAL_GetTick>
 80085a4:	4602      	mov	r2, r0
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	6a3a      	ldr	r2, [r7, #32]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d302      	bcc.n	80085b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80085b0:	6a3b      	ldr	r3, [r7, #32]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d101      	bne.n	80085ba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80085b6:	2303      	movs	r3, #3
 80085b8:	e03a      	b.n	8008630 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	f003 0304 	and.w	r3, r3, #4
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d023      	beq.n	8008610 <UART_WaitOnFlagUntilTimeout+0x8a>
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	2b80      	cmp	r3, #128	@ 0x80
 80085cc:	d020      	beq.n	8008610 <UART_WaitOnFlagUntilTimeout+0x8a>
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2b40      	cmp	r3, #64	@ 0x40
 80085d2:	d01d      	beq.n	8008610 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0308 	and.w	r3, r3, #8
 80085de:	2b08      	cmp	r3, #8
 80085e0:	d116      	bne.n	8008610 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80085e2:	2300      	movs	r3, #0
 80085e4:	617b      	str	r3, [r7, #20]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	617b      	str	r3, [r7, #20]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	617b      	str	r3, [r7, #20]
 80085f6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 f8df 	bl	80087bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2208      	movs	r2, #8
 8008602:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e00f      	b.n	8008630 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	4013      	ands	r3, r2
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	429a      	cmp	r2, r3
 800861e:	bf0c      	ite	eq
 8008620:	2301      	moveq	r3, #1
 8008622:	2300      	movne	r3, #0
 8008624:	b2db      	uxtb	r3, r3
 8008626:	461a      	mov	r2, r3
 8008628:	79fb      	ldrb	r3, [r7, #7]
 800862a:	429a      	cmp	r2, r3
 800862c:	d0b4      	beq.n	8008598 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3718      	adds	r7, #24
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b098      	sub	sp, #96	@ 0x60
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	4613      	mov	r3, r2
 8008644:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	88fa      	ldrh	r2, [r7, #6]
 8008650:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2222      	movs	r2, #34	@ 0x22
 800865c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008664:	4a3e      	ldr	r2, [pc, #248]	@ (8008760 <UART_Start_Receive_DMA+0x128>)
 8008666:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800866c:	4a3d      	ldr	r2, [pc, #244]	@ (8008764 <UART_Start_Receive_DMA+0x12c>)
 800866e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008674:	4a3c      	ldr	r2, [pc, #240]	@ (8008768 <UART_Start_Receive_DMA+0x130>)
 8008676:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800867c:	2200      	movs	r2, #0
 800867e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008680:	f107 0308 	add.w	r3, r7, #8
 8008684:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3304      	adds	r3, #4
 8008690:	4619      	mov	r1, r3
 8008692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	88fb      	ldrh	r3, [r7, #6]
 8008698:	f7fc fa78 	bl	8004b8c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800869c:	2300      	movs	r3, #0
 800869e:	613b      	str	r3, [r7, #16]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	613b      	str	r3, [r7, #16]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	613b      	str	r3, [r7, #16]
 80086b0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d019      	beq.n	80086ee <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	330c      	adds	r3, #12
 80086c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086c4:	e853 3f00 	ldrex	r3, [r3]
 80086c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	330c      	adds	r3, #12
 80086d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80086da:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80086dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086de:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80086e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80086e2:	e841 2300 	strex	r3, r2, [r1]
 80086e6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80086e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1e5      	bne.n	80086ba <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3314      	adds	r3, #20
 80086f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f8:	e853 3f00 	ldrex	r3, [r3]
 80086fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008700:	f043 0301 	orr.w	r3, r3, #1
 8008704:	657b      	str	r3, [r7, #84]	@ 0x54
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	3314      	adds	r3, #20
 800870c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800870e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008710:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008712:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008714:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008716:	e841 2300 	strex	r3, r2, [r1]
 800871a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800871c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1e5      	bne.n	80086ee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3314      	adds	r3, #20
 8008728:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	e853 3f00 	ldrex	r3, [r3]
 8008730:	617b      	str	r3, [r7, #20]
   return(result);
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008738:	653b      	str	r3, [r7, #80]	@ 0x50
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3314      	adds	r3, #20
 8008740:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008742:	627a      	str	r2, [r7, #36]	@ 0x24
 8008744:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008746:	6a39      	ldr	r1, [r7, #32]
 8008748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800874a:	e841 2300 	strex	r3, r2, [r1]
 800874e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1e5      	bne.n	8008722 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3760      	adds	r7, #96	@ 0x60
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	0800838b 	.word	0x0800838b
 8008764:	080084b7 	.word	0x080084b7
 8008768:	080084f3 	.word	0x080084f3

0800876c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800876c:	b480      	push	{r7}
 800876e:	b089      	sub	sp, #36	@ 0x24
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	330c      	adds	r3, #12
 800877a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	60bb      	str	r3, [r7, #8]
   return(result);
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800878a:	61fb      	str	r3, [r7, #28]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	330c      	adds	r3, #12
 8008792:	69fa      	ldr	r2, [r7, #28]
 8008794:	61ba      	str	r2, [r7, #24]
 8008796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	6979      	ldr	r1, [r7, #20]
 800879a:	69ba      	ldr	r2, [r7, #24]
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	613b      	str	r3, [r7, #16]
   return(result);
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e5      	bne.n	8008774 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2220      	movs	r2, #32
 80087ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80087b0:	bf00      	nop
 80087b2:	3724      	adds	r7, #36	@ 0x24
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087bc:	b480      	push	{r7}
 80087be:	b095      	sub	sp, #84	@ 0x54
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	330c      	adds	r3, #12
 80087ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ce:	e853 3f00 	ldrex	r3, [r3]
 80087d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80087d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	330c      	adds	r3, #12
 80087e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80087e4:	643a      	str	r2, [r7, #64]	@ 0x40
 80087e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087ec:	e841 2300 	strex	r3, r2, [r1]
 80087f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1e5      	bne.n	80087c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	3314      	adds	r3, #20
 80087fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008800:	6a3b      	ldr	r3, [r7, #32]
 8008802:	e853 3f00 	ldrex	r3, [r3]
 8008806:	61fb      	str	r3, [r7, #28]
   return(result);
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	f023 0301 	bic.w	r3, r3, #1
 800880e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	3314      	adds	r3, #20
 8008816:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008818:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800881a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800881e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008820:	e841 2300 	strex	r3, r2, [r1]
 8008824:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1e5      	bne.n	80087f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008830:	2b01      	cmp	r3, #1
 8008832:	d119      	bne.n	8008868 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	330c      	adds	r3, #12
 800883a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	e853 3f00 	ldrex	r3, [r3]
 8008842:	60bb      	str	r3, [r7, #8]
   return(result);
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	f023 0310 	bic.w	r3, r3, #16
 800884a:	647b      	str	r3, [r7, #68]	@ 0x44
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	330c      	adds	r3, #12
 8008852:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008854:	61ba      	str	r2, [r7, #24]
 8008856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008858:	6979      	ldr	r1, [r7, #20]
 800885a:	69ba      	ldr	r2, [r7, #24]
 800885c:	e841 2300 	strex	r3, r2, [r1]
 8008860:	613b      	str	r3, [r7, #16]
   return(result);
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1e5      	bne.n	8008834 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2220      	movs	r2, #32
 800886c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008876:	bf00      	nop
 8008878:	3754      	adds	r7, #84	@ 0x54
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
	...

08008884 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008888:	b0c0      	sub	sp, #256	@ 0x100
 800888a:	af00      	add	r7, sp, #0
 800888c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800889c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088a0:	68d9      	ldr	r1, [r3, #12]
 80088a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	ea40 0301 	orr.w	r3, r0, r1
 80088ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80088ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088b2:	689a      	ldr	r2, [r3, #8]
 80088b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	431a      	orrs	r2, r3
 80088bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	431a      	orrs	r2, r3
 80088c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088c8:	69db      	ldr	r3, [r3, #28]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80088d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80088dc:	f021 010c 	bic.w	r1, r1, #12
 80088e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80088ea:	430b      	orrs	r3, r1
 80088ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80088ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80088fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088fe:	6999      	ldr	r1, [r3, #24]
 8008900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	ea40 0301 	orr.w	r3, r0, r1
 800890a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800890c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	4b8f      	ldr	r3, [pc, #572]	@ (8008b50 <UART_SetConfig+0x2cc>)
 8008914:	429a      	cmp	r2, r3
 8008916:	d005      	beq.n	8008924 <UART_SetConfig+0xa0>
 8008918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	4b8d      	ldr	r3, [pc, #564]	@ (8008b54 <UART_SetConfig+0x2d0>)
 8008920:	429a      	cmp	r2, r3
 8008922:	d104      	bne.n	800892e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008924:	f7fd ff4e 	bl	80067c4 <HAL_RCC_GetPCLK2Freq>
 8008928:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800892c:	e003      	b.n	8008936 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800892e:	f7fd ff35 	bl	800679c <HAL_RCC_GetPCLK1Freq>
 8008932:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800893a:	69db      	ldr	r3, [r3, #28]
 800893c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008940:	f040 810c 	bne.w	8008b5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008944:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008948:	2200      	movs	r2, #0
 800894a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800894e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008952:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008956:	4622      	mov	r2, r4
 8008958:	462b      	mov	r3, r5
 800895a:	1891      	adds	r1, r2, r2
 800895c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800895e:	415b      	adcs	r3, r3
 8008960:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008962:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008966:	4621      	mov	r1, r4
 8008968:	eb12 0801 	adds.w	r8, r2, r1
 800896c:	4629      	mov	r1, r5
 800896e:	eb43 0901 	adc.w	r9, r3, r1
 8008972:	f04f 0200 	mov.w	r2, #0
 8008976:	f04f 0300 	mov.w	r3, #0
 800897a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800897e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008982:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008986:	4690      	mov	r8, r2
 8008988:	4699      	mov	r9, r3
 800898a:	4623      	mov	r3, r4
 800898c:	eb18 0303 	adds.w	r3, r8, r3
 8008990:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008994:	462b      	mov	r3, r5
 8008996:	eb49 0303 	adc.w	r3, r9, r3
 800899a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800899e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80089aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80089ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80089b2:	460b      	mov	r3, r1
 80089b4:	18db      	adds	r3, r3, r3
 80089b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80089b8:	4613      	mov	r3, r2
 80089ba:	eb42 0303 	adc.w	r3, r2, r3
 80089be:	657b      	str	r3, [r7, #84]	@ 0x54
 80089c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80089c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80089c8:	f7f8 f902 	bl	8000bd0 <__aeabi_uldivmod>
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	4b61      	ldr	r3, [pc, #388]	@ (8008b58 <UART_SetConfig+0x2d4>)
 80089d2:	fba3 2302 	umull	r2, r3, r3, r2
 80089d6:	095b      	lsrs	r3, r3, #5
 80089d8:	011c      	lsls	r4, r3, #4
 80089da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089de:	2200      	movs	r2, #0
 80089e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80089e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80089e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80089ec:	4642      	mov	r2, r8
 80089ee:	464b      	mov	r3, r9
 80089f0:	1891      	adds	r1, r2, r2
 80089f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80089f4:	415b      	adcs	r3, r3
 80089f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80089fc:	4641      	mov	r1, r8
 80089fe:	eb12 0a01 	adds.w	sl, r2, r1
 8008a02:	4649      	mov	r1, r9
 8008a04:	eb43 0b01 	adc.w	fp, r3, r1
 8008a08:	f04f 0200 	mov.w	r2, #0
 8008a0c:	f04f 0300 	mov.w	r3, #0
 8008a10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008a14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008a18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a1c:	4692      	mov	sl, r2
 8008a1e:	469b      	mov	fp, r3
 8008a20:	4643      	mov	r3, r8
 8008a22:	eb1a 0303 	adds.w	r3, sl, r3
 8008a26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a2a:	464b      	mov	r3, r9
 8008a2c:	eb4b 0303 	adc.w	r3, fp, r3
 8008a30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008a44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008a48:	460b      	mov	r3, r1
 8008a4a:	18db      	adds	r3, r3, r3
 8008a4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a4e:	4613      	mov	r3, r2
 8008a50:	eb42 0303 	adc.w	r3, r2, r3
 8008a54:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008a5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008a5e:	f7f8 f8b7 	bl	8000bd0 <__aeabi_uldivmod>
 8008a62:	4602      	mov	r2, r0
 8008a64:	460b      	mov	r3, r1
 8008a66:	4611      	mov	r1, r2
 8008a68:	4b3b      	ldr	r3, [pc, #236]	@ (8008b58 <UART_SetConfig+0x2d4>)
 8008a6a:	fba3 2301 	umull	r2, r3, r3, r1
 8008a6e:	095b      	lsrs	r3, r3, #5
 8008a70:	2264      	movs	r2, #100	@ 0x64
 8008a72:	fb02 f303 	mul.w	r3, r2, r3
 8008a76:	1acb      	subs	r3, r1, r3
 8008a78:	00db      	lsls	r3, r3, #3
 8008a7a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008a7e:	4b36      	ldr	r3, [pc, #216]	@ (8008b58 <UART_SetConfig+0x2d4>)
 8008a80:	fba3 2302 	umull	r2, r3, r3, r2
 8008a84:	095b      	lsrs	r3, r3, #5
 8008a86:	005b      	lsls	r3, r3, #1
 8008a88:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008a8c:	441c      	add	r4, r3
 8008a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a92:	2200      	movs	r2, #0
 8008a94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a98:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008a9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008aa0:	4642      	mov	r2, r8
 8008aa2:	464b      	mov	r3, r9
 8008aa4:	1891      	adds	r1, r2, r2
 8008aa6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008aa8:	415b      	adcs	r3, r3
 8008aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008aac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008ab0:	4641      	mov	r1, r8
 8008ab2:	1851      	adds	r1, r2, r1
 8008ab4:	6339      	str	r1, [r7, #48]	@ 0x30
 8008ab6:	4649      	mov	r1, r9
 8008ab8:	414b      	adcs	r3, r1
 8008aba:	637b      	str	r3, [r7, #52]	@ 0x34
 8008abc:	f04f 0200 	mov.w	r2, #0
 8008ac0:	f04f 0300 	mov.w	r3, #0
 8008ac4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008ac8:	4659      	mov	r1, fp
 8008aca:	00cb      	lsls	r3, r1, #3
 8008acc:	4651      	mov	r1, sl
 8008ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ad2:	4651      	mov	r1, sl
 8008ad4:	00ca      	lsls	r2, r1, #3
 8008ad6:	4610      	mov	r0, r2
 8008ad8:	4619      	mov	r1, r3
 8008ada:	4603      	mov	r3, r0
 8008adc:	4642      	mov	r2, r8
 8008ade:	189b      	adds	r3, r3, r2
 8008ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ae4:	464b      	mov	r3, r9
 8008ae6:	460a      	mov	r2, r1
 8008ae8:	eb42 0303 	adc.w	r3, r2, r3
 8008aec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008afc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008b00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008b04:	460b      	mov	r3, r1
 8008b06:	18db      	adds	r3, r3, r3
 8008b08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	eb42 0303 	adc.w	r3, r2, r3
 8008b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008b16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008b1a:	f7f8 f859 	bl	8000bd0 <__aeabi_uldivmod>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	4b0d      	ldr	r3, [pc, #52]	@ (8008b58 <UART_SetConfig+0x2d4>)
 8008b24:	fba3 1302 	umull	r1, r3, r3, r2
 8008b28:	095b      	lsrs	r3, r3, #5
 8008b2a:	2164      	movs	r1, #100	@ 0x64
 8008b2c:	fb01 f303 	mul.w	r3, r1, r3
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	00db      	lsls	r3, r3, #3
 8008b34:	3332      	adds	r3, #50	@ 0x32
 8008b36:	4a08      	ldr	r2, [pc, #32]	@ (8008b58 <UART_SetConfig+0x2d4>)
 8008b38:	fba2 2303 	umull	r2, r3, r2, r3
 8008b3c:	095b      	lsrs	r3, r3, #5
 8008b3e:	f003 0207 	and.w	r2, r3, #7
 8008b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4422      	add	r2, r4
 8008b4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b4c:	e106      	b.n	8008d5c <UART_SetConfig+0x4d8>
 8008b4e:	bf00      	nop
 8008b50:	40011000 	.word	0x40011000
 8008b54:	40011400 	.word	0x40011400
 8008b58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b60:	2200      	movs	r2, #0
 8008b62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008b66:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008b6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008b6e:	4642      	mov	r2, r8
 8008b70:	464b      	mov	r3, r9
 8008b72:	1891      	adds	r1, r2, r2
 8008b74:	6239      	str	r1, [r7, #32]
 8008b76:	415b      	adcs	r3, r3
 8008b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b7e:	4641      	mov	r1, r8
 8008b80:	1854      	adds	r4, r2, r1
 8008b82:	4649      	mov	r1, r9
 8008b84:	eb43 0501 	adc.w	r5, r3, r1
 8008b88:	f04f 0200 	mov.w	r2, #0
 8008b8c:	f04f 0300 	mov.w	r3, #0
 8008b90:	00eb      	lsls	r3, r5, #3
 8008b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b96:	00e2      	lsls	r2, r4, #3
 8008b98:	4614      	mov	r4, r2
 8008b9a:	461d      	mov	r5, r3
 8008b9c:	4643      	mov	r3, r8
 8008b9e:	18e3      	adds	r3, r4, r3
 8008ba0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008ba4:	464b      	mov	r3, r9
 8008ba6:	eb45 0303 	adc.w	r3, r5, r3
 8008baa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008bba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008bbe:	f04f 0200 	mov.w	r2, #0
 8008bc2:	f04f 0300 	mov.w	r3, #0
 8008bc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008bca:	4629      	mov	r1, r5
 8008bcc:	008b      	lsls	r3, r1, #2
 8008bce:	4621      	mov	r1, r4
 8008bd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	008a      	lsls	r2, r1, #2
 8008bd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008bdc:	f7f7 fff8 	bl	8000bd0 <__aeabi_uldivmod>
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4b60      	ldr	r3, [pc, #384]	@ (8008d68 <UART_SetConfig+0x4e4>)
 8008be6:	fba3 2302 	umull	r2, r3, r3, r2
 8008bea:	095b      	lsrs	r3, r3, #5
 8008bec:	011c      	lsls	r4, r3, #4
 8008bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008bf8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008bfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008c00:	4642      	mov	r2, r8
 8008c02:	464b      	mov	r3, r9
 8008c04:	1891      	adds	r1, r2, r2
 8008c06:	61b9      	str	r1, [r7, #24]
 8008c08:	415b      	adcs	r3, r3
 8008c0a:	61fb      	str	r3, [r7, #28]
 8008c0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c10:	4641      	mov	r1, r8
 8008c12:	1851      	adds	r1, r2, r1
 8008c14:	6139      	str	r1, [r7, #16]
 8008c16:	4649      	mov	r1, r9
 8008c18:	414b      	adcs	r3, r1
 8008c1a:	617b      	str	r3, [r7, #20]
 8008c1c:	f04f 0200 	mov.w	r2, #0
 8008c20:	f04f 0300 	mov.w	r3, #0
 8008c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c28:	4659      	mov	r1, fp
 8008c2a:	00cb      	lsls	r3, r1, #3
 8008c2c:	4651      	mov	r1, sl
 8008c2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c32:	4651      	mov	r1, sl
 8008c34:	00ca      	lsls	r2, r1, #3
 8008c36:	4610      	mov	r0, r2
 8008c38:	4619      	mov	r1, r3
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	4642      	mov	r2, r8
 8008c3e:	189b      	adds	r3, r3, r2
 8008c40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c44:	464b      	mov	r3, r9
 8008c46:	460a      	mov	r2, r1
 8008c48:	eb42 0303 	adc.w	r3, r2, r3
 8008c4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008c5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008c5c:	f04f 0200 	mov.w	r2, #0
 8008c60:	f04f 0300 	mov.w	r3, #0
 8008c64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008c68:	4649      	mov	r1, r9
 8008c6a:	008b      	lsls	r3, r1, #2
 8008c6c:	4641      	mov	r1, r8
 8008c6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c72:	4641      	mov	r1, r8
 8008c74:	008a      	lsls	r2, r1, #2
 8008c76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008c7a:	f7f7 ffa9 	bl	8000bd0 <__aeabi_uldivmod>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	460b      	mov	r3, r1
 8008c82:	4611      	mov	r1, r2
 8008c84:	4b38      	ldr	r3, [pc, #224]	@ (8008d68 <UART_SetConfig+0x4e4>)
 8008c86:	fba3 2301 	umull	r2, r3, r3, r1
 8008c8a:	095b      	lsrs	r3, r3, #5
 8008c8c:	2264      	movs	r2, #100	@ 0x64
 8008c8e:	fb02 f303 	mul.w	r3, r2, r3
 8008c92:	1acb      	subs	r3, r1, r3
 8008c94:	011b      	lsls	r3, r3, #4
 8008c96:	3332      	adds	r3, #50	@ 0x32
 8008c98:	4a33      	ldr	r2, [pc, #204]	@ (8008d68 <UART_SetConfig+0x4e4>)
 8008c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c9e:	095b      	lsrs	r3, r3, #5
 8008ca0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ca4:	441c      	add	r4, r3
 8008ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008caa:	2200      	movs	r2, #0
 8008cac:	673b      	str	r3, [r7, #112]	@ 0x70
 8008cae:	677a      	str	r2, [r7, #116]	@ 0x74
 8008cb0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008cb4:	4642      	mov	r2, r8
 8008cb6:	464b      	mov	r3, r9
 8008cb8:	1891      	adds	r1, r2, r2
 8008cba:	60b9      	str	r1, [r7, #8]
 8008cbc:	415b      	adcs	r3, r3
 8008cbe:	60fb      	str	r3, [r7, #12]
 8008cc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008cc4:	4641      	mov	r1, r8
 8008cc6:	1851      	adds	r1, r2, r1
 8008cc8:	6039      	str	r1, [r7, #0]
 8008cca:	4649      	mov	r1, r9
 8008ccc:	414b      	adcs	r3, r1
 8008cce:	607b      	str	r3, [r7, #4]
 8008cd0:	f04f 0200 	mov.w	r2, #0
 8008cd4:	f04f 0300 	mov.w	r3, #0
 8008cd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008cdc:	4659      	mov	r1, fp
 8008cde:	00cb      	lsls	r3, r1, #3
 8008ce0:	4651      	mov	r1, sl
 8008ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ce6:	4651      	mov	r1, sl
 8008ce8:	00ca      	lsls	r2, r1, #3
 8008cea:	4610      	mov	r0, r2
 8008cec:	4619      	mov	r1, r3
 8008cee:	4603      	mov	r3, r0
 8008cf0:	4642      	mov	r2, r8
 8008cf2:	189b      	adds	r3, r3, r2
 8008cf4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cf6:	464b      	mov	r3, r9
 8008cf8:	460a      	mov	r2, r1
 8008cfa:	eb42 0303 	adc.w	r3, r2, r3
 8008cfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d0a:	667a      	str	r2, [r7, #100]	@ 0x64
 8008d0c:	f04f 0200 	mov.w	r2, #0
 8008d10:	f04f 0300 	mov.w	r3, #0
 8008d14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008d18:	4649      	mov	r1, r9
 8008d1a:	008b      	lsls	r3, r1, #2
 8008d1c:	4641      	mov	r1, r8
 8008d1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d22:	4641      	mov	r1, r8
 8008d24:	008a      	lsls	r2, r1, #2
 8008d26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008d2a:	f7f7 ff51 	bl	8000bd0 <__aeabi_uldivmod>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	460b      	mov	r3, r1
 8008d32:	4b0d      	ldr	r3, [pc, #52]	@ (8008d68 <UART_SetConfig+0x4e4>)
 8008d34:	fba3 1302 	umull	r1, r3, r3, r2
 8008d38:	095b      	lsrs	r3, r3, #5
 8008d3a:	2164      	movs	r1, #100	@ 0x64
 8008d3c:	fb01 f303 	mul.w	r3, r1, r3
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	011b      	lsls	r3, r3, #4
 8008d44:	3332      	adds	r3, #50	@ 0x32
 8008d46:	4a08      	ldr	r2, [pc, #32]	@ (8008d68 <UART_SetConfig+0x4e4>)
 8008d48:	fba2 2303 	umull	r2, r3, r2, r3
 8008d4c:	095b      	lsrs	r3, r3, #5
 8008d4e:	f003 020f 	and.w	r2, r3, #15
 8008d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4422      	add	r2, r4
 8008d5a:	609a      	str	r2, [r3, #8]
}
 8008d5c:	bf00      	nop
 8008d5e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008d62:	46bd      	mov	sp, r7
 8008d64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d68:	51eb851f 	.word	0x51eb851f

08008d6c <atan2>:
 8008d6c:	f000 ba54 	b.w	8009218 <__ieee754_atan2>

08008d70 <pow>:
 8008d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d72:	ed2d 8b02 	vpush	{d8}
 8008d76:	eeb0 8a40 	vmov.f32	s16, s0
 8008d7a:	eef0 8a60 	vmov.f32	s17, s1
 8008d7e:	ec55 4b11 	vmov	r4, r5, d1
 8008d82:	f000 fb11 	bl	80093a8 <__ieee754_pow>
 8008d86:	4622      	mov	r2, r4
 8008d88:	462b      	mov	r3, r5
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	ec57 6b10 	vmov	r6, r7, d0
 8008d92:	f7f7 fe8f 	bl	8000ab4 <__aeabi_dcmpun>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d13b      	bne.n	8008e12 <pow+0xa2>
 8008d9a:	ec51 0b18 	vmov	r0, r1, d8
 8008d9e:	2200      	movs	r2, #0
 8008da0:	2300      	movs	r3, #0
 8008da2:	f7f7 fe55 	bl	8000a50 <__aeabi_dcmpeq>
 8008da6:	b1b8      	cbz	r0, 8008dd8 <pow+0x68>
 8008da8:	2200      	movs	r2, #0
 8008daa:	2300      	movs	r3, #0
 8008dac:	4620      	mov	r0, r4
 8008dae:	4629      	mov	r1, r5
 8008db0:	f7f7 fe4e 	bl	8000a50 <__aeabi_dcmpeq>
 8008db4:	2800      	cmp	r0, #0
 8008db6:	d146      	bne.n	8008e46 <pow+0xd6>
 8008db8:	ec45 4b10 	vmov	d0, r4, r5
 8008dbc:	f000 f89c 	bl	8008ef8 <finite>
 8008dc0:	b338      	cbz	r0, 8008e12 <pow+0xa2>
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	4629      	mov	r1, r5
 8008dca:	f7f7 fe4b 	bl	8000a64 <__aeabi_dcmplt>
 8008dce:	b300      	cbz	r0, 8008e12 <pow+0xa2>
 8008dd0:	f002 f93e 	bl	800b050 <__errno>
 8008dd4:	2322      	movs	r3, #34	@ 0x22
 8008dd6:	e01b      	b.n	8008e10 <pow+0xa0>
 8008dd8:	ec47 6b10 	vmov	d0, r6, r7
 8008ddc:	f000 f88c 	bl	8008ef8 <finite>
 8008de0:	b9e0      	cbnz	r0, 8008e1c <pow+0xac>
 8008de2:	eeb0 0a48 	vmov.f32	s0, s16
 8008de6:	eef0 0a68 	vmov.f32	s1, s17
 8008dea:	f000 f885 	bl	8008ef8 <finite>
 8008dee:	b1a8      	cbz	r0, 8008e1c <pow+0xac>
 8008df0:	ec45 4b10 	vmov	d0, r4, r5
 8008df4:	f000 f880 	bl	8008ef8 <finite>
 8008df8:	b180      	cbz	r0, 8008e1c <pow+0xac>
 8008dfa:	4632      	mov	r2, r6
 8008dfc:	463b      	mov	r3, r7
 8008dfe:	4630      	mov	r0, r6
 8008e00:	4639      	mov	r1, r7
 8008e02:	f7f7 fe57 	bl	8000ab4 <__aeabi_dcmpun>
 8008e06:	2800      	cmp	r0, #0
 8008e08:	d0e2      	beq.n	8008dd0 <pow+0x60>
 8008e0a:	f002 f921 	bl	800b050 <__errno>
 8008e0e:	2321      	movs	r3, #33	@ 0x21
 8008e10:	6003      	str	r3, [r0, #0]
 8008e12:	ecbd 8b02 	vpop	{d8}
 8008e16:	ec47 6b10 	vmov	d0, r6, r7
 8008e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	2300      	movs	r3, #0
 8008e20:	4630      	mov	r0, r6
 8008e22:	4639      	mov	r1, r7
 8008e24:	f7f7 fe14 	bl	8000a50 <__aeabi_dcmpeq>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	d0f2      	beq.n	8008e12 <pow+0xa2>
 8008e2c:	eeb0 0a48 	vmov.f32	s0, s16
 8008e30:	eef0 0a68 	vmov.f32	s1, s17
 8008e34:	f000 f860 	bl	8008ef8 <finite>
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	d0ea      	beq.n	8008e12 <pow+0xa2>
 8008e3c:	ec45 4b10 	vmov	d0, r4, r5
 8008e40:	f000 f85a 	bl	8008ef8 <finite>
 8008e44:	e7c3      	b.n	8008dce <pow+0x5e>
 8008e46:	4f01      	ldr	r7, [pc, #4]	@ (8008e4c <pow+0xdc>)
 8008e48:	2600      	movs	r6, #0
 8008e4a:	e7e2      	b.n	8008e12 <pow+0xa2>
 8008e4c:	3ff00000 	.word	0x3ff00000

08008e50 <sin>:
 8008e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e52:	ec53 2b10 	vmov	r2, r3, d0
 8008e56:	4826      	ldr	r0, [pc, #152]	@ (8008ef0 <sin+0xa0>)
 8008e58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008e5c:	4281      	cmp	r1, r0
 8008e5e:	d807      	bhi.n	8008e70 <sin+0x20>
 8008e60:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008ee8 <sin+0x98>
 8008e64:	2000      	movs	r0, #0
 8008e66:	b005      	add	sp, #20
 8008e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e6c:	f000 b918 	b.w	80090a0 <__kernel_sin>
 8008e70:	4820      	ldr	r0, [pc, #128]	@ (8008ef4 <sin+0xa4>)
 8008e72:	4281      	cmp	r1, r0
 8008e74:	d908      	bls.n	8008e88 <sin+0x38>
 8008e76:	4610      	mov	r0, r2
 8008e78:	4619      	mov	r1, r3
 8008e7a:	f7f7 f9c9 	bl	8000210 <__aeabi_dsub>
 8008e7e:	ec41 0b10 	vmov	d0, r0, r1
 8008e82:	b005      	add	sp, #20
 8008e84:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e88:	4668      	mov	r0, sp
 8008e8a:	f000 ffd1 	bl	8009e30 <__ieee754_rem_pio2>
 8008e8e:	f000 0003 	and.w	r0, r0, #3
 8008e92:	2801      	cmp	r0, #1
 8008e94:	d00c      	beq.n	8008eb0 <sin+0x60>
 8008e96:	2802      	cmp	r0, #2
 8008e98:	d011      	beq.n	8008ebe <sin+0x6e>
 8008e9a:	b9e8      	cbnz	r0, 8008ed8 <sin+0x88>
 8008e9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008ea0:	ed9d 0b00 	vldr	d0, [sp]
 8008ea4:	2001      	movs	r0, #1
 8008ea6:	f000 f8fb 	bl	80090a0 <__kernel_sin>
 8008eaa:	ec51 0b10 	vmov	r0, r1, d0
 8008eae:	e7e6      	b.n	8008e7e <sin+0x2e>
 8008eb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008eb4:	ed9d 0b00 	vldr	d0, [sp]
 8008eb8:	f000 f82a 	bl	8008f10 <__kernel_cos>
 8008ebc:	e7f5      	b.n	8008eaa <sin+0x5a>
 8008ebe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008ec2:	ed9d 0b00 	vldr	d0, [sp]
 8008ec6:	2001      	movs	r0, #1
 8008ec8:	f000 f8ea 	bl	80090a0 <__kernel_sin>
 8008ecc:	ec53 2b10 	vmov	r2, r3, d0
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008ed6:	e7d2      	b.n	8008e7e <sin+0x2e>
 8008ed8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008edc:	ed9d 0b00 	vldr	d0, [sp]
 8008ee0:	f000 f816 	bl	8008f10 <__kernel_cos>
 8008ee4:	e7f2      	b.n	8008ecc <sin+0x7c>
 8008ee6:	bf00      	nop
	...
 8008ef0:	3fe921fb 	.word	0x3fe921fb
 8008ef4:	7fefffff 	.word	0x7fefffff

08008ef8 <finite>:
 8008ef8:	b082      	sub	sp, #8
 8008efa:	ed8d 0b00 	vstr	d0, [sp]
 8008efe:	9801      	ldr	r0, [sp, #4]
 8008f00:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8008f04:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008f08:	0fc0      	lsrs	r0, r0, #31
 8008f0a:	b002      	add	sp, #8
 8008f0c:	4770      	bx	lr
	...

08008f10 <__kernel_cos>:
 8008f10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f14:	ec57 6b10 	vmov	r6, r7, d0
 8008f18:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008f1c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8008f20:	ed8d 1b00 	vstr	d1, [sp]
 8008f24:	d206      	bcs.n	8008f34 <__kernel_cos+0x24>
 8008f26:	4630      	mov	r0, r6
 8008f28:	4639      	mov	r1, r7
 8008f2a:	f7f7 fdd9 	bl	8000ae0 <__aeabi_d2iz>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	f000 8088 	beq.w	8009044 <__kernel_cos+0x134>
 8008f34:	4632      	mov	r2, r6
 8008f36:	463b      	mov	r3, r7
 8008f38:	4630      	mov	r0, r6
 8008f3a:	4639      	mov	r1, r7
 8008f3c:	f7f7 fb20 	bl	8000580 <__aeabi_dmul>
 8008f40:	4b51      	ldr	r3, [pc, #324]	@ (8009088 <__kernel_cos+0x178>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	4604      	mov	r4, r0
 8008f46:	460d      	mov	r5, r1
 8008f48:	f7f7 fb1a 	bl	8000580 <__aeabi_dmul>
 8008f4c:	a340      	add	r3, pc, #256	@ (adr r3, 8009050 <__kernel_cos+0x140>)
 8008f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f52:	4682      	mov	sl, r0
 8008f54:	468b      	mov	fp, r1
 8008f56:	4620      	mov	r0, r4
 8008f58:	4629      	mov	r1, r5
 8008f5a:	f7f7 fb11 	bl	8000580 <__aeabi_dmul>
 8008f5e:	a33e      	add	r3, pc, #248	@ (adr r3, 8009058 <__kernel_cos+0x148>)
 8008f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f64:	f7f7 f956 	bl	8000214 <__adddf3>
 8008f68:	4622      	mov	r2, r4
 8008f6a:	462b      	mov	r3, r5
 8008f6c:	f7f7 fb08 	bl	8000580 <__aeabi_dmul>
 8008f70:	a33b      	add	r3, pc, #236	@ (adr r3, 8009060 <__kernel_cos+0x150>)
 8008f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f76:	f7f7 f94b 	bl	8000210 <__aeabi_dsub>
 8008f7a:	4622      	mov	r2, r4
 8008f7c:	462b      	mov	r3, r5
 8008f7e:	f7f7 faff 	bl	8000580 <__aeabi_dmul>
 8008f82:	a339      	add	r3, pc, #228	@ (adr r3, 8009068 <__kernel_cos+0x158>)
 8008f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f88:	f7f7 f944 	bl	8000214 <__adddf3>
 8008f8c:	4622      	mov	r2, r4
 8008f8e:	462b      	mov	r3, r5
 8008f90:	f7f7 faf6 	bl	8000580 <__aeabi_dmul>
 8008f94:	a336      	add	r3, pc, #216	@ (adr r3, 8009070 <__kernel_cos+0x160>)
 8008f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9a:	f7f7 f939 	bl	8000210 <__aeabi_dsub>
 8008f9e:	4622      	mov	r2, r4
 8008fa0:	462b      	mov	r3, r5
 8008fa2:	f7f7 faed 	bl	8000580 <__aeabi_dmul>
 8008fa6:	a334      	add	r3, pc, #208	@ (adr r3, 8009078 <__kernel_cos+0x168>)
 8008fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fac:	f7f7 f932 	bl	8000214 <__adddf3>
 8008fb0:	4622      	mov	r2, r4
 8008fb2:	462b      	mov	r3, r5
 8008fb4:	f7f7 fae4 	bl	8000580 <__aeabi_dmul>
 8008fb8:	4622      	mov	r2, r4
 8008fba:	462b      	mov	r3, r5
 8008fbc:	f7f7 fae0 	bl	8000580 <__aeabi_dmul>
 8008fc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	460d      	mov	r5, r1
 8008fc8:	4630      	mov	r0, r6
 8008fca:	4639      	mov	r1, r7
 8008fcc:	f7f7 fad8 	bl	8000580 <__aeabi_dmul>
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f7f7 f91a 	bl	8000210 <__aeabi_dsub>
 8008fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800908c <__kernel_cos+0x17c>)
 8008fde:	4598      	cmp	r8, r3
 8008fe0:	4606      	mov	r6, r0
 8008fe2:	460f      	mov	r7, r1
 8008fe4:	d810      	bhi.n	8009008 <__kernel_cos+0xf8>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	4650      	mov	r0, sl
 8008fec:	4659      	mov	r1, fp
 8008fee:	f7f7 f90f 	bl	8000210 <__aeabi_dsub>
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4926      	ldr	r1, [pc, #152]	@ (8009090 <__kernel_cos+0x180>)
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	2000      	movs	r0, #0
 8008ffa:	f7f7 f909 	bl	8000210 <__aeabi_dsub>
 8008ffe:	ec41 0b10 	vmov	d0, r0, r1
 8009002:	b003      	add	sp, #12
 8009004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009008:	4b22      	ldr	r3, [pc, #136]	@ (8009094 <__kernel_cos+0x184>)
 800900a:	4921      	ldr	r1, [pc, #132]	@ (8009090 <__kernel_cos+0x180>)
 800900c:	4598      	cmp	r8, r3
 800900e:	bf8c      	ite	hi
 8009010:	4d21      	ldrhi	r5, [pc, #132]	@ (8009098 <__kernel_cos+0x188>)
 8009012:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8009016:	2400      	movs	r4, #0
 8009018:	4622      	mov	r2, r4
 800901a:	462b      	mov	r3, r5
 800901c:	2000      	movs	r0, #0
 800901e:	f7f7 f8f7 	bl	8000210 <__aeabi_dsub>
 8009022:	4622      	mov	r2, r4
 8009024:	4680      	mov	r8, r0
 8009026:	4689      	mov	r9, r1
 8009028:	462b      	mov	r3, r5
 800902a:	4650      	mov	r0, sl
 800902c:	4659      	mov	r1, fp
 800902e:	f7f7 f8ef 	bl	8000210 <__aeabi_dsub>
 8009032:	4632      	mov	r2, r6
 8009034:	463b      	mov	r3, r7
 8009036:	f7f7 f8eb 	bl	8000210 <__aeabi_dsub>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	4640      	mov	r0, r8
 8009040:	4649      	mov	r1, r9
 8009042:	e7da      	b.n	8008ffa <__kernel_cos+0xea>
 8009044:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8009080 <__kernel_cos+0x170>
 8009048:	e7db      	b.n	8009002 <__kernel_cos+0xf2>
 800904a:	bf00      	nop
 800904c:	f3af 8000 	nop.w
 8009050:	be8838d4 	.word	0xbe8838d4
 8009054:	bda8fae9 	.word	0xbda8fae9
 8009058:	bdb4b1c4 	.word	0xbdb4b1c4
 800905c:	3e21ee9e 	.word	0x3e21ee9e
 8009060:	809c52ad 	.word	0x809c52ad
 8009064:	3e927e4f 	.word	0x3e927e4f
 8009068:	19cb1590 	.word	0x19cb1590
 800906c:	3efa01a0 	.word	0x3efa01a0
 8009070:	16c15177 	.word	0x16c15177
 8009074:	3f56c16c 	.word	0x3f56c16c
 8009078:	5555554c 	.word	0x5555554c
 800907c:	3fa55555 	.word	0x3fa55555
 8009080:	00000000 	.word	0x00000000
 8009084:	3ff00000 	.word	0x3ff00000
 8009088:	3fe00000 	.word	0x3fe00000
 800908c:	3fd33332 	.word	0x3fd33332
 8009090:	3ff00000 	.word	0x3ff00000
 8009094:	3fe90000 	.word	0x3fe90000
 8009098:	3fd20000 	.word	0x3fd20000
 800909c:	00000000 	.word	0x00000000

080090a0 <__kernel_sin>:
 80090a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a4:	ec55 4b10 	vmov	r4, r5, d0
 80090a8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80090ac:	b085      	sub	sp, #20
 80090ae:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80090b2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80090b6:	4680      	mov	r8, r0
 80090b8:	d205      	bcs.n	80090c6 <__kernel_sin+0x26>
 80090ba:	4620      	mov	r0, r4
 80090bc:	4629      	mov	r1, r5
 80090be:	f7f7 fd0f 	bl	8000ae0 <__aeabi_d2iz>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	d052      	beq.n	800916c <__kernel_sin+0xcc>
 80090c6:	4622      	mov	r2, r4
 80090c8:	462b      	mov	r3, r5
 80090ca:	4620      	mov	r0, r4
 80090cc:	4629      	mov	r1, r5
 80090ce:	f7f7 fa57 	bl	8000580 <__aeabi_dmul>
 80090d2:	4682      	mov	sl, r0
 80090d4:	468b      	mov	fp, r1
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	4620      	mov	r0, r4
 80090dc:	4629      	mov	r1, r5
 80090de:	f7f7 fa4f 	bl	8000580 <__aeabi_dmul>
 80090e2:	a342      	add	r3, pc, #264	@ (adr r3, 80091ec <__kernel_sin+0x14c>)
 80090e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e8:	e9cd 0100 	strd	r0, r1, [sp]
 80090ec:	4650      	mov	r0, sl
 80090ee:	4659      	mov	r1, fp
 80090f0:	f7f7 fa46 	bl	8000580 <__aeabi_dmul>
 80090f4:	a33f      	add	r3, pc, #252	@ (adr r3, 80091f4 <__kernel_sin+0x154>)
 80090f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fa:	f7f7 f889 	bl	8000210 <__aeabi_dsub>
 80090fe:	4652      	mov	r2, sl
 8009100:	465b      	mov	r3, fp
 8009102:	f7f7 fa3d 	bl	8000580 <__aeabi_dmul>
 8009106:	a33d      	add	r3, pc, #244	@ (adr r3, 80091fc <__kernel_sin+0x15c>)
 8009108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910c:	f7f7 f882 	bl	8000214 <__adddf3>
 8009110:	4652      	mov	r2, sl
 8009112:	465b      	mov	r3, fp
 8009114:	f7f7 fa34 	bl	8000580 <__aeabi_dmul>
 8009118:	a33a      	add	r3, pc, #232	@ (adr r3, 8009204 <__kernel_sin+0x164>)
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	f7f7 f877 	bl	8000210 <__aeabi_dsub>
 8009122:	4652      	mov	r2, sl
 8009124:	465b      	mov	r3, fp
 8009126:	f7f7 fa2b 	bl	8000580 <__aeabi_dmul>
 800912a:	a338      	add	r3, pc, #224	@ (adr r3, 800920c <__kernel_sin+0x16c>)
 800912c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009130:	f7f7 f870 	bl	8000214 <__adddf3>
 8009134:	4606      	mov	r6, r0
 8009136:	460f      	mov	r7, r1
 8009138:	f1b8 0f00 	cmp.w	r8, #0
 800913c:	d11b      	bne.n	8009176 <__kernel_sin+0xd6>
 800913e:	4602      	mov	r2, r0
 8009140:	460b      	mov	r3, r1
 8009142:	4650      	mov	r0, sl
 8009144:	4659      	mov	r1, fp
 8009146:	f7f7 fa1b 	bl	8000580 <__aeabi_dmul>
 800914a:	a325      	add	r3, pc, #148	@ (adr r3, 80091e0 <__kernel_sin+0x140>)
 800914c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009150:	f7f7 f85e 	bl	8000210 <__aeabi_dsub>
 8009154:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009158:	f7f7 fa12 	bl	8000580 <__aeabi_dmul>
 800915c:	4602      	mov	r2, r0
 800915e:	460b      	mov	r3, r1
 8009160:	4620      	mov	r0, r4
 8009162:	4629      	mov	r1, r5
 8009164:	f7f7 f856 	bl	8000214 <__adddf3>
 8009168:	4604      	mov	r4, r0
 800916a:	460d      	mov	r5, r1
 800916c:	ec45 4b10 	vmov	d0, r4, r5
 8009170:	b005      	add	sp, #20
 8009172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800917a:	4b1b      	ldr	r3, [pc, #108]	@ (80091e8 <__kernel_sin+0x148>)
 800917c:	2200      	movs	r2, #0
 800917e:	f7f7 f9ff 	bl	8000580 <__aeabi_dmul>
 8009182:	4632      	mov	r2, r6
 8009184:	4680      	mov	r8, r0
 8009186:	4689      	mov	r9, r1
 8009188:	463b      	mov	r3, r7
 800918a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800918e:	f7f7 f9f7 	bl	8000580 <__aeabi_dmul>
 8009192:	4602      	mov	r2, r0
 8009194:	460b      	mov	r3, r1
 8009196:	4640      	mov	r0, r8
 8009198:	4649      	mov	r1, r9
 800919a:	f7f7 f839 	bl	8000210 <__aeabi_dsub>
 800919e:	4652      	mov	r2, sl
 80091a0:	465b      	mov	r3, fp
 80091a2:	f7f7 f9ed 	bl	8000580 <__aeabi_dmul>
 80091a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091aa:	f7f7 f831 	bl	8000210 <__aeabi_dsub>
 80091ae:	a30c      	add	r3, pc, #48	@ (adr r3, 80091e0 <__kernel_sin+0x140>)
 80091b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b4:	4606      	mov	r6, r0
 80091b6:	460f      	mov	r7, r1
 80091b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091bc:	f7f7 f9e0 	bl	8000580 <__aeabi_dmul>
 80091c0:	4602      	mov	r2, r0
 80091c2:	460b      	mov	r3, r1
 80091c4:	4630      	mov	r0, r6
 80091c6:	4639      	mov	r1, r7
 80091c8:	f7f7 f824 	bl	8000214 <__adddf3>
 80091cc:	4602      	mov	r2, r0
 80091ce:	460b      	mov	r3, r1
 80091d0:	4620      	mov	r0, r4
 80091d2:	4629      	mov	r1, r5
 80091d4:	f7f7 f81c 	bl	8000210 <__aeabi_dsub>
 80091d8:	e7c6      	b.n	8009168 <__kernel_sin+0xc8>
 80091da:	bf00      	nop
 80091dc:	f3af 8000 	nop.w
 80091e0:	55555549 	.word	0x55555549
 80091e4:	3fc55555 	.word	0x3fc55555
 80091e8:	3fe00000 	.word	0x3fe00000
 80091ec:	5acfd57c 	.word	0x5acfd57c
 80091f0:	3de5d93a 	.word	0x3de5d93a
 80091f4:	8a2b9ceb 	.word	0x8a2b9ceb
 80091f8:	3e5ae5e6 	.word	0x3e5ae5e6
 80091fc:	57b1fe7d 	.word	0x57b1fe7d
 8009200:	3ec71de3 	.word	0x3ec71de3
 8009204:	19c161d5 	.word	0x19c161d5
 8009208:	3f2a01a0 	.word	0x3f2a01a0
 800920c:	1110f8a6 	.word	0x1110f8a6
 8009210:	3f811111 	.word	0x3f811111
 8009214:	00000000 	.word	0x00000000

08009218 <__ieee754_atan2>:
 8009218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800921c:	ec57 6b11 	vmov	r6, r7, d1
 8009220:	4273      	negs	r3, r6
 8009222:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80093a0 <__ieee754_atan2+0x188>
 8009226:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800922a:	4333      	orrs	r3, r6
 800922c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009230:	4543      	cmp	r3, r8
 8009232:	ec51 0b10 	vmov	r0, r1, d0
 8009236:	4635      	mov	r5, r6
 8009238:	d809      	bhi.n	800924e <__ieee754_atan2+0x36>
 800923a:	4244      	negs	r4, r0
 800923c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009240:	4304      	orrs	r4, r0
 8009242:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009246:	4544      	cmp	r4, r8
 8009248:	468e      	mov	lr, r1
 800924a:	4681      	mov	r9, r0
 800924c:	d907      	bls.n	800925e <__ieee754_atan2+0x46>
 800924e:	4632      	mov	r2, r6
 8009250:	463b      	mov	r3, r7
 8009252:	f7f6 ffdf 	bl	8000214 <__adddf3>
 8009256:	ec41 0b10 	vmov	d0, r0, r1
 800925a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800925e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8009262:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8009266:	4334      	orrs	r4, r6
 8009268:	d103      	bne.n	8009272 <__ieee754_atan2+0x5a>
 800926a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800926e:	f000 bfdb 	b.w	800a228 <atan>
 8009272:	17bc      	asrs	r4, r7, #30
 8009274:	f004 0402 	and.w	r4, r4, #2
 8009278:	ea53 0909 	orrs.w	r9, r3, r9
 800927c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009280:	d107      	bne.n	8009292 <__ieee754_atan2+0x7a>
 8009282:	2c02      	cmp	r4, #2
 8009284:	d05f      	beq.n	8009346 <__ieee754_atan2+0x12e>
 8009286:	2c03      	cmp	r4, #3
 8009288:	d1e5      	bne.n	8009256 <__ieee754_atan2+0x3e>
 800928a:	a141      	add	r1, pc, #260	@ (adr r1, 8009390 <__ieee754_atan2+0x178>)
 800928c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009290:	e7e1      	b.n	8009256 <__ieee754_atan2+0x3e>
 8009292:	4315      	orrs	r5, r2
 8009294:	d106      	bne.n	80092a4 <__ieee754_atan2+0x8c>
 8009296:	f1be 0f00 	cmp.w	lr, #0
 800929a:	da5f      	bge.n	800935c <__ieee754_atan2+0x144>
 800929c:	a13e      	add	r1, pc, #248	@ (adr r1, 8009398 <__ieee754_atan2+0x180>)
 800929e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092a2:	e7d8      	b.n	8009256 <__ieee754_atan2+0x3e>
 80092a4:	4542      	cmp	r2, r8
 80092a6:	d10f      	bne.n	80092c8 <__ieee754_atan2+0xb0>
 80092a8:	4293      	cmp	r3, r2
 80092aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80092ae:	d107      	bne.n	80092c0 <__ieee754_atan2+0xa8>
 80092b0:	2c02      	cmp	r4, #2
 80092b2:	d84c      	bhi.n	800934e <__ieee754_atan2+0x136>
 80092b4:	4b34      	ldr	r3, [pc, #208]	@ (8009388 <__ieee754_atan2+0x170>)
 80092b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80092ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80092be:	e7ca      	b.n	8009256 <__ieee754_atan2+0x3e>
 80092c0:	2c02      	cmp	r4, #2
 80092c2:	d848      	bhi.n	8009356 <__ieee754_atan2+0x13e>
 80092c4:	4b31      	ldr	r3, [pc, #196]	@ (800938c <__ieee754_atan2+0x174>)
 80092c6:	e7f6      	b.n	80092b6 <__ieee754_atan2+0x9e>
 80092c8:	4543      	cmp	r3, r8
 80092ca:	d0e4      	beq.n	8009296 <__ieee754_atan2+0x7e>
 80092cc:	1a9b      	subs	r3, r3, r2
 80092ce:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80092d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80092d6:	da1e      	bge.n	8009316 <__ieee754_atan2+0xfe>
 80092d8:	2f00      	cmp	r7, #0
 80092da:	da01      	bge.n	80092e0 <__ieee754_atan2+0xc8>
 80092dc:	323c      	adds	r2, #60	@ 0x3c
 80092de:	db1e      	blt.n	800931e <__ieee754_atan2+0x106>
 80092e0:	4632      	mov	r2, r6
 80092e2:	463b      	mov	r3, r7
 80092e4:	f7f7 fa76 	bl	80007d4 <__aeabi_ddiv>
 80092e8:	ec41 0b10 	vmov	d0, r0, r1
 80092ec:	f001 f934 	bl	800a558 <fabs>
 80092f0:	f000 ff9a 	bl	800a228 <atan>
 80092f4:	ec51 0b10 	vmov	r0, r1, d0
 80092f8:	2c01      	cmp	r4, #1
 80092fa:	d013      	beq.n	8009324 <__ieee754_atan2+0x10c>
 80092fc:	2c02      	cmp	r4, #2
 80092fe:	d015      	beq.n	800932c <__ieee754_atan2+0x114>
 8009300:	2c00      	cmp	r4, #0
 8009302:	d0a8      	beq.n	8009256 <__ieee754_atan2+0x3e>
 8009304:	a318      	add	r3, pc, #96	@ (adr r3, 8009368 <__ieee754_atan2+0x150>)
 8009306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930a:	f7f6 ff81 	bl	8000210 <__aeabi_dsub>
 800930e:	a318      	add	r3, pc, #96	@ (adr r3, 8009370 <__ieee754_atan2+0x158>)
 8009310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009314:	e014      	b.n	8009340 <__ieee754_atan2+0x128>
 8009316:	a118      	add	r1, pc, #96	@ (adr r1, 8009378 <__ieee754_atan2+0x160>)
 8009318:	e9d1 0100 	ldrd	r0, r1, [r1]
 800931c:	e7ec      	b.n	80092f8 <__ieee754_atan2+0xe0>
 800931e:	2000      	movs	r0, #0
 8009320:	2100      	movs	r1, #0
 8009322:	e7e9      	b.n	80092f8 <__ieee754_atan2+0xe0>
 8009324:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009328:	4619      	mov	r1, r3
 800932a:	e794      	b.n	8009256 <__ieee754_atan2+0x3e>
 800932c:	a30e      	add	r3, pc, #56	@ (adr r3, 8009368 <__ieee754_atan2+0x150>)
 800932e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009332:	f7f6 ff6d 	bl	8000210 <__aeabi_dsub>
 8009336:	4602      	mov	r2, r0
 8009338:	460b      	mov	r3, r1
 800933a:	a10d      	add	r1, pc, #52	@ (adr r1, 8009370 <__ieee754_atan2+0x158>)
 800933c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009340:	f7f6 ff66 	bl	8000210 <__aeabi_dsub>
 8009344:	e787      	b.n	8009256 <__ieee754_atan2+0x3e>
 8009346:	a10a      	add	r1, pc, #40	@ (adr r1, 8009370 <__ieee754_atan2+0x158>)
 8009348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800934c:	e783      	b.n	8009256 <__ieee754_atan2+0x3e>
 800934e:	a10c      	add	r1, pc, #48	@ (adr r1, 8009380 <__ieee754_atan2+0x168>)
 8009350:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009354:	e77f      	b.n	8009256 <__ieee754_atan2+0x3e>
 8009356:	2000      	movs	r0, #0
 8009358:	2100      	movs	r1, #0
 800935a:	e77c      	b.n	8009256 <__ieee754_atan2+0x3e>
 800935c:	a106      	add	r1, pc, #24	@ (adr r1, 8009378 <__ieee754_atan2+0x160>)
 800935e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009362:	e778      	b.n	8009256 <__ieee754_atan2+0x3e>
 8009364:	f3af 8000 	nop.w
 8009368:	33145c07 	.word	0x33145c07
 800936c:	3ca1a626 	.word	0x3ca1a626
 8009370:	54442d18 	.word	0x54442d18
 8009374:	400921fb 	.word	0x400921fb
 8009378:	54442d18 	.word	0x54442d18
 800937c:	3ff921fb 	.word	0x3ff921fb
 8009380:	54442d18 	.word	0x54442d18
 8009384:	3fe921fb 	.word	0x3fe921fb
 8009388:	0800b100 	.word	0x0800b100
 800938c:	0800b0e8 	.word	0x0800b0e8
 8009390:	54442d18 	.word	0x54442d18
 8009394:	c00921fb 	.word	0xc00921fb
 8009398:	54442d18 	.word	0x54442d18
 800939c:	bff921fb 	.word	0xbff921fb
 80093a0:	7ff00000 	.word	0x7ff00000
 80093a4:	00000000 	.word	0x00000000

080093a8 <__ieee754_pow>:
 80093a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ac:	b091      	sub	sp, #68	@ 0x44
 80093ae:	ed8d 1b00 	vstr	d1, [sp]
 80093b2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80093b6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80093ba:	ea5a 0001 	orrs.w	r0, sl, r1
 80093be:	ec57 6b10 	vmov	r6, r7, d0
 80093c2:	d113      	bne.n	80093ec <__ieee754_pow+0x44>
 80093c4:	19b3      	adds	r3, r6, r6
 80093c6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80093ca:	4152      	adcs	r2, r2
 80093cc:	4298      	cmp	r0, r3
 80093ce:	4b98      	ldr	r3, [pc, #608]	@ (8009630 <__ieee754_pow+0x288>)
 80093d0:	4193      	sbcs	r3, r2
 80093d2:	f080 84ea 	bcs.w	8009daa <__ieee754_pow+0xa02>
 80093d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093da:	4630      	mov	r0, r6
 80093dc:	4639      	mov	r1, r7
 80093de:	f7f6 ff19 	bl	8000214 <__adddf3>
 80093e2:	ec41 0b10 	vmov	d0, r0, r1
 80093e6:	b011      	add	sp, #68	@ 0x44
 80093e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ec:	4a91      	ldr	r2, [pc, #580]	@ (8009634 <__ieee754_pow+0x28c>)
 80093ee:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80093f2:	4590      	cmp	r8, r2
 80093f4:	463d      	mov	r5, r7
 80093f6:	4633      	mov	r3, r6
 80093f8:	d806      	bhi.n	8009408 <__ieee754_pow+0x60>
 80093fa:	d101      	bne.n	8009400 <__ieee754_pow+0x58>
 80093fc:	2e00      	cmp	r6, #0
 80093fe:	d1ea      	bne.n	80093d6 <__ieee754_pow+0x2e>
 8009400:	4592      	cmp	sl, r2
 8009402:	d801      	bhi.n	8009408 <__ieee754_pow+0x60>
 8009404:	d10e      	bne.n	8009424 <__ieee754_pow+0x7c>
 8009406:	b169      	cbz	r1, 8009424 <__ieee754_pow+0x7c>
 8009408:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800940c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009410:	431d      	orrs	r5, r3
 8009412:	d1e0      	bne.n	80093d6 <__ieee754_pow+0x2e>
 8009414:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009418:	18db      	adds	r3, r3, r3
 800941a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800941e:	4152      	adcs	r2, r2
 8009420:	429d      	cmp	r5, r3
 8009422:	e7d4      	b.n	80093ce <__ieee754_pow+0x26>
 8009424:	2d00      	cmp	r5, #0
 8009426:	46c3      	mov	fp, r8
 8009428:	da3a      	bge.n	80094a0 <__ieee754_pow+0xf8>
 800942a:	4a83      	ldr	r2, [pc, #524]	@ (8009638 <__ieee754_pow+0x290>)
 800942c:	4592      	cmp	sl, r2
 800942e:	d84d      	bhi.n	80094cc <__ieee754_pow+0x124>
 8009430:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009434:	4592      	cmp	sl, r2
 8009436:	f240 84c7 	bls.w	8009dc8 <__ieee754_pow+0xa20>
 800943a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800943e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009442:	2a14      	cmp	r2, #20
 8009444:	dd0f      	ble.n	8009466 <__ieee754_pow+0xbe>
 8009446:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800944a:	fa21 f402 	lsr.w	r4, r1, r2
 800944e:	fa04 f202 	lsl.w	r2, r4, r2
 8009452:	428a      	cmp	r2, r1
 8009454:	f040 84b8 	bne.w	8009dc8 <__ieee754_pow+0xa20>
 8009458:	f004 0401 	and.w	r4, r4, #1
 800945c:	f1c4 0402 	rsb	r4, r4, #2
 8009460:	2900      	cmp	r1, #0
 8009462:	d158      	bne.n	8009516 <__ieee754_pow+0x16e>
 8009464:	e00e      	b.n	8009484 <__ieee754_pow+0xdc>
 8009466:	2900      	cmp	r1, #0
 8009468:	d154      	bne.n	8009514 <__ieee754_pow+0x16c>
 800946a:	f1c2 0214 	rsb	r2, r2, #20
 800946e:	fa4a f402 	asr.w	r4, sl, r2
 8009472:	fa04 f202 	lsl.w	r2, r4, r2
 8009476:	4552      	cmp	r2, sl
 8009478:	f040 84a3 	bne.w	8009dc2 <__ieee754_pow+0xa1a>
 800947c:	f004 0401 	and.w	r4, r4, #1
 8009480:	f1c4 0402 	rsb	r4, r4, #2
 8009484:	4a6d      	ldr	r2, [pc, #436]	@ (800963c <__ieee754_pow+0x294>)
 8009486:	4592      	cmp	sl, r2
 8009488:	d12e      	bne.n	80094e8 <__ieee754_pow+0x140>
 800948a:	f1b9 0f00 	cmp.w	r9, #0
 800948e:	f280 8494 	bge.w	8009dba <__ieee754_pow+0xa12>
 8009492:	496a      	ldr	r1, [pc, #424]	@ (800963c <__ieee754_pow+0x294>)
 8009494:	4632      	mov	r2, r6
 8009496:	463b      	mov	r3, r7
 8009498:	2000      	movs	r0, #0
 800949a:	f7f7 f99b 	bl	80007d4 <__aeabi_ddiv>
 800949e:	e7a0      	b.n	80093e2 <__ieee754_pow+0x3a>
 80094a0:	2400      	movs	r4, #0
 80094a2:	bbc1      	cbnz	r1, 8009516 <__ieee754_pow+0x16e>
 80094a4:	4a63      	ldr	r2, [pc, #396]	@ (8009634 <__ieee754_pow+0x28c>)
 80094a6:	4592      	cmp	sl, r2
 80094a8:	d1ec      	bne.n	8009484 <__ieee754_pow+0xdc>
 80094aa:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80094ae:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80094b2:	431a      	orrs	r2, r3
 80094b4:	f000 8479 	beq.w	8009daa <__ieee754_pow+0xa02>
 80094b8:	4b61      	ldr	r3, [pc, #388]	@ (8009640 <__ieee754_pow+0x298>)
 80094ba:	4598      	cmp	r8, r3
 80094bc:	d908      	bls.n	80094d0 <__ieee754_pow+0x128>
 80094be:	f1b9 0f00 	cmp.w	r9, #0
 80094c2:	f2c0 8476 	blt.w	8009db2 <__ieee754_pow+0xa0a>
 80094c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094ca:	e78a      	b.n	80093e2 <__ieee754_pow+0x3a>
 80094cc:	2402      	movs	r4, #2
 80094ce:	e7e8      	b.n	80094a2 <__ieee754_pow+0xfa>
 80094d0:	f1b9 0f00 	cmp.w	r9, #0
 80094d4:	f04f 0000 	mov.w	r0, #0
 80094d8:	f04f 0100 	mov.w	r1, #0
 80094dc:	da81      	bge.n	80093e2 <__ieee754_pow+0x3a>
 80094de:	e9dd 0300 	ldrd	r0, r3, [sp]
 80094e2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80094e6:	e77c      	b.n	80093e2 <__ieee754_pow+0x3a>
 80094e8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80094ec:	d106      	bne.n	80094fc <__ieee754_pow+0x154>
 80094ee:	4632      	mov	r2, r6
 80094f0:	463b      	mov	r3, r7
 80094f2:	4630      	mov	r0, r6
 80094f4:	4639      	mov	r1, r7
 80094f6:	f7f7 f843 	bl	8000580 <__aeabi_dmul>
 80094fa:	e772      	b.n	80093e2 <__ieee754_pow+0x3a>
 80094fc:	4a51      	ldr	r2, [pc, #324]	@ (8009644 <__ieee754_pow+0x29c>)
 80094fe:	4591      	cmp	r9, r2
 8009500:	d109      	bne.n	8009516 <__ieee754_pow+0x16e>
 8009502:	2d00      	cmp	r5, #0
 8009504:	db07      	blt.n	8009516 <__ieee754_pow+0x16e>
 8009506:	ec47 6b10 	vmov	d0, r6, r7
 800950a:	b011      	add	sp, #68	@ 0x44
 800950c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009510:	f001 b8e6 	b.w	800a6e0 <__ieee754_sqrt>
 8009514:	2400      	movs	r4, #0
 8009516:	ec47 6b10 	vmov	d0, r6, r7
 800951a:	9302      	str	r3, [sp, #8]
 800951c:	f001 f81c 	bl	800a558 <fabs>
 8009520:	9b02      	ldr	r3, [sp, #8]
 8009522:	ec51 0b10 	vmov	r0, r1, d0
 8009526:	bb53      	cbnz	r3, 800957e <__ieee754_pow+0x1d6>
 8009528:	4b44      	ldr	r3, [pc, #272]	@ (800963c <__ieee754_pow+0x294>)
 800952a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800952e:	429a      	cmp	r2, r3
 8009530:	d002      	beq.n	8009538 <__ieee754_pow+0x190>
 8009532:	f1b8 0f00 	cmp.w	r8, #0
 8009536:	d122      	bne.n	800957e <__ieee754_pow+0x1d6>
 8009538:	f1b9 0f00 	cmp.w	r9, #0
 800953c:	da05      	bge.n	800954a <__ieee754_pow+0x1a2>
 800953e:	4602      	mov	r2, r0
 8009540:	460b      	mov	r3, r1
 8009542:	2000      	movs	r0, #0
 8009544:	493d      	ldr	r1, [pc, #244]	@ (800963c <__ieee754_pow+0x294>)
 8009546:	f7f7 f945 	bl	80007d4 <__aeabi_ddiv>
 800954a:	2d00      	cmp	r5, #0
 800954c:	f6bf af49 	bge.w	80093e2 <__ieee754_pow+0x3a>
 8009550:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8009554:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8009558:	ea58 0804 	orrs.w	r8, r8, r4
 800955c:	d108      	bne.n	8009570 <__ieee754_pow+0x1c8>
 800955e:	4602      	mov	r2, r0
 8009560:	460b      	mov	r3, r1
 8009562:	4610      	mov	r0, r2
 8009564:	4619      	mov	r1, r3
 8009566:	f7f6 fe53 	bl	8000210 <__aeabi_dsub>
 800956a:	4602      	mov	r2, r0
 800956c:	460b      	mov	r3, r1
 800956e:	e794      	b.n	800949a <__ieee754_pow+0xf2>
 8009570:	2c01      	cmp	r4, #1
 8009572:	f47f af36 	bne.w	80093e2 <__ieee754_pow+0x3a>
 8009576:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800957a:	4619      	mov	r1, r3
 800957c:	e731      	b.n	80093e2 <__ieee754_pow+0x3a>
 800957e:	0feb      	lsrs	r3, r5, #31
 8009580:	3b01      	subs	r3, #1
 8009582:	ea53 0204 	orrs.w	r2, r3, r4
 8009586:	d102      	bne.n	800958e <__ieee754_pow+0x1e6>
 8009588:	4632      	mov	r2, r6
 800958a:	463b      	mov	r3, r7
 800958c:	e7e9      	b.n	8009562 <__ieee754_pow+0x1ba>
 800958e:	3c01      	subs	r4, #1
 8009590:	431c      	orrs	r4, r3
 8009592:	d016      	beq.n	80095c2 <__ieee754_pow+0x21a>
 8009594:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8009620 <__ieee754_pow+0x278>
 8009598:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800959c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80095a0:	f240 8112 	bls.w	80097c8 <__ieee754_pow+0x420>
 80095a4:	4b28      	ldr	r3, [pc, #160]	@ (8009648 <__ieee754_pow+0x2a0>)
 80095a6:	459a      	cmp	sl, r3
 80095a8:	4b25      	ldr	r3, [pc, #148]	@ (8009640 <__ieee754_pow+0x298>)
 80095aa:	d916      	bls.n	80095da <__ieee754_pow+0x232>
 80095ac:	4598      	cmp	r8, r3
 80095ae:	d80b      	bhi.n	80095c8 <__ieee754_pow+0x220>
 80095b0:	f1b9 0f00 	cmp.w	r9, #0
 80095b4:	da0b      	bge.n	80095ce <__ieee754_pow+0x226>
 80095b6:	2000      	movs	r0, #0
 80095b8:	b011      	add	sp, #68	@ 0x44
 80095ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095be:	f001 b887 	b.w	800a6d0 <__math_oflow>
 80095c2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8009628 <__ieee754_pow+0x280>
 80095c6:	e7e7      	b.n	8009598 <__ieee754_pow+0x1f0>
 80095c8:	f1b9 0f00 	cmp.w	r9, #0
 80095cc:	dcf3      	bgt.n	80095b6 <__ieee754_pow+0x20e>
 80095ce:	2000      	movs	r0, #0
 80095d0:	b011      	add	sp, #68	@ 0x44
 80095d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d6:	f001 b873 	b.w	800a6c0 <__math_uflow>
 80095da:	4598      	cmp	r8, r3
 80095dc:	d20c      	bcs.n	80095f8 <__ieee754_pow+0x250>
 80095de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095e2:	2200      	movs	r2, #0
 80095e4:	2300      	movs	r3, #0
 80095e6:	f7f7 fa3d 	bl	8000a64 <__aeabi_dcmplt>
 80095ea:	3800      	subs	r0, #0
 80095ec:	bf18      	it	ne
 80095ee:	2001      	movne	r0, #1
 80095f0:	f1b9 0f00 	cmp.w	r9, #0
 80095f4:	daec      	bge.n	80095d0 <__ieee754_pow+0x228>
 80095f6:	e7df      	b.n	80095b8 <__ieee754_pow+0x210>
 80095f8:	4b10      	ldr	r3, [pc, #64]	@ (800963c <__ieee754_pow+0x294>)
 80095fa:	4598      	cmp	r8, r3
 80095fc:	f04f 0200 	mov.w	r2, #0
 8009600:	d924      	bls.n	800964c <__ieee754_pow+0x2a4>
 8009602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009606:	2300      	movs	r3, #0
 8009608:	f7f7 fa2c 	bl	8000a64 <__aeabi_dcmplt>
 800960c:	3800      	subs	r0, #0
 800960e:	bf18      	it	ne
 8009610:	2001      	movne	r0, #1
 8009612:	f1b9 0f00 	cmp.w	r9, #0
 8009616:	dccf      	bgt.n	80095b8 <__ieee754_pow+0x210>
 8009618:	e7da      	b.n	80095d0 <__ieee754_pow+0x228>
 800961a:	bf00      	nop
 800961c:	f3af 8000 	nop.w
 8009620:	00000000 	.word	0x00000000
 8009624:	3ff00000 	.word	0x3ff00000
 8009628:	00000000 	.word	0x00000000
 800962c:	bff00000 	.word	0xbff00000
 8009630:	fff00000 	.word	0xfff00000
 8009634:	7ff00000 	.word	0x7ff00000
 8009638:	433fffff 	.word	0x433fffff
 800963c:	3ff00000 	.word	0x3ff00000
 8009640:	3fefffff 	.word	0x3fefffff
 8009644:	3fe00000 	.word	0x3fe00000
 8009648:	43f00000 	.word	0x43f00000
 800964c:	4b5a      	ldr	r3, [pc, #360]	@ (80097b8 <__ieee754_pow+0x410>)
 800964e:	f7f6 fddf 	bl	8000210 <__aeabi_dsub>
 8009652:	a351      	add	r3, pc, #324	@ (adr r3, 8009798 <__ieee754_pow+0x3f0>)
 8009654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009658:	4604      	mov	r4, r0
 800965a:	460d      	mov	r5, r1
 800965c:	f7f6 ff90 	bl	8000580 <__aeabi_dmul>
 8009660:	a34f      	add	r3, pc, #316	@ (adr r3, 80097a0 <__ieee754_pow+0x3f8>)
 8009662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009666:	4606      	mov	r6, r0
 8009668:	460f      	mov	r7, r1
 800966a:	4620      	mov	r0, r4
 800966c:	4629      	mov	r1, r5
 800966e:	f7f6 ff87 	bl	8000580 <__aeabi_dmul>
 8009672:	4b52      	ldr	r3, [pc, #328]	@ (80097bc <__ieee754_pow+0x414>)
 8009674:	4682      	mov	sl, r0
 8009676:	468b      	mov	fp, r1
 8009678:	2200      	movs	r2, #0
 800967a:	4620      	mov	r0, r4
 800967c:	4629      	mov	r1, r5
 800967e:	f7f6 ff7f 	bl	8000580 <__aeabi_dmul>
 8009682:	4602      	mov	r2, r0
 8009684:	460b      	mov	r3, r1
 8009686:	a148      	add	r1, pc, #288	@ (adr r1, 80097a8 <__ieee754_pow+0x400>)
 8009688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800968c:	f7f6 fdc0 	bl	8000210 <__aeabi_dsub>
 8009690:	4622      	mov	r2, r4
 8009692:	462b      	mov	r3, r5
 8009694:	f7f6 ff74 	bl	8000580 <__aeabi_dmul>
 8009698:	4602      	mov	r2, r0
 800969a:	460b      	mov	r3, r1
 800969c:	2000      	movs	r0, #0
 800969e:	4948      	ldr	r1, [pc, #288]	@ (80097c0 <__ieee754_pow+0x418>)
 80096a0:	f7f6 fdb6 	bl	8000210 <__aeabi_dsub>
 80096a4:	4622      	mov	r2, r4
 80096a6:	4680      	mov	r8, r0
 80096a8:	4689      	mov	r9, r1
 80096aa:	462b      	mov	r3, r5
 80096ac:	4620      	mov	r0, r4
 80096ae:	4629      	mov	r1, r5
 80096b0:	f7f6 ff66 	bl	8000580 <__aeabi_dmul>
 80096b4:	4602      	mov	r2, r0
 80096b6:	460b      	mov	r3, r1
 80096b8:	4640      	mov	r0, r8
 80096ba:	4649      	mov	r1, r9
 80096bc:	f7f6 ff60 	bl	8000580 <__aeabi_dmul>
 80096c0:	a33b      	add	r3, pc, #236	@ (adr r3, 80097b0 <__ieee754_pow+0x408>)
 80096c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c6:	f7f6 ff5b 	bl	8000580 <__aeabi_dmul>
 80096ca:	4602      	mov	r2, r0
 80096cc:	460b      	mov	r3, r1
 80096ce:	4650      	mov	r0, sl
 80096d0:	4659      	mov	r1, fp
 80096d2:	f7f6 fd9d 	bl	8000210 <__aeabi_dsub>
 80096d6:	4602      	mov	r2, r0
 80096d8:	460b      	mov	r3, r1
 80096da:	4680      	mov	r8, r0
 80096dc:	4689      	mov	r9, r1
 80096de:	4630      	mov	r0, r6
 80096e0:	4639      	mov	r1, r7
 80096e2:	f7f6 fd97 	bl	8000214 <__adddf3>
 80096e6:	2400      	movs	r4, #0
 80096e8:	4632      	mov	r2, r6
 80096ea:	463b      	mov	r3, r7
 80096ec:	4620      	mov	r0, r4
 80096ee:	460d      	mov	r5, r1
 80096f0:	f7f6 fd8e 	bl	8000210 <__aeabi_dsub>
 80096f4:	4602      	mov	r2, r0
 80096f6:	460b      	mov	r3, r1
 80096f8:	4640      	mov	r0, r8
 80096fa:	4649      	mov	r1, r9
 80096fc:	f7f6 fd88 	bl	8000210 <__aeabi_dsub>
 8009700:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009704:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009708:	2300      	movs	r3, #0
 800970a:	9304      	str	r3, [sp, #16]
 800970c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009710:	4606      	mov	r6, r0
 8009712:	460f      	mov	r7, r1
 8009714:	4652      	mov	r2, sl
 8009716:	465b      	mov	r3, fp
 8009718:	e9dd 0100 	ldrd	r0, r1, [sp]
 800971c:	f7f6 fd78 	bl	8000210 <__aeabi_dsub>
 8009720:	4622      	mov	r2, r4
 8009722:	462b      	mov	r3, r5
 8009724:	f7f6 ff2c 	bl	8000580 <__aeabi_dmul>
 8009728:	e9dd 2300 	ldrd	r2, r3, [sp]
 800972c:	4680      	mov	r8, r0
 800972e:	4689      	mov	r9, r1
 8009730:	4630      	mov	r0, r6
 8009732:	4639      	mov	r1, r7
 8009734:	f7f6 ff24 	bl	8000580 <__aeabi_dmul>
 8009738:	4602      	mov	r2, r0
 800973a:	460b      	mov	r3, r1
 800973c:	4640      	mov	r0, r8
 800973e:	4649      	mov	r1, r9
 8009740:	f7f6 fd68 	bl	8000214 <__adddf3>
 8009744:	4652      	mov	r2, sl
 8009746:	465b      	mov	r3, fp
 8009748:	4606      	mov	r6, r0
 800974a:	460f      	mov	r7, r1
 800974c:	4620      	mov	r0, r4
 800974e:	4629      	mov	r1, r5
 8009750:	f7f6 ff16 	bl	8000580 <__aeabi_dmul>
 8009754:	460b      	mov	r3, r1
 8009756:	4602      	mov	r2, r0
 8009758:	4680      	mov	r8, r0
 800975a:	4689      	mov	r9, r1
 800975c:	4630      	mov	r0, r6
 800975e:	4639      	mov	r1, r7
 8009760:	f7f6 fd58 	bl	8000214 <__adddf3>
 8009764:	4b17      	ldr	r3, [pc, #92]	@ (80097c4 <__ieee754_pow+0x41c>)
 8009766:	4299      	cmp	r1, r3
 8009768:	4604      	mov	r4, r0
 800976a:	460d      	mov	r5, r1
 800976c:	468a      	mov	sl, r1
 800976e:	468b      	mov	fp, r1
 8009770:	f340 82ef 	ble.w	8009d52 <__ieee754_pow+0x9aa>
 8009774:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009778:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800977c:	4303      	orrs	r3, r0
 800977e:	f000 81e8 	beq.w	8009b52 <__ieee754_pow+0x7aa>
 8009782:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009786:	2200      	movs	r2, #0
 8009788:	2300      	movs	r3, #0
 800978a:	f7f7 f96b 	bl	8000a64 <__aeabi_dcmplt>
 800978e:	3800      	subs	r0, #0
 8009790:	bf18      	it	ne
 8009792:	2001      	movne	r0, #1
 8009794:	e710      	b.n	80095b8 <__ieee754_pow+0x210>
 8009796:	bf00      	nop
 8009798:	60000000 	.word	0x60000000
 800979c:	3ff71547 	.word	0x3ff71547
 80097a0:	f85ddf44 	.word	0xf85ddf44
 80097a4:	3e54ae0b 	.word	0x3e54ae0b
 80097a8:	55555555 	.word	0x55555555
 80097ac:	3fd55555 	.word	0x3fd55555
 80097b0:	652b82fe 	.word	0x652b82fe
 80097b4:	3ff71547 	.word	0x3ff71547
 80097b8:	3ff00000 	.word	0x3ff00000
 80097bc:	3fd00000 	.word	0x3fd00000
 80097c0:	3fe00000 	.word	0x3fe00000
 80097c4:	408fffff 	.word	0x408fffff
 80097c8:	4bd5      	ldr	r3, [pc, #852]	@ (8009b20 <__ieee754_pow+0x778>)
 80097ca:	402b      	ands	r3, r5
 80097cc:	2200      	movs	r2, #0
 80097ce:	b92b      	cbnz	r3, 80097dc <__ieee754_pow+0x434>
 80097d0:	4bd4      	ldr	r3, [pc, #848]	@ (8009b24 <__ieee754_pow+0x77c>)
 80097d2:	f7f6 fed5 	bl	8000580 <__aeabi_dmul>
 80097d6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80097da:	468b      	mov	fp, r1
 80097dc:	ea4f 532b 	mov.w	r3, fp, asr #20
 80097e0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80097e4:	4413      	add	r3, r2
 80097e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80097e8:	4bcf      	ldr	r3, [pc, #828]	@ (8009b28 <__ieee754_pow+0x780>)
 80097ea:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80097ee:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80097f2:	459b      	cmp	fp, r3
 80097f4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80097f8:	dd08      	ble.n	800980c <__ieee754_pow+0x464>
 80097fa:	4bcc      	ldr	r3, [pc, #816]	@ (8009b2c <__ieee754_pow+0x784>)
 80097fc:	459b      	cmp	fp, r3
 80097fe:	f340 81a5 	ble.w	8009b4c <__ieee754_pow+0x7a4>
 8009802:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009804:	3301      	adds	r3, #1
 8009806:	930a      	str	r3, [sp, #40]	@ 0x28
 8009808:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800980c:	f04f 0a00 	mov.w	sl, #0
 8009810:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009814:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009816:	4bc6      	ldr	r3, [pc, #792]	@ (8009b30 <__ieee754_pow+0x788>)
 8009818:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800981c:	ed93 7b00 	vldr	d7, [r3]
 8009820:	4629      	mov	r1, r5
 8009822:	ec53 2b17 	vmov	r2, r3, d7
 8009826:	ed8d 7b06 	vstr	d7, [sp, #24]
 800982a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800982e:	f7f6 fcef 	bl	8000210 <__aeabi_dsub>
 8009832:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009836:	4606      	mov	r6, r0
 8009838:	460f      	mov	r7, r1
 800983a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800983e:	f7f6 fce9 	bl	8000214 <__adddf3>
 8009842:	4602      	mov	r2, r0
 8009844:	460b      	mov	r3, r1
 8009846:	2000      	movs	r0, #0
 8009848:	49ba      	ldr	r1, [pc, #744]	@ (8009b34 <__ieee754_pow+0x78c>)
 800984a:	f7f6 ffc3 	bl	80007d4 <__aeabi_ddiv>
 800984e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009852:	4602      	mov	r2, r0
 8009854:	460b      	mov	r3, r1
 8009856:	4630      	mov	r0, r6
 8009858:	4639      	mov	r1, r7
 800985a:	f7f6 fe91 	bl	8000580 <__aeabi_dmul>
 800985e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009862:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8009866:	106d      	asrs	r5, r5, #1
 8009868:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800986c:	f04f 0b00 	mov.w	fp, #0
 8009870:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009874:	4661      	mov	r1, ip
 8009876:	2200      	movs	r2, #0
 8009878:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800987c:	4658      	mov	r0, fp
 800987e:	46e1      	mov	r9, ip
 8009880:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8009884:	4614      	mov	r4, r2
 8009886:	461d      	mov	r5, r3
 8009888:	f7f6 fe7a 	bl	8000580 <__aeabi_dmul>
 800988c:	4602      	mov	r2, r0
 800988e:	460b      	mov	r3, r1
 8009890:	4630      	mov	r0, r6
 8009892:	4639      	mov	r1, r7
 8009894:	f7f6 fcbc 	bl	8000210 <__aeabi_dsub>
 8009898:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800989c:	4606      	mov	r6, r0
 800989e:	460f      	mov	r7, r1
 80098a0:	4620      	mov	r0, r4
 80098a2:	4629      	mov	r1, r5
 80098a4:	f7f6 fcb4 	bl	8000210 <__aeabi_dsub>
 80098a8:	4602      	mov	r2, r0
 80098aa:	460b      	mov	r3, r1
 80098ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80098b0:	f7f6 fcae 	bl	8000210 <__aeabi_dsub>
 80098b4:	465a      	mov	r2, fp
 80098b6:	464b      	mov	r3, r9
 80098b8:	f7f6 fe62 	bl	8000580 <__aeabi_dmul>
 80098bc:	4602      	mov	r2, r0
 80098be:	460b      	mov	r3, r1
 80098c0:	4630      	mov	r0, r6
 80098c2:	4639      	mov	r1, r7
 80098c4:	f7f6 fca4 	bl	8000210 <__aeabi_dsub>
 80098c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80098cc:	f7f6 fe58 	bl	8000580 <__aeabi_dmul>
 80098d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80098d8:	4610      	mov	r0, r2
 80098da:	4619      	mov	r1, r3
 80098dc:	f7f6 fe50 	bl	8000580 <__aeabi_dmul>
 80098e0:	a37d      	add	r3, pc, #500	@ (adr r3, 8009ad8 <__ieee754_pow+0x730>)
 80098e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e6:	4604      	mov	r4, r0
 80098e8:	460d      	mov	r5, r1
 80098ea:	f7f6 fe49 	bl	8000580 <__aeabi_dmul>
 80098ee:	a37c      	add	r3, pc, #496	@ (adr r3, 8009ae0 <__ieee754_pow+0x738>)
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	f7f6 fc8e 	bl	8000214 <__adddf3>
 80098f8:	4622      	mov	r2, r4
 80098fa:	462b      	mov	r3, r5
 80098fc:	f7f6 fe40 	bl	8000580 <__aeabi_dmul>
 8009900:	a379      	add	r3, pc, #484	@ (adr r3, 8009ae8 <__ieee754_pow+0x740>)
 8009902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009906:	f7f6 fc85 	bl	8000214 <__adddf3>
 800990a:	4622      	mov	r2, r4
 800990c:	462b      	mov	r3, r5
 800990e:	f7f6 fe37 	bl	8000580 <__aeabi_dmul>
 8009912:	a377      	add	r3, pc, #476	@ (adr r3, 8009af0 <__ieee754_pow+0x748>)
 8009914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009918:	f7f6 fc7c 	bl	8000214 <__adddf3>
 800991c:	4622      	mov	r2, r4
 800991e:	462b      	mov	r3, r5
 8009920:	f7f6 fe2e 	bl	8000580 <__aeabi_dmul>
 8009924:	a374      	add	r3, pc, #464	@ (adr r3, 8009af8 <__ieee754_pow+0x750>)
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	f7f6 fc73 	bl	8000214 <__adddf3>
 800992e:	4622      	mov	r2, r4
 8009930:	462b      	mov	r3, r5
 8009932:	f7f6 fe25 	bl	8000580 <__aeabi_dmul>
 8009936:	a372      	add	r3, pc, #456	@ (adr r3, 8009b00 <__ieee754_pow+0x758>)
 8009938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993c:	f7f6 fc6a 	bl	8000214 <__adddf3>
 8009940:	4622      	mov	r2, r4
 8009942:	4606      	mov	r6, r0
 8009944:	460f      	mov	r7, r1
 8009946:	462b      	mov	r3, r5
 8009948:	4620      	mov	r0, r4
 800994a:	4629      	mov	r1, r5
 800994c:	f7f6 fe18 	bl	8000580 <__aeabi_dmul>
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	4630      	mov	r0, r6
 8009956:	4639      	mov	r1, r7
 8009958:	f7f6 fe12 	bl	8000580 <__aeabi_dmul>
 800995c:	465a      	mov	r2, fp
 800995e:	4604      	mov	r4, r0
 8009960:	460d      	mov	r5, r1
 8009962:	464b      	mov	r3, r9
 8009964:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009968:	f7f6 fc54 	bl	8000214 <__adddf3>
 800996c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009970:	f7f6 fe06 	bl	8000580 <__aeabi_dmul>
 8009974:	4622      	mov	r2, r4
 8009976:	462b      	mov	r3, r5
 8009978:	f7f6 fc4c 	bl	8000214 <__adddf3>
 800997c:	465a      	mov	r2, fp
 800997e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009982:	464b      	mov	r3, r9
 8009984:	4658      	mov	r0, fp
 8009986:	4649      	mov	r1, r9
 8009988:	f7f6 fdfa 	bl	8000580 <__aeabi_dmul>
 800998c:	4b6a      	ldr	r3, [pc, #424]	@ (8009b38 <__ieee754_pow+0x790>)
 800998e:	2200      	movs	r2, #0
 8009990:	4606      	mov	r6, r0
 8009992:	460f      	mov	r7, r1
 8009994:	f7f6 fc3e 	bl	8000214 <__adddf3>
 8009998:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800999c:	f7f6 fc3a 	bl	8000214 <__adddf3>
 80099a0:	46d8      	mov	r8, fp
 80099a2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80099a6:	460d      	mov	r5, r1
 80099a8:	465a      	mov	r2, fp
 80099aa:	460b      	mov	r3, r1
 80099ac:	4640      	mov	r0, r8
 80099ae:	4649      	mov	r1, r9
 80099b0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80099b4:	f7f6 fde4 	bl	8000580 <__aeabi_dmul>
 80099b8:	465c      	mov	r4, fp
 80099ba:	4680      	mov	r8, r0
 80099bc:	4689      	mov	r9, r1
 80099be:	4b5e      	ldr	r3, [pc, #376]	@ (8009b38 <__ieee754_pow+0x790>)
 80099c0:	2200      	movs	r2, #0
 80099c2:	4620      	mov	r0, r4
 80099c4:	4629      	mov	r1, r5
 80099c6:	f7f6 fc23 	bl	8000210 <__aeabi_dsub>
 80099ca:	4632      	mov	r2, r6
 80099cc:	463b      	mov	r3, r7
 80099ce:	f7f6 fc1f 	bl	8000210 <__aeabi_dsub>
 80099d2:	4602      	mov	r2, r0
 80099d4:	460b      	mov	r3, r1
 80099d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80099da:	f7f6 fc19 	bl	8000210 <__aeabi_dsub>
 80099de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099e2:	f7f6 fdcd 	bl	8000580 <__aeabi_dmul>
 80099e6:	4622      	mov	r2, r4
 80099e8:	4606      	mov	r6, r0
 80099ea:	460f      	mov	r7, r1
 80099ec:	462b      	mov	r3, r5
 80099ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099f2:	f7f6 fdc5 	bl	8000580 <__aeabi_dmul>
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	4630      	mov	r0, r6
 80099fc:	4639      	mov	r1, r7
 80099fe:	f7f6 fc09 	bl	8000214 <__adddf3>
 8009a02:	4606      	mov	r6, r0
 8009a04:	460f      	mov	r7, r1
 8009a06:	4602      	mov	r2, r0
 8009a08:	460b      	mov	r3, r1
 8009a0a:	4640      	mov	r0, r8
 8009a0c:	4649      	mov	r1, r9
 8009a0e:	f7f6 fc01 	bl	8000214 <__adddf3>
 8009a12:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8009a16:	a33c      	add	r3, pc, #240	@ (adr r3, 8009b08 <__ieee754_pow+0x760>)
 8009a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1c:	4658      	mov	r0, fp
 8009a1e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8009a22:	460d      	mov	r5, r1
 8009a24:	f7f6 fdac 	bl	8000580 <__aeabi_dmul>
 8009a28:	465c      	mov	r4, fp
 8009a2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a2e:	4642      	mov	r2, r8
 8009a30:	464b      	mov	r3, r9
 8009a32:	4620      	mov	r0, r4
 8009a34:	4629      	mov	r1, r5
 8009a36:	f7f6 fbeb 	bl	8000210 <__aeabi_dsub>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	4630      	mov	r0, r6
 8009a40:	4639      	mov	r1, r7
 8009a42:	f7f6 fbe5 	bl	8000210 <__aeabi_dsub>
 8009a46:	a332      	add	r3, pc, #200	@ (adr r3, 8009b10 <__ieee754_pow+0x768>)
 8009a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4c:	f7f6 fd98 	bl	8000580 <__aeabi_dmul>
 8009a50:	a331      	add	r3, pc, #196	@ (adr r3, 8009b18 <__ieee754_pow+0x770>)
 8009a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a56:	4606      	mov	r6, r0
 8009a58:	460f      	mov	r7, r1
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	4629      	mov	r1, r5
 8009a5e:	f7f6 fd8f 	bl	8000580 <__aeabi_dmul>
 8009a62:	4602      	mov	r2, r0
 8009a64:	460b      	mov	r3, r1
 8009a66:	4630      	mov	r0, r6
 8009a68:	4639      	mov	r1, r7
 8009a6a:	f7f6 fbd3 	bl	8000214 <__adddf3>
 8009a6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009a70:	4b32      	ldr	r3, [pc, #200]	@ (8009b3c <__ieee754_pow+0x794>)
 8009a72:	4413      	add	r3, r2
 8009a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a78:	f7f6 fbcc 	bl	8000214 <__adddf3>
 8009a7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009a80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009a82:	f7f6 fd13 	bl	80004ac <__aeabi_i2d>
 8009a86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009a88:	4b2d      	ldr	r3, [pc, #180]	@ (8009b40 <__ieee754_pow+0x798>)
 8009a8a:	4413      	add	r3, r2
 8009a8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a90:	4606      	mov	r6, r0
 8009a92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a96:	460f      	mov	r7, r1
 8009a98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a9c:	f7f6 fbba 	bl	8000214 <__adddf3>
 8009aa0:	4642      	mov	r2, r8
 8009aa2:	464b      	mov	r3, r9
 8009aa4:	f7f6 fbb6 	bl	8000214 <__adddf3>
 8009aa8:	4632      	mov	r2, r6
 8009aaa:	463b      	mov	r3, r7
 8009aac:	f7f6 fbb2 	bl	8000214 <__adddf3>
 8009ab0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8009ab4:	4632      	mov	r2, r6
 8009ab6:	463b      	mov	r3, r7
 8009ab8:	4658      	mov	r0, fp
 8009aba:	460d      	mov	r5, r1
 8009abc:	f7f6 fba8 	bl	8000210 <__aeabi_dsub>
 8009ac0:	4642      	mov	r2, r8
 8009ac2:	464b      	mov	r3, r9
 8009ac4:	f7f6 fba4 	bl	8000210 <__aeabi_dsub>
 8009ac8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009acc:	f7f6 fba0 	bl	8000210 <__aeabi_dsub>
 8009ad0:	465c      	mov	r4, fp
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	e036      	b.n	8009b44 <__ieee754_pow+0x79c>
 8009ad6:	bf00      	nop
 8009ad8:	4a454eef 	.word	0x4a454eef
 8009adc:	3fca7e28 	.word	0x3fca7e28
 8009ae0:	93c9db65 	.word	0x93c9db65
 8009ae4:	3fcd864a 	.word	0x3fcd864a
 8009ae8:	a91d4101 	.word	0xa91d4101
 8009aec:	3fd17460 	.word	0x3fd17460
 8009af0:	518f264d 	.word	0x518f264d
 8009af4:	3fd55555 	.word	0x3fd55555
 8009af8:	db6fabff 	.word	0xdb6fabff
 8009afc:	3fdb6db6 	.word	0x3fdb6db6
 8009b00:	33333303 	.word	0x33333303
 8009b04:	3fe33333 	.word	0x3fe33333
 8009b08:	e0000000 	.word	0xe0000000
 8009b0c:	3feec709 	.word	0x3feec709
 8009b10:	dc3a03fd 	.word	0xdc3a03fd
 8009b14:	3feec709 	.word	0x3feec709
 8009b18:	145b01f5 	.word	0x145b01f5
 8009b1c:	be3e2fe0 	.word	0xbe3e2fe0
 8009b20:	7ff00000 	.word	0x7ff00000
 8009b24:	43400000 	.word	0x43400000
 8009b28:	0003988e 	.word	0x0003988e
 8009b2c:	000bb679 	.word	0x000bb679
 8009b30:	0800b138 	.word	0x0800b138
 8009b34:	3ff00000 	.word	0x3ff00000
 8009b38:	40080000 	.word	0x40080000
 8009b3c:	0800b118 	.word	0x0800b118
 8009b40:	0800b128 	.word	0x0800b128
 8009b44:	460b      	mov	r3, r1
 8009b46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b4a:	e5d7      	b.n	80096fc <__ieee754_pow+0x354>
 8009b4c:	f04f 0a01 	mov.w	sl, #1
 8009b50:	e65e      	b.n	8009810 <__ieee754_pow+0x468>
 8009b52:	a3b4      	add	r3, pc, #720	@ (adr r3, 8009e24 <__ieee754_pow+0xa7c>)
 8009b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b58:	4630      	mov	r0, r6
 8009b5a:	4639      	mov	r1, r7
 8009b5c:	f7f6 fb5a 	bl	8000214 <__adddf3>
 8009b60:	4642      	mov	r2, r8
 8009b62:	e9cd 0100 	strd	r0, r1, [sp]
 8009b66:	464b      	mov	r3, r9
 8009b68:	4620      	mov	r0, r4
 8009b6a:	4629      	mov	r1, r5
 8009b6c:	f7f6 fb50 	bl	8000210 <__aeabi_dsub>
 8009b70:	4602      	mov	r2, r0
 8009b72:	460b      	mov	r3, r1
 8009b74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b78:	f7f6 ff92 	bl	8000aa0 <__aeabi_dcmpgt>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	f47f ae00 	bne.w	8009782 <__ieee754_pow+0x3da>
 8009b82:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8009b86:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009b8a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8009b8e:	fa43 fa0a 	asr.w	sl, r3, sl
 8009b92:	44da      	add	sl, fp
 8009b94:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009b98:	489d      	ldr	r0, [pc, #628]	@ (8009e10 <__ieee754_pow+0xa68>)
 8009b9a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8009b9e:	4108      	asrs	r0, r1
 8009ba0:	ea00 030a 	and.w	r3, r0, sl
 8009ba4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009ba8:	f1c1 0114 	rsb	r1, r1, #20
 8009bac:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8009bb0:	fa4a fa01 	asr.w	sl, sl, r1
 8009bb4:	f1bb 0f00 	cmp.w	fp, #0
 8009bb8:	4640      	mov	r0, r8
 8009bba:	4649      	mov	r1, r9
 8009bbc:	f04f 0200 	mov.w	r2, #0
 8009bc0:	bfb8      	it	lt
 8009bc2:	f1ca 0a00 	rsblt	sl, sl, #0
 8009bc6:	f7f6 fb23 	bl	8000210 <__aeabi_dsub>
 8009bca:	4680      	mov	r8, r0
 8009bcc:	4689      	mov	r9, r1
 8009bce:	4632      	mov	r2, r6
 8009bd0:	463b      	mov	r3, r7
 8009bd2:	4640      	mov	r0, r8
 8009bd4:	4649      	mov	r1, r9
 8009bd6:	f7f6 fb1d 	bl	8000214 <__adddf3>
 8009bda:	2400      	movs	r4, #0
 8009bdc:	a37c      	add	r3, pc, #496	@ (adr r3, 8009dd0 <__ieee754_pow+0xa28>)
 8009bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be2:	4620      	mov	r0, r4
 8009be4:	460d      	mov	r5, r1
 8009be6:	f7f6 fccb 	bl	8000580 <__aeabi_dmul>
 8009bea:	4642      	mov	r2, r8
 8009bec:	e9cd 0100 	strd	r0, r1, [sp]
 8009bf0:	464b      	mov	r3, r9
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	4629      	mov	r1, r5
 8009bf6:	f7f6 fb0b 	bl	8000210 <__aeabi_dsub>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	4630      	mov	r0, r6
 8009c00:	4639      	mov	r1, r7
 8009c02:	f7f6 fb05 	bl	8000210 <__aeabi_dsub>
 8009c06:	a374      	add	r3, pc, #464	@ (adr r3, 8009dd8 <__ieee754_pow+0xa30>)
 8009c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0c:	f7f6 fcb8 	bl	8000580 <__aeabi_dmul>
 8009c10:	a373      	add	r3, pc, #460	@ (adr r3, 8009de0 <__ieee754_pow+0xa38>)
 8009c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c16:	4680      	mov	r8, r0
 8009c18:	4689      	mov	r9, r1
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	4629      	mov	r1, r5
 8009c1e:	f7f6 fcaf 	bl	8000580 <__aeabi_dmul>
 8009c22:	4602      	mov	r2, r0
 8009c24:	460b      	mov	r3, r1
 8009c26:	4640      	mov	r0, r8
 8009c28:	4649      	mov	r1, r9
 8009c2a:	f7f6 faf3 	bl	8000214 <__adddf3>
 8009c2e:	4604      	mov	r4, r0
 8009c30:	460d      	mov	r5, r1
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c3a:	f7f6 faeb 	bl	8000214 <__adddf3>
 8009c3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c42:	4680      	mov	r8, r0
 8009c44:	4689      	mov	r9, r1
 8009c46:	f7f6 fae3 	bl	8000210 <__aeabi_dsub>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	4620      	mov	r0, r4
 8009c50:	4629      	mov	r1, r5
 8009c52:	f7f6 fadd 	bl	8000210 <__aeabi_dsub>
 8009c56:	4642      	mov	r2, r8
 8009c58:	4606      	mov	r6, r0
 8009c5a:	460f      	mov	r7, r1
 8009c5c:	464b      	mov	r3, r9
 8009c5e:	4640      	mov	r0, r8
 8009c60:	4649      	mov	r1, r9
 8009c62:	f7f6 fc8d 	bl	8000580 <__aeabi_dmul>
 8009c66:	a360      	add	r3, pc, #384	@ (adr r3, 8009de8 <__ieee754_pow+0xa40>)
 8009c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	460d      	mov	r5, r1
 8009c70:	f7f6 fc86 	bl	8000580 <__aeabi_dmul>
 8009c74:	a35e      	add	r3, pc, #376	@ (adr r3, 8009df0 <__ieee754_pow+0xa48>)
 8009c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7a:	f7f6 fac9 	bl	8000210 <__aeabi_dsub>
 8009c7e:	4622      	mov	r2, r4
 8009c80:	462b      	mov	r3, r5
 8009c82:	f7f6 fc7d 	bl	8000580 <__aeabi_dmul>
 8009c86:	a35c      	add	r3, pc, #368	@ (adr r3, 8009df8 <__ieee754_pow+0xa50>)
 8009c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8c:	f7f6 fac2 	bl	8000214 <__adddf3>
 8009c90:	4622      	mov	r2, r4
 8009c92:	462b      	mov	r3, r5
 8009c94:	f7f6 fc74 	bl	8000580 <__aeabi_dmul>
 8009c98:	a359      	add	r3, pc, #356	@ (adr r3, 8009e00 <__ieee754_pow+0xa58>)
 8009c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9e:	f7f6 fab7 	bl	8000210 <__aeabi_dsub>
 8009ca2:	4622      	mov	r2, r4
 8009ca4:	462b      	mov	r3, r5
 8009ca6:	f7f6 fc6b 	bl	8000580 <__aeabi_dmul>
 8009caa:	a357      	add	r3, pc, #348	@ (adr r3, 8009e08 <__ieee754_pow+0xa60>)
 8009cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb0:	f7f6 fab0 	bl	8000214 <__adddf3>
 8009cb4:	4622      	mov	r2, r4
 8009cb6:	462b      	mov	r3, r5
 8009cb8:	f7f6 fc62 	bl	8000580 <__aeabi_dmul>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	4640      	mov	r0, r8
 8009cc2:	4649      	mov	r1, r9
 8009cc4:	f7f6 faa4 	bl	8000210 <__aeabi_dsub>
 8009cc8:	4604      	mov	r4, r0
 8009cca:	460d      	mov	r5, r1
 8009ccc:	4602      	mov	r2, r0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	4640      	mov	r0, r8
 8009cd2:	4649      	mov	r1, r9
 8009cd4:	f7f6 fc54 	bl	8000580 <__aeabi_dmul>
 8009cd8:	2200      	movs	r2, #0
 8009cda:	e9cd 0100 	strd	r0, r1, [sp]
 8009cde:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	4629      	mov	r1, r5
 8009ce6:	f7f6 fa93 	bl	8000210 <__aeabi_dsub>
 8009cea:	4602      	mov	r2, r0
 8009cec:	460b      	mov	r3, r1
 8009cee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cf2:	f7f6 fd6f 	bl	80007d4 <__aeabi_ddiv>
 8009cf6:	4632      	mov	r2, r6
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	460d      	mov	r5, r1
 8009cfc:	463b      	mov	r3, r7
 8009cfe:	4640      	mov	r0, r8
 8009d00:	4649      	mov	r1, r9
 8009d02:	f7f6 fc3d 	bl	8000580 <__aeabi_dmul>
 8009d06:	4632      	mov	r2, r6
 8009d08:	463b      	mov	r3, r7
 8009d0a:	f7f6 fa83 	bl	8000214 <__adddf3>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	460b      	mov	r3, r1
 8009d12:	4620      	mov	r0, r4
 8009d14:	4629      	mov	r1, r5
 8009d16:	f7f6 fa7b 	bl	8000210 <__aeabi_dsub>
 8009d1a:	4642      	mov	r2, r8
 8009d1c:	464b      	mov	r3, r9
 8009d1e:	f7f6 fa77 	bl	8000210 <__aeabi_dsub>
 8009d22:	460b      	mov	r3, r1
 8009d24:	4602      	mov	r2, r0
 8009d26:	493b      	ldr	r1, [pc, #236]	@ (8009e14 <__ieee754_pow+0xa6c>)
 8009d28:	2000      	movs	r0, #0
 8009d2a:	f7f6 fa71 	bl	8000210 <__aeabi_dsub>
 8009d2e:	ec41 0b10 	vmov	d0, r0, r1
 8009d32:	ee10 3a90 	vmov	r3, s1
 8009d36:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009d3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d3e:	da30      	bge.n	8009da2 <__ieee754_pow+0x9fa>
 8009d40:	4650      	mov	r0, sl
 8009d42:	f000 fc11 	bl	800a568 <scalbn>
 8009d46:	ec51 0b10 	vmov	r0, r1, d0
 8009d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d4e:	f7ff bbd2 	b.w	80094f6 <__ieee754_pow+0x14e>
 8009d52:	4c31      	ldr	r4, [pc, #196]	@ (8009e18 <__ieee754_pow+0xa70>)
 8009d54:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009d58:	42a3      	cmp	r3, r4
 8009d5a:	d91a      	bls.n	8009d92 <__ieee754_pow+0x9ea>
 8009d5c:	4b2f      	ldr	r3, [pc, #188]	@ (8009e1c <__ieee754_pow+0xa74>)
 8009d5e:	440b      	add	r3, r1
 8009d60:	4303      	orrs	r3, r0
 8009d62:	d009      	beq.n	8009d78 <__ieee754_pow+0x9d0>
 8009d64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	f7f6 fe7a 	bl	8000a64 <__aeabi_dcmplt>
 8009d70:	3800      	subs	r0, #0
 8009d72:	bf18      	it	ne
 8009d74:	2001      	movne	r0, #1
 8009d76:	e42b      	b.n	80095d0 <__ieee754_pow+0x228>
 8009d78:	4642      	mov	r2, r8
 8009d7a:	464b      	mov	r3, r9
 8009d7c:	f7f6 fa48 	bl	8000210 <__aeabi_dsub>
 8009d80:	4632      	mov	r2, r6
 8009d82:	463b      	mov	r3, r7
 8009d84:	f7f6 fe82 	bl	8000a8c <__aeabi_dcmpge>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	d1eb      	bne.n	8009d64 <__ieee754_pow+0x9bc>
 8009d8c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8009e2c <__ieee754_pow+0xa84>
 8009d90:	e6f7      	b.n	8009b82 <__ieee754_pow+0x7da>
 8009d92:	469a      	mov	sl, r3
 8009d94:	4b22      	ldr	r3, [pc, #136]	@ (8009e20 <__ieee754_pow+0xa78>)
 8009d96:	459a      	cmp	sl, r3
 8009d98:	f63f aef3 	bhi.w	8009b82 <__ieee754_pow+0x7da>
 8009d9c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009da0:	e715      	b.n	8009bce <__ieee754_pow+0x826>
 8009da2:	ec51 0b10 	vmov	r0, r1, d0
 8009da6:	4619      	mov	r1, r3
 8009da8:	e7cf      	b.n	8009d4a <__ieee754_pow+0x9a2>
 8009daa:	491a      	ldr	r1, [pc, #104]	@ (8009e14 <__ieee754_pow+0xa6c>)
 8009dac:	2000      	movs	r0, #0
 8009dae:	f7ff bb18 	b.w	80093e2 <__ieee754_pow+0x3a>
 8009db2:	2000      	movs	r0, #0
 8009db4:	2100      	movs	r1, #0
 8009db6:	f7ff bb14 	b.w	80093e2 <__ieee754_pow+0x3a>
 8009dba:	4630      	mov	r0, r6
 8009dbc:	4639      	mov	r1, r7
 8009dbe:	f7ff bb10 	b.w	80093e2 <__ieee754_pow+0x3a>
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	f7ff bb5e 	b.w	8009484 <__ieee754_pow+0xdc>
 8009dc8:	2400      	movs	r4, #0
 8009dca:	f7ff bb49 	b.w	8009460 <__ieee754_pow+0xb8>
 8009dce:	bf00      	nop
 8009dd0:	00000000 	.word	0x00000000
 8009dd4:	3fe62e43 	.word	0x3fe62e43
 8009dd8:	fefa39ef 	.word	0xfefa39ef
 8009ddc:	3fe62e42 	.word	0x3fe62e42
 8009de0:	0ca86c39 	.word	0x0ca86c39
 8009de4:	be205c61 	.word	0xbe205c61
 8009de8:	72bea4d0 	.word	0x72bea4d0
 8009dec:	3e663769 	.word	0x3e663769
 8009df0:	c5d26bf1 	.word	0xc5d26bf1
 8009df4:	3ebbbd41 	.word	0x3ebbbd41
 8009df8:	af25de2c 	.word	0xaf25de2c
 8009dfc:	3f11566a 	.word	0x3f11566a
 8009e00:	16bebd93 	.word	0x16bebd93
 8009e04:	3f66c16c 	.word	0x3f66c16c
 8009e08:	5555553e 	.word	0x5555553e
 8009e0c:	3fc55555 	.word	0x3fc55555
 8009e10:	fff00000 	.word	0xfff00000
 8009e14:	3ff00000 	.word	0x3ff00000
 8009e18:	4090cbff 	.word	0x4090cbff
 8009e1c:	3f6f3400 	.word	0x3f6f3400
 8009e20:	3fe00000 	.word	0x3fe00000
 8009e24:	652b82fe 	.word	0x652b82fe
 8009e28:	3c971547 	.word	0x3c971547
 8009e2c:	4090cc00 	.word	0x4090cc00

08009e30 <__ieee754_rem_pio2>:
 8009e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e34:	ec57 6b10 	vmov	r6, r7, d0
 8009e38:	4bc5      	ldr	r3, [pc, #788]	@ (800a150 <__ieee754_rem_pio2+0x320>)
 8009e3a:	b08d      	sub	sp, #52	@ 0x34
 8009e3c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009e40:	4598      	cmp	r8, r3
 8009e42:	4604      	mov	r4, r0
 8009e44:	9704      	str	r7, [sp, #16]
 8009e46:	d807      	bhi.n	8009e58 <__ieee754_rem_pio2+0x28>
 8009e48:	2200      	movs	r2, #0
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	ed80 0b00 	vstr	d0, [r0]
 8009e50:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009e54:	2500      	movs	r5, #0
 8009e56:	e028      	b.n	8009eaa <__ieee754_rem_pio2+0x7a>
 8009e58:	4bbe      	ldr	r3, [pc, #760]	@ (800a154 <__ieee754_rem_pio2+0x324>)
 8009e5a:	4598      	cmp	r8, r3
 8009e5c:	d878      	bhi.n	8009f50 <__ieee754_rem_pio2+0x120>
 8009e5e:	9b04      	ldr	r3, [sp, #16]
 8009e60:	4dbd      	ldr	r5, [pc, #756]	@ (800a158 <__ieee754_rem_pio2+0x328>)
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	4630      	mov	r0, r6
 8009e66:	a3ac      	add	r3, pc, #688	@ (adr r3, 800a118 <__ieee754_rem_pio2+0x2e8>)
 8009e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6c:	4639      	mov	r1, r7
 8009e6e:	dd38      	ble.n	8009ee2 <__ieee754_rem_pio2+0xb2>
 8009e70:	f7f6 f9ce 	bl	8000210 <__aeabi_dsub>
 8009e74:	45a8      	cmp	r8, r5
 8009e76:	4606      	mov	r6, r0
 8009e78:	460f      	mov	r7, r1
 8009e7a:	d01a      	beq.n	8009eb2 <__ieee754_rem_pio2+0x82>
 8009e7c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800a120 <__ieee754_rem_pio2+0x2f0>)
 8009e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e82:	f7f6 f9c5 	bl	8000210 <__aeabi_dsub>
 8009e86:	4602      	mov	r2, r0
 8009e88:	460b      	mov	r3, r1
 8009e8a:	4680      	mov	r8, r0
 8009e8c:	4689      	mov	r9, r1
 8009e8e:	4630      	mov	r0, r6
 8009e90:	4639      	mov	r1, r7
 8009e92:	f7f6 f9bd 	bl	8000210 <__aeabi_dsub>
 8009e96:	a3a2      	add	r3, pc, #648	@ (adr r3, 800a120 <__ieee754_rem_pio2+0x2f0>)
 8009e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9c:	f7f6 f9b8 	bl	8000210 <__aeabi_dsub>
 8009ea0:	e9c4 8900 	strd	r8, r9, [r4]
 8009ea4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009ea8:	2501      	movs	r5, #1
 8009eaa:	4628      	mov	r0, r5
 8009eac:	b00d      	add	sp, #52	@ 0x34
 8009eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb2:	a39d      	add	r3, pc, #628	@ (adr r3, 800a128 <__ieee754_rem_pio2+0x2f8>)
 8009eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb8:	f7f6 f9aa 	bl	8000210 <__aeabi_dsub>
 8009ebc:	a39c      	add	r3, pc, #624	@ (adr r3, 800a130 <__ieee754_rem_pio2+0x300>)
 8009ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec2:	4606      	mov	r6, r0
 8009ec4:	460f      	mov	r7, r1
 8009ec6:	f7f6 f9a3 	bl	8000210 <__aeabi_dsub>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	460b      	mov	r3, r1
 8009ece:	4680      	mov	r8, r0
 8009ed0:	4689      	mov	r9, r1
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	4639      	mov	r1, r7
 8009ed6:	f7f6 f99b 	bl	8000210 <__aeabi_dsub>
 8009eda:	a395      	add	r3, pc, #596	@ (adr r3, 800a130 <__ieee754_rem_pio2+0x300>)
 8009edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee0:	e7dc      	b.n	8009e9c <__ieee754_rem_pio2+0x6c>
 8009ee2:	f7f6 f997 	bl	8000214 <__adddf3>
 8009ee6:	45a8      	cmp	r8, r5
 8009ee8:	4606      	mov	r6, r0
 8009eea:	460f      	mov	r7, r1
 8009eec:	d018      	beq.n	8009f20 <__ieee754_rem_pio2+0xf0>
 8009eee:	a38c      	add	r3, pc, #560	@ (adr r3, 800a120 <__ieee754_rem_pio2+0x2f0>)
 8009ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef4:	f7f6 f98e 	bl	8000214 <__adddf3>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	460b      	mov	r3, r1
 8009efc:	4680      	mov	r8, r0
 8009efe:	4689      	mov	r9, r1
 8009f00:	4630      	mov	r0, r6
 8009f02:	4639      	mov	r1, r7
 8009f04:	f7f6 f984 	bl	8000210 <__aeabi_dsub>
 8009f08:	a385      	add	r3, pc, #532	@ (adr r3, 800a120 <__ieee754_rem_pio2+0x2f0>)
 8009f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0e:	f7f6 f981 	bl	8000214 <__adddf3>
 8009f12:	f04f 35ff 	mov.w	r5, #4294967295
 8009f16:	e9c4 8900 	strd	r8, r9, [r4]
 8009f1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009f1e:	e7c4      	b.n	8009eaa <__ieee754_rem_pio2+0x7a>
 8009f20:	a381      	add	r3, pc, #516	@ (adr r3, 800a128 <__ieee754_rem_pio2+0x2f8>)
 8009f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f26:	f7f6 f975 	bl	8000214 <__adddf3>
 8009f2a:	a381      	add	r3, pc, #516	@ (adr r3, 800a130 <__ieee754_rem_pio2+0x300>)
 8009f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f30:	4606      	mov	r6, r0
 8009f32:	460f      	mov	r7, r1
 8009f34:	f7f6 f96e 	bl	8000214 <__adddf3>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	4680      	mov	r8, r0
 8009f3e:	4689      	mov	r9, r1
 8009f40:	4630      	mov	r0, r6
 8009f42:	4639      	mov	r1, r7
 8009f44:	f7f6 f964 	bl	8000210 <__aeabi_dsub>
 8009f48:	a379      	add	r3, pc, #484	@ (adr r3, 800a130 <__ieee754_rem_pio2+0x300>)
 8009f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4e:	e7de      	b.n	8009f0e <__ieee754_rem_pio2+0xde>
 8009f50:	4b82      	ldr	r3, [pc, #520]	@ (800a15c <__ieee754_rem_pio2+0x32c>)
 8009f52:	4598      	cmp	r8, r3
 8009f54:	f200 80d1 	bhi.w	800a0fa <__ieee754_rem_pio2+0x2ca>
 8009f58:	f000 fafe 	bl	800a558 <fabs>
 8009f5c:	ec57 6b10 	vmov	r6, r7, d0
 8009f60:	a375      	add	r3, pc, #468	@ (adr r3, 800a138 <__ieee754_rem_pio2+0x308>)
 8009f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f66:	4630      	mov	r0, r6
 8009f68:	4639      	mov	r1, r7
 8009f6a:	f7f6 fb09 	bl	8000580 <__aeabi_dmul>
 8009f6e:	4b7c      	ldr	r3, [pc, #496]	@ (800a160 <__ieee754_rem_pio2+0x330>)
 8009f70:	2200      	movs	r2, #0
 8009f72:	f7f6 f94f 	bl	8000214 <__adddf3>
 8009f76:	f7f6 fdb3 	bl	8000ae0 <__aeabi_d2iz>
 8009f7a:	4605      	mov	r5, r0
 8009f7c:	f7f6 fa96 	bl	80004ac <__aeabi_i2d>
 8009f80:	4602      	mov	r2, r0
 8009f82:	460b      	mov	r3, r1
 8009f84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f88:	a363      	add	r3, pc, #396	@ (adr r3, 800a118 <__ieee754_rem_pio2+0x2e8>)
 8009f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8e:	f7f6 faf7 	bl	8000580 <__aeabi_dmul>
 8009f92:	4602      	mov	r2, r0
 8009f94:	460b      	mov	r3, r1
 8009f96:	4630      	mov	r0, r6
 8009f98:	4639      	mov	r1, r7
 8009f9a:	f7f6 f939 	bl	8000210 <__aeabi_dsub>
 8009f9e:	a360      	add	r3, pc, #384	@ (adr r3, 800a120 <__ieee754_rem_pio2+0x2f0>)
 8009fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa4:	4682      	mov	sl, r0
 8009fa6:	468b      	mov	fp, r1
 8009fa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fac:	f7f6 fae8 	bl	8000580 <__aeabi_dmul>
 8009fb0:	2d1f      	cmp	r5, #31
 8009fb2:	4606      	mov	r6, r0
 8009fb4:	460f      	mov	r7, r1
 8009fb6:	dc0c      	bgt.n	8009fd2 <__ieee754_rem_pio2+0x1a2>
 8009fb8:	4b6a      	ldr	r3, [pc, #424]	@ (800a164 <__ieee754_rem_pio2+0x334>)
 8009fba:	1e6a      	subs	r2, r5, #1
 8009fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fc0:	4543      	cmp	r3, r8
 8009fc2:	d006      	beq.n	8009fd2 <__ieee754_rem_pio2+0x1a2>
 8009fc4:	4632      	mov	r2, r6
 8009fc6:	463b      	mov	r3, r7
 8009fc8:	4650      	mov	r0, sl
 8009fca:	4659      	mov	r1, fp
 8009fcc:	f7f6 f920 	bl	8000210 <__aeabi_dsub>
 8009fd0:	e00e      	b.n	8009ff0 <__ieee754_rem_pio2+0x1c0>
 8009fd2:	463b      	mov	r3, r7
 8009fd4:	4632      	mov	r2, r6
 8009fd6:	4650      	mov	r0, sl
 8009fd8:	4659      	mov	r1, fp
 8009fda:	f7f6 f919 	bl	8000210 <__aeabi_dsub>
 8009fde:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009fe2:	9305      	str	r3, [sp, #20]
 8009fe4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009fe8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009fec:	2b10      	cmp	r3, #16
 8009fee:	dc02      	bgt.n	8009ff6 <__ieee754_rem_pio2+0x1c6>
 8009ff0:	e9c4 0100 	strd	r0, r1, [r4]
 8009ff4:	e039      	b.n	800a06a <__ieee754_rem_pio2+0x23a>
 8009ff6:	a34c      	add	r3, pc, #304	@ (adr r3, 800a128 <__ieee754_rem_pio2+0x2f8>)
 8009ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a000:	f7f6 fabe 	bl	8000580 <__aeabi_dmul>
 800a004:	4606      	mov	r6, r0
 800a006:	460f      	mov	r7, r1
 800a008:	4602      	mov	r2, r0
 800a00a:	460b      	mov	r3, r1
 800a00c:	4650      	mov	r0, sl
 800a00e:	4659      	mov	r1, fp
 800a010:	f7f6 f8fe 	bl	8000210 <__aeabi_dsub>
 800a014:	4602      	mov	r2, r0
 800a016:	460b      	mov	r3, r1
 800a018:	4680      	mov	r8, r0
 800a01a:	4689      	mov	r9, r1
 800a01c:	4650      	mov	r0, sl
 800a01e:	4659      	mov	r1, fp
 800a020:	f7f6 f8f6 	bl	8000210 <__aeabi_dsub>
 800a024:	4632      	mov	r2, r6
 800a026:	463b      	mov	r3, r7
 800a028:	f7f6 f8f2 	bl	8000210 <__aeabi_dsub>
 800a02c:	a340      	add	r3, pc, #256	@ (adr r3, 800a130 <__ieee754_rem_pio2+0x300>)
 800a02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a032:	4606      	mov	r6, r0
 800a034:	460f      	mov	r7, r1
 800a036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a03a:	f7f6 faa1 	bl	8000580 <__aeabi_dmul>
 800a03e:	4632      	mov	r2, r6
 800a040:	463b      	mov	r3, r7
 800a042:	f7f6 f8e5 	bl	8000210 <__aeabi_dsub>
 800a046:	4602      	mov	r2, r0
 800a048:	460b      	mov	r3, r1
 800a04a:	4606      	mov	r6, r0
 800a04c:	460f      	mov	r7, r1
 800a04e:	4640      	mov	r0, r8
 800a050:	4649      	mov	r1, r9
 800a052:	f7f6 f8dd 	bl	8000210 <__aeabi_dsub>
 800a056:	9a05      	ldr	r2, [sp, #20]
 800a058:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a05c:	1ad3      	subs	r3, r2, r3
 800a05e:	2b31      	cmp	r3, #49	@ 0x31
 800a060:	dc20      	bgt.n	800a0a4 <__ieee754_rem_pio2+0x274>
 800a062:	e9c4 0100 	strd	r0, r1, [r4]
 800a066:	46c2      	mov	sl, r8
 800a068:	46cb      	mov	fp, r9
 800a06a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a06e:	4650      	mov	r0, sl
 800a070:	4642      	mov	r2, r8
 800a072:	464b      	mov	r3, r9
 800a074:	4659      	mov	r1, fp
 800a076:	f7f6 f8cb 	bl	8000210 <__aeabi_dsub>
 800a07a:	463b      	mov	r3, r7
 800a07c:	4632      	mov	r2, r6
 800a07e:	f7f6 f8c7 	bl	8000210 <__aeabi_dsub>
 800a082:	9b04      	ldr	r3, [sp, #16]
 800a084:	2b00      	cmp	r3, #0
 800a086:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a08a:	f6bf af0e 	bge.w	8009eaa <__ieee754_rem_pio2+0x7a>
 800a08e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a092:	6063      	str	r3, [r4, #4]
 800a094:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a098:	f8c4 8000 	str.w	r8, [r4]
 800a09c:	60a0      	str	r0, [r4, #8]
 800a09e:	60e3      	str	r3, [r4, #12]
 800a0a0:	426d      	negs	r5, r5
 800a0a2:	e702      	b.n	8009eaa <__ieee754_rem_pio2+0x7a>
 800a0a4:	a326      	add	r3, pc, #152	@ (adr r3, 800a140 <__ieee754_rem_pio2+0x310>)
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0ae:	f7f6 fa67 	bl	8000580 <__aeabi_dmul>
 800a0b2:	4606      	mov	r6, r0
 800a0b4:	460f      	mov	r7, r1
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	4640      	mov	r0, r8
 800a0bc:	4649      	mov	r1, r9
 800a0be:	f7f6 f8a7 	bl	8000210 <__aeabi_dsub>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	4682      	mov	sl, r0
 800a0c8:	468b      	mov	fp, r1
 800a0ca:	4640      	mov	r0, r8
 800a0cc:	4649      	mov	r1, r9
 800a0ce:	f7f6 f89f 	bl	8000210 <__aeabi_dsub>
 800a0d2:	4632      	mov	r2, r6
 800a0d4:	463b      	mov	r3, r7
 800a0d6:	f7f6 f89b 	bl	8000210 <__aeabi_dsub>
 800a0da:	a31b      	add	r3, pc, #108	@ (adr r3, 800a148 <__ieee754_rem_pio2+0x318>)
 800a0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e0:	4606      	mov	r6, r0
 800a0e2:	460f      	mov	r7, r1
 800a0e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0e8:	f7f6 fa4a 	bl	8000580 <__aeabi_dmul>
 800a0ec:	4632      	mov	r2, r6
 800a0ee:	463b      	mov	r3, r7
 800a0f0:	f7f6 f88e 	bl	8000210 <__aeabi_dsub>
 800a0f4:	4606      	mov	r6, r0
 800a0f6:	460f      	mov	r7, r1
 800a0f8:	e764      	b.n	8009fc4 <__ieee754_rem_pio2+0x194>
 800a0fa:	4b1b      	ldr	r3, [pc, #108]	@ (800a168 <__ieee754_rem_pio2+0x338>)
 800a0fc:	4598      	cmp	r8, r3
 800a0fe:	d935      	bls.n	800a16c <__ieee754_rem_pio2+0x33c>
 800a100:	4632      	mov	r2, r6
 800a102:	463b      	mov	r3, r7
 800a104:	4630      	mov	r0, r6
 800a106:	4639      	mov	r1, r7
 800a108:	f7f6 f882 	bl	8000210 <__aeabi_dsub>
 800a10c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a110:	e9c4 0100 	strd	r0, r1, [r4]
 800a114:	e69e      	b.n	8009e54 <__ieee754_rem_pio2+0x24>
 800a116:	bf00      	nop
 800a118:	54400000 	.word	0x54400000
 800a11c:	3ff921fb 	.word	0x3ff921fb
 800a120:	1a626331 	.word	0x1a626331
 800a124:	3dd0b461 	.word	0x3dd0b461
 800a128:	1a600000 	.word	0x1a600000
 800a12c:	3dd0b461 	.word	0x3dd0b461
 800a130:	2e037073 	.word	0x2e037073
 800a134:	3ba3198a 	.word	0x3ba3198a
 800a138:	6dc9c883 	.word	0x6dc9c883
 800a13c:	3fe45f30 	.word	0x3fe45f30
 800a140:	2e000000 	.word	0x2e000000
 800a144:	3ba3198a 	.word	0x3ba3198a
 800a148:	252049c1 	.word	0x252049c1
 800a14c:	397b839a 	.word	0x397b839a
 800a150:	3fe921fb 	.word	0x3fe921fb
 800a154:	4002d97b 	.word	0x4002d97b
 800a158:	3ff921fb 	.word	0x3ff921fb
 800a15c:	413921fb 	.word	0x413921fb
 800a160:	3fe00000 	.word	0x3fe00000
 800a164:	0800b148 	.word	0x0800b148
 800a168:	7fefffff 	.word	0x7fefffff
 800a16c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a170:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800a174:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a178:	4630      	mov	r0, r6
 800a17a:	460f      	mov	r7, r1
 800a17c:	f7f6 fcb0 	bl	8000ae0 <__aeabi_d2iz>
 800a180:	f7f6 f994 	bl	80004ac <__aeabi_i2d>
 800a184:	4602      	mov	r2, r0
 800a186:	460b      	mov	r3, r1
 800a188:	4630      	mov	r0, r6
 800a18a:	4639      	mov	r1, r7
 800a18c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a190:	f7f6 f83e 	bl	8000210 <__aeabi_dsub>
 800a194:	4b22      	ldr	r3, [pc, #136]	@ (800a220 <__ieee754_rem_pio2+0x3f0>)
 800a196:	2200      	movs	r2, #0
 800a198:	f7f6 f9f2 	bl	8000580 <__aeabi_dmul>
 800a19c:	460f      	mov	r7, r1
 800a19e:	4606      	mov	r6, r0
 800a1a0:	f7f6 fc9e 	bl	8000ae0 <__aeabi_d2iz>
 800a1a4:	f7f6 f982 	bl	80004ac <__aeabi_i2d>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	4639      	mov	r1, r7
 800a1b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a1b4:	f7f6 f82c 	bl	8000210 <__aeabi_dsub>
 800a1b8:	4b19      	ldr	r3, [pc, #100]	@ (800a220 <__ieee754_rem_pio2+0x3f0>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f7f6 f9e0 	bl	8000580 <__aeabi_dmul>
 800a1c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a1c4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a1c8:	f04f 0803 	mov.w	r8, #3
 800a1cc:	2600      	movs	r6, #0
 800a1ce:	2700      	movs	r7, #0
 800a1d0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a1d4:	4632      	mov	r2, r6
 800a1d6:	463b      	mov	r3, r7
 800a1d8:	46c2      	mov	sl, r8
 800a1da:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1de:	f7f6 fc37 	bl	8000a50 <__aeabi_dcmpeq>
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	d1f4      	bne.n	800a1d0 <__ieee754_rem_pio2+0x3a0>
 800a1e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a224 <__ieee754_rem_pio2+0x3f4>)
 800a1e8:	9301      	str	r3, [sp, #4]
 800a1ea:	2302      	movs	r3, #2
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	462a      	mov	r2, r5
 800a1f0:	4653      	mov	r3, sl
 800a1f2:	4621      	mov	r1, r4
 800a1f4:	a806      	add	r0, sp, #24
 800a1f6:	f000 fb4f 	bl	800a898 <__kernel_rem_pio2>
 800a1fa:	9b04      	ldr	r3, [sp, #16]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	4605      	mov	r5, r0
 800a200:	f6bf ae53 	bge.w	8009eaa <__ieee754_rem_pio2+0x7a>
 800a204:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a208:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a20c:	e9c4 2300 	strd	r2, r3, [r4]
 800a210:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a214:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a218:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a21c:	e740      	b.n	800a0a0 <__ieee754_rem_pio2+0x270>
 800a21e:	bf00      	nop
 800a220:	41700000 	.word	0x41700000
 800a224:	0800b1c8 	.word	0x0800b1c8

0800a228 <atan>:
 800a228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	ec55 4b10 	vmov	r4, r5, d0
 800a230:	4bbf      	ldr	r3, [pc, #764]	@ (800a530 <atan+0x308>)
 800a232:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a236:	429e      	cmp	r6, r3
 800a238:	46ab      	mov	fp, r5
 800a23a:	d918      	bls.n	800a26e <atan+0x46>
 800a23c:	4bbd      	ldr	r3, [pc, #756]	@ (800a534 <atan+0x30c>)
 800a23e:	429e      	cmp	r6, r3
 800a240:	d801      	bhi.n	800a246 <atan+0x1e>
 800a242:	d109      	bne.n	800a258 <atan+0x30>
 800a244:	b144      	cbz	r4, 800a258 <atan+0x30>
 800a246:	4622      	mov	r2, r4
 800a248:	462b      	mov	r3, r5
 800a24a:	4620      	mov	r0, r4
 800a24c:	4629      	mov	r1, r5
 800a24e:	f7f5 ffe1 	bl	8000214 <__adddf3>
 800a252:	4604      	mov	r4, r0
 800a254:	460d      	mov	r5, r1
 800a256:	e006      	b.n	800a266 <atan+0x3e>
 800a258:	f1bb 0f00 	cmp.w	fp, #0
 800a25c:	f340 812b 	ble.w	800a4b6 <atan+0x28e>
 800a260:	a597      	add	r5, pc, #604	@ (adr r5, 800a4c0 <atan+0x298>)
 800a262:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a266:	ec45 4b10 	vmov	d0, r4, r5
 800a26a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26e:	4bb2      	ldr	r3, [pc, #712]	@ (800a538 <atan+0x310>)
 800a270:	429e      	cmp	r6, r3
 800a272:	d813      	bhi.n	800a29c <atan+0x74>
 800a274:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a278:	429e      	cmp	r6, r3
 800a27a:	d80c      	bhi.n	800a296 <atan+0x6e>
 800a27c:	a392      	add	r3, pc, #584	@ (adr r3, 800a4c8 <atan+0x2a0>)
 800a27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a282:	4620      	mov	r0, r4
 800a284:	4629      	mov	r1, r5
 800a286:	f7f5 ffc5 	bl	8000214 <__adddf3>
 800a28a:	4bac      	ldr	r3, [pc, #688]	@ (800a53c <atan+0x314>)
 800a28c:	2200      	movs	r2, #0
 800a28e:	f7f6 fc07 	bl	8000aa0 <__aeabi_dcmpgt>
 800a292:	2800      	cmp	r0, #0
 800a294:	d1e7      	bne.n	800a266 <atan+0x3e>
 800a296:	f04f 3aff 	mov.w	sl, #4294967295
 800a29a:	e029      	b.n	800a2f0 <atan+0xc8>
 800a29c:	f000 f95c 	bl	800a558 <fabs>
 800a2a0:	4ba7      	ldr	r3, [pc, #668]	@ (800a540 <atan+0x318>)
 800a2a2:	429e      	cmp	r6, r3
 800a2a4:	ec55 4b10 	vmov	r4, r5, d0
 800a2a8:	f200 80bc 	bhi.w	800a424 <atan+0x1fc>
 800a2ac:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a2b0:	429e      	cmp	r6, r3
 800a2b2:	f200 809e 	bhi.w	800a3f2 <atan+0x1ca>
 800a2b6:	4622      	mov	r2, r4
 800a2b8:	462b      	mov	r3, r5
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	4629      	mov	r1, r5
 800a2be:	f7f5 ffa9 	bl	8000214 <__adddf3>
 800a2c2:	4b9e      	ldr	r3, [pc, #632]	@ (800a53c <atan+0x314>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f7f5 ffa3 	bl	8000210 <__aeabi_dsub>
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	4606      	mov	r6, r0
 800a2ce:	460f      	mov	r7, r1
 800a2d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	f7f5 ff9c 	bl	8000214 <__adddf3>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	460b      	mov	r3, r1
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	4639      	mov	r1, r7
 800a2e4:	f7f6 fa76 	bl	80007d4 <__aeabi_ddiv>
 800a2e8:	f04f 0a00 	mov.w	sl, #0
 800a2ec:	4604      	mov	r4, r0
 800a2ee:	460d      	mov	r5, r1
 800a2f0:	4622      	mov	r2, r4
 800a2f2:	462b      	mov	r3, r5
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	4629      	mov	r1, r5
 800a2f8:	f7f6 f942 	bl	8000580 <__aeabi_dmul>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	460b      	mov	r3, r1
 800a300:	4680      	mov	r8, r0
 800a302:	4689      	mov	r9, r1
 800a304:	f7f6 f93c 	bl	8000580 <__aeabi_dmul>
 800a308:	a371      	add	r3, pc, #452	@ (adr r3, 800a4d0 <atan+0x2a8>)
 800a30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30e:	4606      	mov	r6, r0
 800a310:	460f      	mov	r7, r1
 800a312:	f7f6 f935 	bl	8000580 <__aeabi_dmul>
 800a316:	a370      	add	r3, pc, #448	@ (adr r3, 800a4d8 <atan+0x2b0>)
 800a318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31c:	f7f5 ff7a 	bl	8000214 <__adddf3>
 800a320:	4632      	mov	r2, r6
 800a322:	463b      	mov	r3, r7
 800a324:	f7f6 f92c 	bl	8000580 <__aeabi_dmul>
 800a328:	a36d      	add	r3, pc, #436	@ (adr r3, 800a4e0 <atan+0x2b8>)
 800a32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32e:	f7f5 ff71 	bl	8000214 <__adddf3>
 800a332:	4632      	mov	r2, r6
 800a334:	463b      	mov	r3, r7
 800a336:	f7f6 f923 	bl	8000580 <__aeabi_dmul>
 800a33a:	a36b      	add	r3, pc, #428	@ (adr r3, 800a4e8 <atan+0x2c0>)
 800a33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a340:	f7f5 ff68 	bl	8000214 <__adddf3>
 800a344:	4632      	mov	r2, r6
 800a346:	463b      	mov	r3, r7
 800a348:	f7f6 f91a 	bl	8000580 <__aeabi_dmul>
 800a34c:	a368      	add	r3, pc, #416	@ (adr r3, 800a4f0 <atan+0x2c8>)
 800a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a352:	f7f5 ff5f 	bl	8000214 <__adddf3>
 800a356:	4632      	mov	r2, r6
 800a358:	463b      	mov	r3, r7
 800a35a:	f7f6 f911 	bl	8000580 <__aeabi_dmul>
 800a35e:	a366      	add	r3, pc, #408	@ (adr r3, 800a4f8 <atan+0x2d0>)
 800a360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a364:	f7f5 ff56 	bl	8000214 <__adddf3>
 800a368:	4642      	mov	r2, r8
 800a36a:	464b      	mov	r3, r9
 800a36c:	f7f6 f908 	bl	8000580 <__aeabi_dmul>
 800a370:	a363      	add	r3, pc, #396	@ (adr r3, 800a500 <atan+0x2d8>)
 800a372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a376:	4680      	mov	r8, r0
 800a378:	4689      	mov	r9, r1
 800a37a:	4630      	mov	r0, r6
 800a37c:	4639      	mov	r1, r7
 800a37e:	f7f6 f8ff 	bl	8000580 <__aeabi_dmul>
 800a382:	a361      	add	r3, pc, #388	@ (adr r3, 800a508 <atan+0x2e0>)
 800a384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a388:	f7f5 ff42 	bl	8000210 <__aeabi_dsub>
 800a38c:	4632      	mov	r2, r6
 800a38e:	463b      	mov	r3, r7
 800a390:	f7f6 f8f6 	bl	8000580 <__aeabi_dmul>
 800a394:	a35e      	add	r3, pc, #376	@ (adr r3, 800a510 <atan+0x2e8>)
 800a396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39a:	f7f5 ff39 	bl	8000210 <__aeabi_dsub>
 800a39e:	4632      	mov	r2, r6
 800a3a0:	463b      	mov	r3, r7
 800a3a2:	f7f6 f8ed 	bl	8000580 <__aeabi_dmul>
 800a3a6:	a35c      	add	r3, pc, #368	@ (adr r3, 800a518 <atan+0x2f0>)
 800a3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ac:	f7f5 ff30 	bl	8000210 <__aeabi_dsub>
 800a3b0:	4632      	mov	r2, r6
 800a3b2:	463b      	mov	r3, r7
 800a3b4:	f7f6 f8e4 	bl	8000580 <__aeabi_dmul>
 800a3b8:	a359      	add	r3, pc, #356	@ (adr r3, 800a520 <atan+0x2f8>)
 800a3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3be:	f7f5 ff27 	bl	8000210 <__aeabi_dsub>
 800a3c2:	4632      	mov	r2, r6
 800a3c4:	463b      	mov	r3, r7
 800a3c6:	f7f6 f8db 	bl	8000580 <__aeabi_dmul>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	4640      	mov	r0, r8
 800a3d0:	4649      	mov	r1, r9
 800a3d2:	f7f5 ff1f 	bl	8000214 <__adddf3>
 800a3d6:	4622      	mov	r2, r4
 800a3d8:	462b      	mov	r3, r5
 800a3da:	f7f6 f8d1 	bl	8000580 <__aeabi_dmul>
 800a3de:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	d148      	bne.n	800a47a <atan+0x252>
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	4629      	mov	r1, r5
 800a3ec:	f7f5 ff10 	bl	8000210 <__aeabi_dsub>
 800a3f0:	e72f      	b.n	800a252 <atan+0x2a>
 800a3f2:	4b52      	ldr	r3, [pc, #328]	@ (800a53c <atan+0x314>)
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	4629      	mov	r1, r5
 800a3fa:	f7f5 ff09 	bl	8000210 <__aeabi_dsub>
 800a3fe:	4b4f      	ldr	r3, [pc, #316]	@ (800a53c <atan+0x314>)
 800a400:	4606      	mov	r6, r0
 800a402:	460f      	mov	r7, r1
 800a404:	2200      	movs	r2, #0
 800a406:	4620      	mov	r0, r4
 800a408:	4629      	mov	r1, r5
 800a40a:	f7f5 ff03 	bl	8000214 <__adddf3>
 800a40e:	4602      	mov	r2, r0
 800a410:	460b      	mov	r3, r1
 800a412:	4630      	mov	r0, r6
 800a414:	4639      	mov	r1, r7
 800a416:	f7f6 f9dd 	bl	80007d4 <__aeabi_ddiv>
 800a41a:	f04f 0a01 	mov.w	sl, #1
 800a41e:	4604      	mov	r4, r0
 800a420:	460d      	mov	r5, r1
 800a422:	e765      	b.n	800a2f0 <atan+0xc8>
 800a424:	4b47      	ldr	r3, [pc, #284]	@ (800a544 <atan+0x31c>)
 800a426:	429e      	cmp	r6, r3
 800a428:	d21c      	bcs.n	800a464 <atan+0x23c>
 800a42a:	4b47      	ldr	r3, [pc, #284]	@ (800a548 <atan+0x320>)
 800a42c:	2200      	movs	r2, #0
 800a42e:	4620      	mov	r0, r4
 800a430:	4629      	mov	r1, r5
 800a432:	f7f5 feed 	bl	8000210 <__aeabi_dsub>
 800a436:	4b44      	ldr	r3, [pc, #272]	@ (800a548 <atan+0x320>)
 800a438:	4606      	mov	r6, r0
 800a43a:	460f      	mov	r7, r1
 800a43c:	2200      	movs	r2, #0
 800a43e:	4620      	mov	r0, r4
 800a440:	4629      	mov	r1, r5
 800a442:	f7f6 f89d 	bl	8000580 <__aeabi_dmul>
 800a446:	4b3d      	ldr	r3, [pc, #244]	@ (800a53c <atan+0x314>)
 800a448:	2200      	movs	r2, #0
 800a44a:	f7f5 fee3 	bl	8000214 <__adddf3>
 800a44e:	4602      	mov	r2, r0
 800a450:	460b      	mov	r3, r1
 800a452:	4630      	mov	r0, r6
 800a454:	4639      	mov	r1, r7
 800a456:	f7f6 f9bd 	bl	80007d4 <__aeabi_ddiv>
 800a45a:	f04f 0a02 	mov.w	sl, #2
 800a45e:	4604      	mov	r4, r0
 800a460:	460d      	mov	r5, r1
 800a462:	e745      	b.n	800a2f0 <atan+0xc8>
 800a464:	4622      	mov	r2, r4
 800a466:	462b      	mov	r3, r5
 800a468:	4938      	ldr	r1, [pc, #224]	@ (800a54c <atan+0x324>)
 800a46a:	2000      	movs	r0, #0
 800a46c:	f7f6 f9b2 	bl	80007d4 <__aeabi_ddiv>
 800a470:	f04f 0a03 	mov.w	sl, #3
 800a474:	4604      	mov	r4, r0
 800a476:	460d      	mov	r5, r1
 800a478:	e73a      	b.n	800a2f0 <atan+0xc8>
 800a47a:	4b35      	ldr	r3, [pc, #212]	@ (800a550 <atan+0x328>)
 800a47c:	4e35      	ldr	r6, [pc, #212]	@ (800a554 <atan+0x32c>)
 800a47e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a486:	f7f5 fec3 	bl	8000210 <__aeabi_dsub>
 800a48a:	4622      	mov	r2, r4
 800a48c:	462b      	mov	r3, r5
 800a48e:	f7f5 febf 	bl	8000210 <__aeabi_dsub>
 800a492:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a496:	4602      	mov	r2, r0
 800a498:	460b      	mov	r3, r1
 800a49a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a49e:	f7f5 feb7 	bl	8000210 <__aeabi_dsub>
 800a4a2:	f1bb 0f00 	cmp.w	fp, #0
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	460d      	mov	r5, r1
 800a4aa:	f6bf aedc 	bge.w	800a266 <atan+0x3e>
 800a4ae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a4b2:	461d      	mov	r5, r3
 800a4b4:	e6d7      	b.n	800a266 <atan+0x3e>
 800a4b6:	a51c      	add	r5, pc, #112	@ (adr r5, 800a528 <atan+0x300>)
 800a4b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a4bc:	e6d3      	b.n	800a266 <atan+0x3e>
 800a4be:	bf00      	nop
 800a4c0:	54442d18 	.word	0x54442d18
 800a4c4:	3ff921fb 	.word	0x3ff921fb
 800a4c8:	8800759c 	.word	0x8800759c
 800a4cc:	7e37e43c 	.word	0x7e37e43c
 800a4d0:	e322da11 	.word	0xe322da11
 800a4d4:	3f90ad3a 	.word	0x3f90ad3a
 800a4d8:	24760deb 	.word	0x24760deb
 800a4dc:	3fa97b4b 	.word	0x3fa97b4b
 800a4e0:	a0d03d51 	.word	0xa0d03d51
 800a4e4:	3fb10d66 	.word	0x3fb10d66
 800a4e8:	c54c206e 	.word	0xc54c206e
 800a4ec:	3fb745cd 	.word	0x3fb745cd
 800a4f0:	920083ff 	.word	0x920083ff
 800a4f4:	3fc24924 	.word	0x3fc24924
 800a4f8:	5555550d 	.word	0x5555550d
 800a4fc:	3fd55555 	.word	0x3fd55555
 800a500:	2c6a6c2f 	.word	0x2c6a6c2f
 800a504:	bfa2b444 	.word	0xbfa2b444
 800a508:	52defd9a 	.word	0x52defd9a
 800a50c:	3fadde2d 	.word	0x3fadde2d
 800a510:	af749a6d 	.word	0xaf749a6d
 800a514:	3fb3b0f2 	.word	0x3fb3b0f2
 800a518:	fe231671 	.word	0xfe231671
 800a51c:	3fbc71c6 	.word	0x3fbc71c6
 800a520:	9998ebc4 	.word	0x9998ebc4
 800a524:	3fc99999 	.word	0x3fc99999
 800a528:	54442d18 	.word	0x54442d18
 800a52c:	bff921fb 	.word	0xbff921fb
 800a530:	440fffff 	.word	0x440fffff
 800a534:	7ff00000 	.word	0x7ff00000
 800a538:	3fdbffff 	.word	0x3fdbffff
 800a53c:	3ff00000 	.word	0x3ff00000
 800a540:	3ff2ffff 	.word	0x3ff2ffff
 800a544:	40038000 	.word	0x40038000
 800a548:	3ff80000 	.word	0x3ff80000
 800a54c:	bff00000 	.word	0xbff00000
 800a550:	0800b2d0 	.word	0x0800b2d0
 800a554:	0800b2f0 	.word	0x0800b2f0

0800a558 <fabs>:
 800a558:	ec51 0b10 	vmov	r0, r1, d0
 800a55c:	4602      	mov	r2, r0
 800a55e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a562:	ec43 2b10 	vmov	d0, r2, r3
 800a566:	4770      	bx	lr

0800a568 <scalbn>:
 800a568:	b570      	push	{r4, r5, r6, lr}
 800a56a:	ec55 4b10 	vmov	r4, r5, d0
 800a56e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a572:	4606      	mov	r6, r0
 800a574:	462b      	mov	r3, r5
 800a576:	b991      	cbnz	r1, 800a59e <scalbn+0x36>
 800a578:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a57c:	4323      	orrs	r3, r4
 800a57e:	d03d      	beq.n	800a5fc <scalbn+0x94>
 800a580:	4b35      	ldr	r3, [pc, #212]	@ (800a658 <scalbn+0xf0>)
 800a582:	4620      	mov	r0, r4
 800a584:	4629      	mov	r1, r5
 800a586:	2200      	movs	r2, #0
 800a588:	f7f5 fffa 	bl	8000580 <__aeabi_dmul>
 800a58c:	4b33      	ldr	r3, [pc, #204]	@ (800a65c <scalbn+0xf4>)
 800a58e:	429e      	cmp	r6, r3
 800a590:	4604      	mov	r4, r0
 800a592:	460d      	mov	r5, r1
 800a594:	da0f      	bge.n	800a5b6 <scalbn+0x4e>
 800a596:	a328      	add	r3, pc, #160	@ (adr r3, 800a638 <scalbn+0xd0>)
 800a598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59c:	e01e      	b.n	800a5dc <scalbn+0x74>
 800a59e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a5a2:	4291      	cmp	r1, r2
 800a5a4:	d10b      	bne.n	800a5be <scalbn+0x56>
 800a5a6:	4622      	mov	r2, r4
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	4629      	mov	r1, r5
 800a5ac:	f7f5 fe32 	bl	8000214 <__adddf3>
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	460d      	mov	r5, r1
 800a5b4:	e022      	b.n	800a5fc <scalbn+0x94>
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a5bc:	3936      	subs	r1, #54	@ 0x36
 800a5be:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a5c2:	4296      	cmp	r6, r2
 800a5c4:	dd0d      	ble.n	800a5e2 <scalbn+0x7a>
 800a5c6:	2d00      	cmp	r5, #0
 800a5c8:	a11d      	add	r1, pc, #116	@ (adr r1, 800a640 <scalbn+0xd8>)
 800a5ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5ce:	da02      	bge.n	800a5d6 <scalbn+0x6e>
 800a5d0:	a11d      	add	r1, pc, #116	@ (adr r1, 800a648 <scalbn+0xe0>)
 800a5d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5d6:	a31a      	add	r3, pc, #104	@ (adr r3, 800a640 <scalbn+0xd8>)
 800a5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5dc:	f7f5 ffd0 	bl	8000580 <__aeabi_dmul>
 800a5e0:	e7e6      	b.n	800a5b0 <scalbn+0x48>
 800a5e2:	1872      	adds	r2, r6, r1
 800a5e4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a5e8:	428a      	cmp	r2, r1
 800a5ea:	dcec      	bgt.n	800a5c6 <scalbn+0x5e>
 800a5ec:	2a00      	cmp	r2, #0
 800a5ee:	dd08      	ble.n	800a602 <scalbn+0x9a>
 800a5f0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a5f4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a5f8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a5fc:	ec45 4b10 	vmov	d0, r4, r5
 800a600:	bd70      	pop	{r4, r5, r6, pc}
 800a602:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a606:	da08      	bge.n	800a61a <scalbn+0xb2>
 800a608:	2d00      	cmp	r5, #0
 800a60a:	a10b      	add	r1, pc, #44	@ (adr r1, 800a638 <scalbn+0xd0>)
 800a60c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a610:	dac1      	bge.n	800a596 <scalbn+0x2e>
 800a612:	a10f      	add	r1, pc, #60	@ (adr r1, 800a650 <scalbn+0xe8>)
 800a614:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a618:	e7bd      	b.n	800a596 <scalbn+0x2e>
 800a61a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a61e:	3236      	adds	r2, #54	@ 0x36
 800a620:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a624:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a628:	4620      	mov	r0, r4
 800a62a:	4b0d      	ldr	r3, [pc, #52]	@ (800a660 <scalbn+0xf8>)
 800a62c:	4629      	mov	r1, r5
 800a62e:	2200      	movs	r2, #0
 800a630:	e7d4      	b.n	800a5dc <scalbn+0x74>
 800a632:	bf00      	nop
 800a634:	f3af 8000 	nop.w
 800a638:	c2f8f359 	.word	0xc2f8f359
 800a63c:	01a56e1f 	.word	0x01a56e1f
 800a640:	8800759c 	.word	0x8800759c
 800a644:	7e37e43c 	.word	0x7e37e43c
 800a648:	8800759c 	.word	0x8800759c
 800a64c:	fe37e43c 	.word	0xfe37e43c
 800a650:	c2f8f359 	.word	0xc2f8f359
 800a654:	81a56e1f 	.word	0x81a56e1f
 800a658:	43500000 	.word	0x43500000
 800a65c:	ffff3cb0 	.word	0xffff3cb0
 800a660:	3c900000 	.word	0x3c900000

0800a664 <with_errno>:
 800a664:	b510      	push	{r4, lr}
 800a666:	ed2d 8b02 	vpush	{d8}
 800a66a:	eeb0 8a40 	vmov.f32	s16, s0
 800a66e:	eef0 8a60 	vmov.f32	s17, s1
 800a672:	4604      	mov	r4, r0
 800a674:	f000 fcec 	bl	800b050 <__errno>
 800a678:	eeb0 0a48 	vmov.f32	s0, s16
 800a67c:	eef0 0a68 	vmov.f32	s1, s17
 800a680:	ecbd 8b02 	vpop	{d8}
 800a684:	6004      	str	r4, [r0, #0]
 800a686:	bd10      	pop	{r4, pc}

0800a688 <xflow>:
 800a688:	4603      	mov	r3, r0
 800a68a:	b507      	push	{r0, r1, r2, lr}
 800a68c:	ec51 0b10 	vmov	r0, r1, d0
 800a690:	b183      	cbz	r3, 800a6b4 <xflow+0x2c>
 800a692:	4602      	mov	r2, r0
 800a694:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a698:	e9cd 2300 	strd	r2, r3, [sp]
 800a69c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6a0:	f7f5 ff6e 	bl	8000580 <__aeabi_dmul>
 800a6a4:	ec41 0b10 	vmov	d0, r0, r1
 800a6a8:	2022      	movs	r0, #34	@ 0x22
 800a6aa:	b003      	add	sp, #12
 800a6ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6b0:	f7ff bfd8 	b.w	800a664 <with_errno>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	e7ee      	b.n	800a698 <xflow+0x10>
 800a6ba:	0000      	movs	r0, r0
 800a6bc:	0000      	movs	r0, r0
	...

0800a6c0 <__math_uflow>:
 800a6c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a6c8 <__math_uflow+0x8>
 800a6c4:	f7ff bfe0 	b.w	800a688 <xflow>
 800a6c8:	00000000 	.word	0x00000000
 800a6cc:	10000000 	.word	0x10000000

0800a6d0 <__math_oflow>:
 800a6d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a6d8 <__math_oflow+0x8>
 800a6d4:	f7ff bfd8 	b.w	800a688 <xflow>
 800a6d8:	00000000 	.word	0x00000000
 800a6dc:	70000000 	.word	0x70000000

0800a6e0 <__ieee754_sqrt>:
 800a6e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e4:	4a68      	ldr	r2, [pc, #416]	@ (800a888 <__ieee754_sqrt+0x1a8>)
 800a6e6:	ec55 4b10 	vmov	r4, r5, d0
 800a6ea:	43aa      	bics	r2, r5
 800a6ec:	462b      	mov	r3, r5
 800a6ee:	4621      	mov	r1, r4
 800a6f0:	d110      	bne.n	800a714 <__ieee754_sqrt+0x34>
 800a6f2:	4622      	mov	r2, r4
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	4629      	mov	r1, r5
 800a6f8:	f7f5 ff42 	bl	8000580 <__aeabi_dmul>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	460b      	mov	r3, r1
 800a700:	4620      	mov	r0, r4
 800a702:	4629      	mov	r1, r5
 800a704:	f7f5 fd86 	bl	8000214 <__adddf3>
 800a708:	4604      	mov	r4, r0
 800a70a:	460d      	mov	r5, r1
 800a70c:	ec45 4b10 	vmov	d0, r4, r5
 800a710:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a714:	2d00      	cmp	r5, #0
 800a716:	dc0e      	bgt.n	800a736 <__ieee754_sqrt+0x56>
 800a718:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a71c:	4322      	orrs	r2, r4
 800a71e:	d0f5      	beq.n	800a70c <__ieee754_sqrt+0x2c>
 800a720:	b19d      	cbz	r5, 800a74a <__ieee754_sqrt+0x6a>
 800a722:	4622      	mov	r2, r4
 800a724:	4620      	mov	r0, r4
 800a726:	4629      	mov	r1, r5
 800a728:	f7f5 fd72 	bl	8000210 <__aeabi_dsub>
 800a72c:	4602      	mov	r2, r0
 800a72e:	460b      	mov	r3, r1
 800a730:	f7f6 f850 	bl	80007d4 <__aeabi_ddiv>
 800a734:	e7e8      	b.n	800a708 <__ieee754_sqrt+0x28>
 800a736:	152a      	asrs	r2, r5, #20
 800a738:	d115      	bne.n	800a766 <__ieee754_sqrt+0x86>
 800a73a:	2000      	movs	r0, #0
 800a73c:	e009      	b.n	800a752 <__ieee754_sqrt+0x72>
 800a73e:	0acb      	lsrs	r3, r1, #11
 800a740:	3a15      	subs	r2, #21
 800a742:	0549      	lsls	r1, r1, #21
 800a744:	2b00      	cmp	r3, #0
 800a746:	d0fa      	beq.n	800a73e <__ieee754_sqrt+0x5e>
 800a748:	e7f7      	b.n	800a73a <__ieee754_sqrt+0x5a>
 800a74a:	462a      	mov	r2, r5
 800a74c:	e7fa      	b.n	800a744 <__ieee754_sqrt+0x64>
 800a74e:	005b      	lsls	r3, r3, #1
 800a750:	3001      	adds	r0, #1
 800a752:	02dc      	lsls	r4, r3, #11
 800a754:	d5fb      	bpl.n	800a74e <__ieee754_sqrt+0x6e>
 800a756:	1e44      	subs	r4, r0, #1
 800a758:	1b12      	subs	r2, r2, r4
 800a75a:	f1c0 0420 	rsb	r4, r0, #32
 800a75e:	fa21 f404 	lsr.w	r4, r1, r4
 800a762:	4323      	orrs	r3, r4
 800a764:	4081      	lsls	r1, r0
 800a766:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a76a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800a76e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a772:	07d2      	lsls	r2, r2, #31
 800a774:	bf5c      	itt	pl
 800a776:	005b      	lslpl	r3, r3, #1
 800a778:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a77c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a780:	bf58      	it	pl
 800a782:	0049      	lslpl	r1, r1, #1
 800a784:	2600      	movs	r6, #0
 800a786:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a78a:	106d      	asrs	r5, r5, #1
 800a78c:	0049      	lsls	r1, r1, #1
 800a78e:	2016      	movs	r0, #22
 800a790:	4632      	mov	r2, r6
 800a792:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a796:	1917      	adds	r7, r2, r4
 800a798:	429f      	cmp	r7, r3
 800a79a:	bfde      	ittt	le
 800a79c:	193a      	addle	r2, r7, r4
 800a79e:	1bdb      	suble	r3, r3, r7
 800a7a0:	1936      	addle	r6, r6, r4
 800a7a2:	0fcf      	lsrs	r7, r1, #31
 800a7a4:	3801      	subs	r0, #1
 800a7a6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800a7aa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a7ae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a7b2:	d1f0      	bne.n	800a796 <__ieee754_sqrt+0xb6>
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	2720      	movs	r7, #32
 800a7b8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	eb00 0e0c 	add.w	lr, r0, ip
 800a7c2:	db02      	blt.n	800a7ca <__ieee754_sqrt+0xea>
 800a7c4:	d113      	bne.n	800a7ee <__ieee754_sqrt+0x10e>
 800a7c6:	458e      	cmp	lr, r1
 800a7c8:	d811      	bhi.n	800a7ee <__ieee754_sqrt+0x10e>
 800a7ca:	f1be 0f00 	cmp.w	lr, #0
 800a7ce:	eb0e 000c 	add.w	r0, lr, ip
 800a7d2:	da42      	bge.n	800a85a <__ieee754_sqrt+0x17a>
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	db40      	blt.n	800a85a <__ieee754_sqrt+0x17a>
 800a7d8:	f102 0801 	add.w	r8, r2, #1
 800a7dc:	1a9b      	subs	r3, r3, r2
 800a7de:	458e      	cmp	lr, r1
 800a7e0:	bf88      	it	hi
 800a7e2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a7e6:	eba1 010e 	sub.w	r1, r1, lr
 800a7ea:	4464      	add	r4, ip
 800a7ec:	4642      	mov	r2, r8
 800a7ee:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a7f2:	3f01      	subs	r7, #1
 800a7f4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a7f8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a7fc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a800:	d1dc      	bne.n	800a7bc <__ieee754_sqrt+0xdc>
 800a802:	4319      	orrs	r1, r3
 800a804:	d01b      	beq.n	800a83e <__ieee754_sqrt+0x15e>
 800a806:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800a88c <__ieee754_sqrt+0x1ac>
 800a80a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800a890 <__ieee754_sqrt+0x1b0>
 800a80e:	e9da 0100 	ldrd	r0, r1, [sl]
 800a812:	e9db 2300 	ldrd	r2, r3, [fp]
 800a816:	f7f5 fcfb 	bl	8000210 <__aeabi_dsub>
 800a81a:	e9da 8900 	ldrd	r8, r9, [sl]
 800a81e:	4602      	mov	r2, r0
 800a820:	460b      	mov	r3, r1
 800a822:	4640      	mov	r0, r8
 800a824:	4649      	mov	r1, r9
 800a826:	f7f6 f927 	bl	8000a78 <__aeabi_dcmple>
 800a82a:	b140      	cbz	r0, 800a83e <__ieee754_sqrt+0x15e>
 800a82c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a830:	e9da 0100 	ldrd	r0, r1, [sl]
 800a834:	e9db 2300 	ldrd	r2, r3, [fp]
 800a838:	d111      	bne.n	800a85e <__ieee754_sqrt+0x17e>
 800a83a:	3601      	adds	r6, #1
 800a83c:	463c      	mov	r4, r7
 800a83e:	1072      	asrs	r2, r6, #1
 800a840:	0863      	lsrs	r3, r4, #1
 800a842:	07f1      	lsls	r1, r6, #31
 800a844:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a848:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a84c:	bf48      	it	mi
 800a84e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a852:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800a856:	4618      	mov	r0, r3
 800a858:	e756      	b.n	800a708 <__ieee754_sqrt+0x28>
 800a85a:	4690      	mov	r8, r2
 800a85c:	e7be      	b.n	800a7dc <__ieee754_sqrt+0xfc>
 800a85e:	f7f5 fcd9 	bl	8000214 <__adddf3>
 800a862:	e9da 8900 	ldrd	r8, r9, [sl]
 800a866:	4602      	mov	r2, r0
 800a868:	460b      	mov	r3, r1
 800a86a:	4640      	mov	r0, r8
 800a86c:	4649      	mov	r1, r9
 800a86e:	f7f6 f8f9 	bl	8000a64 <__aeabi_dcmplt>
 800a872:	b120      	cbz	r0, 800a87e <__ieee754_sqrt+0x19e>
 800a874:	1ca0      	adds	r0, r4, #2
 800a876:	bf08      	it	eq
 800a878:	3601      	addeq	r6, #1
 800a87a:	3402      	adds	r4, #2
 800a87c:	e7df      	b.n	800a83e <__ieee754_sqrt+0x15e>
 800a87e:	1c63      	adds	r3, r4, #1
 800a880:	f023 0401 	bic.w	r4, r3, #1
 800a884:	e7db      	b.n	800a83e <__ieee754_sqrt+0x15e>
 800a886:	bf00      	nop
 800a888:	7ff00000 	.word	0x7ff00000
 800a88c:	20000040 	.word	0x20000040
 800a890:	20000038 	.word	0x20000038
 800a894:	00000000 	.word	0x00000000

0800a898 <__kernel_rem_pio2>:
 800a898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a89c:	ed2d 8b02 	vpush	{d8}
 800a8a0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800a8a4:	f112 0f14 	cmn.w	r2, #20
 800a8a8:	9306      	str	r3, [sp, #24]
 800a8aa:	9104      	str	r1, [sp, #16]
 800a8ac:	4bbe      	ldr	r3, [pc, #760]	@ (800aba8 <__kernel_rem_pio2+0x310>)
 800a8ae:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800a8b0:	9008      	str	r0, [sp, #32]
 800a8b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a8b6:	9300      	str	r3, [sp, #0]
 800a8b8:	9b06      	ldr	r3, [sp, #24]
 800a8ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800a8be:	bfa8      	it	ge
 800a8c0:	1ed4      	subge	r4, r2, #3
 800a8c2:	9305      	str	r3, [sp, #20]
 800a8c4:	bfb2      	itee	lt
 800a8c6:	2400      	movlt	r4, #0
 800a8c8:	2318      	movge	r3, #24
 800a8ca:	fb94 f4f3 	sdivge	r4, r4, r3
 800a8ce:	f06f 0317 	mvn.w	r3, #23
 800a8d2:	fb04 3303 	mla	r3, r4, r3, r3
 800a8d6:	eb03 0b02 	add.w	fp, r3, r2
 800a8da:	9b00      	ldr	r3, [sp, #0]
 800a8dc:	9a05      	ldr	r2, [sp, #20]
 800a8de:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800ab98 <__kernel_rem_pio2+0x300>
 800a8e2:	eb03 0802 	add.w	r8, r3, r2
 800a8e6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a8e8:	1aa7      	subs	r7, r4, r2
 800a8ea:	ae20      	add	r6, sp, #128	@ 0x80
 800a8ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a8f0:	2500      	movs	r5, #0
 800a8f2:	4545      	cmp	r5, r8
 800a8f4:	dd13      	ble.n	800a91e <__kernel_rem_pio2+0x86>
 800a8f6:	9b06      	ldr	r3, [sp, #24]
 800a8f8:	aa20      	add	r2, sp, #128	@ 0x80
 800a8fa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a8fe:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800a902:	f04f 0800 	mov.w	r8, #0
 800a906:	9b00      	ldr	r3, [sp, #0]
 800a908:	4598      	cmp	r8, r3
 800a90a:	dc31      	bgt.n	800a970 <__kernel_rem_pio2+0xd8>
 800a90c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800ab98 <__kernel_rem_pio2+0x300>
 800a910:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a914:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a918:	462f      	mov	r7, r5
 800a91a:	2600      	movs	r6, #0
 800a91c:	e01b      	b.n	800a956 <__kernel_rem_pio2+0xbe>
 800a91e:	42ef      	cmn	r7, r5
 800a920:	d407      	bmi.n	800a932 <__kernel_rem_pio2+0x9a>
 800a922:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a926:	f7f5 fdc1 	bl	80004ac <__aeabi_i2d>
 800a92a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a92e:	3501      	adds	r5, #1
 800a930:	e7df      	b.n	800a8f2 <__kernel_rem_pio2+0x5a>
 800a932:	ec51 0b18 	vmov	r0, r1, d8
 800a936:	e7f8      	b.n	800a92a <__kernel_rem_pio2+0x92>
 800a938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a93c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a940:	f7f5 fe1e 	bl	8000580 <__aeabi_dmul>
 800a944:	4602      	mov	r2, r0
 800a946:	460b      	mov	r3, r1
 800a948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a94c:	f7f5 fc62 	bl	8000214 <__adddf3>
 800a950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a954:	3601      	adds	r6, #1
 800a956:	9b05      	ldr	r3, [sp, #20]
 800a958:	429e      	cmp	r6, r3
 800a95a:	f1a7 0708 	sub.w	r7, r7, #8
 800a95e:	ddeb      	ble.n	800a938 <__kernel_rem_pio2+0xa0>
 800a960:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a964:	f108 0801 	add.w	r8, r8, #1
 800a968:	ecaa 7b02 	vstmia	sl!, {d7}
 800a96c:	3508      	adds	r5, #8
 800a96e:	e7ca      	b.n	800a906 <__kernel_rem_pio2+0x6e>
 800a970:	9b00      	ldr	r3, [sp, #0]
 800a972:	f8dd 8000 	ldr.w	r8, [sp]
 800a976:	aa0c      	add	r2, sp, #48	@ 0x30
 800a978:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a97c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a97e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a980:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a984:	9309      	str	r3, [sp, #36]	@ 0x24
 800a986:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800a98a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a98c:	ab98      	add	r3, sp, #608	@ 0x260
 800a98e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a992:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800a996:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a99a:	ac0c      	add	r4, sp, #48	@ 0x30
 800a99c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a99e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800a9a2:	46a1      	mov	r9, r4
 800a9a4:	46c2      	mov	sl, r8
 800a9a6:	f1ba 0f00 	cmp.w	sl, #0
 800a9aa:	f1a5 0508 	sub.w	r5, r5, #8
 800a9ae:	dc77      	bgt.n	800aaa0 <__kernel_rem_pio2+0x208>
 800a9b0:	4658      	mov	r0, fp
 800a9b2:	ed9d 0b02 	vldr	d0, [sp, #8]
 800a9b6:	f7ff fdd7 	bl	800a568 <scalbn>
 800a9ba:	ec57 6b10 	vmov	r6, r7, d0
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	4639      	mov	r1, r7
 800a9c8:	f7f5 fdda 	bl	8000580 <__aeabi_dmul>
 800a9cc:	ec41 0b10 	vmov	d0, r0, r1
 800a9d0:	f000 faba 	bl	800af48 <floor>
 800a9d4:	4b75      	ldr	r3, [pc, #468]	@ (800abac <__kernel_rem_pio2+0x314>)
 800a9d6:	ec51 0b10 	vmov	r0, r1, d0
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f7f5 fdd0 	bl	8000580 <__aeabi_dmul>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	4639      	mov	r1, r7
 800a9e8:	f7f5 fc12 	bl	8000210 <__aeabi_dsub>
 800a9ec:	460f      	mov	r7, r1
 800a9ee:	4606      	mov	r6, r0
 800a9f0:	f7f6 f876 	bl	8000ae0 <__aeabi_d2iz>
 800a9f4:	9002      	str	r0, [sp, #8]
 800a9f6:	f7f5 fd59 	bl	80004ac <__aeabi_i2d>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	4630      	mov	r0, r6
 800aa00:	4639      	mov	r1, r7
 800aa02:	f7f5 fc05 	bl	8000210 <__aeabi_dsub>
 800aa06:	f1bb 0f00 	cmp.w	fp, #0
 800aa0a:	4606      	mov	r6, r0
 800aa0c:	460f      	mov	r7, r1
 800aa0e:	dd6c      	ble.n	800aaea <__kernel_rem_pio2+0x252>
 800aa10:	f108 31ff 	add.w	r1, r8, #4294967295
 800aa14:	ab0c      	add	r3, sp, #48	@ 0x30
 800aa16:	9d02      	ldr	r5, [sp, #8]
 800aa18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aa1c:	f1cb 0018 	rsb	r0, fp, #24
 800aa20:	fa43 f200 	asr.w	r2, r3, r0
 800aa24:	4415      	add	r5, r2
 800aa26:	4082      	lsls	r2, r0
 800aa28:	1a9b      	subs	r3, r3, r2
 800aa2a:	aa0c      	add	r2, sp, #48	@ 0x30
 800aa2c:	9502      	str	r5, [sp, #8]
 800aa2e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800aa32:	f1cb 0217 	rsb	r2, fp, #23
 800aa36:	fa43 f902 	asr.w	r9, r3, r2
 800aa3a:	f1b9 0f00 	cmp.w	r9, #0
 800aa3e:	dd64      	ble.n	800ab0a <__kernel_rem_pio2+0x272>
 800aa40:	9b02      	ldr	r3, [sp, #8]
 800aa42:	2200      	movs	r2, #0
 800aa44:	3301      	adds	r3, #1
 800aa46:	9302      	str	r3, [sp, #8]
 800aa48:	4615      	mov	r5, r2
 800aa4a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800aa4e:	4590      	cmp	r8, r2
 800aa50:	f300 80b8 	bgt.w	800abc4 <__kernel_rem_pio2+0x32c>
 800aa54:	f1bb 0f00 	cmp.w	fp, #0
 800aa58:	dd07      	ble.n	800aa6a <__kernel_rem_pio2+0x1d2>
 800aa5a:	f1bb 0f01 	cmp.w	fp, #1
 800aa5e:	f000 80bf 	beq.w	800abe0 <__kernel_rem_pio2+0x348>
 800aa62:	f1bb 0f02 	cmp.w	fp, #2
 800aa66:	f000 80c6 	beq.w	800abf6 <__kernel_rem_pio2+0x35e>
 800aa6a:	f1b9 0f02 	cmp.w	r9, #2
 800aa6e:	d14c      	bne.n	800ab0a <__kernel_rem_pio2+0x272>
 800aa70:	4632      	mov	r2, r6
 800aa72:	463b      	mov	r3, r7
 800aa74:	494e      	ldr	r1, [pc, #312]	@ (800abb0 <__kernel_rem_pio2+0x318>)
 800aa76:	2000      	movs	r0, #0
 800aa78:	f7f5 fbca 	bl	8000210 <__aeabi_dsub>
 800aa7c:	4606      	mov	r6, r0
 800aa7e:	460f      	mov	r7, r1
 800aa80:	2d00      	cmp	r5, #0
 800aa82:	d042      	beq.n	800ab0a <__kernel_rem_pio2+0x272>
 800aa84:	4658      	mov	r0, fp
 800aa86:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800aba0 <__kernel_rem_pio2+0x308>
 800aa8a:	f7ff fd6d 	bl	800a568 <scalbn>
 800aa8e:	4630      	mov	r0, r6
 800aa90:	4639      	mov	r1, r7
 800aa92:	ec53 2b10 	vmov	r2, r3, d0
 800aa96:	f7f5 fbbb 	bl	8000210 <__aeabi_dsub>
 800aa9a:	4606      	mov	r6, r0
 800aa9c:	460f      	mov	r7, r1
 800aa9e:	e034      	b.n	800ab0a <__kernel_rem_pio2+0x272>
 800aaa0:	4b44      	ldr	r3, [pc, #272]	@ (800abb4 <__kernel_rem_pio2+0x31c>)
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaa8:	f7f5 fd6a 	bl	8000580 <__aeabi_dmul>
 800aaac:	f7f6 f818 	bl	8000ae0 <__aeabi_d2iz>
 800aab0:	f7f5 fcfc 	bl	80004ac <__aeabi_i2d>
 800aab4:	4b40      	ldr	r3, [pc, #256]	@ (800abb8 <__kernel_rem_pio2+0x320>)
 800aab6:	2200      	movs	r2, #0
 800aab8:	4606      	mov	r6, r0
 800aaba:	460f      	mov	r7, r1
 800aabc:	f7f5 fd60 	bl	8000580 <__aeabi_dmul>
 800aac0:	4602      	mov	r2, r0
 800aac2:	460b      	mov	r3, r1
 800aac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aac8:	f7f5 fba2 	bl	8000210 <__aeabi_dsub>
 800aacc:	f7f6 f808 	bl	8000ae0 <__aeabi_d2iz>
 800aad0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aad4:	f849 0b04 	str.w	r0, [r9], #4
 800aad8:	4639      	mov	r1, r7
 800aada:	4630      	mov	r0, r6
 800aadc:	f7f5 fb9a 	bl	8000214 <__adddf3>
 800aae0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aae8:	e75d      	b.n	800a9a6 <__kernel_rem_pio2+0x10e>
 800aaea:	d107      	bne.n	800aafc <__kernel_rem_pio2+0x264>
 800aaec:	f108 33ff 	add.w	r3, r8, #4294967295
 800aaf0:	aa0c      	add	r2, sp, #48	@ 0x30
 800aaf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaf6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800aafa:	e79e      	b.n	800aa3a <__kernel_rem_pio2+0x1a2>
 800aafc:	4b2f      	ldr	r3, [pc, #188]	@ (800abbc <__kernel_rem_pio2+0x324>)
 800aafe:	2200      	movs	r2, #0
 800ab00:	f7f5 ffc4 	bl	8000a8c <__aeabi_dcmpge>
 800ab04:	2800      	cmp	r0, #0
 800ab06:	d143      	bne.n	800ab90 <__kernel_rem_pio2+0x2f8>
 800ab08:	4681      	mov	r9, r0
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	4630      	mov	r0, r6
 800ab10:	4639      	mov	r1, r7
 800ab12:	f7f5 ff9d 	bl	8000a50 <__aeabi_dcmpeq>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	f000 80bf 	beq.w	800ac9a <__kernel_rem_pio2+0x402>
 800ab1c:	f108 33ff 	add.w	r3, r8, #4294967295
 800ab20:	2200      	movs	r2, #0
 800ab22:	9900      	ldr	r1, [sp, #0]
 800ab24:	428b      	cmp	r3, r1
 800ab26:	da6e      	bge.n	800ac06 <__kernel_rem_pio2+0x36e>
 800ab28:	2a00      	cmp	r2, #0
 800ab2a:	f000 8089 	beq.w	800ac40 <__kernel_rem_pio2+0x3a8>
 800ab2e:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab32:	ab0c      	add	r3, sp, #48	@ 0x30
 800ab34:	f1ab 0b18 	sub.w	fp, fp, #24
 800ab38:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d0f6      	beq.n	800ab2e <__kernel_rem_pio2+0x296>
 800ab40:	4658      	mov	r0, fp
 800ab42:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800aba0 <__kernel_rem_pio2+0x308>
 800ab46:	f7ff fd0f 	bl	800a568 <scalbn>
 800ab4a:	f108 0301 	add.w	r3, r8, #1
 800ab4e:	00da      	lsls	r2, r3, #3
 800ab50:	9205      	str	r2, [sp, #20]
 800ab52:	ec55 4b10 	vmov	r4, r5, d0
 800ab56:	aa70      	add	r2, sp, #448	@ 0x1c0
 800ab58:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800abb4 <__kernel_rem_pio2+0x31c>
 800ab5c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800ab60:	4646      	mov	r6, r8
 800ab62:	f04f 0a00 	mov.w	sl, #0
 800ab66:	2e00      	cmp	r6, #0
 800ab68:	f280 80cf 	bge.w	800ad0a <__kernel_rem_pio2+0x472>
 800ab6c:	4644      	mov	r4, r8
 800ab6e:	2c00      	cmp	r4, #0
 800ab70:	f2c0 80fd 	blt.w	800ad6e <__kernel_rem_pio2+0x4d6>
 800ab74:	4b12      	ldr	r3, [pc, #72]	@ (800abc0 <__kernel_rem_pio2+0x328>)
 800ab76:	461f      	mov	r7, r3
 800ab78:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ab7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab7e:	9306      	str	r3, [sp, #24]
 800ab80:	f04f 0a00 	mov.w	sl, #0
 800ab84:	f04f 0b00 	mov.w	fp, #0
 800ab88:	2600      	movs	r6, #0
 800ab8a:	eba8 0504 	sub.w	r5, r8, r4
 800ab8e:	e0e2      	b.n	800ad56 <__kernel_rem_pio2+0x4be>
 800ab90:	f04f 0902 	mov.w	r9, #2
 800ab94:	e754      	b.n	800aa40 <__kernel_rem_pio2+0x1a8>
 800ab96:	bf00      	nop
	...
 800aba4:	3ff00000 	.word	0x3ff00000
 800aba8:	0800b350 	.word	0x0800b350
 800abac:	40200000 	.word	0x40200000
 800abb0:	3ff00000 	.word	0x3ff00000
 800abb4:	3e700000 	.word	0x3e700000
 800abb8:	41700000 	.word	0x41700000
 800abbc:	3fe00000 	.word	0x3fe00000
 800abc0:	0800b310 	.word	0x0800b310
 800abc4:	f854 3b04 	ldr.w	r3, [r4], #4
 800abc8:	b945      	cbnz	r5, 800abdc <__kernel_rem_pio2+0x344>
 800abca:	b123      	cbz	r3, 800abd6 <__kernel_rem_pio2+0x33e>
 800abcc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800abd0:	f844 3c04 	str.w	r3, [r4, #-4]
 800abd4:	2301      	movs	r3, #1
 800abd6:	3201      	adds	r2, #1
 800abd8:	461d      	mov	r5, r3
 800abda:	e738      	b.n	800aa4e <__kernel_rem_pio2+0x1b6>
 800abdc:	1acb      	subs	r3, r1, r3
 800abde:	e7f7      	b.n	800abd0 <__kernel_rem_pio2+0x338>
 800abe0:	f108 32ff 	add.w	r2, r8, #4294967295
 800abe4:	ab0c      	add	r3, sp, #48	@ 0x30
 800abe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800abee:	a90c      	add	r1, sp, #48	@ 0x30
 800abf0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800abf4:	e739      	b.n	800aa6a <__kernel_rem_pio2+0x1d2>
 800abf6:	f108 32ff 	add.w	r2, r8, #4294967295
 800abfa:	ab0c      	add	r3, sp, #48	@ 0x30
 800abfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac00:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ac04:	e7f3      	b.n	800abee <__kernel_rem_pio2+0x356>
 800ac06:	a90c      	add	r1, sp, #48	@ 0x30
 800ac08:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ac0c:	3b01      	subs	r3, #1
 800ac0e:	430a      	orrs	r2, r1
 800ac10:	e787      	b.n	800ab22 <__kernel_rem_pio2+0x28a>
 800ac12:	3401      	adds	r4, #1
 800ac14:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ac18:	2a00      	cmp	r2, #0
 800ac1a:	d0fa      	beq.n	800ac12 <__kernel_rem_pio2+0x37a>
 800ac1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac1e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ac22:	eb0d 0503 	add.w	r5, sp, r3
 800ac26:	9b06      	ldr	r3, [sp, #24]
 800ac28:	aa20      	add	r2, sp, #128	@ 0x80
 800ac2a:	4443      	add	r3, r8
 800ac2c:	f108 0701 	add.w	r7, r8, #1
 800ac30:	3d98      	subs	r5, #152	@ 0x98
 800ac32:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800ac36:	4444      	add	r4, r8
 800ac38:	42bc      	cmp	r4, r7
 800ac3a:	da04      	bge.n	800ac46 <__kernel_rem_pio2+0x3ae>
 800ac3c:	46a0      	mov	r8, r4
 800ac3e:	e6a2      	b.n	800a986 <__kernel_rem_pio2+0xee>
 800ac40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac42:	2401      	movs	r4, #1
 800ac44:	e7e6      	b.n	800ac14 <__kernel_rem_pio2+0x37c>
 800ac46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac48:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800ac4c:	f7f5 fc2e 	bl	80004ac <__aeabi_i2d>
 800ac50:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800af18 <__kernel_rem_pio2+0x680>
 800ac54:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ac58:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac60:	46b2      	mov	sl, r6
 800ac62:	f04f 0800 	mov.w	r8, #0
 800ac66:	9b05      	ldr	r3, [sp, #20]
 800ac68:	4598      	cmp	r8, r3
 800ac6a:	dd05      	ble.n	800ac78 <__kernel_rem_pio2+0x3e0>
 800ac6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac70:	3701      	adds	r7, #1
 800ac72:	eca5 7b02 	vstmia	r5!, {d7}
 800ac76:	e7df      	b.n	800ac38 <__kernel_rem_pio2+0x3a0>
 800ac78:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800ac7c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ac80:	f7f5 fc7e 	bl	8000580 <__aeabi_dmul>
 800ac84:	4602      	mov	r2, r0
 800ac86:	460b      	mov	r3, r1
 800ac88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac8c:	f7f5 fac2 	bl	8000214 <__adddf3>
 800ac90:	f108 0801 	add.w	r8, r8, #1
 800ac94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac98:	e7e5      	b.n	800ac66 <__kernel_rem_pio2+0x3ce>
 800ac9a:	f1cb 0000 	rsb	r0, fp, #0
 800ac9e:	ec47 6b10 	vmov	d0, r6, r7
 800aca2:	f7ff fc61 	bl	800a568 <scalbn>
 800aca6:	ec55 4b10 	vmov	r4, r5, d0
 800acaa:	4b9d      	ldr	r3, [pc, #628]	@ (800af20 <__kernel_rem_pio2+0x688>)
 800acac:	2200      	movs	r2, #0
 800acae:	4620      	mov	r0, r4
 800acb0:	4629      	mov	r1, r5
 800acb2:	f7f5 feeb 	bl	8000a8c <__aeabi_dcmpge>
 800acb6:	b300      	cbz	r0, 800acfa <__kernel_rem_pio2+0x462>
 800acb8:	4b9a      	ldr	r3, [pc, #616]	@ (800af24 <__kernel_rem_pio2+0x68c>)
 800acba:	2200      	movs	r2, #0
 800acbc:	4620      	mov	r0, r4
 800acbe:	4629      	mov	r1, r5
 800acc0:	f7f5 fc5e 	bl	8000580 <__aeabi_dmul>
 800acc4:	f7f5 ff0c 	bl	8000ae0 <__aeabi_d2iz>
 800acc8:	4606      	mov	r6, r0
 800acca:	f7f5 fbef 	bl	80004ac <__aeabi_i2d>
 800acce:	4b94      	ldr	r3, [pc, #592]	@ (800af20 <__kernel_rem_pio2+0x688>)
 800acd0:	2200      	movs	r2, #0
 800acd2:	f7f5 fc55 	bl	8000580 <__aeabi_dmul>
 800acd6:	460b      	mov	r3, r1
 800acd8:	4602      	mov	r2, r0
 800acda:	4629      	mov	r1, r5
 800acdc:	4620      	mov	r0, r4
 800acde:	f7f5 fa97 	bl	8000210 <__aeabi_dsub>
 800ace2:	f7f5 fefd 	bl	8000ae0 <__aeabi_d2iz>
 800ace6:	ab0c      	add	r3, sp, #48	@ 0x30
 800ace8:	f10b 0b18 	add.w	fp, fp, #24
 800acec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800acf0:	f108 0801 	add.w	r8, r8, #1
 800acf4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800acf8:	e722      	b.n	800ab40 <__kernel_rem_pio2+0x2a8>
 800acfa:	4620      	mov	r0, r4
 800acfc:	4629      	mov	r1, r5
 800acfe:	f7f5 feef 	bl	8000ae0 <__aeabi_d2iz>
 800ad02:	ab0c      	add	r3, sp, #48	@ 0x30
 800ad04:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800ad08:	e71a      	b.n	800ab40 <__kernel_rem_pio2+0x2a8>
 800ad0a:	ab0c      	add	r3, sp, #48	@ 0x30
 800ad0c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ad10:	f7f5 fbcc 	bl	80004ac <__aeabi_i2d>
 800ad14:	4622      	mov	r2, r4
 800ad16:	462b      	mov	r3, r5
 800ad18:	f7f5 fc32 	bl	8000580 <__aeabi_dmul>
 800ad1c:	4652      	mov	r2, sl
 800ad1e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800ad22:	465b      	mov	r3, fp
 800ad24:	4620      	mov	r0, r4
 800ad26:	4629      	mov	r1, r5
 800ad28:	f7f5 fc2a 	bl	8000580 <__aeabi_dmul>
 800ad2c:	3e01      	subs	r6, #1
 800ad2e:	4604      	mov	r4, r0
 800ad30:	460d      	mov	r5, r1
 800ad32:	e718      	b.n	800ab66 <__kernel_rem_pio2+0x2ce>
 800ad34:	9906      	ldr	r1, [sp, #24]
 800ad36:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800ad3a:	9106      	str	r1, [sp, #24]
 800ad3c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800ad40:	f7f5 fc1e 	bl	8000580 <__aeabi_dmul>
 800ad44:	4602      	mov	r2, r0
 800ad46:	460b      	mov	r3, r1
 800ad48:	4650      	mov	r0, sl
 800ad4a:	4659      	mov	r1, fp
 800ad4c:	f7f5 fa62 	bl	8000214 <__adddf3>
 800ad50:	3601      	adds	r6, #1
 800ad52:	4682      	mov	sl, r0
 800ad54:	468b      	mov	fp, r1
 800ad56:	9b00      	ldr	r3, [sp, #0]
 800ad58:	429e      	cmp	r6, r3
 800ad5a:	dc01      	bgt.n	800ad60 <__kernel_rem_pio2+0x4c8>
 800ad5c:	42b5      	cmp	r5, r6
 800ad5e:	dae9      	bge.n	800ad34 <__kernel_rem_pio2+0x49c>
 800ad60:	ab48      	add	r3, sp, #288	@ 0x120
 800ad62:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ad66:	e9c5 ab00 	strd	sl, fp, [r5]
 800ad6a:	3c01      	subs	r4, #1
 800ad6c:	e6ff      	b.n	800ab6e <__kernel_rem_pio2+0x2d6>
 800ad6e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800ad70:	2b02      	cmp	r3, #2
 800ad72:	dc0b      	bgt.n	800ad8c <__kernel_rem_pio2+0x4f4>
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	dc39      	bgt.n	800adec <__kernel_rem_pio2+0x554>
 800ad78:	d05d      	beq.n	800ae36 <__kernel_rem_pio2+0x59e>
 800ad7a:	9b02      	ldr	r3, [sp, #8]
 800ad7c:	f003 0007 	and.w	r0, r3, #7
 800ad80:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800ad84:	ecbd 8b02 	vpop	{d8}
 800ad88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad8c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800ad8e:	2b03      	cmp	r3, #3
 800ad90:	d1f3      	bne.n	800ad7a <__kernel_rem_pio2+0x4e2>
 800ad92:	9b05      	ldr	r3, [sp, #20]
 800ad94:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ad98:	eb0d 0403 	add.w	r4, sp, r3
 800ad9c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800ada0:	4625      	mov	r5, r4
 800ada2:	46c2      	mov	sl, r8
 800ada4:	f1ba 0f00 	cmp.w	sl, #0
 800ada8:	f1a5 0508 	sub.w	r5, r5, #8
 800adac:	dc6b      	bgt.n	800ae86 <__kernel_rem_pio2+0x5ee>
 800adae:	4645      	mov	r5, r8
 800adb0:	2d01      	cmp	r5, #1
 800adb2:	f1a4 0408 	sub.w	r4, r4, #8
 800adb6:	f300 8087 	bgt.w	800aec8 <__kernel_rem_pio2+0x630>
 800adba:	9c05      	ldr	r4, [sp, #20]
 800adbc:	ab48      	add	r3, sp, #288	@ 0x120
 800adbe:	441c      	add	r4, r3
 800adc0:	2000      	movs	r0, #0
 800adc2:	2100      	movs	r1, #0
 800adc4:	f1b8 0f01 	cmp.w	r8, #1
 800adc8:	f300 809c 	bgt.w	800af04 <__kernel_rem_pio2+0x66c>
 800adcc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800add0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800add4:	f1b9 0f00 	cmp.w	r9, #0
 800add8:	f040 80a6 	bne.w	800af28 <__kernel_rem_pio2+0x690>
 800addc:	9b04      	ldr	r3, [sp, #16]
 800adde:	e9c3 7800 	strd	r7, r8, [r3]
 800ade2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ade6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800adea:	e7c6      	b.n	800ad7a <__kernel_rem_pio2+0x4e2>
 800adec:	9d05      	ldr	r5, [sp, #20]
 800adee:	ab48      	add	r3, sp, #288	@ 0x120
 800adf0:	441d      	add	r5, r3
 800adf2:	4644      	mov	r4, r8
 800adf4:	2000      	movs	r0, #0
 800adf6:	2100      	movs	r1, #0
 800adf8:	2c00      	cmp	r4, #0
 800adfa:	da35      	bge.n	800ae68 <__kernel_rem_pio2+0x5d0>
 800adfc:	f1b9 0f00 	cmp.w	r9, #0
 800ae00:	d038      	beq.n	800ae74 <__kernel_rem_pio2+0x5dc>
 800ae02:	4602      	mov	r2, r0
 800ae04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae08:	9c04      	ldr	r4, [sp, #16]
 800ae0a:	e9c4 2300 	strd	r2, r3, [r4]
 800ae0e:	4602      	mov	r2, r0
 800ae10:	460b      	mov	r3, r1
 800ae12:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800ae16:	f7f5 f9fb 	bl	8000210 <__aeabi_dsub>
 800ae1a:	ad4a      	add	r5, sp, #296	@ 0x128
 800ae1c:	2401      	movs	r4, #1
 800ae1e:	45a0      	cmp	r8, r4
 800ae20:	da2b      	bge.n	800ae7a <__kernel_rem_pio2+0x5e2>
 800ae22:	f1b9 0f00 	cmp.w	r9, #0
 800ae26:	d002      	beq.n	800ae2e <__kernel_rem_pio2+0x596>
 800ae28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	9b04      	ldr	r3, [sp, #16]
 800ae30:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ae34:	e7a1      	b.n	800ad7a <__kernel_rem_pio2+0x4e2>
 800ae36:	9c05      	ldr	r4, [sp, #20]
 800ae38:	ab48      	add	r3, sp, #288	@ 0x120
 800ae3a:	441c      	add	r4, r3
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	2100      	movs	r1, #0
 800ae40:	f1b8 0f00 	cmp.w	r8, #0
 800ae44:	da09      	bge.n	800ae5a <__kernel_rem_pio2+0x5c2>
 800ae46:	f1b9 0f00 	cmp.w	r9, #0
 800ae4a:	d002      	beq.n	800ae52 <__kernel_rem_pio2+0x5ba>
 800ae4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae50:	4619      	mov	r1, r3
 800ae52:	9b04      	ldr	r3, [sp, #16]
 800ae54:	e9c3 0100 	strd	r0, r1, [r3]
 800ae58:	e78f      	b.n	800ad7a <__kernel_rem_pio2+0x4e2>
 800ae5a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ae5e:	f7f5 f9d9 	bl	8000214 <__adddf3>
 800ae62:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae66:	e7eb      	b.n	800ae40 <__kernel_rem_pio2+0x5a8>
 800ae68:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800ae6c:	f7f5 f9d2 	bl	8000214 <__adddf3>
 800ae70:	3c01      	subs	r4, #1
 800ae72:	e7c1      	b.n	800adf8 <__kernel_rem_pio2+0x560>
 800ae74:	4602      	mov	r2, r0
 800ae76:	460b      	mov	r3, r1
 800ae78:	e7c6      	b.n	800ae08 <__kernel_rem_pio2+0x570>
 800ae7a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800ae7e:	f7f5 f9c9 	bl	8000214 <__adddf3>
 800ae82:	3401      	adds	r4, #1
 800ae84:	e7cb      	b.n	800ae1e <__kernel_rem_pio2+0x586>
 800ae86:	ed95 7b00 	vldr	d7, [r5]
 800ae8a:	ed8d 7b00 	vstr	d7, [sp]
 800ae8e:	ed95 7b02 	vldr	d7, [r5, #8]
 800ae92:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae96:	ec53 2b17 	vmov	r2, r3, d7
 800ae9a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ae9e:	f7f5 f9b9 	bl	8000214 <__adddf3>
 800aea2:	4602      	mov	r2, r0
 800aea4:	460b      	mov	r3, r1
 800aea6:	4606      	mov	r6, r0
 800aea8:	460f      	mov	r7, r1
 800aeaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aeae:	f7f5 f9af 	bl	8000210 <__aeabi_dsub>
 800aeb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aeb6:	f7f5 f9ad 	bl	8000214 <__adddf3>
 800aeba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aebe:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800aec2:	e9c5 6700 	strd	r6, r7, [r5]
 800aec6:	e76d      	b.n	800ada4 <__kernel_rem_pio2+0x50c>
 800aec8:	ed94 7b00 	vldr	d7, [r4]
 800aecc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800aed0:	ec51 0b17 	vmov	r0, r1, d7
 800aed4:	4652      	mov	r2, sl
 800aed6:	465b      	mov	r3, fp
 800aed8:	ed8d 7b00 	vstr	d7, [sp]
 800aedc:	f7f5 f99a 	bl	8000214 <__adddf3>
 800aee0:	4602      	mov	r2, r0
 800aee2:	460b      	mov	r3, r1
 800aee4:	4606      	mov	r6, r0
 800aee6:	460f      	mov	r7, r1
 800aee8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aeec:	f7f5 f990 	bl	8000210 <__aeabi_dsub>
 800aef0:	4652      	mov	r2, sl
 800aef2:	465b      	mov	r3, fp
 800aef4:	f7f5 f98e 	bl	8000214 <__adddf3>
 800aef8:	3d01      	subs	r5, #1
 800aefa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aefe:	e9c4 6700 	strd	r6, r7, [r4]
 800af02:	e755      	b.n	800adb0 <__kernel_rem_pio2+0x518>
 800af04:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800af08:	f7f5 f984 	bl	8000214 <__adddf3>
 800af0c:	f108 38ff 	add.w	r8, r8, #4294967295
 800af10:	e758      	b.n	800adc4 <__kernel_rem_pio2+0x52c>
 800af12:	bf00      	nop
 800af14:	f3af 8000 	nop.w
	...
 800af20:	41700000 	.word	0x41700000
 800af24:	3e700000 	.word	0x3e700000
 800af28:	9b04      	ldr	r3, [sp, #16]
 800af2a:	9a04      	ldr	r2, [sp, #16]
 800af2c:	601f      	str	r7, [r3, #0]
 800af2e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800af32:	605c      	str	r4, [r3, #4]
 800af34:	609d      	str	r5, [r3, #8]
 800af36:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800af3a:	60d3      	str	r3, [r2, #12]
 800af3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800af40:	6110      	str	r0, [r2, #16]
 800af42:	6153      	str	r3, [r2, #20]
 800af44:	e719      	b.n	800ad7a <__kernel_rem_pio2+0x4e2>
 800af46:	bf00      	nop

0800af48 <floor>:
 800af48:	ec51 0b10 	vmov	r0, r1, d0
 800af4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800af50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af54:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800af58:	2e13      	cmp	r6, #19
 800af5a:	460c      	mov	r4, r1
 800af5c:	4605      	mov	r5, r0
 800af5e:	4680      	mov	r8, r0
 800af60:	dc34      	bgt.n	800afcc <floor+0x84>
 800af62:	2e00      	cmp	r6, #0
 800af64:	da17      	bge.n	800af96 <floor+0x4e>
 800af66:	a332      	add	r3, pc, #200	@ (adr r3, 800b030 <floor+0xe8>)
 800af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6c:	f7f5 f952 	bl	8000214 <__adddf3>
 800af70:	2200      	movs	r2, #0
 800af72:	2300      	movs	r3, #0
 800af74:	f7f5 fd94 	bl	8000aa0 <__aeabi_dcmpgt>
 800af78:	b150      	cbz	r0, 800af90 <floor+0x48>
 800af7a:	2c00      	cmp	r4, #0
 800af7c:	da55      	bge.n	800b02a <floor+0xe2>
 800af7e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800af82:	432c      	orrs	r4, r5
 800af84:	2500      	movs	r5, #0
 800af86:	42ac      	cmp	r4, r5
 800af88:	4c2b      	ldr	r4, [pc, #172]	@ (800b038 <floor+0xf0>)
 800af8a:	bf08      	it	eq
 800af8c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800af90:	4621      	mov	r1, r4
 800af92:	4628      	mov	r0, r5
 800af94:	e023      	b.n	800afde <floor+0x96>
 800af96:	4f29      	ldr	r7, [pc, #164]	@ (800b03c <floor+0xf4>)
 800af98:	4137      	asrs	r7, r6
 800af9a:	ea01 0307 	and.w	r3, r1, r7
 800af9e:	4303      	orrs	r3, r0
 800afa0:	d01d      	beq.n	800afde <floor+0x96>
 800afa2:	a323      	add	r3, pc, #140	@ (adr r3, 800b030 <floor+0xe8>)
 800afa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa8:	f7f5 f934 	bl	8000214 <__adddf3>
 800afac:	2200      	movs	r2, #0
 800afae:	2300      	movs	r3, #0
 800afb0:	f7f5 fd76 	bl	8000aa0 <__aeabi_dcmpgt>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	d0eb      	beq.n	800af90 <floor+0x48>
 800afb8:	2c00      	cmp	r4, #0
 800afba:	bfbe      	ittt	lt
 800afbc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800afc0:	4133      	asrlt	r3, r6
 800afc2:	18e4      	addlt	r4, r4, r3
 800afc4:	ea24 0407 	bic.w	r4, r4, r7
 800afc8:	2500      	movs	r5, #0
 800afca:	e7e1      	b.n	800af90 <floor+0x48>
 800afcc:	2e33      	cmp	r6, #51	@ 0x33
 800afce:	dd0a      	ble.n	800afe6 <floor+0x9e>
 800afd0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800afd4:	d103      	bne.n	800afde <floor+0x96>
 800afd6:	4602      	mov	r2, r0
 800afd8:	460b      	mov	r3, r1
 800afda:	f7f5 f91b 	bl	8000214 <__adddf3>
 800afde:	ec41 0b10 	vmov	d0, r0, r1
 800afe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afe6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800afea:	f04f 37ff 	mov.w	r7, #4294967295
 800afee:	40df      	lsrs	r7, r3
 800aff0:	4207      	tst	r7, r0
 800aff2:	d0f4      	beq.n	800afde <floor+0x96>
 800aff4:	a30e      	add	r3, pc, #56	@ (adr r3, 800b030 <floor+0xe8>)
 800aff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affa:	f7f5 f90b 	bl	8000214 <__adddf3>
 800affe:	2200      	movs	r2, #0
 800b000:	2300      	movs	r3, #0
 800b002:	f7f5 fd4d 	bl	8000aa0 <__aeabi_dcmpgt>
 800b006:	2800      	cmp	r0, #0
 800b008:	d0c2      	beq.n	800af90 <floor+0x48>
 800b00a:	2c00      	cmp	r4, #0
 800b00c:	da0a      	bge.n	800b024 <floor+0xdc>
 800b00e:	2e14      	cmp	r6, #20
 800b010:	d101      	bne.n	800b016 <floor+0xce>
 800b012:	3401      	adds	r4, #1
 800b014:	e006      	b.n	800b024 <floor+0xdc>
 800b016:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b01a:	2301      	movs	r3, #1
 800b01c:	40b3      	lsls	r3, r6
 800b01e:	441d      	add	r5, r3
 800b020:	4545      	cmp	r5, r8
 800b022:	d3f6      	bcc.n	800b012 <floor+0xca>
 800b024:	ea25 0507 	bic.w	r5, r5, r7
 800b028:	e7b2      	b.n	800af90 <floor+0x48>
 800b02a:	2500      	movs	r5, #0
 800b02c:	462c      	mov	r4, r5
 800b02e:	e7af      	b.n	800af90 <floor+0x48>
 800b030:	8800759c 	.word	0x8800759c
 800b034:	7e37e43c 	.word	0x7e37e43c
 800b038:	bff00000 	.word	0xbff00000
 800b03c:	000fffff 	.word	0x000fffff

0800b040 <memset>:
 800b040:	4402      	add	r2, r0
 800b042:	4603      	mov	r3, r0
 800b044:	4293      	cmp	r3, r2
 800b046:	d100      	bne.n	800b04a <memset+0xa>
 800b048:	4770      	bx	lr
 800b04a:	f803 1b01 	strb.w	r1, [r3], #1
 800b04e:	e7f9      	b.n	800b044 <memset+0x4>

0800b050 <__errno>:
 800b050:	4b01      	ldr	r3, [pc, #4]	@ (800b058 <__errno+0x8>)
 800b052:	6818      	ldr	r0, [r3, #0]
 800b054:	4770      	bx	lr
 800b056:	bf00      	nop
 800b058:	20000048 	.word	0x20000048

0800b05c <__libc_init_array>:
 800b05c:	b570      	push	{r4, r5, r6, lr}
 800b05e:	4d0d      	ldr	r5, [pc, #52]	@ (800b094 <__libc_init_array+0x38>)
 800b060:	4c0d      	ldr	r4, [pc, #52]	@ (800b098 <__libc_init_array+0x3c>)
 800b062:	1b64      	subs	r4, r4, r5
 800b064:	10a4      	asrs	r4, r4, #2
 800b066:	2600      	movs	r6, #0
 800b068:	42a6      	cmp	r6, r4
 800b06a:	d109      	bne.n	800b080 <__libc_init_array+0x24>
 800b06c:	4d0b      	ldr	r5, [pc, #44]	@ (800b09c <__libc_init_array+0x40>)
 800b06e:	4c0c      	ldr	r4, [pc, #48]	@ (800b0a0 <__libc_init_array+0x44>)
 800b070:	f000 f818 	bl	800b0a4 <_init>
 800b074:	1b64      	subs	r4, r4, r5
 800b076:	10a4      	asrs	r4, r4, #2
 800b078:	2600      	movs	r6, #0
 800b07a:	42a6      	cmp	r6, r4
 800b07c:	d105      	bne.n	800b08a <__libc_init_array+0x2e>
 800b07e:	bd70      	pop	{r4, r5, r6, pc}
 800b080:	f855 3b04 	ldr.w	r3, [r5], #4
 800b084:	4798      	blx	r3
 800b086:	3601      	adds	r6, #1
 800b088:	e7ee      	b.n	800b068 <__libc_init_array+0xc>
 800b08a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b08e:	4798      	blx	r3
 800b090:	3601      	adds	r6, #1
 800b092:	e7f2      	b.n	800b07a <__libc_init_array+0x1e>
 800b094:	0800b368 	.word	0x0800b368
 800b098:	0800b368 	.word	0x0800b368
 800b09c:	0800b368 	.word	0x0800b368
 800b0a0:	0800b36c 	.word	0x0800b36c

0800b0a4 <_init>:
 800b0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0a6:	bf00      	nop
 800b0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0aa:	bc08      	pop	{r3}
 800b0ac:	469e      	mov	lr, r3
 800b0ae:	4770      	bx	lr

0800b0b0 <_fini>:
 800b0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b2:	bf00      	nop
 800b0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0b6:	bc08      	pop	{r3}
 800b0b8:	469e      	mov	lr, r3
 800b0ba:	4770      	bx	lr
