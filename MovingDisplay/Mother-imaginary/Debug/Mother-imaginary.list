
Mother-imaginary.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a29c  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  0800a468  0800a468  0000b468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a708  0800a708  0000c0d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a708  0800a708  0000b708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a710  0800a710  0000c0d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a710  0800a710  0000b710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a714  0800a714  0000b714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  0800a718  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  200000d0  0800a7e8  0000c0d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  0800a7e8  0000c610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c0d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001598a  00000000  00000000  0000c100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a07  00000000  00000000  00021a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00024498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d32  00000000  00000000  00025530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002542e  00000000  00000000  00026262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017f4a  00000000  00000000  0004b690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d748d  00000000  00000000  000635da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013aa67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f20  00000000  00000000  0013aaac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0013f9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000d0 	.word	0x200000d0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800a44c 	.word	0x0800a44c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000d4 	.word	0x200000d4
 8000204:	0800a44c 	.word	0x0800a44c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b96a 	b.w	8000ebc <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	460c      	mov	r4, r1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d14e      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0c:	4694      	mov	ip, r2
 8000c0e:	458c      	cmp	ip, r1
 8000c10:	4686      	mov	lr, r0
 8000c12:	fab2 f282 	clz	r2, r2
 8000c16:	d962      	bls.n	8000cde <__udivmoddi4+0xde>
 8000c18:	b14a      	cbz	r2, 8000c2e <__udivmoddi4+0x2e>
 8000c1a:	f1c2 0320 	rsb	r3, r2, #32
 8000c1e:	4091      	lsls	r1, r2
 8000c20:	fa20 f303 	lsr.w	r3, r0, r3
 8000c24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c28:	4319      	orrs	r1, r3
 8000c2a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f f68c 	uxth.w	r6, ip
 8000c36:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb04 f106 	mul.w	r1, r4, r6
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c56:	f080 8112 	bcs.w	8000e7e <__udivmoddi4+0x27e>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 810f 	bls.w	8000e7e <__udivmoddi4+0x27e>
 8000c60:	3c02      	subs	r4, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a59      	subs	r1, r3, r1
 8000c66:	fa1f f38e 	uxth.w	r3, lr
 8000c6a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c76:	fb00 f606 	mul.w	r6, r0, r6
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	d90a      	bls.n	8000c94 <__udivmoddi4+0x94>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c86:	f080 80fc 	bcs.w	8000e82 <__udivmoddi4+0x282>
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	f240 80f9 	bls.w	8000e82 <__udivmoddi4+0x282>
 8000c90:	4463      	add	r3, ip
 8000c92:	3802      	subs	r0, #2
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	b11d      	cbz	r5, 8000ca6 <__udivmoddi4+0xa6>
 8000c9e:	40d3      	lsrs	r3, r2
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d905      	bls.n	8000cba <__udivmoddi4+0xba>
 8000cae:	b10d      	cbz	r5, 8000cb4 <__udivmoddi4+0xb4>
 8000cb0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e7f5      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cba:	fab3 f183 	clz	r1, r3
 8000cbe:	2900      	cmp	r1, #0
 8000cc0:	d146      	bne.n	8000d50 <__udivmoddi4+0x150>
 8000cc2:	42a3      	cmp	r3, r4
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xcc>
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	f0c0 80f0 	bcc.w	8000eac <__udivmoddi4+0x2ac>
 8000ccc:	1a86      	subs	r6, r0, r2
 8000cce:	eb64 0303 	sbc.w	r3, r4, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	2d00      	cmp	r5, #0
 8000cd6:	d0e6      	beq.n	8000ca6 <__udivmoddi4+0xa6>
 8000cd8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cdc:	e7e3      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	f040 8090 	bne.w	8000e04 <__udivmoddi4+0x204>
 8000ce4:	eba1 040c 	sub.w	r4, r1, ip
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	fa1f f78c 	uxth.w	r7, ip
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cf6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cfa:	fb08 4416 	mls	r4, r8, r6, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb07 f006 	mul.w	r0, r7, r6
 8000d06:	4298      	cmp	r0, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x11c>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x11a>
 8000d14:	4298      	cmp	r0, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2b4>
 8000d1a:	4626      	mov	r6, r4
 8000d1c:	1a1c      	subs	r4, r3, r0
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d26:	fb08 4410 	mls	r4, r8, r0, r4
 8000d2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2e:	fb00 f707 	mul.w	r7, r0, r7
 8000d32:	429f      	cmp	r7, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x148>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x146>
 8000d40:	429f      	cmp	r7, r3
 8000d42:	f200 80b0 	bhi.w	8000ea6 <__udivmoddi4+0x2a6>
 8000d46:	4620      	mov	r0, r4
 8000d48:	1bdb      	subs	r3, r3, r7
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	e7a5      	b.n	8000c9c <__udivmoddi4+0x9c>
 8000d50:	f1c1 0620 	rsb	r6, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 f706 	lsr.w	r7, r2, r6
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d60:	fa04 f301 	lsl.w	r3, r4, r1
 8000d64:	ea43 030c 	orr.w	r3, r3, ip
 8000d68:	40f4      	lsrs	r4, r6
 8000d6a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d6e:	0c38      	lsrs	r0, r7, #16
 8000d70:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d74:	fbb4 fef0 	udiv	lr, r4, r0
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d80:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d84:	fb0e f90c 	mul.w	r9, lr, ip
 8000d88:	45a1      	cmp	r9, r4
 8000d8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x1a6>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d96:	f080 8084 	bcs.w	8000ea2 <__udivmoddi4+0x2a2>
 8000d9a:	45a1      	cmp	r9, r4
 8000d9c:	f240 8081 	bls.w	8000ea2 <__udivmoddi4+0x2a2>
 8000da0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	eba4 0409 	sub.w	r4, r4, r9
 8000daa:	fa1f f983 	uxth.w	r9, r3
 8000dae:	fbb4 f3f0 	udiv	r3, r4, r0
 8000db2:	fb00 4413 	mls	r4, r0, r3, r4
 8000db6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dba:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x1d2>
 8000dc2:	193c      	adds	r4, r7, r4
 8000dc4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc8:	d267      	bcs.n	8000e9a <__udivmoddi4+0x29a>
 8000dca:	45a4      	cmp	ip, r4
 8000dcc:	d965      	bls.n	8000e9a <__udivmoddi4+0x29a>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	443c      	add	r4, r7
 8000dd2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dd6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dda:	eba4 040c 	sub.w	r4, r4, ip
 8000dde:	429c      	cmp	r4, r3
 8000de0:	46ce      	mov	lr, r9
 8000de2:	469c      	mov	ip, r3
 8000de4:	d351      	bcc.n	8000e8a <__udivmoddi4+0x28a>
 8000de6:	d04e      	beq.n	8000e86 <__udivmoddi4+0x286>
 8000de8:	b155      	cbz	r5, 8000e00 <__udivmoddi4+0x200>
 8000dea:	ebb8 030e 	subs.w	r3, r8, lr
 8000dee:	eb64 040c 	sbc.w	r4, r4, ip
 8000df2:	fa04 f606 	lsl.w	r6, r4, r6
 8000df6:	40cb      	lsrs	r3, r1
 8000df8:	431e      	orrs	r6, r3
 8000dfa:	40cc      	lsrs	r4, r1
 8000dfc:	e9c5 6400 	strd	r6, r4, [r5]
 8000e00:	2100      	movs	r1, #0
 8000e02:	e750      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000e04:	f1c2 0320 	rsb	r3, r2, #32
 8000e08:	fa20 f103 	lsr.w	r1, r0, r3
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	fa24 f303 	lsr.w	r3, r4, r3
 8000e14:	4094      	lsls	r4, r2
 8000e16:	430c      	orrs	r4, r1
 8000e18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e1c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e28:	fb08 3110 	mls	r1, r8, r0, r3
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e32:	fb00 f107 	mul.w	r1, r0, r7
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x24c>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e42:	d22c      	bcs.n	8000e9e <__udivmoddi4+0x29e>
 8000e44:	4299      	cmp	r1, r3
 8000e46:	d92a      	bls.n	8000e9e <__udivmoddi4+0x29e>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e54:	fb08 3311 	mls	r3, r8, r1, r3
 8000e58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e5c:	fb01 f307 	mul.w	r3, r1, r7
 8000e60:	42a3      	cmp	r3, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x276>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e6c:	d213      	bcs.n	8000e96 <__udivmoddi4+0x296>
 8000e6e:	42a3      	cmp	r3, r4
 8000e70:	d911      	bls.n	8000e96 <__udivmoddi4+0x296>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4464      	add	r4, ip
 8000e76:	1ae4      	subs	r4, r4, r3
 8000e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e7c:	e739      	b.n	8000cf2 <__udivmoddi4+0xf2>
 8000e7e:	4604      	mov	r4, r0
 8000e80:	e6f0      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e82:	4608      	mov	r0, r1
 8000e84:	e706      	b.n	8000c94 <__udivmoddi4+0x94>
 8000e86:	45c8      	cmp	r8, r9
 8000e88:	d2ae      	bcs.n	8000de8 <__udivmoddi4+0x1e8>
 8000e8a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e8e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e92:	3801      	subs	r0, #1
 8000e94:	e7a8      	b.n	8000de8 <__udivmoddi4+0x1e8>
 8000e96:	4631      	mov	r1, r6
 8000e98:	e7ed      	b.n	8000e76 <__udivmoddi4+0x276>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	e799      	b.n	8000dd2 <__udivmoddi4+0x1d2>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e7d4      	b.n	8000e4c <__udivmoddi4+0x24c>
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1a6>
 8000ea6:	4463      	add	r3, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e74d      	b.n	8000d48 <__udivmoddi4+0x148>
 8000eac:	4606      	mov	r6, r0
 8000eae:	4623      	mov	r3, r4
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e70f      	b.n	8000cd4 <__udivmoddi4+0xd4>
 8000eb4:	3e02      	subs	r6, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	e730      	b.n	8000d1c <__udivmoddi4+0x11c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <_ZN6BNO055C1EP17I2C_HandleTypeDefh>:


#include "BNO055.h"
#include "main.h"

BNO055::BNO055(I2C_HandleTypeDef* i2cHandle, uint8_t address)
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	71fb      	strb	r3, [r7, #7]
    : _i2cHandle(i2cHandle), _address(address << 1) {}
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	68ba      	ldr	r2, [r7, #8]
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	711a      	strb	r2, [r3, #4]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <_ZN6BNO0555beginEv>:

bool BNO055::begin() {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
    uint8_t configMode = 0x00; // CONFIGMODE
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]
    if (write(0x3D, &configMode, 1) != HAL_OK) {
 8000ef8:	f107 020f 	add.w	r2, r7, #15
 8000efc:	2301      	movs	r3, #1
 8000efe:	213d      	movs	r1, #61	@ 0x3d
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 f893 	bl	800102c <_ZN6BNO0555writeEhPht>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	bf14      	ite	ne
 8000f0c:	2301      	movne	r3, #1
 8000f0e:	2300      	moveq	r3, #0
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <_ZN6BNO0555beginEv+0x2e>
        return false;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e019      	b.n	8000f4e <_ZN6BNO0555beginEv+0x62>
    }
    HAL_Delay(30);
 8000f1a:	201e      	movs	r0, #30
 8000f1c:	f002 fd38 	bl	8003990 <HAL_Delay>

    uint8_t ndofMode = 0x0C;
 8000f20:	230c      	movs	r3, #12
 8000f22:	73bb      	strb	r3, [r7, #14]
//    uint8_t imuMode = 0x08;
    if (write(0x3D, &ndofMode, 1) != HAL_OK) {
 8000f24:	f107 020e 	add.w	r2, r7, #14
 8000f28:	2301      	movs	r3, #1
 8000f2a:	213d      	movs	r1, #61	@ 0x3d
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 f87d 	bl	800102c <_ZN6BNO0555writeEhPht>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	bf14      	ite	ne
 8000f38:	2301      	movne	r3, #1
 8000f3a:	2300      	moveq	r3, #0
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <_ZN6BNO0555beginEv+0x5a>
        return false;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e003      	b.n	8000f4e <_ZN6BNO0555beginEv+0x62>
    }
    HAL_Delay(30);
 8000f46:	201e      	movs	r0, #30
 8000f48:	f002 fd22 	bl	8003990 <HAL_Delay>

    return true;
 8000f4c:	2301      	movs	r3, #1
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <_ZN6BNO05514getEulerAnglesERfS0_S0_>:
void BNO055::setMode(uint8_t mode) {
    write(0x3D, &mode, 1);
    HAL_Delay(30);
}

void BNO055::getEulerAngles(float& heading, float& roll, float& pitch) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
 8000f64:	603b      	str	r3, [r7, #0]
    uint8_t eulerData[6];
    if (read(0x1A, eulerData, 6) == HAL_OK) {
 8000f66:	f107 0214 	add.w	r2, r7, #20
 8000f6a:	2306      	movs	r3, #6
 8000f6c:	211a      	movs	r1, #26
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f000 f87c 	bl	800106c <_ZN6BNO0554readEhPht>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	bf0c      	ite	eq
 8000f7a:	2301      	moveq	r3, #1
 8000f7c:	2300      	movne	r3, #0
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d04d      	beq.n	8001020 <_ZN6BNO05514getEulerAnglesERfS0_S0_+0xc8>
        int16_t headingRaw = ((int16_t)eulerData[1] << 8) | eulerData[0];
 8000f84:	7d7b      	ldrb	r3, [r7, #21]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	7d3b      	ldrb	r3, [r7, #20]
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	83fb      	strh	r3, [r7, #30]
        int16_t rollRaw = ((int16_t)eulerData[3] << 8) | eulerData[2];
 8000f92:	7dfb      	ldrb	r3, [r7, #23]
 8000f94:	021b      	lsls	r3, r3, #8
 8000f96:	b21a      	sxth	r2, r3
 8000f98:	7dbb      	ldrb	r3, [r7, #22]
 8000f9a:	b21b      	sxth	r3, r3
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	83bb      	strh	r3, [r7, #28]
        int16_t pitchRaw = ((int16_t)eulerData[5] << 8) | eulerData[4];
 8000fa0:	7e7b      	ldrb	r3, [r7, #25]
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	7e3b      	ldrb	r3, [r7, #24]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	4313      	orrs	r3, r2
 8000fac:	837b      	strh	r3, [r7, #26]

        heading = headingRaw / 16.0;
 8000fae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fa7a 	bl	80004ac <__aeabi_i2d>
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001028 <_ZN6BNO05514getEulerAnglesERfS0_S0_+0xd0>)
 8000fbe:	f7ff fc09 	bl	80007d4 <__aeabi_ddiv>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f7ff fdb1 	bl	8000b30 <__aeabi_d2f>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	601a      	str	r2, [r3, #0]
        roll = rollRaw / 16.0;
 8000fd4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fa67 	bl	80004ac <__aeabi_i2d>
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <_ZN6BNO05514getEulerAnglesERfS0_S0_+0xd0>)
 8000fe4:	f7ff fbf6 	bl	80007d4 <__aeabi_ddiv>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4610      	mov	r0, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f7ff fd9e 	bl	8000b30 <__aeabi_d2f>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	601a      	str	r2, [r3, #0]
        pitch = pitchRaw / 16.0;
 8000ffa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fa54 	bl	80004ac <__aeabi_i2d>
 8001004:	f04f 0200 	mov.w	r2, #0
 8001008:	4b07      	ldr	r3, [pc, #28]	@ (8001028 <_ZN6BNO05514getEulerAnglesERfS0_S0_+0xd0>)
 800100a:	f7ff fbe3 	bl	80007d4 <__aeabi_ddiv>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f7ff fd8b 	bl	8000b30 <__aeabi_d2f>
 800101a:	4602      	mov	r2, r0
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	601a      	str	r2, [r3, #0]
    }
}
 8001020:	bf00      	nop
 8001022:	3720      	adds	r7, #32
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40300000 	.word	0x40300000

0800102c <_ZN6BNO0555writeEhPht>:

HAL_StatusTypeDef BNO055::write(uint8_t reg, uint8_t* data, uint16_t size) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af04      	add	r7, sp, #16
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	461a      	mov	r2, r3
 8001038:	460b      	mov	r3, r1
 800103a:	72fb      	strb	r3, [r7, #11]
 800103c:	4613      	mov	r3, r2
 800103e:	813b      	strh	r3, [r7, #8]
    return HAL_I2C_Mem_Write(_i2cHandle, _address, reg, I2C_MEMADD_SIZE_8BIT, data, size, HAL_MAX_DELAY);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	791b      	ldrb	r3, [r3, #4]
 8001048:	4619      	mov	r1, r3
 800104a:	7afb      	ldrb	r3, [r7, #11]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	893b      	ldrh	r3, [r7, #8]
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	f003 fc61 	bl	8004924 <HAL_I2C_Mem_Write>
 8001062:	4603      	mov	r3, r0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_ZN6BNO0554readEhPht>:

HAL_StatusTypeDef BNO055::read(uint8_t reg, uint8_t* data, uint16_t size) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af04      	add	r7, sp, #16
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	461a      	mov	r2, r3
 8001078:	460b      	mov	r3, r1
 800107a:	72fb      	strb	r3, [r7, #11]
 800107c:	4613      	mov	r3, r2
 800107e:	813b      	strh	r3, [r7, #8]
    return HAL_I2C_Mem_Read(_i2cHandle, _address, reg, I2C_MEMADD_SIZE_8BIT, data, size, HAL_MAX_DELAY);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	791b      	ldrb	r3, [r3, #4]
 8001088:	4619      	mov	r1, r3
 800108a:	7afb      	ldrb	r3, [r7, #11]
 800108c:	b29a      	uxth	r2, r3
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	9302      	str	r3, [sp, #8]
 8001094:	893b      	ldrh	r3, [r7, #8]
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	f003 fd3b 	bl	8004b18 <HAL_I2C_Mem_Read>
 80010a2:	4603      	mov	r3, r0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
    if (htim == &htim2){
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a07      	ldr	r2, [pc, #28]	@ (80010d4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d104      	bne.n	80010c6 <HAL_TIM_PeriodElapsedCallback+0x1a>
        m_counter++;
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	4a05      	ldr	r2, [pc, #20]	@ (80010d8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80010c4:	6013      	str	r3, [r2, #0]
    }
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000140 	.word	0x20000140
 80010d8:	200003b0 	.word	0x200003b0
 80010dc:	00000000 	.word	0x00000000

080010e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	b0b8      	sub	sp, #224	@ 0xe0
 80010e4:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e6:	f002 fbe1 	bl	80038ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ea:	f000 fe31 	bl	8001d50 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ee:	f001 f8b1 	bl	8002254 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80010f2:	f001 f887 	bl	8002204 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 80010f6:	f000 fead 	bl	8001e54 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 80010fa:	f000 fedf 	bl	8001ebc <_ZL12MX_TIM2_Initv>
  MX_USART6_UART_Init();
 80010fe:	f001 f853 	bl	80021a8 <_ZL19MX_USART6_UART_Initv>
  MX_UART5_Init();
 8001102:	f000 ffc7 	bl	8002094 <_ZL13MX_UART5_Initv>
  MX_USART3_UART_Init();
 8001106:	f001 f821 	bl	800214c <_ZL19MX_USART3_UART_Initv>
  MX_TIM4_Init();
 800110a:	f000 ff33 	bl	8001f74 <_ZL12MX_TIM4_Initv>
  MX_USART2_UART_Init();
 800110e:	f000 ffef 	bl	80020f0 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(Servo_ON_GPIO_Port, Servo_ON_Pin, GPIO_PIN_SET);
 8001112:	2201      	movs	r2, #1
 8001114:	2102      	movs	r1, #2
 8001116:	481e      	ldr	r0, [pc, #120]	@ (8001190 <main+0xb0>)
 8001118:	f003 fa8c 	bl	8004634 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim2);
 800111c:	481d      	ldr	r0, [pc, #116]	@ (8001194 <main+0xb4>)
 800111e:	f005 f967 	bl	80063f0 <HAL_TIM_Base_Start_IT>
  HAL_UART_Transmit(&huart6, send_array, 12, 10);
 8001122:	230a      	movs	r3, #10
 8001124:	220c      	movs	r2, #12
 8001126:	491c      	ldr	r1, [pc, #112]	@ (8001198 <main+0xb8>)
 8001128:	481c      	ldr	r0, [pc, #112]	@ (800119c <main+0xbc>)
 800112a:	f006 f991 	bl	8007450 <HAL_UART_Transmit>

  HAL_UART_Receive_DMA(&huart5,rxBufA,64);
 800112e:	2240      	movs	r2, #64	@ 0x40
 8001130:	491b      	ldr	r1, [pc, #108]	@ (80011a0 <main+0xc0>)
 8001132:	481c      	ldr	r0, [pc, #112]	@ (80011a4 <main+0xc4>)
 8001134:	f006 faae 	bl	8007694 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2,rxBufB,64);
 8001138:	2240      	movs	r2, #64	@ 0x40
 800113a:	491b      	ldr	r1, [pc, #108]	@ (80011a8 <main+0xc8>)
 800113c:	481b      	ldr	r0, [pc, #108]	@ (80011ac <main+0xcc>)
 800113e:	f006 faa9 	bl	8007694 <HAL_UART_Receive_DMA>

  BNO055 bno055(&hi2c1);
 8001142:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001146:	2228      	movs	r2, #40	@ 0x28
 8001148:	4919      	ldr	r1, [pc, #100]	@ (80011b0 <main+0xd0>)
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff feb8 	bl	8000ec0 <_ZN6BNO055C1EP17I2C_HandleTypeDefh>

  if (!bno055.begin()) {
 8001150:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fec9 	bl	8000eec <_ZN6BNO0555beginEv>
 800115a:	4603      	mov	r3, r0
 800115c:	f083 0301 	eor.w	r3, r3, #1
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d02a      	beq.n	80011bc <main+0xdc>
	  // センサ初期化失敗時の処
	  uint32_t Ltika_pcounter = m_counter;
 8001166:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <main+0xd4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	  while (1){
		if(m_counter - Ltika_pcounter > 100){
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <main+0xd4>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b64      	cmp	r3, #100	@ 0x64
 800117a:	d9f8      	bls.n	800116e <main+0x8e>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800117c:	2104      	movs	r1, #4
 800117e:	480e      	ldr	r0, [pc, #56]	@ (80011b8 <main+0xd8>)
 8001180:	f003 fa71 	bl	8004666 <HAL_GPIO_TogglePin>
		Ltika_pcounter = m_counter;
 8001184:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <main+0xd4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
		if(m_counter - Ltika_pcounter > 100){
 800118c:	e7ef      	b.n	800116e <main+0x8e>
 800118e:	bf00      	nop
 8001190:	40020000 	.word	0x40020000
 8001194:	20000140 	.word	0x20000140
 8001198:	20000000 	.word	0x20000000
 800119c:	200002a8 	.word	0x200002a8
 80011a0:	20000420 	.word	0x20000420
 80011a4:	200001d0 	.word	0x200001d0
 80011a8:	2000046c 	.word	0x2000046c
 80011ac:	20000218 	.word	0x20000218
 80011b0:	200000ec 	.word	0x200000ec
 80011b4:	200003b0 	.word	0x200003b0
 80011b8:	40020400 	.word	0x40020400
	  };
  }

  float heading, roll, pitch;

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80011bc:	2100      	movs	r1, #0
 80011be:	48b0      	ldr	r0, [pc, #704]	@ (8001480 <main+0x3a0>)
 80011c0:	f005 f9e0 	bl	8006584 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 25);
 80011c4:	4bae      	ldr	r3, [pc, #696]	@ (8001480 <main+0x3a0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2219      	movs	r2, #25
 80011ca:	635a      	str	r2, [r3, #52]	@ 0x34
//  camera_pcounter = m_counter;

  HAL_Delay(2000);
 80011cc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011d0:	f002 fbde 	bl	8003990 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PERFORMANCE performance(perform, camera, cur_movement, display, circle_position, fish_position, position);
 80011d4:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80011d8:	4baa      	ldr	r3, [pc, #680]	@ (8001484 <main+0x3a4>)
 80011da:	9303      	str	r3, [sp, #12]
 80011dc:	4baa      	ldr	r3, [pc, #680]	@ (8001488 <main+0x3a8>)
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	4baa      	ldr	r3, [pc, #680]	@ (800148c <main+0x3ac>)
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	4baa      	ldr	r3, [pc, #680]	@ (8001490 <main+0x3b0>)
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	4baa      	ldr	r3, [pc, #680]	@ (8001494 <main+0x3b4>)
 80011ea:	4aab      	ldr	r2, [pc, #684]	@ (8001498 <main+0x3b8>)
 80011ec:	49ab      	ldr	r1, [pc, #684]	@ (800149c <main+0x3bc>)
 80011ee:	f001 fb94 	bl	800291a <_ZN11PERFORMANCEC1EPtPhPsS2_S2_S2_S2_>

  uint32_t Ltika_pcounter = m_counter;
 80011f2:	4bab      	ldr	r3, [pc, #684]	@ (80014a0 <main+0x3c0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t d_pcounter = m_counter;
 80011fa:	4ba9      	ldr	r3, [pc, #676]	@ (80014a0 <main+0x3c0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t speed_pcounter = m_counter;
 8001202:	4ba7      	ldr	r3, [pc, #668]	@ (80014a0 <main+0x3c0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  uint8_t OdoX_ID[3] = {248, 210, 210};
 800120a:	4aa6      	ldr	r2, [pc, #664]	@ (80014a4 <main+0x3c4>)
 800120c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	4611      	mov	r1, r2
 8001214:	8019      	strh	r1, [r3, #0]
 8001216:	3302      	adds	r3, #2
 8001218:	0c12      	lsrs	r2, r2, #16
 800121a:	701a      	strb	r2, [r3, #0]
  uint8_t OdoY_ID[3] = {249, 210, 210};
 800121c:	4aa2      	ldr	r2, [pc, #648]	@ (80014a8 <main+0x3c8>)
 800121e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001222:	6812      	ldr	r2, [r2, #0]
 8001224:	4611      	mov	r1, r2
 8001226:	8019      	strh	r1, [r3, #0]
 8001228:	3302      	adds	r3, #2
 800122a:	0c12      	lsrs	r2, r2, #16
 800122c:	701a      	strb	r2, [r3, #0]

  int16_t speed;
  int16_t p_speed = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
  int16_t degree;

//setup p_position
  HAL_UART_Transmit(&huart6, OdoX_ID, 3, 1);
 8001234:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001238:	2301      	movs	r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	489b      	ldr	r0, [pc, #620]	@ (80014ac <main+0x3cc>)
 800123e:	f006 f907 	bl	8007450 <HAL_UART_Transmit>
  if(HAL_UART_Receive(&huart6, rxDataX, 3, 1) == HAL_OK){
 8001242:	2301      	movs	r3, #1
 8001244:	2203      	movs	r2, #3
 8001246:	499a      	ldr	r1, [pc, #616]	@ (80014b0 <main+0x3d0>)
 8001248:	4898      	ldr	r0, [pc, #608]	@ (80014ac <main+0x3cc>)
 800124a:	f006 f98c 	bl	8007566 <HAL_UART_Receive>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	bf0c      	ite	eq
 8001254:	2301      	moveq	r3, #1
 8001256:	2300      	movne	r3, #0
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <main+0x186>
    HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800125e:	2104      	movs	r1, #4
 8001260:	4894      	ldr	r0, [pc, #592]	@ (80014b4 <main+0x3d4>)
 8001262:	f003 fa00 	bl	8004666 <HAL_GPIO_TogglePin>
  }else{}
  p_position[0] = rxDataX[1] + rxDataX[2]*200 - 20000;
 8001266:	4b92      	ldr	r3, [pc, #584]	@ (80014b0 <main+0x3d0>)
 8001268:	785b      	ldrb	r3, [r3, #1]
 800126a:	461a      	mov	r2, r3
 800126c:	4b90      	ldr	r3, [pc, #576]	@ (80014b0 <main+0x3d0>)
 800126e:	789b      	ldrb	r3, [r3, #2]
 8001270:	4619      	mov	r1, r3
 8001272:	0089      	lsls	r1, r1, #2
 8001274:	440b      	add	r3, r1
 8001276:	4619      	mov	r1, r3
 8001278:	0088      	lsls	r0, r1, #2
 800127a:	4619      	mov	r1, r3
 800127c:	4603      	mov	r3, r0
 800127e:	440b      	add	r3, r1
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	b29b      	uxth	r3, r3
 8001284:	4413      	add	r3, r2
 8001286:	b29b      	uxth	r3, r3
 8001288:	f5a3 439c 	sub.w	r3, r3, #19968	@ 0x4e00
 800128c:	3b20      	subs	r3, #32
 800128e:	b29b      	uxth	r3, r3
 8001290:	b21a      	sxth	r2, r3
 8001292:	4b89      	ldr	r3, [pc, #548]	@ (80014b8 <main+0x3d8>)
 8001294:	801a      	strh	r2, [r3, #0]

  HAL_UART_Transmit(&huart6, OdoY_ID, 3, 1);
 8001296:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800129a:	2301      	movs	r3, #1
 800129c:	2203      	movs	r2, #3
 800129e:	4883      	ldr	r0, [pc, #524]	@ (80014ac <main+0x3cc>)
 80012a0:	f006 f8d6 	bl	8007450 <HAL_UART_Transmit>
  if(HAL_UART_Receive(&huart6, rxDataY, 3, 1) == HAL_OK){
 80012a4:	2301      	movs	r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	4984      	ldr	r1, [pc, #528]	@ (80014bc <main+0x3dc>)
 80012aa:	4880      	ldr	r0, [pc, #512]	@ (80014ac <main+0x3cc>)
 80012ac:	f006 f95b 	bl	8007566 <HAL_UART_Receive>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bf0c      	ite	eq
 80012b6:	2301      	moveq	r3, #1
 80012b8:	2300      	movne	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <main+0x1e8>
    HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80012c0:	2104      	movs	r1, #4
 80012c2:	487c      	ldr	r0, [pc, #496]	@ (80014b4 <main+0x3d4>)
 80012c4:	f003 f9cf 	bl	8004666 <HAL_GPIO_TogglePin>
  }else{}
  p_position[1] = rxDataY[1] + rxDataY[2]*200 - 20000;
 80012c8:	4b7c      	ldr	r3, [pc, #496]	@ (80014bc <main+0x3dc>)
 80012ca:	785b      	ldrb	r3, [r3, #1]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b7b      	ldr	r3, [pc, #492]	@ (80014bc <main+0x3dc>)
 80012d0:	789b      	ldrb	r3, [r3, #2]
 80012d2:	4619      	mov	r1, r3
 80012d4:	0089      	lsls	r1, r1, #2
 80012d6:	440b      	add	r3, r1
 80012d8:	4619      	mov	r1, r3
 80012da:	0088      	lsls	r0, r1, #2
 80012dc:	4619      	mov	r1, r3
 80012de:	4603      	mov	r3, r0
 80012e0:	440b      	add	r3, r1
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	4413      	add	r3, r2
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	f5a3 439c 	sub.w	r3, r3, #19968	@ 0x4e00
 80012ee:	3b20      	subs	r3, #32
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	4b70      	ldr	r3, [pc, #448]	@ (80014b8 <main+0x3d8>)
 80012f6:	805a      	strh	r2, [r3, #2]

  speed_pcounter = m_counter;
 80012f8:	4b69      	ldr	r3, [pc, #420]	@ (80014a0 <main+0x3c0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

////START loop

  while (1)
  {
	dtime = m_counter - d_pcounter;
 8001300:	4b67      	ldr	r3, [pc, #412]	@ (80014a0 <main+0x3c0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	b29a      	uxth	r2, r3
 8001306:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800130a:	b29b      	uxth	r3, r3
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	b29a      	uxth	r2, r3
 8001310:	4b6b      	ldr	r3, [pc, #428]	@ (80014c0 <main+0x3e0>)
 8001312:	801a      	strh	r2, [r3, #0]
	d_pcounter = m_counter;
 8001314:	4b62      	ldr	r3, [pc, #392]	@ (80014a0 <main+0x3c0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	if(HAL_GPIO_ReadPin(TACTSW0_GPIO_Port, TACTSW0_Pin) == 1){rst_mcounter = m_counter;}
 800131c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001320:	4864      	ldr	r0, [pc, #400]	@ (80014b4 <main+0x3d4>)
 8001322:	f003 f96f 	bl	8004604 <HAL_GPIO_ReadPin>
 8001326:	4603      	mov	r3, r0
 8001328:	2b01      	cmp	r3, #1
 800132a:	bf0c      	ite	eq
 800132c:	2301      	moveq	r3, #1
 800132e:	2300      	movne	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <main+0x25e>
 8001336:	4b5a      	ldr	r3, [pc, #360]	@ (80014a0 <main+0x3c0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a62      	ldr	r2, [pc, #392]	@ (80014c4 <main+0x3e4>)
 800133c:	6013      	str	r3, [r2, #0]
	now_mcounter = m_counter - rst_mcounter;
 800133e:	4b58      	ldr	r3, [pc, #352]	@ (80014a0 <main+0x3c0>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b60      	ldr	r3, [pc, #384]	@ (80014c4 <main+0x3e4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	4a5f      	ldr	r2, [pc, #380]	@ (80014c8 <main+0x3e8>)
 800134a:	6013      	str	r3, [r2, #0]

////START get NOW-STATUS

//get rotate
	bno055.getEulerAngles(heading, roll, pitch);
 800134c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001350:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8001354:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8001358:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 800135c:	f7ff fdfc 	bl	8000f58 <_ZN6BNO05514getEulerAnglesERfS0_S0_>
	rotate = (int)heading;
 8001360:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136c:	4b57      	ldr	r3, [pc, #348]	@ (80014cc <main+0x3ec>)
 800136e:	edc3 7a00 	vstr	s15, [r3]

//get x coordinate
	HAL_UART_Transmit(&huart6, OdoX_ID, 3, 1);
 8001372:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001376:	2301      	movs	r3, #1
 8001378:	2203      	movs	r2, #3
 800137a:	484c      	ldr	r0, [pc, #304]	@ (80014ac <main+0x3cc>)
 800137c:	f006 f868 	bl	8007450 <HAL_UART_Transmit>
	if(HAL_UART_Receive(&huart6, rxDataX, 3, 1) == HAL_OK){
 8001380:	2301      	movs	r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	494a      	ldr	r1, [pc, #296]	@ (80014b0 <main+0x3d0>)
 8001386:	4849      	ldr	r0, [pc, #292]	@ (80014ac <main+0x3cc>)
 8001388:	f006 f8ed 	bl	8007566 <HAL_UART_Receive>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	bf0c      	ite	eq
 8001392:	2301      	moveq	r3, #1
 8001394:	2300      	movne	r3, #0
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <main+0x2c4>
	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800139c:	2104      	movs	r1, #4
 800139e:	4845      	ldr	r0, [pc, #276]	@ (80014b4 <main+0x3d4>)
 80013a0:	f003 f961 	bl	8004666 <HAL_GPIO_TogglePin>
	}else{}
	position[0] = rxDataX[1] + rxDataX[2]*200 - 20000;
 80013a4:	4b42      	ldr	r3, [pc, #264]	@ (80014b0 <main+0x3d0>)
 80013a6:	785b      	ldrb	r3, [r3, #1]
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b41      	ldr	r3, [pc, #260]	@ (80014b0 <main+0x3d0>)
 80013ac:	789b      	ldrb	r3, [r3, #2]
 80013ae:	4619      	mov	r1, r3
 80013b0:	0089      	lsls	r1, r1, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	4619      	mov	r1, r3
 80013b6:	0088      	lsls	r0, r1, #2
 80013b8:	4619      	mov	r1, r3
 80013ba:	4603      	mov	r3, r0
 80013bc:	440b      	add	r3, r1
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	4413      	add	r3, r2
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	f5a3 439c 	sub.w	r3, r3, #19968	@ 0x4e00
 80013ca:	3b20      	subs	r3, #32
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001484 <main+0x3a4>)
 80013d2:	801a      	strh	r2, [r3, #0]

//get y coordinate
	HAL_UART_Transmit(&huart6, OdoY_ID, 3, 1);
 80013d4:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80013d8:	2301      	movs	r3, #1
 80013da:	2203      	movs	r2, #3
 80013dc:	4833      	ldr	r0, [pc, #204]	@ (80014ac <main+0x3cc>)
 80013de:	f006 f837 	bl	8007450 <HAL_UART_Transmit>
	if(HAL_UART_Receive(&huart6, rxDataY, 3, 1) == HAL_OK){
 80013e2:	2301      	movs	r3, #1
 80013e4:	2203      	movs	r2, #3
 80013e6:	4935      	ldr	r1, [pc, #212]	@ (80014bc <main+0x3dc>)
 80013e8:	4830      	ldr	r0, [pc, #192]	@ (80014ac <main+0x3cc>)
 80013ea:	f006 f8bc 	bl	8007566 <HAL_UART_Receive>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	bf0c      	ite	eq
 80013f4:	2301      	moveq	r3, #1
 80013f6:	2300      	movne	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <main+0x326>
	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80013fe:	2104      	movs	r1, #4
 8001400:	482c      	ldr	r0, [pc, #176]	@ (80014b4 <main+0x3d4>)
 8001402:	f003 f930 	bl	8004666 <HAL_GPIO_TogglePin>
	}else{}
	position[1] = rxDataY[1] + rxDataY[2]*200 - 20000;
 8001406:	4b2d      	ldr	r3, [pc, #180]	@ (80014bc <main+0x3dc>)
 8001408:	785b      	ldrb	r3, [r3, #1]
 800140a:	461a      	mov	r2, r3
 800140c:	4b2b      	ldr	r3, [pc, #172]	@ (80014bc <main+0x3dc>)
 800140e:	789b      	ldrb	r3, [r3, #2]
 8001410:	4619      	mov	r1, r3
 8001412:	0089      	lsls	r1, r1, #2
 8001414:	440b      	add	r3, r1
 8001416:	4619      	mov	r1, r3
 8001418:	0088      	lsls	r0, r1, #2
 800141a:	4619      	mov	r1, r3
 800141c:	4603      	mov	r3, r0
 800141e:	440b      	add	r3, r1
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	b29b      	uxth	r3, r3
 8001424:	4413      	add	r3, r2
 8001426:	b29b      	uxth	r3, r3
 8001428:	f5a3 439c 	sub.w	r3, r3, #19968	@ 0x4e00
 800142c:	3b20      	subs	r3, #32
 800142e:	b29b      	uxth	r3, r3
 8001430:	b21a      	sxth	r2, r3
 8001432:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <main+0x3a4>)
 8001434:	805a      	strh	r2, [r3, #2]

//get speed
	if(m_counter - speed_pcounter >= 20){
 8001436:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <main+0x3c0>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b13      	cmp	r3, #19
 8001442:	f240 80c8 	bls.w	80015d6 <main+0x4f6>
		dposition[0] = position[0] - p_position[0];
 8001446:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <main+0x3a4>)
 8001448:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144c:	b29a      	uxth	r2, r3
 800144e:	4b1a      	ldr	r3, [pc, #104]	@ (80014b8 <main+0x3d8>)
 8001450:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001454:	b29b      	uxth	r3, r3
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	b29b      	uxth	r3, r3
 800145a:	b21a      	sxth	r2, r3
 800145c:	4b1c      	ldr	r3, [pc, #112]	@ (80014d0 <main+0x3f0>)
 800145e:	801a      	strh	r2, [r3, #0]
		p_position[0] = position[0];
 8001460:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <main+0x3a4>)
 8001462:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001466:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <main+0x3d8>)
 8001468:	801a      	strh	r2, [r3, #0]

		dposition[1] = position[1] - p_position[1];
 800146a:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <main+0x3a4>)
 800146c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001470:	b29a      	uxth	r2, r3
 8001472:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <main+0x3d8>)
 8001474:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001478:	b29b      	uxth	r3, r3
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	e02a      	b.n	80014d4 <main+0x3f4>
 800147e:	bf00      	nop
 8001480:	20000188 	.word	0x20000188
 8001484:	200003cc 	.word	0x200003cc
 8001488:	200003e0 	.word	0x200003e0
 800148c:	200003d8 	.word	0x200003d8
 8001490:	2000000c 	.word	0x2000000c
 8001494:	20000410 	.word	0x20000410
 8001498:	200004ac 	.word	0x200004ac
 800149c:	2000004c 	.word	0x2000004c
 80014a0:	200003b0 	.word	0x200003b0
 80014a4:	0800a468 	.word	0x0800a468
 80014a8:	0800a46c 	.word	0x0800a46c
 80014ac:	200002a8 	.word	0x200002a8
 80014b0:	200003c4 	.word	0x200003c4
 80014b4:	40020400 	.word	0x40020400
 80014b8:	20000404 	.word	0x20000404
 80014bc:	200003c8 	.word	0x200003c8
 80014c0:	200004ae 	.word	0x200004ae
 80014c4:	200003b4 	.word	0x200003b4
 80014c8:	200003b8 	.word	0x200003b8
 80014cc:	200003d4 	.word	0x200003d4
 80014d0:	2000040c 	.word	0x2000040c
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	4bbd      	ldr	r3, [pc, #756]	@ (80017d0 <main+0x6f0>)
 80014da:	805a      	strh	r2, [r3, #2]
		p_position[1] = position[1];
 80014dc:	4bbd      	ldr	r3, [pc, #756]	@ (80017d4 <main+0x6f4>)
 80014de:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80014e2:	4bbd      	ldr	r3, [pc, #756]	@ (80017d8 <main+0x6f8>)
 80014e4:	805a      	strh	r2, [r3, #2]

		position[2] = pow(pow(dposition[0], 2) + pow(dposition[1], 2), 0.5)*1000 / (m_counter - speed_pcounter);
 80014e6:	4bba      	ldr	r3, [pc, #744]	@ (80017d0 <main+0x6f0>)
 80014e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ec:	2102      	movs	r1, #2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f001 f9c9 	bl	8002886 <_ZSt3powIsiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014f4:	ec55 4b10 	vmov	r4, r5, d0
 80014f8:	4bb5      	ldr	r3, [pc, #724]	@ (80017d0 <main+0x6f0>)
 80014fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014fe:	2102      	movs	r1, #2
 8001500:	4618      	mov	r0, r3
 8001502:	f001 f9c0 	bl	8002886 <_ZSt3powIsiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001506:	ec53 2b10 	vmov	r2, r3, d0
 800150a:	4620      	mov	r0, r4
 800150c:	4629      	mov	r1, r5
 800150e:	f7fe fe81 	bl	8000214 <__adddf3>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	ec43 2b17 	vmov	d7, r2, r3
 800151a:	ed9f 1ba5 	vldr	d1, [pc, #660]	@ 80017b0 <main+0x6d0>
 800151e:	eeb0 0a47 	vmov.f32	s0, s14
 8001522:	eef0 0a67 	vmov.f32	s1, s15
 8001526:	f006 fdf7 	bl	8008118 <pow>
 800152a:	ec51 0b10 	vmov	r0, r1, d0
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	4baa      	ldr	r3, [pc, #680]	@ (80017dc <main+0x6fc>)
 8001534:	f7ff f824 	bl	8000580 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4614      	mov	r4, r2
 800153e:	461d      	mov	r5, r3
 8001540:	4ba7      	ldr	r3, [pc, #668]	@ (80017e0 <main+0x700>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe ff9e 	bl	800048c <__aeabi_ui2d>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4620      	mov	r0, r4
 8001556:	4629      	mov	r1, r5
 8001558:	f7ff f93c 	bl	80007d4 <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f7ff fabc 	bl	8000ae0 <__aeabi_d2iz>
 8001568:	4603      	mov	r3, r0
 800156a:	b21a      	sxth	r2, r3
 800156c:	4b99      	ldr	r3, [pc, #612]	@ (80017d4 <main+0x6f4>)
 800156e:	809a      	strh	r2, [r3, #4]
		position[2] = (position[2]*0.8) + (p_position[2]*0.2);
 8001570:	4b98      	ldr	r3, [pc, #608]	@ (80017d4 <main+0x6f4>)
 8001572:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ff98 	bl	80004ac <__aeabi_i2d>
 800157c:	a38e      	add	r3, pc, #568	@ (adr r3, 80017b8 <main+0x6d8>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	f7fe fffd 	bl	8000580 <__aeabi_dmul>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4614      	mov	r4, r2
 800158c:	461d      	mov	r5, r3
 800158e:	4b92      	ldr	r3, [pc, #584]	@ (80017d8 <main+0x6f8>)
 8001590:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ff89 	bl	80004ac <__aeabi_i2d>
 800159a:	a389      	add	r3, pc, #548	@ (adr r3, 80017c0 <main+0x6e0>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f7fe ffee 	bl	8000580 <__aeabi_dmul>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4620      	mov	r0, r4
 80015aa:	4629      	mov	r1, r5
 80015ac:	f7fe fe32 	bl	8000214 <__adddf3>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff fa92 	bl	8000ae0 <__aeabi_d2iz>
 80015bc:	4603      	mov	r3, r0
 80015be:	b21a      	sxth	r2, r3
 80015c0:	4b84      	ldr	r3, [pc, #528]	@ (80017d4 <main+0x6f4>)
 80015c2:	809a      	strh	r2, [r3, #4]
		p_position[2] = position[2];
 80015c4:	4b83      	ldr	r3, [pc, #524]	@ (80017d4 <main+0x6f4>)
 80015c6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80015ca:	4b83      	ldr	r3, [pc, #524]	@ (80017d8 <main+0x6f8>)
 80015cc:	809a      	strh	r2, [r3, #4]

		speed_pcounter = m_counter;
 80015ce:	4b84      	ldr	r3, [pc, #528]	@ (80017e0 <main+0x700>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0


////START get PERFORMANCE STATUS

//get perform[] from TweLite
	readBuf(&huart5, rxBufA, 64, rxDataA, 4, 0, &p_wrtptA, &p_rdptA, &stop_counterA, &error_counterA, 10);
 80015d6:	230a      	movs	r3, #10
 80015d8:	9306      	str	r3, [sp, #24]
 80015da:	4b82      	ldr	r3, [pc, #520]	@ (80017e4 <main+0x704>)
 80015dc:	9305      	str	r3, [sp, #20]
 80015de:	4b82      	ldr	r3, [pc, #520]	@ (80017e8 <main+0x708>)
 80015e0:	9304      	str	r3, [sp, #16]
 80015e2:	4b82      	ldr	r3, [pc, #520]	@ (80017ec <main+0x70c>)
 80015e4:	9303      	str	r3, [sp, #12]
 80015e6:	4b82      	ldr	r3, [pc, #520]	@ (80017f0 <main+0x710>)
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	2300      	movs	r3, #0
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	2304      	movs	r3, #4
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	4b80      	ldr	r3, [pc, #512]	@ (80017f4 <main+0x714>)
 80015f4:	2240      	movs	r2, #64	@ 0x40
 80015f6:	4980      	ldr	r1, [pc, #512]	@ (80017f8 <main+0x718>)
 80015f8:	4880      	ldr	r0, [pc, #512]	@ (80017fc <main+0x71c>)
 80015fa:	f001 f82d 	bl	8002658 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h>
	perform[0] = rxDataA[0] - 5;
 80015fe:	4b7d      	ldr	r3, [pc, #500]	@ (80017f4 <main+0x714>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	3b05      	subs	r3, #5
 8001604:	b29a      	uxth	r2, r3
 8001606:	4b7e      	ldr	r3, [pc, #504]	@ (8001800 <main+0x720>)
 8001608:	801a      	strh	r2, [r3, #0]
	perform[1] = rxDataA[1] - 5;
 800160a:	4b7a      	ldr	r3, [pc, #488]	@ (80017f4 <main+0x714>)
 800160c:	785b      	ldrb	r3, [r3, #1]
 800160e:	3b05      	subs	r3, #5
 8001610:	b29a      	uxth	r2, r3
 8001612:	4b7b      	ldr	r3, [pc, #492]	@ (8001800 <main+0x720>)
 8001614:	805a      	strh	r2, [r3, #2]
	perform[2] = perform[1] * 1000 / 20391;
 8001616:	4b7a      	ldr	r3, [pc, #488]	@ (8001800 <main+0x720>)
 8001618:	885b      	ldrh	r3, [r3, #2]
 800161a:	461a      	mov	r2, r3
 800161c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001620:	fb02 f303 	mul.w	r3, r2, r3
 8001624:	4a77      	ldr	r2, [pc, #476]	@ (8001804 <main+0x724>)
 8001626:	fb82 1203 	smull	r1, r2, r2, r3
 800162a:	1312      	asrs	r2, r2, #12
 800162c:	17db      	asrs	r3, r3, #31
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	b29a      	uxth	r2, r3
 8001632:	4b73      	ldr	r3, [pc, #460]	@ (8001800 <main+0x720>)
 8001634:	809a      	strh	r2, [r3, #4]
	perform[3] = rxDataA[3];
 8001636:	4b6f      	ldr	r3, [pc, #444]	@ (80017f4 <main+0x714>)
 8001638:	78db      	ldrb	r3, [r3, #3]
 800163a:	461a      	mov	r2, r3
 800163c:	4b70      	ldr	r3, [pc, #448]	@ (8001800 <main+0x720>)
 800163e:	80da      	strh	r2, [r3, #6]
//    h = (h / 360) * 255;
//
//    camera[0] = h;

//get target
	performance.get_target_status_superteam(m_counter);
 8001640:	4b67      	ldr	r3, [pc, #412]	@ (80017e0 <main+0x700>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f001 f9da 	bl	8002a04 <_ZN11PERFORMANCE27get_target_status_superteamEm>


////START do MOVEMENT

//get movement distance
	for(int i=0; i<2; i++){cur_position_rec[i] = cur_movement[i] - position[i];}
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001656:	e018      	b.n	800168a <main+0x5aa>
 8001658:	4a6b      	ldr	r2, [pc, #428]	@ (8001808 <main+0x728>)
 800165a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800165e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001662:	b29a      	uxth	r2, r3
 8001664:	495b      	ldr	r1, [pc, #364]	@ (80017d4 <main+0x6f4>)
 8001666:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800166a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800166e:	b29b      	uxth	r3, r3
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	b29b      	uxth	r3, r3
 8001674:	b219      	sxth	r1, r3
 8001676:	4a65      	ldr	r2, [pc, #404]	@ (800180c <main+0x72c>)
 8001678:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800167c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001680:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001684:	3301      	adds	r3, #1
 8001686:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800168a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800168e:	2b01      	cmp	r3, #1
 8001690:	dde2      	ble.n	8001658 <main+0x578>

//convert movement distance to polar coordinates
	cur_position_pol[0] = pow(pow(cur_position_rec[0], 2) + pow(cur_position_rec[1], 2), 0.5);
 8001692:	4b5e      	ldr	r3, [pc, #376]	@ (800180c <main+0x72c>)
 8001694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001698:	2102      	movs	r1, #2
 800169a:	4618      	mov	r0, r3
 800169c:	f001 f8f3 	bl	8002886 <_ZSt3powIsiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80016a0:	ec55 4b10 	vmov	r4, r5, d0
 80016a4:	4b59      	ldr	r3, [pc, #356]	@ (800180c <main+0x72c>)
 80016a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016aa:	2102      	movs	r1, #2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f001 f8ea 	bl	8002886 <_ZSt3powIsiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80016b2:	ec53 2b10 	vmov	r2, r3, d0
 80016b6:	4620      	mov	r0, r4
 80016b8:	4629      	mov	r1, r5
 80016ba:	f7fe fdab 	bl	8000214 <__adddf3>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	ec43 2b17 	vmov	d7, r2, r3
 80016c6:	ed9f 1b3a 	vldr	d1, [pc, #232]	@ 80017b0 <main+0x6d0>
 80016ca:	eeb0 0a47 	vmov.f32	s0, s14
 80016ce:	eef0 0a67 	vmov.f32	s1, s15
 80016d2:	f006 fd21 	bl	8008118 <pow>
 80016d6:	ec53 2b10 	vmov	r2, r3, d0
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff f9ff 	bl	8000ae0 <__aeabi_d2iz>
 80016e2:	4603      	mov	r3, r0
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001810 <main+0x730>)
 80016e8:	801a      	strh	r2, [r3, #0]
	cur_position_pol[1] = atan2(cur_position_rec[0], cur_position_rec[1]) / 3.1415 * 180.0;
 80016ea:	4b48      	ldr	r3, [pc, #288]	@ (800180c <main+0x72c>)
 80016ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f0:	4a46      	ldr	r2, [pc, #280]	@ (800180c <main+0x72c>)
 80016f2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f001 f8e7 	bl	80028cc <_ZSt5atan2IssEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80016fe:	ec51 0b10 	vmov	r0, r1, d0
 8001702:	a331      	add	r3, pc, #196	@ (adr r3, 80017c8 <main+0x6e8>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	f7ff f864 	bl	80007d4 <__aeabi_ddiv>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	4b3e      	ldr	r3, [pc, #248]	@ (8001814 <main+0x734>)
 800171a:	f7fe ff31 	bl	8000580 <__aeabi_dmul>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	f7ff f9db 	bl	8000ae0 <__aeabi_d2iz>
 800172a:	4603      	mov	r3, r0
 800172c:	b21a      	sxth	r2, r3
 800172e:	4b38      	ldr	r3, [pc, #224]	@ (8001810 <main+0x730>)
 8001730:	805a      	strh	r2, [r3, #2]

//calculate movement speed from movement distance

	if((position[2] < cur_movement[2]) && (cur_position_pol[0] > dclr_thr)){speed ++;}
 8001732:	4b28      	ldr	r3, [pc, #160]	@ (80017d4 <main+0x6f4>)
 8001734:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001738:	4b33      	ldr	r3, [pc, #204]	@ (8001808 <main+0x728>)
 800173a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800173e:	429a      	cmp	r2, r3
 8001740:	da0f      	bge.n	8001762 <main+0x682>
 8001742:	4b33      	ldr	r3, [pc, #204]	@ (8001810 <main+0x730>)
 8001744:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001748:	461a      	mov	r2, r3
 800174a:	4b33      	ldr	r3, [pc, #204]	@ (8001818 <main+0x738>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	dd07      	ble.n	8001762 <main+0x682>
 8001752:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8001756:	b29b      	uxth	r3, r3
 8001758:	3301      	adds	r3, #1
 800175a:	b29b      	uxth	r3, r3
 800175c:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8001760:	e061      	b.n	8001826 <main+0x746>
	else if(cur_position_pol[0] <= dclr_thr && cur_position_pol[0] > zero_thr){speed -= 2;}//速度制御
 8001762:	4b2b      	ldr	r3, [pc, #172]	@ (8001810 <main+0x730>)
 8001764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001768:	461a      	mov	r2, r3
 800176a:	4b2b      	ldr	r3, [pc, #172]	@ (8001818 <main+0x738>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	dc0e      	bgt.n	8001790 <main+0x6b0>
 8001772:	4b27      	ldr	r3, [pc, #156]	@ (8001810 <main+0x730>)
 8001774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001778:	461a      	mov	r2, r3
 800177a:	4b28      	ldr	r3, [pc, #160]	@ (800181c <main+0x73c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	dd06      	ble.n	8001790 <main+0x6b0>
 8001782:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8001786:	3b02      	subs	r3, #2
 8001788:	b29b      	uxth	r3, r3
 800178a:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 800178e:	e04a      	b.n	8001826 <main+0x746>
	else if(position[2] >= cur_movement[2]){speed --;}
 8001790:	4b10      	ldr	r3, [pc, #64]	@ (80017d4 <main+0x6f4>)
 8001792:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001796:	4b1c      	ldr	r3, [pc, #112]	@ (8001808 <main+0x728>)
 8001798:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800179c:	429a      	cmp	r2, r3
 800179e:	db3f      	blt.n	8001820 <main+0x740>
 80017a0:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	3b01      	subs	r3, #1
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 80017ae:	e03a      	b.n	8001826 <main+0x746>
 80017b0:	00000000 	.word	0x00000000
 80017b4:	3fe00000 	.word	0x3fe00000
 80017b8:	9999999a 	.word	0x9999999a
 80017bc:	3fe99999 	.word	0x3fe99999
 80017c0:	9999999a 	.word	0x9999999a
 80017c4:	3fc99999 	.word	0x3fc99999
 80017c8:	c083126f 	.word	0xc083126f
 80017cc:	400921ca 	.word	0x400921ca
 80017d0:	2000040c 	.word	0x2000040c
 80017d4:	200003cc 	.word	0x200003cc
 80017d8:	20000404 	.word	0x20000404
 80017dc:	408f4000 	.word	0x408f4000
 80017e0:	200003b0 	.word	0x200003b0
 80017e4:	20000468 	.word	0x20000468
 80017e8:	20000466 	.word	0x20000466
 80017ec:	20000465 	.word	0x20000465
 80017f0:	20000464 	.word	0x20000464
 80017f4:	20000460 	.word	0x20000460
 80017f8:	20000420 	.word	0x20000420
 80017fc:	200001d0 	.word	0x200001d0
 8001800:	2000004c 	.word	0x2000004c
 8001804:	336c689b 	.word	0x336c689b
 8001808:	20000410 	.word	0x20000410
 800180c:	20000418 	.word	0x20000418
 8001810:	2000041c 	.word	0x2000041c
 8001814:	40668000 	.word	0x40668000
 8001818:	20000058 	.word	0x20000058
 800181c:	20000054 	.word	0x20000054
	else{speed = 0;}
 8001820:	2300      	movs	r3, #0
 8001822:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae

	if(cur_position_pol[0] <= dclr_thr && cur_position_pol[0] > zero_thr && speed < 100){speed = 100;}
 8001826:	4ba3      	ldr	r3, [pc, #652]	@ (8001ab4 <main+0x9d4>)
 8001828:	f9b3 3000 	ldrsh.w	r3, [r3]
 800182c:	461a      	mov	r2, r3
 800182e:	4ba2      	ldr	r3, [pc, #648]	@ (8001ab8 <main+0x9d8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	dc0e      	bgt.n	8001854 <main+0x774>
 8001836:	4b9f      	ldr	r3, [pc, #636]	@ (8001ab4 <main+0x9d4>)
 8001838:	f9b3 3000 	ldrsh.w	r3, [r3]
 800183c:	461a      	mov	r2, r3
 800183e:	4b9f      	ldr	r3, [pc, #636]	@ (8001abc <main+0x9dc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	dd06      	ble.n	8001854 <main+0x774>
 8001846:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 800184a:	2b63      	cmp	r3, #99	@ 0x63
 800184c:	dc02      	bgt.n	8001854 <main+0x774>
 800184e:	2364      	movs	r3, #100	@ 0x64
 8001850:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae

	if(speed > cur_movement[2]*3){speed = cur_movement[2]*3;}
 8001854:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8001858:	4b99      	ldr	r3, [pc, #612]	@ (8001ac0 <main+0x9e0>)
 800185a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800185e:	4619      	mov	r1, r3
 8001860:	460b      	mov	r3, r1
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	440b      	add	r3, r1
 8001866:	429a      	cmp	r2, r3
 8001868:	dd0a      	ble.n	8001880 <main+0x7a0>
 800186a:	4b95      	ldr	r3, [pc, #596]	@ (8001ac0 <main+0x9e0>)
 800186c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001870:	b29b      	uxth	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	0052      	lsls	r2, r2, #1
 8001876:	4413      	add	r3, r2
 8001878:	b29b      	uxth	r3, r3
 800187a:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 800187e:	e006      	b.n	800188e <main+0x7ae>
	else if(speed < 0){speed = 0;}
 8001880:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8001884:	2b00      	cmp	r3, #0
 8001886:	da02      	bge.n	800188e <main+0x7ae>
 8001888:	2300      	movs	r3, #0
 800188a:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae

	speed = ((speed*8) + (p_speed*2) + 10-1)/ 10;
 800188e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8001892:	009a      	lsls	r2, r3, #2
 8001894:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 8001898:	4413      	add	r3, r2
 800189a:	3305      	adds	r3, #5
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	3b01      	subs	r3, #1
 80018a0:	4a88      	ldr	r2, [pc, #544]	@ (8001ac4 <main+0x9e4>)
 80018a2:	fb82 1203 	smull	r1, r2, r2, r3
 80018a6:	1092      	asrs	r2, r2, #2
 80018a8:	17db      	asrs	r3, r3, #31
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
	p_speed = speed;
 80018b0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80018b4:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac

	degree = cur_position_pol[1];
 80018b8:	4b7e      	ldr	r3, [pc, #504]	@ (8001ab4 <main+0x9d4>)
 80018ba:	885b      	ldrh	r3, [r3, #2]
 80018bc:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92


//calculate motor speed from movement speed
	speed_set(rotate, speed, degree, MTRS, 0.7);
 80018c0:	4b81      	ldr	r3, [pc, #516]	@ (8001ac8 <main+0x9e8>)
 80018c2:	edd3 7a00 	vldr	s15, [r3]
 80018c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ca:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	@ 0xae
 80018ce:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	@ 0x92
 80018d2:	ed9f 0a7e 	vldr	s0, [pc, #504]	@ 8001acc <main+0x9ec>
 80018d6:	4b7e      	ldr	r3, [pc, #504]	@ (8001ad0 <main+0x9f0>)
 80018d8:	ee17 0a90 	vmov	r0, s15
 80018dc:	f000 fd48 	bl	8002370 <_Z9speed_setiiiPsf>

//calculate sending array from motor speed
	set_array(MTRS, send_array);
 80018e0:	497c      	ldr	r1, [pc, #496]	@ (8001ad4 <main+0x9f4>)
 80018e2:	487b      	ldr	r0, [pc, #492]	@ (8001ad0 <main+0x9f0>)
 80018e4:	f000 fe4e 	bl	8002584 <_Z9set_arrayPsPh>

//stop_flag
	if(HAL_GPIO_ReadPin(STRTSW_GPIO_Port, STRTSW_Pin) != 1){stop_flag = 0;}
 80018e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018ec:	487a      	ldr	r0, [pc, #488]	@ (8001ad8 <main+0x9f8>)
 80018ee:	f002 fe89 	bl	8004604 <HAL_GPIO_ReadPin>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	bf14      	ite	ne
 80018f8:	2301      	movne	r3, #1
 80018fa:	2300      	moveq	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <main+0x82a>
 8001902:	4b76      	ldr	r3, [pc, #472]	@ (8001adc <main+0x9fc>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
 8001908:	e013      	b.n	8001932 <main+0x852>
//	else if(stop_counter > 10000){stop_flag = 0;}
//	else if(error_counter > 10000){stop_flag = 0;}
	else if(performance.get_shutdown() != 1){stop_flag = 0;}
 800190a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800190e:	4618      	mov	r0, r3
 8001910:	f001 f85e 	bl	80029d0 <_ZN11PERFORMANCE12get_shutdownEv>
 8001914:	4603      	mov	r3, r0
 8001916:	2b01      	cmp	r3, #1
 8001918:	bf14      	ite	ne
 800191a:	2301      	movne	r3, #1
 800191c:	2300      	moveq	r3, #0
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <main+0x84c>
 8001924:	4b6d      	ldr	r3, [pc, #436]	@ (8001adc <main+0x9fc>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	e002      	b.n	8001932 <main+0x852>
	else{stop_flag = 1;}
 800192c:	4b6b      	ldr	r3, [pc, #428]	@ (8001adc <main+0x9fc>)
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]

//send to motor
	if(stop_flag == 1){
 8001932:	4b6a      	ldr	r3, [pc, #424]	@ (8001adc <main+0x9fc>)
 8001934:	f993 3000 	ldrsb.w	r3, [r3]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d106      	bne.n	800194a <main+0x86a>
	  HAL_UART_Transmit(&huart6, send_array, 12, 1);
 800193c:	2301      	movs	r3, #1
 800193e:	220c      	movs	r2, #12
 8001940:	4964      	ldr	r1, [pc, #400]	@ (8001ad4 <main+0x9f4>)
 8001942:	4867      	ldr	r0, [pc, #412]	@ (8001ae0 <main+0xa00>)
 8001944:	f005 fd84 	bl	8007450 <HAL_UART_Transmit>
 8001948:	e030      	b.n	80019ac <main+0x8cc>
	}else{
		for(int i=0; i<4; i++){
 800194a:	2300      	movs	r3, #0
 800194c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001950:	e022      	b.n	8001998 <main+0x8b8>
		  send_array[3*i] = 250 + i;
 8001952:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001956:	b2d9      	uxtb	r1, r3
 8001958:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800195c:	4613      	mov	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4413      	add	r3, r2
 8001962:	1f8a      	subs	r2, r1, #6
 8001964:	b2d1      	uxtb	r1, r2
 8001966:	4a5b      	ldr	r2, [pc, #364]	@ (8001ad4 <main+0x9f4>)
 8001968:	54d1      	strb	r1, [r2, r3]
		  send_array[3*i + 1] = 210;
 800196a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800196e:	4613      	mov	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4413      	add	r3, r2
 8001974:	3301      	adds	r3, #1
 8001976:	4a57      	ldr	r2, [pc, #348]	@ (8001ad4 <main+0x9f4>)
 8001978:	21d2      	movs	r1, #210	@ 0xd2
 800197a:	54d1      	strb	r1, [r2, r3]
		  send_array[3*i + 2] = 210;
 800197c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001980:	4613      	mov	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	3302      	adds	r3, #2
 8001988:	4a52      	ldr	r2, [pc, #328]	@ (8001ad4 <main+0x9f4>)
 800198a:	21d2      	movs	r1, #210	@ 0xd2
 800198c:	54d1      	strb	r1, [r2, r3]
		for(int i=0; i<4; i++){
 800198e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001992:	3301      	adds	r3, #1
 8001994:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001998:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800199c:	2b03      	cmp	r3, #3
 800199e:	ddd8      	ble.n	8001952 <main+0x872>
		}
		HAL_UART_Transmit(&huart6, send_array, 12, 1);
 80019a0:	2301      	movs	r3, #1
 80019a2:	220c      	movs	r2, #12
 80019a4:	494b      	ldr	r1, [pc, #300]	@ (8001ad4 <main+0x9f4>)
 80019a6:	484e      	ldr	r0, [pc, #312]	@ (8001ae0 <main+0xa00>)
 80019a8:	f005 fd52 	bl	8007450 <HAL_UART_Transmit>
	}

//send to panel
//	uint8_t display_send_array[31];
	for(int i=0; i<31; i++){
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80019b2:	e010      	b.n	80019d6 <main+0x8f6>
		display_send_array[i] = display[i];
 80019b4:	4a4b      	ldr	r2, [pc, #300]	@ (8001ae4 <main+0xa04>)
 80019b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80019ba:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80019be:	b2d9      	uxtb	r1, r3
 80019c0:	4a49      	ldr	r2, [pc, #292]	@ (8001ae8 <main+0xa08>)
 80019c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80019c6:	4413      	add	r3, r2
 80019c8:	460a      	mov	r2, r1
 80019ca:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<31; i++){
 80019cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80019d0:	3301      	adds	r3, #1
 80019d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80019d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80019da:	2b1e      	cmp	r3, #30
 80019dc:	ddea      	ble.n	80019b4 <main+0x8d4>
	}

	if(performance.get_fixing() == 1){
 80019de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019e2:	4618      	mov	r0, r3
 80019e4:	f001 f801 	bl	80029ea <_ZN11PERFORMANCE10get_fixingEv>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	bf0c      	ite	eq
 80019ee:	2301      	moveq	r3, #1
 80019f0:	2300      	movne	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 8110 	beq.w	8001c1a <main+0xb3a>
		int16_t circle_fixing[8];
		int16_t fish_fixing[8];
		circle_fixing[0] = circle_position[0] - position[0];
 80019fa:	4b3c      	ldr	r3, [pc, #240]	@ (8001aec <main+0xa0c>)
 80019fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	4b3b      	ldr	r3, [pc, #236]	@ (8001af0 <main+0xa10>)
 8001a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	b21b      	sxth	r3, r3
 8001a10:	82bb      	strh	r3, [r7, #20]
		circle_fixing[0] = circle_fixing[0] / 10;
 8001a12:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a16:	4a2b      	ldr	r2, [pc, #172]	@ (8001ac4 <main+0x9e4>)
 8001a18:	fb82 1203 	smull	r1, r2, r2, r3
 8001a1c:	1092      	asrs	r2, r2, #2
 8001a1e:	17db      	asrs	r3, r3, #31
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	b21b      	sxth	r3, r3
 8001a24:	82bb      	strh	r3, [r7, #20]
		circle_fixing[0] = 24 + circle_fixing[0];
 8001a26:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	3318      	adds	r3, #24
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	82bb      	strh	r3, [r7, #20]
		display_send_array[1] = circle_fixing[0]+100;
 8001a34:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	3364      	adds	r3, #100	@ 0x64
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae8 <main+0xa08>)
 8001a40:	705a      	strb	r2, [r3, #1]

		display_send_array[2] = circle_position[1] / 10 + 100;
 8001a42:	4b2a      	ldr	r3, [pc, #168]	@ (8001aec <main+0xa0c>)
 8001a44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a48:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac4 <main+0x9e4>)
 8001a4a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a4e:	1092      	asrs	r2, r2, #2
 8001a50:	17db      	asrs	r3, r3, #31
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	3364      	adds	r3, #100	@ 0x64
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	4b22      	ldr	r3, [pc, #136]	@ (8001ae8 <main+0xa08>)
 8001a5e:	709a      	strb	r2, [r3, #2]

		circle_fixing[1] = circle_position[2] - position[1] * circle_position[2] / shrink_const;
 8001a60:	4b22      	ldr	r3, [pc, #136]	@ (8001aec <main+0xa0c>)
 8001a62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	4b21      	ldr	r3, [pc, #132]	@ (8001af0 <main+0xa10>)
 8001a6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4b1e      	ldr	r3, [pc, #120]	@ (8001aec <main+0xa0c>)
 8001a72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a76:	fb01 f303 	mul.w	r3, r1, r3
 8001a7a:	491e      	ldr	r1, [pc, #120]	@ (8001af4 <main+0xa14>)
 8001a7c:	8809      	ldrh	r1, [r1, #0]
 8001a7e:	fb93 f3f1 	sdiv	r3, r3, r1
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	b21b      	sxth	r3, r3
 8001a8a:	82fb      	strh	r3, [r7, #22]
		circle_fixing[1] = circle_fixing[1] / 10;
 8001a8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a90:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac4 <main+0x9e4>)
 8001a92:	fb82 1203 	smull	r1, r2, r2, r3
 8001a96:	1092      	asrs	r2, r2, #2
 8001a98:	17db      	asrs	r3, r3, #31
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	82fb      	strh	r3, [r7, #22]
		display_send_array[3] = circle_fixing[1];
 8001aa0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <main+0xa08>)
 8001aa8:	70da      	strb	r2, [r3, #3]

		for(int i=0; i<6; i++){
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001ab0:	e0ad      	b.n	8001c0e <main+0xb2e>
 8001ab2:	bf00      	nop
 8001ab4:	2000041c 	.word	0x2000041c
 8001ab8:	20000058 	.word	0x20000058
 8001abc:	20000054 	.word	0x20000054
 8001ac0:	20000410 	.word	0x20000410
 8001ac4:	66666667 	.word	0x66666667
 8001ac8:	200003d4 	.word	0x200003d4
 8001acc:	3f333333 	.word	0x3f333333
 8001ad0:	200003bc 	.word	0x200003bc
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	40020400 	.word	0x40020400
 8001adc:	200004b0 	.word	0x200004b0
 8001ae0:	200002a8 	.word	0x200002a8
 8001ae4:	2000000c 	.word	0x2000000c
 8001ae8:	200004b4 	.word	0x200004b4
 8001aec:	200003d8 	.word	0x200003d8
 8001af0:	200003cc 	.word	0x200003cc
 8001af4:	2000005c 	.word	0x2000005c
			fish_fixing[i+2] = fish_position[3*i+1] - position[0];
 8001af8:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001afc:	4613      	mov	r3, r2
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	4413      	add	r3, r2
 8001b02:	3301      	adds	r3, #1
 8001b04:	4a8a      	ldr	r2, [pc, #552]	@ (8001d30 <main+0xc50>)
 8001b06:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	4b89      	ldr	r3, [pc, #548]	@ (8001d34 <main+0xc54>)
 8001b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b1c:	3302      	adds	r3, #2
 8001b1e:	b212      	sxth	r2, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	33c0      	adds	r3, #192	@ 0xc0
 8001b24:	443b      	add	r3, r7
 8001b26:	f823 2cbc 	strh.w	r2, [r3, #-188]
			fish_fixing[i+2] = fish_fixing[i+2] / 10;
 8001b2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b2e:	3302      	adds	r3, #2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	33c0      	adds	r3, #192	@ 0xc0
 8001b34:	443b      	add	r3, r7
 8001b36:	f933 3cbc 	ldrsh.w	r3, [r3, #-188]
 8001b3a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001b3e:	3202      	adds	r2, #2
 8001b40:	497d      	ldr	r1, [pc, #500]	@ (8001d38 <main+0xc58>)
 8001b42:	fb81 0103 	smull	r0, r1, r1, r3
 8001b46:	1089      	asrs	r1, r1, #2
 8001b48:	17db      	asrs	r3, r3, #31
 8001b4a:	1acb      	subs	r3, r1, r3
 8001b4c:	b219      	sxth	r1, r3
 8001b4e:	0053      	lsls	r3, r2, #1
 8001b50:	33c0      	adds	r3, #192	@ 0xc0
 8001b52:	443b      	add	r3, r7
 8001b54:	460a      	mov	r2, r1
 8001b56:	f823 2cbc 	strh.w	r2, [r3, #-188]
			fish_fixing[i+2] = 24 + fish_fixing[i+2];
 8001b5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b5e:	3302      	adds	r3, #2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	33c0      	adds	r3, #192	@ 0xc0
 8001b64:	443b      	add	r3, r7
 8001b66:	f933 3cbc 	ldrsh.w	r3, [r3, #-188]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	3318      	adds	r3, #24
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b74:	3302      	adds	r3, #2
 8001b76:	b212      	sxth	r2, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	33c0      	adds	r3, #192	@ 0xc0
 8001b7c:	443b      	add	r3, r7
 8001b7e:	f823 2cbc 	strh.w	r2, [r3, #-188]

			display_send_array[3*i+13] = fish_position[3*i];
 8001b82:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001b86:	4613      	mov	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a68      	ldr	r2, [pc, #416]	@ (8001d30 <main+0xc50>)
 8001b8e:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8001b92:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	330d      	adds	r3, #13
 8001b9e:	b2c9      	uxtb	r1, r1
 8001ba0:	4a66      	ldr	r2, [pc, #408]	@ (8001d3c <main+0xc5c>)
 8001ba2:	54d1      	strb	r1, [r2, r3]
			display_send_array[3*i+14] = fish_fixing[i+2]+100;
 8001ba4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ba8:	3302      	adds	r3, #2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	33c0      	adds	r3, #192	@ 0xc0
 8001bae:	443b      	add	r3, r7
 8001bb0:	f933 3cbc 	ldrsh.w	r3, [r3, #-188]
 8001bb4:	b2d9      	uxtb	r1, r3
 8001bb6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001bba:	4613      	mov	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	330e      	adds	r3, #14
 8001bc2:	f101 0264 	add.w	r2, r1, #100	@ 0x64
 8001bc6:	b2d1      	uxtb	r1, r2
 8001bc8:	4a5c      	ldr	r2, [pc, #368]	@ (8001d3c <main+0xc5c>)
 8001bca:	54d1      	strb	r1, [r2, r3]
			display_send_array[3*i+15] = fish_position[3*i+2] / 10 + 100;
 8001bcc:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	4a55      	ldr	r2, [pc, #340]	@ (8001d30 <main+0xc50>)
 8001bda:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001bde:	4a56      	ldr	r2, [pc, #344]	@ (8001d38 <main+0xc58>)
 8001be0:	fb82 1203 	smull	r1, r2, r2, r3
 8001be4:	1092      	asrs	r2, r2, #2
 8001be6:	17db      	asrs	r3, r3, #31
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	b21b      	sxth	r3, r3
 8001bec:	b2d9      	uxtb	r1, r3
 8001bee:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	330f      	adds	r3, #15
 8001bfa:	f101 0264 	add.w	r2, r1, #100	@ 0x64
 8001bfe:	b2d1      	uxtb	r1, r2
 8001c00:	4a4e      	ldr	r2, [pc, #312]	@ (8001d3c <main+0xc5c>)
 8001c02:	54d1      	strb	r1, [r2, r3]
		for(int i=0; i<6; i++){
 8001c04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001c0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	f77f af70 	ble.w	8001af8 <main+0xa18>
 8001c18:	e053      	b.n	8001cc2 <main+0xbe2>
		}
	}else{
		display_send_array[1] = display[1] + 100;
 8001c1a:	4b49      	ldr	r3, [pc, #292]	@ (8001d40 <main+0xc60>)
 8001c1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	3364      	adds	r3, #100	@ 0x64
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4b45      	ldr	r3, [pc, #276]	@ (8001d3c <main+0xc5c>)
 8001c28:	705a      	strb	r2, [r3, #1]
		display_send_array[2] = display[2] + 100;
 8001c2a:	4b45      	ldr	r3, [pc, #276]	@ (8001d40 <main+0xc60>)
 8001c2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	3364      	adds	r3, #100	@ 0x64
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	4b41      	ldr	r3, [pc, #260]	@ (8001d3c <main+0xc5c>)
 8001c38:	709a      	strb	r2, [r3, #2]

		for(int i=0; i<6; i++){
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001c40:	e03b      	b.n	8001cba <main+0xbda>
			display_send_array[3*i] = fish_position[3*i+2];;
 8001c42:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001c46:	4613      	mov	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	4a38      	ldr	r2, [pc, #224]	@ (8001d30 <main+0xc50>)
 8001c50:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8001c54:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001c58:	4613      	mov	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4413      	add	r3, r2
 8001c5e:	b2c9      	uxtb	r1, r1
 8001c60:	4a36      	ldr	r2, [pc, #216]	@ (8001d3c <main+0xc5c>)
 8001c62:	54d1      	strb	r1, [r2, r3]
			display_send_array[3*i+1] = display[2*i+1] + 100;
 8001c64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	4a34      	ldr	r2, [pc, #208]	@ (8001d40 <main+0xc60>)
 8001c6e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001c72:	b2d9      	uxtb	r1, r3
 8001c74:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001c78:	4613      	mov	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3301      	adds	r3, #1
 8001c80:	f101 0264 	add.w	r2, r1, #100	@ 0x64
 8001c84:	b2d1      	uxtb	r1, r2
 8001c86:	4a2d      	ldr	r2, [pc, #180]	@ (8001d3c <main+0xc5c>)
 8001c88:	54d1      	strb	r1, [r2, r3]
			display_send_array[3*i+2] = display[2*i+2] + 100;
 8001c8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c8e:	3301      	adds	r3, #1
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4a2b      	ldr	r2, [pc, #172]	@ (8001d40 <main+0xc60>)
 8001c94:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001c98:	b2d9      	uxtb	r1, r3
 8001c9a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	f101 0264 	add.w	r2, r1, #100	@ 0x64
 8001caa:	b2d1      	uxtb	r1, r2
 8001cac:	4a23      	ldr	r2, [pc, #140]	@ (8001d3c <main+0xc5c>)
 8001cae:	54d1      	strb	r1, [r2, r3]
		for(int i=0; i<6; i++){
 8001cb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001cba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001cbe:	2b05      	cmp	r3, #5
 8001cc0:	ddbf      	ble.n	8001c42 <main+0xb62>
		}
	}

	for(int i=0; i<30; i++){
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001cc8:	e014      	b.n	8001cf4 <main+0xc14>
		if(display_send_array[i+1] == 250){display_send_array[i+1]++;}
 8001cca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cce:	3301      	adds	r3, #1
 8001cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8001d3c <main+0xc5c>)
 8001cd2:	5cd3      	ldrb	r3, [r2, r3]
 8001cd4:	2bfa      	cmp	r3, #250	@ 0xfa
 8001cd6:	d108      	bne.n	8001cea <main+0xc0a>
 8001cd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cdc:	3301      	adds	r3, #1
 8001cde:	4a17      	ldr	r2, [pc, #92]	@ (8001d3c <main+0xc5c>)
 8001ce0:	5cd2      	ldrb	r2, [r2, r3]
 8001ce2:	3201      	adds	r2, #1
 8001ce4:	b2d1      	uxtb	r1, r2
 8001ce6:	4a15      	ldr	r2, [pc, #84]	@ (8001d3c <main+0xc5c>)
 8001ce8:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<30; i++){
 8001cea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001cf4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cf8:	2b1d      	cmp	r3, #29
 8001cfa:	dde6      	ble.n	8001cca <main+0xbea>
		else{}
	}
	HAL_UART_Transmit(&huart3, display_send_array, 31, 10);
 8001cfc:	230a      	movs	r3, #10
 8001cfe:	221f      	movs	r2, #31
 8001d00:	490e      	ldr	r1, [pc, #56]	@ (8001d3c <main+0xc5c>)
 8001d02:	4810      	ldr	r0, [pc, #64]	@ (8001d44 <main+0xc64>)
 8001d04:	f005 fba4 	bl	8007450 <HAL_UART_Transmit>
//		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 25);
//	}


//Lチカ
	if(m_counter - Ltika_pcounter > 1000){
 8001d08:	4b0f      	ldr	r3, [pc, #60]	@ (8001d48 <main+0xc68>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d16:	f67f aaf3 	bls.w	8001300 <main+0x220>
	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8001d1a:	2104      	movs	r1, #4
 8001d1c:	480b      	ldr	r0, [pc, #44]	@ (8001d4c <main+0xc6c>)
 8001d1e:	f002 fca2 	bl	8004666 <HAL_GPIO_TogglePin>
	Ltika_pcounter = m_counter;
 8001d22:	4b09      	ldr	r3, [pc, #36]	@ (8001d48 <main+0xc68>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001d2a:	f7ff bae9 	b.w	8001300 <main+0x220>
 8001d2e:	bf00      	nop
 8001d30:	200003e0 	.word	0x200003e0
 8001d34:	200003cc 	.word	0x200003cc
 8001d38:	66666667 	.word	0x66666667
 8001d3c:	200004b4 	.word	0x200004b4
 8001d40:	2000000c 	.word	0x2000000c
 8001d44:	20000260 	.word	0x20000260
 8001d48:	200003b0 	.word	0x200003b0
 8001d4c:	40020400 	.word	0x40020400

08001d50 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b094      	sub	sp, #80	@ 0x50
 8001d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d56:	f107 031c 	add.w	r3, r7, #28
 8001d5a:	2234      	movs	r2, #52	@ 0x34
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f008 fb42 	bl	800a3e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d64:	f107 0308 	add.w	r3, r7, #8
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d74:	2300      	movs	r3, #0
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	4b34      	ldr	r3, [pc, #208]	@ (8001e4c <_Z18SystemClock_Configv+0xfc>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7c:	4a33      	ldr	r2, [pc, #204]	@ (8001e4c <_Z18SystemClock_Configv+0xfc>)
 8001d7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d82:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d84:	4b31      	ldr	r3, [pc, #196]	@ (8001e4c <_Z18SystemClock_Configv+0xfc>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d90:	2300      	movs	r3, #0
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	4b2e      	ldr	r3, [pc, #184]	@ (8001e50 <_Z18SystemClock_Configv+0x100>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a2d      	ldr	r2, [pc, #180]	@ (8001e50 <_Z18SystemClock_Configv+0x100>)
 8001d9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e50 <_Z18SystemClock_Configv+0x100>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dac:	2302      	movs	r3, #2
 8001dae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001db0:	2301      	movs	r3, #1
 8001db2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001db4:	2310      	movs	r3, #16
 8001db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001db8:	2302      	movs	r3, #2
 8001dba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001dc0:	2310      	movs	r3, #16
 8001dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001dc4:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8001dc8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd6:	f107 031c 	add.w	r3, r7, #28
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f004 f81a 	bl	8005e14 <HAL_RCC_OscConfig>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	bf14      	ite	ne
 8001de6:	2301      	movne	r3, #1
 8001de8:	2300      	moveq	r3, #0
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8001df0:	f000 fd43 	bl	800287a <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001df4:	f003 fc76 	bl	80056e4 <HAL_PWREx_EnableOverDrive>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	bf14      	ite	ne
 8001dfe:	2301      	movne	r3, #1
 8001e00:	2300      	moveq	r3, #0
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8001e08:	f000 fd37 	bl	800287a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e0c:	230f      	movs	r3, #15
 8001e0e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e10:	2302      	movs	r3, #2
 8001e12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e18:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001e1e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e22:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e24:	f107 0308 	add.w	r3, r7, #8
 8001e28:	2105      	movs	r1, #5
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 fcaa 	bl	8005784 <HAL_RCC_ClockConfig>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	bf14      	ite	ne
 8001e36:	2301      	movne	r3, #1
 8001e38:	2300      	moveq	r3, #0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <_Z18SystemClock_Configv+0xf4>
  {
    Error_Handler();
 8001e40:	f000 fd1b 	bl	800287a <Error_Handler>
  }
}
 8001e44:	bf00      	nop
 8001e46:	3750      	adds	r7, #80	@ 0x50
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40007000 	.word	0x40007000

08001e54 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e58:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e5a:	4a16      	ldr	r2, [pc, #88]	@ (8001eb4 <_ZL12MX_I2C1_Initv+0x60>)
 8001e5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e5e:	4b14      	ldr	r3, [pc, #80]	@ (8001eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e60:	4a15      	ldr	r2, [pc, #84]	@ (8001eb8 <_ZL12MX_I2C1_Initv+0x64>)
 8001e62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e64:	4b12      	ldr	r3, [pc, #72]	@ (8001eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e6a:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e70:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e78:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e84:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e8a:	4b09      	ldr	r3, [pc, #36]	@ (8001eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e90:	4807      	ldr	r0, [pc, #28]	@ (8001eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e92:	f002 fc03 	bl	800469c <HAL_I2C_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf14      	ite	ne
 8001e9c:	2301      	movne	r3, #1
 8001e9e:	2300      	moveq	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001ea6:	f000 fce8 	bl	800287a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200000ec 	.word	0x200000ec
 8001eb4:	40005400 	.word	0x40005400
 8001eb8:	000186a0 	.word	0x000186a0

08001ebc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec2:	f107 0308 	add.w	r3, r7, #8
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed0:	463b      	mov	r3, r7
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ed8:	4b25      	ldr	r3, [pc, #148]	@ (8001f70 <_ZL12MX_TIM2_Initv+0xb4>)
 8001eda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ede:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 89;
 8001ee0:	4b23      	ldr	r3, [pc, #140]	@ (8001f70 <_ZL12MX_TIM2_Initv+0xb4>)
 8001ee2:	2259      	movs	r2, #89	@ 0x59
 8001ee4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee6:	4b22      	ldr	r3, [pc, #136]	@ (8001f70 <_ZL12MX_TIM2_Initv+0xb4>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001eec:	4b20      	ldr	r3, [pc, #128]	@ (8001f70 <_ZL12MX_TIM2_Initv+0xb4>)
 8001eee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ef2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f70 <_ZL12MX_TIM2_Initv+0xb4>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efa:	4b1d      	ldr	r3, [pc, #116]	@ (8001f70 <_ZL12MX_TIM2_Initv+0xb4>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f00:	481b      	ldr	r0, [pc, #108]	@ (8001f70 <_ZL12MX_TIM2_Initv+0xb4>)
 8001f02:	f004 fa25 	bl	8006350 <HAL_TIM_Base_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	bf14      	ite	ne
 8001f0c:	2301      	movne	r3, #1
 8001f0e:	2300      	moveq	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001f16:	f000 fcb0 	bl	800287a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f20:	f107 0308 	add.w	r3, r7, #8
 8001f24:	4619      	mov	r1, r3
 8001f26:	4812      	ldr	r0, [pc, #72]	@ (8001f70 <_ZL12MX_TIM2_Initv+0xb4>)
 8001f28:	f004 fda6 	bl	8006a78 <HAL_TIM_ConfigClockSource>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	bf14      	ite	ne
 8001f32:	2301      	movne	r3, #1
 8001f34:	2300      	moveq	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8001f3c:	f000 fc9d 	bl	800287a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f40:	2300      	movs	r3, #0
 8001f42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f48:	463b      	mov	r3, r7
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4808      	ldr	r0, [pc, #32]	@ (8001f70 <_ZL12MX_TIM2_Initv+0xb4>)
 8001f4e:	f005 f99f 	bl	8007290 <HAL_TIMEx_MasterConfigSynchronization>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	bf14      	ite	ne
 8001f58:	2301      	movne	r3, #1
 8001f5a:	2300      	moveq	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8001f62:	f000 fc8a 	bl	800287a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f66:	bf00      	nop
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000140 	.word	0x20000140

08001f74 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08e      	sub	sp, #56	@ 0x38
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f88:	f107 0320 	add.w	r3, r7, #32
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
 8001fa0:	615a      	str	r2, [r3, #20]
 8001fa2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fa4:	4b39      	ldr	r3, [pc, #228]	@ (800208c <_ZL12MX_TIM4_Initv+0x118>)
 8001fa6:	4a3a      	ldr	r2, [pc, #232]	@ (8002090 <_ZL12MX_TIM4_Initv+0x11c>)
 8001fa8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1800-1;
 8001faa:	4b38      	ldr	r3, [pc, #224]	@ (800208c <_ZL12MX_TIM4_Initv+0x118>)
 8001fac:	f240 7207 	movw	r2, #1799	@ 0x707
 8001fb0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb2:	4b36      	ldr	r3, [pc, #216]	@ (800208c <_ZL12MX_TIM4_Initv+0x118>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001fb8:	4b34      	ldr	r3, [pc, #208]	@ (800208c <_ZL12MX_TIM4_Initv+0x118>)
 8001fba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fbe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc0:	4b32      	ldr	r3, [pc, #200]	@ (800208c <_ZL12MX_TIM4_Initv+0x118>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc6:	4b31      	ldr	r3, [pc, #196]	@ (800208c <_ZL12MX_TIM4_Initv+0x118>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fcc:	482f      	ldr	r0, [pc, #188]	@ (800208c <_ZL12MX_TIM4_Initv+0x118>)
 8001fce:	f004 f9bf 	bl	8006350 <HAL_TIM_Base_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	bf14      	ite	ne
 8001fd8:	2301      	movne	r3, #1
 8001fda:	2300      	moveq	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 8001fe2:	f000 fc4a 	bl	800287a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fea:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001fec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4826      	ldr	r0, [pc, #152]	@ (800208c <_ZL12MX_TIM4_Initv+0x118>)
 8001ff4:	f004 fd40 	bl	8006a78 <HAL_TIM_ConfigClockSource>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	bf14      	ite	ne
 8001ffe:	2301      	movne	r3, #1
 8002000:	2300      	moveq	r3, #0
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 8002008:	f000 fc37 	bl	800287a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800200c:	481f      	ldr	r0, [pc, #124]	@ (800208c <_ZL12MX_TIM4_Initv+0x118>)
 800200e:	f004 fa5f 	bl	80064d0 <HAL_TIM_PWM_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	bf14      	ite	ne
 8002018:	2301      	movne	r3, #1
 800201a:	2300      	moveq	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 8002022:	f000 fc2a 	bl	800287a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800202e:	f107 0320 	add.w	r3, r7, #32
 8002032:	4619      	mov	r1, r3
 8002034:	4815      	ldr	r0, [pc, #84]	@ (800208c <_ZL12MX_TIM4_Initv+0x118>)
 8002036:	f005 f92b 	bl	8007290 <HAL_TIMEx_MasterConfigSynchronization>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	bf14      	ite	ne
 8002040:	2301      	movne	r3, #1
 8002042:	2300      	moveq	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 800204a:	f000 fc16 	bl	800287a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800204e:	2360      	movs	r3, #96	@ 0x60
 8002050:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	2200      	movs	r2, #0
 8002062:	4619      	mov	r1, r3
 8002064:	4809      	ldr	r0, [pc, #36]	@ (800208c <_ZL12MX_TIM4_Initv+0x118>)
 8002066:	f004 fc45 	bl	80068f4 <HAL_TIM_PWM_ConfigChannel>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf14      	ite	ne
 8002070:	2301      	movne	r3, #1
 8002072:	2300      	moveq	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <_ZL12MX_TIM4_Initv+0x10a>
  {
    Error_Handler();
 800207a:	f000 fbfe 	bl	800287a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800207e:	4803      	ldr	r0, [pc, #12]	@ (800208c <_ZL12MX_TIM4_Initv+0x118>)
 8002080:	f001 f9be 	bl	8003400 <HAL_TIM_MspPostInit>

}
 8002084:	bf00      	nop
 8002086:	3738      	adds	r7, #56	@ 0x38
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000188 	.word	0x20000188
 8002090:	40000800 	.word	0x40000800

08002094 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002098:	4b13      	ldr	r3, [pc, #76]	@ (80020e8 <_ZL13MX_UART5_Initv+0x54>)
 800209a:	4a14      	ldr	r2, [pc, #80]	@ (80020ec <_ZL13MX_UART5_Initv+0x58>)
 800209c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800209e:	4b12      	ldr	r3, [pc, #72]	@ (80020e8 <_ZL13MX_UART5_Initv+0x54>)
 80020a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020a4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80020a6:	4b10      	ldr	r3, [pc, #64]	@ (80020e8 <_ZL13MX_UART5_Initv+0x54>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80020ac:	4b0e      	ldr	r3, [pc, #56]	@ (80020e8 <_ZL13MX_UART5_Initv+0x54>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80020b2:	4b0d      	ldr	r3, [pc, #52]	@ (80020e8 <_ZL13MX_UART5_Initv+0x54>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80020b8:	4b0b      	ldr	r3, [pc, #44]	@ (80020e8 <_ZL13MX_UART5_Initv+0x54>)
 80020ba:	220c      	movs	r2, #12
 80020bc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020be:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <_ZL13MX_UART5_Initv+0x54>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c4:	4b08      	ldr	r3, [pc, #32]	@ (80020e8 <_ZL13MX_UART5_Initv+0x54>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80020ca:	4807      	ldr	r0, [pc, #28]	@ (80020e8 <_ZL13MX_UART5_Initv+0x54>)
 80020cc:	f005 f970 	bl	80073b0 <HAL_UART_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	bf14      	ite	ne
 80020d6:	2301      	movne	r3, #1
 80020d8:	2300      	moveq	r3, #0
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <_ZL13MX_UART5_Initv+0x50>
  {
    Error_Handler();
 80020e0:	f000 fbcb 	bl	800287a <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	200001d0 	.word	0x200001d0
 80020ec:	40005000 	.word	0x40005000

080020f0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020f4:	4b13      	ldr	r3, [pc, #76]	@ (8002144 <_ZL19MX_USART2_UART_Initv+0x54>)
 80020f6:	4a14      	ldr	r2, [pc, #80]	@ (8002148 <_ZL19MX_USART2_UART_Initv+0x58>)
 80020f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020fa:	4b12      	ldr	r3, [pc, #72]	@ (8002144 <_ZL19MX_USART2_UART_Initv+0x54>)
 80020fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002100:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002102:	4b10      	ldr	r3, [pc, #64]	@ (8002144 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002108:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <_ZL19MX_USART2_UART_Initv+0x54>)
 800210a:	2200      	movs	r2, #0
 800210c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800210e:	4b0d      	ldr	r3, [pc, #52]	@ (8002144 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002114:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002116:	220c      	movs	r2, #12
 8002118:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800211a:	4b0a      	ldr	r3, [pc, #40]	@ (8002144 <_ZL19MX_USART2_UART_Initv+0x54>)
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002120:	4b08      	ldr	r3, [pc, #32]	@ (8002144 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002122:	2200      	movs	r2, #0
 8002124:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002126:	4807      	ldr	r0, [pc, #28]	@ (8002144 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002128:	f005 f942 	bl	80073b0 <HAL_UART_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	bf14      	ite	ne
 8002132:	2301      	movne	r3, #1
 8002134:	2300      	moveq	r3, #0
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800213c:	f000 fb9d 	bl	800287a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000218 	.word	0x20000218
 8002148:	40004400 	.word	0x40004400

0800214c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002150:	4b13      	ldr	r3, [pc, #76]	@ (80021a0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002152:	4a14      	ldr	r2, [pc, #80]	@ (80021a4 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002154:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002156:	4b12      	ldr	r3, [pc, #72]	@ (80021a0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002158:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800215c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800215e:	4b10      	ldr	r3, [pc, #64]	@ (80021a0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002164:	4b0e      	ldr	r3, [pc, #56]	@ (80021a0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800216a:	4b0d      	ldr	r3, [pc, #52]	@ (80021a0 <_ZL19MX_USART3_UART_Initv+0x54>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002170:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002172:	220c      	movs	r2, #12
 8002174:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002176:	4b0a      	ldr	r3, [pc, #40]	@ (80021a0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800217c:	4b08      	ldr	r3, [pc, #32]	@ (80021a0 <_ZL19MX_USART3_UART_Initv+0x54>)
 800217e:	2200      	movs	r2, #0
 8002180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002182:	4807      	ldr	r0, [pc, #28]	@ (80021a0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002184:	f005 f914 	bl	80073b0 <HAL_UART_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	bf14      	ite	ne
 800218e:	2301      	movne	r3, #1
 8002190:	2300      	moveq	r3, #0
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8002198:	f000 fb6f 	bl	800287a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000260 	.word	0x20000260
 80021a4:	40004800 	.word	0x40004800

080021a8 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80021ac:	4b13      	ldr	r3, [pc, #76]	@ (80021fc <_ZL19MX_USART6_UART_Initv+0x54>)
 80021ae:	4a14      	ldr	r2, [pc, #80]	@ (8002200 <_ZL19MX_USART6_UART_Initv+0x58>)
 80021b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80021b2:	4b12      	ldr	r3, [pc, #72]	@ (80021fc <_ZL19MX_USART6_UART_Initv+0x54>)
 80021b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80021ba:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <_ZL19MX_USART6_UART_Initv+0x54>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80021c0:	4b0e      	ldr	r3, [pc, #56]	@ (80021fc <_ZL19MX_USART6_UART_Initv+0x54>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80021c6:	4b0d      	ldr	r3, [pc, #52]	@ (80021fc <_ZL19MX_USART6_UART_Initv+0x54>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80021cc:	4b0b      	ldr	r3, [pc, #44]	@ (80021fc <_ZL19MX_USART6_UART_Initv+0x54>)
 80021ce:	220c      	movs	r2, #12
 80021d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d2:	4b0a      	ldr	r3, [pc, #40]	@ (80021fc <_ZL19MX_USART6_UART_Initv+0x54>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d8:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <_ZL19MX_USART6_UART_Initv+0x54>)
 80021da:	2200      	movs	r2, #0
 80021dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80021de:	4807      	ldr	r0, [pc, #28]	@ (80021fc <_ZL19MX_USART6_UART_Initv+0x54>)
 80021e0:	f005 f8e6 	bl	80073b0 <HAL_UART_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf14      	ite	ne
 80021ea:	2301      	movne	r3, #1
 80021ec:	2300      	moveq	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 80021f4:	f000 fb41 	bl	800287a <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	200002a8 	.word	0x200002a8
 8002200:	40011400 	.word	0x40011400

08002204 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <_ZL11MX_DMA_Initv+0x4c>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	4a0f      	ldr	r2, [pc, #60]	@ (8002250 <_ZL11MX_DMA_Initv+0x4c>)
 8002214:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002218:	6313      	str	r3, [r2, #48]	@ 0x30
 800221a:	4b0d      	ldr	r3, [pc, #52]	@ (8002250 <_ZL11MX_DMA_Initv+0x4c>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2100      	movs	r1, #0
 800222a:	200b      	movs	r0, #11
 800222c:	f001 fcaf 	bl	8003b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002230:	200b      	movs	r0, #11
 8002232:	f001 fcc8 	bl	8003bc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	2100      	movs	r1, #0
 800223a:	2010      	movs	r0, #16
 800223c:	f001 fca7 	bl	8003b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002240:	2010      	movs	r0, #16
 8002242:	f001 fcc0 	bl	8003bc6 <HAL_NVIC_EnableIRQ>

}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800

08002254 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	@ 0x28
 8002258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225a:	f107 0314 	add.w	r3, r7, #20
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]
 8002264:	609a      	str	r2, [r3, #8]
 8002266:	60da      	str	r2, [r3, #12]
 8002268:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	4b3d      	ldr	r3, [pc, #244]	@ (8002364 <_ZL12MX_GPIO_Initv+0x110>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	4a3c      	ldr	r2, [pc, #240]	@ (8002364 <_ZL12MX_GPIO_Initv+0x110>)
 8002274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002278:	6313      	str	r3, [r2, #48]	@ 0x30
 800227a:	4b3a      	ldr	r3, [pc, #232]	@ (8002364 <_ZL12MX_GPIO_Initv+0x110>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	4b36      	ldr	r3, [pc, #216]	@ (8002364 <_ZL12MX_GPIO_Initv+0x110>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	4a35      	ldr	r2, [pc, #212]	@ (8002364 <_ZL12MX_GPIO_Initv+0x110>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	6313      	str	r3, [r2, #48]	@ 0x30
 8002296:	4b33      	ldr	r3, [pc, #204]	@ (8002364 <_ZL12MX_GPIO_Initv+0x110>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002364 <_ZL12MX_GPIO_Initv+0x110>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	4a2e      	ldr	r2, [pc, #184]	@ (8002364 <_ZL12MX_GPIO_Initv+0x110>)
 80022ac:	f043 0304 	orr.w	r3, r3, #4
 80022b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002364 <_ZL12MX_GPIO_Initv+0x110>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	4b28      	ldr	r3, [pc, #160]	@ (8002364 <_ZL12MX_GPIO_Initv+0x110>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	4a27      	ldr	r2, [pc, #156]	@ (8002364 <_ZL12MX_GPIO_Initv+0x110>)
 80022c8:	f043 0302 	orr.w	r3, r3, #2
 80022cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ce:	4b25      	ldr	r3, [pc, #148]	@ (8002364 <_ZL12MX_GPIO_Initv+0x110>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	603b      	str	r3, [r7, #0]
 80022de:	4b21      	ldr	r3, [pc, #132]	@ (8002364 <_ZL12MX_GPIO_Initv+0x110>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	4a20      	ldr	r2, [pc, #128]	@ (8002364 <_ZL12MX_GPIO_Initv+0x110>)
 80022e4:	f043 0308 	orr.w	r3, r3, #8
 80022e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002364 <_ZL12MX_GPIO_Initv+0x110>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Servo_ON_Pin|LED1_Pin, GPIO_PIN_RESET);
 80022f6:	2200      	movs	r2, #0
 80022f8:	2122      	movs	r1, #34	@ 0x22
 80022fa:	481b      	ldr	r0, [pc, #108]	@ (8002368 <_ZL12MX_GPIO_Initv+0x114>)
 80022fc:	f002 f99a 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8002300:	2200      	movs	r2, #0
 8002302:	2104      	movs	r1, #4
 8002304:	4819      	ldr	r0, [pc, #100]	@ (800236c <_ZL12MX_GPIO_Initv+0x118>)
 8002306:	f002 f995 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Servo_ON_Pin LED1_Pin */
  GPIO_InitStruct.Pin = Servo_ON_Pin|LED1_Pin;
 800230a:	2322      	movs	r3, #34	@ 0x22
 800230c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230e:	2301      	movs	r3, #1
 8002310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	2300      	movs	r3, #0
 8002318:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231a:	f107 0314 	add.w	r3, r7, #20
 800231e:	4619      	mov	r1, r3
 8002320:	4811      	ldr	r0, [pc, #68]	@ (8002368 <_ZL12MX_GPIO_Initv+0x114>)
 8002322:	f001 ffdb 	bl	80042dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8002326:	2304      	movs	r3, #4
 8002328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232a:	2301      	movs	r3, #1
 800232c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002332:	2300      	movs	r3, #0
 8002334:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	4619      	mov	r1, r3
 800233c:	480b      	ldr	r0, [pc, #44]	@ (800236c <_ZL12MX_GPIO_Initv+0x118>)
 800233e:	f001 ffcd 	bl	80042dc <HAL_GPIO_Init>

  /*Configure GPIO pins : STRTSW_Pin TACTSW0_Pin */
  GPIO_InitStruct.Pin = STRTSW_Pin|TACTSW0_Pin;
 8002342:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002348:	2300      	movs	r3, #0
 800234a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	4619      	mov	r1, r3
 8002356:	4805      	ldr	r0, [pc, #20]	@ (800236c <_ZL12MX_GPIO_Initv+0x118>)
 8002358:	f001 ffc0 	bl	80042dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800235c:	bf00      	nop
 800235e:	3728      	adds	r7, #40	@ 0x28
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40023800 	.word	0x40023800
 8002368:	40020000 	.word	0x40020000
 800236c:	40020400 	.word	0x40020400

08002370 <_Z9speed_setiiiPsf>:

/* USER CODE BEGIN 4 */
void speed_set(int gyro_degree, int goal_speed, int goal_degree, int16_t* mtrspeed, float motor_rate){
 8002370:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002374:	b08a      	sub	sp, #40	@ 0x28
 8002376:	af00      	add	r7, sp, #0
 8002378:	6178      	str	r0, [r7, #20]
 800237a:	6139      	str	r1, [r7, #16]
 800237c:	60fa      	str	r2, [r7, #12]
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	ed87 0a01 	vstr	s0, [r7, #4]
	goal_degree = goal_degree % 360;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4a7a      	ldr	r2, [pc, #488]	@ (8002570 <_Z9speed_setiiiPsf+0x200>)
 8002388:	fb82 1203 	smull	r1, r2, r2, r3
 800238c:	441a      	add	r2, r3
 800238e:	1211      	asrs	r1, r2, #8
 8002390:	17da      	asrs	r2, r3, #31
 8002392:	1a8a      	subs	r2, r1, r2
 8002394:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8002398:	fb01 f202 	mul.w	r2, r1, r2
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
	if(goal_degree < 0){goal_degree += 360;}
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	da03      	bge.n	80023ae <_Z9speed_setiiiPsf+0x3e>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80023ac:	60fb      	str	r3, [r7, #12]


    int roll_speed;
    if(gyro_degree > 180){gyro_degree -= 360;}
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2bb4      	cmp	r3, #180	@ 0xb4
 80023b2:	dd04      	ble.n	80023be <_Z9speed_setiiiPsf+0x4e>
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	e007      	b.n	80023ce <_Z9speed_setiiiPsf+0x5e>
    else if(gyro_degree <-180){gyro_degree += 360;}
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f113 0fb4 	cmn.w	r3, #180	@ 0xb4
 80023c4:	da03      	bge.n	80023ce <_Z9speed_setiiiPsf+0x5e>
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80023cc:	617b      	str	r3, [r7, #20]
    else{}


    if (gyro_degree > 0){
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	dd11      	ble.n	80023f8 <_Z9speed_setiiiPsf+0x88>
        roll_speed = gyro_degree * 50;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	2232      	movs	r2, #50	@ 0x32
 80023d8:	fb02 f303 	mul.w	r3, r2, r3
 80023dc:	627b      	str	r3, [r7, #36]	@ 0x24
        if (gyro_degree < 2){
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	dc01      	bgt.n	80023e8 <_Z9speed_setiiiPsf+0x78>
            roll_speed = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        if (roll_speed > 500){
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80023ee:	dd1a      	ble.n	8002426 <_Z9speed_setiiiPsf+0xb6>
            roll_speed = 500;
 80023f0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80023f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023f6:	e016      	b.n	8002426 <_Z9speed_setiiiPsf+0xb6>
        }
    }else if (gyro_degree < 0){
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	da11      	bge.n	8002422 <_Z9speed_setiiiPsf+0xb2>
        roll_speed = gyro_degree * 50;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	2232      	movs	r2, #50	@ 0x32
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	627b      	str	r3, [r7, #36]	@ 0x24
        if (gyro_degree > -2){
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240e:	db01      	blt.n	8002414 <_Z9speed_setiiiPsf+0xa4>
            roll_speed = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	627b      	str	r3, [r7, #36]	@ 0x24
        }
		if (roll_speed < -500){
 8002414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002416:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 800241a:	da04      	bge.n	8002426 <_Z9speed_setiiiPsf+0xb6>
			roll_speed = -500;
 800241c:	4b55      	ldr	r3, [pc, #340]	@ (8002574 <_Z9speed_setiiiPsf+0x204>)
 800241e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002420:	e001      	b.n	8002426 <_Z9speed_setiiiPsf+0xb6>
        }

    }else{
        roll_speed = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	627b      	str	r3, [r7, #36]	@ 0x24
    }


	int conv_degree = -goal_degree + 45;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f1c3 032d 	rsb	r3, r3, #45	@ 0x2d
 800242c:	623b      	str	r3, [r7, #32]
	if(conv_degree < 0){conv_degree = conv_degree + 360;}
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	2b00      	cmp	r3, #0
 8002432:	da03      	bge.n	800243c <_Z9speed_setiiiPsf+0xcc>
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800243a:	623b      	str	r3, [r7, #32]

	for(int i=0; i<4; i++){
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]
 8002440:	e085      	b.n	800254e <_Z9speed_setiiiPsf+0x1de>
		mtrspeed[i] = goal_speed * sin((conv_degree + 90.0*i) / 180.0 * 3.1415);
 8002442:	6938      	ldr	r0, [r7, #16]
 8002444:	f7fe f832 	bl	80004ac <__aeabi_i2d>
 8002448:	4604      	mov	r4, r0
 800244a:	460d      	mov	r5, r1
 800244c:	6a38      	ldr	r0, [r7, #32]
 800244e:	f7fe f82d 	bl	80004ac <__aeabi_i2d>
 8002452:	4680      	mov	r8, r0
 8002454:	4689      	mov	r9, r1
 8002456:	69f8      	ldr	r0, [r7, #28]
 8002458:	f7fe f828 	bl	80004ac <__aeabi_i2d>
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	4b45      	ldr	r3, [pc, #276]	@ (8002578 <_Z9speed_setiiiPsf+0x208>)
 8002462:	f7fe f88d 	bl	8000580 <__aeabi_dmul>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4640      	mov	r0, r8
 800246c:	4649      	mov	r1, r9
 800246e:	f7fd fed1 	bl	8000214 <__adddf3>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	4b3f      	ldr	r3, [pc, #252]	@ (800257c <_Z9speed_setiiiPsf+0x20c>)
 8002480:	f7fe f9a8 	bl	80007d4 <__aeabi_ddiv>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4610      	mov	r0, r2
 800248a:	4619      	mov	r1, r3
 800248c:	a336      	add	r3, pc, #216	@ (adr r3, 8002568 <_Z9speed_setiiiPsf+0x1f8>)
 800248e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002492:	f7fe f875 	bl	8000580 <__aeabi_dmul>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	ec43 2b17 	vmov	d7, r2, r3
 800249e:	eeb0 0a47 	vmov.f32	s0, s14
 80024a2:	eef0 0a67 	vmov.f32	s1, s15
 80024a6:	f005 fea7 	bl	80081f8 <sin>
 80024aa:	ec53 2b10 	vmov	r2, r3, d0
 80024ae:	4620      	mov	r0, r4
 80024b0:	4629      	mov	r1, r5
 80024b2:	f7fe f865 	bl	8000580 <__aeabi_dmul>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4610      	mov	r0, r2
 80024bc:	4619      	mov	r1, r3
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	18d4      	adds	r4, r2, r3
 80024c6:	f7fe fb0b 	bl	8000ae0 <__aeabi_d2iz>
 80024ca:	4603      	mov	r3, r0
 80024cc:	b21b      	sxth	r3, r3
 80024ce:	8023      	strh	r3, [r4, #0]
		mtrspeed[i] = (mtrspeed[i] * motor_rate) + (roll_speed * (1.0 - motor_rate));
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	4413      	add	r3, r2
 80024d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024dc:	ee07 3a90 	vmov	s15, r3
 80024e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80024e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ec:	ee17 0a90 	vmov	r0, s15
 80024f0:	f7fd ffee 	bl	80004d0 <__aeabi_f2d>
 80024f4:	4604      	mov	r4, r0
 80024f6:	460d      	mov	r5, r1
 80024f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80024fa:	f7fd ffd7 	bl	80004ac <__aeabi_i2d>
 80024fe:	4680      	mov	r8, r0
 8002500:	4689      	mov	r9, r1
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7fd ffe4 	bl	80004d0 <__aeabi_f2d>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	f04f 0000 	mov.w	r0, #0
 8002510:	491b      	ldr	r1, [pc, #108]	@ (8002580 <_Z9speed_setiiiPsf+0x210>)
 8002512:	f7fd fe7d 	bl	8000210 <__aeabi_dsub>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4640      	mov	r0, r8
 800251c:	4649      	mov	r1, r9
 800251e:	f7fe f82f 	bl	8000580 <__aeabi_dmul>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4620      	mov	r0, r4
 8002528:	4629      	mov	r1, r5
 800252a:	f7fd fe73 	bl	8000214 <__adddf3>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	18d4      	adds	r4, r2, r3
 800253e:	f7fe facf 	bl	8000ae0 <__aeabi_d2iz>
 8002542:	4603      	mov	r3, r0
 8002544:	b21b      	sxth	r3, r3
 8002546:	8023      	strh	r3, [r4, #0]
	for(int i=0; i<4; i++){
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	3301      	adds	r3, #1
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	2b03      	cmp	r3, #3
 8002552:	f77f af76 	ble.w	8002442 <_Z9speed_setiiiPsf+0xd2>
	}
}
 8002556:	bf00      	nop
 8002558:	bf00      	nop
 800255a:	3728      	adds	r7, #40	@ 0x28
 800255c:	46bd      	mov	sp, r7
 800255e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002562:	bf00      	nop
 8002564:	f3af 8000 	nop.w
 8002568:	c083126f 	.word	0xc083126f
 800256c:	400921ca 	.word	0x400921ca
 8002570:	b60b60b7 	.word	0xb60b60b7
 8002574:	fffffe0c 	.word	0xfffffe0c
 8002578:	40568000 	.word	0x40568000
 800257c:	40668000 	.word	0x40668000
 8002580:	3ff00000 	.word	0x3ff00000

08002584 <_Z9set_arrayPsPh>:

void set_array(int16_t* mtrspeed, uint8_t* sendarray){
 8002584:	b480      	push	{r7}
 8002586:	b087      	sub	sp, #28
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
	uint16_t conv_mtrspeed[4];
	for(int i=0; i<4; i++){conv_mtrspeed[i] = 10000 - (mtrspeed[i] + 5000);}
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	e013      	b.n	80025bc <_Z9set_arrayPsPh+0x38>
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	4413      	add	r3, r2
 800259c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	f5c3 539c 	rsb	r3, r3, #4992	@ 0x1380
 80025a6:	3308      	adds	r3, #8
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	3318      	adds	r3, #24
 80025b0:	443b      	add	r3, r7
 80025b2:	f823 2c10 	strh.w	r2, [r3, #-16]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	3301      	adds	r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	2b03      	cmp	r3, #3
 80025c0:	dde8      	ble.n	8002594 <_Z9set_arrayPsPh+0x10>
	for(int i=0; i<4; i++){
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	e03a      	b.n	800263e <_Z9set_arrayPsPh+0xba>
		sendarray[3*i] = 250+i;
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	b2d9      	uxtb	r1, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	461a      	mov	r2, r3
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	4413      	add	r3, r2
 80025da:	1f8a      	subs	r2, r1, #6
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	701a      	strb	r2, [r3, #0]
		sendarray[3*i+1] = conv_mtrspeed[i] % 100;
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	3318      	adds	r3, #24
 80025e6:	443b      	add	r3, r7
 80025e8:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80025ec:	4a19      	ldr	r2, [pc, #100]	@ (8002654 <_Z9set_arrayPsPh+0xd0>)
 80025ee:	fba2 1203 	umull	r1, r2, r2, r3
 80025f2:	0952      	lsrs	r2, r2, #5
 80025f4:	2164      	movs	r1, #100	@ 0x64
 80025f6:	fb01 f202 	mul.w	r2, r1, r2
 80025fa:	1a9b      	subs	r3, r3, r2
 80025fc:	b299      	uxth	r1, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4613      	mov	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4413      	add	r3, r2
 8002606:	3301      	adds	r3, #1
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	4413      	add	r3, r2
 800260c:	b2ca      	uxtb	r2, r1
 800260e:	701a      	strb	r2, [r3, #0]
		sendarray[3*i+2] = conv_mtrspeed[i] / 100;
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	3318      	adds	r3, #24
 8002616:	443b      	add	r3, r7
 8002618:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800261c:	4a0d      	ldr	r2, [pc, #52]	@ (8002654 <_Z9set_arrayPsPh+0xd0>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	b299      	uxth	r1, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	3302      	adds	r3, #2
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	4413      	add	r3, r2
 8002634:	b2ca      	uxtb	r2, r1
 8002636:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<4; i++){
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	3301      	adds	r3, #1
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	2b03      	cmp	r3, #3
 8002642:	ddc1      	ble.n	80025c8 <_Z9set_arrayPsPh+0x44>
	}
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	371c      	adds	r7, #28
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	51eb851f 	.word	0x51eb851f

08002658 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h>:

void readBuf(UART_HandleTypeDef* uart, uint8_t* buf, int buf_size, uint8_t* data, int data_size, uint8_t id, uint8_t* p_wrtpt, uint8_t* p_rdpt, uint16_t* stop_counter, uint16_t* error_counter, uint8_t go_back){
 8002658:	b480      	push	{r7}
 800265a:	b08d      	sub	sp, #52	@ 0x34
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
	int wrt_pt = uart->hdmarx->Instance->NDTR;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	61bb      	str	r3, [r7, #24]
	wrt_pt= buf_size - wrt_pt;
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	61bb      	str	r3, [r7, #24]
	int rd_pt;

	if(wrt_pt != *p_rdpt){//wrtに追???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?付かれてな???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
 8002678:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	4293      	cmp	r3, r2
 8002682:	d031      	beq.n	80026e8 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x90>
		if(buf[*p_rdpt] == 255){//p_rdptが書き換えられてな???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?=追???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?越されてな???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
 8002684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	4413      	add	r3, r2
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2bff      	cmp	r3, #255	@ 0xff
 8002692:	d116      	bne.n	80026c2 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x6a>
			if(wrt_pt != *p_wrtpt){//wrt_ptが�????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��んだ=受信した
 8002694:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	4293      	cmp	r3, r2
 800269e:	d006      	beq.n	80026ae <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x56>
//正常
				*stop_counter = 0;
 80026a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026a2:	2200      	movs	r2, #0
 80026a4:	801a      	strh	r2, [r3, #0]
				rd_pt = *p_rdpt;
 80026a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026ac:	e049      	b.n	8002742 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
			}else{//wrt_ptが�????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��んでな???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?=受信してな???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
//受信してな???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
				(*stop_counter)++;
 80026ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	3301      	adds	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026b8:	801a      	strh	r2, [r3, #0]
				rd_pt = *p_rdpt;
 80026ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026c0:	e03f      	b.n	8002742 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
			}
		}else{//p_rdptが書き換えられた=追???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?越された
//追???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?越された
			(*error_counter)++;
 80026c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	3301      	adds	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026cc:	801a      	strh	r2, [r3, #0]
			rd_pt = wrt_pt - go_back;
 80026ce:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if(rd_pt < 0){rd_pt += buf_size;}
 80026d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026da:	2b00      	cmp	r3, #0
 80026dc:	da31      	bge.n	8002742 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
 80026de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4413      	add	r3, r2
 80026e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026e6:	e02c      	b.n	8002742 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
		}
	}else{//wrtに追???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?付かれた,追???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?付い???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
		int front_pt = wrt_pt + 1;
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	3301      	adds	r3, #1
 80026ec:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(front_pt>buf_size-1){front_pt -= buf_size;}
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f2:	429a      	cmp	r2, r3
 80026f4:	dc03      	bgt.n	80026fe <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xa6>
 80026f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	62bb      	str	r3, [r7, #40]	@ 0x28

		if(buf[front_pt] == 255){
 80026fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	4413      	add	r3, r2
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2bff      	cmp	r3, #255	@ 0xff
 8002708:	d109      	bne.n	800271e <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xc6>
//追???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?付い???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
			(*stop_counter)++;
 800270a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	3301      	adds	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002714:	801a      	strh	r2, [r3, #0]
			rd_pt = *p_rdpt;
 8002716:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800271c:	e011      	b.n	8002742 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
		}else{
//追???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?付かれた
			(*error_counter)++;
 800271e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	3301      	adds	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002728:	801a      	strh	r2, [r3, #0]
			rd_pt = wrt_pt - go_back;
 800272a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if(rd_pt < 0){rd_pt += buf_size;}
 8002734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002736:	2b00      	cmp	r3, #0
 8002738:	da03      	bge.n	8002742 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
 800273a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4413      	add	r3, r2
 8002740:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
	}

	if(*stop_counter > 65500){*stop_counter = 65500;}
 8002742:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 800274a:	4293      	cmp	r3, r2
 800274c:	d903      	bls.n	8002756 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xfe>
 800274e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002750:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8002754:	801a      	strh	r2, [r3, #0]
	if(*error_counter > 65500){*error_counter = 65500;}
 8002756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 800275e:	4293      	cmp	r3, r2
 8002760:	d903      	bls.n	800276a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x112>
 8002762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002764:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8002768:	801a      	strh	r2, [r3, #0]


	while(1){
		int dif_pt = wrt_pt - rd_pt;
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	627b      	str	r3, [r7, #36]	@ 0x24
			if(dif_pt < 0){dif_pt += buf_size;}
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002774:	2b00      	cmp	r3, #0
 8002776:	da03      	bge.n	8002780 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x128>
 8002778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	627b      	str	r3, [r7, #36]	@ 0x24
		if(dif_pt <= go_back/2){break;}
 8002780:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002784:	085b      	lsrs	r3, r3, #1
 8002786:	b2db      	uxtb	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	4293      	cmp	r3, r2
 800278e:	dd65      	ble.n	800285c <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x204>

		rd_pt++;
 8002790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002792:	3301      	adds	r3, #1
 8002794:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(rd_pt>buf_size-1){rd_pt -= buf_size;}
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800279a:	429a      	cmp	r2, r3
 800279c:	dc03      	bgt.n	80027a6 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x14e>
 800279e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if(buf[rd_pt] == 250+id){
 80027a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	4413      	add	r3, r2
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80027b4:	33fa      	adds	r3, #250	@ 0xfa
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d14a      	bne.n	8002850 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1f8>
			int goal_rdpt = rd_pt + data_size;//data_sizeに0はとれな???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?,25以上も???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
 80027ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027be:	4413      	add	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

				if(goal_rdpt>buf_size-1){goal_rdpt -= buf_size;}
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	dc03      	bgt.n	80027d2 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x17a>
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	617b      	str	r3, [r7, #20]
			int temp_rdpt = rd_pt;
 80027d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d4:	623b      	str	r3, [r7, #32]

			buf[rd_pt] = 255;
 80027d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	4413      	add	r3, r2
 80027dc:	22ff      	movs	r2, #255	@ 0xff
 80027de:	701a      	strb	r2, [r3, #0]

			for(int i=0; i<data_size; i++){
 80027e0:	2300      	movs	r3, #0
 80027e2:	61fb      	str	r3, [r7, #28]
 80027e4:	e01a      	b.n	800281c <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1c4>
				temp_rdpt += 1;
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	3301      	adds	r3, #1
 80027ea:	623b      	str	r3, [r7, #32]
					if(temp_rdpt>buf_size-1){temp_rdpt -= buf_size;}
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	dc03      	bgt.n	80027fc <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1a4>
 80027f4:	6a3a      	ldr	r2, [r7, #32]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	623b      	str	r3, [r7, #32]

				data[i] = buf[temp_rdpt];
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	441a      	add	r2, r3
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	6839      	ldr	r1, [r7, #0]
 8002806:	440b      	add	r3, r1
 8002808:	7812      	ldrb	r2, [r2, #0]
 800280a:	701a      	strb	r2, [r3, #0]
				buf[temp_rdpt] = 255;
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	4413      	add	r3, r2
 8002812:	22ff      	movs	r2, #255	@ 0xff
 8002814:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<data_size; i++){
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3301      	adds	r3, #1
 800281a:	61fb      	str	r3, [r7, #28]
 800281c:	69fa      	ldr	r2, [r7, #28]
 800281e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002820:	429a      	cmp	r2, r3
 8002822:	dbe0      	blt.n	80027e6 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x18e>
			}

			rd_pt = temp_rdpt;
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	62fb      	str	r3, [r7, #44]	@ 0x2c

			dif_pt = wrt_pt - rd_pt;
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	627b      	str	r3, [r7, #36]	@ 0x24
				if(dif_pt < 0){dif_pt += buf_size;}
 8002830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002832:	2b00      	cmp	r3, #0
 8002834:	da03      	bge.n	800283e <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1e6>
 8002836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4413      	add	r3, r2
 800283c:	627b      	str	r3, [r7, #36]	@ 0x24
			if(dif_pt >= buf_size/2){}
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	0fda      	lsrs	r2, r3, #31
 8002842:	4413      	add	r3, r2
 8002844:	105b      	asrs	r3, r3, #1
 8002846:	461a      	mov	r2, r3
 8002848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284a:	4293      	cmp	r3, r2
 800284c:	da8d      	bge.n	800276a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x112>
			else{break;}
 800284e:	e006      	b.n	800285e <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x206>
		}else{buf[rd_pt] = 255;}
 8002850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	4413      	add	r3, r2
 8002856:	22ff      	movs	r2, #255	@ 0xff
 8002858:	701a      	strb	r2, [r3, #0]
	}
 800285a:	e786      	b.n	800276a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x112>
		if(dif_pt <= go_back/2){break;}
 800285c:	bf00      	nop

	*p_rdpt = rd_pt;
 800285e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002860:	b2da      	uxtb	r2, r3
 8002862:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002864:	701a      	strb	r2, [r3, #0]
//	*p_wrtpt = buf_size - (uart->hdmarx->Instance->CNDTR);
	*p_wrtpt = wrt_pt;
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800286c:	701a      	strb	r2, [r3, #0]
}
 800286e:	bf00      	nop
 8002870:	3734      	adds	r7, #52	@ 0x34
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800287e:	b672      	cpsid	i
}
 8002880:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002882:	bf00      	nop
 8002884:	e7fd      	b.n	8002882 <Error_Handler+0x8>

08002886 <_ZSt3powIsiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8002886:	b5b0      	push	{r4, r5, r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	4603      	mov	r3, r0
 800288e:	6039      	str	r1, [r7, #0]
 8002890:	80fb      	strh	r3, [r7, #6]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8002892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fe08 	bl	80004ac <__aeabi_i2d>
 800289c:	4604      	mov	r4, r0
 800289e:	460d      	mov	r5, r1
 80028a0:	6838      	ldr	r0, [r7, #0]
 80028a2:	f7fd fe03 	bl	80004ac <__aeabi_i2d>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	ec43 2b11 	vmov	d1, r2, r3
 80028ae:	ec45 4b10 	vmov	d0, r4, r5
 80028b2:	f005 fc31 	bl	8008118 <pow>
 80028b6:	eeb0 7a40 	vmov.f32	s14, s0
 80028ba:	eef0 7a60 	vmov.f32	s15, s1
    }
 80028be:	eeb0 0a47 	vmov.f32	s0, s14
 80028c2:	eef0 0a67 	vmov.f32	s1, s15
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bdb0      	pop	{r4, r5, r7, pc}

080028cc <_ZSt5atan2IssEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    atan2(_Tp __y, _Up __x)
 80028cc:	b5b0      	push	{r4, r5, r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	460a      	mov	r2, r1
 80028d6:	80fb      	strh	r3, [r7, #6]
 80028d8:	4613      	mov	r3, r2
 80028da:	80bb      	strh	r3, [r7, #4]
      return atan2(__type(__y), __type(__x));
 80028dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fd fde3 	bl	80004ac <__aeabi_i2d>
 80028e6:	4604      	mov	r4, r0
 80028e8:	460d      	mov	r5, r1
 80028ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fd fddc 	bl	80004ac <__aeabi_i2d>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	ec43 2b11 	vmov	d1, r2, r3
 80028fc:	ec45 4b10 	vmov	d0, r4, r5
 8002900:	f005 fc08 	bl	8008114 <atan2>
 8002904:	eeb0 7a40 	vmov.f32	s14, s0
 8002908:	eef0 7a60 	vmov.f32	s15, s1
    }
 800290c:	eeb0 0a47 	vmov.f32	s0, s14
 8002910:	eef0 0a67 	vmov.f32	s1, s15
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bdb0      	pop	{r4, r5, r7, pc}

0800291a <_ZN11PERFORMANCEC1EPtPhPsS2_S2_S2_S2_>:

#include "performance.h"

PERFORMANCE::PERFORMANCE(uint16_t* ptr_perform_array, uint8_t* ptr_camera_array, int16_t* ptr_movement_array, int16_t* ptr_display_array, int16_t* ptr_circle_position_array, int16_t* ptr_fish_position_array, int16_t* ptr_position_array){
 800291a:	b480      	push	{r7}
 800291c:	b085      	sub	sp, #20
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	3336      	adds	r3, #54	@ 0x36
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	741a      	strb	r2, [r3, #16]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	220a      	movs	r2, #10
 800295c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	22fb      	movs	r2, #251	@ 0xfb
 800296c:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2232      	movs	r2, #50	@ 0x32
 8002974:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2207      	movs	r2, #7
 800297c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2296      	movs	r2, #150	@ 0x96
 8002984:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	22b4      	movs	r2, #180	@ 0xb4
 800298c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	227f      	movs	r2, #127	@ 0x7f
 8002994:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
	perform_array = ptr_perform_array;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	601a      	str	r2, [r3, #0]
	camera_array = ptr_camera_array;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	605a      	str	r2, [r3, #4]
	movement_array = ptr_movement_array;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	609a      	str	r2, [r3, #8]
	display_array = ptr_display_array;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	60da      	str	r2, [r3, #12]
	circle_position_array = ptr_circle_position_array;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	69fa      	ldr	r2, [r7, #28]
 80029b4:	615a      	str	r2, [r3, #20]
	fish_position_array = ptr_fish_position_array;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a3a      	ldr	r2, [r7, #32]
 80029ba:	619a      	str	r2, [r3, #24]
	position_array = ptr_position_array;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c0:	61da      	str	r2, [r3, #28]
}
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4618      	mov	r0, r3
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <_ZN11PERFORMANCE12get_shutdownEv>:


int PERFORMANCE::get_shutdown(){
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
	return shdn_flag;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
}
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <_ZN11PERFORMANCE10get_fixingEv>:

int PERFORMANCE::get_fixing(){
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
	return fix_flag;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <_ZN11PERFORMANCE27get_target_status_superteamEm>:

int PERFORMANCE::get_emission(){
	return emission_flag;
}

void PERFORMANCE::get_target_status_superteam(uint32_t time){
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]

		if(position_array[0] > 1000 && position_array[0] < 4000){
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a1a:	dd31      	ble.n	8002a80 <_ZN11PERFORMANCE27get_target_status_superteamEm+0x7c>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a24:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002a28:	da2a      	bge.n	8002a80 <_ZN11PERFORMANCE27get_target_status_superteamEm+0x7c>

			if(katamuki == -1){
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f993 3032 	ldrsb.w	r3, [r3, #50]	@ 0x32
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a34:	d10f      	bne.n	8002a56 <_ZN11PERFORMANCE27get_target_status_superteamEm+0x52>
				movement_array[0] = 1000;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a3e:	801a      	strh	r2, [r3, #0]
				movement_array[1] = 0;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	3302      	adds	r3, #2
 8002a46:	2200      	movs	r2, #0
 8002a48:	801a      	strh	r2, [r3, #0]
				movement_array[2] = 150;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	3304      	adds	r3, #4
 8002a50:	2296      	movs	r2, #150	@ 0x96
 8002a52:	801a      	strh	r2, [r3, #0]
			if(katamuki == -1){
 8002a54:	e04a      	b.n	8002aec <_ZN11PERFORMANCE27get_target_status_superteamEm+0xe8>
			}else if(katamuki == 1){
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f993 3032 	ldrsb.w	r3, [r3, #50]	@ 0x32
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d145      	bne.n	8002aec <_ZN11PERFORMANCE27get_target_status_superteamEm+0xe8>
				movement_array[0] = 4000;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8002a68:	801a      	strh	r2, [r3, #0]
				movement_array[1] = 0;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	3302      	adds	r3, #2
 8002a70:	2200      	movs	r2, #0
 8002a72:	801a      	strh	r2, [r3, #0]
				movement_array[2] = 150;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	2296      	movs	r2, #150	@ 0x96
 8002a7c:	801a      	strh	r2, [r3, #0]
			if(katamuki == -1){
 8002a7e:	e035      	b.n	8002aec <_ZN11PERFORMANCE27get_target_status_superteamEm+0xe8>
			}

		}else if(position_array[0] <= 1000){
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a8c:	dc13      	bgt.n	8002ab6 <_ZN11PERFORMANCE27get_target_status_superteamEm+0xb2>
			katamuki = 1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

			movement_array[0] = 4000;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8002a9e:	801a      	strh	r2, [r3, #0]
			movement_array[1] = 0;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	801a      	strh	r2, [r3, #0]
			movement_array[2] = 150;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	3304      	adds	r3, #4
 8002ab0:	2296      	movs	r2, #150	@ 0x96
 8002ab2:	801a      	strh	r2, [r3, #0]
 8002ab4:	e01b      	b.n	8002aee <_ZN11PERFORMANCE27get_target_status_superteamEm+0xea>
		}else if(position_array[0] >=4000){
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002abe:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002ac2:	db14      	blt.n	8002aee <_ZN11PERFORMANCE27get_target_status_superteamEm+0xea>
			katamuki = -1;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	22ff      	movs	r2, #255	@ 0xff
 8002ac8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

			movement_array[0] = 1000;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ad4:	801a      	strh	r2, [r3, #0]
			movement_array[1] = 0;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	3302      	adds	r3, #2
 8002adc:	2200      	movs	r2, #0
 8002ade:	801a      	strh	r2, [r3, #0]
			movement_array[2] = 150;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	2296      	movs	r2, #150	@ 0x96
 8002ae8:	801a      	strh	r2, [r3, #0]
 8002aea:	e000      	b.n	8002aee <_ZN11PERFORMANCE27get_target_status_superteamEm+0xea>
			if(katamuki == -1){
 8002aec:	bf00      	nop
		}

		if(position_array[0] <= 1300){
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af6:	f240 5214 	movw	r2, #1300	@ 0x514
 8002afa:	4293      	cmp	r3, r2
 8002afc:	dc13      	bgt.n	8002b26 <_ZN11PERFORMANCE27get_target_status_superteamEm+0x122>
			katamuki = 1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

			movement_array[0] = 4000;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8002b0e:	801a      	strh	r2, [r3, #0]
			movement_array[1] = 0;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	3302      	adds	r3, #2
 8002b16:	2200      	movs	r2, #0
 8002b18:	801a      	strh	r2, [r3, #0]
			movement_array[2] = 150;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	2296      	movs	r2, #150	@ 0x96
 8002b22:	801a      	strh	r2, [r3, #0]
 8002b24:	e01a      	b.n	8002b5c <_ZN11PERFORMANCE27get_target_status_superteamEm+0x158>
		}else if(position_array[0] >= 3700){
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b2e:	f640 6273 	movw	r2, #3699	@ 0xe73
 8002b32:	4293      	cmp	r3, r2
 8002b34:	dd12      	ble.n	8002b5c <_ZN11PERFORMANCE27get_target_status_superteamEm+0x158>
			katamuki = -1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	22ff      	movs	r2, #255	@ 0xff
 8002b3a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

			movement_array[0] = 1000;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b46:	801a      	strh	r2, [r3, #0]
			movement_array[1] = 0;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	2200      	movs	r2, #0
 8002b50:	801a      	strh	r2, [r3, #0]
			movement_array[2] = 150;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	3304      	adds	r3, #4
 8002b58:	2296      	movs	r2, #150	@ 0x96
 8002b5a:	801a      	strh	r2, [r3, #0]





	if(perform_array[1] == 250){//ゴミ散乱 ~20
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3302      	adds	r3, #2
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	2bfa      	cmp	r3, #250	@ 0xfa
 8002b66:	f040 80bc 	bne.w	8002ce2 <_ZN11PERFORMANCE27get_target_status_superteamEm+0x2de>
		shdn_flag = 1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		fix_flag = 1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

		if(mode_flag[0] == 0){
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d147      	bne.n	8002c14 <_ZN11PERFORMANCE27get_target_status_superteamEm+0x210>

//			movement_array[0] = 2000;
//			movement_array[1] = 0;
//			movement_array[2] = 0;

			display_array[1] = 0;//x
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	3302      	adds	r3, #2
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	801a      	strh	r2, [r3, #0]
			display_array[2] = 0;//y
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	3304      	adds	r3, #4
 8002b94:	2200      	movs	r2, #0
 8002b96:	801a      	strh	r2, [r3, #0]
			display_array[3] = 0;//r
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	3306      	adds	r3, #6
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	801a      	strh	r2, [r3, #0]
			display_array[4] = 0;//circle_H
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	2200      	movs	r2, #0
 8002baa:	801a      	strh	r2, [r3, #0]
			display_array[5] = 0;//circle_S
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	330a      	adds	r3, #10
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	801a      	strh	r2, [r3, #0]
			display_array[6] = 0;//circle_V
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	330c      	adds	r3, #12
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	801a      	strh	r2, [r3, #0]
			display_array[7] = display_array[10] = bad_ocean;//background,frame_H
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 204e 	ldrb.w	r2, [r3, #78]	@ 0x4e
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	3314      	adds	r3, #20
 8002bcc:	b212      	sxth	r2, r2
 8002bce:	801a      	strh	r2, [r3, #0]
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	68d2      	ldr	r2, [r2, #12]
 8002bd4:	320e      	adds	r2, #14
 8002bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bda:	8013      	strh	r3, [r2, #0]
			display_array[8] = display_array[11] = S_standard;//background,frame_S
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	3316      	adds	r3, #22
 8002be8:	b212      	sxth	r2, r2
 8002bea:	801a      	strh	r2, [r3, #0]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	68d2      	ldr	r2, [r2, #12]
 8002bf0:	3210      	adds	r2, #16
 8002bf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bf6:	8013      	strh	r3, [r2, #0]
			display_array[9] = display_array[12] = V_standard;//background,frame_V
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	3318      	adds	r3, #24
 8002c04:	b212      	sxth	r2, r2
 8002c06:	801a      	strh	r2, [r3, #0]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	68d2      	ldr	r2, [r2, #12]
 8002c0c:	3212      	adds	r2, #18
 8002c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c12:	8013      	strh	r3, [r2, #0]
		}

		fish_position_array[0] = 1;//ID
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	801a      	strh	r2, [r3, #0]
		fish_position_array[1] = 1500;//X
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	3302      	adds	r3, #2
 8002c22:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002c26:	801a      	strh	r2, [r3, #0]
		fish_position_array[2] = 150;//Y
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	2296      	movs	r2, #150	@ 0x96
 8002c30:	801a      	strh	r2, [r3, #0]

		fish_position_array[3] = 1;//ID
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	3306      	adds	r3, #6
 8002c38:	2201      	movs	r2, #1
 8002c3a:	801a      	strh	r2, [r3, #0]
		fish_position_array[4] = 1900;//X
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	3308      	adds	r3, #8
 8002c42:	f240 726c 	movw	r2, #1900	@ 0x76c
 8002c46:	801a      	strh	r2, [r3, #0]
		fish_position_array[5] = 300;//Y
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	330a      	adds	r3, #10
 8002c4e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c52:	801a      	strh	r2, [r3, #0]

		fish_position_array[6] = 1;//ID
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	330c      	adds	r3, #12
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	801a      	strh	r2, [r3, #0]
		fish_position_array[7] = 2300;//X
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	330e      	adds	r3, #14
 8002c64:	f640 02fc 	movw	r2, #2300	@ 0x8fc
 8002c68:	801a      	strh	r2, [r3, #0]
		fish_position_array[8] = 150;//Y
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	3310      	adds	r3, #16
 8002c70:	2296      	movs	r2, #150	@ 0x96
 8002c72:	801a      	strh	r2, [r3, #0]

		fish_position_array[9] = 1;//ID
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	3312      	adds	r3, #18
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	801a      	strh	r2, [r3, #0]
		fish_position_array[10] = 2700;//X
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	3314      	adds	r3, #20
 8002c84:	f640 228c 	movw	r2, #2700	@ 0xa8c
 8002c88:	801a      	strh	r2, [r3, #0]
		fish_position_array[11] = 300;//Y
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	3316      	adds	r3, #22
 8002c90:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c94:	801a      	strh	r2, [r3, #0]

		fish_position_array[12] = 1;//ID
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	3318      	adds	r3, #24
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	801a      	strh	r2, [r3, #0]
		fish_position_array[13] = 3100;//X
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	331a      	adds	r3, #26
 8002ca6:	f640 421c 	movw	r2, #3100	@ 0xc1c
 8002caa:	801a      	strh	r2, [r3, #0]
		fish_position_array[14] = 150;//Y
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	331c      	adds	r3, #28
 8002cb2:	2296      	movs	r2, #150	@ 0x96
 8002cb4:	801a      	strh	r2, [r3, #0]

		fish_position_array[15] = 1;//ID
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	331e      	adds	r3, #30
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	801a      	strh	r2, [r3, #0]
		fish_position_array[16] = 3500;//X
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	3320      	adds	r3, #32
 8002cc6:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8002cca:	801a      	strh	r2, [r3, #0]
		fish_position_array[17] = 300;//Y
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	3322      	adds	r3, #34	@ 0x22
 8002cd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002cd6:	801a      	strh	r2, [r3, #0]


		mode_flag[0] = 1;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
		fish_position_array[16] = 3500;//X
		fish_position_array[17] = 300;//Y

		mode_flag[4] = 1;
	}
}
 8002ce0:	e2db      	b.n	800329a <_ZN11PERFORMANCE27get_target_status_superteamEm+0x896>
	}else if(perform_array[1] == 1){//クリーン hueを1秒ずつ減らしていく 20~80
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3302      	adds	r3, #2
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	f040 80df 	bne.w	8002eae <_ZN11PERFORMANCE27get_target_status_superteamEm+0x4aa>
		shdn_flag = 1;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		fix_flag = 1;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
		emission_flag = 0;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
		if(mode_flag[1] == 0){
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d130      	bne.n	8002d74 <_ZN11PERFORMANCE27get_target_status_superteamEm+0x370>
			first_time = p_time = time;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	621a      	str	r2, [r3, #32]
			display_array[7] = display_array[10] = bad_ocean;//background,frame_H
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 204e 	ldrb.w	r2, [r3, #78]	@ 0x4e
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	3314      	adds	r3, #20
 8002d2c:	b212      	sxth	r2, r2
 8002d2e:	801a      	strh	r2, [r3, #0]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	68d2      	ldr	r2, [r2, #12]
 8002d34:	320e      	adds	r2, #14
 8002d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d3a:	8013      	strh	r3, [r2, #0]
			display_array[8] = display_array[11] = S_standard;//background,frame_S
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	3316      	adds	r3, #22
 8002d48:	b212      	sxth	r2, r2
 8002d4a:	801a      	strh	r2, [r3, #0]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	68d2      	ldr	r2, [r2, #12]
 8002d50:	3210      	adds	r2, #16
 8002d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d56:	8013      	strh	r3, [r2, #0]
			display_array[9] = display_array[12] = V_standard;//background,frame_V
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	3318      	adds	r3, #24
 8002d64:	b212      	sxth	r2, r2
 8002d66:	801a      	strh	r2, [r3, #0]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	68d2      	ldr	r2, [r2, #12]
 8002d6c:	3212      	adds	r2, #18
 8002d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d72:	8013      	strh	r3, [r2, #0]
		fish_position_array[0] = 2;//ID
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	801a      	strh	r2, [r3, #0]
		fish_position_array[1] = 1500;//X
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	3302      	adds	r3, #2
 8002d82:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002d86:	801a      	strh	r2, [r3, #0]
		fish_position_array[2] = 150;//Y
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	2296      	movs	r2, #150	@ 0x96
 8002d90:	801a      	strh	r2, [r3, #0]
		fish_position_array[3] = 2;//ID
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	3306      	adds	r3, #6
 8002d98:	2202      	movs	r2, #2
 8002d9a:	801a      	strh	r2, [r3, #0]
		fish_position_array[4] = 1900;//X
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	3308      	adds	r3, #8
 8002da2:	f240 726c 	movw	r2, #1900	@ 0x76c
 8002da6:	801a      	strh	r2, [r3, #0]
		fish_position_array[5] = 300;//Y
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	330a      	adds	r3, #10
 8002dae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002db2:	801a      	strh	r2, [r3, #0]
		fish_position_array[6] = 2;//ID
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	330c      	adds	r3, #12
 8002dba:	2202      	movs	r2, #2
 8002dbc:	801a      	strh	r2, [r3, #0]
		fish_position_array[7] = 2300;//X
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	330e      	adds	r3, #14
 8002dc4:	f640 02fc 	movw	r2, #2300	@ 0x8fc
 8002dc8:	801a      	strh	r2, [r3, #0]
		fish_position_array[8] = 150;//Y
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	3310      	adds	r3, #16
 8002dd0:	2296      	movs	r2, #150	@ 0x96
 8002dd2:	801a      	strh	r2, [r3, #0]
		fish_position_array[9] = 2;//ID
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	3312      	adds	r3, #18
 8002dda:	2202      	movs	r2, #2
 8002ddc:	801a      	strh	r2, [r3, #0]
		fish_position_array[10] = 2700;//X
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	3314      	adds	r3, #20
 8002de4:	f640 228c 	movw	r2, #2700	@ 0xa8c
 8002de8:	801a      	strh	r2, [r3, #0]
		fish_position_array[11] = 300;//Y
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	3316      	adds	r3, #22
 8002df0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002df4:	801a      	strh	r2, [r3, #0]
		fish_position_array[12] = 2;//ID
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	3318      	adds	r3, #24
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	801a      	strh	r2, [r3, #0]
		fish_position_array[13] = 3100;//X
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	331a      	adds	r3, #26
 8002e06:	f640 421c 	movw	r2, #3100	@ 0xc1c
 8002e0a:	801a      	strh	r2, [r3, #0]
		fish_position_array[14] = 150;//Y
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	331c      	adds	r3, #28
 8002e12:	2296      	movs	r2, #150	@ 0x96
 8002e14:	801a      	strh	r2, [r3, #0]
		fish_position_array[15] = 2;//ID
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	331e      	adds	r3, #30
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	801a      	strh	r2, [r3, #0]
		fish_position_array[16] = 3500;//X
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	3320      	adds	r3, #32
 8002e26:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8002e2a:	801a      	strh	r2, [r3, #0]
		fish_position_array[17] = 300;//Y
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	3322      	adds	r3, #34	@ 0x22
 8002e32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e36:	801a      	strh	r2, [r3, #0]
		if(time - p_time >= 1000){
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e44:	d316      	bcc.n	8002e74 <_ZN11PERFORMANCE27get_target_status_superteamEm+0x470>
			display_array[7]--;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	330e      	adds	r3, #14
 8002e4c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002e50:	b292      	uxth	r2, r2
 8002e52:	3a01      	subs	r2, #1
 8002e54:	b292      	uxth	r2, r2
 8002e56:	b212      	sxth	r2, r2
 8002e58:	801a      	strh	r2, [r3, #0]
			display_array[10]--;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	3314      	adds	r3, #20
 8002e60:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002e64:	b292      	uxth	r2, r2
 8002e66:	3a01      	subs	r2, #1
 8002e68:	b292      	uxth	r2, r2
 8002e6a:	b212      	sxth	r2, r2
 8002e6c:	801a      	strh	r2, [r3, #0]
			p_time = time;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	625a      	str	r2, [r3, #36]	@ 0x24
		if(display_array[7] < 127 || display_array[10] < 127){
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	330e      	adds	r3, #14
 8002e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e7e:	2b7e      	cmp	r3, #126	@ 0x7e
 8002e80:	dd06      	ble.n	8002e90 <_ZN11PERFORMANCE27get_target_status_superteamEm+0x48c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	3314      	adds	r3, #20
 8002e88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e8c:	2b7e      	cmp	r3, #126	@ 0x7e
 8002e8e:	dc09      	bgt.n	8002ea4 <_ZN11PERFORMANCE27get_target_status_superteamEm+0x4a0>
			display_array[7] = 127;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	330e      	adds	r3, #14
 8002e96:	227f      	movs	r2, #127	@ 0x7f
 8002e98:	801a      	strh	r2, [r3, #0]
			display_array[10] = 127;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	3314      	adds	r3, #20
 8002ea0:	227f      	movs	r2, #127	@ 0x7f
 8002ea2:	801a      	strh	r2, [r3, #0]
		mode_flag[1] = 1;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
}
 8002eac:	e1f5      	b.n	800329a <_ZN11PERFORMANCE27get_target_status_superteamEm+0x896>
	}else if(time - first_time > 60){//はっぴー 80~95
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b3c      	cmp	r3, #60	@ 0x3c
 8002eb8:	f240 80a6 	bls.w	8003008 <_ZN11PERFORMANCE27get_target_status_superteamEm+0x604>
		shdn_flag = 1;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		fix_flag = 1;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
		if(mode_flag[2] == 0){
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d131      	bne.n	8002f3a <_ZN11PERFORMANCE27get_target_status_superteamEm+0x536>
			display_array[7] = display_array[10] = clean_ocean;//background,frame_H
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 204f 	ldrb.w	r2, [r3, #79]	@ 0x4f
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	3314      	adds	r3, #20
 8002ee2:	b212      	sxth	r2, r2
 8002ee4:	801a      	strh	r2, [r3, #0]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	68d2      	ldr	r2, [r2, #12]
 8002eea:	320e      	adds	r2, #14
 8002eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ef0:	8013      	strh	r3, [r2, #0]
			display_array[8] = display_array[11] = S_standard;//background,frame_S
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	3316      	adds	r3, #22
 8002efe:	b212      	sxth	r2, r2
 8002f00:	801a      	strh	r2, [r3, #0]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68d2      	ldr	r2, [r2, #12]
 8002f06:	3210      	adds	r2, #16
 8002f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f0c:	8013      	strh	r3, [r2, #0]
			display_array[9] = display_array[12] = V_standard;//background,frame_V
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	3318      	adds	r3, #24
 8002f1a:	b212      	sxth	r2, r2
 8002f1c:	801a      	strh	r2, [r3, #0]
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	68d2      	ldr	r2, [r2, #12]
 8002f22:	3212      	adds	r2, #18
 8002f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f28:	8013      	strh	r3, [r2, #0]
			display_array[4] = clean_ocean;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 204f 	ldrb.w	r2, [r3, #79]	@ 0x4f
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	3308      	adds	r3, #8
 8002f36:	b212      	sxth	r2, r2
 8002f38:	801a      	strh	r2, [r3, #0]
		fish_position_array[0] = 2;//ID
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	801a      	strh	r2, [r3, #0]
		fish_position_array[1] = 1500;//X
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	3302      	adds	r3, #2
 8002f48:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002f4c:	801a      	strh	r2, [r3, #0]
		fish_position_array[2] = 150;//Y
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	3304      	adds	r3, #4
 8002f54:	2296      	movs	r2, #150	@ 0x96
 8002f56:	801a      	strh	r2, [r3, #0]
		fish_position_array[3] = 2;//ID
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	3306      	adds	r3, #6
 8002f5e:	2202      	movs	r2, #2
 8002f60:	801a      	strh	r2, [r3, #0]
		fish_position_array[4] = 1900;//X
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	3308      	adds	r3, #8
 8002f68:	f240 726c 	movw	r2, #1900	@ 0x76c
 8002f6c:	801a      	strh	r2, [r3, #0]
		fish_position_array[5] = 300;//Y
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	330a      	adds	r3, #10
 8002f74:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f78:	801a      	strh	r2, [r3, #0]
		fish_position_array[6] = 2;//ID
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	330c      	adds	r3, #12
 8002f80:	2202      	movs	r2, #2
 8002f82:	801a      	strh	r2, [r3, #0]
		fish_position_array[7] = 2300;//X
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	330e      	adds	r3, #14
 8002f8a:	f640 02fc 	movw	r2, #2300	@ 0x8fc
 8002f8e:	801a      	strh	r2, [r3, #0]
		fish_position_array[8] = 150;//Y
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	3310      	adds	r3, #16
 8002f96:	2296      	movs	r2, #150	@ 0x96
 8002f98:	801a      	strh	r2, [r3, #0]
		fish_position_array[9] = 2;//ID
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	3312      	adds	r3, #18
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	801a      	strh	r2, [r3, #0]
		fish_position_array[10] = 2700;//X
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	3314      	adds	r3, #20
 8002faa:	f640 228c 	movw	r2, #2700	@ 0xa8c
 8002fae:	801a      	strh	r2, [r3, #0]
		fish_position_array[11] = 300;//Y
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	3316      	adds	r3, #22
 8002fb6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002fba:	801a      	strh	r2, [r3, #0]
		fish_position_array[12] = 2;//ID
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	3318      	adds	r3, #24
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	801a      	strh	r2, [r3, #0]
		fish_position_array[13] = 3100;//X
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	331a      	adds	r3, #26
 8002fcc:	f640 421c 	movw	r2, #3100	@ 0xc1c
 8002fd0:	801a      	strh	r2, [r3, #0]
		fish_position_array[14] = 150;//Y
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	331c      	adds	r3, #28
 8002fd8:	2296      	movs	r2, #150	@ 0x96
 8002fda:	801a      	strh	r2, [r3, #0]
		fish_position_array[15] = 2;//ID
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	331e      	adds	r3, #30
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	801a      	strh	r2, [r3, #0]
		fish_position_array[16] = 3500;//X
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	3320      	adds	r3, #32
 8002fec:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8002ff0:	801a      	strh	r2, [r3, #0]
		fish_position_array[17] = 300;//Y
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	3322      	adds	r3, #34	@ 0x22
 8002ff8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ffc:	801a      	strh	r2, [r3, #0]
		mode_flag[2] = 1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
}
 8003006:	e148      	b.n	800329a <_ZN11PERFORMANCE27get_target_status_superteamEm+0x896>
	}else if(perform_array[1] == 0){//ぐっど 95~135
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	3302      	adds	r3, #2
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	f040 809e 	bne.w	8003152 <_ZN11PERFORMANCE27get_target_status_superteamEm+0x74e>
		shdn_flag = 1;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		fix_flag = 1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
		if(mode_flag[3] == 0){
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800302c:	2b00      	cmp	r3, #0
 800302e:	d129      	bne.n	8003084 <_ZN11PERFORMANCE27get_target_status_superteamEm+0x680>
			display_array[7] = display_array[10] = clean_ocean;//background,frame_H
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 204f 	ldrb.w	r2, [r3, #79]	@ 0x4f
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	3314      	adds	r3, #20
 800303c:	b212      	sxth	r2, r2
 800303e:	801a      	strh	r2, [r3, #0]
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	68d2      	ldr	r2, [r2, #12]
 8003044:	320e      	adds	r2, #14
 8003046:	f9b3 3000 	ldrsh.w	r3, [r3]
 800304a:	8013      	strh	r3, [r2, #0]
			display_array[8] = display_array[11] = S_standard;//background,frame_S
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	3316      	adds	r3, #22
 8003058:	b212      	sxth	r2, r2
 800305a:	801a      	strh	r2, [r3, #0]
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	68d2      	ldr	r2, [r2, #12]
 8003060:	3210      	adds	r2, #16
 8003062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003066:	8013      	strh	r3, [r2, #0]
			display_array[9] = display_array[12] = V_standard;//background,frame_V
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	3318      	adds	r3, #24
 8003074:	b212      	sxth	r2, r2
 8003076:	801a      	strh	r2, [r3, #0]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	68d2      	ldr	r2, [r2, #12]
 800307c:	3212      	adds	r2, #18
 800307e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003082:	8013      	strh	r3, [r2, #0]
		fish_position_array[0] = 2;//ID
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	2202      	movs	r2, #2
 800308a:	801a      	strh	r2, [r3, #0]
		fish_position_array[1] = 1500;//X
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	3302      	adds	r3, #2
 8003092:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003096:	801a      	strh	r2, [r3, #0]
		fish_position_array[2] = 150;//Y
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	3304      	adds	r3, #4
 800309e:	2296      	movs	r2, #150	@ 0x96
 80030a0:	801a      	strh	r2, [r3, #0]
		fish_position_array[3] = 2;//ID
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	3306      	adds	r3, #6
 80030a8:	2202      	movs	r2, #2
 80030aa:	801a      	strh	r2, [r3, #0]
		fish_position_array[4] = 1900;//X
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	3308      	adds	r3, #8
 80030b2:	f240 726c 	movw	r2, #1900	@ 0x76c
 80030b6:	801a      	strh	r2, [r3, #0]
		fish_position_array[5] = 300;//Y
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	330a      	adds	r3, #10
 80030be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030c2:	801a      	strh	r2, [r3, #0]
		fish_position_array[6] = 2;//ID
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	330c      	adds	r3, #12
 80030ca:	2202      	movs	r2, #2
 80030cc:	801a      	strh	r2, [r3, #0]
		fish_position_array[7] = 2300;//X
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	330e      	adds	r3, #14
 80030d4:	f640 02fc 	movw	r2, #2300	@ 0x8fc
 80030d8:	801a      	strh	r2, [r3, #0]
		fish_position_array[8] = 150;//Y
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	3310      	adds	r3, #16
 80030e0:	2296      	movs	r2, #150	@ 0x96
 80030e2:	801a      	strh	r2, [r3, #0]
		fish_position_array[9] = 2;//ID
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	3312      	adds	r3, #18
 80030ea:	2202      	movs	r2, #2
 80030ec:	801a      	strh	r2, [r3, #0]
		fish_position_array[10] = 2700;//X
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	3314      	adds	r3, #20
 80030f4:	f640 228c 	movw	r2, #2700	@ 0xa8c
 80030f8:	801a      	strh	r2, [r3, #0]
		fish_position_array[11] = 300;//Y
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	3316      	adds	r3, #22
 8003100:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003104:	801a      	strh	r2, [r3, #0]
		fish_position_array[12] = 2;//ID
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	3318      	adds	r3, #24
 800310c:	2202      	movs	r2, #2
 800310e:	801a      	strh	r2, [r3, #0]
		fish_position_array[13] = 3100;//X
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	331a      	adds	r3, #26
 8003116:	f640 421c 	movw	r2, #3100	@ 0xc1c
 800311a:	801a      	strh	r2, [r3, #0]
		fish_position_array[14] = 150;//Y
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	331c      	adds	r3, #28
 8003122:	2296      	movs	r2, #150	@ 0x96
 8003124:	801a      	strh	r2, [r3, #0]
		fish_position_array[15] = 2;//ID
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	331e      	adds	r3, #30
 800312c:	2202      	movs	r2, #2
 800312e:	801a      	strh	r2, [r3, #0]
		fish_position_array[16] = 3500;//X
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	3320      	adds	r3, #32
 8003136:	f640 52ac 	movw	r2, #3500	@ 0xdac
 800313a:	801a      	strh	r2, [r3, #0]
		fish_position_array[17] = 300;//Y
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	3322      	adds	r3, #34	@ 0x22
 8003142:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003146:	801a      	strh	r2, [r3, #0]
		mode_flag[3] = 1;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
}
 8003150:	e0a3      	b.n	800329a <_ZN11PERFORMANCE27get_target_status_superteamEm+0x896>
	}else if(perform_array[1] == 2){//ばいばい 135~155
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3302      	adds	r3, #2
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	2b02      	cmp	r3, #2
 800315c:	f040 809d 	bne.w	800329a <_ZN11PERFORMANCE27get_target_status_superteamEm+0x896>
		shdn_flag = 1;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		fix_flag = 1;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
		if(mode_flag[4] == 0){
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003176:	2b00      	cmp	r3, #0
 8003178:	d129      	bne.n	80031ce <_ZN11PERFORMANCE27get_target_status_superteamEm+0x7ca>
			display_array[7] = display_array[10] = clean_ocean;//background,frame_H
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 204f 	ldrb.w	r2, [r3, #79]	@ 0x4f
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	3314      	adds	r3, #20
 8003186:	b212      	sxth	r2, r2
 8003188:	801a      	strh	r2, [r3, #0]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68d2      	ldr	r2, [r2, #12]
 800318e:	320e      	adds	r2, #14
 8003190:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003194:	8013      	strh	r3, [r2, #0]
			display_array[8] = display_array[11] = S_standard;//background,frame_S
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	3316      	adds	r3, #22
 80031a2:	b212      	sxth	r2, r2
 80031a4:	801a      	strh	r2, [r3, #0]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	68d2      	ldr	r2, [r2, #12]
 80031aa:	3210      	adds	r2, #16
 80031ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031b0:	8013      	strh	r3, [r2, #0]
			display_array[9] = display_array[12] = V_standard;//background,frame_V
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	3318      	adds	r3, #24
 80031be:	b212      	sxth	r2, r2
 80031c0:	801a      	strh	r2, [r3, #0]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68d2      	ldr	r2, [r2, #12]
 80031c6:	3212      	adds	r2, #18
 80031c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031cc:	8013      	strh	r3, [r2, #0]
		fish_position_array[0] = 2;//ID
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	2202      	movs	r2, #2
 80031d4:	801a      	strh	r2, [r3, #0]
		fish_position_array[1] = 1500;//X
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	3302      	adds	r3, #2
 80031dc:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80031e0:	801a      	strh	r2, [r3, #0]
		fish_position_array[2] = 150;//Y
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	3304      	adds	r3, #4
 80031e8:	2296      	movs	r2, #150	@ 0x96
 80031ea:	801a      	strh	r2, [r3, #0]
		fish_position_array[3] = 2;//ID
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	3306      	adds	r3, #6
 80031f2:	2202      	movs	r2, #2
 80031f4:	801a      	strh	r2, [r3, #0]
		fish_position_array[4] = 1900;//X
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	3308      	adds	r3, #8
 80031fc:	f240 726c 	movw	r2, #1900	@ 0x76c
 8003200:	801a      	strh	r2, [r3, #0]
		fish_position_array[5] = 300;//Y
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	330a      	adds	r3, #10
 8003208:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800320c:	801a      	strh	r2, [r3, #0]
		fish_position_array[6] = 2;//ID
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	330c      	adds	r3, #12
 8003214:	2202      	movs	r2, #2
 8003216:	801a      	strh	r2, [r3, #0]
		fish_position_array[7] = 2300;//X
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	330e      	adds	r3, #14
 800321e:	f640 02fc 	movw	r2, #2300	@ 0x8fc
 8003222:	801a      	strh	r2, [r3, #0]
		fish_position_array[8] = 150;//Y
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	3310      	adds	r3, #16
 800322a:	2296      	movs	r2, #150	@ 0x96
 800322c:	801a      	strh	r2, [r3, #0]
		fish_position_array[9] = 2;//ID
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	3312      	adds	r3, #18
 8003234:	2202      	movs	r2, #2
 8003236:	801a      	strh	r2, [r3, #0]
		fish_position_array[10] = 2700;//X
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	3314      	adds	r3, #20
 800323e:	f640 228c 	movw	r2, #2700	@ 0xa8c
 8003242:	801a      	strh	r2, [r3, #0]
		fish_position_array[11] = 300;//Y
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	3316      	adds	r3, #22
 800324a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800324e:	801a      	strh	r2, [r3, #0]
		fish_position_array[12] = 2;//ID
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	3318      	adds	r3, #24
 8003256:	2202      	movs	r2, #2
 8003258:	801a      	strh	r2, [r3, #0]
		fish_position_array[13] = 3100;//X
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	331a      	adds	r3, #26
 8003260:	f640 421c 	movw	r2, #3100	@ 0xc1c
 8003264:	801a      	strh	r2, [r3, #0]
		fish_position_array[14] = 150;//Y
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	331c      	adds	r3, #28
 800326c:	2296      	movs	r2, #150	@ 0x96
 800326e:	801a      	strh	r2, [r3, #0]
		fish_position_array[15] = 2;//ID
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	331e      	adds	r3, #30
 8003276:	2202      	movs	r2, #2
 8003278:	801a      	strh	r2, [r3, #0]
		fish_position_array[16] = 3500;//X
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	3320      	adds	r3, #32
 8003280:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8003284:	801a      	strh	r2, [r3, #0]
		fish_position_array[17] = 300;//Y
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	3322      	adds	r3, #34	@ 0x22
 800328c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003290:	801a      	strh	r2, [r3, #0]
		mode_flag[4] = 1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
	...

080032a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	607b      	str	r3, [r7, #4]
 80032b2:	4b10      	ldr	r3, [pc, #64]	@ (80032f4 <HAL_MspInit+0x4c>)
 80032b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b6:	4a0f      	ldr	r2, [pc, #60]	@ (80032f4 <HAL_MspInit+0x4c>)
 80032b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80032be:	4b0d      	ldr	r3, [pc, #52]	@ (80032f4 <HAL_MspInit+0x4c>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032c6:	607b      	str	r3, [r7, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	603b      	str	r3, [r7, #0]
 80032ce:	4b09      	ldr	r3, [pc, #36]	@ (80032f4 <HAL_MspInit+0x4c>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	4a08      	ldr	r2, [pc, #32]	@ (80032f4 <HAL_MspInit+0x4c>)
 80032d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80032da:	4b06      	ldr	r3, [pc, #24]	@ (80032f4 <HAL_MspInit+0x4c>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e2:	603b      	str	r3, [r7, #0]
 80032e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40023800 	.word	0x40023800

080032f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	@ 0x28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003300:	f107 0314 	add.w	r3, r7, #20
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a19      	ldr	r2, [pc, #100]	@ (800337c <HAL_I2C_MspInit+0x84>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d12c      	bne.n	8003374 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	4b18      	ldr	r3, [pc, #96]	@ (8003380 <HAL_I2C_MspInit+0x88>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003322:	4a17      	ldr	r2, [pc, #92]	@ (8003380 <HAL_I2C_MspInit+0x88>)
 8003324:	f043 0302 	orr.w	r3, r3, #2
 8003328:	6313      	str	r3, [r2, #48]	@ 0x30
 800332a:	4b15      	ldr	r3, [pc, #84]	@ (8003380 <HAL_I2C_MspInit+0x88>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003336:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800333a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800333c:	2312      	movs	r3, #18
 800333e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003340:	2300      	movs	r3, #0
 8003342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003344:	2303      	movs	r3, #3
 8003346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003348:	2304      	movs	r3, #4
 800334a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800334c:	f107 0314 	add.w	r3, r7, #20
 8003350:	4619      	mov	r1, r3
 8003352:	480c      	ldr	r0, [pc, #48]	@ (8003384 <HAL_I2C_MspInit+0x8c>)
 8003354:	f000 ffc2 	bl	80042dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	4b08      	ldr	r3, [pc, #32]	@ (8003380 <HAL_I2C_MspInit+0x88>)
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	4a07      	ldr	r2, [pc, #28]	@ (8003380 <HAL_I2C_MspInit+0x88>)
 8003362:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003366:	6413      	str	r3, [r2, #64]	@ 0x40
 8003368:	4b05      	ldr	r3, [pc, #20]	@ (8003380 <HAL_I2C_MspInit+0x88>)
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003374:	bf00      	nop
 8003376:	3728      	adds	r7, #40	@ 0x28
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40005400 	.word	0x40005400
 8003380:	40023800 	.word	0x40023800
 8003384:	40020400 	.word	0x40020400

08003388 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003398:	d116      	bne.n	80033c8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	4b16      	ldr	r3, [pc, #88]	@ (80033f8 <HAL_TIM_Base_MspInit+0x70>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	4a15      	ldr	r2, [pc, #84]	@ (80033f8 <HAL_TIM_Base_MspInit+0x70>)
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033aa:	4b13      	ldr	r3, [pc, #76]	@ (80033f8 <HAL_TIM_Base_MspInit+0x70>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80033b6:	2200      	movs	r2, #0
 80033b8:	2100      	movs	r1, #0
 80033ba:	201c      	movs	r0, #28
 80033bc:	f000 fbe7 	bl	8003b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80033c0:	201c      	movs	r0, #28
 80033c2:	f000 fc00 	bl	8003bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80033c6:	e012      	b.n	80033ee <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a0b      	ldr	r2, [pc, #44]	@ (80033fc <HAL_TIM_Base_MspInit+0x74>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d10d      	bne.n	80033ee <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	4b08      	ldr	r3, [pc, #32]	@ (80033f8 <HAL_TIM_Base_MspInit+0x70>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	4a07      	ldr	r2, [pc, #28]	@ (80033f8 <HAL_TIM_Base_MspInit+0x70>)
 80033dc:	f043 0304 	orr.w	r3, r3, #4
 80033e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033e2:	4b05      	ldr	r3, [pc, #20]	@ (80033f8 <HAL_TIM_Base_MspInit+0x70>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	60bb      	str	r3, [r7, #8]
 80033ec:	68bb      	ldr	r3, [r7, #8]
}
 80033ee:	bf00      	nop
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40000800 	.word	0x40000800

08003400 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003408:	f107 030c 	add.w	r3, r7, #12
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a12      	ldr	r2, [pc, #72]	@ (8003468 <HAL_TIM_MspPostInit+0x68>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d11d      	bne.n	800345e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	4b11      	ldr	r3, [pc, #68]	@ (800346c <HAL_TIM_MspPostInit+0x6c>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342a:	4a10      	ldr	r2, [pc, #64]	@ (800346c <HAL_TIM_MspPostInit+0x6c>)
 800342c:	f043 0302 	orr.w	r3, r3, #2
 8003430:	6313      	str	r3, [r2, #48]	@ 0x30
 8003432:	4b0e      	ldr	r3, [pc, #56]	@ (800346c <HAL_TIM_MspPostInit+0x6c>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800343e:	2340      	movs	r3, #64	@ 0x40
 8003440:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003442:	2302      	movs	r3, #2
 8003444:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344a:	2300      	movs	r3, #0
 800344c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800344e:	2302      	movs	r3, #2
 8003450:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003452:	f107 030c 	add.w	r3, r7, #12
 8003456:	4619      	mov	r1, r3
 8003458:	4805      	ldr	r0, [pc, #20]	@ (8003470 <HAL_TIM_MspPostInit+0x70>)
 800345a:	f000 ff3f 	bl	80042dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800345e:	bf00      	nop
 8003460:	3720      	adds	r7, #32
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40000800 	.word	0x40000800
 800346c:	40023800 	.word	0x40023800
 8003470:	40020400 	.word	0x40020400

08003474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b092      	sub	sp, #72	@ 0x48
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800347c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a97      	ldr	r2, [pc, #604]	@ (80036f0 <HAL_UART_MspInit+0x27c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d17a      	bne.n	800358c <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	633b      	str	r3, [r7, #48]	@ 0x30
 800349a:	4b96      	ldr	r3, [pc, #600]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	4a95      	ldr	r2, [pc, #596]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 80034a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80034a6:	4b93      	ldr	r3, [pc, #588]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80034b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034b6:	4b8f      	ldr	r3, [pc, #572]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ba:	4a8e      	ldr	r2, [pc, #568]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 80034bc:	f043 0304 	orr.w	r3, r3, #4
 80034c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034c2:	4b8c      	ldr	r3, [pc, #560]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034d2:	4b88      	ldr	r3, [pc, #544]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d6:	4a87      	ldr	r2, [pc, #540]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 80034d8:	f043 0308 	orr.w	r3, r3, #8
 80034dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034de:	4b85      	ldr	r3, [pc, #532]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80034ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034ee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f0:	2302      	movs	r3, #2
 80034f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f8:	2303      	movs	r3, #3
 80034fa:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80034fc:	2308      	movs	r3, #8
 80034fe:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003500:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003504:	4619      	mov	r1, r3
 8003506:	487c      	ldr	r0, [pc, #496]	@ (80036f8 <HAL_UART_MspInit+0x284>)
 8003508:	f000 fee8 	bl	80042dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800350c:	2304      	movs	r3, #4
 800350e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003510:	2302      	movs	r3, #2
 8003512:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003514:	2300      	movs	r3, #0
 8003516:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003518:	2303      	movs	r3, #3
 800351a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800351c:	2308      	movs	r3, #8
 800351e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003520:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003524:	4619      	mov	r1, r3
 8003526:	4875      	ldr	r0, [pc, #468]	@ (80036fc <HAL_UART_MspInit+0x288>)
 8003528:	f000 fed8 	bl	80042dc <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800352c:	4b74      	ldr	r3, [pc, #464]	@ (8003700 <HAL_UART_MspInit+0x28c>)
 800352e:	4a75      	ldr	r2, [pc, #468]	@ (8003704 <HAL_UART_MspInit+0x290>)
 8003530:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8003532:	4b73      	ldr	r3, [pc, #460]	@ (8003700 <HAL_UART_MspInit+0x28c>)
 8003534:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003538:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800353a:	4b71      	ldr	r3, [pc, #452]	@ (8003700 <HAL_UART_MspInit+0x28c>)
 800353c:	2200      	movs	r2, #0
 800353e:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003540:	4b6f      	ldr	r3, [pc, #444]	@ (8003700 <HAL_UART_MspInit+0x28c>)
 8003542:	2200      	movs	r2, #0
 8003544:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003546:	4b6e      	ldr	r3, [pc, #440]	@ (8003700 <HAL_UART_MspInit+0x28c>)
 8003548:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800354c:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800354e:	4b6c      	ldr	r3, [pc, #432]	@ (8003700 <HAL_UART_MspInit+0x28c>)
 8003550:	2200      	movs	r2, #0
 8003552:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003554:	4b6a      	ldr	r3, [pc, #424]	@ (8003700 <HAL_UART_MspInit+0x28c>)
 8003556:	2200      	movs	r2, #0
 8003558:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800355a:	4b69      	ldr	r3, [pc, #420]	@ (8003700 <HAL_UART_MspInit+0x28c>)
 800355c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003560:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003562:	4b67      	ldr	r3, [pc, #412]	@ (8003700 <HAL_UART_MspInit+0x28c>)
 8003564:	2200      	movs	r2, #0
 8003566:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003568:	4b65      	ldr	r3, [pc, #404]	@ (8003700 <HAL_UART_MspInit+0x28c>)
 800356a:	2200      	movs	r2, #0
 800356c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800356e:	4864      	ldr	r0, [pc, #400]	@ (8003700 <HAL_UART_MspInit+0x28c>)
 8003570:	f000 fb44 	bl	8003bfc <HAL_DMA_Init>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800357a:	f7ff f97e 	bl	800287a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a5f      	ldr	r2, [pc, #380]	@ (8003700 <HAL_UART_MspInit+0x28c>)
 8003582:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003584:	4a5e      	ldr	r2, [pc, #376]	@ (8003700 <HAL_UART_MspInit+0x28c>)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800358a:	e0fa      	b.n	8003782 <HAL_UART_MspInit+0x30e>
  else if(huart->Instance==USART2)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a5d      	ldr	r2, [pc, #372]	@ (8003708 <HAL_UART_MspInit+0x294>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d15b      	bne.n	800364e <HAL_UART_MspInit+0x1da>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	627b      	str	r3, [r7, #36]	@ 0x24
 800359a:	4b56      	ldr	r3, [pc, #344]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 800359c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359e:	4a55      	ldr	r2, [pc, #340]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 80035a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80035a6:	4b53      	ldr	r3, [pc, #332]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80035b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	623b      	str	r3, [r7, #32]
 80035b6:	4b4f      	ldr	r3, [pc, #316]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ba:	4a4e      	ldr	r2, [pc, #312]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035c2:	4b4c      	ldr	r3, [pc, #304]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	623b      	str	r3, [r7, #32]
 80035cc:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80035ce:	230c      	movs	r3, #12
 80035d0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d2:	2302      	movs	r3, #2
 80035d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035da:	2303      	movs	r3, #3
 80035dc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035de:	2307      	movs	r3, #7
 80035e0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80035e6:	4619      	mov	r1, r3
 80035e8:	4848      	ldr	r0, [pc, #288]	@ (800370c <HAL_UART_MspInit+0x298>)
 80035ea:	f000 fe77 	bl	80042dc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80035ee:	4b48      	ldr	r3, [pc, #288]	@ (8003710 <HAL_UART_MspInit+0x29c>)
 80035f0:	4a48      	ldr	r2, [pc, #288]	@ (8003714 <HAL_UART_MspInit+0x2a0>)
 80035f2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80035f4:	4b46      	ldr	r3, [pc, #280]	@ (8003710 <HAL_UART_MspInit+0x29c>)
 80035f6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80035fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035fc:	4b44      	ldr	r3, [pc, #272]	@ (8003710 <HAL_UART_MspInit+0x29c>)
 80035fe:	2200      	movs	r2, #0
 8003600:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003602:	4b43      	ldr	r3, [pc, #268]	@ (8003710 <HAL_UART_MspInit+0x29c>)
 8003604:	2200      	movs	r2, #0
 8003606:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003608:	4b41      	ldr	r3, [pc, #260]	@ (8003710 <HAL_UART_MspInit+0x29c>)
 800360a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800360e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003610:	4b3f      	ldr	r3, [pc, #252]	@ (8003710 <HAL_UART_MspInit+0x29c>)
 8003612:	2200      	movs	r2, #0
 8003614:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003616:	4b3e      	ldr	r3, [pc, #248]	@ (8003710 <HAL_UART_MspInit+0x29c>)
 8003618:	2200      	movs	r2, #0
 800361a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800361c:	4b3c      	ldr	r3, [pc, #240]	@ (8003710 <HAL_UART_MspInit+0x29c>)
 800361e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003622:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003624:	4b3a      	ldr	r3, [pc, #232]	@ (8003710 <HAL_UART_MspInit+0x29c>)
 8003626:	2200      	movs	r2, #0
 8003628:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800362a:	4b39      	ldr	r3, [pc, #228]	@ (8003710 <HAL_UART_MspInit+0x29c>)
 800362c:	2200      	movs	r2, #0
 800362e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003630:	4837      	ldr	r0, [pc, #220]	@ (8003710 <HAL_UART_MspInit+0x29c>)
 8003632:	f000 fae3 	bl	8003bfc <HAL_DMA_Init>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_UART_MspInit+0x1cc>
      Error_Handler();
 800363c:	f7ff f91d 	bl	800287a <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a33      	ldr	r2, [pc, #204]	@ (8003710 <HAL_UART_MspInit+0x29c>)
 8003644:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003646:	4a32      	ldr	r2, [pc, #200]	@ (8003710 <HAL_UART_MspInit+0x29c>)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800364c:	e099      	b.n	8003782 <HAL_UART_MspInit+0x30e>
  else if(huart->Instance==USART3)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a31      	ldr	r2, [pc, #196]	@ (8003718 <HAL_UART_MspInit+0x2a4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d163      	bne.n	8003720 <HAL_UART_MspInit+0x2ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003658:	2300      	movs	r3, #0
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	4b25      	ldr	r3, [pc, #148]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 800365e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003660:	4a24      	ldr	r2, [pc, #144]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 8003662:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003666:	6413      	str	r3, [r2, #64]	@ 0x40
 8003668:	4b22      	ldr	r3, [pc, #136]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 800366a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003674:	2300      	movs	r3, #0
 8003676:	61bb      	str	r3, [r7, #24]
 8003678:	4b1e      	ldr	r3, [pc, #120]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 800367a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367c:	4a1d      	ldr	r2, [pc, #116]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 800367e:	f043 0304 	orr.w	r3, r3, #4
 8003682:	6313      	str	r3, [r2, #48]	@ 0x30
 8003684:	4b1b      	ldr	r3, [pc, #108]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 8003686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	4b17      	ldr	r3, [pc, #92]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 8003696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003698:	4a16      	ldr	r2, [pc, #88]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 800369a:	f043 0302 	orr.w	r3, r3, #2
 800369e:	6313      	str	r3, [r2, #48]	@ 0x30
 80036a0:	4b14      	ldr	r3, [pc, #80]	@ (80036f4 <HAL_UART_MspInit+0x280>)
 80036a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80036ac:	2320      	movs	r3, #32
 80036ae:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b0:	2302      	movs	r3, #2
 80036b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b8:	2303      	movs	r3, #3
 80036ba:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036bc:	2307      	movs	r3, #7
 80036be:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036c0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80036c4:	4619      	mov	r1, r3
 80036c6:	480c      	ldr	r0, [pc, #48]	@ (80036f8 <HAL_UART_MspInit+0x284>)
 80036c8:	f000 fe08 	bl	80042dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036d0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d2:	2302      	movs	r3, #2
 80036d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036da:	2303      	movs	r3, #3
 80036dc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036de:	2307      	movs	r3, #7
 80036e0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80036e6:	4619      	mov	r1, r3
 80036e8:	480c      	ldr	r0, [pc, #48]	@ (800371c <HAL_UART_MspInit+0x2a8>)
 80036ea:	f000 fdf7 	bl	80042dc <HAL_GPIO_Init>
}
 80036ee:	e048      	b.n	8003782 <HAL_UART_MspInit+0x30e>
 80036f0:	40005000 	.word	0x40005000
 80036f4:	40023800 	.word	0x40023800
 80036f8:	40020800 	.word	0x40020800
 80036fc:	40020c00 	.word	0x40020c00
 8003700:	200002f0 	.word	0x200002f0
 8003704:	40026010 	.word	0x40026010
 8003708:	40004400 	.word	0x40004400
 800370c:	40020000 	.word	0x40020000
 8003710:	20000350 	.word	0x20000350
 8003714:	40026088 	.word	0x40026088
 8003718:	40004800 	.word	0x40004800
 800371c:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a19      	ldr	r2, [pc, #100]	@ (800378c <HAL_UART_MspInit+0x318>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d12b      	bne.n	8003782 <HAL_UART_MspInit+0x30e>
    __HAL_RCC_USART6_CLK_ENABLE();
 800372a:	2300      	movs	r3, #0
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	4b18      	ldr	r3, [pc, #96]	@ (8003790 <HAL_UART_MspInit+0x31c>)
 8003730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003732:	4a17      	ldr	r2, [pc, #92]	@ (8003790 <HAL_UART_MspInit+0x31c>)
 8003734:	f043 0320 	orr.w	r3, r3, #32
 8003738:	6453      	str	r3, [r2, #68]	@ 0x44
 800373a:	4b15      	ldr	r3, [pc, #84]	@ (8003790 <HAL_UART_MspInit+0x31c>)
 800373c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373e:	f003 0320 	and.w	r3, r3, #32
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	4b11      	ldr	r3, [pc, #68]	@ (8003790 <HAL_UART_MspInit+0x31c>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374e:	4a10      	ldr	r2, [pc, #64]	@ (8003790 <HAL_UART_MspInit+0x31c>)
 8003750:	f043 0304 	orr.w	r3, r3, #4
 8003754:	6313      	str	r3, [r2, #48]	@ 0x30
 8003756:	4b0e      	ldr	r3, [pc, #56]	@ (8003790 <HAL_UART_MspInit+0x31c>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003762:	23c0      	movs	r3, #192	@ 0xc0
 8003764:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003766:	2302      	movs	r3, #2
 8003768:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376a:	2300      	movs	r3, #0
 800376c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800376e:	2303      	movs	r3, #3
 8003770:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003772:	2308      	movs	r3, #8
 8003774:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003776:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800377a:	4619      	mov	r1, r3
 800377c:	4805      	ldr	r0, [pc, #20]	@ (8003794 <HAL_UART_MspInit+0x320>)
 800377e:	f000 fdad 	bl	80042dc <HAL_GPIO_Init>
}
 8003782:	bf00      	nop
 8003784:	3748      	adds	r7, #72	@ 0x48
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40011400 	.word	0x40011400
 8003790:	40023800 	.word	0x40023800
 8003794:	40020800 	.word	0x40020800

08003798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800379c:	bf00      	nop
 800379e:	e7fd      	b.n	800379c <NMI_Handler+0x4>

080037a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037a4:	bf00      	nop
 80037a6:	e7fd      	b.n	80037a4 <HardFault_Handler+0x4>

080037a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037ac:	bf00      	nop
 80037ae:	e7fd      	b.n	80037ac <MemManage_Handler+0x4>

080037b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037b4:	bf00      	nop
 80037b6:	e7fd      	b.n	80037b4 <BusFault_Handler+0x4>

080037b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037bc:	bf00      	nop
 80037be:	e7fd      	b.n	80037bc <UsageFault_Handler+0x4>

080037c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037c4:	bf00      	nop
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037ce:	b480      	push	{r7}
 80037d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037e0:	bf00      	nop
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037ee:	f000 f8af 	bl	8003950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037f2:	bf00      	nop
 80037f4:	bd80      	pop	{r7, pc}
	...

080037f8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80037fc:	4802      	ldr	r0, [pc, #8]	@ (8003808 <DMA1_Stream0_IRQHandler+0x10>)
 80037fe:	f000 fb03 	bl	8003e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	200002f0 	.word	0x200002f0

0800380c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003810:	4802      	ldr	r0, [pc, #8]	@ (800381c <DMA1_Stream5_IRQHandler+0x10>)
 8003812:	f000 faf9 	bl	8003e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20000350 	.word	0x20000350

08003820 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003824:	4802      	ldr	r0, [pc, #8]	@ (8003830 <TIM2_IRQHandler+0x10>)
 8003826:	f002 ff75 	bl	8006714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000140 	.word	0x20000140

08003834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003838:	4b06      	ldr	r3, [pc, #24]	@ (8003854 <SystemInit+0x20>)
 800383a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383e:	4a05      	ldr	r2, [pc, #20]	@ (8003854 <SystemInit+0x20>)
 8003840:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003844:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003848:	bf00      	nop
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	e000ed00 	.word	0xe000ed00

08003858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003858:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003890 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800385c:	f7ff ffea 	bl	8003834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003860:	480c      	ldr	r0, [pc, #48]	@ (8003894 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003862:	490d      	ldr	r1, [pc, #52]	@ (8003898 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003864:	4a0d      	ldr	r2, [pc, #52]	@ (800389c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003868:	e002      	b.n	8003870 <LoopCopyDataInit>

0800386a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800386a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800386c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800386e:	3304      	adds	r3, #4

08003870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003874:	d3f9      	bcc.n	800386a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003876:	4a0a      	ldr	r2, [pc, #40]	@ (80038a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003878:	4c0a      	ldr	r4, [pc, #40]	@ (80038a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800387a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800387c:	e001      	b.n	8003882 <LoopFillZerobss>

0800387e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800387e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003880:	3204      	adds	r2, #4

08003882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003884:	d3fb      	bcc.n	800387e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003886:	f006 fdbd 	bl	800a404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800388a:	f7fd fc29 	bl	80010e0 <main>
  bx  lr    
 800388e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003890:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003898:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 800389c:	0800a718 	.word	0x0800a718
  ldr r2, =_sbss
 80038a0:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80038a4:	20000610 	.word	0x20000610

080038a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038a8:	e7fe      	b.n	80038a8 <ADC_IRQHandler>
	...

080038ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038b0:	4b0e      	ldr	r3, [pc, #56]	@ (80038ec <HAL_Init+0x40>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a0d      	ldr	r2, [pc, #52]	@ (80038ec <HAL_Init+0x40>)
 80038b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038bc:	4b0b      	ldr	r3, [pc, #44]	@ (80038ec <HAL_Init+0x40>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a0a      	ldr	r2, [pc, #40]	@ (80038ec <HAL_Init+0x40>)
 80038c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038c8:	4b08      	ldr	r3, [pc, #32]	@ (80038ec <HAL_Init+0x40>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a07      	ldr	r2, [pc, #28]	@ (80038ec <HAL_Init+0x40>)
 80038ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038d4:	2003      	movs	r0, #3
 80038d6:	f000 f94f 	bl	8003b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038da:	200f      	movs	r0, #15
 80038dc:	f000 f808 	bl	80038f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038e0:	f7ff fce2 	bl	80032a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40023c00 	.word	0x40023c00

080038f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038f8:	4b12      	ldr	r3, [pc, #72]	@ (8003944 <HAL_InitTick+0x54>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	4b12      	ldr	r3, [pc, #72]	@ (8003948 <HAL_InitTick+0x58>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	4619      	mov	r1, r3
 8003902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003906:	fbb3 f3f1 	udiv	r3, r3, r1
 800390a:	fbb2 f3f3 	udiv	r3, r2, r3
 800390e:	4618      	mov	r0, r3
 8003910:	f000 f967 	bl	8003be2 <HAL_SYSTICK_Config>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e00e      	b.n	800393c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b0f      	cmp	r3, #15
 8003922:	d80a      	bhi.n	800393a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003924:	2200      	movs	r2, #0
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	f04f 30ff 	mov.w	r0, #4294967295
 800392c:	f000 f92f 	bl	8003b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003930:	4a06      	ldr	r2, [pc, #24]	@ (800394c <HAL_InitTick+0x5c>)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	e000      	b.n	800393c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000060 	.word	0x20000060
 8003948:	20000068 	.word	0x20000068
 800394c:	20000064 	.word	0x20000064

08003950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003954:	4b06      	ldr	r3, [pc, #24]	@ (8003970 <HAL_IncTick+0x20>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	461a      	mov	r2, r3
 800395a:	4b06      	ldr	r3, [pc, #24]	@ (8003974 <HAL_IncTick+0x24>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4413      	add	r3, r2
 8003960:	4a04      	ldr	r2, [pc, #16]	@ (8003974 <HAL_IncTick+0x24>)
 8003962:	6013      	str	r3, [r2, #0]
}
 8003964:	bf00      	nop
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	20000068 	.word	0x20000068
 8003974:	200004d4 	.word	0x200004d4

08003978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return uwTick;
 800397c:	4b03      	ldr	r3, [pc, #12]	@ (800398c <HAL_GetTick+0x14>)
 800397e:	681b      	ldr	r3, [r3, #0]
}
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	200004d4 	.word	0x200004d4

08003990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003998:	f7ff ffee 	bl	8003978 <HAL_GetTick>
 800399c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a8:	d005      	beq.n	80039b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039aa:	4b0a      	ldr	r3, [pc, #40]	@ (80039d4 <HAL_Delay+0x44>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4413      	add	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039b6:	bf00      	nop
 80039b8:	f7ff ffde 	bl	8003978 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d8f7      	bhi.n	80039b8 <HAL_Delay+0x28>
  {
  }
}
 80039c8:	bf00      	nop
 80039ca:	bf00      	nop
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20000068 	.word	0x20000068

080039d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e8:	4b0c      	ldr	r3, [pc, #48]	@ (8003a1c <__NVIC_SetPriorityGrouping+0x44>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039f4:	4013      	ands	r3, r2
 80039f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a0a:	4a04      	ldr	r2, [pc, #16]	@ (8003a1c <__NVIC_SetPriorityGrouping+0x44>)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	60d3      	str	r3, [r2, #12]
}
 8003a10:	bf00      	nop
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	e000ed00 	.word	0xe000ed00

08003a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a24:	4b04      	ldr	r3, [pc, #16]	@ (8003a38 <__NVIC_GetPriorityGrouping+0x18>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	0a1b      	lsrs	r3, r3, #8
 8003a2a:	f003 0307 	and.w	r3, r3, #7
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	e000ed00 	.word	0xe000ed00

08003a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	db0b      	blt.n	8003a66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	f003 021f 	and.w	r2, r3, #31
 8003a54:	4907      	ldr	r1, [pc, #28]	@ (8003a74 <__NVIC_EnableIRQ+0x38>)
 8003a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	2001      	movs	r0, #1
 8003a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	e000e100 	.word	0xe000e100

08003a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	6039      	str	r1, [r7, #0]
 8003a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	db0a      	blt.n	8003aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	490c      	ldr	r1, [pc, #48]	@ (8003ac4 <__NVIC_SetPriority+0x4c>)
 8003a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a96:	0112      	lsls	r2, r2, #4
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003aa0:	e00a      	b.n	8003ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	4908      	ldr	r1, [pc, #32]	@ (8003ac8 <__NVIC_SetPriority+0x50>)
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	3b04      	subs	r3, #4
 8003ab0:	0112      	lsls	r2, r2, #4
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	761a      	strb	r2, [r3, #24]
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	e000e100 	.word	0xe000e100
 8003ac8:	e000ed00 	.word	0xe000ed00

08003acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b089      	sub	sp, #36	@ 0x24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f1c3 0307 	rsb	r3, r3, #7
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	bf28      	it	cs
 8003aea:	2304      	movcs	r3, #4
 8003aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	3304      	adds	r3, #4
 8003af2:	2b06      	cmp	r3, #6
 8003af4:	d902      	bls.n	8003afc <NVIC_EncodePriority+0x30>
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	3b03      	subs	r3, #3
 8003afa:	e000      	b.n	8003afe <NVIC_EncodePriority+0x32>
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b00:	f04f 32ff 	mov.w	r2, #4294967295
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	43da      	mvns	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	401a      	ands	r2, r3
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b14:	f04f 31ff 	mov.w	r1, #4294967295
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1e:	43d9      	mvns	r1, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b24:	4313      	orrs	r3, r2
         );
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3724      	adds	r7, #36	@ 0x24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b44:	d301      	bcc.n	8003b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b46:	2301      	movs	r3, #1
 8003b48:	e00f      	b.n	8003b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b74 <SysTick_Config+0x40>)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b52:	210f      	movs	r1, #15
 8003b54:	f04f 30ff 	mov.w	r0, #4294967295
 8003b58:	f7ff ff8e 	bl	8003a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b5c:	4b05      	ldr	r3, [pc, #20]	@ (8003b74 <SysTick_Config+0x40>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b62:	4b04      	ldr	r3, [pc, #16]	@ (8003b74 <SysTick_Config+0x40>)
 8003b64:	2207      	movs	r2, #7
 8003b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	e000e010 	.word	0xe000e010

08003b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff ff29 	bl	80039d8 <__NVIC_SetPriorityGrouping>
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b086      	sub	sp, #24
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	4603      	mov	r3, r0
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ba0:	f7ff ff3e 	bl	8003a20 <__NVIC_GetPriorityGrouping>
 8003ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	68b9      	ldr	r1, [r7, #8]
 8003baa:	6978      	ldr	r0, [r7, #20]
 8003bac:	f7ff ff8e 	bl	8003acc <NVIC_EncodePriority>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff ff5d 	bl	8003a78 <__NVIC_SetPriority>
}
 8003bbe:	bf00      	nop
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	4603      	mov	r3, r0
 8003bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff ff31 	bl	8003a3c <__NVIC_EnableIRQ>
}
 8003bda:	bf00      	nop
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff ffa2 	bl	8003b34 <SysTick_Config>
 8003bf0:	4603      	mov	r3, r0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c08:	f7ff feb6 	bl	8003978 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e099      	b.n	8003d4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0201 	bic.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c38:	e00f      	b.n	8003c5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c3a:	f7ff fe9d 	bl	8003978 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b05      	cmp	r3, #5
 8003c46:	d908      	bls.n	8003c5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2203      	movs	r2, #3
 8003c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e078      	b.n	8003d4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1e8      	bne.n	8003c3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	4b38      	ldr	r3, [pc, #224]	@ (8003d54 <HAL_DMA_Init+0x158>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d107      	bne.n	8003cc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f023 0307 	bic.w	r3, r3, #7
 8003cda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d117      	bne.n	8003d1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00e      	beq.n	8003d1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 fa6f 	bl	80041e4 <DMA_CheckFifoParam>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2240      	movs	r2, #64	@ 0x40
 8003d10:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e016      	b.n	8003d4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fa26 	bl	8004178 <DMA_CalcBaseAndBitshift>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d34:	223f      	movs	r2, #63	@ 0x3f
 8003d36:	409a      	lsls	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	f010803f 	.word	0xf010803f

08003d58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_DMA_Start_IT+0x26>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e040      	b.n	8003e00 <HAL_DMA_Start_IT+0xa8>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d12f      	bne.n	8003df2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2202      	movs	r2, #2
 8003d96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 f9b8 	bl	800411c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db0:	223f      	movs	r2, #63	@ 0x3f
 8003db2:	409a      	lsls	r2, r3
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0216 	orr.w	r2, r2, #22
 8003dc6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d007      	beq.n	8003de0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0208 	orr.w	r2, r2, #8
 8003dde:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	e005      	b.n	8003dfe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e14:	4b8e      	ldr	r3, [pc, #568]	@ (8004050 <HAL_DMA_IRQHandler+0x248>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a8e      	ldr	r2, [pc, #568]	@ (8004054 <HAL_DMA_IRQHandler+0x24c>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	0a9b      	lsrs	r3, r3, #10
 8003e20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e32:	2208      	movs	r2, #8
 8003e34:	409a      	lsls	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d01a      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d013      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0204 	bic.w	r2, r2, #4
 8003e5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e60:	2208      	movs	r2, #8
 8003e62:	409a      	lsls	r2, r3
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e6c:	f043 0201 	orr.w	r2, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e78:	2201      	movs	r2, #1
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d012      	beq.n	8003eaa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00b      	beq.n	8003eaa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e96:	2201      	movs	r2, #1
 8003e98:	409a      	lsls	r2, r3
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea2:	f043 0202 	orr.w	r2, r3, #2
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eae:	2204      	movs	r2, #4
 8003eb0:	409a      	lsls	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d012      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00b      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ecc:	2204      	movs	r2, #4
 8003ece:	409a      	lsls	r2, r3
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed8:	f043 0204 	orr.w	r2, r3, #4
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee4:	2210      	movs	r2, #16
 8003ee6:	409a      	lsls	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d043      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d03c      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f02:	2210      	movs	r2, #16
 8003f04:	409a      	lsls	r2, r3
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d018      	beq.n	8003f4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d108      	bne.n	8003f38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d024      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	4798      	blx	r3
 8003f36:	e01f      	b.n	8003f78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01b      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	4798      	blx	r3
 8003f48:	e016      	b.n	8003f78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d107      	bne.n	8003f68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0208 	bic.w	r2, r2, #8
 8003f66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	409a      	lsls	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4013      	ands	r3, r2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 808f 	beq.w	80040a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 8087 	beq.w	80040a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	409a      	lsls	r2, r3
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b05      	cmp	r3, #5
 8003fb0:	d136      	bne.n	8004020 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0216 	bic.w	r2, r2, #22
 8003fc0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695a      	ldr	r2, [r3, #20]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fd0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d103      	bne.n	8003fe2 <HAL_DMA_IRQHandler+0x1da>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d007      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0208 	bic.w	r2, r2, #8
 8003ff0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff6:	223f      	movs	r2, #63	@ 0x3f
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004012:	2b00      	cmp	r3, #0
 8004014:	d07e      	beq.n	8004114 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	4798      	blx	r3
        }
        return;
 800401e:	e079      	b.n	8004114 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d01d      	beq.n	800406a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10d      	bne.n	8004058 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004040:	2b00      	cmp	r3, #0
 8004042:	d031      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	4798      	blx	r3
 800404c:	e02c      	b.n	80040a8 <HAL_DMA_IRQHandler+0x2a0>
 800404e:	bf00      	nop
 8004050:	20000060 	.word	0x20000060
 8004054:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405c:	2b00      	cmp	r3, #0
 800405e:	d023      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	4798      	blx	r3
 8004068:	e01e      	b.n	80040a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10f      	bne.n	8004098 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0210 	bic.w	r2, r2, #16
 8004086:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d032      	beq.n	8004116 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d022      	beq.n	8004102 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2205      	movs	r2, #5
 80040c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0201 	bic.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	3301      	adds	r3, #1
 80040d8:	60bb      	str	r3, [r7, #8]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d307      	bcc.n	80040f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f2      	bne.n	80040d4 <HAL_DMA_IRQHandler+0x2cc>
 80040ee:	e000      	b.n	80040f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80040f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004106:	2b00      	cmp	r3, #0
 8004108:	d005      	beq.n	8004116 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	4798      	blx	r3
 8004112:	e000      	b.n	8004116 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004114:	bf00      	nop
    }
  }
}
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
 8004128:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004138:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b40      	cmp	r3, #64	@ 0x40
 8004148:	d108      	bne.n	800415c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800415a:	e007      	b.n	800416c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	60da      	str	r2, [r3, #12]
}
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	b2db      	uxtb	r3, r3
 8004186:	3b10      	subs	r3, #16
 8004188:	4a14      	ldr	r2, [pc, #80]	@ (80041dc <DMA_CalcBaseAndBitshift+0x64>)
 800418a:	fba2 2303 	umull	r2, r3, r2, r3
 800418e:	091b      	lsrs	r3, r3, #4
 8004190:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004192:	4a13      	ldr	r2, [pc, #76]	@ (80041e0 <DMA_CalcBaseAndBitshift+0x68>)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4413      	add	r3, r2
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d909      	bls.n	80041ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80041ae:	f023 0303 	bic.w	r3, r3, #3
 80041b2:	1d1a      	adds	r2, r3, #4
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80041b8:	e007      	b.n	80041ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80041c2:	f023 0303 	bic.w	r3, r3, #3
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	aaaaaaab 	.word	0xaaaaaaab
 80041e0:	0800a488 	.word	0x0800a488

080041e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d11f      	bne.n	800423e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b03      	cmp	r3, #3
 8004202:	d856      	bhi.n	80042b2 <DMA_CheckFifoParam+0xce>
 8004204:	a201      	add	r2, pc, #4	@ (adr r2, 800420c <DMA_CheckFifoParam+0x28>)
 8004206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420a:	bf00      	nop
 800420c:	0800421d 	.word	0x0800421d
 8004210:	0800422f 	.word	0x0800422f
 8004214:	0800421d 	.word	0x0800421d
 8004218:	080042b3 	.word	0x080042b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004220:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d046      	beq.n	80042b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800422c:	e043      	b.n	80042b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004232:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004236:	d140      	bne.n	80042ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800423c:	e03d      	b.n	80042ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004246:	d121      	bne.n	800428c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b03      	cmp	r3, #3
 800424c:	d837      	bhi.n	80042be <DMA_CheckFifoParam+0xda>
 800424e:	a201      	add	r2, pc, #4	@ (adr r2, 8004254 <DMA_CheckFifoParam+0x70>)
 8004250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004254:	08004265 	.word	0x08004265
 8004258:	0800426b 	.word	0x0800426b
 800425c:	08004265 	.word	0x08004265
 8004260:	0800427d 	.word	0x0800427d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]
      break;
 8004268:	e030      	b.n	80042cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d025      	beq.n	80042c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800427a:	e022      	b.n	80042c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004280:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004284:	d11f      	bne.n	80042c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800428a:	e01c      	b.n	80042c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d903      	bls.n	800429a <DMA_CheckFifoParam+0xb6>
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b03      	cmp	r3, #3
 8004296:	d003      	beq.n	80042a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004298:	e018      	b.n	80042cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	73fb      	strb	r3, [r7, #15]
      break;
 800429e:	e015      	b.n	80042cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00e      	beq.n	80042ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	73fb      	strb	r3, [r7, #15]
      break;
 80042b0:	e00b      	b.n	80042ca <DMA_CheckFifoParam+0xe6>
      break;
 80042b2:	bf00      	nop
 80042b4:	e00a      	b.n	80042cc <DMA_CheckFifoParam+0xe8>
      break;
 80042b6:	bf00      	nop
 80042b8:	e008      	b.n	80042cc <DMA_CheckFifoParam+0xe8>
      break;
 80042ba:	bf00      	nop
 80042bc:	e006      	b.n	80042cc <DMA_CheckFifoParam+0xe8>
      break;
 80042be:	bf00      	nop
 80042c0:	e004      	b.n	80042cc <DMA_CheckFifoParam+0xe8>
      break;
 80042c2:	bf00      	nop
 80042c4:	e002      	b.n	80042cc <DMA_CheckFifoParam+0xe8>
      break;   
 80042c6:	bf00      	nop
 80042c8:	e000      	b.n	80042cc <DMA_CheckFifoParam+0xe8>
      break;
 80042ca:	bf00      	nop
    }
  } 
  
  return status; 
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop

080042dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042dc:	b480      	push	{r7}
 80042de:	b089      	sub	sp, #36	@ 0x24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
 80042f6:	e165      	b.n	80045c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042f8:	2201      	movs	r2, #1
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4013      	ands	r3, r2
 800430a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	429a      	cmp	r2, r3
 8004312:	f040 8154 	bne.w	80045be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	2b01      	cmp	r3, #1
 8004320:	d005      	beq.n	800432e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800432a:	2b02      	cmp	r3, #2
 800432c:	d130      	bne.n	8004390 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	2203      	movs	r2, #3
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	43db      	mvns	r3, r3
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	4013      	ands	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	4313      	orrs	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004364:	2201      	movs	r2, #1
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	43db      	mvns	r3, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4013      	ands	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	091b      	lsrs	r3, r3, #4
 800437a:	f003 0201 	and.w	r2, r3, #1
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4313      	orrs	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f003 0303 	and.w	r3, r3, #3
 8004398:	2b03      	cmp	r3, #3
 800439a:	d017      	beq.n	80043cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	2203      	movs	r2, #3
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	43db      	mvns	r3, r3
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	4013      	ands	r3, r2
 80043b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d123      	bne.n	8004420 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	08da      	lsrs	r2, r3, #3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3208      	adds	r2, #8
 80043e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	220f      	movs	r2, #15
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	43db      	mvns	r3, r3
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4013      	ands	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4313      	orrs	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	08da      	lsrs	r2, r3, #3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3208      	adds	r2, #8
 800441a:	69b9      	ldr	r1, [r7, #24]
 800441c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	2203      	movs	r2, #3
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	43db      	mvns	r3, r3
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4013      	ands	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 0203 	and.w	r2, r3, #3
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4313      	orrs	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 80ae 	beq.w	80045be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	4b5d      	ldr	r3, [pc, #372]	@ (80045dc <HAL_GPIO_Init+0x300>)
 8004468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446a:	4a5c      	ldr	r2, [pc, #368]	@ (80045dc <HAL_GPIO_Init+0x300>)
 800446c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004470:	6453      	str	r3, [r2, #68]	@ 0x44
 8004472:	4b5a      	ldr	r3, [pc, #360]	@ (80045dc <HAL_GPIO_Init+0x300>)
 8004474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800447e:	4a58      	ldr	r2, [pc, #352]	@ (80045e0 <HAL_GPIO_Init+0x304>)
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	089b      	lsrs	r3, r3, #2
 8004484:	3302      	adds	r3, #2
 8004486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800448a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	220f      	movs	r2, #15
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	43db      	mvns	r3, r3
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4013      	ands	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a4f      	ldr	r2, [pc, #316]	@ (80045e4 <HAL_GPIO_Init+0x308>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d025      	beq.n	80044f6 <HAL_GPIO_Init+0x21a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a4e      	ldr	r2, [pc, #312]	@ (80045e8 <HAL_GPIO_Init+0x30c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d01f      	beq.n	80044f2 <HAL_GPIO_Init+0x216>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a4d      	ldr	r2, [pc, #308]	@ (80045ec <HAL_GPIO_Init+0x310>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d019      	beq.n	80044ee <HAL_GPIO_Init+0x212>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a4c      	ldr	r2, [pc, #304]	@ (80045f0 <HAL_GPIO_Init+0x314>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <HAL_GPIO_Init+0x20e>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a4b      	ldr	r2, [pc, #300]	@ (80045f4 <HAL_GPIO_Init+0x318>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00d      	beq.n	80044e6 <HAL_GPIO_Init+0x20a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a4a      	ldr	r2, [pc, #296]	@ (80045f8 <HAL_GPIO_Init+0x31c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d007      	beq.n	80044e2 <HAL_GPIO_Init+0x206>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a49      	ldr	r2, [pc, #292]	@ (80045fc <HAL_GPIO_Init+0x320>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d101      	bne.n	80044de <HAL_GPIO_Init+0x202>
 80044da:	2306      	movs	r3, #6
 80044dc:	e00c      	b.n	80044f8 <HAL_GPIO_Init+0x21c>
 80044de:	2307      	movs	r3, #7
 80044e0:	e00a      	b.n	80044f8 <HAL_GPIO_Init+0x21c>
 80044e2:	2305      	movs	r3, #5
 80044e4:	e008      	b.n	80044f8 <HAL_GPIO_Init+0x21c>
 80044e6:	2304      	movs	r3, #4
 80044e8:	e006      	b.n	80044f8 <HAL_GPIO_Init+0x21c>
 80044ea:	2303      	movs	r3, #3
 80044ec:	e004      	b.n	80044f8 <HAL_GPIO_Init+0x21c>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e002      	b.n	80044f8 <HAL_GPIO_Init+0x21c>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <HAL_GPIO_Init+0x21c>
 80044f6:	2300      	movs	r3, #0
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	f002 0203 	and.w	r2, r2, #3
 80044fe:	0092      	lsls	r2, r2, #2
 8004500:	4093      	lsls	r3, r2
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	4313      	orrs	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004508:	4935      	ldr	r1, [pc, #212]	@ (80045e0 <HAL_GPIO_Init+0x304>)
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	089b      	lsrs	r3, r3, #2
 800450e:	3302      	adds	r3, #2
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004516:	4b3a      	ldr	r3, [pc, #232]	@ (8004600 <HAL_GPIO_Init+0x324>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	43db      	mvns	r3, r3
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	4013      	ands	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4313      	orrs	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800453a:	4a31      	ldr	r2, [pc, #196]	@ (8004600 <HAL_GPIO_Init+0x324>)
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004540:	4b2f      	ldr	r3, [pc, #188]	@ (8004600 <HAL_GPIO_Init+0x324>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	43db      	mvns	r3, r3
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	4013      	ands	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004564:	4a26      	ldr	r2, [pc, #152]	@ (8004600 <HAL_GPIO_Init+0x324>)
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800456a:	4b25      	ldr	r3, [pc, #148]	@ (8004600 <HAL_GPIO_Init+0x324>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	43db      	mvns	r3, r3
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	4013      	ands	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800458e:	4a1c      	ldr	r2, [pc, #112]	@ (8004600 <HAL_GPIO_Init+0x324>)
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004594:	4b1a      	ldr	r3, [pc, #104]	@ (8004600 <HAL_GPIO_Init+0x324>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	43db      	mvns	r3, r3
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	4013      	ands	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045b8:	4a11      	ldr	r2, [pc, #68]	@ (8004600 <HAL_GPIO_Init+0x324>)
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	3301      	adds	r3, #1
 80045c2:	61fb      	str	r3, [r7, #28]
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	2b0f      	cmp	r3, #15
 80045c8:	f67f ae96 	bls.w	80042f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045cc:	bf00      	nop
 80045ce:	bf00      	nop
 80045d0:	3724      	adds	r7, #36	@ 0x24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40023800 	.word	0x40023800
 80045e0:	40013800 	.word	0x40013800
 80045e4:	40020000 	.word	0x40020000
 80045e8:	40020400 	.word	0x40020400
 80045ec:	40020800 	.word	0x40020800
 80045f0:	40020c00 	.word	0x40020c00
 80045f4:	40021000 	.word	0x40021000
 80045f8:	40021400 	.word	0x40021400
 80045fc:	40021800 	.word	0x40021800
 8004600:	40013c00 	.word	0x40013c00

08004604 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	460b      	mov	r3, r1
 800460e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	887b      	ldrh	r3, [r7, #2]
 8004616:	4013      	ands	r3, r2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800461c:	2301      	movs	r3, #1
 800461e:	73fb      	strb	r3, [r7, #15]
 8004620:	e001      	b.n	8004626 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004622:	2300      	movs	r3, #0
 8004624:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004626:	7bfb      	ldrb	r3, [r7, #15]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	807b      	strh	r3, [r7, #2]
 8004640:	4613      	mov	r3, r2
 8004642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004644:	787b      	ldrb	r3, [r7, #1]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800464a:	887a      	ldrh	r2, [r7, #2]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004650:	e003      	b.n	800465a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004652:	887b      	ldrh	r3, [r7, #2]
 8004654:	041a      	lsls	r2, r3, #16
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	619a      	str	r2, [r3, #24]
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004666:	b480      	push	{r7}
 8004668:	b085      	sub	sp, #20
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	460b      	mov	r3, r1
 8004670:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004678:	887a      	ldrh	r2, [r7, #2]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4013      	ands	r3, r2
 800467e:	041a      	lsls	r2, r3, #16
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	43d9      	mvns	r1, r3
 8004684:	887b      	ldrh	r3, [r7, #2]
 8004686:	400b      	ands	r3, r1
 8004688:	431a      	orrs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	619a      	str	r2, [r3, #24]
}
 800468e:	bf00      	nop
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e12b      	b.n	8004906 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fe fe18 	bl	80032f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2224      	movs	r2, #36	@ 0x24
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0201 	bic.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004700:	f001 f932 	bl	8005968 <HAL_RCC_GetPCLK1Freq>
 8004704:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	4a81      	ldr	r2, [pc, #516]	@ (8004910 <HAL_I2C_Init+0x274>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d807      	bhi.n	8004720 <HAL_I2C_Init+0x84>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4a80      	ldr	r2, [pc, #512]	@ (8004914 <HAL_I2C_Init+0x278>)
 8004714:	4293      	cmp	r3, r2
 8004716:	bf94      	ite	ls
 8004718:	2301      	movls	r3, #1
 800471a:	2300      	movhi	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	e006      	b.n	800472e <HAL_I2C_Init+0x92>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4a7d      	ldr	r2, [pc, #500]	@ (8004918 <HAL_I2C_Init+0x27c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	bf94      	ite	ls
 8004728:	2301      	movls	r3, #1
 800472a:	2300      	movhi	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e0e7      	b.n	8004906 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4a78      	ldr	r2, [pc, #480]	@ (800491c <HAL_I2C_Init+0x280>)
 800473a:	fba2 2303 	umull	r2, r3, r2, r3
 800473e:	0c9b      	lsrs	r3, r3, #18
 8004740:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	4a6a      	ldr	r2, [pc, #424]	@ (8004910 <HAL_I2C_Init+0x274>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d802      	bhi.n	8004770 <HAL_I2C_Init+0xd4>
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	3301      	adds	r3, #1
 800476e:	e009      	b.n	8004784 <HAL_I2C_Init+0xe8>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004776:	fb02 f303 	mul.w	r3, r2, r3
 800477a:	4a69      	ldr	r2, [pc, #420]	@ (8004920 <HAL_I2C_Init+0x284>)
 800477c:	fba2 2303 	umull	r2, r3, r2, r3
 8004780:	099b      	lsrs	r3, r3, #6
 8004782:	3301      	adds	r3, #1
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6812      	ldr	r2, [r2, #0]
 8004788:	430b      	orrs	r3, r1
 800478a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004796:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	495c      	ldr	r1, [pc, #368]	@ (8004910 <HAL_I2C_Init+0x274>)
 80047a0:	428b      	cmp	r3, r1
 80047a2:	d819      	bhi.n	80047d8 <HAL_I2C_Init+0x13c>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	1e59      	subs	r1, r3, #1
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80047b2:	1c59      	adds	r1, r3, #1
 80047b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80047b8:	400b      	ands	r3, r1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <HAL_I2C_Init+0x138>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	1e59      	subs	r1, r3, #1
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80047cc:	3301      	adds	r3, #1
 80047ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d2:	e051      	b.n	8004878 <HAL_I2C_Init+0x1dc>
 80047d4:	2304      	movs	r3, #4
 80047d6:	e04f      	b.n	8004878 <HAL_I2C_Init+0x1dc>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d111      	bne.n	8004804 <HAL_I2C_Init+0x168>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	1e58      	subs	r0, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6859      	ldr	r1, [r3, #4]
 80047e8:	460b      	mov	r3, r1
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	440b      	add	r3, r1
 80047ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80047f2:	3301      	adds	r3, #1
 80047f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bf0c      	ite	eq
 80047fc:	2301      	moveq	r3, #1
 80047fe:	2300      	movne	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	e012      	b.n	800482a <HAL_I2C_Init+0x18e>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	1e58      	subs	r0, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6859      	ldr	r1, [r3, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	0099      	lsls	r1, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	fbb0 f3f3 	udiv	r3, r0, r3
 800481a:	3301      	adds	r3, #1
 800481c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf0c      	ite	eq
 8004824:	2301      	moveq	r3, #1
 8004826:	2300      	movne	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_I2C_Init+0x196>
 800482e:	2301      	movs	r3, #1
 8004830:	e022      	b.n	8004878 <HAL_I2C_Init+0x1dc>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10e      	bne.n	8004858 <HAL_I2C_Init+0x1bc>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	1e58      	subs	r0, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6859      	ldr	r1, [r3, #4]
 8004842:	460b      	mov	r3, r1
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	440b      	add	r3, r1
 8004848:	fbb0 f3f3 	udiv	r3, r0, r3
 800484c:	3301      	adds	r3, #1
 800484e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004856:	e00f      	b.n	8004878 <HAL_I2C_Init+0x1dc>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	1e58      	subs	r0, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6859      	ldr	r1, [r3, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	0099      	lsls	r1, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	fbb0 f3f3 	udiv	r3, r0, r3
 800486e:	3301      	adds	r3, #1
 8004870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004874:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	6809      	ldr	r1, [r1, #0]
 800487c:	4313      	orrs	r3, r2
 800487e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	69da      	ldr	r2, [r3, #28]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80048a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6911      	ldr	r1, [r2, #16]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	68d2      	ldr	r2, [r2, #12]
 80048b2:	4311      	orrs	r1, r2
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	430b      	orrs	r3, r1
 80048ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695a      	ldr	r2, [r3, #20]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	000186a0 	.word	0x000186a0
 8004914:	001e847f 	.word	0x001e847f
 8004918:	003d08ff 	.word	0x003d08ff
 800491c:	431bde83 	.word	0x431bde83
 8004920:	10624dd3 	.word	0x10624dd3

08004924 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af02      	add	r7, sp, #8
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	4608      	mov	r0, r1
 800492e:	4611      	mov	r1, r2
 8004930:	461a      	mov	r2, r3
 8004932:	4603      	mov	r3, r0
 8004934:	817b      	strh	r3, [r7, #10]
 8004936:	460b      	mov	r3, r1
 8004938:	813b      	strh	r3, [r7, #8]
 800493a:	4613      	mov	r3, r2
 800493c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800493e:	f7ff f81b 	bl	8003978 <HAL_GetTick>
 8004942:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b20      	cmp	r3, #32
 800494e:	f040 80d9 	bne.w	8004b04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	2319      	movs	r3, #25
 8004958:	2201      	movs	r2, #1
 800495a:	496d      	ldr	r1, [pc, #436]	@ (8004b10 <HAL_I2C_Mem_Write+0x1ec>)
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 fc8b 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004968:	2302      	movs	r3, #2
 800496a:	e0cc      	b.n	8004b06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_I2C_Mem_Write+0x56>
 8004976:	2302      	movs	r3, #2
 8004978:	e0c5      	b.n	8004b06 <HAL_I2C_Mem_Write+0x1e2>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b01      	cmp	r3, #1
 800498e:	d007      	beq.n	80049a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2221      	movs	r2, #33	@ 0x21
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2240      	movs	r2, #64	@ 0x40
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a3a      	ldr	r2, [r7, #32]
 80049ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80049d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4a4d      	ldr	r2, [pc, #308]	@ (8004b14 <HAL_I2C_Mem_Write+0x1f0>)
 80049e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049e2:	88f8      	ldrh	r0, [r7, #6]
 80049e4:	893a      	ldrh	r2, [r7, #8]
 80049e6:	8979      	ldrh	r1, [r7, #10]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	9301      	str	r3, [sp, #4]
 80049ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	4603      	mov	r3, r0
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 fac2 	bl	8004f7c <I2C_RequestMemoryWrite>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d052      	beq.n	8004aa4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e081      	b.n	8004b06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 fd50 	bl	80054ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00d      	beq.n	8004a2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d107      	bne.n	8004a2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e06b      	b.n	8004b06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a32:	781a      	ldrb	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d11b      	bne.n	8004aa4 <HAL_I2C_Mem_Write+0x180>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d017      	beq.n	8004aa4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a78:	781a      	ldrb	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1aa      	bne.n	8004a02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 fd43 	bl	800553c <I2C_WaitOnBTFFlagUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00d      	beq.n	8004ad8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d107      	bne.n	8004ad4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ad2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e016      	b.n	8004b06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b00:	2300      	movs	r3, #0
 8004b02:	e000      	b.n	8004b06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b04:	2302      	movs	r3, #2
  }
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	00100002 	.word	0x00100002
 8004b14:	ffff0000 	.word	0xffff0000

08004b18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08c      	sub	sp, #48	@ 0x30
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	4608      	mov	r0, r1
 8004b22:	4611      	mov	r1, r2
 8004b24:	461a      	mov	r2, r3
 8004b26:	4603      	mov	r3, r0
 8004b28:	817b      	strh	r3, [r7, #10]
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	813b      	strh	r3, [r7, #8]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b32:	f7fe ff21 	bl	8003978 <HAL_GetTick>
 8004b36:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	f040 8214 	bne.w	8004f6e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	2319      	movs	r3, #25
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	497b      	ldr	r1, [pc, #492]	@ (8004d3c <HAL_I2C_Mem_Read+0x224>)
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 fb91 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	e207      	b.n	8004f70 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d101      	bne.n	8004b6e <HAL_I2C_Mem_Read+0x56>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	e200      	b.n	8004f70 <HAL_I2C_Mem_Read+0x458>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d007      	beq.n	8004b94 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ba2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2222      	movs	r2, #34	@ 0x22
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2240      	movs	r2, #64	@ 0x40
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4a5b      	ldr	r2, [pc, #364]	@ (8004d40 <HAL_I2C_Mem_Read+0x228>)
 8004bd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bd6:	88f8      	ldrh	r0, [r7, #6]
 8004bd8:	893a      	ldrh	r2, [r7, #8]
 8004bda:	8979      	ldrh	r1, [r7, #10]
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bde:	9301      	str	r3, [sp, #4]
 8004be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	4603      	mov	r3, r0
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 fa5e 	bl	80050a8 <I2C_RequestMemoryRead>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e1bc      	b.n	8004f70 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d113      	bne.n	8004c26 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bfe:	2300      	movs	r3, #0
 8004c00:	623b      	str	r3, [r7, #32]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	623b      	str	r3, [r7, #32]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	623b      	str	r3, [r7, #32]
 8004c12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	e190      	b.n	8004f48 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d11b      	bne.n	8004c66 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	61fb      	str	r3, [r7, #28]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	e170      	b.n	8004f48 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d11b      	bne.n	8004ca6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	61bb      	str	r3, [r7, #24]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	61bb      	str	r3, [r7, #24]
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	e150      	b.n	8004f48 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	617b      	str	r3, [r7, #20]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	617b      	str	r3, [r7, #20]
 8004cba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004cbc:	e144      	b.n	8004f48 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	f200 80f1 	bhi.w	8004eaa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d123      	bne.n	8004d18 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cd2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 fc79 	bl	80055cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e145      	b.n	8004f70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691a      	ldr	r2, [r3, #16]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d16:	e117      	b.n	8004f48 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d14e      	bne.n	8004dbe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d26:	2200      	movs	r2, #0
 8004d28:	4906      	ldr	r1, [pc, #24]	@ (8004d44 <HAL_I2C_Mem_Read+0x22c>)
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 faa4 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d008      	beq.n	8004d48 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e11a      	b.n	8004f70 <HAL_I2C_Mem_Read+0x458>
 8004d3a:	bf00      	nop
 8004d3c:	00100002 	.word	0x00100002
 8004d40:	ffff0000 	.word	0xffff0000
 8004d44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691a      	ldr	r2, [r3, #16]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004dbc:	e0c4      	b.n	8004f48 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	496c      	ldr	r1, [pc, #432]	@ (8004f78 <HAL_I2C_Mem_Read+0x460>)
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f000 fa55 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e0cb      	b.n	8004f70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004de6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691a      	ldr	r2, [r3, #16]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e20:	2200      	movs	r2, #0
 8004e22:	4955      	ldr	r1, [pc, #340]	@ (8004f78 <HAL_I2C_Mem_Read+0x460>)
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 fa27 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e09d      	b.n	8004f70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691a      	ldr	r2, [r3, #16]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ea8:	e04e      	b.n	8004f48 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 fb8c 	bl	80055cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e058      	b.n	8004f70 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	f003 0304 	and.w	r3, r3, #4
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d124      	bne.n	8004f48 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	d107      	bne.n	8004f16 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f14:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f47f aeb6 	bne.w	8004cbe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e000      	b.n	8004f70 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004f6e:	2302      	movs	r3, #2
  }
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3728      	adds	r7, #40	@ 0x28
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	00010004 	.word	0x00010004

08004f7c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	4608      	mov	r0, r1
 8004f86:	4611      	mov	r1, r2
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	817b      	strh	r3, [r7, #10]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	813b      	strh	r3, [r7, #8]
 8004f92:	4613      	mov	r3, r2
 8004f94:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fa4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 f960 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00d      	beq.n	8004fda <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fcc:	d103      	bne.n	8004fd6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fd4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e05f      	b.n	800509a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fda:	897b      	ldrh	r3, [r7, #10]
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	461a      	mov	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004fe8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fec:	6a3a      	ldr	r2, [r7, #32]
 8004fee:	492d      	ldr	r1, [pc, #180]	@ (80050a4 <I2C_RequestMemoryWrite+0x128>)
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 f9bb 	bl	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e04c      	b.n	800509a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005000:	2300      	movs	r3, #0
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005018:	6a39      	ldr	r1, [r7, #32]
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 fa46 	bl	80054ac <I2C_WaitOnTXEFlagUntilTimeout>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00d      	beq.n	8005042 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502a:	2b04      	cmp	r3, #4
 800502c:	d107      	bne.n	800503e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800503c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e02b      	b.n	800509a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005042:	88fb      	ldrh	r3, [r7, #6]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d105      	bne.n	8005054 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005048:	893b      	ldrh	r3, [r7, #8]
 800504a:	b2da      	uxtb	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	611a      	str	r2, [r3, #16]
 8005052:	e021      	b.n	8005098 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005054:	893b      	ldrh	r3, [r7, #8]
 8005056:	0a1b      	lsrs	r3, r3, #8
 8005058:	b29b      	uxth	r3, r3
 800505a:	b2da      	uxtb	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005064:	6a39      	ldr	r1, [r7, #32]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 fa20 	bl	80054ac <I2C_WaitOnTXEFlagUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00d      	beq.n	800508e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005076:	2b04      	cmp	r3, #4
 8005078:	d107      	bne.n	800508a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005088:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e005      	b.n	800509a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800508e:	893b      	ldrh	r3, [r7, #8]
 8005090:	b2da      	uxtb	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	00010002 	.word	0x00010002

080050a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	4608      	mov	r0, r1
 80050b2:	4611      	mov	r1, r2
 80050b4:	461a      	mov	r2, r3
 80050b6:	4603      	mov	r3, r0
 80050b8:	817b      	strh	r3, [r7, #10]
 80050ba:	460b      	mov	r3, r1
 80050bc:	813b      	strh	r3, [r7, #8]
 80050be:	4613      	mov	r3, r2
 80050c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f8c2 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00d      	beq.n	8005116 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005104:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005108:	d103      	bne.n	8005112 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005110:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e0aa      	b.n	800526c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005116:	897b      	ldrh	r3, [r7, #10]
 8005118:	b2db      	uxtb	r3, r3
 800511a:	461a      	mov	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005124:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	6a3a      	ldr	r2, [r7, #32]
 800512a:	4952      	ldr	r1, [pc, #328]	@ (8005274 <I2C_RequestMemoryRead+0x1cc>)
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 f91d 	bl	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e097      	b.n	800526c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800513c:	2300      	movs	r3, #0
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005154:	6a39      	ldr	r1, [r7, #32]
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 f9a8 	bl	80054ac <I2C_WaitOnTXEFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00d      	beq.n	800517e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005166:	2b04      	cmp	r3, #4
 8005168:	d107      	bne.n	800517a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005178:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e076      	b.n	800526c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800517e:	88fb      	ldrh	r3, [r7, #6]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d105      	bne.n	8005190 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005184:	893b      	ldrh	r3, [r7, #8]
 8005186:	b2da      	uxtb	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	611a      	str	r2, [r3, #16]
 800518e:	e021      	b.n	80051d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005190:	893b      	ldrh	r3, [r7, #8]
 8005192:	0a1b      	lsrs	r3, r3, #8
 8005194:	b29b      	uxth	r3, r3
 8005196:	b2da      	uxtb	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800519e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a0:	6a39      	ldr	r1, [r7, #32]
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 f982 	bl	80054ac <I2C_WaitOnTXEFlagUntilTimeout>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00d      	beq.n	80051ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d107      	bne.n	80051c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e050      	b.n	800526c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051ca:	893b      	ldrh	r3, [r7, #8]
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051d6:	6a39      	ldr	r1, [r7, #32]
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 f967 	bl	80054ac <I2C_WaitOnTXEFlagUntilTimeout>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00d      	beq.n	8005200 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d107      	bne.n	80051fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e035      	b.n	800526c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800520e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	2200      	movs	r2, #0
 8005218:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 f82b 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00d      	beq.n	8005244 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005236:	d103      	bne.n	8005240 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800523e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e013      	b.n	800526c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005244:	897b      	ldrh	r3, [r7, #10]
 8005246:	b2db      	uxtb	r3, r3
 8005248:	f043 0301 	orr.w	r3, r3, #1
 800524c:	b2da      	uxtb	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005256:	6a3a      	ldr	r2, [r7, #32]
 8005258:	4906      	ldr	r1, [pc, #24]	@ (8005274 <I2C_RequestMemoryRead+0x1cc>)
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 f886 	bl	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	00010002 	.word	0x00010002

08005278 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	4613      	mov	r3, r2
 8005286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005288:	e048      	b.n	800531c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005290:	d044      	beq.n	800531c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005292:	f7fe fb71 	bl	8003978 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d302      	bcc.n	80052a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d139      	bne.n	800531c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	0c1b      	lsrs	r3, r3, #16
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d10d      	bne.n	80052ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	43da      	mvns	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4013      	ands	r3, r2
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bf0c      	ite	eq
 80052c4:	2301      	moveq	r3, #1
 80052c6:	2300      	movne	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	e00c      	b.n	80052e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	43da      	mvns	r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	4013      	ands	r3, r2
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bf0c      	ite	eq
 80052e0:	2301      	moveq	r3, #1
 80052e2:	2300      	movne	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	79fb      	ldrb	r3, [r7, #7]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d116      	bne.n	800531c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005308:	f043 0220 	orr.w	r2, r3, #32
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e023      	b.n	8005364 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	0c1b      	lsrs	r3, r3, #16
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b01      	cmp	r3, #1
 8005324:	d10d      	bne.n	8005342 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	43da      	mvns	r2, r3
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	4013      	ands	r3, r2
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	bf0c      	ite	eq
 8005338:	2301      	moveq	r3, #1
 800533a:	2300      	movne	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	461a      	mov	r2, r3
 8005340:	e00c      	b.n	800535c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	43da      	mvns	r2, r3
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	4013      	ands	r3, r2
 800534e:	b29b      	uxth	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	bf0c      	ite	eq
 8005354:	2301      	moveq	r3, #1
 8005356:	2300      	movne	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	461a      	mov	r2, r3
 800535c:	79fb      	ldrb	r3, [r7, #7]
 800535e:	429a      	cmp	r2, r3
 8005360:	d093      	beq.n	800528a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800537a:	e071      	b.n	8005460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800538a:	d123      	bne.n	80053d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800539a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80053a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c0:	f043 0204 	orr.w	r2, r3, #4
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e067      	b.n	80054a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053da:	d041      	beq.n	8005460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053dc:	f7fe facc 	bl	8003978 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d302      	bcc.n	80053f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d136      	bne.n	8005460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	0c1b      	lsrs	r3, r3, #16
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d10c      	bne.n	8005416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	43da      	mvns	r2, r3
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4013      	ands	r3, r2
 8005408:	b29b      	uxth	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	bf14      	ite	ne
 800540e:	2301      	movne	r3, #1
 8005410:	2300      	moveq	r3, #0
 8005412:	b2db      	uxtb	r3, r3
 8005414:	e00b      	b.n	800542e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	43da      	mvns	r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	4013      	ands	r3, r2
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	bf14      	ite	ne
 8005428:	2301      	movne	r3, #1
 800542a:	2300      	moveq	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d016      	beq.n	8005460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544c:	f043 0220 	orr.w	r2, r3, #32
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e021      	b.n	80054a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	0c1b      	lsrs	r3, r3, #16
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b01      	cmp	r3, #1
 8005468:	d10c      	bne.n	8005484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	43da      	mvns	r2, r3
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	4013      	ands	r3, r2
 8005476:	b29b      	uxth	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	bf14      	ite	ne
 800547c:	2301      	movne	r3, #1
 800547e:	2300      	moveq	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	e00b      	b.n	800549c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	43da      	mvns	r2, r3
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	4013      	ands	r3, r2
 8005490:	b29b      	uxth	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	bf14      	ite	ne
 8005496:	2301      	movne	r3, #1
 8005498:	2300      	moveq	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	f47f af6d 	bne.w	800537c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054b8:	e034      	b.n	8005524 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 f8e3 	bl	8005686 <I2C_IsAcknowledgeFailed>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e034      	b.n	8005534 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d0:	d028      	beq.n	8005524 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d2:	f7fe fa51 	bl	8003978 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d302      	bcc.n	80054e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d11d      	bne.n	8005524 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f2:	2b80      	cmp	r3, #128	@ 0x80
 80054f4:	d016      	beq.n	8005524 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005510:	f043 0220 	orr.w	r2, r3, #32
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e007      	b.n	8005534 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800552e:	2b80      	cmp	r3, #128	@ 0x80
 8005530:	d1c3      	bne.n	80054ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005548:	e034      	b.n	80055b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 f89b 	bl	8005686 <I2C_IsAcknowledgeFailed>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e034      	b.n	80055c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005560:	d028      	beq.n	80055b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005562:	f7fe fa09 	bl	8003978 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	429a      	cmp	r2, r3
 8005570:	d302      	bcc.n	8005578 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d11d      	bne.n	80055b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b04      	cmp	r3, #4
 8005584:	d016      	beq.n	80055b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a0:	f043 0220 	orr.w	r2, r3, #32
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e007      	b.n	80055c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d1c3      	bne.n	800554a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055d8:	e049      	b.n	800566e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	f003 0310 	and.w	r3, r3, #16
 80055e4:	2b10      	cmp	r3, #16
 80055e6:	d119      	bne.n	800561c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f06f 0210 	mvn.w	r2, #16
 80055f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e030      	b.n	800567e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561c:	f7fe f9ac 	bl	8003978 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	429a      	cmp	r2, r3
 800562a:	d302      	bcc.n	8005632 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d11d      	bne.n	800566e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563c:	2b40      	cmp	r3, #64	@ 0x40
 800563e:	d016      	beq.n	800566e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2220      	movs	r2, #32
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565a:	f043 0220 	orr.w	r2, r3, #32
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e007      	b.n	800567e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005678:	2b40      	cmp	r3, #64	@ 0x40
 800567a:	d1ae      	bne.n	80055da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800569c:	d11b      	bne.n	80056d6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80056a6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c2:	f043 0204 	orr.w	r2, r3, #4
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e000      	b.n	80056d8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80056ee:	2300      	movs	r3, #0
 80056f0:	603b      	str	r3, [r7, #0]
 80056f2:	4b20      	ldr	r3, [pc, #128]	@ (8005774 <HAL_PWREx_EnableOverDrive+0x90>)
 80056f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f6:	4a1f      	ldr	r2, [pc, #124]	@ (8005774 <HAL_PWREx_EnableOverDrive+0x90>)
 80056f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80056fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005774 <HAL_PWREx_EnableOverDrive+0x90>)
 8005700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800570a:	4b1b      	ldr	r3, [pc, #108]	@ (8005778 <HAL_PWREx_EnableOverDrive+0x94>)
 800570c:	2201      	movs	r2, #1
 800570e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005710:	f7fe f932 	bl	8003978 <HAL_GetTick>
 8005714:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005716:	e009      	b.n	800572c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005718:	f7fe f92e 	bl	8003978 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005726:	d901      	bls.n	800572c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e01f      	b.n	800576c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800572c:	4b13      	ldr	r3, [pc, #76]	@ (800577c <HAL_PWREx_EnableOverDrive+0x98>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005738:	d1ee      	bne.n	8005718 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800573a:	4b11      	ldr	r3, [pc, #68]	@ (8005780 <HAL_PWREx_EnableOverDrive+0x9c>)
 800573c:	2201      	movs	r2, #1
 800573e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005740:	f7fe f91a 	bl	8003978 <HAL_GetTick>
 8005744:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005746:	e009      	b.n	800575c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005748:	f7fe f916 	bl	8003978 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005756:	d901      	bls.n	800575c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e007      	b.n	800576c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800575c:	4b07      	ldr	r3, [pc, #28]	@ (800577c <HAL_PWREx_EnableOverDrive+0x98>)
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005764:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005768:	d1ee      	bne.n	8005748 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40023800 	.word	0x40023800
 8005778:	420e0040 	.word	0x420e0040
 800577c:	40007000 	.word	0x40007000
 8005780:	420e0044 	.word	0x420e0044

08005784 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e0cc      	b.n	8005932 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005798:	4b68      	ldr	r3, [pc, #416]	@ (800593c <HAL_RCC_ClockConfig+0x1b8>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 030f 	and.w	r3, r3, #15
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d90c      	bls.n	80057c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057a6:	4b65      	ldr	r3, [pc, #404]	@ (800593c <HAL_RCC_ClockConfig+0x1b8>)
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ae:	4b63      	ldr	r3, [pc, #396]	@ (800593c <HAL_RCC_ClockConfig+0x1b8>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d001      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e0b8      	b.n	8005932 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d020      	beq.n	800580e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d005      	beq.n	80057e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057d8:	4b59      	ldr	r3, [pc, #356]	@ (8005940 <HAL_RCC_ClockConfig+0x1bc>)
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	4a58      	ldr	r2, [pc, #352]	@ (8005940 <HAL_RCC_ClockConfig+0x1bc>)
 80057de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80057e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0308 	and.w	r3, r3, #8
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d005      	beq.n	80057fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057f0:	4b53      	ldr	r3, [pc, #332]	@ (8005940 <HAL_RCC_ClockConfig+0x1bc>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	4a52      	ldr	r2, [pc, #328]	@ (8005940 <HAL_RCC_ClockConfig+0x1bc>)
 80057f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80057fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057fc:	4b50      	ldr	r3, [pc, #320]	@ (8005940 <HAL_RCC_ClockConfig+0x1bc>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	494d      	ldr	r1, [pc, #308]	@ (8005940 <HAL_RCC_ClockConfig+0x1bc>)
 800580a:	4313      	orrs	r3, r2
 800580c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d044      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d107      	bne.n	8005832 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005822:	4b47      	ldr	r3, [pc, #284]	@ (8005940 <HAL_RCC_ClockConfig+0x1bc>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d119      	bne.n	8005862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e07f      	b.n	8005932 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	2b02      	cmp	r3, #2
 8005838:	d003      	beq.n	8005842 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800583e:	2b03      	cmp	r3, #3
 8005840:	d107      	bne.n	8005852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005842:	4b3f      	ldr	r3, [pc, #252]	@ (8005940 <HAL_RCC_ClockConfig+0x1bc>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d109      	bne.n	8005862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e06f      	b.n	8005932 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005852:	4b3b      	ldr	r3, [pc, #236]	@ (8005940 <HAL_RCC_ClockConfig+0x1bc>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e067      	b.n	8005932 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005862:	4b37      	ldr	r3, [pc, #220]	@ (8005940 <HAL_RCC_ClockConfig+0x1bc>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f023 0203 	bic.w	r2, r3, #3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	4934      	ldr	r1, [pc, #208]	@ (8005940 <HAL_RCC_ClockConfig+0x1bc>)
 8005870:	4313      	orrs	r3, r2
 8005872:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005874:	f7fe f880 	bl	8003978 <HAL_GetTick>
 8005878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800587a:	e00a      	b.n	8005892 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800587c:	f7fe f87c 	bl	8003978 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800588a:	4293      	cmp	r3, r2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e04f      	b.n	8005932 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005892:	4b2b      	ldr	r3, [pc, #172]	@ (8005940 <HAL_RCC_ClockConfig+0x1bc>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 020c 	and.w	r2, r3, #12
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d1eb      	bne.n	800587c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058a4:	4b25      	ldr	r3, [pc, #148]	@ (800593c <HAL_RCC_ClockConfig+0x1b8>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 030f 	and.w	r3, r3, #15
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d20c      	bcs.n	80058cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058b2:	4b22      	ldr	r3, [pc, #136]	@ (800593c <HAL_RCC_ClockConfig+0x1b8>)
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	b2d2      	uxtb	r2, r2
 80058b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ba:	4b20      	ldr	r3, [pc, #128]	@ (800593c <HAL_RCC_ClockConfig+0x1b8>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d001      	beq.n	80058cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e032      	b.n	8005932 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d008      	beq.n	80058ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058d8:	4b19      	ldr	r3, [pc, #100]	@ (8005940 <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	4916      	ldr	r1, [pc, #88]	@ (8005940 <HAL_RCC_ClockConfig+0x1bc>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d009      	beq.n	800590a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058f6:	4b12      	ldr	r3, [pc, #72]	@ (8005940 <HAL_RCC_ClockConfig+0x1bc>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	490e      	ldr	r1, [pc, #56]	@ (8005940 <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	4313      	orrs	r3, r2
 8005908:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800590a:	f000 f855 	bl	80059b8 <HAL_RCC_GetSysClockFreq>
 800590e:	4602      	mov	r2, r0
 8005910:	4b0b      	ldr	r3, [pc, #44]	@ (8005940 <HAL_RCC_ClockConfig+0x1bc>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	091b      	lsrs	r3, r3, #4
 8005916:	f003 030f 	and.w	r3, r3, #15
 800591a:	490a      	ldr	r1, [pc, #40]	@ (8005944 <HAL_RCC_ClockConfig+0x1c0>)
 800591c:	5ccb      	ldrb	r3, [r1, r3]
 800591e:	fa22 f303 	lsr.w	r3, r2, r3
 8005922:	4a09      	ldr	r2, [pc, #36]	@ (8005948 <HAL_RCC_ClockConfig+0x1c4>)
 8005924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005926:	4b09      	ldr	r3, [pc, #36]	@ (800594c <HAL_RCC_ClockConfig+0x1c8>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4618      	mov	r0, r3
 800592c:	f7fd ffe0 	bl	80038f0 <HAL_InitTick>

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	40023c00 	.word	0x40023c00
 8005940:	40023800 	.word	0x40023800
 8005944:	0800a470 	.word	0x0800a470
 8005948:	20000060 	.word	0x20000060
 800594c:	20000064 	.word	0x20000064

08005950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005950:	b480      	push	{r7}
 8005952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005954:	4b03      	ldr	r3, [pc, #12]	@ (8005964 <HAL_RCC_GetHCLKFreq+0x14>)
 8005956:	681b      	ldr	r3, [r3, #0]
}
 8005958:	4618      	mov	r0, r3
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	20000060 	.word	0x20000060

08005968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800596c:	f7ff fff0 	bl	8005950 <HAL_RCC_GetHCLKFreq>
 8005970:	4602      	mov	r2, r0
 8005972:	4b05      	ldr	r3, [pc, #20]	@ (8005988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	0a9b      	lsrs	r3, r3, #10
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	4903      	ldr	r1, [pc, #12]	@ (800598c <HAL_RCC_GetPCLK1Freq+0x24>)
 800597e:	5ccb      	ldrb	r3, [r1, r3]
 8005980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005984:	4618      	mov	r0, r3
 8005986:	bd80      	pop	{r7, pc}
 8005988:	40023800 	.word	0x40023800
 800598c:	0800a480 	.word	0x0800a480

08005990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005994:	f7ff ffdc 	bl	8005950 <HAL_RCC_GetHCLKFreq>
 8005998:	4602      	mov	r2, r0
 800599a:	4b05      	ldr	r3, [pc, #20]	@ (80059b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	0b5b      	lsrs	r3, r3, #13
 80059a0:	f003 0307 	and.w	r3, r3, #7
 80059a4:	4903      	ldr	r1, [pc, #12]	@ (80059b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059a6:	5ccb      	ldrb	r3, [r1, r3]
 80059a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	40023800 	.word	0x40023800
 80059b4:	0800a480 	.word	0x0800a480

080059b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059bc:	b0ae      	sub	sp, #184	@ 0xb8
 80059be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059de:	4bcb      	ldr	r3, [pc, #812]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x354>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 030c 	and.w	r3, r3, #12
 80059e6:	2b0c      	cmp	r3, #12
 80059e8:	f200 8204 	bhi.w	8005df4 <HAL_RCC_GetSysClockFreq+0x43c>
 80059ec:	a201      	add	r2, pc, #4	@ (adr r2, 80059f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80059ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f2:	bf00      	nop
 80059f4:	08005a29 	.word	0x08005a29
 80059f8:	08005df5 	.word	0x08005df5
 80059fc:	08005df5 	.word	0x08005df5
 8005a00:	08005df5 	.word	0x08005df5
 8005a04:	08005a31 	.word	0x08005a31
 8005a08:	08005df5 	.word	0x08005df5
 8005a0c:	08005df5 	.word	0x08005df5
 8005a10:	08005df5 	.word	0x08005df5
 8005a14:	08005a39 	.word	0x08005a39
 8005a18:	08005df5 	.word	0x08005df5
 8005a1c:	08005df5 	.word	0x08005df5
 8005a20:	08005df5 	.word	0x08005df5
 8005a24:	08005c29 	.word	0x08005c29
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a28:	4bb9      	ldr	r3, [pc, #740]	@ (8005d10 <HAL_RCC_GetSysClockFreq+0x358>)
 8005a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8005a2e:	e1e5      	b.n	8005dfc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a30:	4bb7      	ldr	r3, [pc, #732]	@ (8005d10 <HAL_RCC_GetSysClockFreq+0x358>)
 8005a32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005a36:	e1e1      	b.n	8005dfc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a38:	4bb4      	ldr	r3, [pc, #720]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a44:	4bb1      	ldr	r3, [pc, #708]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d071      	beq.n	8005b34 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a50:	4bae      	ldr	r3, [pc, #696]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	099b      	lsrs	r3, r3, #6
 8005a56:	2200      	movs	r2, #0
 8005a58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a5c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005a60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a76:	4622      	mov	r2, r4
 8005a78:	462b      	mov	r3, r5
 8005a7a:	f04f 0000 	mov.w	r0, #0
 8005a7e:	f04f 0100 	mov.w	r1, #0
 8005a82:	0159      	lsls	r1, r3, #5
 8005a84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a88:	0150      	lsls	r0, r2, #5
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4621      	mov	r1, r4
 8005a90:	1a51      	subs	r1, r2, r1
 8005a92:	6439      	str	r1, [r7, #64]	@ 0x40
 8005a94:	4629      	mov	r1, r5
 8005a96:	eb63 0301 	sbc.w	r3, r3, r1
 8005a9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005aa8:	4649      	mov	r1, r9
 8005aaa:	018b      	lsls	r3, r1, #6
 8005aac:	4641      	mov	r1, r8
 8005aae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ab2:	4641      	mov	r1, r8
 8005ab4:	018a      	lsls	r2, r1, #6
 8005ab6:	4641      	mov	r1, r8
 8005ab8:	1a51      	subs	r1, r2, r1
 8005aba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005abc:	4649      	mov	r1, r9
 8005abe:	eb63 0301 	sbc.w	r3, r3, r1
 8005ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ac4:	f04f 0200 	mov.w	r2, #0
 8005ac8:	f04f 0300 	mov.w	r3, #0
 8005acc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005ad0:	4649      	mov	r1, r9
 8005ad2:	00cb      	lsls	r3, r1, #3
 8005ad4:	4641      	mov	r1, r8
 8005ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ada:	4641      	mov	r1, r8
 8005adc:	00ca      	lsls	r2, r1, #3
 8005ade:	4610      	mov	r0, r2
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	4622      	mov	r2, r4
 8005ae6:	189b      	adds	r3, r3, r2
 8005ae8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aea:	462b      	mov	r3, r5
 8005aec:	460a      	mov	r2, r1
 8005aee:	eb42 0303 	adc.w	r3, r2, r3
 8005af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005af4:	f04f 0200 	mov.w	r2, #0
 8005af8:	f04f 0300 	mov.w	r3, #0
 8005afc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005b00:	4629      	mov	r1, r5
 8005b02:	028b      	lsls	r3, r1, #10
 8005b04:	4621      	mov	r1, r4
 8005b06:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b0a:	4621      	mov	r1, r4
 8005b0c:	028a      	lsls	r2, r1, #10
 8005b0e:	4610      	mov	r0, r2
 8005b10:	4619      	mov	r1, r3
 8005b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b16:	2200      	movs	r2, #0
 8005b18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005b20:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005b24:	f7fb f854 	bl	8000bd0 <__aeabi_uldivmod>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b32:	e067      	b.n	8005c04 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b34:	4b75      	ldr	r3, [pc, #468]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	099b      	lsrs	r3, r3, #6
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b40:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005b44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b4e:	2300      	movs	r3, #0
 8005b50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b52:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005b56:	4622      	mov	r2, r4
 8005b58:	462b      	mov	r3, r5
 8005b5a:	f04f 0000 	mov.w	r0, #0
 8005b5e:	f04f 0100 	mov.w	r1, #0
 8005b62:	0159      	lsls	r1, r3, #5
 8005b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b68:	0150      	lsls	r0, r2, #5
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4621      	mov	r1, r4
 8005b70:	1a51      	subs	r1, r2, r1
 8005b72:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005b74:	4629      	mov	r1, r5
 8005b76:	eb63 0301 	sbc.w	r3, r3, r1
 8005b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b7c:	f04f 0200 	mov.w	r2, #0
 8005b80:	f04f 0300 	mov.w	r3, #0
 8005b84:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005b88:	4649      	mov	r1, r9
 8005b8a:	018b      	lsls	r3, r1, #6
 8005b8c:	4641      	mov	r1, r8
 8005b8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b92:	4641      	mov	r1, r8
 8005b94:	018a      	lsls	r2, r1, #6
 8005b96:	4641      	mov	r1, r8
 8005b98:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b9c:	4649      	mov	r1, r9
 8005b9e:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	f04f 0300 	mov.w	r3, #0
 8005baa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005bae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bb6:	4692      	mov	sl, r2
 8005bb8:	469b      	mov	fp, r3
 8005bba:	4623      	mov	r3, r4
 8005bbc:	eb1a 0303 	adds.w	r3, sl, r3
 8005bc0:	623b      	str	r3, [r7, #32]
 8005bc2:	462b      	mov	r3, r5
 8005bc4:	eb4b 0303 	adc.w	r3, fp, r3
 8005bc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bca:	f04f 0200 	mov.w	r2, #0
 8005bce:	f04f 0300 	mov.w	r3, #0
 8005bd2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	028b      	lsls	r3, r1, #10
 8005bda:	4621      	mov	r1, r4
 8005bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005be0:	4621      	mov	r1, r4
 8005be2:	028a      	lsls	r2, r1, #10
 8005be4:	4610      	mov	r0, r2
 8005be6:	4619      	mov	r1, r3
 8005be8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005bec:	2200      	movs	r2, #0
 8005bee:	673b      	str	r3, [r7, #112]	@ 0x70
 8005bf0:	677a      	str	r2, [r7, #116]	@ 0x74
 8005bf2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005bf6:	f7fa ffeb 	bl	8000bd0 <__aeabi_uldivmod>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4613      	mov	r3, r2
 8005c00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c04:	4b41      	ldr	r3, [pc, #260]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	0c1b      	lsrs	r3, r3, #16
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	3301      	adds	r3, #1
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8005c16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005c26:	e0e9      	b.n	8005dfc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c28:	4b38      	ldr	r3, [pc, #224]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c34:	4b35      	ldr	r3, [pc, #212]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d069      	beq.n	8005d14 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c40:	4b32      	ldr	r3, [pc, #200]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x354>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	099b      	lsrs	r3, r3, #6
 8005c46:	2200      	movs	r2, #0
 8005c48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c52:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c54:	2300      	movs	r3, #0
 8005c56:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c58:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005c5c:	4622      	mov	r2, r4
 8005c5e:	462b      	mov	r3, r5
 8005c60:	f04f 0000 	mov.w	r0, #0
 8005c64:	f04f 0100 	mov.w	r1, #0
 8005c68:	0159      	lsls	r1, r3, #5
 8005c6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c6e:	0150      	lsls	r0, r2, #5
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4621      	mov	r1, r4
 8005c76:	1a51      	subs	r1, r2, r1
 8005c78:	61b9      	str	r1, [r7, #24]
 8005c7a:	4629      	mov	r1, r5
 8005c7c:	eb63 0301 	sbc.w	r3, r3, r1
 8005c80:	61fb      	str	r3, [r7, #28]
 8005c82:	f04f 0200 	mov.w	r2, #0
 8005c86:	f04f 0300 	mov.w	r3, #0
 8005c8a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005c8e:	4659      	mov	r1, fp
 8005c90:	018b      	lsls	r3, r1, #6
 8005c92:	4651      	mov	r1, sl
 8005c94:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c98:	4651      	mov	r1, sl
 8005c9a:	018a      	lsls	r2, r1, #6
 8005c9c:	4651      	mov	r1, sl
 8005c9e:	ebb2 0801 	subs.w	r8, r2, r1
 8005ca2:	4659      	mov	r1, fp
 8005ca4:	eb63 0901 	sbc.w	r9, r3, r1
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	f04f 0300 	mov.w	r3, #0
 8005cb0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cb4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cb8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cbc:	4690      	mov	r8, r2
 8005cbe:	4699      	mov	r9, r3
 8005cc0:	4623      	mov	r3, r4
 8005cc2:	eb18 0303 	adds.w	r3, r8, r3
 8005cc6:	613b      	str	r3, [r7, #16]
 8005cc8:	462b      	mov	r3, r5
 8005cca:	eb49 0303 	adc.w	r3, r9, r3
 8005cce:	617b      	str	r3, [r7, #20]
 8005cd0:	f04f 0200 	mov.w	r2, #0
 8005cd4:	f04f 0300 	mov.w	r3, #0
 8005cd8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005cdc:	4629      	mov	r1, r5
 8005cde:	028b      	lsls	r3, r1, #10
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	028a      	lsls	r2, r1, #10
 8005cea:	4610      	mov	r0, r2
 8005cec:	4619      	mov	r1, r3
 8005cee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cf6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005cf8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005cfc:	f7fa ff68 	bl	8000bd0 <__aeabi_uldivmod>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4613      	mov	r3, r2
 8005d06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d0a:	e063      	b.n	8005dd4 <HAL_RCC_GetSysClockFreq+0x41c>
 8005d0c:	40023800 	.word	0x40023800
 8005d10:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d14:	4b3d      	ldr	r3, [pc, #244]	@ (8005e0c <HAL_RCC_GetSysClockFreq+0x454>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	099b      	lsrs	r3, r3, #6
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	4611      	mov	r1, r2
 8005d20:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d24:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d26:	2300      	movs	r3, #0
 8005d28:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d2a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005d2e:	4642      	mov	r2, r8
 8005d30:	464b      	mov	r3, r9
 8005d32:	f04f 0000 	mov.w	r0, #0
 8005d36:	f04f 0100 	mov.w	r1, #0
 8005d3a:	0159      	lsls	r1, r3, #5
 8005d3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d40:	0150      	lsls	r0, r2, #5
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	4641      	mov	r1, r8
 8005d48:	1a51      	subs	r1, r2, r1
 8005d4a:	60b9      	str	r1, [r7, #8]
 8005d4c:	4649      	mov	r1, r9
 8005d4e:	eb63 0301 	sbc.w	r3, r3, r1
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005d60:	4659      	mov	r1, fp
 8005d62:	018b      	lsls	r3, r1, #6
 8005d64:	4651      	mov	r1, sl
 8005d66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d6a:	4651      	mov	r1, sl
 8005d6c:	018a      	lsls	r2, r1, #6
 8005d6e:	4651      	mov	r1, sl
 8005d70:	1a54      	subs	r4, r2, r1
 8005d72:	4659      	mov	r1, fp
 8005d74:	eb63 0501 	sbc.w	r5, r3, r1
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	f04f 0300 	mov.w	r3, #0
 8005d80:	00eb      	lsls	r3, r5, #3
 8005d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d86:	00e2      	lsls	r2, r4, #3
 8005d88:	4614      	mov	r4, r2
 8005d8a:	461d      	mov	r5, r3
 8005d8c:	4643      	mov	r3, r8
 8005d8e:	18e3      	adds	r3, r4, r3
 8005d90:	603b      	str	r3, [r7, #0]
 8005d92:	464b      	mov	r3, r9
 8005d94:	eb45 0303 	adc.w	r3, r5, r3
 8005d98:	607b      	str	r3, [r7, #4]
 8005d9a:	f04f 0200 	mov.w	r2, #0
 8005d9e:	f04f 0300 	mov.w	r3, #0
 8005da2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005da6:	4629      	mov	r1, r5
 8005da8:	028b      	lsls	r3, r1, #10
 8005daa:	4621      	mov	r1, r4
 8005dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005db0:	4621      	mov	r1, r4
 8005db2:	028a      	lsls	r2, r1, #10
 8005db4:	4610      	mov	r0, r2
 8005db6:	4619      	mov	r1, r3
 8005db8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dc0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005dc2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005dc6:	f7fa ff03 	bl	8000bd0 <__aeabi_uldivmod>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	4613      	mov	r3, r2
 8005dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8005e0c <HAL_RCC_GetSysClockFreq+0x454>)
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	0f1b      	lsrs	r3, r3, #28
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8005de2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005de6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005df2:	e003      	b.n	8005dfc <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005df4:	4b06      	ldr	r3, [pc, #24]	@ (8005e10 <HAL_RCC_GetSysClockFreq+0x458>)
 8005df6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005dfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	37b8      	adds	r7, #184	@ 0xb8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40023800 	.word	0x40023800
 8005e10:	00f42400 	.word	0x00f42400

08005e14 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e28d      	b.n	8006342 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 8083 	beq.w	8005f3a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005e34:	4b94      	ldr	r3, [pc, #592]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f003 030c 	and.w	r3, r3, #12
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d019      	beq.n	8005e74 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005e40:	4b91      	ldr	r3, [pc, #580]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005e48:	2b08      	cmp	r3, #8
 8005e4a:	d106      	bne.n	8005e5a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005e4c:	4b8e      	ldr	r3, [pc, #568]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e58:	d00c      	beq.n	8005e74 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e5a:	4b8b      	ldr	r3, [pc, #556]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005e62:	2b0c      	cmp	r3, #12
 8005e64:	d112      	bne.n	8005e8c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e66:	4b88      	ldr	r3, [pc, #544]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e72:	d10b      	bne.n	8005e8c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e74:	4b84      	ldr	r3, [pc, #528]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d05b      	beq.n	8005f38 <HAL_RCC_OscConfig+0x124>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d157      	bne.n	8005f38 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e25a      	b.n	8006342 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e94:	d106      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x90>
 8005e96:	4b7c      	ldr	r3, [pc, #496]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a7b      	ldr	r2, [pc, #492]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	e01d      	b.n	8005ee0 <HAL_RCC_OscConfig+0xcc>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005eac:	d10c      	bne.n	8005ec8 <HAL_RCC_OscConfig+0xb4>
 8005eae:	4b76      	ldr	r3, [pc, #472]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a75      	ldr	r2, [pc, #468]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	4b73      	ldr	r3, [pc, #460]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a72      	ldr	r2, [pc, #456]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	e00b      	b.n	8005ee0 <HAL_RCC_OscConfig+0xcc>
 8005ec8:	4b6f      	ldr	r3, [pc, #444]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a6e      	ldr	r2, [pc, #440]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	4b6c      	ldr	r3, [pc, #432]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a6b      	ldr	r2, [pc, #428]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d013      	beq.n	8005f10 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee8:	f7fd fd46 	bl	8003978 <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ef0:	f7fd fd42 	bl	8003978 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b64      	cmp	r3, #100	@ 0x64
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e21f      	b.n	8006342 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f02:	4b61      	ldr	r3, [pc, #388]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0f0      	beq.n	8005ef0 <HAL_RCC_OscConfig+0xdc>
 8005f0e:	e014      	b.n	8005f3a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f10:	f7fd fd32 	bl	8003978 <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f18:	f7fd fd2e 	bl	8003978 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b64      	cmp	r3, #100	@ 0x64
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e20b      	b.n	8006342 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f2a:	4b57      	ldr	r3, [pc, #348]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1f0      	bne.n	8005f18 <HAL_RCC_OscConfig+0x104>
 8005f36:	e000      	b.n	8005f3a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d06f      	beq.n	8006026 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005f46:	4b50      	ldr	r3, [pc, #320]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 030c 	and.w	r3, r3, #12
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d017      	beq.n	8005f82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005f52:	4b4d      	ldr	r3, [pc, #308]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d105      	bne.n	8005f6a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005f5e:	4b4a      	ldr	r3, [pc, #296]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00b      	beq.n	8005f82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f6a:	4b47      	ldr	r3, [pc, #284]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005f72:	2b0c      	cmp	r3, #12
 8005f74:	d11c      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f76:	4b44      	ldr	r3, [pc, #272]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d116      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f82:	4b41      	ldr	r3, [pc, #260]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <HAL_RCC_OscConfig+0x186>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d001      	beq.n	8005f9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e1d3      	b.n	8006342 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	4937      	ldr	r1, [pc, #220]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fae:	e03a      	b.n	8006026 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d020      	beq.n	8005ffa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fb8:	4b34      	ldr	r3, [pc, #208]	@ (800608c <HAL_RCC_OscConfig+0x278>)
 8005fba:	2201      	movs	r2, #1
 8005fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fbe:	f7fd fcdb 	bl	8003978 <HAL_GetTick>
 8005fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fc4:	e008      	b.n	8005fd8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fc6:	f7fd fcd7 	bl	8003978 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d901      	bls.n	8005fd8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e1b4      	b.n	8006342 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0f0      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe4:	4b28      	ldr	r3, [pc, #160]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	4925      	ldr	r1, [pc, #148]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	600b      	str	r3, [r1, #0]
 8005ff8:	e015      	b.n	8006026 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ffa:	4b24      	ldr	r3, [pc, #144]	@ (800608c <HAL_RCC_OscConfig+0x278>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006000:	f7fd fcba 	bl	8003978 <HAL_GetTick>
 8006004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006006:	e008      	b.n	800601a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006008:	f7fd fcb6 	bl	8003978 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b02      	cmp	r3, #2
 8006014:	d901      	bls.n	800601a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e193      	b.n	8006342 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800601a:	4b1b      	ldr	r3, [pc, #108]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1f0      	bne.n	8006008 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0308 	and.w	r3, r3, #8
 800602e:	2b00      	cmp	r3, #0
 8006030:	d036      	beq.n	80060a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d016      	beq.n	8006068 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800603a:	4b15      	ldr	r3, [pc, #84]	@ (8006090 <HAL_RCC_OscConfig+0x27c>)
 800603c:	2201      	movs	r2, #1
 800603e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006040:	f7fd fc9a 	bl	8003978 <HAL_GetTick>
 8006044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006048:	f7fd fc96 	bl	8003978 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e173      	b.n	8006342 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800605a:	4b0b      	ldr	r3, [pc, #44]	@ (8006088 <HAL_RCC_OscConfig+0x274>)
 800605c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800605e:	f003 0302 	and.w	r3, r3, #2
 8006062:	2b00      	cmp	r3, #0
 8006064:	d0f0      	beq.n	8006048 <HAL_RCC_OscConfig+0x234>
 8006066:	e01b      	b.n	80060a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006068:	4b09      	ldr	r3, [pc, #36]	@ (8006090 <HAL_RCC_OscConfig+0x27c>)
 800606a:	2200      	movs	r2, #0
 800606c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800606e:	f7fd fc83 	bl	8003978 <HAL_GetTick>
 8006072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006074:	e00e      	b.n	8006094 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006076:	f7fd fc7f 	bl	8003978 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d907      	bls.n	8006094 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e15c      	b.n	8006342 <HAL_RCC_OscConfig+0x52e>
 8006088:	40023800 	.word	0x40023800
 800608c:	42470000 	.word	0x42470000
 8006090:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006094:	4b8a      	ldr	r3, [pc, #552]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 8006096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1ea      	bne.n	8006076 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0304 	and.w	r3, r3, #4
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 8097 	beq.w	80061dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060ae:	2300      	movs	r3, #0
 80060b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060b2:	4b83      	ldr	r3, [pc, #524]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 80060b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10f      	bne.n	80060de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060be:	2300      	movs	r3, #0
 80060c0:	60bb      	str	r3, [r7, #8]
 80060c2:	4b7f      	ldr	r3, [pc, #508]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 80060c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c6:	4a7e      	ldr	r2, [pc, #504]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 80060c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80060ce:	4b7c      	ldr	r3, [pc, #496]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 80060d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060d6:	60bb      	str	r3, [r7, #8]
 80060d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060da:	2301      	movs	r3, #1
 80060dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060de:	4b79      	ldr	r3, [pc, #484]	@ (80062c4 <HAL_RCC_OscConfig+0x4b0>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d118      	bne.n	800611c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060ea:	4b76      	ldr	r3, [pc, #472]	@ (80062c4 <HAL_RCC_OscConfig+0x4b0>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a75      	ldr	r2, [pc, #468]	@ (80062c4 <HAL_RCC_OscConfig+0x4b0>)
 80060f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060f6:	f7fd fc3f 	bl	8003978 <HAL_GetTick>
 80060fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060fc:	e008      	b.n	8006110 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060fe:	f7fd fc3b 	bl	8003978 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	2b02      	cmp	r3, #2
 800610a:	d901      	bls.n	8006110 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e118      	b.n	8006342 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006110:	4b6c      	ldr	r3, [pc, #432]	@ (80062c4 <HAL_RCC_OscConfig+0x4b0>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0f0      	beq.n	80060fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d106      	bne.n	8006132 <HAL_RCC_OscConfig+0x31e>
 8006124:	4b66      	ldr	r3, [pc, #408]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 8006126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006128:	4a65      	ldr	r2, [pc, #404]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 800612a:	f043 0301 	orr.w	r3, r3, #1
 800612e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006130:	e01c      	b.n	800616c <HAL_RCC_OscConfig+0x358>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	2b05      	cmp	r3, #5
 8006138:	d10c      	bne.n	8006154 <HAL_RCC_OscConfig+0x340>
 800613a:	4b61      	ldr	r3, [pc, #388]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 800613c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800613e:	4a60      	ldr	r2, [pc, #384]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 8006140:	f043 0304 	orr.w	r3, r3, #4
 8006144:	6713      	str	r3, [r2, #112]	@ 0x70
 8006146:	4b5e      	ldr	r3, [pc, #376]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 8006148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800614a:	4a5d      	ldr	r2, [pc, #372]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 800614c:	f043 0301 	orr.w	r3, r3, #1
 8006150:	6713      	str	r3, [r2, #112]	@ 0x70
 8006152:	e00b      	b.n	800616c <HAL_RCC_OscConfig+0x358>
 8006154:	4b5a      	ldr	r3, [pc, #360]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 8006156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006158:	4a59      	ldr	r2, [pc, #356]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 800615a:	f023 0301 	bic.w	r3, r3, #1
 800615e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006160:	4b57      	ldr	r3, [pc, #348]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 8006162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006164:	4a56      	ldr	r2, [pc, #344]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 8006166:	f023 0304 	bic.w	r3, r3, #4
 800616a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d015      	beq.n	80061a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006174:	f7fd fc00 	bl	8003978 <HAL_GetTick>
 8006178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800617a:	e00a      	b.n	8006192 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800617c:	f7fd fbfc 	bl	8003978 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800618a:	4293      	cmp	r3, r2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e0d7      	b.n	8006342 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006192:	4b4b      	ldr	r3, [pc, #300]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 8006194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0ee      	beq.n	800617c <HAL_RCC_OscConfig+0x368>
 800619e:	e014      	b.n	80061ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a0:	f7fd fbea 	bl	8003978 <HAL_GetTick>
 80061a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061a6:	e00a      	b.n	80061be <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061a8:	f7fd fbe6 	bl	8003978 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e0c1      	b.n	8006342 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061be:	4b40      	ldr	r3, [pc, #256]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 80061c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1ee      	bne.n	80061a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061ca:	7dfb      	ldrb	r3, [r7, #23]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d105      	bne.n	80061dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061d0:	4b3b      	ldr	r3, [pc, #236]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 80061d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d4:	4a3a      	ldr	r2, [pc, #232]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 80061d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 80ad 	beq.w	8006340 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061e6:	4b36      	ldr	r3, [pc, #216]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f003 030c 	and.w	r3, r3, #12
 80061ee:	2b08      	cmp	r3, #8
 80061f0:	d060      	beq.n	80062b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d145      	bne.n	8006286 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061fa:	4b33      	ldr	r3, [pc, #204]	@ (80062c8 <HAL_RCC_OscConfig+0x4b4>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006200:	f7fd fbba 	bl	8003978 <HAL_GetTick>
 8006204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006206:	e008      	b.n	800621a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006208:	f7fd fbb6 	bl	8003978 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b02      	cmp	r3, #2
 8006214:	d901      	bls.n	800621a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e093      	b.n	8006342 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800621a:	4b29      	ldr	r3, [pc, #164]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1f0      	bne.n	8006208 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	69da      	ldr	r2, [r3, #28]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006234:	019b      	lsls	r3, r3, #6
 8006236:	431a      	orrs	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623c:	085b      	lsrs	r3, r3, #1
 800623e:	3b01      	subs	r3, #1
 8006240:	041b      	lsls	r3, r3, #16
 8006242:	431a      	orrs	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006248:	061b      	lsls	r3, r3, #24
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006250:	071b      	lsls	r3, r3, #28
 8006252:	491b      	ldr	r1, [pc, #108]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 8006254:	4313      	orrs	r3, r2
 8006256:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006258:	4b1b      	ldr	r3, [pc, #108]	@ (80062c8 <HAL_RCC_OscConfig+0x4b4>)
 800625a:	2201      	movs	r2, #1
 800625c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800625e:	f7fd fb8b 	bl	8003978 <HAL_GetTick>
 8006262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006264:	e008      	b.n	8006278 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006266:	f7fd fb87 	bl	8003978 <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	2b02      	cmp	r3, #2
 8006272:	d901      	bls.n	8006278 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e064      	b.n	8006342 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006278:	4b11      	ldr	r3, [pc, #68]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d0f0      	beq.n	8006266 <HAL_RCC_OscConfig+0x452>
 8006284:	e05c      	b.n	8006340 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006286:	4b10      	ldr	r3, [pc, #64]	@ (80062c8 <HAL_RCC_OscConfig+0x4b4>)
 8006288:	2200      	movs	r2, #0
 800628a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800628c:	f7fd fb74 	bl	8003978 <HAL_GetTick>
 8006290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006292:	e008      	b.n	80062a6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006294:	f7fd fb70 	bl	8003978 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d901      	bls.n	80062a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e04d      	b.n	8006342 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062a6:	4b06      	ldr	r3, [pc, #24]	@ (80062c0 <HAL_RCC_OscConfig+0x4ac>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1f0      	bne.n	8006294 <HAL_RCC_OscConfig+0x480>
 80062b2:	e045      	b.n	8006340 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d107      	bne.n	80062cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e040      	b.n	8006342 <HAL_RCC_OscConfig+0x52e>
 80062c0:	40023800 	.word	0x40023800
 80062c4:	40007000 	.word	0x40007000
 80062c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062cc:	4b1f      	ldr	r3, [pc, #124]	@ (800634c <HAL_RCC_OscConfig+0x538>)
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d030      	beq.n	800633c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d129      	bne.n	800633c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d122      	bne.n	800633c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80062fc:	4013      	ands	r3, r2
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006302:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006304:	4293      	cmp	r3, r2
 8006306:	d119      	bne.n	800633c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006312:	085b      	lsrs	r3, r3, #1
 8006314:	3b01      	subs	r3, #1
 8006316:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006318:	429a      	cmp	r2, r3
 800631a:	d10f      	bne.n	800633c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006326:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006328:	429a      	cmp	r2, r3
 800632a:	d107      	bne.n	800633c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006336:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006338:	429a      	cmp	r2, r3
 800633a:	d001      	beq.n	8006340 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e000      	b.n	8006342 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3718      	adds	r7, #24
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	40023800 	.word	0x40023800

08006350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e041      	b.n	80063e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d106      	bne.n	800637c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7fd f806 	bl	8003388 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2202      	movs	r2, #2
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3304      	adds	r3, #4
 800638c:	4619      	mov	r1, r3
 800638e:	4610      	mov	r0, r2
 8006390:	f000 fc62 	bl	8006c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
	...

080063f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b01      	cmp	r3, #1
 8006402:	d001      	beq.n	8006408 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e04e      	b.n	80064a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68da      	ldr	r2, [r3, #12]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f042 0201 	orr.w	r2, r2, #1
 800641e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a23      	ldr	r2, [pc, #140]	@ (80064b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d022      	beq.n	8006470 <HAL_TIM_Base_Start_IT+0x80>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006432:	d01d      	beq.n	8006470 <HAL_TIM_Base_Start_IT+0x80>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a1f      	ldr	r2, [pc, #124]	@ (80064b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d018      	beq.n	8006470 <HAL_TIM_Base_Start_IT+0x80>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1e      	ldr	r2, [pc, #120]	@ (80064bc <HAL_TIM_Base_Start_IT+0xcc>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d013      	beq.n	8006470 <HAL_TIM_Base_Start_IT+0x80>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a1c      	ldr	r2, [pc, #112]	@ (80064c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d00e      	beq.n	8006470 <HAL_TIM_Base_Start_IT+0x80>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a1b      	ldr	r2, [pc, #108]	@ (80064c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d009      	beq.n	8006470 <HAL_TIM_Base_Start_IT+0x80>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a19      	ldr	r2, [pc, #100]	@ (80064c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d004      	beq.n	8006470 <HAL_TIM_Base_Start_IT+0x80>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a18      	ldr	r2, [pc, #96]	@ (80064cc <HAL_TIM_Base_Start_IT+0xdc>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d111      	bne.n	8006494 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 0307 	and.w	r3, r3, #7
 800647a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b06      	cmp	r3, #6
 8006480:	d010      	beq.n	80064a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f042 0201 	orr.w	r2, r2, #1
 8006490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006492:	e007      	b.n	80064a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f042 0201 	orr.w	r2, r2, #1
 80064a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40010000 	.word	0x40010000
 80064b8:	40000400 	.word	0x40000400
 80064bc:	40000800 	.word	0x40000800
 80064c0:	40000c00 	.word	0x40000c00
 80064c4:	40010400 	.word	0x40010400
 80064c8:	40014000 	.word	0x40014000
 80064cc:	40001800 	.word	0x40001800

080064d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e041      	b.n	8006566 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d106      	bne.n	80064fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f839 	bl	800656e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	3304      	adds	r3, #4
 800650c:	4619      	mov	r1, r3
 800650e:	4610      	mov	r0, r2
 8006510:	f000 fba2 	bl	8006c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800656e:	b480      	push	{r7}
 8006570:	b083      	sub	sp, #12
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006576:	bf00      	nop
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
	...

08006584 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d109      	bne.n	80065a8 <HAL_TIM_PWM_Start+0x24>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b01      	cmp	r3, #1
 800659e:	bf14      	ite	ne
 80065a0:	2301      	movne	r3, #1
 80065a2:	2300      	moveq	r3, #0
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	e022      	b.n	80065ee <HAL_TIM_PWM_Start+0x6a>
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	d109      	bne.n	80065c2 <HAL_TIM_PWM_Start+0x3e>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	bf14      	ite	ne
 80065ba:	2301      	movne	r3, #1
 80065bc:	2300      	moveq	r3, #0
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	e015      	b.n	80065ee <HAL_TIM_PWM_Start+0x6a>
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d109      	bne.n	80065dc <HAL_TIM_PWM_Start+0x58>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	bf14      	ite	ne
 80065d4:	2301      	movne	r3, #1
 80065d6:	2300      	moveq	r3, #0
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	e008      	b.n	80065ee <HAL_TIM_PWM_Start+0x6a>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	bf14      	ite	ne
 80065e8:	2301      	movne	r3, #1
 80065ea:	2300      	moveq	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e07c      	b.n	80066f0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d104      	bne.n	8006606 <HAL_TIM_PWM_Start+0x82>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006604:	e013      	b.n	800662e <HAL_TIM_PWM_Start+0xaa>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2b04      	cmp	r3, #4
 800660a:	d104      	bne.n	8006616 <HAL_TIM_PWM_Start+0x92>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2202      	movs	r2, #2
 8006610:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006614:	e00b      	b.n	800662e <HAL_TIM_PWM_Start+0xaa>
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b08      	cmp	r3, #8
 800661a:	d104      	bne.n	8006626 <HAL_TIM_PWM_Start+0xa2>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006624:	e003      	b.n	800662e <HAL_TIM_PWM_Start+0xaa>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2202      	movs	r2, #2
 800662a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2201      	movs	r2, #1
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fe04 	bl	8007244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a2d      	ldr	r2, [pc, #180]	@ (80066f8 <HAL_TIM_PWM_Start+0x174>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d004      	beq.n	8006650 <HAL_TIM_PWM_Start+0xcc>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a2c      	ldr	r2, [pc, #176]	@ (80066fc <HAL_TIM_PWM_Start+0x178>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d101      	bne.n	8006654 <HAL_TIM_PWM_Start+0xd0>
 8006650:	2301      	movs	r3, #1
 8006652:	e000      	b.n	8006656 <HAL_TIM_PWM_Start+0xd2>
 8006654:	2300      	movs	r3, #0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d007      	beq.n	800666a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006668:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a22      	ldr	r2, [pc, #136]	@ (80066f8 <HAL_TIM_PWM_Start+0x174>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d022      	beq.n	80066ba <HAL_TIM_PWM_Start+0x136>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800667c:	d01d      	beq.n	80066ba <HAL_TIM_PWM_Start+0x136>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a1f      	ldr	r2, [pc, #124]	@ (8006700 <HAL_TIM_PWM_Start+0x17c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d018      	beq.n	80066ba <HAL_TIM_PWM_Start+0x136>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a1d      	ldr	r2, [pc, #116]	@ (8006704 <HAL_TIM_PWM_Start+0x180>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d013      	beq.n	80066ba <HAL_TIM_PWM_Start+0x136>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a1c      	ldr	r2, [pc, #112]	@ (8006708 <HAL_TIM_PWM_Start+0x184>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d00e      	beq.n	80066ba <HAL_TIM_PWM_Start+0x136>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a16      	ldr	r2, [pc, #88]	@ (80066fc <HAL_TIM_PWM_Start+0x178>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d009      	beq.n	80066ba <HAL_TIM_PWM_Start+0x136>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a18      	ldr	r2, [pc, #96]	@ (800670c <HAL_TIM_PWM_Start+0x188>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d004      	beq.n	80066ba <HAL_TIM_PWM_Start+0x136>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a16      	ldr	r2, [pc, #88]	@ (8006710 <HAL_TIM_PWM_Start+0x18c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d111      	bne.n	80066de <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2b06      	cmp	r3, #6
 80066ca:	d010      	beq.n	80066ee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f042 0201 	orr.w	r2, r2, #1
 80066da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066dc:	e007      	b.n	80066ee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f042 0201 	orr.w	r2, r2, #1
 80066ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40010000 	.word	0x40010000
 80066fc:	40010400 	.word	0x40010400
 8006700:	40000400 	.word	0x40000400
 8006704:	40000800 	.word	0x40000800
 8006708:	40000c00 	.word	0x40000c00
 800670c:	40014000 	.word	0x40014000
 8006710:	40001800 	.word	0x40001800

08006714 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d020      	beq.n	8006778 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d01b      	beq.n	8006778 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f06f 0202 	mvn.w	r2, #2
 8006748:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	f003 0303 	and.w	r3, r3, #3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fa5b 	bl	8006c1a <HAL_TIM_IC_CaptureCallback>
 8006764:	e005      	b.n	8006772 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fa4d 	bl	8006c06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fa5e 	bl	8006c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f003 0304 	and.w	r3, r3, #4
 800677e:	2b00      	cmp	r3, #0
 8006780:	d020      	beq.n	80067c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d01b      	beq.n	80067c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f06f 0204 	mvn.w	r2, #4
 8006794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2202      	movs	r2, #2
 800679a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fa35 	bl	8006c1a <HAL_TIM_IC_CaptureCallback>
 80067b0:	e005      	b.n	80067be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fa27 	bl	8006c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fa38 	bl	8006c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f003 0308 	and.w	r3, r3, #8
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d020      	beq.n	8006810 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f003 0308 	and.w	r3, r3, #8
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d01b      	beq.n	8006810 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f06f 0208 	mvn.w	r2, #8
 80067e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2204      	movs	r2, #4
 80067e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	f003 0303 	and.w	r3, r3, #3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fa0f 	bl	8006c1a <HAL_TIM_IC_CaptureCallback>
 80067fc:	e005      	b.n	800680a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fa01 	bl	8006c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fa12 	bl	8006c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f003 0310 	and.w	r3, r3, #16
 8006816:	2b00      	cmp	r3, #0
 8006818:	d020      	beq.n	800685c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f003 0310 	and.w	r3, r3, #16
 8006820:	2b00      	cmp	r3, #0
 8006822:	d01b      	beq.n	800685c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f06f 0210 	mvn.w	r2, #16
 800682c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2208      	movs	r2, #8
 8006832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f9e9 	bl	8006c1a <HAL_TIM_IC_CaptureCallback>
 8006848:	e005      	b.n	8006856 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f9db 	bl	8006c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f9ec 	bl	8006c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00c      	beq.n	8006880 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d007      	beq.n	8006880 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f06f 0201 	mvn.w	r2, #1
 8006878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7fa fc16 	bl	80010ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00c      	beq.n	80068a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006890:	2b00      	cmp	r3, #0
 8006892:	d007      	beq.n	80068a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800689c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fd7c 	bl	800739c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00c      	beq.n	80068c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d007      	beq.n	80068c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80068c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f9bd 	bl	8006c42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f003 0320 	and.w	r3, r3, #32
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00c      	beq.n	80068ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f003 0320 	and.w	r3, r3, #32
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d007      	beq.n	80068ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f06f 0220 	mvn.w	r2, #32
 80068e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fd4e 	bl	8007388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068ec:	bf00      	nop
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800690a:	2b01      	cmp	r3, #1
 800690c:	d101      	bne.n	8006912 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800690e:	2302      	movs	r3, #2
 8006910:	e0ae      	b.n	8006a70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b0c      	cmp	r3, #12
 800691e:	f200 809f 	bhi.w	8006a60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006922:	a201      	add	r2, pc, #4	@ (adr r2, 8006928 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006928:	0800695d 	.word	0x0800695d
 800692c:	08006a61 	.word	0x08006a61
 8006930:	08006a61 	.word	0x08006a61
 8006934:	08006a61 	.word	0x08006a61
 8006938:	0800699d 	.word	0x0800699d
 800693c:	08006a61 	.word	0x08006a61
 8006940:	08006a61 	.word	0x08006a61
 8006944:	08006a61 	.word	0x08006a61
 8006948:	080069df 	.word	0x080069df
 800694c:	08006a61 	.word	0x08006a61
 8006950:	08006a61 	.word	0x08006a61
 8006954:	08006a61 	.word	0x08006a61
 8006958:	08006a1f 	.word	0x08006a1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68b9      	ldr	r1, [r7, #8]
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fa24 	bl	8006db0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699a      	ldr	r2, [r3, #24]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0208 	orr.w	r2, r2, #8
 8006976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699a      	ldr	r2, [r3, #24]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 0204 	bic.w	r2, r2, #4
 8006986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6999      	ldr	r1, [r3, #24]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	691a      	ldr	r2, [r3, #16]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	619a      	str	r2, [r3, #24]
      break;
 800699a:	e064      	b.n	8006a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68b9      	ldr	r1, [r7, #8]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fa74 	bl	8006e90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699a      	ldr	r2, [r3, #24]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699a      	ldr	r2, [r3, #24]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6999      	ldr	r1, [r3, #24]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	021a      	lsls	r2, r3, #8
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	619a      	str	r2, [r3, #24]
      break;
 80069dc:	e043      	b.n	8006a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68b9      	ldr	r1, [r7, #8]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 fac9 	bl	8006f7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69da      	ldr	r2, [r3, #28]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f042 0208 	orr.w	r2, r2, #8
 80069f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69da      	ldr	r2, [r3, #28]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f022 0204 	bic.w	r2, r2, #4
 8006a08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	69d9      	ldr	r1, [r3, #28]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	691a      	ldr	r2, [r3, #16]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	61da      	str	r2, [r3, #28]
      break;
 8006a1c:	e023      	b.n	8006a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68b9      	ldr	r1, [r7, #8]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 fb1d 	bl	8007064 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	69da      	ldr	r2, [r3, #28]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	69da      	ldr	r2, [r3, #28]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	69d9      	ldr	r1, [r3, #28]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	021a      	lsls	r2, r3, #8
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	61da      	str	r2, [r3, #28]
      break;
 8006a5e:	e002      	b.n	8006a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	75fb      	strb	r3, [r7, #23]
      break;
 8006a64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3718      	adds	r7, #24
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d101      	bne.n	8006a94 <HAL_TIM_ConfigClockSource+0x1c>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e0b4      	b.n	8006bfe <HAL_TIM_ConfigClockSource+0x186>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006ab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006aba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006acc:	d03e      	beq.n	8006b4c <HAL_TIM_ConfigClockSource+0xd4>
 8006ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ad2:	f200 8087 	bhi.w	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ada:	f000 8086 	beq.w	8006bea <HAL_TIM_ConfigClockSource+0x172>
 8006ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ae2:	d87f      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ae4:	2b70      	cmp	r3, #112	@ 0x70
 8006ae6:	d01a      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0xa6>
 8006ae8:	2b70      	cmp	r3, #112	@ 0x70
 8006aea:	d87b      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006aec:	2b60      	cmp	r3, #96	@ 0x60
 8006aee:	d050      	beq.n	8006b92 <HAL_TIM_ConfigClockSource+0x11a>
 8006af0:	2b60      	cmp	r3, #96	@ 0x60
 8006af2:	d877      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006af4:	2b50      	cmp	r3, #80	@ 0x50
 8006af6:	d03c      	beq.n	8006b72 <HAL_TIM_ConfigClockSource+0xfa>
 8006af8:	2b50      	cmp	r3, #80	@ 0x50
 8006afa:	d873      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006afc:	2b40      	cmp	r3, #64	@ 0x40
 8006afe:	d058      	beq.n	8006bb2 <HAL_TIM_ConfigClockSource+0x13a>
 8006b00:	2b40      	cmp	r3, #64	@ 0x40
 8006b02:	d86f      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b04:	2b30      	cmp	r3, #48	@ 0x30
 8006b06:	d064      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b08:	2b30      	cmp	r3, #48	@ 0x30
 8006b0a:	d86b      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b0c:	2b20      	cmp	r3, #32
 8006b0e:	d060      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b10:	2b20      	cmp	r3, #32
 8006b12:	d867      	bhi.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d05c      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b18:	2b10      	cmp	r3, #16
 8006b1a:	d05a      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b1c:	e062      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b2e:	f000 fb69 	bl	8007204 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006b40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	609a      	str	r2, [r3, #8]
      break;
 8006b4a:	e04f      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b5c:	f000 fb52 	bl	8007204 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b6e:	609a      	str	r2, [r3, #8]
      break;
 8006b70:	e03c      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b7e:	461a      	mov	r2, r3
 8006b80:	f000 fac6 	bl	8007110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2150      	movs	r1, #80	@ 0x50
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 fb1f 	bl	80071ce <TIM_ITRx_SetConfig>
      break;
 8006b90:	e02c      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	f000 fae5 	bl	800716e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2160      	movs	r1, #96	@ 0x60
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 fb0f 	bl	80071ce <TIM_ITRx_SetConfig>
      break;
 8006bb0:	e01c      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f000 faa6 	bl	8007110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2140      	movs	r1, #64	@ 0x40
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 faff 	bl	80071ce <TIM_ITRx_SetConfig>
      break;
 8006bd0:	e00c      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4619      	mov	r1, r3
 8006bdc:	4610      	mov	r0, r2
 8006bde:	f000 faf6 	bl	80071ce <TIM_ITRx_SetConfig>
      break;
 8006be2:	e003      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	73fb      	strb	r3, [r7, #15]
      break;
 8006be8:	e000      	b.n	8006bec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006bea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b083      	sub	sp, #12
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c0e:	bf00      	nop
 8006c10:	370c      	adds	r7, #12
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b083      	sub	sp, #12
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c22:	bf00      	nop
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c36:	bf00      	nop
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b083      	sub	sp, #12
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c4a:	bf00      	nop
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
	...

08006c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a46      	ldr	r2, [pc, #280]	@ (8006d84 <TIM_Base_SetConfig+0x12c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d013      	beq.n	8006c98 <TIM_Base_SetConfig+0x40>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c76:	d00f      	beq.n	8006c98 <TIM_Base_SetConfig+0x40>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a43      	ldr	r2, [pc, #268]	@ (8006d88 <TIM_Base_SetConfig+0x130>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00b      	beq.n	8006c98 <TIM_Base_SetConfig+0x40>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a42      	ldr	r2, [pc, #264]	@ (8006d8c <TIM_Base_SetConfig+0x134>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d007      	beq.n	8006c98 <TIM_Base_SetConfig+0x40>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a41      	ldr	r2, [pc, #260]	@ (8006d90 <TIM_Base_SetConfig+0x138>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d003      	beq.n	8006c98 <TIM_Base_SetConfig+0x40>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a40      	ldr	r2, [pc, #256]	@ (8006d94 <TIM_Base_SetConfig+0x13c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d108      	bne.n	8006caa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a35      	ldr	r2, [pc, #212]	@ (8006d84 <TIM_Base_SetConfig+0x12c>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d02b      	beq.n	8006d0a <TIM_Base_SetConfig+0xb2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cb8:	d027      	beq.n	8006d0a <TIM_Base_SetConfig+0xb2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a32      	ldr	r2, [pc, #200]	@ (8006d88 <TIM_Base_SetConfig+0x130>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d023      	beq.n	8006d0a <TIM_Base_SetConfig+0xb2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a31      	ldr	r2, [pc, #196]	@ (8006d8c <TIM_Base_SetConfig+0x134>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d01f      	beq.n	8006d0a <TIM_Base_SetConfig+0xb2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a30      	ldr	r2, [pc, #192]	@ (8006d90 <TIM_Base_SetConfig+0x138>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d01b      	beq.n	8006d0a <TIM_Base_SetConfig+0xb2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a2f      	ldr	r2, [pc, #188]	@ (8006d94 <TIM_Base_SetConfig+0x13c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d017      	beq.n	8006d0a <TIM_Base_SetConfig+0xb2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8006d98 <TIM_Base_SetConfig+0x140>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d013      	beq.n	8006d0a <TIM_Base_SetConfig+0xb2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a2d      	ldr	r2, [pc, #180]	@ (8006d9c <TIM_Base_SetConfig+0x144>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d00f      	beq.n	8006d0a <TIM_Base_SetConfig+0xb2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a2c      	ldr	r2, [pc, #176]	@ (8006da0 <TIM_Base_SetConfig+0x148>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00b      	beq.n	8006d0a <TIM_Base_SetConfig+0xb2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a2b      	ldr	r2, [pc, #172]	@ (8006da4 <TIM_Base_SetConfig+0x14c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d007      	beq.n	8006d0a <TIM_Base_SetConfig+0xb2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a2a      	ldr	r2, [pc, #168]	@ (8006da8 <TIM_Base_SetConfig+0x150>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d003      	beq.n	8006d0a <TIM_Base_SetConfig+0xb2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a29      	ldr	r2, [pc, #164]	@ (8006dac <TIM_Base_SetConfig+0x154>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d108      	bne.n	8006d1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a10      	ldr	r2, [pc, #64]	@ (8006d84 <TIM_Base_SetConfig+0x12c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d003      	beq.n	8006d50 <TIM_Base_SetConfig+0xf8>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a12      	ldr	r2, [pc, #72]	@ (8006d94 <TIM_Base_SetConfig+0x13c>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d103      	bne.n	8006d58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	691a      	ldr	r2, [r3, #16]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d105      	bne.n	8006d76 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	f023 0201 	bic.w	r2, r3, #1
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	611a      	str	r2, [r3, #16]
  }
}
 8006d76:	bf00      	nop
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	40010000 	.word	0x40010000
 8006d88:	40000400 	.word	0x40000400
 8006d8c:	40000800 	.word	0x40000800
 8006d90:	40000c00 	.word	0x40000c00
 8006d94:	40010400 	.word	0x40010400
 8006d98:	40014000 	.word	0x40014000
 8006d9c:	40014400 	.word	0x40014400
 8006da0:	40014800 	.word	0x40014800
 8006da4:	40001800 	.word	0x40001800
 8006da8:	40001c00 	.word	0x40001c00
 8006dac:	40002000 	.word	0x40002000

08006db0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	f023 0201 	bic.w	r2, r3, #1
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f023 0303 	bic.w	r3, r3, #3
 8006de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f023 0302 	bic.w	r3, r3, #2
 8006df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a20      	ldr	r2, [pc, #128]	@ (8006e88 <TIM_OC1_SetConfig+0xd8>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d003      	beq.n	8006e14 <TIM_OC1_SetConfig+0x64>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8006e8c <TIM_OC1_SetConfig+0xdc>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d10c      	bne.n	8006e2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f023 0308 	bic.w	r3, r3, #8
 8006e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f023 0304 	bic.w	r3, r3, #4
 8006e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a15      	ldr	r2, [pc, #84]	@ (8006e88 <TIM_OC1_SetConfig+0xd8>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d003      	beq.n	8006e3e <TIM_OC1_SetConfig+0x8e>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a14      	ldr	r2, [pc, #80]	@ (8006e8c <TIM_OC1_SetConfig+0xdc>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d111      	bne.n	8006e62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	621a      	str	r2, [r3, #32]
}
 8006e7c:	bf00      	nop
 8006e7e:	371c      	adds	r7, #28
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	40010000 	.word	0x40010000
 8006e8c:	40010400 	.word	0x40010400

08006e90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b087      	sub	sp, #28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	f023 0210 	bic.w	r2, r3, #16
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	021b      	lsls	r3, r3, #8
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	f023 0320 	bic.w	r3, r3, #32
 8006eda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	011b      	lsls	r3, r3, #4
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a22      	ldr	r2, [pc, #136]	@ (8006f74 <TIM_OC2_SetConfig+0xe4>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d003      	beq.n	8006ef8 <TIM_OC2_SetConfig+0x68>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a21      	ldr	r2, [pc, #132]	@ (8006f78 <TIM_OC2_SetConfig+0xe8>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d10d      	bne.n	8006f14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	011b      	lsls	r3, r3, #4
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a17      	ldr	r2, [pc, #92]	@ (8006f74 <TIM_OC2_SetConfig+0xe4>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d003      	beq.n	8006f24 <TIM_OC2_SetConfig+0x94>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a16      	ldr	r2, [pc, #88]	@ (8006f78 <TIM_OC2_SetConfig+0xe8>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d113      	bne.n	8006f4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	693a      	ldr	r2, [r7, #16]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	621a      	str	r2, [r3, #32]
}
 8006f66:	bf00      	nop
 8006f68:	371c      	adds	r7, #28
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	40010000 	.word	0x40010000
 8006f78:	40010400 	.word	0x40010400

08006f7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
 8006f90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f023 0303 	bic.w	r3, r3, #3
 8006fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	021b      	lsls	r3, r3, #8
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a21      	ldr	r2, [pc, #132]	@ (800705c <TIM_OC3_SetConfig+0xe0>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d003      	beq.n	8006fe2 <TIM_OC3_SetConfig+0x66>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a20      	ldr	r2, [pc, #128]	@ (8007060 <TIM_OC3_SetConfig+0xe4>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d10d      	bne.n	8006ffe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006fe8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	021b      	lsls	r3, r3, #8
 8006ff0:	697a      	ldr	r2, [r7, #20]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ffc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a16      	ldr	r2, [pc, #88]	@ (800705c <TIM_OC3_SetConfig+0xe0>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d003      	beq.n	800700e <TIM_OC3_SetConfig+0x92>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a15      	ldr	r2, [pc, #84]	@ (8007060 <TIM_OC3_SetConfig+0xe4>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d113      	bne.n	8007036 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007014:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800701c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	011b      	lsls	r3, r3, #4
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	4313      	orrs	r3, r2
 8007028:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	011b      	lsls	r3, r3, #4
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	4313      	orrs	r3, r2
 8007034:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	621a      	str	r2, [r3, #32]
}
 8007050:	bf00      	nop
 8007052:	371c      	adds	r7, #28
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	40010000 	.word	0x40010000
 8007060:	40010400 	.word	0x40010400

08007064 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800709a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	021b      	lsls	r3, r3, #8
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	031b      	lsls	r3, r3, #12
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a12      	ldr	r2, [pc, #72]	@ (8007108 <TIM_OC4_SetConfig+0xa4>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d003      	beq.n	80070cc <TIM_OC4_SetConfig+0x68>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a11      	ldr	r2, [pc, #68]	@ (800710c <TIM_OC4_SetConfig+0xa8>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d109      	bne.n	80070e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80070d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	695b      	ldr	r3, [r3, #20]
 80070d8:	019b      	lsls	r3, r3, #6
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	4313      	orrs	r3, r2
 80070de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	621a      	str	r2, [r3, #32]
}
 80070fa:	bf00      	nop
 80070fc:	371c      	adds	r7, #28
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	40010000 	.word	0x40010000
 800710c:	40010400 	.word	0x40010400

08007110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007110:	b480      	push	{r7}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6a1b      	ldr	r3, [r3, #32]
 8007120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	f023 0201 	bic.w	r2, r3, #1
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800713a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	011b      	lsls	r3, r3, #4
 8007140:	693a      	ldr	r2, [r7, #16]
 8007142:	4313      	orrs	r3, r2
 8007144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f023 030a 	bic.w	r3, r3, #10
 800714c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	4313      	orrs	r3, r2
 8007154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	621a      	str	r2, [r3, #32]
}
 8007162:	bf00      	nop
 8007164:	371c      	adds	r7, #28
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800716e:	b480      	push	{r7}
 8007170:	b087      	sub	sp, #28
 8007172:	af00      	add	r7, sp, #0
 8007174:	60f8      	str	r0, [r7, #12]
 8007176:	60b9      	str	r1, [r7, #8]
 8007178:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	f023 0210 	bic.w	r2, r3, #16
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007198:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	031b      	lsls	r3, r3, #12
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80071aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	011b      	lsls	r3, r3, #4
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	621a      	str	r2, [r3, #32]
}
 80071c2:	bf00      	nop
 80071c4:	371c      	adds	r7, #28
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b085      	sub	sp, #20
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	f043 0307 	orr.w	r3, r3, #7
 80071f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	609a      	str	r2, [r3, #8]
}
 80071f8:	bf00      	nop
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
 8007210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800721e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	021a      	lsls	r2, r3, #8
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	431a      	orrs	r2, r3
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	4313      	orrs	r3, r2
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	4313      	orrs	r3, r2
 8007230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	609a      	str	r2, [r3, #8]
}
 8007238:	bf00      	nop
 800723a:	371c      	adds	r7, #28
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f003 031f 	and.w	r3, r3, #31
 8007256:	2201      	movs	r2, #1
 8007258:	fa02 f303 	lsl.w	r3, r2, r3
 800725c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a1a      	ldr	r2, [r3, #32]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	43db      	mvns	r3, r3
 8007266:	401a      	ands	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6a1a      	ldr	r2, [r3, #32]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f003 031f 	and.w	r3, r3, #31
 8007276:	6879      	ldr	r1, [r7, #4]
 8007278:	fa01 f303 	lsl.w	r3, r1, r3
 800727c:	431a      	orrs	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	621a      	str	r2, [r3, #32]
}
 8007282:	bf00      	nop
 8007284:	371c      	adds	r7, #28
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
	...

08007290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d101      	bne.n	80072a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072a4:	2302      	movs	r3, #2
 80072a6:	e05a      	b.n	800735e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a21      	ldr	r2, [pc, #132]	@ (800736c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d022      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072f4:	d01d      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a1d      	ldr	r2, [pc, #116]	@ (8007370 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d018      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a1b      	ldr	r2, [pc, #108]	@ (8007374 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d013      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a1a      	ldr	r2, [pc, #104]	@ (8007378 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00e      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a18      	ldr	r2, [pc, #96]	@ (800737c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d009      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a17      	ldr	r2, [pc, #92]	@ (8007380 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d004      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a15      	ldr	r2, [pc, #84]	@ (8007384 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d10c      	bne.n	800734c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	4313      	orrs	r3, r2
 8007342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	40010000 	.word	0x40010000
 8007370:	40000400 	.word	0x40000400
 8007374:	40000800 	.word	0x40000800
 8007378:	40000c00 	.word	0x40000c00
 800737c:	40010400 	.word	0x40010400
 8007380:	40014000 	.word	0x40014000
 8007384:	40001800 	.word	0x40001800

08007388 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e042      	b.n	8007448 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d106      	bne.n	80073dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7fc f84c 	bl	8003474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2224      	movs	r2, #36	@ 0x24
 80073e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68da      	ldr	r2, [r3, #12]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80073f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fc19 	bl	8007c2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	691a      	ldr	r2, [r3, #16]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007408:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	695a      	ldr	r2, [r3, #20]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007418:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68da      	ldr	r2, [r3, #12]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007428:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2220      	movs	r2, #32
 8007434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2220      	movs	r2, #32
 800743c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b08a      	sub	sp, #40	@ 0x28
 8007454:	af02      	add	r7, sp, #8
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	603b      	str	r3, [r7, #0]
 800745c:	4613      	mov	r3, r2
 800745e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007460:	2300      	movs	r3, #0
 8007462:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b20      	cmp	r3, #32
 800746e:	d175      	bne.n	800755c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d002      	beq.n	800747c <HAL_UART_Transmit+0x2c>
 8007476:	88fb      	ldrh	r3, [r7, #6]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d101      	bne.n	8007480 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e06e      	b.n	800755e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2221      	movs	r2, #33	@ 0x21
 800748a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800748e:	f7fc fa73 	bl	8003978 <HAL_GetTick>
 8007492:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	88fa      	ldrh	r2, [r7, #6]
 8007498:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	88fa      	ldrh	r2, [r7, #6]
 800749e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074a8:	d108      	bne.n	80074bc <HAL_UART_Transmit+0x6c>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d104      	bne.n	80074bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80074b2:	2300      	movs	r3, #0
 80074b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	61bb      	str	r3, [r7, #24]
 80074ba:	e003      	b.n	80074c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074c0:	2300      	movs	r3, #0
 80074c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074c4:	e02e      	b.n	8007524 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	2200      	movs	r2, #0
 80074ce:	2180      	movs	r1, #128	@ 0x80
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f000 fa2c 	bl	800792e <UART_WaitOnFlagUntilTimeout>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d005      	beq.n	80074e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2220      	movs	r2, #32
 80074e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e03a      	b.n	800755e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10b      	bne.n	8007506 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	3302      	adds	r3, #2
 8007502:	61bb      	str	r3, [r7, #24]
 8007504:	e007      	b.n	8007516 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	781a      	ldrb	r2, [r3, #0]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	3301      	adds	r3, #1
 8007514:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800751a:	b29b      	uxth	r3, r3
 800751c:	3b01      	subs	r3, #1
 800751e:	b29a      	uxth	r2, r3
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007528:	b29b      	uxth	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1cb      	bne.n	80074c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2200      	movs	r2, #0
 8007536:	2140      	movs	r1, #64	@ 0x40
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f000 f9f8 	bl	800792e <UART_WaitOnFlagUntilTimeout>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d005      	beq.n	8007550 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2220      	movs	r2, #32
 8007548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e006      	b.n	800755e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2220      	movs	r2, #32
 8007554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007558:	2300      	movs	r3, #0
 800755a:	e000      	b.n	800755e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800755c:	2302      	movs	r3, #2
  }
}
 800755e:	4618      	mov	r0, r3
 8007560:	3720      	adds	r7, #32
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b08a      	sub	sp, #40	@ 0x28
 800756a:	af02      	add	r7, sp, #8
 800756c:	60f8      	str	r0, [r7, #12]
 800756e:	60b9      	str	r1, [r7, #8]
 8007570:	603b      	str	r3, [r7, #0]
 8007572:	4613      	mov	r3, r2
 8007574:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b20      	cmp	r3, #32
 8007584:	f040 8081 	bne.w	800768a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d002      	beq.n	8007594 <HAL_UART_Receive+0x2e>
 800758e:	88fb      	ldrh	r3, [r7, #6]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e079      	b.n	800768c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2222      	movs	r2, #34	@ 0x22
 80075a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075ac:	f7fc f9e4 	bl	8003978 <HAL_GetTick>
 80075b0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	88fa      	ldrh	r2, [r7, #6]
 80075b6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	88fa      	ldrh	r2, [r7, #6]
 80075bc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075c6:	d108      	bne.n	80075da <HAL_UART_Receive+0x74>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d104      	bne.n	80075da <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80075d0:	2300      	movs	r3, #0
 80075d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	61bb      	str	r3, [r7, #24]
 80075d8:	e003      	b.n	80075e2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075de:	2300      	movs	r3, #0
 80075e0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80075e2:	e047      	b.n	8007674 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2200      	movs	r2, #0
 80075ec:	2120      	movs	r1, #32
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 f99d 	bl	800792e <UART_WaitOnFlagUntilTimeout>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d005      	beq.n	8007606 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2220      	movs	r2, #32
 80075fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e042      	b.n	800768c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10c      	bne.n	8007626 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	b29b      	uxth	r3, r3
 8007614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007618:	b29a      	uxth	r2, r3
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	3302      	adds	r3, #2
 8007622:	61bb      	str	r3, [r7, #24]
 8007624:	e01f      	b.n	8007666 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800762e:	d007      	beq.n	8007640 <HAL_UART_Receive+0xda>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10a      	bne.n	800764e <HAL_UART_Receive+0xe8>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d106      	bne.n	800764e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	b2da      	uxtb	r2, r3
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	701a      	strb	r2, [r3, #0]
 800764c:	e008      	b.n	8007660 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	b2db      	uxtb	r3, r3
 8007656:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800765a:	b2da      	uxtb	r2, r3
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	3301      	adds	r3, #1
 8007664:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800766a:	b29b      	uxth	r3, r3
 800766c:	3b01      	subs	r3, #1
 800766e:	b29a      	uxth	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007678:	b29b      	uxth	r3, r3
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1b2      	bne.n	80075e4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2220      	movs	r2, #32
 8007682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	e000      	b.n	800768c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800768a:	2302      	movs	r3, #2
  }
}
 800768c:	4618      	mov	r0, r3
 800768e:	3720      	adds	r7, #32
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	4613      	mov	r3, r2
 80076a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b20      	cmp	r3, #32
 80076ac:	d112      	bne.n	80076d4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d002      	beq.n	80076ba <HAL_UART_Receive_DMA+0x26>
 80076b4:	88fb      	ldrh	r3, [r7, #6]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d101      	bne.n	80076be <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e00b      	b.n	80076d6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80076c4:	88fb      	ldrh	r3, [r7, #6]
 80076c6:	461a      	mov	r2, r3
 80076c8:	68b9      	ldr	r1, [r7, #8]
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 f988 	bl	80079e0 <UART_Start_Receive_DMA>
 80076d0:	4603      	mov	r3, r0
 80076d2:	e000      	b.n	80076d6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80076d4:	2302      	movs	r3, #2
  }
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80076de:	b480      	push	{r7}
 80076e0:	b083      	sub	sp, #12
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007706:	b480      	push	{r7}
 8007708:	b083      	sub	sp, #12
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800770e:	bf00      	nop
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800771a:	b480      	push	{r7}
 800771c:	b083      	sub	sp, #12
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	460b      	mov	r3, r1
 8007724:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007726:	bf00      	nop
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b09c      	sub	sp, #112	@ 0x70
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800773e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800774a:	2b00      	cmp	r3, #0
 800774c:	d172      	bne.n	8007834 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800774e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007750:	2200      	movs	r2, #0
 8007752:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007754:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	330c      	adds	r3, #12
 800775a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800775e:	e853 3f00 	ldrex	r3, [r3]
 8007762:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007766:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800776a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800776c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	330c      	adds	r3, #12
 8007772:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007774:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007776:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007778:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800777a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800777c:	e841 2300 	strex	r3, r2, [r1]
 8007780:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007782:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1e5      	bne.n	8007754 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007788:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3314      	adds	r3, #20
 800778e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007792:	e853 3f00 	ldrex	r3, [r3]
 8007796:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800779a:	f023 0301 	bic.w	r3, r3, #1
 800779e:	667b      	str	r3, [r7, #100]	@ 0x64
 80077a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	3314      	adds	r3, #20
 80077a6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80077a8:	647a      	str	r2, [r7, #68]	@ 0x44
 80077aa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077b0:	e841 2300 	strex	r3, r2, [r1]
 80077b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1e5      	bne.n	8007788 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	3314      	adds	r3, #20
 80077c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c6:	e853 3f00 	ldrex	r3, [r3]
 80077ca:	623b      	str	r3, [r7, #32]
   return(result);
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80077d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	3314      	adds	r3, #20
 80077da:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80077dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80077de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077e4:	e841 2300 	strex	r3, r2, [r1]
 80077e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1e5      	bne.n	80077bc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80077f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077f2:	2220      	movs	r2, #32
 80077f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d119      	bne.n	8007834 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007800:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	330c      	adds	r3, #12
 8007806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	e853 3f00 	ldrex	r3, [r3]
 800780e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f023 0310 	bic.w	r3, r3, #16
 8007816:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007818:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	330c      	adds	r3, #12
 800781e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007820:	61fa      	str	r2, [r7, #28]
 8007822:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007824:	69b9      	ldr	r1, [r7, #24]
 8007826:	69fa      	ldr	r2, [r7, #28]
 8007828:	e841 2300 	strex	r3, r2, [r1]
 800782c:	617b      	str	r3, [r7, #20]
   return(result);
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1e5      	bne.n	8007800 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007834:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007836:	2200      	movs	r2, #0
 8007838:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800783a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800783c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800783e:	2b01      	cmp	r3, #1
 8007840:	d106      	bne.n	8007850 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007842:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007844:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007846:	4619      	mov	r1, r3
 8007848:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800784a:	f7ff ff66 	bl	800771a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800784e:	e002      	b.n	8007856 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007850:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007852:	f7ff ff44 	bl	80076de <HAL_UART_RxCpltCallback>
}
 8007856:	bf00      	nop
 8007858:	3770      	adds	r7, #112	@ 0x70
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2201      	movs	r2, #1
 8007870:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007876:	2b01      	cmp	r3, #1
 8007878:	d108      	bne.n	800788c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800787e:	085b      	lsrs	r3, r3, #1
 8007880:	b29b      	uxth	r3, r3
 8007882:	4619      	mov	r1, r3
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f7ff ff48 	bl	800771a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800788a:	e002      	b.n	8007892 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f7ff ff30 	bl	80076f2 <HAL_UART_RxHalfCpltCallback>
}
 8007892:	bf00      	nop
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b084      	sub	sp, #16
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078aa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078b6:	2b80      	cmp	r3, #128	@ 0x80
 80078b8:	bf0c      	ite	eq
 80078ba:	2301      	moveq	r3, #1
 80078bc:	2300      	movne	r3, #0
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b21      	cmp	r3, #33	@ 0x21
 80078cc:	d108      	bne.n	80078e0 <UART_DMAError+0x46>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d005      	beq.n	80078e0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2200      	movs	r2, #0
 80078d8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80078da:	68b8      	ldr	r0, [r7, #8]
 80078dc:	f000 f91a 	bl	8007b14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ea:	2b40      	cmp	r3, #64	@ 0x40
 80078ec:	bf0c      	ite	eq
 80078ee:	2301      	moveq	r3, #1
 80078f0:	2300      	movne	r3, #0
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b22      	cmp	r3, #34	@ 0x22
 8007900:	d108      	bne.n	8007914 <UART_DMAError+0x7a>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d005      	beq.n	8007914 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2200      	movs	r2, #0
 800790c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800790e:	68b8      	ldr	r0, [r7, #8]
 8007910:	f000 f928 	bl	8007b64 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007918:	f043 0210 	orr.w	r2, r3, #16
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007920:	68b8      	ldr	r0, [r7, #8]
 8007922:	f7ff fef0 	bl	8007706 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007926:	bf00      	nop
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b086      	sub	sp, #24
 8007932:	af00      	add	r7, sp, #0
 8007934:	60f8      	str	r0, [r7, #12]
 8007936:	60b9      	str	r1, [r7, #8]
 8007938:	603b      	str	r3, [r7, #0]
 800793a:	4613      	mov	r3, r2
 800793c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800793e:	e03b      	b.n	80079b8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007946:	d037      	beq.n	80079b8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007948:	f7fc f816 	bl	8003978 <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	6a3a      	ldr	r2, [r7, #32]
 8007954:	429a      	cmp	r2, r3
 8007956:	d302      	bcc.n	800795e <UART_WaitOnFlagUntilTimeout+0x30>
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d101      	bne.n	8007962 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e03a      	b.n	80079d8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	f003 0304 	and.w	r3, r3, #4
 800796c:	2b00      	cmp	r3, #0
 800796e:	d023      	beq.n	80079b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2b80      	cmp	r3, #128	@ 0x80
 8007974:	d020      	beq.n	80079b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2b40      	cmp	r3, #64	@ 0x40
 800797a:	d01d      	beq.n	80079b8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0308 	and.w	r3, r3, #8
 8007986:	2b08      	cmp	r3, #8
 8007988:	d116      	bne.n	80079b8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800798a:	2300      	movs	r3, #0
 800798c:	617b      	str	r3, [r7, #20]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	617b      	str	r3, [r7, #20]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	617b      	str	r3, [r7, #20]
 800799e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f000 f8df 	bl	8007b64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2208      	movs	r2, #8
 80079aa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e00f      	b.n	80079d8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	4013      	ands	r3, r2
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	bf0c      	ite	eq
 80079c8:	2301      	moveq	r3, #1
 80079ca:	2300      	movne	r3, #0
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	461a      	mov	r2, r3
 80079d0:	79fb      	ldrb	r3, [r7, #7]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d0b4      	beq.n	8007940 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b098      	sub	sp, #96	@ 0x60
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	4613      	mov	r3, r2
 80079ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	88fa      	ldrh	r2, [r7, #6]
 80079f8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2222      	movs	r2, #34	@ 0x22
 8007a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a0c:	4a3e      	ldr	r2, [pc, #248]	@ (8007b08 <UART_Start_Receive_DMA+0x128>)
 8007a0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a14:	4a3d      	ldr	r2, [pc, #244]	@ (8007b0c <UART_Start_Receive_DMA+0x12c>)
 8007a16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a1c:	4a3c      	ldr	r2, [pc, #240]	@ (8007b10 <UART_Start_Receive_DMA+0x130>)
 8007a1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a24:	2200      	movs	r2, #0
 8007a26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007a28:	f107 0308 	add.w	r3, r7, #8
 8007a2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3304      	adds	r3, #4
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	88fb      	ldrh	r3, [r7, #6]
 8007a40:	f7fc f98a 	bl	8003d58 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007a44:	2300      	movs	r3, #0
 8007a46:	613b      	str	r3, [r7, #16]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	613b      	str	r3, [r7, #16]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	613b      	str	r3, [r7, #16]
 8007a58:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d019      	beq.n	8007a96 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	330c      	adds	r3, #12
 8007a68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	330c      	adds	r3, #12
 8007a80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a82:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007a84:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a86:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007a88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a8a:	e841 2300 	strex	r3, r2, [r1]
 8007a8e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1e5      	bne.n	8007a62 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	3314      	adds	r3, #20
 8007a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aa0:	e853 3f00 	ldrex	r3, [r3]
 8007aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa8:	f043 0301 	orr.w	r3, r3, #1
 8007aac:	657b      	str	r3, [r7, #84]	@ 0x54
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	3314      	adds	r3, #20
 8007ab4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007ab6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007ab8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007abc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1e5      	bne.n	8007a96 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3314      	adds	r3, #20
 8007ad0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	e853 3f00 	ldrex	r3, [r3]
 8007ad8:	617b      	str	r3, [r7, #20]
   return(result);
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ae0:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3314      	adds	r3, #20
 8007ae8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007aea:	627a      	str	r2, [r7, #36]	@ 0x24
 8007aec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aee:	6a39      	ldr	r1, [r7, #32]
 8007af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007af2:	e841 2300 	strex	r3, r2, [r1]
 8007af6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1e5      	bne.n	8007aca <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3760      	adds	r7, #96	@ 0x60
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	08007733 	.word	0x08007733
 8007b0c:	0800785f 	.word	0x0800785f
 8007b10:	0800789b 	.word	0x0800789b

08007b14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b089      	sub	sp, #36	@ 0x24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	330c      	adds	r3, #12
 8007b22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	e853 3f00 	ldrex	r3, [r3]
 8007b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007b32:	61fb      	str	r3, [r7, #28]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	330c      	adds	r3, #12
 8007b3a:	69fa      	ldr	r2, [r7, #28]
 8007b3c:	61ba      	str	r2, [r7, #24]
 8007b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b40:	6979      	ldr	r1, [r7, #20]
 8007b42:	69ba      	ldr	r2, [r7, #24]
 8007b44:	e841 2300 	strex	r3, r2, [r1]
 8007b48:	613b      	str	r3, [r7, #16]
   return(result);
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1e5      	bne.n	8007b1c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2220      	movs	r2, #32
 8007b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007b58:	bf00      	nop
 8007b5a:	3724      	adds	r7, #36	@ 0x24
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b095      	sub	sp, #84	@ 0x54
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	330c      	adds	r3, #12
 8007b72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b76:	e853 3f00 	ldrex	r3, [r3]
 8007b7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	330c      	adds	r3, #12
 8007b8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b8c:	643a      	str	r2, [r7, #64]	@ 0x40
 8007b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b94:	e841 2300 	strex	r3, r2, [r1]
 8007b98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1e5      	bne.n	8007b6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3314      	adds	r3, #20
 8007ba6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	e853 3f00 	ldrex	r3, [r3]
 8007bae:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	f023 0301 	bic.w	r3, r3, #1
 8007bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	3314      	adds	r3, #20
 8007bbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bc8:	e841 2300 	strex	r3, r2, [r1]
 8007bcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1e5      	bne.n	8007ba0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d119      	bne.n	8007c10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	330c      	adds	r3, #12
 8007be2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	e853 3f00 	ldrex	r3, [r3]
 8007bea:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	f023 0310 	bic.w	r3, r3, #16
 8007bf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	330c      	adds	r3, #12
 8007bfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bfc:	61ba      	str	r2, [r7, #24]
 8007bfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c00:	6979      	ldr	r1, [r7, #20]
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	e841 2300 	strex	r3, r2, [r1]
 8007c08:	613b      	str	r3, [r7, #16]
   return(result);
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1e5      	bne.n	8007bdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2220      	movs	r2, #32
 8007c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007c1e:	bf00      	nop
 8007c20:	3754      	adds	r7, #84	@ 0x54
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
	...

08007c2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c30:	b0c0      	sub	sp, #256	@ 0x100
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c48:	68d9      	ldr	r1, [r3, #12]
 8007c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	ea40 0301 	orr.w	r3, r0, r1
 8007c54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c5a:	689a      	ldr	r2, [r3, #8]
 8007c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	431a      	orrs	r2, r3
 8007c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007c84:	f021 010c 	bic.w	r1, r1, #12
 8007c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007c92:	430b      	orrs	r3, r1
 8007c94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ca6:	6999      	ldr	r1, [r3, #24]
 8007ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	ea40 0301 	orr.w	r3, r0, r1
 8007cb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	4b8f      	ldr	r3, [pc, #572]	@ (8007ef8 <UART_SetConfig+0x2cc>)
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d005      	beq.n	8007ccc <UART_SetConfig+0xa0>
 8007cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	4b8d      	ldr	r3, [pc, #564]	@ (8007efc <UART_SetConfig+0x2d0>)
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d104      	bne.n	8007cd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ccc:	f7fd fe60 	bl	8005990 <HAL_RCC_GetPCLK2Freq>
 8007cd0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007cd4:	e003      	b.n	8007cde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cd6:	f7fd fe47 	bl	8005968 <HAL_RCC_GetPCLK1Freq>
 8007cda:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ce2:	69db      	ldr	r3, [r3, #28]
 8007ce4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ce8:	f040 810c 	bne.w	8007f04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007cf6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007cfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007cfe:	4622      	mov	r2, r4
 8007d00:	462b      	mov	r3, r5
 8007d02:	1891      	adds	r1, r2, r2
 8007d04:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007d06:	415b      	adcs	r3, r3
 8007d08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007d0e:	4621      	mov	r1, r4
 8007d10:	eb12 0801 	adds.w	r8, r2, r1
 8007d14:	4629      	mov	r1, r5
 8007d16:	eb43 0901 	adc.w	r9, r3, r1
 8007d1a:	f04f 0200 	mov.w	r2, #0
 8007d1e:	f04f 0300 	mov.w	r3, #0
 8007d22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d2e:	4690      	mov	r8, r2
 8007d30:	4699      	mov	r9, r3
 8007d32:	4623      	mov	r3, r4
 8007d34:	eb18 0303 	adds.w	r3, r8, r3
 8007d38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d3c:	462b      	mov	r3, r5
 8007d3e:	eb49 0303 	adc.w	r3, r9, r3
 8007d42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d52:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007d56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	18db      	adds	r3, r3, r3
 8007d5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d60:	4613      	mov	r3, r2
 8007d62:	eb42 0303 	adc.w	r3, r2, r3
 8007d66:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007d6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007d70:	f7f8 ff2e 	bl	8000bd0 <__aeabi_uldivmod>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4b61      	ldr	r3, [pc, #388]	@ (8007f00 <UART_SetConfig+0x2d4>)
 8007d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8007d7e:	095b      	lsrs	r3, r3, #5
 8007d80:	011c      	lsls	r4, r3, #4
 8007d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d86:	2200      	movs	r2, #0
 8007d88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d8c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007d90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007d94:	4642      	mov	r2, r8
 8007d96:	464b      	mov	r3, r9
 8007d98:	1891      	adds	r1, r2, r2
 8007d9a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007d9c:	415b      	adcs	r3, r3
 8007d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007da0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007da4:	4641      	mov	r1, r8
 8007da6:	eb12 0a01 	adds.w	sl, r2, r1
 8007daa:	4649      	mov	r1, r9
 8007dac:	eb43 0b01 	adc.w	fp, r3, r1
 8007db0:	f04f 0200 	mov.w	r2, #0
 8007db4:	f04f 0300 	mov.w	r3, #0
 8007db8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007dbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007dc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007dc4:	4692      	mov	sl, r2
 8007dc6:	469b      	mov	fp, r3
 8007dc8:	4643      	mov	r3, r8
 8007dca:	eb1a 0303 	adds.w	r3, sl, r3
 8007dce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007dd2:	464b      	mov	r3, r9
 8007dd4:	eb4b 0303 	adc.w	r3, fp, r3
 8007dd8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007de8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007dec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007df0:	460b      	mov	r3, r1
 8007df2:	18db      	adds	r3, r3, r3
 8007df4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007df6:	4613      	mov	r3, r2
 8007df8:	eb42 0303 	adc.w	r3, r2, r3
 8007dfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007e02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007e06:	f7f8 fee3 	bl	8000bd0 <__aeabi_uldivmod>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4611      	mov	r1, r2
 8007e10:	4b3b      	ldr	r3, [pc, #236]	@ (8007f00 <UART_SetConfig+0x2d4>)
 8007e12:	fba3 2301 	umull	r2, r3, r3, r1
 8007e16:	095b      	lsrs	r3, r3, #5
 8007e18:	2264      	movs	r2, #100	@ 0x64
 8007e1a:	fb02 f303 	mul.w	r3, r2, r3
 8007e1e:	1acb      	subs	r3, r1, r3
 8007e20:	00db      	lsls	r3, r3, #3
 8007e22:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007e26:	4b36      	ldr	r3, [pc, #216]	@ (8007f00 <UART_SetConfig+0x2d4>)
 8007e28:	fba3 2302 	umull	r2, r3, r3, r2
 8007e2c:	095b      	lsrs	r3, r3, #5
 8007e2e:	005b      	lsls	r3, r3, #1
 8007e30:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007e34:	441c      	add	r4, r3
 8007e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e40:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007e44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007e48:	4642      	mov	r2, r8
 8007e4a:	464b      	mov	r3, r9
 8007e4c:	1891      	adds	r1, r2, r2
 8007e4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007e50:	415b      	adcs	r3, r3
 8007e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007e58:	4641      	mov	r1, r8
 8007e5a:	1851      	adds	r1, r2, r1
 8007e5c:	6339      	str	r1, [r7, #48]	@ 0x30
 8007e5e:	4649      	mov	r1, r9
 8007e60:	414b      	adcs	r3, r1
 8007e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e64:	f04f 0200 	mov.w	r2, #0
 8007e68:	f04f 0300 	mov.w	r3, #0
 8007e6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007e70:	4659      	mov	r1, fp
 8007e72:	00cb      	lsls	r3, r1, #3
 8007e74:	4651      	mov	r1, sl
 8007e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e7a:	4651      	mov	r1, sl
 8007e7c:	00ca      	lsls	r2, r1, #3
 8007e7e:	4610      	mov	r0, r2
 8007e80:	4619      	mov	r1, r3
 8007e82:	4603      	mov	r3, r0
 8007e84:	4642      	mov	r2, r8
 8007e86:	189b      	adds	r3, r3, r2
 8007e88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e8c:	464b      	mov	r3, r9
 8007e8e:	460a      	mov	r2, r1
 8007e90:	eb42 0303 	adc.w	r3, r2, r3
 8007e94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ea4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007ea8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007eac:	460b      	mov	r3, r1
 8007eae:	18db      	adds	r3, r3, r3
 8007eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	eb42 0303 	adc.w	r3, r2, r3
 8007eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007eba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007ebe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007ec2:	f7f8 fe85 	bl	8000bd0 <__aeabi_uldivmod>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	460b      	mov	r3, r1
 8007eca:	4b0d      	ldr	r3, [pc, #52]	@ (8007f00 <UART_SetConfig+0x2d4>)
 8007ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8007ed0:	095b      	lsrs	r3, r3, #5
 8007ed2:	2164      	movs	r1, #100	@ 0x64
 8007ed4:	fb01 f303 	mul.w	r3, r1, r3
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	00db      	lsls	r3, r3, #3
 8007edc:	3332      	adds	r3, #50	@ 0x32
 8007ede:	4a08      	ldr	r2, [pc, #32]	@ (8007f00 <UART_SetConfig+0x2d4>)
 8007ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee4:	095b      	lsrs	r3, r3, #5
 8007ee6:	f003 0207 	and.w	r2, r3, #7
 8007eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4422      	add	r2, r4
 8007ef2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ef4:	e106      	b.n	8008104 <UART_SetConfig+0x4d8>
 8007ef6:	bf00      	nop
 8007ef8:	40011000 	.word	0x40011000
 8007efc:	40011400 	.word	0x40011400
 8007f00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007f0e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007f12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007f16:	4642      	mov	r2, r8
 8007f18:	464b      	mov	r3, r9
 8007f1a:	1891      	adds	r1, r2, r2
 8007f1c:	6239      	str	r1, [r7, #32]
 8007f1e:	415b      	adcs	r3, r3
 8007f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f26:	4641      	mov	r1, r8
 8007f28:	1854      	adds	r4, r2, r1
 8007f2a:	4649      	mov	r1, r9
 8007f2c:	eb43 0501 	adc.w	r5, r3, r1
 8007f30:	f04f 0200 	mov.w	r2, #0
 8007f34:	f04f 0300 	mov.w	r3, #0
 8007f38:	00eb      	lsls	r3, r5, #3
 8007f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f3e:	00e2      	lsls	r2, r4, #3
 8007f40:	4614      	mov	r4, r2
 8007f42:	461d      	mov	r5, r3
 8007f44:	4643      	mov	r3, r8
 8007f46:	18e3      	adds	r3, r4, r3
 8007f48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f4c:	464b      	mov	r3, r9
 8007f4e:	eb45 0303 	adc.w	r3, r5, r3
 8007f52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f66:	f04f 0200 	mov.w	r2, #0
 8007f6a:	f04f 0300 	mov.w	r3, #0
 8007f6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007f72:	4629      	mov	r1, r5
 8007f74:	008b      	lsls	r3, r1, #2
 8007f76:	4621      	mov	r1, r4
 8007f78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f7c:	4621      	mov	r1, r4
 8007f7e:	008a      	lsls	r2, r1, #2
 8007f80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007f84:	f7f8 fe24 	bl	8000bd0 <__aeabi_uldivmod>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4b60      	ldr	r3, [pc, #384]	@ (8008110 <UART_SetConfig+0x4e4>)
 8007f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007f92:	095b      	lsrs	r3, r3, #5
 8007f94:	011c      	lsls	r4, r3, #4
 8007f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007fa0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007fa4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007fa8:	4642      	mov	r2, r8
 8007faa:	464b      	mov	r3, r9
 8007fac:	1891      	adds	r1, r2, r2
 8007fae:	61b9      	str	r1, [r7, #24]
 8007fb0:	415b      	adcs	r3, r3
 8007fb2:	61fb      	str	r3, [r7, #28]
 8007fb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fb8:	4641      	mov	r1, r8
 8007fba:	1851      	adds	r1, r2, r1
 8007fbc:	6139      	str	r1, [r7, #16]
 8007fbe:	4649      	mov	r1, r9
 8007fc0:	414b      	adcs	r3, r1
 8007fc2:	617b      	str	r3, [r7, #20]
 8007fc4:	f04f 0200 	mov.w	r2, #0
 8007fc8:	f04f 0300 	mov.w	r3, #0
 8007fcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fd0:	4659      	mov	r1, fp
 8007fd2:	00cb      	lsls	r3, r1, #3
 8007fd4:	4651      	mov	r1, sl
 8007fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fda:	4651      	mov	r1, sl
 8007fdc:	00ca      	lsls	r2, r1, #3
 8007fde:	4610      	mov	r0, r2
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	4642      	mov	r2, r8
 8007fe6:	189b      	adds	r3, r3, r2
 8007fe8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007fec:	464b      	mov	r3, r9
 8007fee:	460a      	mov	r2, r1
 8007ff0:	eb42 0303 	adc.w	r3, r2, r3
 8007ff4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008002:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008004:	f04f 0200 	mov.w	r2, #0
 8008008:	f04f 0300 	mov.w	r3, #0
 800800c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008010:	4649      	mov	r1, r9
 8008012:	008b      	lsls	r3, r1, #2
 8008014:	4641      	mov	r1, r8
 8008016:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800801a:	4641      	mov	r1, r8
 800801c:	008a      	lsls	r2, r1, #2
 800801e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008022:	f7f8 fdd5 	bl	8000bd0 <__aeabi_uldivmod>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	4611      	mov	r1, r2
 800802c:	4b38      	ldr	r3, [pc, #224]	@ (8008110 <UART_SetConfig+0x4e4>)
 800802e:	fba3 2301 	umull	r2, r3, r3, r1
 8008032:	095b      	lsrs	r3, r3, #5
 8008034:	2264      	movs	r2, #100	@ 0x64
 8008036:	fb02 f303 	mul.w	r3, r2, r3
 800803a:	1acb      	subs	r3, r1, r3
 800803c:	011b      	lsls	r3, r3, #4
 800803e:	3332      	adds	r3, #50	@ 0x32
 8008040:	4a33      	ldr	r2, [pc, #204]	@ (8008110 <UART_SetConfig+0x4e4>)
 8008042:	fba2 2303 	umull	r2, r3, r2, r3
 8008046:	095b      	lsrs	r3, r3, #5
 8008048:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800804c:	441c      	add	r4, r3
 800804e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008052:	2200      	movs	r2, #0
 8008054:	673b      	str	r3, [r7, #112]	@ 0x70
 8008056:	677a      	str	r2, [r7, #116]	@ 0x74
 8008058:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800805c:	4642      	mov	r2, r8
 800805e:	464b      	mov	r3, r9
 8008060:	1891      	adds	r1, r2, r2
 8008062:	60b9      	str	r1, [r7, #8]
 8008064:	415b      	adcs	r3, r3
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800806c:	4641      	mov	r1, r8
 800806e:	1851      	adds	r1, r2, r1
 8008070:	6039      	str	r1, [r7, #0]
 8008072:	4649      	mov	r1, r9
 8008074:	414b      	adcs	r3, r1
 8008076:	607b      	str	r3, [r7, #4]
 8008078:	f04f 0200 	mov.w	r2, #0
 800807c:	f04f 0300 	mov.w	r3, #0
 8008080:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008084:	4659      	mov	r1, fp
 8008086:	00cb      	lsls	r3, r1, #3
 8008088:	4651      	mov	r1, sl
 800808a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800808e:	4651      	mov	r1, sl
 8008090:	00ca      	lsls	r2, r1, #3
 8008092:	4610      	mov	r0, r2
 8008094:	4619      	mov	r1, r3
 8008096:	4603      	mov	r3, r0
 8008098:	4642      	mov	r2, r8
 800809a:	189b      	adds	r3, r3, r2
 800809c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800809e:	464b      	mov	r3, r9
 80080a0:	460a      	mov	r2, r1
 80080a2:	eb42 0303 	adc.w	r3, r2, r3
 80080a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80080a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80080b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80080b4:	f04f 0200 	mov.w	r2, #0
 80080b8:	f04f 0300 	mov.w	r3, #0
 80080bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80080c0:	4649      	mov	r1, r9
 80080c2:	008b      	lsls	r3, r1, #2
 80080c4:	4641      	mov	r1, r8
 80080c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080ca:	4641      	mov	r1, r8
 80080cc:	008a      	lsls	r2, r1, #2
 80080ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80080d2:	f7f8 fd7d 	bl	8000bd0 <__aeabi_uldivmod>
 80080d6:	4602      	mov	r2, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	4b0d      	ldr	r3, [pc, #52]	@ (8008110 <UART_SetConfig+0x4e4>)
 80080dc:	fba3 1302 	umull	r1, r3, r3, r2
 80080e0:	095b      	lsrs	r3, r3, #5
 80080e2:	2164      	movs	r1, #100	@ 0x64
 80080e4:	fb01 f303 	mul.w	r3, r1, r3
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	011b      	lsls	r3, r3, #4
 80080ec:	3332      	adds	r3, #50	@ 0x32
 80080ee:	4a08      	ldr	r2, [pc, #32]	@ (8008110 <UART_SetConfig+0x4e4>)
 80080f0:	fba2 2303 	umull	r2, r3, r2, r3
 80080f4:	095b      	lsrs	r3, r3, #5
 80080f6:	f003 020f 	and.w	r2, r3, #15
 80080fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4422      	add	r2, r4
 8008102:	609a      	str	r2, [r3, #8]
}
 8008104:	bf00      	nop
 8008106:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800810a:	46bd      	mov	sp, r7
 800810c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008110:	51eb851f 	.word	0x51eb851f

08008114 <atan2>:
 8008114:	f000 ba54 	b.w	80085c0 <__ieee754_atan2>

08008118 <pow>:
 8008118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811a:	ed2d 8b02 	vpush	{d8}
 800811e:	eeb0 8a40 	vmov.f32	s16, s0
 8008122:	eef0 8a60 	vmov.f32	s17, s1
 8008126:	ec55 4b11 	vmov	r4, r5, d1
 800812a:	f000 fb11 	bl	8008750 <__ieee754_pow>
 800812e:	4622      	mov	r2, r4
 8008130:	462b      	mov	r3, r5
 8008132:	4620      	mov	r0, r4
 8008134:	4629      	mov	r1, r5
 8008136:	ec57 6b10 	vmov	r6, r7, d0
 800813a:	f7f8 fcbb 	bl	8000ab4 <__aeabi_dcmpun>
 800813e:	2800      	cmp	r0, #0
 8008140:	d13b      	bne.n	80081ba <pow+0xa2>
 8008142:	ec51 0b18 	vmov	r0, r1, d8
 8008146:	2200      	movs	r2, #0
 8008148:	2300      	movs	r3, #0
 800814a:	f7f8 fc81 	bl	8000a50 <__aeabi_dcmpeq>
 800814e:	b1b8      	cbz	r0, 8008180 <pow+0x68>
 8008150:	2200      	movs	r2, #0
 8008152:	2300      	movs	r3, #0
 8008154:	4620      	mov	r0, r4
 8008156:	4629      	mov	r1, r5
 8008158:	f7f8 fc7a 	bl	8000a50 <__aeabi_dcmpeq>
 800815c:	2800      	cmp	r0, #0
 800815e:	d146      	bne.n	80081ee <pow+0xd6>
 8008160:	ec45 4b10 	vmov	d0, r4, r5
 8008164:	f000 f89c 	bl	80082a0 <finite>
 8008168:	b338      	cbz	r0, 80081ba <pow+0xa2>
 800816a:	2200      	movs	r2, #0
 800816c:	2300      	movs	r3, #0
 800816e:	4620      	mov	r0, r4
 8008170:	4629      	mov	r1, r5
 8008172:	f7f8 fc77 	bl	8000a64 <__aeabi_dcmplt>
 8008176:	b300      	cbz	r0, 80081ba <pow+0xa2>
 8008178:	f002 f93e 	bl	800a3f8 <__errno>
 800817c:	2322      	movs	r3, #34	@ 0x22
 800817e:	e01b      	b.n	80081b8 <pow+0xa0>
 8008180:	ec47 6b10 	vmov	d0, r6, r7
 8008184:	f000 f88c 	bl	80082a0 <finite>
 8008188:	b9e0      	cbnz	r0, 80081c4 <pow+0xac>
 800818a:	eeb0 0a48 	vmov.f32	s0, s16
 800818e:	eef0 0a68 	vmov.f32	s1, s17
 8008192:	f000 f885 	bl	80082a0 <finite>
 8008196:	b1a8      	cbz	r0, 80081c4 <pow+0xac>
 8008198:	ec45 4b10 	vmov	d0, r4, r5
 800819c:	f000 f880 	bl	80082a0 <finite>
 80081a0:	b180      	cbz	r0, 80081c4 <pow+0xac>
 80081a2:	4632      	mov	r2, r6
 80081a4:	463b      	mov	r3, r7
 80081a6:	4630      	mov	r0, r6
 80081a8:	4639      	mov	r1, r7
 80081aa:	f7f8 fc83 	bl	8000ab4 <__aeabi_dcmpun>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d0e2      	beq.n	8008178 <pow+0x60>
 80081b2:	f002 f921 	bl	800a3f8 <__errno>
 80081b6:	2321      	movs	r3, #33	@ 0x21
 80081b8:	6003      	str	r3, [r0, #0]
 80081ba:	ecbd 8b02 	vpop	{d8}
 80081be:	ec47 6b10 	vmov	d0, r6, r7
 80081c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081c4:	2200      	movs	r2, #0
 80081c6:	2300      	movs	r3, #0
 80081c8:	4630      	mov	r0, r6
 80081ca:	4639      	mov	r1, r7
 80081cc:	f7f8 fc40 	bl	8000a50 <__aeabi_dcmpeq>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d0f2      	beq.n	80081ba <pow+0xa2>
 80081d4:	eeb0 0a48 	vmov.f32	s0, s16
 80081d8:	eef0 0a68 	vmov.f32	s1, s17
 80081dc:	f000 f860 	bl	80082a0 <finite>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d0ea      	beq.n	80081ba <pow+0xa2>
 80081e4:	ec45 4b10 	vmov	d0, r4, r5
 80081e8:	f000 f85a 	bl	80082a0 <finite>
 80081ec:	e7c3      	b.n	8008176 <pow+0x5e>
 80081ee:	4f01      	ldr	r7, [pc, #4]	@ (80081f4 <pow+0xdc>)
 80081f0:	2600      	movs	r6, #0
 80081f2:	e7e2      	b.n	80081ba <pow+0xa2>
 80081f4:	3ff00000 	.word	0x3ff00000

080081f8 <sin>:
 80081f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081fa:	ec53 2b10 	vmov	r2, r3, d0
 80081fe:	4826      	ldr	r0, [pc, #152]	@ (8008298 <sin+0xa0>)
 8008200:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008204:	4281      	cmp	r1, r0
 8008206:	d807      	bhi.n	8008218 <sin+0x20>
 8008208:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008290 <sin+0x98>
 800820c:	2000      	movs	r0, #0
 800820e:	b005      	add	sp, #20
 8008210:	f85d eb04 	ldr.w	lr, [sp], #4
 8008214:	f000 b918 	b.w	8008448 <__kernel_sin>
 8008218:	4820      	ldr	r0, [pc, #128]	@ (800829c <sin+0xa4>)
 800821a:	4281      	cmp	r1, r0
 800821c:	d908      	bls.n	8008230 <sin+0x38>
 800821e:	4610      	mov	r0, r2
 8008220:	4619      	mov	r1, r3
 8008222:	f7f7 fff5 	bl	8000210 <__aeabi_dsub>
 8008226:	ec41 0b10 	vmov	d0, r0, r1
 800822a:	b005      	add	sp, #20
 800822c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008230:	4668      	mov	r0, sp
 8008232:	f000 ffd1 	bl	80091d8 <__ieee754_rem_pio2>
 8008236:	f000 0003 	and.w	r0, r0, #3
 800823a:	2801      	cmp	r0, #1
 800823c:	d00c      	beq.n	8008258 <sin+0x60>
 800823e:	2802      	cmp	r0, #2
 8008240:	d011      	beq.n	8008266 <sin+0x6e>
 8008242:	b9e8      	cbnz	r0, 8008280 <sin+0x88>
 8008244:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008248:	ed9d 0b00 	vldr	d0, [sp]
 800824c:	2001      	movs	r0, #1
 800824e:	f000 f8fb 	bl	8008448 <__kernel_sin>
 8008252:	ec51 0b10 	vmov	r0, r1, d0
 8008256:	e7e6      	b.n	8008226 <sin+0x2e>
 8008258:	ed9d 1b02 	vldr	d1, [sp, #8]
 800825c:	ed9d 0b00 	vldr	d0, [sp]
 8008260:	f000 f82a 	bl	80082b8 <__kernel_cos>
 8008264:	e7f5      	b.n	8008252 <sin+0x5a>
 8008266:	ed9d 1b02 	vldr	d1, [sp, #8]
 800826a:	ed9d 0b00 	vldr	d0, [sp]
 800826e:	2001      	movs	r0, #1
 8008270:	f000 f8ea 	bl	8008448 <__kernel_sin>
 8008274:	ec53 2b10 	vmov	r2, r3, d0
 8008278:	4610      	mov	r0, r2
 800827a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800827e:	e7d2      	b.n	8008226 <sin+0x2e>
 8008280:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008284:	ed9d 0b00 	vldr	d0, [sp]
 8008288:	f000 f816 	bl	80082b8 <__kernel_cos>
 800828c:	e7f2      	b.n	8008274 <sin+0x7c>
 800828e:	bf00      	nop
	...
 8008298:	3fe921fb 	.word	0x3fe921fb
 800829c:	7fefffff 	.word	0x7fefffff

080082a0 <finite>:
 80082a0:	b082      	sub	sp, #8
 80082a2:	ed8d 0b00 	vstr	d0, [sp]
 80082a6:	9801      	ldr	r0, [sp, #4]
 80082a8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80082ac:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80082b0:	0fc0      	lsrs	r0, r0, #31
 80082b2:	b002      	add	sp, #8
 80082b4:	4770      	bx	lr
	...

080082b8 <__kernel_cos>:
 80082b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082bc:	ec57 6b10 	vmov	r6, r7, d0
 80082c0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80082c4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80082c8:	ed8d 1b00 	vstr	d1, [sp]
 80082cc:	d206      	bcs.n	80082dc <__kernel_cos+0x24>
 80082ce:	4630      	mov	r0, r6
 80082d0:	4639      	mov	r1, r7
 80082d2:	f7f8 fc05 	bl	8000ae0 <__aeabi_d2iz>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	f000 8088 	beq.w	80083ec <__kernel_cos+0x134>
 80082dc:	4632      	mov	r2, r6
 80082de:	463b      	mov	r3, r7
 80082e0:	4630      	mov	r0, r6
 80082e2:	4639      	mov	r1, r7
 80082e4:	f7f8 f94c 	bl	8000580 <__aeabi_dmul>
 80082e8:	4b51      	ldr	r3, [pc, #324]	@ (8008430 <__kernel_cos+0x178>)
 80082ea:	2200      	movs	r2, #0
 80082ec:	4604      	mov	r4, r0
 80082ee:	460d      	mov	r5, r1
 80082f0:	f7f8 f946 	bl	8000580 <__aeabi_dmul>
 80082f4:	a340      	add	r3, pc, #256	@ (adr r3, 80083f8 <__kernel_cos+0x140>)
 80082f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fa:	4682      	mov	sl, r0
 80082fc:	468b      	mov	fp, r1
 80082fe:	4620      	mov	r0, r4
 8008300:	4629      	mov	r1, r5
 8008302:	f7f8 f93d 	bl	8000580 <__aeabi_dmul>
 8008306:	a33e      	add	r3, pc, #248	@ (adr r3, 8008400 <__kernel_cos+0x148>)
 8008308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830c:	f7f7 ff82 	bl	8000214 <__adddf3>
 8008310:	4622      	mov	r2, r4
 8008312:	462b      	mov	r3, r5
 8008314:	f7f8 f934 	bl	8000580 <__aeabi_dmul>
 8008318:	a33b      	add	r3, pc, #236	@ (adr r3, 8008408 <__kernel_cos+0x150>)
 800831a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831e:	f7f7 ff77 	bl	8000210 <__aeabi_dsub>
 8008322:	4622      	mov	r2, r4
 8008324:	462b      	mov	r3, r5
 8008326:	f7f8 f92b 	bl	8000580 <__aeabi_dmul>
 800832a:	a339      	add	r3, pc, #228	@ (adr r3, 8008410 <__kernel_cos+0x158>)
 800832c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008330:	f7f7 ff70 	bl	8000214 <__adddf3>
 8008334:	4622      	mov	r2, r4
 8008336:	462b      	mov	r3, r5
 8008338:	f7f8 f922 	bl	8000580 <__aeabi_dmul>
 800833c:	a336      	add	r3, pc, #216	@ (adr r3, 8008418 <__kernel_cos+0x160>)
 800833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008342:	f7f7 ff65 	bl	8000210 <__aeabi_dsub>
 8008346:	4622      	mov	r2, r4
 8008348:	462b      	mov	r3, r5
 800834a:	f7f8 f919 	bl	8000580 <__aeabi_dmul>
 800834e:	a334      	add	r3, pc, #208	@ (adr r3, 8008420 <__kernel_cos+0x168>)
 8008350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008354:	f7f7 ff5e 	bl	8000214 <__adddf3>
 8008358:	4622      	mov	r2, r4
 800835a:	462b      	mov	r3, r5
 800835c:	f7f8 f910 	bl	8000580 <__aeabi_dmul>
 8008360:	4622      	mov	r2, r4
 8008362:	462b      	mov	r3, r5
 8008364:	f7f8 f90c 	bl	8000580 <__aeabi_dmul>
 8008368:	e9dd 2300 	ldrd	r2, r3, [sp]
 800836c:	4604      	mov	r4, r0
 800836e:	460d      	mov	r5, r1
 8008370:	4630      	mov	r0, r6
 8008372:	4639      	mov	r1, r7
 8008374:	f7f8 f904 	bl	8000580 <__aeabi_dmul>
 8008378:	460b      	mov	r3, r1
 800837a:	4602      	mov	r2, r0
 800837c:	4629      	mov	r1, r5
 800837e:	4620      	mov	r0, r4
 8008380:	f7f7 ff46 	bl	8000210 <__aeabi_dsub>
 8008384:	4b2b      	ldr	r3, [pc, #172]	@ (8008434 <__kernel_cos+0x17c>)
 8008386:	4598      	cmp	r8, r3
 8008388:	4606      	mov	r6, r0
 800838a:	460f      	mov	r7, r1
 800838c:	d810      	bhi.n	80083b0 <__kernel_cos+0xf8>
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	4650      	mov	r0, sl
 8008394:	4659      	mov	r1, fp
 8008396:	f7f7 ff3b 	bl	8000210 <__aeabi_dsub>
 800839a:	460b      	mov	r3, r1
 800839c:	4926      	ldr	r1, [pc, #152]	@ (8008438 <__kernel_cos+0x180>)
 800839e:	4602      	mov	r2, r0
 80083a0:	2000      	movs	r0, #0
 80083a2:	f7f7 ff35 	bl	8000210 <__aeabi_dsub>
 80083a6:	ec41 0b10 	vmov	d0, r0, r1
 80083aa:	b003      	add	sp, #12
 80083ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b0:	4b22      	ldr	r3, [pc, #136]	@ (800843c <__kernel_cos+0x184>)
 80083b2:	4921      	ldr	r1, [pc, #132]	@ (8008438 <__kernel_cos+0x180>)
 80083b4:	4598      	cmp	r8, r3
 80083b6:	bf8c      	ite	hi
 80083b8:	4d21      	ldrhi	r5, [pc, #132]	@ (8008440 <__kernel_cos+0x188>)
 80083ba:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80083be:	2400      	movs	r4, #0
 80083c0:	4622      	mov	r2, r4
 80083c2:	462b      	mov	r3, r5
 80083c4:	2000      	movs	r0, #0
 80083c6:	f7f7 ff23 	bl	8000210 <__aeabi_dsub>
 80083ca:	4622      	mov	r2, r4
 80083cc:	4680      	mov	r8, r0
 80083ce:	4689      	mov	r9, r1
 80083d0:	462b      	mov	r3, r5
 80083d2:	4650      	mov	r0, sl
 80083d4:	4659      	mov	r1, fp
 80083d6:	f7f7 ff1b 	bl	8000210 <__aeabi_dsub>
 80083da:	4632      	mov	r2, r6
 80083dc:	463b      	mov	r3, r7
 80083de:	f7f7 ff17 	bl	8000210 <__aeabi_dsub>
 80083e2:	4602      	mov	r2, r0
 80083e4:	460b      	mov	r3, r1
 80083e6:	4640      	mov	r0, r8
 80083e8:	4649      	mov	r1, r9
 80083ea:	e7da      	b.n	80083a2 <__kernel_cos+0xea>
 80083ec:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8008428 <__kernel_cos+0x170>
 80083f0:	e7db      	b.n	80083aa <__kernel_cos+0xf2>
 80083f2:	bf00      	nop
 80083f4:	f3af 8000 	nop.w
 80083f8:	be8838d4 	.word	0xbe8838d4
 80083fc:	bda8fae9 	.word	0xbda8fae9
 8008400:	bdb4b1c4 	.word	0xbdb4b1c4
 8008404:	3e21ee9e 	.word	0x3e21ee9e
 8008408:	809c52ad 	.word	0x809c52ad
 800840c:	3e927e4f 	.word	0x3e927e4f
 8008410:	19cb1590 	.word	0x19cb1590
 8008414:	3efa01a0 	.word	0x3efa01a0
 8008418:	16c15177 	.word	0x16c15177
 800841c:	3f56c16c 	.word	0x3f56c16c
 8008420:	5555554c 	.word	0x5555554c
 8008424:	3fa55555 	.word	0x3fa55555
 8008428:	00000000 	.word	0x00000000
 800842c:	3ff00000 	.word	0x3ff00000
 8008430:	3fe00000 	.word	0x3fe00000
 8008434:	3fd33332 	.word	0x3fd33332
 8008438:	3ff00000 	.word	0x3ff00000
 800843c:	3fe90000 	.word	0x3fe90000
 8008440:	3fd20000 	.word	0x3fd20000
 8008444:	00000000 	.word	0x00000000

08008448 <__kernel_sin>:
 8008448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844c:	ec55 4b10 	vmov	r4, r5, d0
 8008450:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008454:	b085      	sub	sp, #20
 8008456:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800845a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800845e:	4680      	mov	r8, r0
 8008460:	d205      	bcs.n	800846e <__kernel_sin+0x26>
 8008462:	4620      	mov	r0, r4
 8008464:	4629      	mov	r1, r5
 8008466:	f7f8 fb3b 	bl	8000ae0 <__aeabi_d2iz>
 800846a:	2800      	cmp	r0, #0
 800846c:	d052      	beq.n	8008514 <__kernel_sin+0xcc>
 800846e:	4622      	mov	r2, r4
 8008470:	462b      	mov	r3, r5
 8008472:	4620      	mov	r0, r4
 8008474:	4629      	mov	r1, r5
 8008476:	f7f8 f883 	bl	8000580 <__aeabi_dmul>
 800847a:	4682      	mov	sl, r0
 800847c:	468b      	mov	fp, r1
 800847e:	4602      	mov	r2, r0
 8008480:	460b      	mov	r3, r1
 8008482:	4620      	mov	r0, r4
 8008484:	4629      	mov	r1, r5
 8008486:	f7f8 f87b 	bl	8000580 <__aeabi_dmul>
 800848a:	a342      	add	r3, pc, #264	@ (adr r3, 8008594 <__kernel_sin+0x14c>)
 800848c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008490:	e9cd 0100 	strd	r0, r1, [sp]
 8008494:	4650      	mov	r0, sl
 8008496:	4659      	mov	r1, fp
 8008498:	f7f8 f872 	bl	8000580 <__aeabi_dmul>
 800849c:	a33f      	add	r3, pc, #252	@ (adr r3, 800859c <__kernel_sin+0x154>)
 800849e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a2:	f7f7 feb5 	bl	8000210 <__aeabi_dsub>
 80084a6:	4652      	mov	r2, sl
 80084a8:	465b      	mov	r3, fp
 80084aa:	f7f8 f869 	bl	8000580 <__aeabi_dmul>
 80084ae:	a33d      	add	r3, pc, #244	@ (adr r3, 80085a4 <__kernel_sin+0x15c>)
 80084b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b4:	f7f7 feae 	bl	8000214 <__adddf3>
 80084b8:	4652      	mov	r2, sl
 80084ba:	465b      	mov	r3, fp
 80084bc:	f7f8 f860 	bl	8000580 <__aeabi_dmul>
 80084c0:	a33a      	add	r3, pc, #232	@ (adr r3, 80085ac <__kernel_sin+0x164>)
 80084c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c6:	f7f7 fea3 	bl	8000210 <__aeabi_dsub>
 80084ca:	4652      	mov	r2, sl
 80084cc:	465b      	mov	r3, fp
 80084ce:	f7f8 f857 	bl	8000580 <__aeabi_dmul>
 80084d2:	a338      	add	r3, pc, #224	@ (adr r3, 80085b4 <__kernel_sin+0x16c>)
 80084d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d8:	f7f7 fe9c 	bl	8000214 <__adddf3>
 80084dc:	4606      	mov	r6, r0
 80084de:	460f      	mov	r7, r1
 80084e0:	f1b8 0f00 	cmp.w	r8, #0
 80084e4:	d11b      	bne.n	800851e <__kernel_sin+0xd6>
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	4650      	mov	r0, sl
 80084ec:	4659      	mov	r1, fp
 80084ee:	f7f8 f847 	bl	8000580 <__aeabi_dmul>
 80084f2:	a325      	add	r3, pc, #148	@ (adr r3, 8008588 <__kernel_sin+0x140>)
 80084f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f8:	f7f7 fe8a 	bl	8000210 <__aeabi_dsub>
 80084fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008500:	f7f8 f83e 	bl	8000580 <__aeabi_dmul>
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	4620      	mov	r0, r4
 800850a:	4629      	mov	r1, r5
 800850c:	f7f7 fe82 	bl	8000214 <__adddf3>
 8008510:	4604      	mov	r4, r0
 8008512:	460d      	mov	r5, r1
 8008514:	ec45 4b10 	vmov	d0, r4, r5
 8008518:	b005      	add	sp, #20
 800851a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800851e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008522:	4b1b      	ldr	r3, [pc, #108]	@ (8008590 <__kernel_sin+0x148>)
 8008524:	2200      	movs	r2, #0
 8008526:	f7f8 f82b 	bl	8000580 <__aeabi_dmul>
 800852a:	4632      	mov	r2, r6
 800852c:	4680      	mov	r8, r0
 800852e:	4689      	mov	r9, r1
 8008530:	463b      	mov	r3, r7
 8008532:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008536:	f7f8 f823 	bl	8000580 <__aeabi_dmul>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	4640      	mov	r0, r8
 8008540:	4649      	mov	r1, r9
 8008542:	f7f7 fe65 	bl	8000210 <__aeabi_dsub>
 8008546:	4652      	mov	r2, sl
 8008548:	465b      	mov	r3, fp
 800854a:	f7f8 f819 	bl	8000580 <__aeabi_dmul>
 800854e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008552:	f7f7 fe5d 	bl	8000210 <__aeabi_dsub>
 8008556:	a30c      	add	r3, pc, #48	@ (adr r3, 8008588 <__kernel_sin+0x140>)
 8008558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855c:	4606      	mov	r6, r0
 800855e:	460f      	mov	r7, r1
 8008560:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008564:	f7f8 f80c 	bl	8000580 <__aeabi_dmul>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	4630      	mov	r0, r6
 800856e:	4639      	mov	r1, r7
 8008570:	f7f7 fe50 	bl	8000214 <__adddf3>
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	4620      	mov	r0, r4
 800857a:	4629      	mov	r1, r5
 800857c:	f7f7 fe48 	bl	8000210 <__aeabi_dsub>
 8008580:	e7c6      	b.n	8008510 <__kernel_sin+0xc8>
 8008582:	bf00      	nop
 8008584:	f3af 8000 	nop.w
 8008588:	55555549 	.word	0x55555549
 800858c:	3fc55555 	.word	0x3fc55555
 8008590:	3fe00000 	.word	0x3fe00000
 8008594:	5acfd57c 	.word	0x5acfd57c
 8008598:	3de5d93a 	.word	0x3de5d93a
 800859c:	8a2b9ceb 	.word	0x8a2b9ceb
 80085a0:	3e5ae5e6 	.word	0x3e5ae5e6
 80085a4:	57b1fe7d 	.word	0x57b1fe7d
 80085a8:	3ec71de3 	.word	0x3ec71de3
 80085ac:	19c161d5 	.word	0x19c161d5
 80085b0:	3f2a01a0 	.word	0x3f2a01a0
 80085b4:	1110f8a6 	.word	0x1110f8a6
 80085b8:	3f811111 	.word	0x3f811111
 80085bc:	00000000 	.word	0x00000000

080085c0 <__ieee754_atan2>:
 80085c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085c4:	ec57 6b11 	vmov	r6, r7, d1
 80085c8:	4273      	negs	r3, r6
 80085ca:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8008748 <__ieee754_atan2+0x188>
 80085ce:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80085d2:	4333      	orrs	r3, r6
 80085d4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80085d8:	4543      	cmp	r3, r8
 80085da:	ec51 0b10 	vmov	r0, r1, d0
 80085de:	4635      	mov	r5, r6
 80085e0:	d809      	bhi.n	80085f6 <__ieee754_atan2+0x36>
 80085e2:	4244      	negs	r4, r0
 80085e4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80085e8:	4304      	orrs	r4, r0
 80085ea:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80085ee:	4544      	cmp	r4, r8
 80085f0:	468e      	mov	lr, r1
 80085f2:	4681      	mov	r9, r0
 80085f4:	d907      	bls.n	8008606 <__ieee754_atan2+0x46>
 80085f6:	4632      	mov	r2, r6
 80085f8:	463b      	mov	r3, r7
 80085fa:	f7f7 fe0b 	bl	8000214 <__adddf3>
 80085fe:	ec41 0b10 	vmov	d0, r0, r1
 8008602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008606:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800860a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800860e:	4334      	orrs	r4, r6
 8008610:	d103      	bne.n	800861a <__ieee754_atan2+0x5a>
 8008612:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008616:	f000 bfdb 	b.w	80095d0 <atan>
 800861a:	17bc      	asrs	r4, r7, #30
 800861c:	f004 0402 	and.w	r4, r4, #2
 8008620:	ea53 0909 	orrs.w	r9, r3, r9
 8008624:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008628:	d107      	bne.n	800863a <__ieee754_atan2+0x7a>
 800862a:	2c02      	cmp	r4, #2
 800862c:	d05f      	beq.n	80086ee <__ieee754_atan2+0x12e>
 800862e:	2c03      	cmp	r4, #3
 8008630:	d1e5      	bne.n	80085fe <__ieee754_atan2+0x3e>
 8008632:	a141      	add	r1, pc, #260	@ (adr r1, 8008738 <__ieee754_atan2+0x178>)
 8008634:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008638:	e7e1      	b.n	80085fe <__ieee754_atan2+0x3e>
 800863a:	4315      	orrs	r5, r2
 800863c:	d106      	bne.n	800864c <__ieee754_atan2+0x8c>
 800863e:	f1be 0f00 	cmp.w	lr, #0
 8008642:	da5f      	bge.n	8008704 <__ieee754_atan2+0x144>
 8008644:	a13e      	add	r1, pc, #248	@ (adr r1, 8008740 <__ieee754_atan2+0x180>)
 8008646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800864a:	e7d8      	b.n	80085fe <__ieee754_atan2+0x3e>
 800864c:	4542      	cmp	r2, r8
 800864e:	d10f      	bne.n	8008670 <__ieee754_atan2+0xb0>
 8008650:	4293      	cmp	r3, r2
 8008652:	f104 34ff 	add.w	r4, r4, #4294967295
 8008656:	d107      	bne.n	8008668 <__ieee754_atan2+0xa8>
 8008658:	2c02      	cmp	r4, #2
 800865a:	d84c      	bhi.n	80086f6 <__ieee754_atan2+0x136>
 800865c:	4b34      	ldr	r3, [pc, #208]	@ (8008730 <__ieee754_atan2+0x170>)
 800865e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008662:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008666:	e7ca      	b.n	80085fe <__ieee754_atan2+0x3e>
 8008668:	2c02      	cmp	r4, #2
 800866a:	d848      	bhi.n	80086fe <__ieee754_atan2+0x13e>
 800866c:	4b31      	ldr	r3, [pc, #196]	@ (8008734 <__ieee754_atan2+0x174>)
 800866e:	e7f6      	b.n	800865e <__ieee754_atan2+0x9e>
 8008670:	4543      	cmp	r3, r8
 8008672:	d0e4      	beq.n	800863e <__ieee754_atan2+0x7e>
 8008674:	1a9b      	subs	r3, r3, r2
 8008676:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800867a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800867e:	da1e      	bge.n	80086be <__ieee754_atan2+0xfe>
 8008680:	2f00      	cmp	r7, #0
 8008682:	da01      	bge.n	8008688 <__ieee754_atan2+0xc8>
 8008684:	323c      	adds	r2, #60	@ 0x3c
 8008686:	db1e      	blt.n	80086c6 <__ieee754_atan2+0x106>
 8008688:	4632      	mov	r2, r6
 800868a:	463b      	mov	r3, r7
 800868c:	f7f8 f8a2 	bl	80007d4 <__aeabi_ddiv>
 8008690:	ec41 0b10 	vmov	d0, r0, r1
 8008694:	f001 f934 	bl	8009900 <fabs>
 8008698:	f000 ff9a 	bl	80095d0 <atan>
 800869c:	ec51 0b10 	vmov	r0, r1, d0
 80086a0:	2c01      	cmp	r4, #1
 80086a2:	d013      	beq.n	80086cc <__ieee754_atan2+0x10c>
 80086a4:	2c02      	cmp	r4, #2
 80086a6:	d015      	beq.n	80086d4 <__ieee754_atan2+0x114>
 80086a8:	2c00      	cmp	r4, #0
 80086aa:	d0a8      	beq.n	80085fe <__ieee754_atan2+0x3e>
 80086ac:	a318      	add	r3, pc, #96	@ (adr r3, 8008710 <__ieee754_atan2+0x150>)
 80086ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b2:	f7f7 fdad 	bl	8000210 <__aeabi_dsub>
 80086b6:	a318      	add	r3, pc, #96	@ (adr r3, 8008718 <__ieee754_atan2+0x158>)
 80086b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086bc:	e014      	b.n	80086e8 <__ieee754_atan2+0x128>
 80086be:	a118      	add	r1, pc, #96	@ (adr r1, 8008720 <__ieee754_atan2+0x160>)
 80086c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086c4:	e7ec      	b.n	80086a0 <__ieee754_atan2+0xe0>
 80086c6:	2000      	movs	r0, #0
 80086c8:	2100      	movs	r1, #0
 80086ca:	e7e9      	b.n	80086a0 <__ieee754_atan2+0xe0>
 80086cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80086d0:	4619      	mov	r1, r3
 80086d2:	e794      	b.n	80085fe <__ieee754_atan2+0x3e>
 80086d4:	a30e      	add	r3, pc, #56	@ (adr r3, 8008710 <__ieee754_atan2+0x150>)
 80086d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086da:	f7f7 fd99 	bl	8000210 <__aeabi_dsub>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	a10d      	add	r1, pc, #52	@ (adr r1, 8008718 <__ieee754_atan2+0x158>)
 80086e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086e8:	f7f7 fd92 	bl	8000210 <__aeabi_dsub>
 80086ec:	e787      	b.n	80085fe <__ieee754_atan2+0x3e>
 80086ee:	a10a      	add	r1, pc, #40	@ (adr r1, 8008718 <__ieee754_atan2+0x158>)
 80086f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086f4:	e783      	b.n	80085fe <__ieee754_atan2+0x3e>
 80086f6:	a10c      	add	r1, pc, #48	@ (adr r1, 8008728 <__ieee754_atan2+0x168>)
 80086f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086fc:	e77f      	b.n	80085fe <__ieee754_atan2+0x3e>
 80086fe:	2000      	movs	r0, #0
 8008700:	2100      	movs	r1, #0
 8008702:	e77c      	b.n	80085fe <__ieee754_atan2+0x3e>
 8008704:	a106      	add	r1, pc, #24	@ (adr r1, 8008720 <__ieee754_atan2+0x160>)
 8008706:	e9d1 0100 	ldrd	r0, r1, [r1]
 800870a:	e778      	b.n	80085fe <__ieee754_atan2+0x3e>
 800870c:	f3af 8000 	nop.w
 8008710:	33145c07 	.word	0x33145c07
 8008714:	3ca1a626 	.word	0x3ca1a626
 8008718:	54442d18 	.word	0x54442d18
 800871c:	400921fb 	.word	0x400921fb
 8008720:	54442d18 	.word	0x54442d18
 8008724:	3ff921fb 	.word	0x3ff921fb
 8008728:	54442d18 	.word	0x54442d18
 800872c:	3fe921fb 	.word	0x3fe921fb
 8008730:	0800a4a8 	.word	0x0800a4a8
 8008734:	0800a490 	.word	0x0800a490
 8008738:	54442d18 	.word	0x54442d18
 800873c:	c00921fb 	.word	0xc00921fb
 8008740:	54442d18 	.word	0x54442d18
 8008744:	bff921fb 	.word	0xbff921fb
 8008748:	7ff00000 	.word	0x7ff00000
 800874c:	00000000 	.word	0x00000000

08008750 <__ieee754_pow>:
 8008750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008754:	b091      	sub	sp, #68	@ 0x44
 8008756:	ed8d 1b00 	vstr	d1, [sp]
 800875a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800875e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8008762:	ea5a 0001 	orrs.w	r0, sl, r1
 8008766:	ec57 6b10 	vmov	r6, r7, d0
 800876a:	d113      	bne.n	8008794 <__ieee754_pow+0x44>
 800876c:	19b3      	adds	r3, r6, r6
 800876e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8008772:	4152      	adcs	r2, r2
 8008774:	4298      	cmp	r0, r3
 8008776:	4b98      	ldr	r3, [pc, #608]	@ (80089d8 <__ieee754_pow+0x288>)
 8008778:	4193      	sbcs	r3, r2
 800877a:	f080 84ea 	bcs.w	8009152 <__ieee754_pow+0xa02>
 800877e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008782:	4630      	mov	r0, r6
 8008784:	4639      	mov	r1, r7
 8008786:	f7f7 fd45 	bl	8000214 <__adddf3>
 800878a:	ec41 0b10 	vmov	d0, r0, r1
 800878e:	b011      	add	sp, #68	@ 0x44
 8008790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008794:	4a91      	ldr	r2, [pc, #580]	@ (80089dc <__ieee754_pow+0x28c>)
 8008796:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800879a:	4590      	cmp	r8, r2
 800879c:	463d      	mov	r5, r7
 800879e:	4633      	mov	r3, r6
 80087a0:	d806      	bhi.n	80087b0 <__ieee754_pow+0x60>
 80087a2:	d101      	bne.n	80087a8 <__ieee754_pow+0x58>
 80087a4:	2e00      	cmp	r6, #0
 80087a6:	d1ea      	bne.n	800877e <__ieee754_pow+0x2e>
 80087a8:	4592      	cmp	sl, r2
 80087aa:	d801      	bhi.n	80087b0 <__ieee754_pow+0x60>
 80087ac:	d10e      	bne.n	80087cc <__ieee754_pow+0x7c>
 80087ae:	b169      	cbz	r1, 80087cc <__ieee754_pow+0x7c>
 80087b0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80087b4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80087b8:	431d      	orrs	r5, r3
 80087ba:	d1e0      	bne.n	800877e <__ieee754_pow+0x2e>
 80087bc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80087c0:	18db      	adds	r3, r3, r3
 80087c2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80087c6:	4152      	adcs	r2, r2
 80087c8:	429d      	cmp	r5, r3
 80087ca:	e7d4      	b.n	8008776 <__ieee754_pow+0x26>
 80087cc:	2d00      	cmp	r5, #0
 80087ce:	46c3      	mov	fp, r8
 80087d0:	da3a      	bge.n	8008848 <__ieee754_pow+0xf8>
 80087d2:	4a83      	ldr	r2, [pc, #524]	@ (80089e0 <__ieee754_pow+0x290>)
 80087d4:	4592      	cmp	sl, r2
 80087d6:	d84d      	bhi.n	8008874 <__ieee754_pow+0x124>
 80087d8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80087dc:	4592      	cmp	sl, r2
 80087de:	f240 84c7 	bls.w	8009170 <__ieee754_pow+0xa20>
 80087e2:	ea4f 522a 	mov.w	r2, sl, asr #20
 80087e6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80087ea:	2a14      	cmp	r2, #20
 80087ec:	dd0f      	ble.n	800880e <__ieee754_pow+0xbe>
 80087ee:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80087f2:	fa21 f402 	lsr.w	r4, r1, r2
 80087f6:	fa04 f202 	lsl.w	r2, r4, r2
 80087fa:	428a      	cmp	r2, r1
 80087fc:	f040 84b8 	bne.w	8009170 <__ieee754_pow+0xa20>
 8008800:	f004 0401 	and.w	r4, r4, #1
 8008804:	f1c4 0402 	rsb	r4, r4, #2
 8008808:	2900      	cmp	r1, #0
 800880a:	d158      	bne.n	80088be <__ieee754_pow+0x16e>
 800880c:	e00e      	b.n	800882c <__ieee754_pow+0xdc>
 800880e:	2900      	cmp	r1, #0
 8008810:	d154      	bne.n	80088bc <__ieee754_pow+0x16c>
 8008812:	f1c2 0214 	rsb	r2, r2, #20
 8008816:	fa4a f402 	asr.w	r4, sl, r2
 800881a:	fa04 f202 	lsl.w	r2, r4, r2
 800881e:	4552      	cmp	r2, sl
 8008820:	f040 84a3 	bne.w	800916a <__ieee754_pow+0xa1a>
 8008824:	f004 0401 	and.w	r4, r4, #1
 8008828:	f1c4 0402 	rsb	r4, r4, #2
 800882c:	4a6d      	ldr	r2, [pc, #436]	@ (80089e4 <__ieee754_pow+0x294>)
 800882e:	4592      	cmp	sl, r2
 8008830:	d12e      	bne.n	8008890 <__ieee754_pow+0x140>
 8008832:	f1b9 0f00 	cmp.w	r9, #0
 8008836:	f280 8494 	bge.w	8009162 <__ieee754_pow+0xa12>
 800883a:	496a      	ldr	r1, [pc, #424]	@ (80089e4 <__ieee754_pow+0x294>)
 800883c:	4632      	mov	r2, r6
 800883e:	463b      	mov	r3, r7
 8008840:	2000      	movs	r0, #0
 8008842:	f7f7 ffc7 	bl	80007d4 <__aeabi_ddiv>
 8008846:	e7a0      	b.n	800878a <__ieee754_pow+0x3a>
 8008848:	2400      	movs	r4, #0
 800884a:	bbc1      	cbnz	r1, 80088be <__ieee754_pow+0x16e>
 800884c:	4a63      	ldr	r2, [pc, #396]	@ (80089dc <__ieee754_pow+0x28c>)
 800884e:	4592      	cmp	sl, r2
 8008850:	d1ec      	bne.n	800882c <__ieee754_pow+0xdc>
 8008852:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8008856:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800885a:	431a      	orrs	r2, r3
 800885c:	f000 8479 	beq.w	8009152 <__ieee754_pow+0xa02>
 8008860:	4b61      	ldr	r3, [pc, #388]	@ (80089e8 <__ieee754_pow+0x298>)
 8008862:	4598      	cmp	r8, r3
 8008864:	d908      	bls.n	8008878 <__ieee754_pow+0x128>
 8008866:	f1b9 0f00 	cmp.w	r9, #0
 800886a:	f2c0 8476 	blt.w	800915a <__ieee754_pow+0xa0a>
 800886e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008872:	e78a      	b.n	800878a <__ieee754_pow+0x3a>
 8008874:	2402      	movs	r4, #2
 8008876:	e7e8      	b.n	800884a <__ieee754_pow+0xfa>
 8008878:	f1b9 0f00 	cmp.w	r9, #0
 800887c:	f04f 0000 	mov.w	r0, #0
 8008880:	f04f 0100 	mov.w	r1, #0
 8008884:	da81      	bge.n	800878a <__ieee754_pow+0x3a>
 8008886:	e9dd 0300 	ldrd	r0, r3, [sp]
 800888a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800888e:	e77c      	b.n	800878a <__ieee754_pow+0x3a>
 8008890:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8008894:	d106      	bne.n	80088a4 <__ieee754_pow+0x154>
 8008896:	4632      	mov	r2, r6
 8008898:	463b      	mov	r3, r7
 800889a:	4630      	mov	r0, r6
 800889c:	4639      	mov	r1, r7
 800889e:	f7f7 fe6f 	bl	8000580 <__aeabi_dmul>
 80088a2:	e772      	b.n	800878a <__ieee754_pow+0x3a>
 80088a4:	4a51      	ldr	r2, [pc, #324]	@ (80089ec <__ieee754_pow+0x29c>)
 80088a6:	4591      	cmp	r9, r2
 80088a8:	d109      	bne.n	80088be <__ieee754_pow+0x16e>
 80088aa:	2d00      	cmp	r5, #0
 80088ac:	db07      	blt.n	80088be <__ieee754_pow+0x16e>
 80088ae:	ec47 6b10 	vmov	d0, r6, r7
 80088b2:	b011      	add	sp, #68	@ 0x44
 80088b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b8:	f001 b8e6 	b.w	8009a88 <__ieee754_sqrt>
 80088bc:	2400      	movs	r4, #0
 80088be:	ec47 6b10 	vmov	d0, r6, r7
 80088c2:	9302      	str	r3, [sp, #8]
 80088c4:	f001 f81c 	bl	8009900 <fabs>
 80088c8:	9b02      	ldr	r3, [sp, #8]
 80088ca:	ec51 0b10 	vmov	r0, r1, d0
 80088ce:	bb53      	cbnz	r3, 8008926 <__ieee754_pow+0x1d6>
 80088d0:	4b44      	ldr	r3, [pc, #272]	@ (80089e4 <__ieee754_pow+0x294>)
 80088d2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d002      	beq.n	80088e0 <__ieee754_pow+0x190>
 80088da:	f1b8 0f00 	cmp.w	r8, #0
 80088de:	d122      	bne.n	8008926 <__ieee754_pow+0x1d6>
 80088e0:	f1b9 0f00 	cmp.w	r9, #0
 80088e4:	da05      	bge.n	80088f2 <__ieee754_pow+0x1a2>
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	2000      	movs	r0, #0
 80088ec:	493d      	ldr	r1, [pc, #244]	@ (80089e4 <__ieee754_pow+0x294>)
 80088ee:	f7f7 ff71 	bl	80007d4 <__aeabi_ddiv>
 80088f2:	2d00      	cmp	r5, #0
 80088f4:	f6bf af49 	bge.w	800878a <__ieee754_pow+0x3a>
 80088f8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80088fc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008900:	ea58 0804 	orrs.w	r8, r8, r4
 8008904:	d108      	bne.n	8008918 <__ieee754_pow+0x1c8>
 8008906:	4602      	mov	r2, r0
 8008908:	460b      	mov	r3, r1
 800890a:	4610      	mov	r0, r2
 800890c:	4619      	mov	r1, r3
 800890e:	f7f7 fc7f 	bl	8000210 <__aeabi_dsub>
 8008912:	4602      	mov	r2, r0
 8008914:	460b      	mov	r3, r1
 8008916:	e794      	b.n	8008842 <__ieee754_pow+0xf2>
 8008918:	2c01      	cmp	r4, #1
 800891a:	f47f af36 	bne.w	800878a <__ieee754_pow+0x3a>
 800891e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008922:	4619      	mov	r1, r3
 8008924:	e731      	b.n	800878a <__ieee754_pow+0x3a>
 8008926:	0feb      	lsrs	r3, r5, #31
 8008928:	3b01      	subs	r3, #1
 800892a:	ea53 0204 	orrs.w	r2, r3, r4
 800892e:	d102      	bne.n	8008936 <__ieee754_pow+0x1e6>
 8008930:	4632      	mov	r2, r6
 8008932:	463b      	mov	r3, r7
 8008934:	e7e9      	b.n	800890a <__ieee754_pow+0x1ba>
 8008936:	3c01      	subs	r4, #1
 8008938:	431c      	orrs	r4, r3
 800893a:	d016      	beq.n	800896a <__ieee754_pow+0x21a>
 800893c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80089c8 <__ieee754_pow+0x278>
 8008940:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8008944:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008948:	f240 8112 	bls.w	8008b70 <__ieee754_pow+0x420>
 800894c:	4b28      	ldr	r3, [pc, #160]	@ (80089f0 <__ieee754_pow+0x2a0>)
 800894e:	459a      	cmp	sl, r3
 8008950:	4b25      	ldr	r3, [pc, #148]	@ (80089e8 <__ieee754_pow+0x298>)
 8008952:	d916      	bls.n	8008982 <__ieee754_pow+0x232>
 8008954:	4598      	cmp	r8, r3
 8008956:	d80b      	bhi.n	8008970 <__ieee754_pow+0x220>
 8008958:	f1b9 0f00 	cmp.w	r9, #0
 800895c:	da0b      	bge.n	8008976 <__ieee754_pow+0x226>
 800895e:	2000      	movs	r0, #0
 8008960:	b011      	add	sp, #68	@ 0x44
 8008962:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008966:	f001 b887 	b.w	8009a78 <__math_oflow>
 800896a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80089d0 <__ieee754_pow+0x280>
 800896e:	e7e7      	b.n	8008940 <__ieee754_pow+0x1f0>
 8008970:	f1b9 0f00 	cmp.w	r9, #0
 8008974:	dcf3      	bgt.n	800895e <__ieee754_pow+0x20e>
 8008976:	2000      	movs	r0, #0
 8008978:	b011      	add	sp, #68	@ 0x44
 800897a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897e:	f001 b873 	b.w	8009a68 <__math_uflow>
 8008982:	4598      	cmp	r8, r3
 8008984:	d20c      	bcs.n	80089a0 <__ieee754_pow+0x250>
 8008986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800898a:	2200      	movs	r2, #0
 800898c:	2300      	movs	r3, #0
 800898e:	f7f8 f869 	bl	8000a64 <__aeabi_dcmplt>
 8008992:	3800      	subs	r0, #0
 8008994:	bf18      	it	ne
 8008996:	2001      	movne	r0, #1
 8008998:	f1b9 0f00 	cmp.w	r9, #0
 800899c:	daec      	bge.n	8008978 <__ieee754_pow+0x228>
 800899e:	e7df      	b.n	8008960 <__ieee754_pow+0x210>
 80089a0:	4b10      	ldr	r3, [pc, #64]	@ (80089e4 <__ieee754_pow+0x294>)
 80089a2:	4598      	cmp	r8, r3
 80089a4:	f04f 0200 	mov.w	r2, #0
 80089a8:	d924      	bls.n	80089f4 <__ieee754_pow+0x2a4>
 80089aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089ae:	2300      	movs	r3, #0
 80089b0:	f7f8 f858 	bl	8000a64 <__aeabi_dcmplt>
 80089b4:	3800      	subs	r0, #0
 80089b6:	bf18      	it	ne
 80089b8:	2001      	movne	r0, #1
 80089ba:	f1b9 0f00 	cmp.w	r9, #0
 80089be:	dccf      	bgt.n	8008960 <__ieee754_pow+0x210>
 80089c0:	e7da      	b.n	8008978 <__ieee754_pow+0x228>
 80089c2:	bf00      	nop
 80089c4:	f3af 8000 	nop.w
 80089c8:	00000000 	.word	0x00000000
 80089cc:	3ff00000 	.word	0x3ff00000
 80089d0:	00000000 	.word	0x00000000
 80089d4:	bff00000 	.word	0xbff00000
 80089d8:	fff00000 	.word	0xfff00000
 80089dc:	7ff00000 	.word	0x7ff00000
 80089e0:	433fffff 	.word	0x433fffff
 80089e4:	3ff00000 	.word	0x3ff00000
 80089e8:	3fefffff 	.word	0x3fefffff
 80089ec:	3fe00000 	.word	0x3fe00000
 80089f0:	43f00000 	.word	0x43f00000
 80089f4:	4b5a      	ldr	r3, [pc, #360]	@ (8008b60 <__ieee754_pow+0x410>)
 80089f6:	f7f7 fc0b 	bl	8000210 <__aeabi_dsub>
 80089fa:	a351      	add	r3, pc, #324	@ (adr r3, 8008b40 <__ieee754_pow+0x3f0>)
 80089fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a00:	4604      	mov	r4, r0
 8008a02:	460d      	mov	r5, r1
 8008a04:	f7f7 fdbc 	bl	8000580 <__aeabi_dmul>
 8008a08:	a34f      	add	r3, pc, #316	@ (adr r3, 8008b48 <__ieee754_pow+0x3f8>)
 8008a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0e:	4606      	mov	r6, r0
 8008a10:	460f      	mov	r7, r1
 8008a12:	4620      	mov	r0, r4
 8008a14:	4629      	mov	r1, r5
 8008a16:	f7f7 fdb3 	bl	8000580 <__aeabi_dmul>
 8008a1a:	4b52      	ldr	r3, [pc, #328]	@ (8008b64 <__ieee754_pow+0x414>)
 8008a1c:	4682      	mov	sl, r0
 8008a1e:	468b      	mov	fp, r1
 8008a20:	2200      	movs	r2, #0
 8008a22:	4620      	mov	r0, r4
 8008a24:	4629      	mov	r1, r5
 8008a26:	f7f7 fdab 	bl	8000580 <__aeabi_dmul>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	a148      	add	r1, pc, #288	@ (adr r1, 8008b50 <__ieee754_pow+0x400>)
 8008a30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a34:	f7f7 fbec 	bl	8000210 <__aeabi_dsub>
 8008a38:	4622      	mov	r2, r4
 8008a3a:	462b      	mov	r3, r5
 8008a3c:	f7f7 fda0 	bl	8000580 <__aeabi_dmul>
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	2000      	movs	r0, #0
 8008a46:	4948      	ldr	r1, [pc, #288]	@ (8008b68 <__ieee754_pow+0x418>)
 8008a48:	f7f7 fbe2 	bl	8000210 <__aeabi_dsub>
 8008a4c:	4622      	mov	r2, r4
 8008a4e:	4680      	mov	r8, r0
 8008a50:	4689      	mov	r9, r1
 8008a52:	462b      	mov	r3, r5
 8008a54:	4620      	mov	r0, r4
 8008a56:	4629      	mov	r1, r5
 8008a58:	f7f7 fd92 	bl	8000580 <__aeabi_dmul>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4640      	mov	r0, r8
 8008a62:	4649      	mov	r1, r9
 8008a64:	f7f7 fd8c 	bl	8000580 <__aeabi_dmul>
 8008a68:	a33b      	add	r3, pc, #236	@ (adr r3, 8008b58 <__ieee754_pow+0x408>)
 8008a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6e:	f7f7 fd87 	bl	8000580 <__aeabi_dmul>
 8008a72:	4602      	mov	r2, r0
 8008a74:	460b      	mov	r3, r1
 8008a76:	4650      	mov	r0, sl
 8008a78:	4659      	mov	r1, fp
 8008a7a:	f7f7 fbc9 	bl	8000210 <__aeabi_dsub>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	460b      	mov	r3, r1
 8008a82:	4680      	mov	r8, r0
 8008a84:	4689      	mov	r9, r1
 8008a86:	4630      	mov	r0, r6
 8008a88:	4639      	mov	r1, r7
 8008a8a:	f7f7 fbc3 	bl	8000214 <__adddf3>
 8008a8e:	2400      	movs	r4, #0
 8008a90:	4632      	mov	r2, r6
 8008a92:	463b      	mov	r3, r7
 8008a94:	4620      	mov	r0, r4
 8008a96:	460d      	mov	r5, r1
 8008a98:	f7f7 fbba 	bl	8000210 <__aeabi_dsub>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	4640      	mov	r0, r8
 8008aa2:	4649      	mov	r1, r9
 8008aa4:	f7f7 fbb4 	bl	8000210 <__aeabi_dsub>
 8008aa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008aac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	9304      	str	r3, [sp, #16]
 8008ab4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008ab8:	4606      	mov	r6, r0
 8008aba:	460f      	mov	r7, r1
 8008abc:	4652      	mov	r2, sl
 8008abe:	465b      	mov	r3, fp
 8008ac0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ac4:	f7f7 fba4 	bl	8000210 <__aeabi_dsub>
 8008ac8:	4622      	mov	r2, r4
 8008aca:	462b      	mov	r3, r5
 8008acc:	f7f7 fd58 	bl	8000580 <__aeabi_dmul>
 8008ad0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ad4:	4680      	mov	r8, r0
 8008ad6:	4689      	mov	r9, r1
 8008ad8:	4630      	mov	r0, r6
 8008ada:	4639      	mov	r1, r7
 8008adc:	f7f7 fd50 	bl	8000580 <__aeabi_dmul>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4640      	mov	r0, r8
 8008ae6:	4649      	mov	r1, r9
 8008ae8:	f7f7 fb94 	bl	8000214 <__adddf3>
 8008aec:	4652      	mov	r2, sl
 8008aee:	465b      	mov	r3, fp
 8008af0:	4606      	mov	r6, r0
 8008af2:	460f      	mov	r7, r1
 8008af4:	4620      	mov	r0, r4
 8008af6:	4629      	mov	r1, r5
 8008af8:	f7f7 fd42 	bl	8000580 <__aeabi_dmul>
 8008afc:	460b      	mov	r3, r1
 8008afe:	4602      	mov	r2, r0
 8008b00:	4680      	mov	r8, r0
 8008b02:	4689      	mov	r9, r1
 8008b04:	4630      	mov	r0, r6
 8008b06:	4639      	mov	r1, r7
 8008b08:	f7f7 fb84 	bl	8000214 <__adddf3>
 8008b0c:	4b17      	ldr	r3, [pc, #92]	@ (8008b6c <__ieee754_pow+0x41c>)
 8008b0e:	4299      	cmp	r1, r3
 8008b10:	4604      	mov	r4, r0
 8008b12:	460d      	mov	r5, r1
 8008b14:	468a      	mov	sl, r1
 8008b16:	468b      	mov	fp, r1
 8008b18:	f340 82ef 	ble.w	80090fa <__ieee754_pow+0x9aa>
 8008b1c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008b20:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008b24:	4303      	orrs	r3, r0
 8008b26:	f000 81e8 	beq.w	8008efa <__ieee754_pow+0x7aa>
 8008b2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	2300      	movs	r3, #0
 8008b32:	f7f7 ff97 	bl	8000a64 <__aeabi_dcmplt>
 8008b36:	3800      	subs	r0, #0
 8008b38:	bf18      	it	ne
 8008b3a:	2001      	movne	r0, #1
 8008b3c:	e710      	b.n	8008960 <__ieee754_pow+0x210>
 8008b3e:	bf00      	nop
 8008b40:	60000000 	.word	0x60000000
 8008b44:	3ff71547 	.word	0x3ff71547
 8008b48:	f85ddf44 	.word	0xf85ddf44
 8008b4c:	3e54ae0b 	.word	0x3e54ae0b
 8008b50:	55555555 	.word	0x55555555
 8008b54:	3fd55555 	.word	0x3fd55555
 8008b58:	652b82fe 	.word	0x652b82fe
 8008b5c:	3ff71547 	.word	0x3ff71547
 8008b60:	3ff00000 	.word	0x3ff00000
 8008b64:	3fd00000 	.word	0x3fd00000
 8008b68:	3fe00000 	.word	0x3fe00000
 8008b6c:	408fffff 	.word	0x408fffff
 8008b70:	4bd5      	ldr	r3, [pc, #852]	@ (8008ec8 <__ieee754_pow+0x778>)
 8008b72:	402b      	ands	r3, r5
 8008b74:	2200      	movs	r2, #0
 8008b76:	b92b      	cbnz	r3, 8008b84 <__ieee754_pow+0x434>
 8008b78:	4bd4      	ldr	r3, [pc, #848]	@ (8008ecc <__ieee754_pow+0x77c>)
 8008b7a:	f7f7 fd01 	bl	8000580 <__aeabi_dmul>
 8008b7e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8008b82:	468b      	mov	fp, r1
 8008b84:	ea4f 532b 	mov.w	r3, fp, asr #20
 8008b88:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008b8c:	4413      	add	r3, r2
 8008b8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b90:	4bcf      	ldr	r3, [pc, #828]	@ (8008ed0 <__ieee754_pow+0x780>)
 8008b92:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8008b96:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8008b9a:	459b      	cmp	fp, r3
 8008b9c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008ba0:	dd08      	ble.n	8008bb4 <__ieee754_pow+0x464>
 8008ba2:	4bcc      	ldr	r3, [pc, #816]	@ (8008ed4 <__ieee754_pow+0x784>)
 8008ba4:	459b      	cmp	fp, r3
 8008ba6:	f340 81a5 	ble.w	8008ef4 <__ieee754_pow+0x7a4>
 8008baa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bac:	3301      	adds	r3, #1
 8008bae:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bb0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008bb4:	f04f 0a00 	mov.w	sl, #0
 8008bb8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008bbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bbe:	4bc6      	ldr	r3, [pc, #792]	@ (8008ed8 <__ieee754_pow+0x788>)
 8008bc0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008bc4:	ed93 7b00 	vldr	d7, [r3]
 8008bc8:	4629      	mov	r1, r5
 8008bca:	ec53 2b17 	vmov	r2, r3, d7
 8008bce:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008bd2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008bd6:	f7f7 fb1b 	bl	8000210 <__aeabi_dsub>
 8008bda:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008bde:	4606      	mov	r6, r0
 8008be0:	460f      	mov	r7, r1
 8008be2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008be6:	f7f7 fb15 	bl	8000214 <__adddf3>
 8008bea:	4602      	mov	r2, r0
 8008bec:	460b      	mov	r3, r1
 8008bee:	2000      	movs	r0, #0
 8008bf0:	49ba      	ldr	r1, [pc, #744]	@ (8008edc <__ieee754_pow+0x78c>)
 8008bf2:	f7f7 fdef 	bl	80007d4 <__aeabi_ddiv>
 8008bf6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	4630      	mov	r0, r6
 8008c00:	4639      	mov	r1, r7
 8008c02:	f7f7 fcbd 	bl	8000580 <__aeabi_dmul>
 8008c06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c0a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8008c0e:	106d      	asrs	r5, r5, #1
 8008c10:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008c14:	f04f 0b00 	mov.w	fp, #0
 8008c18:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008c1c:	4661      	mov	r1, ip
 8008c1e:	2200      	movs	r2, #0
 8008c20:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008c24:	4658      	mov	r0, fp
 8008c26:	46e1      	mov	r9, ip
 8008c28:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8008c2c:	4614      	mov	r4, r2
 8008c2e:	461d      	mov	r5, r3
 8008c30:	f7f7 fca6 	bl	8000580 <__aeabi_dmul>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	4630      	mov	r0, r6
 8008c3a:	4639      	mov	r1, r7
 8008c3c:	f7f7 fae8 	bl	8000210 <__aeabi_dsub>
 8008c40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c44:	4606      	mov	r6, r0
 8008c46:	460f      	mov	r7, r1
 8008c48:	4620      	mov	r0, r4
 8008c4a:	4629      	mov	r1, r5
 8008c4c:	f7f7 fae0 	bl	8000210 <__aeabi_dsub>
 8008c50:	4602      	mov	r2, r0
 8008c52:	460b      	mov	r3, r1
 8008c54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008c58:	f7f7 fada 	bl	8000210 <__aeabi_dsub>
 8008c5c:	465a      	mov	r2, fp
 8008c5e:	464b      	mov	r3, r9
 8008c60:	f7f7 fc8e 	bl	8000580 <__aeabi_dmul>
 8008c64:	4602      	mov	r2, r0
 8008c66:	460b      	mov	r3, r1
 8008c68:	4630      	mov	r0, r6
 8008c6a:	4639      	mov	r1, r7
 8008c6c:	f7f7 fad0 	bl	8000210 <__aeabi_dsub>
 8008c70:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008c74:	f7f7 fc84 	bl	8000580 <__aeabi_dmul>
 8008c78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008c80:	4610      	mov	r0, r2
 8008c82:	4619      	mov	r1, r3
 8008c84:	f7f7 fc7c 	bl	8000580 <__aeabi_dmul>
 8008c88:	a37d      	add	r3, pc, #500	@ (adr r3, 8008e80 <__ieee754_pow+0x730>)
 8008c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8e:	4604      	mov	r4, r0
 8008c90:	460d      	mov	r5, r1
 8008c92:	f7f7 fc75 	bl	8000580 <__aeabi_dmul>
 8008c96:	a37c      	add	r3, pc, #496	@ (adr r3, 8008e88 <__ieee754_pow+0x738>)
 8008c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9c:	f7f7 faba 	bl	8000214 <__adddf3>
 8008ca0:	4622      	mov	r2, r4
 8008ca2:	462b      	mov	r3, r5
 8008ca4:	f7f7 fc6c 	bl	8000580 <__aeabi_dmul>
 8008ca8:	a379      	add	r3, pc, #484	@ (adr r3, 8008e90 <__ieee754_pow+0x740>)
 8008caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cae:	f7f7 fab1 	bl	8000214 <__adddf3>
 8008cb2:	4622      	mov	r2, r4
 8008cb4:	462b      	mov	r3, r5
 8008cb6:	f7f7 fc63 	bl	8000580 <__aeabi_dmul>
 8008cba:	a377      	add	r3, pc, #476	@ (adr r3, 8008e98 <__ieee754_pow+0x748>)
 8008cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc0:	f7f7 faa8 	bl	8000214 <__adddf3>
 8008cc4:	4622      	mov	r2, r4
 8008cc6:	462b      	mov	r3, r5
 8008cc8:	f7f7 fc5a 	bl	8000580 <__aeabi_dmul>
 8008ccc:	a374      	add	r3, pc, #464	@ (adr r3, 8008ea0 <__ieee754_pow+0x750>)
 8008cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd2:	f7f7 fa9f 	bl	8000214 <__adddf3>
 8008cd6:	4622      	mov	r2, r4
 8008cd8:	462b      	mov	r3, r5
 8008cda:	f7f7 fc51 	bl	8000580 <__aeabi_dmul>
 8008cde:	a372      	add	r3, pc, #456	@ (adr r3, 8008ea8 <__ieee754_pow+0x758>)
 8008ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce4:	f7f7 fa96 	bl	8000214 <__adddf3>
 8008ce8:	4622      	mov	r2, r4
 8008cea:	4606      	mov	r6, r0
 8008cec:	460f      	mov	r7, r1
 8008cee:	462b      	mov	r3, r5
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	4629      	mov	r1, r5
 8008cf4:	f7f7 fc44 	bl	8000580 <__aeabi_dmul>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	4639      	mov	r1, r7
 8008d00:	f7f7 fc3e 	bl	8000580 <__aeabi_dmul>
 8008d04:	465a      	mov	r2, fp
 8008d06:	4604      	mov	r4, r0
 8008d08:	460d      	mov	r5, r1
 8008d0a:	464b      	mov	r3, r9
 8008d0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d10:	f7f7 fa80 	bl	8000214 <__adddf3>
 8008d14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d18:	f7f7 fc32 	bl	8000580 <__aeabi_dmul>
 8008d1c:	4622      	mov	r2, r4
 8008d1e:	462b      	mov	r3, r5
 8008d20:	f7f7 fa78 	bl	8000214 <__adddf3>
 8008d24:	465a      	mov	r2, fp
 8008d26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008d2a:	464b      	mov	r3, r9
 8008d2c:	4658      	mov	r0, fp
 8008d2e:	4649      	mov	r1, r9
 8008d30:	f7f7 fc26 	bl	8000580 <__aeabi_dmul>
 8008d34:	4b6a      	ldr	r3, [pc, #424]	@ (8008ee0 <__ieee754_pow+0x790>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	4606      	mov	r6, r0
 8008d3a:	460f      	mov	r7, r1
 8008d3c:	f7f7 fa6a 	bl	8000214 <__adddf3>
 8008d40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008d44:	f7f7 fa66 	bl	8000214 <__adddf3>
 8008d48:	46d8      	mov	r8, fp
 8008d4a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8008d4e:	460d      	mov	r5, r1
 8008d50:	465a      	mov	r2, fp
 8008d52:	460b      	mov	r3, r1
 8008d54:	4640      	mov	r0, r8
 8008d56:	4649      	mov	r1, r9
 8008d58:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8008d5c:	f7f7 fc10 	bl	8000580 <__aeabi_dmul>
 8008d60:	465c      	mov	r4, fp
 8008d62:	4680      	mov	r8, r0
 8008d64:	4689      	mov	r9, r1
 8008d66:	4b5e      	ldr	r3, [pc, #376]	@ (8008ee0 <__ieee754_pow+0x790>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	4629      	mov	r1, r5
 8008d6e:	f7f7 fa4f 	bl	8000210 <__aeabi_dsub>
 8008d72:	4632      	mov	r2, r6
 8008d74:	463b      	mov	r3, r7
 8008d76:	f7f7 fa4b 	bl	8000210 <__aeabi_dsub>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d82:	f7f7 fa45 	bl	8000210 <__aeabi_dsub>
 8008d86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d8a:	f7f7 fbf9 	bl	8000580 <__aeabi_dmul>
 8008d8e:	4622      	mov	r2, r4
 8008d90:	4606      	mov	r6, r0
 8008d92:	460f      	mov	r7, r1
 8008d94:	462b      	mov	r3, r5
 8008d96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d9a:	f7f7 fbf1 	bl	8000580 <__aeabi_dmul>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	460b      	mov	r3, r1
 8008da2:	4630      	mov	r0, r6
 8008da4:	4639      	mov	r1, r7
 8008da6:	f7f7 fa35 	bl	8000214 <__adddf3>
 8008daa:	4606      	mov	r6, r0
 8008dac:	460f      	mov	r7, r1
 8008dae:	4602      	mov	r2, r0
 8008db0:	460b      	mov	r3, r1
 8008db2:	4640      	mov	r0, r8
 8008db4:	4649      	mov	r1, r9
 8008db6:	f7f7 fa2d 	bl	8000214 <__adddf3>
 8008dba:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8008dbe:	a33c      	add	r3, pc, #240	@ (adr r3, 8008eb0 <__ieee754_pow+0x760>)
 8008dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc4:	4658      	mov	r0, fp
 8008dc6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8008dca:	460d      	mov	r5, r1
 8008dcc:	f7f7 fbd8 	bl	8000580 <__aeabi_dmul>
 8008dd0:	465c      	mov	r4, fp
 8008dd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008dd6:	4642      	mov	r2, r8
 8008dd8:	464b      	mov	r3, r9
 8008dda:	4620      	mov	r0, r4
 8008ddc:	4629      	mov	r1, r5
 8008dde:	f7f7 fa17 	bl	8000210 <__aeabi_dsub>
 8008de2:	4602      	mov	r2, r0
 8008de4:	460b      	mov	r3, r1
 8008de6:	4630      	mov	r0, r6
 8008de8:	4639      	mov	r1, r7
 8008dea:	f7f7 fa11 	bl	8000210 <__aeabi_dsub>
 8008dee:	a332      	add	r3, pc, #200	@ (adr r3, 8008eb8 <__ieee754_pow+0x768>)
 8008df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df4:	f7f7 fbc4 	bl	8000580 <__aeabi_dmul>
 8008df8:	a331      	add	r3, pc, #196	@ (adr r3, 8008ec0 <__ieee754_pow+0x770>)
 8008dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfe:	4606      	mov	r6, r0
 8008e00:	460f      	mov	r7, r1
 8008e02:	4620      	mov	r0, r4
 8008e04:	4629      	mov	r1, r5
 8008e06:	f7f7 fbbb 	bl	8000580 <__aeabi_dmul>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4630      	mov	r0, r6
 8008e10:	4639      	mov	r1, r7
 8008e12:	f7f7 f9ff 	bl	8000214 <__adddf3>
 8008e16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008e18:	4b32      	ldr	r3, [pc, #200]	@ (8008ee4 <__ieee754_pow+0x794>)
 8008e1a:	4413      	add	r3, r2
 8008e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e20:	f7f7 f9f8 	bl	8000214 <__adddf3>
 8008e24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008e28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008e2a:	f7f7 fb3f 	bl	80004ac <__aeabi_i2d>
 8008e2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008e30:	4b2d      	ldr	r3, [pc, #180]	@ (8008ee8 <__ieee754_pow+0x798>)
 8008e32:	4413      	add	r3, r2
 8008e34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e38:	4606      	mov	r6, r0
 8008e3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e3e:	460f      	mov	r7, r1
 8008e40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e44:	f7f7 f9e6 	bl	8000214 <__adddf3>
 8008e48:	4642      	mov	r2, r8
 8008e4a:	464b      	mov	r3, r9
 8008e4c:	f7f7 f9e2 	bl	8000214 <__adddf3>
 8008e50:	4632      	mov	r2, r6
 8008e52:	463b      	mov	r3, r7
 8008e54:	f7f7 f9de 	bl	8000214 <__adddf3>
 8008e58:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8008e5c:	4632      	mov	r2, r6
 8008e5e:	463b      	mov	r3, r7
 8008e60:	4658      	mov	r0, fp
 8008e62:	460d      	mov	r5, r1
 8008e64:	f7f7 f9d4 	bl	8000210 <__aeabi_dsub>
 8008e68:	4642      	mov	r2, r8
 8008e6a:	464b      	mov	r3, r9
 8008e6c:	f7f7 f9d0 	bl	8000210 <__aeabi_dsub>
 8008e70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e74:	f7f7 f9cc 	bl	8000210 <__aeabi_dsub>
 8008e78:	465c      	mov	r4, fp
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	e036      	b.n	8008eec <__ieee754_pow+0x79c>
 8008e7e:	bf00      	nop
 8008e80:	4a454eef 	.word	0x4a454eef
 8008e84:	3fca7e28 	.word	0x3fca7e28
 8008e88:	93c9db65 	.word	0x93c9db65
 8008e8c:	3fcd864a 	.word	0x3fcd864a
 8008e90:	a91d4101 	.word	0xa91d4101
 8008e94:	3fd17460 	.word	0x3fd17460
 8008e98:	518f264d 	.word	0x518f264d
 8008e9c:	3fd55555 	.word	0x3fd55555
 8008ea0:	db6fabff 	.word	0xdb6fabff
 8008ea4:	3fdb6db6 	.word	0x3fdb6db6
 8008ea8:	33333303 	.word	0x33333303
 8008eac:	3fe33333 	.word	0x3fe33333
 8008eb0:	e0000000 	.word	0xe0000000
 8008eb4:	3feec709 	.word	0x3feec709
 8008eb8:	dc3a03fd 	.word	0xdc3a03fd
 8008ebc:	3feec709 	.word	0x3feec709
 8008ec0:	145b01f5 	.word	0x145b01f5
 8008ec4:	be3e2fe0 	.word	0xbe3e2fe0
 8008ec8:	7ff00000 	.word	0x7ff00000
 8008ecc:	43400000 	.word	0x43400000
 8008ed0:	0003988e 	.word	0x0003988e
 8008ed4:	000bb679 	.word	0x000bb679
 8008ed8:	0800a4e0 	.word	0x0800a4e0
 8008edc:	3ff00000 	.word	0x3ff00000
 8008ee0:	40080000 	.word	0x40080000
 8008ee4:	0800a4c0 	.word	0x0800a4c0
 8008ee8:	0800a4d0 	.word	0x0800a4d0
 8008eec:	460b      	mov	r3, r1
 8008eee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ef2:	e5d7      	b.n	8008aa4 <__ieee754_pow+0x354>
 8008ef4:	f04f 0a01 	mov.w	sl, #1
 8008ef8:	e65e      	b.n	8008bb8 <__ieee754_pow+0x468>
 8008efa:	a3b4      	add	r3, pc, #720	@ (adr r3, 80091cc <__ieee754_pow+0xa7c>)
 8008efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f00:	4630      	mov	r0, r6
 8008f02:	4639      	mov	r1, r7
 8008f04:	f7f7 f986 	bl	8000214 <__adddf3>
 8008f08:	4642      	mov	r2, r8
 8008f0a:	e9cd 0100 	strd	r0, r1, [sp]
 8008f0e:	464b      	mov	r3, r9
 8008f10:	4620      	mov	r0, r4
 8008f12:	4629      	mov	r1, r5
 8008f14:	f7f7 f97c 	bl	8000210 <__aeabi_dsub>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f20:	f7f7 fdbe 	bl	8000aa0 <__aeabi_dcmpgt>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	f47f ae00 	bne.w	8008b2a <__ieee754_pow+0x3da>
 8008f2a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8008f2e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008f32:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8008f36:	fa43 fa0a 	asr.w	sl, r3, sl
 8008f3a:	44da      	add	sl, fp
 8008f3c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008f40:	489d      	ldr	r0, [pc, #628]	@ (80091b8 <__ieee754_pow+0xa68>)
 8008f42:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008f46:	4108      	asrs	r0, r1
 8008f48:	ea00 030a 	and.w	r3, r0, sl
 8008f4c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008f50:	f1c1 0114 	rsb	r1, r1, #20
 8008f54:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008f58:	fa4a fa01 	asr.w	sl, sl, r1
 8008f5c:	f1bb 0f00 	cmp.w	fp, #0
 8008f60:	4640      	mov	r0, r8
 8008f62:	4649      	mov	r1, r9
 8008f64:	f04f 0200 	mov.w	r2, #0
 8008f68:	bfb8      	it	lt
 8008f6a:	f1ca 0a00 	rsblt	sl, sl, #0
 8008f6e:	f7f7 f94f 	bl	8000210 <__aeabi_dsub>
 8008f72:	4680      	mov	r8, r0
 8008f74:	4689      	mov	r9, r1
 8008f76:	4632      	mov	r2, r6
 8008f78:	463b      	mov	r3, r7
 8008f7a:	4640      	mov	r0, r8
 8008f7c:	4649      	mov	r1, r9
 8008f7e:	f7f7 f949 	bl	8000214 <__adddf3>
 8008f82:	2400      	movs	r4, #0
 8008f84:	a37c      	add	r3, pc, #496	@ (adr r3, 8009178 <__ieee754_pow+0xa28>)
 8008f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	460d      	mov	r5, r1
 8008f8e:	f7f7 faf7 	bl	8000580 <__aeabi_dmul>
 8008f92:	4642      	mov	r2, r8
 8008f94:	e9cd 0100 	strd	r0, r1, [sp]
 8008f98:	464b      	mov	r3, r9
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	4629      	mov	r1, r5
 8008f9e:	f7f7 f937 	bl	8000210 <__aeabi_dsub>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	4639      	mov	r1, r7
 8008faa:	f7f7 f931 	bl	8000210 <__aeabi_dsub>
 8008fae:	a374      	add	r3, pc, #464	@ (adr r3, 8009180 <__ieee754_pow+0xa30>)
 8008fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb4:	f7f7 fae4 	bl	8000580 <__aeabi_dmul>
 8008fb8:	a373      	add	r3, pc, #460	@ (adr r3, 8009188 <__ieee754_pow+0xa38>)
 8008fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbe:	4680      	mov	r8, r0
 8008fc0:	4689      	mov	r9, r1
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	4629      	mov	r1, r5
 8008fc6:	f7f7 fadb 	bl	8000580 <__aeabi_dmul>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	460b      	mov	r3, r1
 8008fce:	4640      	mov	r0, r8
 8008fd0:	4649      	mov	r1, r9
 8008fd2:	f7f7 f91f 	bl	8000214 <__adddf3>
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	460d      	mov	r5, r1
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fe2:	f7f7 f917 	bl	8000214 <__adddf3>
 8008fe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fea:	4680      	mov	r8, r0
 8008fec:	4689      	mov	r9, r1
 8008fee:	f7f7 f90f 	bl	8000210 <__aeabi_dsub>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	f7f7 f909 	bl	8000210 <__aeabi_dsub>
 8008ffe:	4642      	mov	r2, r8
 8009000:	4606      	mov	r6, r0
 8009002:	460f      	mov	r7, r1
 8009004:	464b      	mov	r3, r9
 8009006:	4640      	mov	r0, r8
 8009008:	4649      	mov	r1, r9
 800900a:	f7f7 fab9 	bl	8000580 <__aeabi_dmul>
 800900e:	a360      	add	r3, pc, #384	@ (adr r3, 8009190 <__ieee754_pow+0xa40>)
 8009010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009014:	4604      	mov	r4, r0
 8009016:	460d      	mov	r5, r1
 8009018:	f7f7 fab2 	bl	8000580 <__aeabi_dmul>
 800901c:	a35e      	add	r3, pc, #376	@ (adr r3, 8009198 <__ieee754_pow+0xa48>)
 800901e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009022:	f7f7 f8f5 	bl	8000210 <__aeabi_dsub>
 8009026:	4622      	mov	r2, r4
 8009028:	462b      	mov	r3, r5
 800902a:	f7f7 faa9 	bl	8000580 <__aeabi_dmul>
 800902e:	a35c      	add	r3, pc, #368	@ (adr r3, 80091a0 <__ieee754_pow+0xa50>)
 8009030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009034:	f7f7 f8ee 	bl	8000214 <__adddf3>
 8009038:	4622      	mov	r2, r4
 800903a:	462b      	mov	r3, r5
 800903c:	f7f7 faa0 	bl	8000580 <__aeabi_dmul>
 8009040:	a359      	add	r3, pc, #356	@ (adr r3, 80091a8 <__ieee754_pow+0xa58>)
 8009042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009046:	f7f7 f8e3 	bl	8000210 <__aeabi_dsub>
 800904a:	4622      	mov	r2, r4
 800904c:	462b      	mov	r3, r5
 800904e:	f7f7 fa97 	bl	8000580 <__aeabi_dmul>
 8009052:	a357      	add	r3, pc, #348	@ (adr r3, 80091b0 <__ieee754_pow+0xa60>)
 8009054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009058:	f7f7 f8dc 	bl	8000214 <__adddf3>
 800905c:	4622      	mov	r2, r4
 800905e:	462b      	mov	r3, r5
 8009060:	f7f7 fa8e 	bl	8000580 <__aeabi_dmul>
 8009064:	4602      	mov	r2, r0
 8009066:	460b      	mov	r3, r1
 8009068:	4640      	mov	r0, r8
 800906a:	4649      	mov	r1, r9
 800906c:	f7f7 f8d0 	bl	8000210 <__aeabi_dsub>
 8009070:	4604      	mov	r4, r0
 8009072:	460d      	mov	r5, r1
 8009074:	4602      	mov	r2, r0
 8009076:	460b      	mov	r3, r1
 8009078:	4640      	mov	r0, r8
 800907a:	4649      	mov	r1, r9
 800907c:	f7f7 fa80 	bl	8000580 <__aeabi_dmul>
 8009080:	2200      	movs	r2, #0
 8009082:	e9cd 0100 	strd	r0, r1, [sp]
 8009086:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800908a:	4620      	mov	r0, r4
 800908c:	4629      	mov	r1, r5
 800908e:	f7f7 f8bf 	bl	8000210 <__aeabi_dsub>
 8009092:	4602      	mov	r2, r0
 8009094:	460b      	mov	r3, r1
 8009096:	e9dd 0100 	ldrd	r0, r1, [sp]
 800909a:	f7f7 fb9b 	bl	80007d4 <__aeabi_ddiv>
 800909e:	4632      	mov	r2, r6
 80090a0:	4604      	mov	r4, r0
 80090a2:	460d      	mov	r5, r1
 80090a4:	463b      	mov	r3, r7
 80090a6:	4640      	mov	r0, r8
 80090a8:	4649      	mov	r1, r9
 80090aa:	f7f7 fa69 	bl	8000580 <__aeabi_dmul>
 80090ae:	4632      	mov	r2, r6
 80090b0:	463b      	mov	r3, r7
 80090b2:	f7f7 f8af 	bl	8000214 <__adddf3>
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	4620      	mov	r0, r4
 80090bc:	4629      	mov	r1, r5
 80090be:	f7f7 f8a7 	bl	8000210 <__aeabi_dsub>
 80090c2:	4642      	mov	r2, r8
 80090c4:	464b      	mov	r3, r9
 80090c6:	f7f7 f8a3 	bl	8000210 <__aeabi_dsub>
 80090ca:	460b      	mov	r3, r1
 80090cc:	4602      	mov	r2, r0
 80090ce:	493b      	ldr	r1, [pc, #236]	@ (80091bc <__ieee754_pow+0xa6c>)
 80090d0:	2000      	movs	r0, #0
 80090d2:	f7f7 f89d 	bl	8000210 <__aeabi_dsub>
 80090d6:	ec41 0b10 	vmov	d0, r0, r1
 80090da:	ee10 3a90 	vmov	r3, s1
 80090de:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80090e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090e6:	da30      	bge.n	800914a <__ieee754_pow+0x9fa>
 80090e8:	4650      	mov	r0, sl
 80090ea:	f000 fc11 	bl	8009910 <scalbn>
 80090ee:	ec51 0b10 	vmov	r0, r1, d0
 80090f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090f6:	f7ff bbd2 	b.w	800889e <__ieee754_pow+0x14e>
 80090fa:	4c31      	ldr	r4, [pc, #196]	@ (80091c0 <__ieee754_pow+0xa70>)
 80090fc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009100:	42a3      	cmp	r3, r4
 8009102:	d91a      	bls.n	800913a <__ieee754_pow+0x9ea>
 8009104:	4b2f      	ldr	r3, [pc, #188]	@ (80091c4 <__ieee754_pow+0xa74>)
 8009106:	440b      	add	r3, r1
 8009108:	4303      	orrs	r3, r0
 800910a:	d009      	beq.n	8009120 <__ieee754_pow+0x9d0>
 800910c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009110:	2200      	movs	r2, #0
 8009112:	2300      	movs	r3, #0
 8009114:	f7f7 fca6 	bl	8000a64 <__aeabi_dcmplt>
 8009118:	3800      	subs	r0, #0
 800911a:	bf18      	it	ne
 800911c:	2001      	movne	r0, #1
 800911e:	e42b      	b.n	8008978 <__ieee754_pow+0x228>
 8009120:	4642      	mov	r2, r8
 8009122:	464b      	mov	r3, r9
 8009124:	f7f7 f874 	bl	8000210 <__aeabi_dsub>
 8009128:	4632      	mov	r2, r6
 800912a:	463b      	mov	r3, r7
 800912c:	f7f7 fcae 	bl	8000a8c <__aeabi_dcmpge>
 8009130:	2800      	cmp	r0, #0
 8009132:	d1eb      	bne.n	800910c <__ieee754_pow+0x9bc>
 8009134:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80091d4 <__ieee754_pow+0xa84>
 8009138:	e6f7      	b.n	8008f2a <__ieee754_pow+0x7da>
 800913a:	469a      	mov	sl, r3
 800913c:	4b22      	ldr	r3, [pc, #136]	@ (80091c8 <__ieee754_pow+0xa78>)
 800913e:	459a      	cmp	sl, r3
 8009140:	f63f aef3 	bhi.w	8008f2a <__ieee754_pow+0x7da>
 8009144:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009148:	e715      	b.n	8008f76 <__ieee754_pow+0x826>
 800914a:	ec51 0b10 	vmov	r0, r1, d0
 800914e:	4619      	mov	r1, r3
 8009150:	e7cf      	b.n	80090f2 <__ieee754_pow+0x9a2>
 8009152:	491a      	ldr	r1, [pc, #104]	@ (80091bc <__ieee754_pow+0xa6c>)
 8009154:	2000      	movs	r0, #0
 8009156:	f7ff bb18 	b.w	800878a <__ieee754_pow+0x3a>
 800915a:	2000      	movs	r0, #0
 800915c:	2100      	movs	r1, #0
 800915e:	f7ff bb14 	b.w	800878a <__ieee754_pow+0x3a>
 8009162:	4630      	mov	r0, r6
 8009164:	4639      	mov	r1, r7
 8009166:	f7ff bb10 	b.w	800878a <__ieee754_pow+0x3a>
 800916a:	460c      	mov	r4, r1
 800916c:	f7ff bb5e 	b.w	800882c <__ieee754_pow+0xdc>
 8009170:	2400      	movs	r4, #0
 8009172:	f7ff bb49 	b.w	8008808 <__ieee754_pow+0xb8>
 8009176:	bf00      	nop
 8009178:	00000000 	.word	0x00000000
 800917c:	3fe62e43 	.word	0x3fe62e43
 8009180:	fefa39ef 	.word	0xfefa39ef
 8009184:	3fe62e42 	.word	0x3fe62e42
 8009188:	0ca86c39 	.word	0x0ca86c39
 800918c:	be205c61 	.word	0xbe205c61
 8009190:	72bea4d0 	.word	0x72bea4d0
 8009194:	3e663769 	.word	0x3e663769
 8009198:	c5d26bf1 	.word	0xc5d26bf1
 800919c:	3ebbbd41 	.word	0x3ebbbd41
 80091a0:	af25de2c 	.word	0xaf25de2c
 80091a4:	3f11566a 	.word	0x3f11566a
 80091a8:	16bebd93 	.word	0x16bebd93
 80091ac:	3f66c16c 	.word	0x3f66c16c
 80091b0:	5555553e 	.word	0x5555553e
 80091b4:	3fc55555 	.word	0x3fc55555
 80091b8:	fff00000 	.word	0xfff00000
 80091bc:	3ff00000 	.word	0x3ff00000
 80091c0:	4090cbff 	.word	0x4090cbff
 80091c4:	3f6f3400 	.word	0x3f6f3400
 80091c8:	3fe00000 	.word	0x3fe00000
 80091cc:	652b82fe 	.word	0x652b82fe
 80091d0:	3c971547 	.word	0x3c971547
 80091d4:	4090cc00 	.word	0x4090cc00

080091d8 <__ieee754_rem_pio2>:
 80091d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091dc:	ec57 6b10 	vmov	r6, r7, d0
 80091e0:	4bc5      	ldr	r3, [pc, #788]	@ (80094f8 <__ieee754_rem_pio2+0x320>)
 80091e2:	b08d      	sub	sp, #52	@ 0x34
 80091e4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80091e8:	4598      	cmp	r8, r3
 80091ea:	4604      	mov	r4, r0
 80091ec:	9704      	str	r7, [sp, #16]
 80091ee:	d807      	bhi.n	8009200 <__ieee754_rem_pio2+0x28>
 80091f0:	2200      	movs	r2, #0
 80091f2:	2300      	movs	r3, #0
 80091f4:	ed80 0b00 	vstr	d0, [r0]
 80091f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80091fc:	2500      	movs	r5, #0
 80091fe:	e028      	b.n	8009252 <__ieee754_rem_pio2+0x7a>
 8009200:	4bbe      	ldr	r3, [pc, #760]	@ (80094fc <__ieee754_rem_pio2+0x324>)
 8009202:	4598      	cmp	r8, r3
 8009204:	d878      	bhi.n	80092f8 <__ieee754_rem_pio2+0x120>
 8009206:	9b04      	ldr	r3, [sp, #16]
 8009208:	4dbd      	ldr	r5, [pc, #756]	@ (8009500 <__ieee754_rem_pio2+0x328>)
 800920a:	2b00      	cmp	r3, #0
 800920c:	4630      	mov	r0, r6
 800920e:	a3ac      	add	r3, pc, #688	@ (adr r3, 80094c0 <__ieee754_rem_pio2+0x2e8>)
 8009210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009214:	4639      	mov	r1, r7
 8009216:	dd38      	ble.n	800928a <__ieee754_rem_pio2+0xb2>
 8009218:	f7f6 fffa 	bl	8000210 <__aeabi_dsub>
 800921c:	45a8      	cmp	r8, r5
 800921e:	4606      	mov	r6, r0
 8009220:	460f      	mov	r7, r1
 8009222:	d01a      	beq.n	800925a <__ieee754_rem_pio2+0x82>
 8009224:	a3a8      	add	r3, pc, #672	@ (adr r3, 80094c8 <__ieee754_rem_pio2+0x2f0>)
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	f7f6 fff1 	bl	8000210 <__aeabi_dsub>
 800922e:	4602      	mov	r2, r0
 8009230:	460b      	mov	r3, r1
 8009232:	4680      	mov	r8, r0
 8009234:	4689      	mov	r9, r1
 8009236:	4630      	mov	r0, r6
 8009238:	4639      	mov	r1, r7
 800923a:	f7f6 ffe9 	bl	8000210 <__aeabi_dsub>
 800923e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80094c8 <__ieee754_rem_pio2+0x2f0>)
 8009240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009244:	f7f6 ffe4 	bl	8000210 <__aeabi_dsub>
 8009248:	e9c4 8900 	strd	r8, r9, [r4]
 800924c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009250:	2501      	movs	r5, #1
 8009252:	4628      	mov	r0, r5
 8009254:	b00d      	add	sp, #52	@ 0x34
 8009256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800925a:	a39d      	add	r3, pc, #628	@ (adr r3, 80094d0 <__ieee754_rem_pio2+0x2f8>)
 800925c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009260:	f7f6 ffd6 	bl	8000210 <__aeabi_dsub>
 8009264:	a39c      	add	r3, pc, #624	@ (adr r3, 80094d8 <__ieee754_rem_pio2+0x300>)
 8009266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926a:	4606      	mov	r6, r0
 800926c:	460f      	mov	r7, r1
 800926e:	f7f6 ffcf 	bl	8000210 <__aeabi_dsub>
 8009272:	4602      	mov	r2, r0
 8009274:	460b      	mov	r3, r1
 8009276:	4680      	mov	r8, r0
 8009278:	4689      	mov	r9, r1
 800927a:	4630      	mov	r0, r6
 800927c:	4639      	mov	r1, r7
 800927e:	f7f6 ffc7 	bl	8000210 <__aeabi_dsub>
 8009282:	a395      	add	r3, pc, #596	@ (adr r3, 80094d8 <__ieee754_rem_pio2+0x300>)
 8009284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009288:	e7dc      	b.n	8009244 <__ieee754_rem_pio2+0x6c>
 800928a:	f7f6 ffc3 	bl	8000214 <__adddf3>
 800928e:	45a8      	cmp	r8, r5
 8009290:	4606      	mov	r6, r0
 8009292:	460f      	mov	r7, r1
 8009294:	d018      	beq.n	80092c8 <__ieee754_rem_pio2+0xf0>
 8009296:	a38c      	add	r3, pc, #560	@ (adr r3, 80094c8 <__ieee754_rem_pio2+0x2f0>)
 8009298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929c:	f7f6 ffba 	bl	8000214 <__adddf3>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	4680      	mov	r8, r0
 80092a6:	4689      	mov	r9, r1
 80092a8:	4630      	mov	r0, r6
 80092aa:	4639      	mov	r1, r7
 80092ac:	f7f6 ffb0 	bl	8000210 <__aeabi_dsub>
 80092b0:	a385      	add	r3, pc, #532	@ (adr r3, 80094c8 <__ieee754_rem_pio2+0x2f0>)
 80092b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b6:	f7f6 ffad 	bl	8000214 <__adddf3>
 80092ba:	f04f 35ff 	mov.w	r5, #4294967295
 80092be:	e9c4 8900 	strd	r8, r9, [r4]
 80092c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80092c6:	e7c4      	b.n	8009252 <__ieee754_rem_pio2+0x7a>
 80092c8:	a381      	add	r3, pc, #516	@ (adr r3, 80094d0 <__ieee754_rem_pio2+0x2f8>)
 80092ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ce:	f7f6 ffa1 	bl	8000214 <__adddf3>
 80092d2:	a381      	add	r3, pc, #516	@ (adr r3, 80094d8 <__ieee754_rem_pio2+0x300>)
 80092d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d8:	4606      	mov	r6, r0
 80092da:	460f      	mov	r7, r1
 80092dc:	f7f6 ff9a 	bl	8000214 <__adddf3>
 80092e0:	4602      	mov	r2, r0
 80092e2:	460b      	mov	r3, r1
 80092e4:	4680      	mov	r8, r0
 80092e6:	4689      	mov	r9, r1
 80092e8:	4630      	mov	r0, r6
 80092ea:	4639      	mov	r1, r7
 80092ec:	f7f6 ff90 	bl	8000210 <__aeabi_dsub>
 80092f0:	a379      	add	r3, pc, #484	@ (adr r3, 80094d8 <__ieee754_rem_pio2+0x300>)
 80092f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f6:	e7de      	b.n	80092b6 <__ieee754_rem_pio2+0xde>
 80092f8:	4b82      	ldr	r3, [pc, #520]	@ (8009504 <__ieee754_rem_pio2+0x32c>)
 80092fa:	4598      	cmp	r8, r3
 80092fc:	f200 80d1 	bhi.w	80094a2 <__ieee754_rem_pio2+0x2ca>
 8009300:	f000 fafe 	bl	8009900 <fabs>
 8009304:	ec57 6b10 	vmov	r6, r7, d0
 8009308:	a375      	add	r3, pc, #468	@ (adr r3, 80094e0 <__ieee754_rem_pio2+0x308>)
 800930a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930e:	4630      	mov	r0, r6
 8009310:	4639      	mov	r1, r7
 8009312:	f7f7 f935 	bl	8000580 <__aeabi_dmul>
 8009316:	4b7c      	ldr	r3, [pc, #496]	@ (8009508 <__ieee754_rem_pio2+0x330>)
 8009318:	2200      	movs	r2, #0
 800931a:	f7f6 ff7b 	bl	8000214 <__adddf3>
 800931e:	f7f7 fbdf 	bl	8000ae0 <__aeabi_d2iz>
 8009322:	4605      	mov	r5, r0
 8009324:	f7f7 f8c2 	bl	80004ac <__aeabi_i2d>
 8009328:	4602      	mov	r2, r0
 800932a:	460b      	mov	r3, r1
 800932c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009330:	a363      	add	r3, pc, #396	@ (adr r3, 80094c0 <__ieee754_rem_pio2+0x2e8>)
 8009332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009336:	f7f7 f923 	bl	8000580 <__aeabi_dmul>
 800933a:	4602      	mov	r2, r0
 800933c:	460b      	mov	r3, r1
 800933e:	4630      	mov	r0, r6
 8009340:	4639      	mov	r1, r7
 8009342:	f7f6 ff65 	bl	8000210 <__aeabi_dsub>
 8009346:	a360      	add	r3, pc, #384	@ (adr r3, 80094c8 <__ieee754_rem_pio2+0x2f0>)
 8009348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934c:	4682      	mov	sl, r0
 800934e:	468b      	mov	fp, r1
 8009350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009354:	f7f7 f914 	bl	8000580 <__aeabi_dmul>
 8009358:	2d1f      	cmp	r5, #31
 800935a:	4606      	mov	r6, r0
 800935c:	460f      	mov	r7, r1
 800935e:	dc0c      	bgt.n	800937a <__ieee754_rem_pio2+0x1a2>
 8009360:	4b6a      	ldr	r3, [pc, #424]	@ (800950c <__ieee754_rem_pio2+0x334>)
 8009362:	1e6a      	subs	r2, r5, #1
 8009364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009368:	4543      	cmp	r3, r8
 800936a:	d006      	beq.n	800937a <__ieee754_rem_pio2+0x1a2>
 800936c:	4632      	mov	r2, r6
 800936e:	463b      	mov	r3, r7
 8009370:	4650      	mov	r0, sl
 8009372:	4659      	mov	r1, fp
 8009374:	f7f6 ff4c 	bl	8000210 <__aeabi_dsub>
 8009378:	e00e      	b.n	8009398 <__ieee754_rem_pio2+0x1c0>
 800937a:	463b      	mov	r3, r7
 800937c:	4632      	mov	r2, r6
 800937e:	4650      	mov	r0, sl
 8009380:	4659      	mov	r1, fp
 8009382:	f7f6 ff45 	bl	8000210 <__aeabi_dsub>
 8009386:	ea4f 5328 	mov.w	r3, r8, asr #20
 800938a:	9305      	str	r3, [sp, #20]
 800938c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009390:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009394:	2b10      	cmp	r3, #16
 8009396:	dc02      	bgt.n	800939e <__ieee754_rem_pio2+0x1c6>
 8009398:	e9c4 0100 	strd	r0, r1, [r4]
 800939c:	e039      	b.n	8009412 <__ieee754_rem_pio2+0x23a>
 800939e:	a34c      	add	r3, pc, #304	@ (adr r3, 80094d0 <__ieee754_rem_pio2+0x2f8>)
 80093a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093a8:	f7f7 f8ea 	bl	8000580 <__aeabi_dmul>
 80093ac:	4606      	mov	r6, r0
 80093ae:	460f      	mov	r7, r1
 80093b0:	4602      	mov	r2, r0
 80093b2:	460b      	mov	r3, r1
 80093b4:	4650      	mov	r0, sl
 80093b6:	4659      	mov	r1, fp
 80093b8:	f7f6 ff2a 	bl	8000210 <__aeabi_dsub>
 80093bc:	4602      	mov	r2, r0
 80093be:	460b      	mov	r3, r1
 80093c0:	4680      	mov	r8, r0
 80093c2:	4689      	mov	r9, r1
 80093c4:	4650      	mov	r0, sl
 80093c6:	4659      	mov	r1, fp
 80093c8:	f7f6 ff22 	bl	8000210 <__aeabi_dsub>
 80093cc:	4632      	mov	r2, r6
 80093ce:	463b      	mov	r3, r7
 80093d0:	f7f6 ff1e 	bl	8000210 <__aeabi_dsub>
 80093d4:	a340      	add	r3, pc, #256	@ (adr r3, 80094d8 <__ieee754_rem_pio2+0x300>)
 80093d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093da:	4606      	mov	r6, r0
 80093dc:	460f      	mov	r7, r1
 80093de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093e2:	f7f7 f8cd 	bl	8000580 <__aeabi_dmul>
 80093e6:	4632      	mov	r2, r6
 80093e8:	463b      	mov	r3, r7
 80093ea:	f7f6 ff11 	bl	8000210 <__aeabi_dsub>
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	4606      	mov	r6, r0
 80093f4:	460f      	mov	r7, r1
 80093f6:	4640      	mov	r0, r8
 80093f8:	4649      	mov	r1, r9
 80093fa:	f7f6 ff09 	bl	8000210 <__aeabi_dsub>
 80093fe:	9a05      	ldr	r2, [sp, #20]
 8009400:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	2b31      	cmp	r3, #49	@ 0x31
 8009408:	dc20      	bgt.n	800944c <__ieee754_rem_pio2+0x274>
 800940a:	e9c4 0100 	strd	r0, r1, [r4]
 800940e:	46c2      	mov	sl, r8
 8009410:	46cb      	mov	fp, r9
 8009412:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009416:	4650      	mov	r0, sl
 8009418:	4642      	mov	r2, r8
 800941a:	464b      	mov	r3, r9
 800941c:	4659      	mov	r1, fp
 800941e:	f7f6 fef7 	bl	8000210 <__aeabi_dsub>
 8009422:	463b      	mov	r3, r7
 8009424:	4632      	mov	r2, r6
 8009426:	f7f6 fef3 	bl	8000210 <__aeabi_dsub>
 800942a:	9b04      	ldr	r3, [sp, #16]
 800942c:	2b00      	cmp	r3, #0
 800942e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009432:	f6bf af0e 	bge.w	8009252 <__ieee754_rem_pio2+0x7a>
 8009436:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800943a:	6063      	str	r3, [r4, #4]
 800943c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009440:	f8c4 8000 	str.w	r8, [r4]
 8009444:	60a0      	str	r0, [r4, #8]
 8009446:	60e3      	str	r3, [r4, #12]
 8009448:	426d      	negs	r5, r5
 800944a:	e702      	b.n	8009252 <__ieee754_rem_pio2+0x7a>
 800944c:	a326      	add	r3, pc, #152	@ (adr r3, 80094e8 <__ieee754_rem_pio2+0x310>)
 800944e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009456:	f7f7 f893 	bl	8000580 <__aeabi_dmul>
 800945a:	4606      	mov	r6, r0
 800945c:	460f      	mov	r7, r1
 800945e:	4602      	mov	r2, r0
 8009460:	460b      	mov	r3, r1
 8009462:	4640      	mov	r0, r8
 8009464:	4649      	mov	r1, r9
 8009466:	f7f6 fed3 	bl	8000210 <__aeabi_dsub>
 800946a:	4602      	mov	r2, r0
 800946c:	460b      	mov	r3, r1
 800946e:	4682      	mov	sl, r0
 8009470:	468b      	mov	fp, r1
 8009472:	4640      	mov	r0, r8
 8009474:	4649      	mov	r1, r9
 8009476:	f7f6 fecb 	bl	8000210 <__aeabi_dsub>
 800947a:	4632      	mov	r2, r6
 800947c:	463b      	mov	r3, r7
 800947e:	f7f6 fec7 	bl	8000210 <__aeabi_dsub>
 8009482:	a31b      	add	r3, pc, #108	@ (adr r3, 80094f0 <__ieee754_rem_pio2+0x318>)
 8009484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009488:	4606      	mov	r6, r0
 800948a:	460f      	mov	r7, r1
 800948c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009490:	f7f7 f876 	bl	8000580 <__aeabi_dmul>
 8009494:	4632      	mov	r2, r6
 8009496:	463b      	mov	r3, r7
 8009498:	f7f6 feba 	bl	8000210 <__aeabi_dsub>
 800949c:	4606      	mov	r6, r0
 800949e:	460f      	mov	r7, r1
 80094a0:	e764      	b.n	800936c <__ieee754_rem_pio2+0x194>
 80094a2:	4b1b      	ldr	r3, [pc, #108]	@ (8009510 <__ieee754_rem_pio2+0x338>)
 80094a4:	4598      	cmp	r8, r3
 80094a6:	d935      	bls.n	8009514 <__ieee754_rem_pio2+0x33c>
 80094a8:	4632      	mov	r2, r6
 80094aa:	463b      	mov	r3, r7
 80094ac:	4630      	mov	r0, r6
 80094ae:	4639      	mov	r1, r7
 80094b0:	f7f6 feae 	bl	8000210 <__aeabi_dsub>
 80094b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80094b8:	e9c4 0100 	strd	r0, r1, [r4]
 80094bc:	e69e      	b.n	80091fc <__ieee754_rem_pio2+0x24>
 80094be:	bf00      	nop
 80094c0:	54400000 	.word	0x54400000
 80094c4:	3ff921fb 	.word	0x3ff921fb
 80094c8:	1a626331 	.word	0x1a626331
 80094cc:	3dd0b461 	.word	0x3dd0b461
 80094d0:	1a600000 	.word	0x1a600000
 80094d4:	3dd0b461 	.word	0x3dd0b461
 80094d8:	2e037073 	.word	0x2e037073
 80094dc:	3ba3198a 	.word	0x3ba3198a
 80094e0:	6dc9c883 	.word	0x6dc9c883
 80094e4:	3fe45f30 	.word	0x3fe45f30
 80094e8:	2e000000 	.word	0x2e000000
 80094ec:	3ba3198a 	.word	0x3ba3198a
 80094f0:	252049c1 	.word	0x252049c1
 80094f4:	397b839a 	.word	0x397b839a
 80094f8:	3fe921fb 	.word	0x3fe921fb
 80094fc:	4002d97b 	.word	0x4002d97b
 8009500:	3ff921fb 	.word	0x3ff921fb
 8009504:	413921fb 	.word	0x413921fb
 8009508:	3fe00000 	.word	0x3fe00000
 800950c:	0800a4f0 	.word	0x0800a4f0
 8009510:	7fefffff 	.word	0x7fefffff
 8009514:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009518:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800951c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009520:	4630      	mov	r0, r6
 8009522:	460f      	mov	r7, r1
 8009524:	f7f7 fadc 	bl	8000ae0 <__aeabi_d2iz>
 8009528:	f7f6 ffc0 	bl	80004ac <__aeabi_i2d>
 800952c:	4602      	mov	r2, r0
 800952e:	460b      	mov	r3, r1
 8009530:	4630      	mov	r0, r6
 8009532:	4639      	mov	r1, r7
 8009534:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009538:	f7f6 fe6a 	bl	8000210 <__aeabi_dsub>
 800953c:	4b22      	ldr	r3, [pc, #136]	@ (80095c8 <__ieee754_rem_pio2+0x3f0>)
 800953e:	2200      	movs	r2, #0
 8009540:	f7f7 f81e 	bl	8000580 <__aeabi_dmul>
 8009544:	460f      	mov	r7, r1
 8009546:	4606      	mov	r6, r0
 8009548:	f7f7 faca 	bl	8000ae0 <__aeabi_d2iz>
 800954c:	f7f6 ffae 	bl	80004ac <__aeabi_i2d>
 8009550:	4602      	mov	r2, r0
 8009552:	460b      	mov	r3, r1
 8009554:	4630      	mov	r0, r6
 8009556:	4639      	mov	r1, r7
 8009558:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800955c:	f7f6 fe58 	bl	8000210 <__aeabi_dsub>
 8009560:	4b19      	ldr	r3, [pc, #100]	@ (80095c8 <__ieee754_rem_pio2+0x3f0>)
 8009562:	2200      	movs	r2, #0
 8009564:	f7f7 f80c 	bl	8000580 <__aeabi_dmul>
 8009568:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800956c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009570:	f04f 0803 	mov.w	r8, #3
 8009574:	2600      	movs	r6, #0
 8009576:	2700      	movs	r7, #0
 8009578:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800957c:	4632      	mov	r2, r6
 800957e:	463b      	mov	r3, r7
 8009580:	46c2      	mov	sl, r8
 8009582:	f108 38ff 	add.w	r8, r8, #4294967295
 8009586:	f7f7 fa63 	bl	8000a50 <__aeabi_dcmpeq>
 800958a:	2800      	cmp	r0, #0
 800958c:	d1f4      	bne.n	8009578 <__ieee754_rem_pio2+0x3a0>
 800958e:	4b0f      	ldr	r3, [pc, #60]	@ (80095cc <__ieee754_rem_pio2+0x3f4>)
 8009590:	9301      	str	r3, [sp, #4]
 8009592:	2302      	movs	r3, #2
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	462a      	mov	r2, r5
 8009598:	4653      	mov	r3, sl
 800959a:	4621      	mov	r1, r4
 800959c:	a806      	add	r0, sp, #24
 800959e:	f000 fb4f 	bl	8009c40 <__kernel_rem_pio2>
 80095a2:	9b04      	ldr	r3, [sp, #16]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	4605      	mov	r5, r0
 80095a8:	f6bf ae53 	bge.w	8009252 <__ieee754_rem_pio2+0x7a>
 80095ac:	e9d4 2100 	ldrd	r2, r1, [r4]
 80095b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80095b4:	e9c4 2300 	strd	r2, r3, [r4]
 80095b8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80095bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80095c0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80095c4:	e740      	b.n	8009448 <__ieee754_rem_pio2+0x270>
 80095c6:	bf00      	nop
 80095c8:	41700000 	.word	0x41700000
 80095cc:	0800a570 	.word	0x0800a570

080095d0 <atan>:
 80095d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d4:	ec55 4b10 	vmov	r4, r5, d0
 80095d8:	4bbf      	ldr	r3, [pc, #764]	@ (80098d8 <atan+0x308>)
 80095da:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80095de:	429e      	cmp	r6, r3
 80095e0:	46ab      	mov	fp, r5
 80095e2:	d918      	bls.n	8009616 <atan+0x46>
 80095e4:	4bbd      	ldr	r3, [pc, #756]	@ (80098dc <atan+0x30c>)
 80095e6:	429e      	cmp	r6, r3
 80095e8:	d801      	bhi.n	80095ee <atan+0x1e>
 80095ea:	d109      	bne.n	8009600 <atan+0x30>
 80095ec:	b144      	cbz	r4, 8009600 <atan+0x30>
 80095ee:	4622      	mov	r2, r4
 80095f0:	462b      	mov	r3, r5
 80095f2:	4620      	mov	r0, r4
 80095f4:	4629      	mov	r1, r5
 80095f6:	f7f6 fe0d 	bl	8000214 <__adddf3>
 80095fa:	4604      	mov	r4, r0
 80095fc:	460d      	mov	r5, r1
 80095fe:	e006      	b.n	800960e <atan+0x3e>
 8009600:	f1bb 0f00 	cmp.w	fp, #0
 8009604:	f340 812b 	ble.w	800985e <atan+0x28e>
 8009608:	a597      	add	r5, pc, #604	@ (adr r5, 8009868 <atan+0x298>)
 800960a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800960e:	ec45 4b10 	vmov	d0, r4, r5
 8009612:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009616:	4bb2      	ldr	r3, [pc, #712]	@ (80098e0 <atan+0x310>)
 8009618:	429e      	cmp	r6, r3
 800961a:	d813      	bhi.n	8009644 <atan+0x74>
 800961c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8009620:	429e      	cmp	r6, r3
 8009622:	d80c      	bhi.n	800963e <atan+0x6e>
 8009624:	a392      	add	r3, pc, #584	@ (adr r3, 8009870 <atan+0x2a0>)
 8009626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962a:	4620      	mov	r0, r4
 800962c:	4629      	mov	r1, r5
 800962e:	f7f6 fdf1 	bl	8000214 <__adddf3>
 8009632:	4bac      	ldr	r3, [pc, #688]	@ (80098e4 <atan+0x314>)
 8009634:	2200      	movs	r2, #0
 8009636:	f7f7 fa33 	bl	8000aa0 <__aeabi_dcmpgt>
 800963a:	2800      	cmp	r0, #0
 800963c:	d1e7      	bne.n	800960e <atan+0x3e>
 800963e:	f04f 3aff 	mov.w	sl, #4294967295
 8009642:	e029      	b.n	8009698 <atan+0xc8>
 8009644:	f000 f95c 	bl	8009900 <fabs>
 8009648:	4ba7      	ldr	r3, [pc, #668]	@ (80098e8 <atan+0x318>)
 800964a:	429e      	cmp	r6, r3
 800964c:	ec55 4b10 	vmov	r4, r5, d0
 8009650:	f200 80bc 	bhi.w	80097cc <atan+0x1fc>
 8009654:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8009658:	429e      	cmp	r6, r3
 800965a:	f200 809e 	bhi.w	800979a <atan+0x1ca>
 800965e:	4622      	mov	r2, r4
 8009660:	462b      	mov	r3, r5
 8009662:	4620      	mov	r0, r4
 8009664:	4629      	mov	r1, r5
 8009666:	f7f6 fdd5 	bl	8000214 <__adddf3>
 800966a:	4b9e      	ldr	r3, [pc, #632]	@ (80098e4 <atan+0x314>)
 800966c:	2200      	movs	r2, #0
 800966e:	f7f6 fdcf 	bl	8000210 <__aeabi_dsub>
 8009672:	2200      	movs	r2, #0
 8009674:	4606      	mov	r6, r0
 8009676:	460f      	mov	r7, r1
 8009678:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800967c:	4620      	mov	r0, r4
 800967e:	4629      	mov	r1, r5
 8009680:	f7f6 fdc8 	bl	8000214 <__adddf3>
 8009684:	4602      	mov	r2, r0
 8009686:	460b      	mov	r3, r1
 8009688:	4630      	mov	r0, r6
 800968a:	4639      	mov	r1, r7
 800968c:	f7f7 f8a2 	bl	80007d4 <__aeabi_ddiv>
 8009690:	f04f 0a00 	mov.w	sl, #0
 8009694:	4604      	mov	r4, r0
 8009696:	460d      	mov	r5, r1
 8009698:	4622      	mov	r2, r4
 800969a:	462b      	mov	r3, r5
 800969c:	4620      	mov	r0, r4
 800969e:	4629      	mov	r1, r5
 80096a0:	f7f6 ff6e 	bl	8000580 <__aeabi_dmul>
 80096a4:	4602      	mov	r2, r0
 80096a6:	460b      	mov	r3, r1
 80096a8:	4680      	mov	r8, r0
 80096aa:	4689      	mov	r9, r1
 80096ac:	f7f6 ff68 	bl	8000580 <__aeabi_dmul>
 80096b0:	a371      	add	r3, pc, #452	@ (adr r3, 8009878 <atan+0x2a8>)
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b6:	4606      	mov	r6, r0
 80096b8:	460f      	mov	r7, r1
 80096ba:	f7f6 ff61 	bl	8000580 <__aeabi_dmul>
 80096be:	a370      	add	r3, pc, #448	@ (adr r3, 8009880 <atan+0x2b0>)
 80096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c4:	f7f6 fda6 	bl	8000214 <__adddf3>
 80096c8:	4632      	mov	r2, r6
 80096ca:	463b      	mov	r3, r7
 80096cc:	f7f6 ff58 	bl	8000580 <__aeabi_dmul>
 80096d0:	a36d      	add	r3, pc, #436	@ (adr r3, 8009888 <atan+0x2b8>)
 80096d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d6:	f7f6 fd9d 	bl	8000214 <__adddf3>
 80096da:	4632      	mov	r2, r6
 80096dc:	463b      	mov	r3, r7
 80096de:	f7f6 ff4f 	bl	8000580 <__aeabi_dmul>
 80096e2:	a36b      	add	r3, pc, #428	@ (adr r3, 8009890 <atan+0x2c0>)
 80096e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e8:	f7f6 fd94 	bl	8000214 <__adddf3>
 80096ec:	4632      	mov	r2, r6
 80096ee:	463b      	mov	r3, r7
 80096f0:	f7f6 ff46 	bl	8000580 <__aeabi_dmul>
 80096f4:	a368      	add	r3, pc, #416	@ (adr r3, 8009898 <atan+0x2c8>)
 80096f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fa:	f7f6 fd8b 	bl	8000214 <__adddf3>
 80096fe:	4632      	mov	r2, r6
 8009700:	463b      	mov	r3, r7
 8009702:	f7f6 ff3d 	bl	8000580 <__aeabi_dmul>
 8009706:	a366      	add	r3, pc, #408	@ (adr r3, 80098a0 <atan+0x2d0>)
 8009708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970c:	f7f6 fd82 	bl	8000214 <__adddf3>
 8009710:	4642      	mov	r2, r8
 8009712:	464b      	mov	r3, r9
 8009714:	f7f6 ff34 	bl	8000580 <__aeabi_dmul>
 8009718:	a363      	add	r3, pc, #396	@ (adr r3, 80098a8 <atan+0x2d8>)
 800971a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971e:	4680      	mov	r8, r0
 8009720:	4689      	mov	r9, r1
 8009722:	4630      	mov	r0, r6
 8009724:	4639      	mov	r1, r7
 8009726:	f7f6 ff2b 	bl	8000580 <__aeabi_dmul>
 800972a:	a361      	add	r3, pc, #388	@ (adr r3, 80098b0 <atan+0x2e0>)
 800972c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009730:	f7f6 fd6e 	bl	8000210 <__aeabi_dsub>
 8009734:	4632      	mov	r2, r6
 8009736:	463b      	mov	r3, r7
 8009738:	f7f6 ff22 	bl	8000580 <__aeabi_dmul>
 800973c:	a35e      	add	r3, pc, #376	@ (adr r3, 80098b8 <atan+0x2e8>)
 800973e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009742:	f7f6 fd65 	bl	8000210 <__aeabi_dsub>
 8009746:	4632      	mov	r2, r6
 8009748:	463b      	mov	r3, r7
 800974a:	f7f6 ff19 	bl	8000580 <__aeabi_dmul>
 800974e:	a35c      	add	r3, pc, #368	@ (adr r3, 80098c0 <atan+0x2f0>)
 8009750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009754:	f7f6 fd5c 	bl	8000210 <__aeabi_dsub>
 8009758:	4632      	mov	r2, r6
 800975a:	463b      	mov	r3, r7
 800975c:	f7f6 ff10 	bl	8000580 <__aeabi_dmul>
 8009760:	a359      	add	r3, pc, #356	@ (adr r3, 80098c8 <atan+0x2f8>)
 8009762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009766:	f7f6 fd53 	bl	8000210 <__aeabi_dsub>
 800976a:	4632      	mov	r2, r6
 800976c:	463b      	mov	r3, r7
 800976e:	f7f6 ff07 	bl	8000580 <__aeabi_dmul>
 8009772:	4602      	mov	r2, r0
 8009774:	460b      	mov	r3, r1
 8009776:	4640      	mov	r0, r8
 8009778:	4649      	mov	r1, r9
 800977a:	f7f6 fd4b 	bl	8000214 <__adddf3>
 800977e:	4622      	mov	r2, r4
 8009780:	462b      	mov	r3, r5
 8009782:	f7f6 fefd 	bl	8000580 <__aeabi_dmul>
 8009786:	f1ba 3fff 	cmp.w	sl, #4294967295
 800978a:	4602      	mov	r2, r0
 800978c:	460b      	mov	r3, r1
 800978e:	d148      	bne.n	8009822 <atan+0x252>
 8009790:	4620      	mov	r0, r4
 8009792:	4629      	mov	r1, r5
 8009794:	f7f6 fd3c 	bl	8000210 <__aeabi_dsub>
 8009798:	e72f      	b.n	80095fa <atan+0x2a>
 800979a:	4b52      	ldr	r3, [pc, #328]	@ (80098e4 <atan+0x314>)
 800979c:	2200      	movs	r2, #0
 800979e:	4620      	mov	r0, r4
 80097a0:	4629      	mov	r1, r5
 80097a2:	f7f6 fd35 	bl	8000210 <__aeabi_dsub>
 80097a6:	4b4f      	ldr	r3, [pc, #316]	@ (80098e4 <atan+0x314>)
 80097a8:	4606      	mov	r6, r0
 80097aa:	460f      	mov	r7, r1
 80097ac:	2200      	movs	r2, #0
 80097ae:	4620      	mov	r0, r4
 80097b0:	4629      	mov	r1, r5
 80097b2:	f7f6 fd2f 	bl	8000214 <__adddf3>
 80097b6:	4602      	mov	r2, r0
 80097b8:	460b      	mov	r3, r1
 80097ba:	4630      	mov	r0, r6
 80097bc:	4639      	mov	r1, r7
 80097be:	f7f7 f809 	bl	80007d4 <__aeabi_ddiv>
 80097c2:	f04f 0a01 	mov.w	sl, #1
 80097c6:	4604      	mov	r4, r0
 80097c8:	460d      	mov	r5, r1
 80097ca:	e765      	b.n	8009698 <atan+0xc8>
 80097cc:	4b47      	ldr	r3, [pc, #284]	@ (80098ec <atan+0x31c>)
 80097ce:	429e      	cmp	r6, r3
 80097d0:	d21c      	bcs.n	800980c <atan+0x23c>
 80097d2:	4b47      	ldr	r3, [pc, #284]	@ (80098f0 <atan+0x320>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	4620      	mov	r0, r4
 80097d8:	4629      	mov	r1, r5
 80097da:	f7f6 fd19 	bl	8000210 <__aeabi_dsub>
 80097de:	4b44      	ldr	r3, [pc, #272]	@ (80098f0 <atan+0x320>)
 80097e0:	4606      	mov	r6, r0
 80097e2:	460f      	mov	r7, r1
 80097e4:	2200      	movs	r2, #0
 80097e6:	4620      	mov	r0, r4
 80097e8:	4629      	mov	r1, r5
 80097ea:	f7f6 fec9 	bl	8000580 <__aeabi_dmul>
 80097ee:	4b3d      	ldr	r3, [pc, #244]	@ (80098e4 <atan+0x314>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	f7f6 fd0f 	bl	8000214 <__adddf3>
 80097f6:	4602      	mov	r2, r0
 80097f8:	460b      	mov	r3, r1
 80097fa:	4630      	mov	r0, r6
 80097fc:	4639      	mov	r1, r7
 80097fe:	f7f6 ffe9 	bl	80007d4 <__aeabi_ddiv>
 8009802:	f04f 0a02 	mov.w	sl, #2
 8009806:	4604      	mov	r4, r0
 8009808:	460d      	mov	r5, r1
 800980a:	e745      	b.n	8009698 <atan+0xc8>
 800980c:	4622      	mov	r2, r4
 800980e:	462b      	mov	r3, r5
 8009810:	4938      	ldr	r1, [pc, #224]	@ (80098f4 <atan+0x324>)
 8009812:	2000      	movs	r0, #0
 8009814:	f7f6 ffde 	bl	80007d4 <__aeabi_ddiv>
 8009818:	f04f 0a03 	mov.w	sl, #3
 800981c:	4604      	mov	r4, r0
 800981e:	460d      	mov	r5, r1
 8009820:	e73a      	b.n	8009698 <atan+0xc8>
 8009822:	4b35      	ldr	r3, [pc, #212]	@ (80098f8 <atan+0x328>)
 8009824:	4e35      	ldr	r6, [pc, #212]	@ (80098fc <atan+0x32c>)
 8009826:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800982a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982e:	f7f6 fcef 	bl	8000210 <__aeabi_dsub>
 8009832:	4622      	mov	r2, r4
 8009834:	462b      	mov	r3, r5
 8009836:	f7f6 fceb 	bl	8000210 <__aeabi_dsub>
 800983a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800983e:	4602      	mov	r2, r0
 8009840:	460b      	mov	r3, r1
 8009842:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009846:	f7f6 fce3 	bl	8000210 <__aeabi_dsub>
 800984a:	f1bb 0f00 	cmp.w	fp, #0
 800984e:	4604      	mov	r4, r0
 8009850:	460d      	mov	r5, r1
 8009852:	f6bf aedc 	bge.w	800960e <atan+0x3e>
 8009856:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800985a:	461d      	mov	r5, r3
 800985c:	e6d7      	b.n	800960e <atan+0x3e>
 800985e:	a51c      	add	r5, pc, #112	@ (adr r5, 80098d0 <atan+0x300>)
 8009860:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009864:	e6d3      	b.n	800960e <atan+0x3e>
 8009866:	bf00      	nop
 8009868:	54442d18 	.word	0x54442d18
 800986c:	3ff921fb 	.word	0x3ff921fb
 8009870:	8800759c 	.word	0x8800759c
 8009874:	7e37e43c 	.word	0x7e37e43c
 8009878:	e322da11 	.word	0xe322da11
 800987c:	3f90ad3a 	.word	0x3f90ad3a
 8009880:	24760deb 	.word	0x24760deb
 8009884:	3fa97b4b 	.word	0x3fa97b4b
 8009888:	a0d03d51 	.word	0xa0d03d51
 800988c:	3fb10d66 	.word	0x3fb10d66
 8009890:	c54c206e 	.word	0xc54c206e
 8009894:	3fb745cd 	.word	0x3fb745cd
 8009898:	920083ff 	.word	0x920083ff
 800989c:	3fc24924 	.word	0x3fc24924
 80098a0:	5555550d 	.word	0x5555550d
 80098a4:	3fd55555 	.word	0x3fd55555
 80098a8:	2c6a6c2f 	.word	0x2c6a6c2f
 80098ac:	bfa2b444 	.word	0xbfa2b444
 80098b0:	52defd9a 	.word	0x52defd9a
 80098b4:	3fadde2d 	.word	0x3fadde2d
 80098b8:	af749a6d 	.word	0xaf749a6d
 80098bc:	3fb3b0f2 	.word	0x3fb3b0f2
 80098c0:	fe231671 	.word	0xfe231671
 80098c4:	3fbc71c6 	.word	0x3fbc71c6
 80098c8:	9998ebc4 	.word	0x9998ebc4
 80098cc:	3fc99999 	.word	0x3fc99999
 80098d0:	54442d18 	.word	0x54442d18
 80098d4:	bff921fb 	.word	0xbff921fb
 80098d8:	440fffff 	.word	0x440fffff
 80098dc:	7ff00000 	.word	0x7ff00000
 80098e0:	3fdbffff 	.word	0x3fdbffff
 80098e4:	3ff00000 	.word	0x3ff00000
 80098e8:	3ff2ffff 	.word	0x3ff2ffff
 80098ec:	40038000 	.word	0x40038000
 80098f0:	3ff80000 	.word	0x3ff80000
 80098f4:	bff00000 	.word	0xbff00000
 80098f8:	0800a678 	.word	0x0800a678
 80098fc:	0800a698 	.word	0x0800a698

08009900 <fabs>:
 8009900:	ec51 0b10 	vmov	r0, r1, d0
 8009904:	4602      	mov	r2, r0
 8009906:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800990a:	ec43 2b10 	vmov	d0, r2, r3
 800990e:	4770      	bx	lr

08009910 <scalbn>:
 8009910:	b570      	push	{r4, r5, r6, lr}
 8009912:	ec55 4b10 	vmov	r4, r5, d0
 8009916:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800991a:	4606      	mov	r6, r0
 800991c:	462b      	mov	r3, r5
 800991e:	b991      	cbnz	r1, 8009946 <scalbn+0x36>
 8009920:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009924:	4323      	orrs	r3, r4
 8009926:	d03d      	beq.n	80099a4 <scalbn+0x94>
 8009928:	4b35      	ldr	r3, [pc, #212]	@ (8009a00 <scalbn+0xf0>)
 800992a:	4620      	mov	r0, r4
 800992c:	4629      	mov	r1, r5
 800992e:	2200      	movs	r2, #0
 8009930:	f7f6 fe26 	bl	8000580 <__aeabi_dmul>
 8009934:	4b33      	ldr	r3, [pc, #204]	@ (8009a04 <scalbn+0xf4>)
 8009936:	429e      	cmp	r6, r3
 8009938:	4604      	mov	r4, r0
 800993a:	460d      	mov	r5, r1
 800993c:	da0f      	bge.n	800995e <scalbn+0x4e>
 800993e:	a328      	add	r3, pc, #160	@ (adr r3, 80099e0 <scalbn+0xd0>)
 8009940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009944:	e01e      	b.n	8009984 <scalbn+0x74>
 8009946:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800994a:	4291      	cmp	r1, r2
 800994c:	d10b      	bne.n	8009966 <scalbn+0x56>
 800994e:	4622      	mov	r2, r4
 8009950:	4620      	mov	r0, r4
 8009952:	4629      	mov	r1, r5
 8009954:	f7f6 fc5e 	bl	8000214 <__adddf3>
 8009958:	4604      	mov	r4, r0
 800995a:	460d      	mov	r5, r1
 800995c:	e022      	b.n	80099a4 <scalbn+0x94>
 800995e:	460b      	mov	r3, r1
 8009960:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009964:	3936      	subs	r1, #54	@ 0x36
 8009966:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800996a:	4296      	cmp	r6, r2
 800996c:	dd0d      	ble.n	800998a <scalbn+0x7a>
 800996e:	2d00      	cmp	r5, #0
 8009970:	a11d      	add	r1, pc, #116	@ (adr r1, 80099e8 <scalbn+0xd8>)
 8009972:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009976:	da02      	bge.n	800997e <scalbn+0x6e>
 8009978:	a11d      	add	r1, pc, #116	@ (adr r1, 80099f0 <scalbn+0xe0>)
 800997a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800997e:	a31a      	add	r3, pc, #104	@ (adr r3, 80099e8 <scalbn+0xd8>)
 8009980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009984:	f7f6 fdfc 	bl	8000580 <__aeabi_dmul>
 8009988:	e7e6      	b.n	8009958 <scalbn+0x48>
 800998a:	1872      	adds	r2, r6, r1
 800998c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009990:	428a      	cmp	r2, r1
 8009992:	dcec      	bgt.n	800996e <scalbn+0x5e>
 8009994:	2a00      	cmp	r2, #0
 8009996:	dd08      	ble.n	80099aa <scalbn+0x9a>
 8009998:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800999c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80099a0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80099a4:	ec45 4b10 	vmov	d0, r4, r5
 80099a8:	bd70      	pop	{r4, r5, r6, pc}
 80099aa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80099ae:	da08      	bge.n	80099c2 <scalbn+0xb2>
 80099b0:	2d00      	cmp	r5, #0
 80099b2:	a10b      	add	r1, pc, #44	@ (adr r1, 80099e0 <scalbn+0xd0>)
 80099b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099b8:	dac1      	bge.n	800993e <scalbn+0x2e>
 80099ba:	a10f      	add	r1, pc, #60	@ (adr r1, 80099f8 <scalbn+0xe8>)
 80099bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099c0:	e7bd      	b.n	800993e <scalbn+0x2e>
 80099c2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80099c6:	3236      	adds	r2, #54	@ 0x36
 80099c8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80099cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80099d0:	4620      	mov	r0, r4
 80099d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009a08 <scalbn+0xf8>)
 80099d4:	4629      	mov	r1, r5
 80099d6:	2200      	movs	r2, #0
 80099d8:	e7d4      	b.n	8009984 <scalbn+0x74>
 80099da:	bf00      	nop
 80099dc:	f3af 8000 	nop.w
 80099e0:	c2f8f359 	.word	0xc2f8f359
 80099e4:	01a56e1f 	.word	0x01a56e1f
 80099e8:	8800759c 	.word	0x8800759c
 80099ec:	7e37e43c 	.word	0x7e37e43c
 80099f0:	8800759c 	.word	0x8800759c
 80099f4:	fe37e43c 	.word	0xfe37e43c
 80099f8:	c2f8f359 	.word	0xc2f8f359
 80099fc:	81a56e1f 	.word	0x81a56e1f
 8009a00:	43500000 	.word	0x43500000
 8009a04:	ffff3cb0 	.word	0xffff3cb0
 8009a08:	3c900000 	.word	0x3c900000

08009a0c <with_errno>:
 8009a0c:	b510      	push	{r4, lr}
 8009a0e:	ed2d 8b02 	vpush	{d8}
 8009a12:	eeb0 8a40 	vmov.f32	s16, s0
 8009a16:	eef0 8a60 	vmov.f32	s17, s1
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	f000 fcec 	bl	800a3f8 <__errno>
 8009a20:	eeb0 0a48 	vmov.f32	s0, s16
 8009a24:	eef0 0a68 	vmov.f32	s1, s17
 8009a28:	ecbd 8b02 	vpop	{d8}
 8009a2c:	6004      	str	r4, [r0, #0]
 8009a2e:	bd10      	pop	{r4, pc}

08009a30 <xflow>:
 8009a30:	4603      	mov	r3, r0
 8009a32:	b507      	push	{r0, r1, r2, lr}
 8009a34:	ec51 0b10 	vmov	r0, r1, d0
 8009a38:	b183      	cbz	r3, 8009a5c <xflow+0x2c>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009a40:	e9cd 2300 	strd	r2, r3, [sp]
 8009a44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a48:	f7f6 fd9a 	bl	8000580 <__aeabi_dmul>
 8009a4c:	ec41 0b10 	vmov	d0, r0, r1
 8009a50:	2022      	movs	r0, #34	@ 0x22
 8009a52:	b003      	add	sp, #12
 8009a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a58:	f7ff bfd8 	b.w	8009a0c <with_errno>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	e7ee      	b.n	8009a40 <xflow+0x10>
 8009a62:	0000      	movs	r0, r0
 8009a64:	0000      	movs	r0, r0
	...

08009a68 <__math_uflow>:
 8009a68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009a70 <__math_uflow+0x8>
 8009a6c:	f7ff bfe0 	b.w	8009a30 <xflow>
 8009a70:	00000000 	.word	0x00000000
 8009a74:	10000000 	.word	0x10000000

08009a78 <__math_oflow>:
 8009a78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009a80 <__math_oflow+0x8>
 8009a7c:	f7ff bfd8 	b.w	8009a30 <xflow>
 8009a80:	00000000 	.word	0x00000000
 8009a84:	70000000 	.word	0x70000000

08009a88 <__ieee754_sqrt>:
 8009a88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a8c:	4a68      	ldr	r2, [pc, #416]	@ (8009c30 <__ieee754_sqrt+0x1a8>)
 8009a8e:	ec55 4b10 	vmov	r4, r5, d0
 8009a92:	43aa      	bics	r2, r5
 8009a94:	462b      	mov	r3, r5
 8009a96:	4621      	mov	r1, r4
 8009a98:	d110      	bne.n	8009abc <__ieee754_sqrt+0x34>
 8009a9a:	4622      	mov	r2, r4
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	4629      	mov	r1, r5
 8009aa0:	f7f6 fd6e 	bl	8000580 <__aeabi_dmul>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	4629      	mov	r1, r5
 8009aac:	f7f6 fbb2 	bl	8000214 <__adddf3>
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	460d      	mov	r5, r1
 8009ab4:	ec45 4b10 	vmov	d0, r4, r5
 8009ab8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009abc:	2d00      	cmp	r5, #0
 8009abe:	dc0e      	bgt.n	8009ade <__ieee754_sqrt+0x56>
 8009ac0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009ac4:	4322      	orrs	r2, r4
 8009ac6:	d0f5      	beq.n	8009ab4 <__ieee754_sqrt+0x2c>
 8009ac8:	b19d      	cbz	r5, 8009af2 <__ieee754_sqrt+0x6a>
 8009aca:	4622      	mov	r2, r4
 8009acc:	4620      	mov	r0, r4
 8009ace:	4629      	mov	r1, r5
 8009ad0:	f7f6 fb9e 	bl	8000210 <__aeabi_dsub>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	f7f6 fe7c 	bl	80007d4 <__aeabi_ddiv>
 8009adc:	e7e8      	b.n	8009ab0 <__ieee754_sqrt+0x28>
 8009ade:	152a      	asrs	r2, r5, #20
 8009ae0:	d115      	bne.n	8009b0e <__ieee754_sqrt+0x86>
 8009ae2:	2000      	movs	r0, #0
 8009ae4:	e009      	b.n	8009afa <__ieee754_sqrt+0x72>
 8009ae6:	0acb      	lsrs	r3, r1, #11
 8009ae8:	3a15      	subs	r2, #21
 8009aea:	0549      	lsls	r1, r1, #21
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d0fa      	beq.n	8009ae6 <__ieee754_sqrt+0x5e>
 8009af0:	e7f7      	b.n	8009ae2 <__ieee754_sqrt+0x5a>
 8009af2:	462a      	mov	r2, r5
 8009af4:	e7fa      	b.n	8009aec <__ieee754_sqrt+0x64>
 8009af6:	005b      	lsls	r3, r3, #1
 8009af8:	3001      	adds	r0, #1
 8009afa:	02dc      	lsls	r4, r3, #11
 8009afc:	d5fb      	bpl.n	8009af6 <__ieee754_sqrt+0x6e>
 8009afe:	1e44      	subs	r4, r0, #1
 8009b00:	1b12      	subs	r2, r2, r4
 8009b02:	f1c0 0420 	rsb	r4, r0, #32
 8009b06:	fa21 f404 	lsr.w	r4, r1, r4
 8009b0a:	4323      	orrs	r3, r4
 8009b0c:	4081      	lsls	r1, r0
 8009b0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b12:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009b16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b1a:	07d2      	lsls	r2, r2, #31
 8009b1c:	bf5c      	itt	pl
 8009b1e:	005b      	lslpl	r3, r3, #1
 8009b20:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009b28:	bf58      	it	pl
 8009b2a:	0049      	lslpl	r1, r1, #1
 8009b2c:	2600      	movs	r6, #0
 8009b2e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009b32:	106d      	asrs	r5, r5, #1
 8009b34:	0049      	lsls	r1, r1, #1
 8009b36:	2016      	movs	r0, #22
 8009b38:	4632      	mov	r2, r6
 8009b3a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009b3e:	1917      	adds	r7, r2, r4
 8009b40:	429f      	cmp	r7, r3
 8009b42:	bfde      	ittt	le
 8009b44:	193a      	addle	r2, r7, r4
 8009b46:	1bdb      	suble	r3, r3, r7
 8009b48:	1936      	addle	r6, r6, r4
 8009b4a:	0fcf      	lsrs	r7, r1, #31
 8009b4c:	3801      	subs	r0, #1
 8009b4e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009b52:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009b56:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009b5a:	d1f0      	bne.n	8009b3e <__ieee754_sqrt+0xb6>
 8009b5c:	4604      	mov	r4, r0
 8009b5e:	2720      	movs	r7, #32
 8009b60:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009b64:	429a      	cmp	r2, r3
 8009b66:	eb00 0e0c 	add.w	lr, r0, ip
 8009b6a:	db02      	blt.n	8009b72 <__ieee754_sqrt+0xea>
 8009b6c:	d113      	bne.n	8009b96 <__ieee754_sqrt+0x10e>
 8009b6e:	458e      	cmp	lr, r1
 8009b70:	d811      	bhi.n	8009b96 <__ieee754_sqrt+0x10e>
 8009b72:	f1be 0f00 	cmp.w	lr, #0
 8009b76:	eb0e 000c 	add.w	r0, lr, ip
 8009b7a:	da42      	bge.n	8009c02 <__ieee754_sqrt+0x17a>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	db40      	blt.n	8009c02 <__ieee754_sqrt+0x17a>
 8009b80:	f102 0801 	add.w	r8, r2, #1
 8009b84:	1a9b      	subs	r3, r3, r2
 8009b86:	458e      	cmp	lr, r1
 8009b88:	bf88      	it	hi
 8009b8a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009b8e:	eba1 010e 	sub.w	r1, r1, lr
 8009b92:	4464      	add	r4, ip
 8009b94:	4642      	mov	r2, r8
 8009b96:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009b9a:	3f01      	subs	r7, #1
 8009b9c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009ba0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009ba4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009ba8:	d1dc      	bne.n	8009b64 <__ieee754_sqrt+0xdc>
 8009baa:	4319      	orrs	r1, r3
 8009bac:	d01b      	beq.n	8009be6 <__ieee754_sqrt+0x15e>
 8009bae:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009c34 <__ieee754_sqrt+0x1ac>
 8009bb2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009c38 <__ieee754_sqrt+0x1b0>
 8009bb6:	e9da 0100 	ldrd	r0, r1, [sl]
 8009bba:	e9db 2300 	ldrd	r2, r3, [fp]
 8009bbe:	f7f6 fb27 	bl	8000210 <__aeabi_dsub>
 8009bc2:	e9da 8900 	ldrd	r8, r9, [sl]
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	460b      	mov	r3, r1
 8009bca:	4640      	mov	r0, r8
 8009bcc:	4649      	mov	r1, r9
 8009bce:	f7f6 ff53 	bl	8000a78 <__aeabi_dcmple>
 8009bd2:	b140      	cbz	r0, 8009be6 <__ieee754_sqrt+0x15e>
 8009bd4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009bd8:	e9da 0100 	ldrd	r0, r1, [sl]
 8009bdc:	e9db 2300 	ldrd	r2, r3, [fp]
 8009be0:	d111      	bne.n	8009c06 <__ieee754_sqrt+0x17e>
 8009be2:	3601      	adds	r6, #1
 8009be4:	463c      	mov	r4, r7
 8009be6:	1072      	asrs	r2, r6, #1
 8009be8:	0863      	lsrs	r3, r4, #1
 8009bea:	07f1      	lsls	r1, r6, #31
 8009bec:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009bf0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009bf4:	bf48      	it	mi
 8009bf6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009bfa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8009bfe:	4618      	mov	r0, r3
 8009c00:	e756      	b.n	8009ab0 <__ieee754_sqrt+0x28>
 8009c02:	4690      	mov	r8, r2
 8009c04:	e7be      	b.n	8009b84 <__ieee754_sqrt+0xfc>
 8009c06:	f7f6 fb05 	bl	8000214 <__adddf3>
 8009c0a:	e9da 8900 	ldrd	r8, r9, [sl]
 8009c0e:	4602      	mov	r2, r0
 8009c10:	460b      	mov	r3, r1
 8009c12:	4640      	mov	r0, r8
 8009c14:	4649      	mov	r1, r9
 8009c16:	f7f6 ff25 	bl	8000a64 <__aeabi_dcmplt>
 8009c1a:	b120      	cbz	r0, 8009c26 <__ieee754_sqrt+0x19e>
 8009c1c:	1ca0      	adds	r0, r4, #2
 8009c1e:	bf08      	it	eq
 8009c20:	3601      	addeq	r6, #1
 8009c22:	3402      	adds	r4, #2
 8009c24:	e7df      	b.n	8009be6 <__ieee754_sqrt+0x15e>
 8009c26:	1c63      	adds	r3, r4, #1
 8009c28:	f023 0401 	bic.w	r4, r3, #1
 8009c2c:	e7db      	b.n	8009be6 <__ieee754_sqrt+0x15e>
 8009c2e:	bf00      	nop
 8009c30:	7ff00000 	.word	0x7ff00000
 8009c34:	20000078 	.word	0x20000078
 8009c38:	20000070 	.word	0x20000070
 8009c3c:	00000000 	.word	0x00000000

08009c40 <__kernel_rem_pio2>:
 8009c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c44:	ed2d 8b02 	vpush	{d8}
 8009c48:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8009c4c:	f112 0f14 	cmn.w	r2, #20
 8009c50:	9306      	str	r3, [sp, #24]
 8009c52:	9104      	str	r1, [sp, #16]
 8009c54:	4bbe      	ldr	r3, [pc, #760]	@ (8009f50 <__kernel_rem_pio2+0x310>)
 8009c56:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8009c58:	9008      	str	r0, [sp, #32]
 8009c5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	9b06      	ldr	r3, [sp, #24]
 8009c62:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c66:	bfa8      	it	ge
 8009c68:	1ed4      	subge	r4, r2, #3
 8009c6a:	9305      	str	r3, [sp, #20]
 8009c6c:	bfb2      	itee	lt
 8009c6e:	2400      	movlt	r4, #0
 8009c70:	2318      	movge	r3, #24
 8009c72:	fb94 f4f3 	sdivge	r4, r4, r3
 8009c76:	f06f 0317 	mvn.w	r3, #23
 8009c7a:	fb04 3303 	mla	r3, r4, r3, r3
 8009c7e:	eb03 0b02 	add.w	fp, r3, r2
 8009c82:	9b00      	ldr	r3, [sp, #0]
 8009c84:	9a05      	ldr	r2, [sp, #20]
 8009c86:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8009f40 <__kernel_rem_pio2+0x300>
 8009c8a:	eb03 0802 	add.w	r8, r3, r2
 8009c8e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009c90:	1aa7      	subs	r7, r4, r2
 8009c92:	ae20      	add	r6, sp, #128	@ 0x80
 8009c94:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009c98:	2500      	movs	r5, #0
 8009c9a:	4545      	cmp	r5, r8
 8009c9c:	dd13      	ble.n	8009cc6 <__kernel_rem_pio2+0x86>
 8009c9e:	9b06      	ldr	r3, [sp, #24]
 8009ca0:	aa20      	add	r2, sp, #128	@ 0x80
 8009ca2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009ca6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8009caa:	f04f 0800 	mov.w	r8, #0
 8009cae:	9b00      	ldr	r3, [sp, #0]
 8009cb0:	4598      	cmp	r8, r3
 8009cb2:	dc31      	bgt.n	8009d18 <__kernel_rem_pio2+0xd8>
 8009cb4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8009f40 <__kernel_rem_pio2+0x300>
 8009cb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009cbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009cc0:	462f      	mov	r7, r5
 8009cc2:	2600      	movs	r6, #0
 8009cc4:	e01b      	b.n	8009cfe <__kernel_rem_pio2+0xbe>
 8009cc6:	42ef      	cmn	r7, r5
 8009cc8:	d407      	bmi.n	8009cda <__kernel_rem_pio2+0x9a>
 8009cca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009cce:	f7f6 fbed 	bl	80004ac <__aeabi_i2d>
 8009cd2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009cd6:	3501      	adds	r5, #1
 8009cd8:	e7df      	b.n	8009c9a <__kernel_rem_pio2+0x5a>
 8009cda:	ec51 0b18 	vmov	r0, r1, d8
 8009cde:	e7f8      	b.n	8009cd2 <__kernel_rem_pio2+0x92>
 8009ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ce4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009ce8:	f7f6 fc4a 	bl	8000580 <__aeabi_dmul>
 8009cec:	4602      	mov	r2, r0
 8009cee:	460b      	mov	r3, r1
 8009cf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cf4:	f7f6 fa8e 	bl	8000214 <__adddf3>
 8009cf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cfc:	3601      	adds	r6, #1
 8009cfe:	9b05      	ldr	r3, [sp, #20]
 8009d00:	429e      	cmp	r6, r3
 8009d02:	f1a7 0708 	sub.w	r7, r7, #8
 8009d06:	ddeb      	ble.n	8009ce0 <__kernel_rem_pio2+0xa0>
 8009d08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d0c:	f108 0801 	add.w	r8, r8, #1
 8009d10:	ecaa 7b02 	vstmia	sl!, {d7}
 8009d14:	3508      	adds	r5, #8
 8009d16:	e7ca      	b.n	8009cae <__kernel_rem_pio2+0x6e>
 8009d18:	9b00      	ldr	r3, [sp, #0]
 8009d1a:	f8dd 8000 	ldr.w	r8, [sp]
 8009d1e:	aa0c      	add	r2, sp, #48	@ 0x30
 8009d20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d24:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d26:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009d28:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009d2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d2e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8009d32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d34:	ab98      	add	r3, sp, #608	@ 0x260
 8009d36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009d3a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8009d3e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009d42:	ac0c      	add	r4, sp, #48	@ 0x30
 8009d44:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009d46:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8009d4a:	46a1      	mov	r9, r4
 8009d4c:	46c2      	mov	sl, r8
 8009d4e:	f1ba 0f00 	cmp.w	sl, #0
 8009d52:	f1a5 0508 	sub.w	r5, r5, #8
 8009d56:	dc77      	bgt.n	8009e48 <__kernel_rem_pio2+0x208>
 8009d58:	4658      	mov	r0, fp
 8009d5a:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009d5e:	f7ff fdd7 	bl	8009910 <scalbn>
 8009d62:	ec57 6b10 	vmov	r6, r7, d0
 8009d66:	2200      	movs	r2, #0
 8009d68:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009d6c:	4630      	mov	r0, r6
 8009d6e:	4639      	mov	r1, r7
 8009d70:	f7f6 fc06 	bl	8000580 <__aeabi_dmul>
 8009d74:	ec41 0b10 	vmov	d0, r0, r1
 8009d78:	f000 faba 	bl	800a2f0 <floor>
 8009d7c:	4b75      	ldr	r3, [pc, #468]	@ (8009f54 <__kernel_rem_pio2+0x314>)
 8009d7e:	ec51 0b10 	vmov	r0, r1, d0
 8009d82:	2200      	movs	r2, #0
 8009d84:	f7f6 fbfc 	bl	8000580 <__aeabi_dmul>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	4639      	mov	r1, r7
 8009d90:	f7f6 fa3e 	bl	8000210 <__aeabi_dsub>
 8009d94:	460f      	mov	r7, r1
 8009d96:	4606      	mov	r6, r0
 8009d98:	f7f6 fea2 	bl	8000ae0 <__aeabi_d2iz>
 8009d9c:	9002      	str	r0, [sp, #8]
 8009d9e:	f7f6 fb85 	bl	80004ac <__aeabi_i2d>
 8009da2:	4602      	mov	r2, r0
 8009da4:	460b      	mov	r3, r1
 8009da6:	4630      	mov	r0, r6
 8009da8:	4639      	mov	r1, r7
 8009daa:	f7f6 fa31 	bl	8000210 <__aeabi_dsub>
 8009dae:	f1bb 0f00 	cmp.w	fp, #0
 8009db2:	4606      	mov	r6, r0
 8009db4:	460f      	mov	r7, r1
 8009db6:	dd6c      	ble.n	8009e92 <__kernel_rem_pio2+0x252>
 8009db8:	f108 31ff 	add.w	r1, r8, #4294967295
 8009dbc:	ab0c      	add	r3, sp, #48	@ 0x30
 8009dbe:	9d02      	ldr	r5, [sp, #8]
 8009dc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009dc4:	f1cb 0018 	rsb	r0, fp, #24
 8009dc8:	fa43 f200 	asr.w	r2, r3, r0
 8009dcc:	4415      	add	r5, r2
 8009dce:	4082      	lsls	r2, r0
 8009dd0:	1a9b      	subs	r3, r3, r2
 8009dd2:	aa0c      	add	r2, sp, #48	@ 0x30
 8009dd4:	9502      	str	r5, [sp, #8]
 8009dd6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009dda:	f1cb 0217 	rsb	r2, fp, #23
 8009dde:	fa43 f902 	asr.w	r9, r3, r2
 8009de2:	f1b9 0f00 	cmp.w	r9, #0
 8009de6:	dd64      	ble.n	8009eb2 <__kernel_rem_pio2+0x272>
 8009de8:	9b02      	ldr	r3, [sp, #8]
 8009dea:	2200      	movs	r2, #0
 8009dec:	3301      	adds	r3, #1
 8009dee:	9302      	str	r3, [sp, #8]
 8009df0:	4615      	mov	r5, r2
 8009df2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8009df6:	4590      	cmp	r8, r2
 8009df8:	f300 80b8 	bgt.w	8009f6c <__kernel_rem_pio2+0x32c>
 8009dfc:	f1bb 0f00 	cmp.w	fp, #0
 8009e00:	dd07      	ble.n	8009e12 <__kernel_rem_pio2+0x1d2>
 8009e02:	f1bb 0f01 	cmp.w	fp, #1
 8009e06:	f000 80bf 	beq.w	8009f88 <__kernel_rem_pio2+0x348>
 8009e0a:	f1bb 0f02 	cmp.w	fp, #2
 8009e0e:	f000 80c6 	beq.w	8009f9e <__kernel_rem_pio2+0x35e>
 8009e12:	f1b9 0f02 	cmp.w	r9, #2
 8009e16:	d14c      	bne.n	8009eb2 <__kernel_rem_pio2+0x272>
 8009e18:	4632      	mov	r2, r6
 8009e1a:	463b      	mov	r3, r7
 8009e1c:	494e      	ldr	r1, [pc, #312]	@ (8009f58 <__kernel_rem_pio2+0x318>)
 8009e1e:	2000      	movs	r0, #0
 8009e20:	f7f6 f9f6 	bl	8000210 <__aeabi_dsub>
 8009e24:	4606      	mov	r6, r0
 8009e26:	460f      	mov	r7, r1
 8009e28:	2d00      	cmp	r5, #0
 8009e2a:	d042      	beq.n	8009eb2 <__kernel_rem_pio2+0x272>
 8009e2c:	4658      	mov	r0, fp
 8009e2e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8009f48 <__kernel_rem_pio2+0x308>
 8009e32:	f7ff fd6d 	bl	8009910 <scalbn>
 8009e36:	4630      	mov	r0, r6
 8009e38:	4639      	mov	r1, r7
 8009e3a:	ec53 2b10 	vmov	r2, r3, d0
 8009e3e:	f7f6 f9e7 	bl	8000210 <__aeabi_dsub>
 8009e42:	4606      	mov	r6, r0
 8009e44:	460f      	mov	r7, r1
 8009e46:	e034      	b.n	8009eb2 <__kernel_rem_pio2+0x272>
 8009e48:	4b44      	ldr	r3, [pc, #272]	@ (8009f5c <__kernel_rem_pio2+0x31c>)
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e50:	f7f6 fb96 	bl	8000580 <__aeabi_dmul>
 8009e54:	f7f6 fe44 	bl	8000ae0 <__aeabi_d2iz>
 8009e58:	f7f6 fb28 	bl	80004ac <__aeabi_i2d>
 8009e5c:	4b40      	ldr	r3, [pc, #256]	@ (8009f60 <__kernel_rem_pio2+0x320>)
 8009e5e:	2200      	movs	r2, #0
 8009e60:	4606      	mov	r6, r0
 8009e62:	460f      	mov	r7, r1
 8009e64:	f7f6 fb8c 	bl	8000580 <__aeabi_dmul>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e70:	f7f6 f9ce 	bl	8000210 <__aeabi_dsub>
 8009e74:	f7f6 fe34 	bl	8000ae0 <__aeabi_d2iz>
 8009e78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e7c:	f849 0b04 	str.w	r0, [r9], #4
 8009e80:	4639      	mov	r1, r7
 8009e82:	4630      	mov	r0, r6
 8009e84:	f7f6 f9c6 	bl	8000214 <__adddf3>
 8009e88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e90:	e75d      	b.n	8009d4e <__kernel_rem_pio2+0x10e>
 8009e92:	d107      	bne.n	8009ea4 <__kernel_rem_pio2+0x264>
 8009e94:	f108 33ff 	add.w	r3, r8, #4294967295
 8009e98:	aa0c      	add	r2, sp, #48	@ 0x30
 8009e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e9e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8009ea2:	e79e      	b.n	8009de2 <__kernel_rem_pio2+0x1a2>
 8009ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8009f64 <__kernel_rem_pio2+0x324>)
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f7f6 fdf0 	bl	8000a8c <__aeabi_dcmpge>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	d143      	bne.n	8009f38 <__kernel_rem_pio2+0x2f8>
 8009eb0:	4681      	mov	r9, r0
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	4639      	mov	r1, r7
 8009eba:	f7f6 fdc9 	bl	8000a50 <__aeabi_dcmpeq>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	f000 80bf 	beq.w	800a042 <__kernel_rem_pio2+0x402>
 8009ec4:	f108 33ff 	add.w	r3, r8, #4294967295
 8009ec8:	2200      	movs	r2, #0
 8009eca:	9900      	ldr	r1, [sp, #0]
 8009ecc:	428b      	cmp	r3, r1
 8009ece:	da6e      	bge.n	8009fae <__kernel_rem_pio2+0x36e>
 8009ed0:	2a00      	cmp	r2, #0
 8009ed2:	f000 8089 	beq.w	8009fe8 <__kernel_rem_pio2+0x3a8>
 8009ed6:	f108 38ff 	add.w	r8, r8, #4294967295
 8009eda:	ab0c      	add	r3, sp, #48	@ 0x30
 8009edc:	f1ab 0b18 	sub.w	fp, fp, #24
 8009ee0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d0f6      	beq.n	8009ed6 <__kernel_rem_pio2+0x296>
 8009ee8:	4658      	mov	r0, fp
 8009eea:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8009f48 <__kernel_rem_pio2+0x308>
 8009eee:	f7ff fd0f 	bl	8009910 <scalbn>
 8009ef2:	f108 0301 	add.w	r3, r8, #1
 8009ef6:	00da      	lsls	r2, r3, #3
 8009ef8:	9205      	str	r2, [sp, #20]
 8009efa:	ec55 4b10 	vmov	r4, r5, d0
 8009efe:	aa70      	add	r2, sp, #448	@ 0x1c0
 8009f00:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8009f5c <__kernel_rem_pio2+0x31c>
 8009f04:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009f08:	4646      	mov	r6, r8
 8009f0a:	f04f 0a00 	mov.w	sl, #0
 8009f0e:	2e00      	cmp	r6, #0
 8009f10:	f280 80cf 	bge.w	800a0b2 <__kernel_rem_pio2+0x472>
 8009f14:	4644      	mov	r4, r8
 8009f16:	2c00      	cmp	r4, #0
 8009f18:	f2c0 80fd 	blt.w	800a116 <__kernel_rem_pio2+0x4d6>
 8009f1c:	4b12      	ldr	r3, [pc, #72]	@ (8009f68 <__kernel_rem_pio2+0x328>)
 8009f1e:	461f      	mov	r7, r3
 8009f20:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009f22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f26:	9306      	str	r3, [sp, #24]
 8009f28:	f04f 0a00 	mov.w	sl, #0
 8009f2c:	f04f 0b00 	mov.w	fp, #0
 8009f30:	2600      	movs	r6, #0
 8009f32:	eba8 0504 	sub.w	r5, r8, r4
 8009f36:	e0e2      	b.n	800a0fe <__kernel_rem_pio2+0x4be>
 8009f38:	f04f 0902 	mov.w	r9, #2
 8009f3c:	e754      	b.n	8009de8 <__kernel_rem_pio2+0x1a8>
 8009f3e:	bf00      	nop
	...
 8009f4c:	3ff00000 	.word	0x3ff00000
 8009f50:	0800a6f8 	.word	0x0800a6f8
 8009f54:	40200000 	.word	0x40200000
 8009f58:	3ff00000 	.word	0x3ff00000
 8009f5c:	3e700000 	.word	0x3e700000
 8009f60:	41700000 	.word	0x41700000
 8009f64:	3fe00000 	.word	0x3fe00000
 8009f68:	0800a6b8 	.word	0x0800a6b8
 8009f6c:	f854 3b04 	ldr.w	r3, [r4], #4
 8009f70:	b945      	cbnz	r5, 8009f84 <__kernel_rem_pio2+0x344>
 8009f72:	b123      	cbz	r3, 8009f7e <__kernel_rem_pio2+0x33e>
 8009f74:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009f78:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	3201      	adds	r2, #1
 8009f80:	461d      	mov	r5, r3
 8009f82:	e738      	b.n	8009df6 <__kernel_rem_pio2+0x1b6>
 8009f84:	1acb      	subs	r3, r1, r3
 8009f86:	e7f7      	b.n	8009f78 <__kernel_rem_pio2+0x338>
 8009f88:	f108 32ff 	add.w	r2, r8, #4294967295
 8009f8c:	ab0c      	add	r3, sp, #48	@ 0x30
 8009f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f92:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009f96:	a90c      	add	r1, sp, #48	@ 0x30
 8009f98:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009f9c:	e739      	b.n	8009e12 <__kernel_rem_pio2+0x1d2>
 8009f9e:	f108 32ff 	add.w	r2, r8, #4294967295
 8009fa2:	ab0c      	add	r3, sp, #48	@ 0x30
 8009fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fa8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009fac:	e7f3      	b.n	8009f96 <__kernel_rem_pio2+0x356>
 8009fae:	a90c      	add	r1, sp, #48	@ 0x30
 8009fb0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	430a      	orrs	r2, r1
 8009fb8:	e787      	b.n	8009eca <__kernel_rem_pio2+0x28a>
 8009fba:	3401      	adds	r4, #1
 8009fbc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009fc0:	2a00      	cmp	r2, #0
 8009fc2:	d0fa      	beq.n	8009fba <__kernel_rem_pio2+0x37a>
 8009fc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fc6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009fca:	eb0d 0503 	add.w	r5, sp, r3
 8009fce:	9b06      	ldr	r3, [sp, #24]
 8009fd0:	aa20      	add	r2, sp, #128	@ 0x80
 8009fd2:	4443      	add	r3, r8
 8009fd4:	f108 0701 	add.w	r7, r8, #1
 8009fd8:	3d98      	subs	r5, #152	@ 0x98
 8009fda:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8009fde:	4444      	add	r4, r8
 8009fe0:	42bc      	cmp	r4, r7
 8009fe2:	da04      	bge.n	8009fee <__kernel_rem_pio2+0x3ae>
 8009fe4:	46a0      	mov	r8, r4
 8009fe6:	e6a2      	b.n	8009d2e <__kernel_rem_pio2+0xee>
 8009fe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fea:	2401      	movs	r4, #1
 8009fec:	e7e6      	b.n	8009fbc <__kernel_rem_pio2+0x37c>
 8009fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ff0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009ff4:	f7f6 fa5a 	bl	80004ac <__aeabi_i2d>
 8009ff8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800a2c0 <__kernel_rem_pio2+0x680>
 8009ffc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a000:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a004:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a008:	46b2      	mov	sl, r6
 800a00a:	f04f 0800 	mov.w	r8, #0
 800a00e:	9b05      	ldr	r3, [sp, #20]
 800a010:	4598      	cmp	r8, r3
 800a012:	dd05      	ble.n	800a020 <__kernel_rem_pio2+0x3e0>
 800a014:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a018:	3701      	adds	r7, #1
 800a01a:	eca5 7b02 	vstmia	r5!, {d7}
 800a01e:	e7df      	b.n	8009fe0 <__kernel_rem_pio2+0x3a0>
 800a020:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800a024:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a028:	f7f6 faaa 	bl	8000580 <__aeabi_dmul>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a034:	f7f6 f8ee 	bl	8000214 <__adddf3>
 800a038:	f108 0801 	add.w	r8, r8, #1
 800a03c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a040:	e7e5      	b.n	800a00e <__kernel_rem_pio2+0x3ce>
 800a042:	f1cb 0000 	rsb	r0, fp, #0
 800a046:	ec47 6b10 	vmov	d0, r6, r7
 800a04a:	f7ff fc61 	bl	8009910 <scalbn>
 800a04e:	ec55 4b10 	vmov	r4, r5, d0
 800a052:	4b9d      	ldr	r3, [pc, #628]	@ (800a2c8 <__kernel_rem_pio2+0x688>)
 800a054:	2200      	movs	r2, #0
 800a056:	4620      	mov	r0, r4
 800a058:	4629      	mov	r1, r5
 800a05a:	f7f6 fd17 	bl	8000a8c <__aeabi_dcmpge>
 800a05e:	b300      	cbz	r0, 800a0a2 <__kernel_rem_pio2+0x462>
 800a060:	4b9a      	ldr	r3, [pc, #616]	@ (800a2cc <__kernel_rem_pio2+0x68c>)
 800a062:	2200      	movs	r2, #0
 800a064:	4620      	mov	r0, r4
 800a066:	4629      	mov	r1, r5
 800a068:	f7f6 fa8a 	bl	8000580 <__aeabi_dmul>
 800a06c:	f7f6 fd38 	bl	8000ae0 <__aeabi_d2iz>
 800a070:	4606      	mov	r6, r0
 800a072:	f7f6 fa1b 	bl	80004ac <__aeabi_i2d>
 800a076:	4b94      	ldr	r3, [pc, #592]	@ (800a2c8 <__kernel_rem_pio2+0x688>)
 800a078:	2200      	movs	r2, #0
 800a07a:	f7f6 fa81 	bl	8000580 <__aeabi_dmul>
 800a07e:	460b      	mov	r3, r1
 800a080:	4602      	mov	r2, r0
 800a082:	4629      	mov	r1, r5
 800a084:	4620      	mov	r0, r4
 800a086:	f7f6 f8c3 	bl	8000210 <__aeabi_dsub>
 800a08a:	f7f6 fd29 	bl	8000ae0 <__aeabi_d2iz>
 800a08e:	ab0c      	add	r3, sp, #48	@ 0x30
 800a090:	f10b 0b18 	add.w	fp, fp, #24
 800a094:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a098:	f108 0801 	add.w	r8, r8, #1
 800a09c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800a0a0:	e722      	b.n	8009ee8 <__kernel_rem_pio2+0x2a8>
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	4629      	mov	r1, r5
 800a0a6:	f7f6 fd1b 	bl	8000ae0 <__aeabi_d2iz>
 800a0aa:	ab0c      	add	r3, sp, #48	@ 0x30
 800a0ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a0b0:	e71a      	b.n	8009ee8 <__kernel_rem_pio2+0x2a8>
 800a0b2:	ab0c      	add	r3, sp, #48	@ 0x30
 800a0b4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a0b8:	f7f6 f9f8 	bl	80004ac <__aeabi_i2d>
 800a0bc:	4622      	mov	r2, r4
 800a0be:	462b      	mov	r3, r5
 800a0c0:	f7f6 fa5e 	bl	8000580 <__aeabi_dmul>
 800a0c4:	4652      	mov	r2, sl
 800a0c6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800a0ca:	465b      	mov	r3, fp
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	4629      	mov	r1, r5
 800a0d0:	f7f6 fa56 	bl	8000580 <__aeabi_dmul>
 800a0d4:	3e01      	subs	r6, #1
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	460d      	mov	r5, r1
 800a0da:	e718      	b.n	8009f0e <__kernel_rem_pio2+0x2ce>
 800a0dc:	9906      	ldr	r1, [sp, #24]
 800a0de:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800a0e2:	9106      	str	r1, [sp, #24]
 800a0e4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800a0e8:	f7f6 fa4a 	bl	8000580 <__aeabi_dmul>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	4650      	mov	r0, sl
 800a0f2:	4659      	mov	r1, fp
 800a0f4:	f7f6 f88e 	bl	8000214 <__adddf3>
 800a0f8:	3601      	adds	r6, #1
 800a0fa:	4682      	mov	sl, r0
 800a0fc:	468b      	mov	fp, r1
 800a0fe:	9b00      	ldr	r3, [sp, #0]
 800a100:	429e      	cmp	r6, r3
 800a102:	dc01      	bgt.n	800a108 <__kernel_rem_pio2+0x4c8>
 800a104:	42b5      	cmp	r5, r6
 800a106:	dae9      	bge.n	800a0dc <__kernel_rem_pio2+0x49c>
 800a108:	ab48      	add	r3, sp, #288	@ 0x120
 800a10a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a10e:	e9c5 ab00 	strd	sl, fp, [r5]
 800a112:	3c01      	subs	r4, #1
 800a114:	e6ff      	b.n	8009f16 <__kernel_rem_pio2+0x2d6>
 800a116:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a118:	2b02      	cmp	r3, #2
 800a11a:	dc0b      	bgt.n	800a134 <__kernel_rem_pio2+0x4f4>
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	dc39      	bgt.n	800a194 <__kernel_rem_pio2+0x554>
 800a120:	d05d      	beq.n	800a1de <__kernel_rem_pio2+0x59e>
 800a122:	9b02      	ldr	r3, [sp, #8]
 800a124:	f003 0007 	and.w	r0, r3, #7
 800a128:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800a12c:	ecbd 8b02 	vpop	{d8}
 800a130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a134:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a136:	2b03      	cmp	r3, #3
 800a138:	d1f3      	bne.n	800a122 <__kernel_rem_pio2+0x4e2>
 800a13a:	9b05      	ldr	r3, [sp, #20]
 800a13c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a140:	eb0d 0403 	add.w	r4, sp, r3
 800a144:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800a148:	4625      	mov	r5, r4
 800a14a:	46c2      	mov	sl, r8
 800a14c:	f1ba 0f00 	cmp.w	sl, #0
 800a150:	f1a5 0508 	sub.w	r5, r5, #8
 800a154:	dc6b      	bgt.n	800a22e <__kernel_rem_pio2+0x5ee>
 800a156:	4645      	mov	r5, r8
 800a158:	2d01      	cmp	r5, #1
 800a15a:	f1a4 0408 	sub.w	r4, r4, #8
 800a15e:	f300 8087 	bgt.w	800a270 <__kernel_rem_pio2+0x630>
 800a162:	9c05      	ldr	r4, [sp, #20]
 800a164:	ab48      	add	r3, sp, #288	@ 0x120
 800a166:	441c      	add	r4, r3
 800a168:	2000      	movs	r0, #0
 800a16a:	2100      	movs	r1, #0
 800a16c:	f1b8 0f01 	cmp.w	r8, #1
 800a170:	f300 809c 	bgt.w	800a2ac <__kernel_rem_pio2+0x66c>
 800a174:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800a178:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800a17c:	f1b9 0f00 	cmp.w	r9, #0
 800a180:	f040 80a6 	bne.w	800a2d0 <__kernel_rem_pio2+0x690>
 800a184:	9b04      	ldr	r3, [sp, #16]
 800a186:	e9c3 7800 	strd	r7, r8, [r3]
 800a18a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a18e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a192:	e7c6      	b.n	800a122 <__kernel_rem_pio2+0x4e2>
 800a194:	9d05      	ldr	r5, [sp, #20]
 800a196:	ab48      	add	r3, sp, #288	@ 0x120
 800a198:	441d      	add	r5, r3
 800a19a:	4644      	mov	r4, r8
 800a19c:	2000      	movs	r0, #0
 800a19e:	2100      	movs	r1, #0
 800a1a0:	2c00      	cmp	r4, #0
 800a1a2:	da35      	bge.n	800a210 <__kernel_rem_pio2+0x5d0>
 800a1a4:	f1b9 0f00 	cmp.w	r9, #0
 800a1a8:	d038      	beq.n	800a21c <__kernel_rem_pio2+0x5dc>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a1b0:	9c04      	ldr	r4, [sp, #16]
 800a1b2:	e9c4 2300 	strd	r2, r3, [r4]
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800a1be:	f7f6 f827 	bl	8000210 <__aeabi_dsub>
 800a1c2:	ad4a      	add	r5, sp, #296	@ 0x128
 800a1c4:	2401      	movs	r4, #1
 800a1c6:	45a0      	cmp	r8, r4
 800a1c8:	da2b      	bge.n	800a222 <__kernel_rem_pio2+0x5e2>
 800a1ca:	f1b9 0f00 	cmp.w	r9, #0
 800a1ce:	d002      	beq.n	800a1d6 <__kernel_rem_pio2+0x596>
 800a1d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	9b04      	ldr	r3, [sp, #16]
 800a1d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a1dc:	e7a1      	b.n	800a122 <__kernel_rem_pio2+0x4e2>
 800a1de:	9c05      	ldr	r4, [sp, #20]
 800a1e0:	ab48      	add	r3, sp, #288	@ 0x120
 800a1e2:	441c      	add	r4, r3
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	f1b8 0f00 	cmp.w	r8, #0
 800a1ec:	da09      	bge.n	800a202 <__kernel_rem_pio2+0x5c2>
 800a1ee:	f1b9 0f00 	cmp.w	r9, #0
 800a1f2:	d002      	beq.n	800a1fa <__kernel_rem_pio2+0x5ba>
 800a1f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	9b04      	ldr	r3, [sp, #16]
 800a1fc:	e9c3 0100 	strd	r0, r1, [r3]
 800a200:	e78f      	b.n	800a122 <__kernel_rem_pio2+0x4e2>
 800a202:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a206:	f7f6 f805 	bl	8000214 <__adddf3>
 800a20a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a20e:	e7eb      	b.n	800a1e8 <__kernel_rem_pio2+0x5a8>
 800a210:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a214:	f7f5 fffe 	bl	8000214 <__adddf3>
 800a218:	3c01      	subs	r4, #1
 800a21a:	e7c1      	b.n	800a1a0 <__kernel_rem_pio2+0x560>
 800a21c:	4602      	mov	r2, r0
 800a21e:	460b      	mov	r3, r1
 800a220:	e7c6      	b.n	800a1b0 <__kernel_rem_pio2+0x570>
 800a222:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800a226:	f7f5 fff5 	bl	8000214 <__adddf3>
 800a22a:	3401      	adds	r4, #1
 800a22c:	e7cb      	b.n	800a1c6 <__kernel_rem_pio2+0x586>
 800a22e:	ed95 7b00 	vldr	d7, [r5]
 800a232:	ed8d 7b00 	vstr	d7, [sp]
 800a236:	ed95 7b02 	vldr	d7, [r5, #8]
 800a23a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a23e:	ec53 2b17 	vmov	r2, r3, d7
 800a242:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a246:	f7f5 ffe5 	bl	8000214 <__adddf3>
 800a24a:	4602      	mov	r2, r0
 800a24c:	460b      	mov	r3, r1
 800a24e:	4606      	mov	r6, r0
 800a250:	460f      	mov	r7, r1
 800a252:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a256:	f7f5 ffdb 	bl	8000210 <__aeabi_dsub>
 800a25a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a25e:	f7f5 ffd9 	bl	8000214 <__adddf3>
 800a262:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a266:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a26a:	e9c5 6700 	strd	r6, r7, [r5]
 800a26e:	e76d      	b.n	800a14c <__kernel_rem_pio2+0x50c>
 800a270:	ed94 7b00 	vldr	d7, [r4]
 800a274:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800a278:	ec51 0b17 	vmov	r0, r1, d7
 800a27c:	4652      	mov	r2, sl
 800a27e:	465b      	mov	r3, fp
 800a280:	ed8d 7b00 	vstr	d7, [sp]
 800a284:	f7f5 ffc6 	bl	8000214 <__adddf3>
 800a288:	4602      	mov	r2, r0
 800a28a:	460b      	mov	r3, r1
 800a28c:	4606      	mov	r6, r0
 800a28e:	460f      	mov	r7, r1
 800a290:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a294:	f7f5 ffbc 	bl	8000210 <__aeabi_dsub>
 800a298:	4652      	mov	r2, sl
 800a29a:	465b      	mov	r3, fp
 800a29c:	f7f5 ffba 	bl	8000214 <__adddf3>
 800a2a0:	3d01      	subs	r5, #1
 800a2a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a2a6:	e9c4 6700 	strd	r6, r7, [r4]
 800a2aa:	e755      	b.n	800a158 <__kernel_rem_pio2+0x518>
 800a2ac:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a2b0:	f7f5 ffb0 	bl	8000214 <__adddf3>
 800a2b4:	f108 38ff 	add.w	r8, r8, #4294967295
 800a2b8:	e758      	b.n	800a16c <__kernel_rem_pio2+0x52c>
 800a2ba:	bf00      	nop
 800a2bc:	f3af 8000 	nop.w
	...
 800a2c8:	41700000 	.word	0x41700000
 800a2cc:	3e700000 	.word	0x3e700000
 800a2d0:	9b04      	ldr	r3, [sp, #16]
 800a2d2:	9a04      	ldr	r2, [sp, #16]
 800a2d4:	601f      	str	r7, [r3, #0]
 800a2d6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800a2da:	605c      	str	r4, [r3, #4]
 800a2dc:	609d      	str	r5, [r3, #8]
 800a2de:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a2e2:	60d3      	str	r3, [r2, #12]
 800a2e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a2e8:	6110      	str	r0, [r2, #16]
 800a2ea:	6153      	str	r3, [r2, #20]
 800a2ec:	e719      	b.n	800a122 <__kernel_rem_pio2+0x4e2>
 800a2ee:	bf00      	nop

0800a2f0 <floor>:
 800a2f0:	ec51 0b10 	vmov	r0, r1, d0
 800a2f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a2f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2fc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800a300:	2e13      	cmp	r6, #19
 800a302:	460c      	mov	r4, r1
 800a304:	4605      	mov	r5, r0
 800a306:	4680      	mov	r8, r0
 800a308:	dc34      	bgt.n	800a374 <floor+0x84>
 800a30a:	2e00      	cmp	r6, #0
 800a30c:	da17      	bge.n	800a33e <floor+0x4e>
 800a30e:	a332      	add	r3, pc, #200	@ (adr r3, 800a3d8 <floor+0xe8>)
 800a310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a314:	f7f5 ff7e 	bl	8000214 <__adddf3>
 800a318:	2200      	movs	r2, #0
 800a31a:	2300      	movs	r3, #0
 800a31c:	f7f6 fbc0 	bl	8000aa0 <__aeabi_dcmpgt>
 800a320:	b150      	cbz	r0, 800a338 <floor+0x48>
 800a322:	2c00      	cmp	r4, #0
 800a324:	da55      	bge.n	800a3d2 <floor+0xe2>
 800a326:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a32a:	432c      	orrs	r4, r5
 800a32c:	2500      	movs	r5, #0
 800a32e:	42ac      	cmp	r4, r5
 800a330:	4c2b      	ldr	r4, [pc, #172]	@ (800a3e0 <floor+0xf0>)
 800a332:	bf08      	it	eq
 800a334:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a338:	4621      	mov	r1, r4
 800a33a:	4628      	mov	r0, r5
 800a33c:	e023      	b.n	800a386 <floor+0x96>
 800a33e:	4f29      	ldr	r7, [pc, #164]	@ (800a3e4 <floor+0xf4>)
 800a340:	4137      	asrs	r7, r6
 800a342:	ea01 0307 	and.w	r3, r1, r7
 800a346:	4303      	orrs	r3, r0
 800a348:	d01d      	beq.n	800a386 <floor+0x96>
 800a34a:	a323      	add	r3, pc, #140	@ (adr r3, 800a3d8 <floor+0xe8>)
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f7f5 ff60 	bl	8000214 <__adddf3>
 800a354:	2200      	movs	r2, #0
 800a356:	2300      	movs	r3, #0
 800a358:	f7f6 fba2 	bl	8000aa0 <__aeabi_dcmpgt>
 800a35c:	2800      	cmp	r0, #0
 800a35e:	d0eb      	beq.n	800a338 <floor+0x48>
 800a360:	2c00      	cmp	r4, #0
 800a362:	bfbe      	ittt	lt
 800a364:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a368:	4133      	asrlt	r3, r6
 800a36a:	18e4      	addlt	r4, r4, r3
 800a36c:	ea24 0407 	bic.w	r4, r4, r7
 800a370:	2500      	movs	r5, #0
 800a372:	e7e1      	b.n	800a338 <floor+0x48>
 800a374:	2e33      	cmp	r6, #51	@ 0x33
 800a376:	dd0a      	ble.n	800a38e <floor+0x9e>
 800a378:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a37c:	d103      	bne.n	800a386 <floor+0x96>
 800a37e:	4602      	mov	r2, r0
 800a380:	460b      	mov	r3, r1
 800a382:	f7f5 ff47 	bl	8000214 <__adddf3>
 800a386:	ec41 0b10 	vmov	d0, r0, r1
 800a38a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a38e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800a392:	f04f 37ff 	mov.w	r7, #4294967295
 800a396:	40df      	lsrs	r7, r3
 800a398:	4207      	tst	r7, r0
 800a39a:	d0f4      	beq.n	800a386 <floor+0x96>
 800a39c:	a30e      	add	r3, pc, #56	@ (adr r3, 800a3d8 <floor+0xe8>)
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	f7f5 ff37 	bl	8000214 <__adddf3>
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	f7f6 fb79 	bl	8000aa0 <__aeabi_dcmpgt>
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	d0c2      	beq.n	800a338 <floor+0x48>
 800a3b2:	2c00      	cmp	r4, #0
 800a3b4:	da0a      	bge.n	800a3cc <floor+0xdc>
 800a3b6:	2e14      	cmp	r6, #20
 800a3b8:	d101      	bne.n	800a3be <floor+0xce>
 800a3ba:	3401      	adds	r4, #1
 800a3bc:	e006      	b.n	800a3cc <floor+0xdc>
 800a3be:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	40b3      	lsls	r3, r6
 800a3c6:	441d      	add	r5, r3
 800a3c8:	4545      	cmp	r5, r8
 800a3ca:	d3f6      	bcc.n	800a3ba <floor+0xca>
 800a3cc:	ea25 0507 	bic.w	r5, r5, r7
 800a3d0:	e7b2      	b.n	800a338 <floor+0x48>
 800a3d2:	2500      	movs	r5, #0
 800a3d4:	462c      	mov	r4, r5
 800a3d6:	e7af      	b.n	800a338 <floor+0x48>
 800a3d8:	8800759c 	.word	0x8800759c
 800a3dc:	7e37e43c 	.word	0x7e37e43c
 800a3e0:	bff00000 	.word	0xbff00000
 800a3e4:	000fffff 	.word	0x000fffff

0800a3e8 <memset>:
 800a3e8:	4402      	add	r2, r0
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d100      	bne.n	800a3f2 <memset+0xa>
 800a3f0:	4770      	bx	lr
 800a3f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a3f6:	e7f9      	b.n	800a3ec <memset+0x4>

0800a3f8 <__errno>:
 800a3f8:	4b01      	ldr	r3, [pc, #4]	@ (800a400 <__errno+0x8>)
 800a3fa:	6818      	ldr	r0, [r3, #0]
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	20000080 	.word	0x20000080

0800a404 <__libc_init_array>:
 800a404:	b570      	push	{r4, r5, r6, lr}
 800a406:	4d0d      	ldr	r5, [pc, #52]	@ (800a43c <__libc_init_array+0x38>)
 800a408:	4c0d      	ldr	r4, [pc, #52]	@ (800a440 <__libc_init_array+0x3c>)
 800a40a:	1b64      	subs	r4, r4, r5
 800a40c:	10a4      	asrs	r4, r4, #2
 800a40e:	2600      	movs	r6, #0
 800a410:	42a6      	cmp	r6, r4
 800a412:	d109      	bne.n	800a428 <__libc_init_array+0x24>
 800a414:	4d0b      	ldr	r5, [pc, #44]	@ (800a444 <__libc_init_array+0x40>)
 800a416:	4c0c      	ldr	r4, [pc, #48]	@ (800a448 <__libc_init_array+0x44>)
 800a418:	f000 f818 	bl	800a44c <_init>
 800a41c:	1b64      	subs	r4, r4, r5
 800a41e:	10a4      	asrs	r4, r4, #2
 800a420:	2600      	movs	r6, #0
 800a422:	42a6      	cmp	r6, r4
 800a424:	d105      	bne.n	800a432 <__libc_init_array+0x2e>
 800a426:	bd70      	pop	{r4, r5, r6, pc}
 800a428:	f855 3b04 	ldr.w	r3, [r5], #4
 800a42c:	4798      	blx	r3
 800a42e:	3601      	adds	r6, #1
 800a430:	e7ee      	b.n	800a410 <__libc_init_array+0xc>
 800a432:	f855 3b04 	ldr.w	r3, [r5], #4
 800a436:	4798      	blx	r3
 800a438:	3601      	adds	r6, #1
 800a43a:	e7f2      	b.n	800a422 <__libc_init_array+0x1e>
 800a43c:	0800a710 	.word	0x0800a710
 800a440:	0800a710 	.word	0x0800a710
 800a444:	0800a710 	.word	0x0800a710
 800a448:	0800a714 	.word	0x0800a714

0800a44c <_init>:
 800a44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44e:	bf00      	nop
 800a450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a452:	bc08      	pop	{r3}
 800a454:	469e      	mov	lr, r3
 800a456:	4770      	bx	lr

0800a458 <_fini>:
 800a458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45a:	bf00      	nop
 800a45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a45e:	bc08      	pop	{r3}
 800a460:	469e      	mov	lr, r3
 800a462:	4770      	bx	lr
