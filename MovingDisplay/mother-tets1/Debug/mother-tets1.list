
mother-tets1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004be0  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08004da8  08004da8  00005da8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f98  08004f98  00006018  2**0
                  CONTENTS
  4 .ARM          00000008  08004f98  08004f98  00005f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fa0  08004fa0  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fa0  08004fa0  00005fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fa4  08004fa4  00005fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08004fa8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000018  08004fc0  00006018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08004fc0  000060e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d44a  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d8b  00000000  00000000  00013492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00015220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b9  00000000  00000000  00015e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d6d  00000000  00000000  00016839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee87  00000000  00000000  000385a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d10eb  00000000  00000000  0004742d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118518  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037cc  00000000  00000000  0011855c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0011bd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000018 	.word	0x20000018
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004d90 	.word	0x08004d90

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000001c 	.word	0x2000001c
 8000204:	08004d90 	.word	0x08004d90

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b96a 	b.w	8000df0 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	460c      	mov	r4, r1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d14e      	bne.n	8000bde <__udivmoddi4+0xaa>
 8000b40:	4694      	mov	ip, r2
 8000b42:	458c      	cmp	ip, r1
 8000b44:	4686      	mov	lr, r0
 8000b46:	fab2 f282 	clz	r2, r2
 8000b4a:	d962      	bls.n	8000c12 <__udivmoddi4+0xde>
 8000b4c:	b14a      	cbz	r2, 8000b62 <__udivmoddi4+0x2e>
 8000b4e:	f1c2 0320 	rsb	r3, r2, #32
 8000b52:	4091      	lsls	r1, r2
 8000b54:	fa20 f303 	lsr.w	r3, r0, r3
 8000b58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b5c:	4319      	orrs	r1, r3
 8000b5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b66:	fa1f f68c 	uxth.w	r6, ip
 8000b6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b72:	fb07 1114 	mls	r1, r7, r4, r1
 8000b76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7a:	fb04 f106 	mul.w	r1, r4, r6
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x64>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b8a:	f080 8112 	bcs.w	8000db2 <__udivmoddi4+0x27e>
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	f240 810f 	bls.w	8000db2 <__udivmoddi4+0x27e>
 8000b94:	3c02      	subs	r4, #2
 8000b96:	4463      	add	r3, ip
 8000b98:	1a59      	subs	r1, r3, r1
 8000b9a:	fa1f f38e 	uxth.w	r3, lr
 8000b9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ba6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000baa:	fb00 f606 	mul.w	r6, r0, r6
 8000bae:	429e      	cmp	r6, r3
 8000bb0:	d90a      	bls.n	8000bc8 <__udivmoddi4+0x94>
 8000bb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bba:	f080 80fc 	bcs.w	8000db6 <__udivmoddi4+0x282>
 8000bbe:	429e      	cmp	r6, r3
 8000bc0:	f240 80f9 	bls.w	8000db6 <__udivmoddi4+0x282>
 8000bc4:	4463      	add	r3, ip
 8000bc6:	3802      	subs	r0, #2
 8000bc8:	1b9b      	subs	r3, r3, r6
 8000bca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bce:	2100      	movs	r1, #0
 8000bd0:	b11d      	cbz	r5, 8000bda <__udivmoddi4+0xa6>
 8000bd2:	40d3      	lsrs	r3, r2
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d905      	bls.n	8000bee <__udivmoddi4+0xba>
 8000be2:	b10d      	cbz	r5, 8000be8 <__udivmoddi4+0xb4>
 8000be4:	e9c5 0100 	strd	r0, r1, [r5]
 8000be8:	2100      	movs	r1, #0
 8000bea:	4608      	mov	r0, r1
 8000bec:	e7f5      	b.n	8000bda <__udivmoddi4+0xa6>
 8000bee:	fab3 f183 	clz	r1, r3
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	d146      	bne.n	8000c84 <__udivmoddi4+0x150>
 8000bf6:	42a3      	cmp	r3, r4
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xcc>
 8000bfa:	4290      	cmp	r0, r2
 8000bfc:	f0c0 80f0 	bcc.w	8000de0 <__udivmoddi4+0x2ac>
 8000c00:	1a86      	subs	r6, r0, r2
 8000c02:	eb64 0303 	sbc.w	r3, r4, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	2d00      	cmp	r5, #0
 8000c0a:	d0e6      	beq.n	8000bda <__udivmoddi4+0xa6>
 8000c0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c10:	e7e3      	b.n	8000bda <__udivmoddi4+0xa6>
 8000c12:	2a00      	cmp	r2, #0
 8000c14:	f040 8090 	bne.w	8000d38 <__udivmoddi4+0x204>
 8000c18:	eba1 040c 	sub.w	r4, r1, ip
 8000c1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c20:	fa1f f78c 	uxth.w	r7, ip
 8000c24:	2101      	movs	r1, #1
 8000c26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c36:	fb07 f006 	mul.w	r0, r7, r6
 8000c3a:	4298      	cmp	r0, r3
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x11c>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x11a>
 8000c48:	4298      	cmp	r0, r3
 8000c4a:	f200 80cd 	bhi.w	8000de8 <__udivmoddi4+0x2b4>
 8000c4e:	4626      	mov	r6, r4
 8000c50:	1a1c      	subs	r4, r3, r0
 8000c52:	fa1f f38e 	uxth.w	r3, lr
 8000c56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c62:	fb00 f707 	mul.w	r7, r0, r7
 8000c66:	429f      	cmp	r7, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x148>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x146>
 8000c74:	429f      	cmp	r7, r3
 8000c76:	f200 80b0 	bhi.w	8000dda <__udivmoddi4+0x2a6>
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	1bdb      	subs	r3, r3, r7
 8000c7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c82:	e7a5      	b.n	8000bd0 <__udivmoddi4+0x9c>
 8000c84:	f1c1 0620 	rsb	r6, r1, #32
 8000c88:	408b      	lsls	r3, r1
 8000c8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c8e:	431f      	orrs	r7, r3
 8000c90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c94:	fa04 f301 	lsl.w	r3, r4, r1
 8000c98:	ea43 030c 	orr.w	r3, r3, ip
 8000c9c:	40f4      	lsrs	r4, r6
 8000c9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ca2:	0c38      	lsrs	r0, r7, #16
 8000ca4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ca8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000cb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000cbc:	45a1      	cmp	r9, r4
 8000cbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x1a6>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cca:	f080 8084 	bcs.w	8000dd6 <__udivmoddi4+0x2a2>
 8000cce:	45a1      	cmp	r9, r4
 8000cd0:	f240 8081 	bls.w	8000dd6 <__udivmoddi4+0x2a2>
 8000cd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cd8:	443c      	add	r4, r7
 8000cda:	eba4 0409 	sub.w	r4, r4, r9
 8000cde:	fa1f f983 	uxth.w	r9, r3
 8000ce2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ce6:	fb00 4413 	mls	r4, r0, r3, r4
 8000cea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cf2:	45a4      	cmp	ip, r4
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x1d2>
 8000cf6:	193c      	adds	r4, r7, r4
 8000cf8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cfc:	d267      	bcs.n	8000dce <__udivmoddi4+0x29a>
 8000cfe:	45a4      	cmp	ip, r4
 8000d00:	d965      	bls.n	8000dce <__udivmoddi4+0x29a>
 8000d02:	3b02      	subs	r3, #2
 8000d04:	443c      	add	r4, r7
 8000d06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d0e:	eba4 040c 	sub.w	r4, r4, ip
 8000d12:	429c      	cmp	r4, r3
 8000d14:	46ce      	mov	lr, r9
 8000d16:	469c      	mov	ip, r3
 8000d18:	d351      	bcc.n	8000dbe <__udivmoddi4+0x28a>
 8000d1a:	d04e      	beq.n	8000dba <__udivmoddi4+0x286>
 8000d1c:	b155      	cbz	r5, 8000d34 <__udivmoddi4+0x200>
 8000d1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d22:	eb64 040c 	sbc.w	r4, r4, ip
 8000d26:	fa04 f606 	lsl.w	r6, r4, r6
 8000d2a:	40cb      	lsrs	r3, r1
 8000d2c:	431e      	orrs	r6, r3
 8000d2e:	40cc      	lsrs	r4, r1
 8000d30:	e9c5 6400 	strd	r6, r4, [r5]
 8000d34:	2100      	movs	r1, #0
 8000d36:	e750      	b.n	8000bda <__udivmoddi4+0xa6>
 8000d38:	f1c2 0320 	rsb	r3, r2, #32
 8000d3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d44:	fa24 f303 	lsr.w	r3, r4, r3
 8000d48:	4094      	lsls	r4, r2
 8000d4a:	430c      	orrs	r4, r1
 8000d4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d66:	fb00 f107 	mul.w	r1, r0, r7
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x24c>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d76:	d22c      	bcs.n	8000dd2 <__udivmoddi4+0x29e>
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d92a      	bls.n	8000dd2 <__udivmoddi4+0x29e>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	4463      	add	r3, ip
 8000d80:	1a5b      	subs	r3, r3, r1
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d88:	fb08 3311 	mls	r3, r8, r1, r3
 8000d8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d90:	fb01 f307 	mul.w	r3, r1, r7
 8000d94:	42a3      	cmp	r3, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x276>
 8000d98:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000da0:	d213      	bcs.n	8000dca <__udivmoddi4+0x296>
 8000da2:	42a3      	cmp	r3, r4
 8000da4:	d911      	bls.n	8000dca <__udivmoddi4+0x296>
 8000da6:	3902      	subs	r1, #2
 8000da8:	4464      	add	r4, ip
 8000daa:	1ae4      	subs	r4, r4, r3
 8000dac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000db0:	e739      	b.n	8000c26 <__udivmoddi4+0xf2>
 8000db2:	4604      	mov	r4, r0
 8000db4:	e6f0      	b.n	8000b98 <__udivmoddi4+0x64>
 8000db6:	4608      	mov	r0, r1
 8000db8:	e706      	b.n	8000bc8 <__udivmoddi4+0x94>
 8000dba:	45c8      	cmp	r8, r9
 8000dbc:	d2ae      	bcs.n	8000d1c <__udivmoddi4+0x1e8>
 8000dbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	e7a8      	b.n	8000d1c <__udivmoddi4+0x1e8>
 8000dca:	4631      	mov	r1, r6
 8000dcc:	e7ed      	b.n	8000daa <__udivmoddi4+0x276>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	e799      	b.n	8000d06 <__udivmoddi4+0x1d2>
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	e7d4      	b.n	8000d80 <__udivmoddi4+0x24c>
 8000dd6:	46d6      	mov	lr, sl
 8000dd8:	e77f      	b.n	8000cda <__udivmoddi4+0x1a6>
 8000dda:	4463      	add	r3, ip
 8000ddc:	3802      	subs	r0, #2
 8000dde:	e74d      	b.n	8000c7c <__udivmoddi4+0x148>
 8000de0:	4606      	mov	r6, r0
 8000de2:	4623      	mov	r3, r4
 8000de4:	4608      	mov	r0, r1
 8000de6:	e70f      	b.n	8000c08 <__udivmoddi4+0xd4>
 8000de8:	3e02      	subs	r6, #2
 8000dea:	4463      	add	r3, ip
 8000dec:	e730      	b.n	8000c50 <__udivmoddi4+0x11c>
 8000dee:	bf00      	nop

08000df0 <__aeabi_idiv0>:
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
    if (htim == &htim2){
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a07      	ldr	r2, [pc, #28]	@ (8000e1c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d104      	bne.n	8000e0e <HAL_TIM_PeriodElapsedCallback+0x1a>
        m_counter++;
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	4a05      	ldr	r2, [pc, #20]	@ (8000e20 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000e0c:	6013      	str	r3, [r2, #0]
    }
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000034 	.word	0x20000034
 8000e20:	200000c4 	.word	0x200000c4

08000e24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e2a:	f000 fca3 	bl	8001774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2e:	f000 f8f1 	bl	8001014 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e32:	f000 f9d7 	bl	80011e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e36:	f000 f95f 	bl	80010f8 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8000e3a:	f000 f9a9 	bl	8001190 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e3e:	4869      	ldr	r0, [pc, #420]	@ (8000fe4 <main+0x1c0>)
 8000e40:	f001 fe82 	bl	8002b48 <HAL_TIM_Base_Start_IT>
  HAL_UART_Transmit(&huart6, send_array, 12, 10);
 8000e44:	230a      	movs	r3, #10
 8000e46:	220c      	movs	r2, #12
 8000e48:	4967      	ldr	r1, [pc, #412]	@ (8000fe8 <main+0x1c4>)
 8000e4a:	4868      	ldr	r0, [pc, #416]	@ (8000fec <main+0x1c8>)
 8000e4c:	f002 faf2 	bl	8003434 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//    uint32_t Ltika_pcounter = m_counter;
    uint32_t set_pcounter = m_counter;
 8000e50:	4b67      	ldr	r3, [pc, #412]	@ (8000ff0 <main+0x1cc>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	617b      	str	r3, [r7, #20]
    uint32_t Tx_pcounter = m_counter;
 8000e56:	4b66      	ldr	r3, [pc, #408]	@ (8000ff0 <main+0x1cc>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	613b      	str	r3, [r7, #16]
    uint32_t d_pcounter = m_counter;
 8000e5c:	4b64      	ldr	r3, [pc, #400]	@ (8000ff0 <main+0x1cc>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	60fb      	str	r3, [r7, #12]

    uint8_t Odo_ID = 248;
 8000e62:	23f8      	movs	r3, #248	@ 0xf8
 8000e64:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  dtime = m_counter - d_pcounter;
 8000e66:	4b62      	ldr	r3, [pc, #392]	@ (8000ff0 <main+0x1cc>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	4b5f      	ldr	r3, [pc, #380]	@ (8000ff4 <main+0x1d0>)
 8000e76:	801a      	strh	r2, [r3, #0]
	  d_pcounter = m_counter;
 8000e78:	4b5d      	ldr	r3, [pc, #372]	@ (8000ff0 <main+0x1cc>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	60fb      	str	r3, [r7, #12]

	  if(m_counter - set_pcounter > 10){
 8000e7e:	4b5c      	ldr	r3, [pc, #368]	@ (8000ff0 <main+0x1cc>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b0a      	cmp	r3, #10
 8000e88:	d92c      	bls.n	8000ee4 <main+0xc0>
		  set_pcounter = m_counter;
 8000e8a:	4b59      	ldr	r3, [pc, #356]	@ (8000ff0 <main+0x1cc>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	617b      	str	r3, [r7, #20]
		  trgt_degree = trgt_degree + 1;
 8000e90:	4b59      	ldr	r3, [pc, #356]	@ (8000ff8 <main+0x1d4>)
 8000e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	3301      	adds	r3, #1
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	b21a      	sxth	r2, r3
 8000e9e:	4b56      	ldr	r3, [pc, #344]	@ (8000ff8 <main+0x1d4>)
 8000ea0:	801a      	strh	r2, [r3, #0]

		  if(trgt_speed < 30){trgt_speed = trgt_speed + 10;}
 8000ea2:	4b56      	ldr	r3, [pc, #344]	@ (8000ffc <main+0x1d8>)
 8000ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea8:	2b1d      	cmp	r3, #29
 8000eaa:	dc09      	bgt.n	8000ec0 <main+0x9c>
 8000eac:	4b53      	ldr	r3, [pc, #332]	@ (8000ffc <main+0x1d8>)
 8000eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	330a      	adds	r3, #10
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	b21a      	sxth	r2, r3
 8000eba:	4b50      	ldr	r3, [pc, #320]	@ (8000ffc <main+0x1d8>)
 8000ebc:	801a      	strh	r2, [r3, #0]
 8000ebe:	e003      	b.n	8000ec8 <main+0xa4>
		  else{trgt_speed = 500;}
 8000ec0:	4b4e      	ldr	r3, [pc, #312]	@ (8000ffc <main+0x1d8>)
 8000ec2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ec6:	801a      	strh	r2, [r3, #0]

		  if(HAL_GPIO_ReadPin(STRTSW_GPIO_Port, STRTSW_Pin) == 0){
 8000ec8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ecc:	484c      	ldr	r0, [pc, #304]	@ (8001000 <main+0x1dc>)
 8000ece:	f000 ff69 	bl	8001da4 <HAL_GPIO_ReadPin>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d105      	bne.n	8000ee4 <main+0xc0>
			  trgt_degree = 0;
 8000ed8:	4b47      	ldr	r3, [pc, #284]	@ (8000ff8 <main+0x1d4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	801a      	strh	r2, [r3, #0]
			  trgt_speed = 0;
 8000ede:	4b47      	ldr	r3, [pc, #284]	@ (8000ffc <main+0x1d8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	801a      	strh	r2, [r3, #0]
		  }
	  }else{}

	  speed_set(27, trgt_speed, trgt_degree, MTRS, 0.7);
 8000ee4:	4b45      	ldr	r3, [pc, #276]	@ (8000ffc <main+0x1d8>)
 8000ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eea:	4619      	mov	r1, r3
 8000eec:	4b42      	ldr	r3, [pc, #264]	@ (8000ff8 <main+0x1d4>)
 8000eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8001004 <main+0x1e0>
 8000ef8:	4b43      	ldr	r3, [pc, #268]	@ (8001008 <main+0x1e4>)
 8000efa:	201b      	movs	r0, #27
 8000efc:	f000 f9d0 	bl	80012a0 <speed_set>
	  set_array(MTRS, send_array);
 8000f00:	4939      	ldr	r1, [pc, #228]	@ (8000fe8 <main+0x1c4>)
 8000f02:	4841      	ldr	r0, [pc, #260]	@ (8001008 <main+0x1e4>)
 8000f04:	f000 faba 	bl	800147c <set_array>

	  if(m_counter - Tx_pcounter > 10){
 8000f08:	4b39      	ldr	r3, [pc, #228]	@ (8000ff0 <main+0x1cc>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	2b0a      	cmp	r3, #10
 8000f12:	d9a8      	bls.n	8000e66 <main+0x42>
		  Tx_pcounter = m_counter;
 8000f14:	4b36      	ldr	r3, [pc, #216]	@ (8000ff0 <main+0x1cc>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	613b      	str	r3, [r7, #16]
		  if(HAL_GPIO_ReadPin(STRTSW_GPIO_Port, STRTSW_Pin) == 1){
 8000f1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f1e:	4838      	ldr	r0, [pc, #224]	@ (8001000 <main+0x1dc>)
 8000f20:	f000 ff40 	bl	8001da4 <HAL_GPIO_ReadPin>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d106      	bne.n	8000f38 <main+0x114>
			  HAL_UART_Transmit(&huart6, send_array, 12, 10);
 8000f2a:	230a      	movs	r3, #10
 8000f2c:	220c      	movs	r2, #12
 8000f2e:	492e      	ldr	r1, [pc, #184]	@ (8000fe8 <main+0x1c4>)
 8000f30:	482e      	ldr	r0, [pc, #184]	@ (8000fec <main+0x1c8>)
 8000f32:	f002 fa7f 	bl	8003434 <HAL_UART_Transmit>
 8000f36:	e028      	b.n	8000f8a <main+0x166>
		  }else{
				for(int i=0; i<4; i++){
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	e01c      	b.n	8000f78 <main+0x154>
				  send_array[3*i] = 250 + i;
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	b2d9      	uxtb	r1, r3
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	4613      	mov	r3, r2
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	4413      	add	r3, r2
 8000f4a:	1f8a      	subs	r2, r1, #6
 8000f4c:	b2d1      	uxtb	r1, r2
 8000f4e:	4a26      	ldr	r2, [pc, #152]	@ (8000fe8 <main+0x1c4>)
 8000f50:	54d1      	strb	r1, [r2, r3]
				  send_array[3*i + 1] = 0;
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	4613      	mov	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	4413      	add	r3, r2
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	4a22      	ldr	r2, [pc, #136]	@ (8000fe8 <main+0x1c4>)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	54d1      	strb	r1, [r2, r3]
				  send_array[3*i + 2] = 50;
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	4613      	mov	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	4a1e      	ldr	r2, [pc, #120]	@ (8000fe8 <main+0x1c4>)
 8000f6e:	2132      	movs	r1, #50	@ 0x32
 8000f70:	54d1      	strb	r1, [r2, r3]
				for(int i=0; i<4; i++){
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	3301      	adds	r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	dddf      	ble.n	8000f3e <main+0x11a>
				}
				HAL_UART_Transmit(&huart6, send_array, 12, 10);
 8000f7e:	230a      	movs	r3, #10
 8000f80:	220c      	movs	r2, #12
 8000f82:	4919      	ldr	r1, [pc, #100]	@ (8000fe8 <main+0x1c4>)
 8000f84:	4819      	ldr	r0, [pc, #100]	@ (8000fec <main+0x1c8>)
 8000f86:	f002 fa55 	bl	8003434 <HAL_UART_Transmit>
		  }
		  HAL_UART_Transmit(&huart6, &Odo_ID, 1, 10);
 8000f8a:	1df9      	adds	r1, r7, #7
 8000f8c:	230a      	movs	r3, #10
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4816      	ldr	r0, [pc, #88]	@ (8000fec <main+0x1c8>)
 8000f92:	f002 fa4f 	bl	8003434 <HAL_UART_Transmit>
		  if(HAL_UART_Receive(&huart6, rxData, 3, 10) == HAL_OK){
 8000f96:	230a      	movs	r3, #10
 8000f98:	2203      	movs	r2, #3
 8000f9a:	491c      	ldr	r1, [pc, #112]	@ (800100c <main+0x1e8>)
 8000f9c:	4813      	ldr	r0, [pc, #76]	@ (8000fec <main+0x1c8>)
 8000f9e:	f002 fad4 	bl	800354a <HAL_UART_Receive>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d103      	bne.n	8000fb0 <main+0x18c>
			  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000fa8:	2104      	movs	r1, #4
 8000faa:	4815      	ldr	r0, [pc, #84]	@ (8001000 <main+0x1dc>)
 8000fac:	f000 ff2b 	bl	8001e06 <HAL_GPIO_TogglePin>
		  }

		  position = rxData[1] + rxData[2]*200 - 20000;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	@ (800100c <main+0x1e8>)
 8000fb2:	785b      	ldrb	r3, [r3, #1]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b15      	ldr	r3, [pc, #84]	@ (800100c <main+0x1e8>)
 8000fb8:	789b      	ldrb	r3, [r3, #2]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	0089      	lsls	r1, r1, #2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	0088      	lsls	r0, r1, #2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	440b      	add	r3, r1
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	4413      	add	r3, r2
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	f5a3 439c 	sub.w	r3, r3, #19968	@ 0x4e00
 8000fd6:	3b20      	subs	r3, #32
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <main+0x1ec>)
 8000fde:	801a      	strh	r2, [r3, #0]
	  dtime = m_counter - d_pcounter;
 8000fe0:	e741      	b.n	8000e66 <main+0x42>
 8000fe2:	bf00      	nop
 8000fe4:	20000034 	.word	0x20000034
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	2000007c 	.word	0x2000007c
 8000ff0:	200000c4 	.word	0x200000c4
 8000ff4:	200000da 	.word	0x200000da
 8000ff8:	200000d2 	.word	0x200000d2
 8000ffc:	200000d0 	.word	0x200000d0
 8001000:	40020400 	.word	0x40020400
 8001004:	3f333333 	.word	0x3f333333
 8001008:	200000c8 	.word	0x200000c8
 800100c:	200000d4 	.word	0x200000d4
 8001010:	200000d8 	.word	0x200000d8

08001014 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b094      	sub	sp, #80	@ 0x50
 8001018:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	2234      	movs	r2, #52	@ 0x34
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f002 fe58 	bl	8003cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	4b2c      	ldr	r3, [pc, #176]	@ (80010f0 <SystemClock_Config+0xdc>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001040:	4a2b      	ldr	r2, [pc, #172]	@ (80010f0 <SystemClock_Config+0xdc>)
 8001042:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001046:	6413      	str	r3, [r2, #64]	@ 0x40
 8001048:	4b29      	ldr	r3, [pc, #164]	@ (80010f0 <SystemClock_Config+0xdc>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001054:	2300      	movs	r3, #0
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	4b26      	ldr	r3, [pc, #152]	@ (80010f4 <SystemClock_Config+0xe0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a25      	ldr	r2, [pc, #148]	@ (80010f4 <SystemClock_Config+0xe0>)
 800105e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	4b23      	ldr	r3, [pc, #140]	@ (80010f4 <SystemClock_Config+0xe0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800106c:	603b      	str	r3, [r7, #0]
 800106e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001070:	2301      	movs	r3, #1
 8001072:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001074:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001078:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107a:	2302      	movs	r3, #2
 800107c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800107e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001082:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001084:	2308      	movs	r3, #8
 8001086:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001088:	23b4      	movs	r3, #180	@ 0xb4
 800108a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800108c:	2302      	movs	r3, #2
 800108e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001090:	2302      	movs	r3, #2
 8001092:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001094:	2302      	movs	r3, #2
 8001096:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	4618      	mov	r0, r3
 800109e:	f001 fa65 	bl	800256c <HAL_RCC_OscConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010a8:	f000 fa52 	bl	8001550 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010ac:	f000 fec6 	bl	8001e3c <HAL_PWREx_EnableOverDrive>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010b6:	f000 fa4b 	bl	8001550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ba:	230f      	movs	r3, #15
 80010bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010be:	2302      	movs	r3, #2
 80010c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010c6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80010cc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010d0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	2105      	movs	r1, #5
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 feff 	bl	8001edc <HAL_RCC_ClockConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80010e4:	f000 fa34 	bl	8001550 <Error_Handler>
  }
}
 80010e8:	bf00      	nop
 80010ea:	3750      	adds	r7, #80	@ 0x50
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40007000 	.word	0x40007000

080010f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110c:	463b      	mov	r3, r7
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001114:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <MX_TIM2_Init+0x94>)
 8001116:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800111a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 800111c:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <MX_TIM2_Init+0x94>)
 800111e:	2259      	movs	r2, #89	@ 0x59
 8001120:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001122:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <MX_TIM2_Init+0x94>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001128:	4b18      	ldr	r3, [pc, #96]	@ (800118c <MX_TIM2_Init+0x94>)
 800112a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800112e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001130:	4b16      	ldr	r3, [pc, #88]	@ (800118c <MX_TIM2_Init+0x94>)
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001136:	4b15      	ldr	r3, [pc, #84]	@ (800118c <MX_TIM2_Init+0x94>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800113c:	4813      	ldr	r0, [pc, #76]	@ (800118c <MX_TIM2_Init+0x94>)
 800113e:	f001 fcb3 	bl	8002aa8 <HAL_TIM_Base_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001148:	f000 fa02 	bl	8001550 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001150:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001152:	f107 0308 	add.w	r3, r7, #8
 8001156:	4619      	mov	r1, r3
 8001158:	480c      	ldr	r0, [pc, #48]	@ (800118c <MX_TIM2_Init+0x94>)
 800115a:	f001 fe55 	bl	8002e08 <HAL_TIM_ConfigClockSource>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001164:	f000 f9f4 	bl	8001550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001168:	2300      	movs	r3, #0
 800116a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001170:	463b      	mov	r3, r7
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	@ (800118c <MX_TIM2_Init+0x94>)
 8001176:	f002 f87d 	bl	8003274 <HAL_TIMEx_MasterConfigSynchronization>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001180:	f000 f9e6 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000034 	.word	0x20000034

08001190 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 8001196:	4a12      	ldr	r2, [pc, #72]	@ (80011e0 <MX_USART6_UART_Init+0x50>)
 8001198:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 800119c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011c8:	f002 f8e4 	bl	8003394 <HAL_UART_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80011d2:	f000 f9bd 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000007c 	.word	0x2000007c
 80011e0:	40011400 	.word	0x40011400

080011e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	4b26      	ldr	r3, [pc, #152]	@ (8001298 <MX_GPIO_Init+0xb4>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	4a25      	ldr	r2, [pc, #148]	@ (8001298 <MX_GPIO_Init+0xb4>)
 8001204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001208:	6313      	str	r3, [r2, #48]	@ 0x30
 800120a:	4b23      	ldr	r3, [pc, #140]	@ (8001298 <MX_GPIO_Init+0xb4>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4b1f      	ldr	r3, [pc, #124]	@ (8001298 <MX_GPIO_Init+0xb4>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	4a1e      	ldr	r2, [pc, #120]	@ (8001298 <MX_GPIO_Init+0xb4>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	@ 0x30
 8001226:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <MX_GPIO_Init+0xb4>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	4b18      	ldr	r3, [pc, #96]	@ (8001298 <MX_GPIO_Init+0xb4>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a17      	ldr	r2, [pc, #92]	@ (8001298 <MX_GPIO_Init+0xb4>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <MX_GPIO_Init+0xb4>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|LED1_Pin, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2114      	movs	r1, #20
 8001252:	4812      	ldr	r0, [pc, #72]	@ (800129c <MX_GPIO_Init+0xb8>)
 8001254:	f000 fdbe 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LED1_Pin;
 8001258:	2314      	movs	r3, #20
 800125a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	2301      	movs	r3, #1
 800125e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	4619      	mov	r1, r3
 800126e:	480b      	ldr	r0, [pc, #44]	@ (800129c <MX_GPIO_Init+0xb8>)
 8001270:	f000 fc04 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : STRTSW_Pin */
  GPIO_InitStruct.Pin = STRTSW_Pin;
 8001274:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001278:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(STRTSW_GPIO_Port, &GPIO_InitStruct);
 8001282:	f107 030c 	add.w	r3, r7, #12
 8001286:	4619      	mov	r1, r3
 8001288:	4804      	ldr	r0, [pc, #16]	@ (800129c <MX_GPIO_Init+0xb8>)
 800128a:	f000 fbf7 	bl	8001a7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800128e:	bf00      	nop
 8001290:	3720      	adds	r7, #32
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800
 800129c:	40020400 	.word	0x40020400

080012a0 <speed_set>:

/* USER CODE BEGIN 4 */
void speed_set(int gyro_degree, int goal_speed, int goal_degree, int16_t* mtrspeed, float motor_rate){
 80012a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012a4:	b08a      	sub	sp, #40	@ 0x28
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6178      	str	r0, [r7, #20]
 80012aa:	6139      	str	r1, [r7, #16]
 80012ac:	60fa      	str	r2, [r7, #12]
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	ed87 0a01 	vstr	s0, [r7, #4]
	goal_degree = goal_degree % 360;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4a6e      	ldr	r2, [pc, #440]	@ (8001470 <speed_set+0x1d0>)
 80012b8:	fb82 1203 	smull	r1, r2, r2, r3
 80012bc:	441a      	add	r2, r3
 80012be:	1211      	asrs	r1, r2, #8
 80012c0:	17da      	asrs	r2, r3, #31
 80012c2:	1a8a      	subs	r2, r1, r2
 80012c4:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80012c8:	fb01 f202 	mul.w	r2, r1, r2
 80012cc:	1a9b      	subs	r3, r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]
	if(goal_degree < 0){goal_degree += 360;}
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	da03      	bge.n	80012de <speed_set+0x3e>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80012dc:	60fb      	str	r3, [r7, #12]
//    int roll_speed;
//	gyro_degree = gyro_degree % 360;
//	if(gyro_degree < 0){gyro_degree += 360;}

    int roll_speed;
    if(gyro_degree > 180){gyro_degree -= 360;}
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	2bb4      	cmp	r3, #180	@ 0xb4
 80012e2:	dd04      	ble.n	80012ee <speed_set+0x4e>
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	e007      	b.n	80012fe <speed_set+0x5e>
    else if(gyro_degree <-180){gyro_degree += 360;}
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	f113 0fb4 	cmn.w	r3, #180	@ 0xb4
 80012f4:	da03      	bge.n	80012fe <speed_set+0x5e>
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80012fc:	617b      	str	r3, [r7, #20]
    else{}


    if (gyro_degree > 0){
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	2b00      	cmp	r3, #0
 8001302:	dd12      	ble.n	800132a <speed_set+0x8a>
        roll_speed = -10 + (-gyro_degree * 3);
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	461a      	mov	r2, r3
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	3b0a      	subs	r3, #10
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24
        if (gyro_degree < 6){
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	2b05      	cmp	r3, #5
 8001314:	dc01      	bgt.n	800131a <speed_set+0x7a>
            roll_speed = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        if (roll_speed < -150){
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131c:	f113 0f96 	cmn.w	r3, #150	@ 0x96
 8001320:	da1a      	bge.n	8001358 <speed_set+0xb8>
            roll_speed = -150;
 8001322:	f06f 0395 	mvn.w	r3, #149	@ 0x95
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
 8001328:	e016      	b.n	8001358 <speed_set+0xb8>
        }
    }else if (gyro_degree < 0){
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2b00      	cmp	r3, #0
 800132e:	da11      	bge.n	8001354 <speed_set+0xb4>
        roll_speed = 10 + (-gyro_degree * 3);
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	461a      	mov	r2, r3
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	330a      	adds	r3, #10
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
        if (gyro_degree > -6){
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	f113 0f05 	cmn.w	r3, #5
 8001342:	db01      	blt.n	8001348 <speed_set+0xa8>
            roll_speed = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        if (roll_speed > 150){
 8001348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134a:	2b96      	cmp	r3, #150	@ 0x96
 800134c:	dd04      	ble.n	8001358 <speed_set+0xb8>
            roll_speed = 150;
 800134e:	2396      	movs	r3, #150	@ 0x96
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
 8001352:	e001      	b.n	8001358 <speed_set+0xb8>
        }
    }else{
        roll_speed = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
    }


	int conv_degree = -goal_degree + 45;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f1c3 032d 	rsb	r3, r3, #45	@ 0x2d
 800135e:	623b      	str	r3, [r7, #32]
	if(conv_degree < 0){conv_degree = conv_degree + 360;}
 8001360:	6a3b      	ldr	r3, [r7, #32]
 8001362:	2b00      	cmp	r3, #0
 8001364:	da03      	bge.n	800136e <speed_set+0xce>
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800136c:	623b      	str	r3, [r7, #32]

	for(int i=0; i<4; i++){
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	e070      	b.n	8001456 <speed_set+0x1b6>
		mtrspeed[i] = goal_speed * sin((conv_degree + 90.0*i) / 180.0 * 3.1415);
 8001374:	6938      	ldr	r0, [r7, #16]
 8001376:	f7ff f899 	bl	80004ac <__aeabi_i2d>
 800137a:	4604      	mov	r4, r0
 800137c:	460d      	mov	r5, r1
 800137e:	6a38      	ldr	r0, [r7, #32]
 8001380:	f7ff f894 	bl	80004ac <__aeabi_i2d>
 8001384:	4680      	mov	r8, r0
 8001386:	4689      	mov	r9, r1
 8001388:	69f8      	ldr	r0, [r7, #28]
 800138a:	f7ff f88f 	bl	80004ac <__aeabi_i2d>
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	4b38      	ldr	r3, [pc, #224]	@ (8001474 <speed_set+0x1d4>)
 8001394:	f7ff f8f4 	bl	8000580 <__aeabi_dmul>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4640      	mov	r0, r8
 800139e:	4649      	mov	r1, r9
 80013a0:	f7fe ff38 	bl	8000214 <__adddf3>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b31      	ldr	r3, [pc, #196]	@ (8001478 <speed_set+0x1d8>)
 80013b2:	f7ff fa0f 	bl	80007d4 <__aeabi_ddiv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	a32a      	add	r3, pc, #168	@ (adr r3, 8001468 <speed_set+0x1c8>)
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	f7ff f8dc 	bl	8000580 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	ec43 2b17 	vmov	d7, r2, r3
 80013d0:	eeb0 0a47 	vmov.f32	s0, s14
 80013d4:	eef0 0a67 	vmov.f32	s1, s15
 80013d8:	f002 fcaa 	bl	8003d30 <sin>
 80013dc:	ec53 2b10 	vmov	r2, r3, d0
 80013e0:	4620      	mov	r0, r4
 80013e2:	4629      	mov	r1, r5
 80013e4:	f7ff f8cc 	bl	8000580 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	68ba      	ldr	r2, [r7, #8]
 80013f6:	18d4      	adds	r4, r2, r3
 80013f8:	f7ff fb5c 	bl	8000ab4 <__aeabi_d2iz>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b21b      	sxth	r3, r3
 8001400:	8023      	strh	r3, [r4, #0]
		mtrspeed[i] = (mtrspeed[i] * motor_rate) + (roll_speed * (1 - motor_rate));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	4413      	add	r3, r2
 800140a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140e:	ee07 3a90 	vmov	s15, r3
 8001412:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001416:	edd7 7a01 	vldr	s15, [r7, #4]
 800141a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800141e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001420:	ee07 3a90 	vmov	s15, r3
 8001424:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001428:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800142c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001430:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	4413      	add	r3, r2
 8001444:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001448:	ee17 2a90 	vmov	r2, s15
 800144c:	b212      	sxth	r2, r2
 800144e:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<4; i++){
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	3301      	adds	r3, #1
 8001454:	61fb      	str	r3, [r7, #28]
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	2b03      	cmp	r3, #3
 800145a:	dd8b      	ble.n	8001374 <speed_set+0xd4>
	}
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3728      	adds	r7, #40	@ 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001468:	c083126f 	.word	0xc083126f
 800146c:	400921ca 	.word	0x400921ca
 8001470:	b60b60b7 	.word	0xb60b60b7
 8001474:	40568000 	.word	0x40568000
 8001478:	40668000 	.word	0x40668000

0800147c <set_array>:

void set_array(int16_t* mtrspeed, uint8_t* sendarray){
 800147c:	b480      	push	{r7}
 800147e:	b087      	sub	sp, #28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
	uint16_t conv_mtrspeed[4];
	for(int i=0; i<4; i++){conv_mtrspeed[i] = mtrspeed[i] + 5000;}
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	e013      	b.n	80014b4 <set_array+0x38>
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001498:	b29b      	uxth	r3, r3
 800149a:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800149e:	3308      	adds	r3, #8
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	3318      	adds	r3, #24
 80014a8:	443b      	add	r3, r7
 80014aa:	f823 2c10 	strh.w	r2, [r3, #-16]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3301      	adds	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	dde8      	ble.n	800148c <set_array+0x10>
	for(int i=0; i<4; i++){
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	e03a      	b.n	8001536 <set_array+0xba>
		sendarray[3*i] = 250+i;
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	b2d9      	uxtb	r1, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4613      	mov	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4413      	add	r3, r2
 80014cc:	461a      	mov	r2, r3
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	4413      	add	r3, r2
 80014d2:	1f8a      	subs	r2, r1, #6
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	701a      	strb	r2, [r3, #0]
		sendarray[3*i+1] = conv_mtrspeed[i] % 100;
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	3318      	adds	r3, #24
 80014de:	443b      	add	r3, r7
 80014e0:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80014e4:	4a19      	ldr	r2, [pc, #100]	@ (800154c <set_array+0xd0>)
 80014e6:	fba2 1203 	umull	r1, r2, r2, r3
 80014ea:	0952      	lsrs	r2, r2, #5
 80014ec:	2164      	movs	r1, #100	@ 0x64
 80014ee:	fb01 f202 	mul.w	r2, r1, r2
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	b299      	uxth	r1, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	3301      	adds	r3, #1
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	4413      	add	r3, r2
 8001504:	b2ca      	uxtb	r2, r1
 8001506:	701a      	strb	r2, [r3, #0]
		sendarray[3*i+2] = conv_mtrspeed[i] / 100;
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	3318      	adds	r3, #24
 800150e:	443b      	add	r3, r7
 8001510:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001514:	4a0d      	ldr	r2, [pc, #52]	@ (800154c <set_array+0xd0>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	095b      	lsrs	r3, r3, #5
 800151c:	b299      	uxth	r1, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4613      	mov	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4413      	add	r3, r2
 8001526:	3302      	adds	r3, #2
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	4413      	add	r3, r2
 800152c:	b2ca      	uxtb	r2, r1
 800152e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<4; i++){
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	3301      	adds	r3, #1
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	2b03      	cmp	r3, #3
 800153a:	ddc1      	ble.n	80014c0 <set_array+0x44>
	}
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	371c      	adds	r7, #28
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	51eb851f 	.word	0x51eb851f

08001550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001554:	b672      	cpsid	i
}
 8001556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <Error_Handler+0x8>

0800155c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <HAL_MspInit+0x4c>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156a:	4a0f      	ldr	r2, [pc, #60]	@ (80015a8 <HAL_MspInit+0x4c>)
 800156c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001570:	6453      	str	r3, [r2, #68]	@ 0x44
 8001572:	4b0d      	ldr	r3, [pc, #52]	@ (80015a8 <HAL_MspInit+0x4c>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	603b      	str	r3, [r7, #0]
 8001582:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <HAL_MspInit+0x4c>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	4a08      	ldr	r2, [pc, #32]	@ (80015a8 <HAL_MspInit+0x4c>)
 8001588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800158c:	6413      	str	r3, [r2, #64]	@ 0x40
 800158e:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <HAL_MspInit+0x4c>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800

080015ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015bc:	d115      	bne.n	80015ea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <HAL_TIM_Base_MspInit+0x48>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	4a0b      	ldr	r2, [pc, #44]	@ (80015f4 <HAL_TIM_Base_MspInit+0x48>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <HAL_TIM_Base_MspInit+0x48>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	201c      	movs	r0, #28
 80015e0:	f000 fa15 	bl	8001a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015e4:	201c      	movs	r0, #28
 80015e6:	f000 fa2e 	bl	8001a46 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800

080015f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	@ 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a19      	ldr	r2, [pc, #100]	@ (800167c <HAL_UART_MspInit+0x84>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d12b      	bne.n	8001672 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <HAL_UART_MspInit+0x88>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001622:	4a17      	ldr	r2, [pc, #92]	@ (8001680 <HAL_UART_MspInit+0x88>)
 8001624:	f043 0320 	orr.w	r3, r3, #32
 8001628:	6453      	str	r3, [r2, #68]	@ 0x44
 800162a:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <HAL_UART_MspInit+0x88>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162e:	f003 0320 	and.w	r3, r3, #32
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <HAL_UART_MspInit+0x88>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	4a10      	ldr	r2, [pc, #64]	@ (8001680 <HAL_UART_MspInit+0x88>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	6313      	str	r3, [r2, #48]	@ 0x30
 8001646:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <HAL_UART_MspInit+0x88>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001652:	23c0      	movs	r3, #192	@ 0xc0
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165e:	2303      	movs	r3, #3
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001662:	2308      	movs	r3, #8
 8001664:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	4805      	ldr	r0, [pc, #20]	@ (8001684 <HAL_UART_MspInit+0x8c>)
 800166e:	f000 fa05 	bl	8001a7c <HAL_GPIO_Init>

  /* USER CODE END USART6_MspInit 1 */

  }

}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	@ 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40011400 	.word	0x40011400
 8001680:	40023800 	.word	0x40023800
 8001684:	40020800 	.word	0x40020800

08001688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <NMI_Handler+0x4>

08001690 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <HardFault_Handler+0x4>

08001698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <MemManage_Handler+0x4>

080016a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <BusFault_Handler+0x4>

080016a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <UsageFault_Handler+0x4>

080016b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016de:	f000 f89b 	bl	8001818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016ec:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <TIM2_IRQHandler+0x10>)
 80016ee:	f001 fa9b 	bl	8002c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000034 	.word	0x20000034

080016fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <SystemInit+0x20>)
 8001702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001706:	4a05      	ldr	r2, [pc, #20]	@ (800171c <SystemInit+0x20>)
 8001708:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800170c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001720:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001758 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001724:	f7ff ffea 	bl	80016fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001728:	480c      	ldr	r0, [pc, #48]	@ (800175c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800172a:	490d      	ldr	r1, [pc, #52]	@ (8001760 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800172c:	4a0d      	ldr	r2, [pc, #52]	@ (8001764 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001730:	e002      	b.n	8001738 <LoopCopyDataInit>

08001732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001736:	3304      	adds	r3, #4

08001738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800173c:	d3f9      	bcc.n	8001732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173e:	4a0a      	ldr	r2, [pc, #40]	@ (8001768 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001740:	4c0a      	ldr	r4, [pc, #40]	@ (800176c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001744:	e001      	b.n	800174a <LoopFillZerobss>

08001746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001748:	3204      	adds	r2, #4

0800174a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800174c:	d3fb      	bcc.n	8001746 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800174e:	f002 facb 	bl	8003ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001752:	f7ff fb67 	bl	8000e24 <main>
  bx  lr    
 8001756:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001758:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800175c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001760:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001764:	08004fa8 	.word	0x08004fa8
  ldr r2, =_sbss
 8001768:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800176c:	200000e0 	.word	0x200000e0

08001770 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001770:	e7fe      	b.n	8001770 <ADC_IRQHandler>
	...

08001774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001778:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <HAL_Init+0x40>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0d      	ldr	r2, [pc, #52]	@ (80017b4 <HAL_Init+0x40>)
 800177e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001782:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001784:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <HAL_Init+0x40>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0a      	ldr	r2, [pc, #40]	@ (80017b4 <HAL_Init+0x40>)
 800178a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800178e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001790:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <HAL_Init+0x40>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a07      	ldr	r2, [pc, #28]	@ (80017b4 <HAL_Init+0x40>)
 8001796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800179a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179c:	2003      	movs	r0, #3
 800179e:	f000 f92b 	bl	80019f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a2:	200f      	movs	r0, #15
 80017a4:	f000 f808 	bl	80017b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a8:	f7ff fed8 	bl	800155c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023c00 	.word	0x40023c00

080017b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c0:	4b12      	ldr	r3, [pc, #72]	@ (800180c <HAL_InitTick+0x54>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <HAL_InitTick+0x58>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f943 	bl	8001a62 <HAL_SYSTICK_Config>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00e      	b.n	8001804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b0f      	cmp	r3, #15
 80017ea:	d80a      	bhi.n	8001802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ec:	2200      	movs	r2, #0
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f000 f90b 	bl	8001a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f8:	4a06      	ldr	r2, [pc, #24]	@ (8001814 <HAL_InitTick+0x5c>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	e000      	b.n	8001804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	2000000c 	.word	0x2000000c
 8001810:	20000014 	.word	0x20000014
 8001814:	20000010 	.word	0x20000010

08001818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800181c:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <HAL_IncTick+0x20>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <HAL_IncTick+0x24>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4413      	add	r3, r2
 8001828:	4a04      	ldr	r2, [pc, #16]	@ (800183c <HAL_IncTick+0x24>)
 800182a:	6013      	str	r3, [r2, #0]
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000014 	.word	0x20000014
 800183c:	200000dc 	.word	0x200000dc

08001840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return uwTick;
 8001844:	4b03      	ldr	r3, [pc, #12]	@ (8001854 <HAL_GetTick+0x14>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	200000dc 	.word	0x200000dc

08001858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001868:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001874:	4013      	ands	r3, r2
 8001876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001880:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188a:	4a04      	ldr	r2, [pc, #16]	@ (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	60d3      	str	r3, [r2, #12]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a4:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <__NVIC_GetPriorityGrouping+0x18>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	f003 0307 	and.w	r3, r3, #7
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	db0b      	blt.n	80018e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	f003 021f 	and.w	r2, r3, #31
 80018d4:	4907      	ldr	r1, [pc, #28]	@ (80018f4 <__NVIC_EnableIRQ+0x38>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	2001      	movs	r0, #1
 80018de:	fa00 f202 	lsl.w	r2, r0, r2
 80018e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000e100 	.word	0xe000e100

080018f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	db0a      	blt.n	8001922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	490c      	ldr	r1, [pc, #48]	@ (8001944 <__NVIC_SetPriority+0x4c>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	0112      	lsls	r2, r2, #4
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	440b      	add	r3, r1
 800191c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001920:	e00a      	b.n	8001938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4908      	ldr	r1, [pc, #32]	@ (8001948 <__NVIC_SetPriority+0x50>)
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	3b04      	subs	r3, #4
 8001930:	0112      	lsls	r2, r2, #4
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	440b      	add	r3, r1
 8001936:	761a      	strb	r2, [r3, #24]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000e100 	.word	0xe000e100
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	@ 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f1c3 0307 	rsb	r3, r3, #7
 8001966:	2b04      	cmp	r3, #4
 8001968:	bf28      	it	cs
 800196a:	2304      	movcs	r3, #4
 800196c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3304      	adds	r3, #4
 8001972:	2b06      	cmp	r3, #6
 8001974:	d902      	bls.n	800197c <NVIC_EncodePriority+0x30>
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3b03      	subs	r3, #3
 800197a:	e000      	b.n	800197e <NVIC_EncodePriority+0x32>
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	f04f 32ff 	mov.w	r2, #4294967295
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43da      	mvns	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	401a      	ands	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001994:	f04f 31ff 	mov.w	r1, #4294967295
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	43d9      	mvns	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	4313      	orrs	r3, r2
         );
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3724      	adds	r7, #36	@ 0x24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019c4:	d301      	bcc.n	80019ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00f      	b.n	80019ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ca:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <SysTick_Config+0x40>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d2:	210f      	movs	r1, #15
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f7ff ff8e 	bl	80018f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019dc:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <SysTick_Config+0x40>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e2:	4b04      	ldr	r3, [pc, #16]	@ (80019f4 <SysTick_Config+0x40>)
 80019e4:	2207      	movs	r2, #7
 80019e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	e000e010 	.word	0xe000e010

080019f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ff29 	bl	8001858 <__NVIC_SetPriorityGrouping>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b086      	sub	sp, #24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a20:	f7ff ff3e 	bl	80018a0 <__NVIC_GetPriorityGrouping>
 8001a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	6978      	ldr	r0, [r7, #20]
 8001a2c:	f7ff ff8e 	bl	800194c <NVIC_EncodePriority>
 8001a30:	4602      	mov	r2, r0
 8001a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a36:	4611      	mov	r1, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff5d 	bl	80018f8 <__NVIC_SetPriority>
}
 8001a3e:	bf00      	nop
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff31 	bl	80018bc <__NVIC_EnableIRQ>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ffa2 	bl	80019b4 <SysTick_Config>
 8001a70:	4603      	mov	r3, r0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	@ 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	e165      	b.n	8001d64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a98:	2201      	movs	r2, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	f040 8154 	bne.w	8001d5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d005      	beq.n	8001ace <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d130      	bne.n	8001b30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	2203      	movs	r2, #3
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b04:	2201      	movs	r2, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 0201 	and.w	r2, r3, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d017      	beq.n	8001b6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d123      	bne.n	8001bc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	08da      	lsrs	r2, r3, #3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3208      	adds	r2, #8
 8001b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	220f      	movs	r2, #15
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	08da      	lsrs	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3208      	adds	r2, #8
 8001bba:	69b9      	ldr	r1, [r7, #24]
 8001bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0203 	and.w	r2, r3, #3
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 80ae 	beq.w	8001d5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b5d      	ldr	r3, [pc, #372]	@ (8001d7c <HAL_GPIO_Init+0x300>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0a:	4a5c      	ldr	r2, [pc, #368]	@ (8001d7c <HAL_GPIO_Init+0x300>)
 8001c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c12:	4b5a      	ldr	r3, [pc, #360]	@ (8001d7c <HAL_GPIO_Init+0x300>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1e:	4a58      	ldr	r2, [pc, #352]	@ (8001d80 <HAL_GPIO_Init+0x304>)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	3302      	adds	r3, #2
 8001c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	220f      	movs	r2, #15
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a4f      	ldr	r2, [pc, #316]	@ (8001d84 <HAL_GPIO_Init+0x308>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d025      	beq.n	8001c96 <HAL_GPIO_Init+0x21a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4e      	ldr	r2, [pc, #312]	@ (8001d88 <HAL_GPIO_Init+0x30c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d01f      	beq.n	8001c92 <HAL_GPIO_Init+0x216>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4d      	ldr	r2, [pc, #308]	@ (8001d8c <HAL_GPIO_Init+0x310>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d019      	beq.n	8001c8e <HAL_GPIO_Init+0x212>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4c      	ldr	r2, [pc, #304]	@ (8001d90 <HAL_GPIO_Init+0x314>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d013      	beq.n	8001c8a <HAL_GPIO_Init+0x20e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4b      	ldr	r2, [pc, #300]	@ (8001d94 <HAL_GPIO_Init+0x318>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00d      	beq.n	8001c86 <HAL_GPIO_Init+0x20a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4a      	ldr	r2, [pc, #296]	@ (8001d98 <HAL_GPIO_Init+0x31c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d007      	beq.n	8001c82 <HAL_GPIO_Init+0x206>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a49      	ldr	r2, [pc, #292]	@ (8001d9c <HAL_GPIO_Init+0x320>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_GPIO_Init+0x202>
 8001c7a:	2306      	movs	r3, #6
 8001c7c:	e00c      	b.n	8001c98 <HAL_GPIO_Init+0x21c>
 8001c7e:	2307      	movs	r3, #7
 8001c80:	e00a      	b.n	8001c98 <HAL_GPIO_Init+0x21c>
 8001c82:	2305      	movs	r3, #5
 8001c84:	e008      	b.n	8001c98 <HAL_GPIO_Init+0x21c>
 8001c86:	2304      	movs	r3, #4
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x21c>
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e004      	b.n	8001c98 <HAL_GPIO_Init+0x21c>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e002      	b.n	8001c98 <HAL_GPIO_Init+0x21c>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_GPIO_Init+0x21c>
 8001c96:	2300      	movs	r3, #0
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	f002 0203 	and.w	r2, r2, #3
 8001c9e:	0092      	lsls	r2, r2, #2
 8001ca0:	4093      	lsls	r3, r2
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca8:	4935      	ldr	r1, [pc, #212]	@ (8001d80 <HAL_GPIO_Init+0x304>)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8001da0 <HAL_GPIO_Init+0x324>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cda:	4a31      	ldr	r2, [pc, #196]	@ (8001da0 <HAL_GPIO_Init+0x324>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce0:	4b2f      	ldr	r3, [pc, #188]	@ (8001da0 <HAL_GPIO_Init+0x324>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d04:	4a26      	ldr	r2, [pc, #152]	@ (8001da0 <HAL_GPIO_Init+0x324>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d0a:	4b25      	ldr	r3, [pc, #148]	@ (8001da0 <HAL_GPIO_Init+0x324>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001da0 <HAL_GPIO_Init+0x324>)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d34:	4b1a      	ldr	r3, [pc, #104]	@ (8001da0 <HAL_GPIO_Init+0x324>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d58:	4a11      	ldr	r2, [pc, #68]	@ (8001da0 <HAL_GPIO_Init+0x324>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3301      	adds	r3, #1
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	2b0f      	cmp	r3, #15
 8001d68:	f67f ae96 	bls.w	8001a98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3724      	adds	r7, #36	@ 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40013800 	.word	0x40013800
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	40020800 	.word	0x40020800
 8001d90:	40020c00 	.word	0x40020c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40021400 	.word	0x40021400
 8001d9c:	40021800 	.word	0x40021800
 8001da0:	40013c00 	.word	0x40013c00

08001da4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	887b      	ldrh	r3, [r7, #2]
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d002      	beq.n	8001dc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
 8001dc0:	e001      	b.n	8001dc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	807b      	strh	r3, [r7, #2]
 8001de0:	4613      	mov	r3, r2
 8001de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de4:	787b      	ldrb	r3, [r7, #1]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dea:	887a      	ldrh	r2, [r7, #2]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001df0:	e003      	b.n	8001dfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001df2:	887b      	ldrh	r3, [r7, #2]
 8001df4:	041a      	lsls	r2, r3, #16
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	619a      	str	r2, [r3, #24]
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b085      	sub	sp, #20
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e18:	887a      	ldrh	r2, [r7, #2]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	041a      	lsls	r2, r3, #16
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	43d9      	mvns	r1, r3
 8001e24:	887b      	ldrh	r3, [r7, #2]
 8001e26:	400b      	ands	r3, r1
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	619a      	str	r2, [r3, #24]
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	4b20      	ldr	r3, [pc, #128]	@ (8001ecc <HAL_PWREx_EnableOverDrive+0x90>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8001ecc <HAL_PWREx_EnableOverDrive+0x90>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e56:	4b1d      	ldr	r3, [pc, #116]	@ (8001ecc <HAL_PWREx_EnableOverDrive+0x90>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e62:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed0 <HAL_PWREx_EnableOverDrive+0x94>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e68:	f7ff fcea 	bl	8001840 <HAL_GetTick>
 8001e6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e6e:	e009      	b.n	8001e84 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e70:	f7ff fce6 	bl	8001840 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e7e:	d901      	bls.n	8001e84 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e01f      	b.n	8001ec4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e84:	4b13      	ldr	r3, [pc, #76]	@ (8001ed4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e90:	d1ee      	bne.n	8001e70 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e92:	4b11      	ldr	r3, [pc, #68]	@ (8001ed8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e98:	f7ff fcd2 	bl	8001840 <HAL_GetTick>
 8001e9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e9e:	e009      	b.n	8001eb4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ea0:	f7ff fcce 	bl	8001840 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001eae:	d901      	bls.n	8001eb4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e007      	b.n	8001ec4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001eb4:	4b07      	ldr	r3, [pc, #28]	@ (8001ed4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001ec0:	d1ee      	bne.n	8001ea0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	420e0040 	.word	0x420e0040
 8001ed4:	40007000 	.word	0x40007000
 8001ed8:	420e0044 	.word	0x420e0044

08001edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0cc      	b.n	800208a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef0:	4b68      	ldr	r3, [pc, #416]	@ (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d90c      	bls.n	8001f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efe:	4b65      	ldr	r3, [pc, #404]	@ (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	4b63      	ldr	r3, [pc, #396]	@ (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0b8      	b.n	800208a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d020      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f30:	4b59      	ldr	r3, [pc, #356]	@ (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	4a58      	ldr	r2, [pc, #352]	@ (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f48:	4b53      	ldr	r3, [pc, #332]	@ (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	4a52      	ldr	r2, [pc, #328]	@ (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f54:	4b50      	ldr	r3, [pc, #320]	@ (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	494d      	ldr	r1, [pc, #308]	@ (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d044      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d107      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	4b47      	ldr	r3, [pc, #284]	@ (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d119      	bne.n	8001fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e07f      	b.n	800208a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d003      	beq.n	8001f9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d107      	bne.n	8001faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9a:	4b3f      	ldr	r3, [pc, #252]	@ (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e06f      	b.n	800208a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001faa:	4b3b      	ldr	r3, [pc, #236]	@ (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e067      	b.n	800208a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fba:	4b37      	ldr	r3, [pc, #220]	@ (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f023 0203 	bic.w	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4934      	ldr	r1, [pc, #208]	@ (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fcc:	f7ff fc38 	bl	8001840 <HAL_GetTick>
 8001fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	e00a      	b.n	8001fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd4:	f7ff fc34 	bl	8001840 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e04f      	b.n	800208a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fea:	4b2b      	ldr	r3, [pc, #172]	@ (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 020c 	and.w	r2, r3, #12
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d1eb      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b25      	ldr	r3, [pc, #148]	@ (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d20c      	bcs.n	8002024 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b22      	ldr	r3, [pc, #136]	@ (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002012:	4b20      	ldr	r3, [pc, #128]	@ (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e032      	b.n	800208a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d008      	beq.n	8002042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002030:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4916      	ldr	r1, [pc, #88]	@ (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	4313      	orrs	r3, r2
 8002040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d009      	beq.n	8002062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800204e:	4b12      	ldr	r3, [pc, #72]	@ (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	490e      	ldr	r1, [pc, #56]	@ (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	4313      	orrs	r3, r2
 8002060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002062:	f000 f855 	bl	8002110 <HAL_RCC_GetSysClockFreq>
 8002066:	4602      	mov	r2, r0
 8002068:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	490a      	ldr	r1, [pc, #40]	@ (800209c <HAL_RCC_ClockConfig+0x1c0>)
 8002074:	5ccb      	ldrb	r3, [r1, r3]
 8002076:	fa22 f303 	lsr.w	r3, r2, r3
 800207a:	4a09      	ldr	r2, [pc, #36]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800207e:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fb98 	bl	80017b8 <HAL_InitTick>

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40023c00 	.word	0x40023c00
 8002098:	40023800 	.word	0x40023800
 800209c:	08004da8 	.word	0x08004da8
 80020a0:	2000000c 	.word	0x2000000c
 80020a4:	20000010 	.word	0x20000010

080020a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020ac:	4b03      	ldr	r3, [pc, #12]	@ (80020bc <HAL_RCC_GetHCLKFreq+0x14>)
 80020ae:	681b      	ldr	r3, [r3, #0]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	2000000c 	.word	0x2000000c

080020c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020c4:	f7ff fff0 	bl	80020a8 <HAL_RCC_GetHCLKFreq>
 80020c8:	4602      	mov	r2, r0
 80020ca:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	0a9b      	lsrs	r3, r3, #10
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	4903      	ldr	r1, [pc, #12]	@ (80020e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020d6:	5ccb      	ldrb	r3, [r1, r3]
 80020d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020dc:	4618      	mov	r0, r3
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40023800 	.word	0x40023800
 80020e4:	08004db8 	.word	0x08004db8

080020e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020ec:	f7ff ffdc 	bl	80020a8 <HAL_RCC_GetHCLKFreq>
 80020f0:	4602      	mov	r2, r0
 80020f2:	4b05      	ldr	r3, [pc, #20]	@ (8002108 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	0b5b      	lsrs	r3, r3, #13
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	4903      	ldr	r1, [pc, #12]	@ (800210c <HAL_RCC_GetPCLK2Freq+0x24>)
 80020fe:	5ccb      	ldrb	r3, [r1, r3]
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002104:	4618      	mov	r0, r3
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40023800 	.word	0x40023800
 800210c:	08004db8 	.word	0x08004db8

08002110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002114:	b0ae      	sub	sp, #184	@ 0xb8
 8002116:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002136:	4bcb      	ldr	r3, [pc, #812]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x354>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b0c      	cmp	r3, #12
 8002140:	f200 8204 	bhi.w	800254c <HAL_RCC_GetSysClockFreq+0x43c>
 8002144:	a201      	add	r2, pc, #4	@ (adr r2, 800214c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214a:	bf00      	nop
 800214c:	08002181 	.word	0x08002181
 8002150:	0800254d 	.word	0x0800254d
 8002154:	0800254d 	.word	0x0800254d
 8002158:	0800254d 	.word	0x0800254d
 800215c:	08002189 	.word	0x08002189
 8002160:	0800254d 	.word	0x0800254d
 8002164:	0800254d 	.word	0x0800254d
 8002168:	0800254d 	.word	0x0800254d
 800216c:	08002191 	.word	0x08002191
 8002170:	0800254d 	.word	0x0800254d
 8002174:	0800254d 	.word	0x0800254d
 8002178:	0800254d 	.word	0x0800254d
 800217c:	08002381 	.word	0x08002381
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002180:	4bb9      	ldr	r3, [pc, #740]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x358>)
 8002182:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002186:	e1e5      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002188:	4bb7      	ldr	r3, [pc, #732]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x358>)
 800218a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800218e:	e1e1      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002190:	4bb4      	ldr	r3, [pc, #720]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x354>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002198:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800219c:	4bb1      	ldr	r3, [pc, #708]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x354>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d071      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021a8:	4bae      	ldr	r3, [pc, #696]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x354>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	099b      	lsrs	r3, r3, #6
 80021ae:	2200      	movs	r2, #0
 80021b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80021b4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80021b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80021c4:	2300      	movs	r3, #0
 80021c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80021ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80021ce:	4622      	mov	r2, r4
 80021d0:	462b      	mov	r3, r5
 80021d2:	f04f 0000 	mov.w	r0, #0
 80021d6:	f04f 0100 	mov.w	r1, #0
 80021da:	0159      	lsls	r1, r3, #5
 80021dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021e0:	0150      	lsls	r0, r2, #5
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4621      	mov	r1, r4
 80021e8:	1a51      	subs	r1, r2, r1
 80021ea:	6439      	str	r1, [r7, #64]	@ 0x40
 80021ec:	4629      	mov	r1, r5
 80021ee:	eb63 0301 	sbc.w	r3, r3, r1
 80021f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002200:	4649      	mov	r1, r9
 8002202:	018b      	lsls	r3, r1, #6
 8002204:	4641      	mov	r1, r8
 8002206:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800220a:	4641      	mov	r1, r8
 800220c:	018a      	lsls	r2, r1, #6
 800220e:	4641      	mov	r1, r8
 8002210:	1a51      	subs	r1, r2, r1
 8002212:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002214:	4649      	mov	r1, r9
 8002216:	eb63 0301 	sbc.w	r3, r3, r1
 800221a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002228:	4649      	mov	r1, r9
 800222a:	00cb      	lsls	r3, r1, #3
 800222c:	4641      	mov	r1, r8
 800222e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002232:	4641      	mov	r1, r8
 8002234:	00ca      	lsls	r2, r1, #3
 8002236:	4610      	mov	r0, r2
 8002238:	4619      	mov	r1, r3
 800223a:	4603      	mov	r3, r0
 800223c:	4622      	mov	r2, r4
 800223e:	189b      	adds	r3, r3, r2
 8002240:	633b      	str	r3, [r7, #48]	@ 0x30
 8002242:	462b      	mov	r3, r5
 8002244:	460a      	mov	r2, r1
 8002246:	eb42 0303 	adc.w	r3, r2, r3
 800224a:	637b      	str	r3, [r7, #52]	@ 0x34
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002258:	4629      	mov	r1, r5
 800225a:	028b      	lsls	r3, r1, #10
 800225c:	4621      	mov	r1, r4
 800225e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002262:	4621      	mov	r1, r4
 8002264:	028a      	lsls	r2, r1, #10
 8002266:	4610      	mov	r0, r2
 8002268:	4619      	mov	r1, r3
 800226a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800226e:	2200      	movs	r2, #0
 8002270:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002274:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002278:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800227c:	f7fe fc42 	bl	8000b04 <__aeabi_uldivmod>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4613      	mov	r3, r2
 8002286:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800228a:	e067      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800228c:	4b75      	ldr	r3, [pc, #468]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x354>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	099b      	lsrs	r3, r3, #6
 8002292:	2200      	movs	r2, #0
 8002294:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002298:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800229c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80022a6:	2300      	movs	r3, #0
 80022a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80022aa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80022ae:	4622      	mov	r2, r4
 80022b0:	462b      	mov	r3, r5
 80022b2:	f04f 0000 	mov.w	r0, #0
 80022b6:	f04f 0100 	mov.w	r1, #0
 80022ba:	0159      	lsls	r1, r3, #5
 80022bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022c0:	0150      	lsls	r0, r2, #5
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4621      	mov	r1, r4
 80022c8:	1a51      	subs	r1, r2, r1
 80022ca:	62b9      	str	r1, [r7, #40]	@ 0x28
 80022cc:	4629      	mov	r1, r5
 80022ce:	eb63 0301 	sbc.w	r3, r3, r1
 80022d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80022e0:	4649      	mov	r1, r9
 80022e2:	018b      	lsls	r3, r1, #6
 80022e4:	4641      	mov	r1, r8
 80022e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022ea:	4641      	mov	r1, r8
 80022ec:	018a      	lsls	r2, r1, #6
 80022ee:	4641      	mov	r1, r8
 80022f0:	ebb2 0a01 	subs.w	sl, r2, r1
 80022f4:	4649      	mov	r1, r9
 80022f6:	eb63 0b01 	sbc.w	fp, r3, r1
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002306:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800230a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800230e:	4692      	mov	sl, r2
 8002310:	469b      	mov	fp, r3
 8002312:	4623      	mov	r3, r4
 8002314:	eb1a 0303 	adds.w	r3, sl, r3
 8002318:	623b      	str	r3, [r7, #32]
 800231a:	462b      	mov	r3, r5
 800231c:	eb4b 0303 	adc.w	r3, fp, r3
 8002320:	627b      	str	r3, [r7, #36]	@ 0x24
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800232e:	4629      	mov	r1, r5
 8002330:	028b      	lsls	r3, r1, #10
 8002332:	4621      	mov	r1, r4
 8002334:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002338:	4621      	mov	r1, r4
 800233a:	028a      	lsls	r2, r1, #10
 800233c:	4610      	mov	r0, r2
 800233e:	4619      	mov	r1, r3
 8002340:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002344:	2200      	movs	r2, #0
 8002346:	673b      	str	r3, [r7, #112]	@ 0x70
 8002348:	677a      	str	r2, [r7, #116]	@ 0x74
 800234a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800234e:	f7fe fbd9 	bl	8000b04 <__aeabi_uldivmod>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4613      	mov	r3, r2
 8002358:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800235c:	4b41      	ldr	r3, [pc, #260]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x354>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	0c1b      	lsrs	r3, r3, #16
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	3301      	adds	r3, #1
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800236e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002372:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002376:	fbb2 f3f3 	udiv	r3, r2, r3
 800237a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800237e:	e0e9      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002380:	4b38      	ldr	r3, [pc, #224]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x354>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002388:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800238c:	4b35      	ldr	r3, [pc, #212]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x354>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d069      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002398:	4b32      	ldr	r3, [pc, #200]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x354>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	099b      	lsrs	r3, r3, #6
 800239e:	2200      	movs	r2, #0
 80023a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80023a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80023ac:	2300      	movs	r3, #0
 80023ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80023b0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80023b4:	4622      	mov	r2, r4
 80023b6:	462b      	mov	r3, r5
 80023b8:	f04f 0000 	mov.w	r0, #0
 80023bc:	f04f 0100 	mov.w	r1, #0
 80023c0:	0159      	lsls	r1, r3, #5
 80023c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023c6:	0150      	lsls	r0, r2, #5
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4621      	mov	r1, r4
 80023ce:	1a51      	subs	r1, r2, r1
 80023d0:	61b9      	str	r1, [r7, #24]
 80023d2:	4629      	mov	r1, r5
 80023d4:	eb63 0301 	sbc.w	r3, r3, r1
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80023e6:	4659      	mov	r1, fp
 80023e8:	018b      	lsls	r3, r1, #6
 80023ea:	4651      	mov	r1, sl
 80023ec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023f0:	4651      	mov	r1, sl
 80023f2:	018a      	lsls	r2, r1, #6
 80023f4:	4651      	mov	r1, sl
 80023f6:	ebb2 0801 	subs.w	r8, r2, r1
 80023fa:	4659      	mov	r1, fp
 80023fc:	eb63 0901 	sbc.w	r9, r3, r1
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800240c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002410:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002414:	4690      	mov	r8, r2
 8002416:	4699      	mov	r9, r3
 8002418:	4623      	mov	r3, r4
 800241a:	eb18 0303 	adds.w	r3, r8, r3
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	462b      	mov	r3, r5
 8002422:	eb49 0303 	adc.w	r3, r9, r3
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002434:	4629      	mov	r1, r5
 8002436:	028b      	lsls	r3, r1, #10
 8002438:	4621      	mov	r1, r4
 800243a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800243e:	4621      	mov	r1, r4
 8002440:	028a      	lsls	r2, r1, #10
 8002442:	4610      	mov	r0, r2
 8002444:	4619      	mov	r1, r3
 8002446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800244a:	2200      	movs	r2, #0
 800244c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800244e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002450:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002454:	f7fe fb56 	bl	8000b04 <__aeabi_uldivmod>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4613      	mov	r3, r2
 800245e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002462:	e063      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x41c>
 8002464:	40023800 	.word	0x40023800
 8002468:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800246c:	4b3d      	ldr	r3, [pc, #244]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x454>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	099b      	lsrs	r3, r3, #6
 8002472:	2200      	movs	r2, #0
 8002474:	4618      	mov	r0, r3
 8002476:	4611      	mov	r1, r2
 8002478:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800247c:	653b      	str	r3, [r7, #80]	@ 0x50
 800247e:	2300      	movs	r3, #0
 8002480:	657b      	str	r3, [r7, #84]	@ 0x54
 8002482:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002486:	4642      	mov	r2, r8
 8002488:	464b      	mov	r3, r9
 800248a:	f04f 0000 	mov.w	r0, #0
 800248e:	f04f 0100 	mov.w	r1, #0
 8002492:	0159      	lsls	r1, r3, #5
 8002494:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002498:	0150      	lsls	r0, r2, #5
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4641      	mov	r1, r8
 80024a0:	1a51      	subs	r1, r2, r1
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	4649      	mov	r1, r9
 80024a6:	eb63 0301 	sbc.w	r3, r3, r1
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80024b8:	4659      	mov	r1, fp
 80024ba:	018b      	lsls	r3, r1, #6
 80024bc:	4651      	mov	r1, sl
 80024be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024c2:	4651      	mov	r1, sl
 80024c4:	018a      	lsls	r2, r1, #6
 80024c6:	4651      	mov	r1, sl
 80024c8:	1a54      	subs	r4, r2, r1
 80024ca:	4659      	mov	r1, fp
 80024cc:	eb63 0501 	sbc.w	r5, r3, r1
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	00eb      	lsls	r3, r5, #3
 80024da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024de:	00e2      	lsls	r2, r4, #3
 80024e0:	4614      	mov	r4, r2
 80024e2:	461d      	mov	r5, r3
 80024e4:	4643      	mov	r3, r8
 80024e6:	18e3      	adds	r3, r4, r3
 80024e8:	603b      	str	r3, [r7, #0]
 80024ea:	464b      	mov	r3, r9
 80024ec:	eb45 0303 	adc.w	r3, r5, r3
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024fe:	4629      	mov	r1, r5
 8002500:	028b      	lsls	r3, r1, #10
 8002502:	4621      	mov	r1, r4
 8002504:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002508:	4621      	mov	r1, r4
 800250a:	028a      	lsls	r2, r1, #10
 800250c:	4610      	mov	r0, r2
 800250e:	4619      	mov	r1, r3
 8002510:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002514:	2200      	movs	r2, #0
 8002516:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002518:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800251a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800251e:	f7fe faf1 	bl	8000b04 <__aeabi_uldivmod>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4613      	mov	r3, r2
 8002528:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800252c:	4b0d      	ldr	r3, [pc, #52]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x454>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	0f1b      	lsrs	r3, r3, #28
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800253a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800253e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002542:	fbb2 f3f3 	udiv	r3, r2, r3
 8002546:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800254a:	e003      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800254c:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <HAL_RCC_GetSysClockFreq+0x458>)
 800254e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002552:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002554:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002558:	4618      	mov	r0, r3
 800255a:	37b8      	adds	r7, #184	@ 0xb8
 800255c:	46bd      	mov	sp, r7
 800255e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002562:	bf00      	nop
 8002564:	40023800 	.word	0x40023800
 8002568:	00f42400 	.word	0x00f42400

0800256c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e28d      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 8083 	beq.w	8002692 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800258c:	4b94      	ldr	r3, [pc, #592]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b04      	cmp	r3, #4
 8002596:	d019      	beq.n	80025cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002598:	4b91      	ldr	r3, [pc, #580]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80025a4:	4b8e      	ldr	r3, [pc, #568]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025b0:	d00c      	beq.n	80025cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025b2:	4b8b      	ldr	r3, [pc, #556]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80025ba:	2b0c      	cmp	r3, #12
 80025bc:	d112      	bne.n	80025e4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025be:	4b88      	ldr	r3, [pc, #544]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025ca:	d10b      	bne.n	80025e4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025cc:	4b84      	ldr	r3, [pc, #528]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d05b      	beq.n	8002690 <HAL_RCC_OscConfig+0x124>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d157      	bne.n	8002690 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e25a      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ec:	d106      	bne.n	80025fc <HAL_RCC_OscConfig+0x90>
 80025ee:	4b7c      	ldr	r3, [pc, #496]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a7b      	ldr	r2, [pc, #492]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80025f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	e01d      	b.n	8002638 <HAL_RCC_OscConfig+0xcc>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002604:	d10c      	bne.n	8002620 <HAL_RCC_OscConfig+0xb4>
 8002606:	4b76      	ldr	r3, [pc, #472]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a75      	ldr	r2, [pc, #468]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 800260c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	4b73      	ldr	r3, [pc, #460]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a72      	ldr	r2, [pc, #456]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 8002618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e00b      	b.n	8002638 <HAL_RCC_OscConfig+0xcc>
 8002620:	4b6f      	ldr	r3, [pc, #444]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a6e      	ldr	r2, [pc, #440]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 8002626:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	4b6c      	ldr	r3, [pc, #432]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a6b      	ldr	r2, [pc, #428]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 8002632:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d013      	beq.n	8002668 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7ff f8fe 	bl	8001840 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002648:	f7ff f8fa 	bl	8001840 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b64      	cmp	r3, #100	@ 0x64
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e21f      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	4b61      	ldr	r3, [pc, #388]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0xdc>
 8002666:	e014      	b.n	8002692 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7ff f8ea 	bl	8001840 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002670:	f7ff f8e6 	bl	8001840 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	@ 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e20b      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002682:	4b57      	ldr	r3, [pc, #348]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x104>
 800268e:	e000      	b.n	8002692 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d06f      	beq.n	800277e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800269e:	4b50      	ldr	r3, [pc, #320]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d017      	beq.n	80026da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026aa:	4b4d      	ldr	r3, [pc, #308]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d105      	bne.n	80026c2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026b6:	4b4a      	ldr	r3, [pc, #296]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00b      	beq.n	80026da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c2:	4b47      	ldr	r3, [pc, #284]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026ca:	2b0c      	cmp	r3, #12
 80026cc:	d11c      	bne.n	8002708 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ce:	4b44      	ldr	r3, [pc, #272]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d116      	bne.n	8002708 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026da:	4b41      	ldr	r3, [pc, #260]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d005      	beq.n	80026f2 <HAL_RCC_OscConfig+0x186>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d001      	beq.n	80026f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e1d3      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f2:	4b3b      	ldr	r3, [pc, #236]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4937      	ldr	r1, [pc, #220]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002706:	e03a      	b.n	800277e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d020      	beq.n	8002752 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002710:	4b34      	ldr	r3, [pc, #208]	@ (80027e4 <HAL_RCC_OscConfig+0x278>)
 8002712:	2201      	movs	r2, #1
 8002714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002716:	f7ff f893 	bl	8001840 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271e:	f7ff f88f 	bl	8001840 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e1b4      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002730:	4b2b      	ldr	r3, [pc, #172]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273c:	4b28      	ldr	r3, [pc, #160]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4925      	ldr	r1, [pc, #148]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 800274c:	4313      	orrs	r3, r2
 800274e:	600b      	str	r3, [r1, #0]
 8002750:	e015      	b.n	800277e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002752:	4b24      	ldr	r3, [pc, #144]	@ (80027e4 <HAL_RCC_OscConfig+0x278>)
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002758:	f7ff f872 	bl	8001840 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002760:	f7ff f86e 	bl	8001840 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e193      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002772:	4b1b      	ldr	r3, [pc, #108]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d036      	beq.n	80027f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d016      	beq.n	80027c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002792:	4b15      	ldr	r3, [pc, #84]	@ (80027e8 <HAL_RCC_OscConfig+0x27c>)
 8002794:	2201      	movs	r2, #1
 8002796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002798:	f7ff f852 	bl	8001840 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a0:	f7ff f84e 	bl	8001840 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e173      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b2:	4b0b      	ldr	r3, [pc, #44]	@ (80027e0 <HAL_RCC_OscConfig+0x274>)
 80027b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x234>
 80027be:	e01b      	b.n	80027f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c0:	4b09      	ldr	r3, [pc, #36]	@ (80027e8 <HAL_RCC_OscConfig+0x27c>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c6:	f7ff f83b 	bl	8001840 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027cc:	e00e      	b.n	80027ec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ce:	f7ff f837 	bl	8001840 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d907      	bls.n	80027ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e15c      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
 80027e0:	40023800 	.word	0x40023800
 80027e4:	42470000 	.word	0x42470000
 80027e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ec:	4b8a      	ldr	r3, [pc, #552]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 80027ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1ea      	bne.n	80027ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 8097 	beq.w	8002934 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002806:	2300      	movs	r3, #0
 8002808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800280a:	4b83      	ldr	r3, [pc, #524]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10f      	bne.n	8002836 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	4b7f      	ldr	r3, [pc, #508]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	4a7e      	ldr	r2, [pc, #504]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 8002820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002824:	6413      	str	r3, [r2, #64]	@ 0x40
 8002826:	4b7c      	ldr	r3, [pc, #496]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002832:	2301      	movs	r3, #1
 8002834:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002836:	4b79      	ldr	r3, [pc, #484]	@ (8002a1c <HAL_RCC_OscConfig+0x4b0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d118      	bne.n	8002874 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002842:	4b76      	ldr	r3, [pc, #472]	@ (8002a1c <HAL_RCC_OscConfig+0x4b0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a75      	ldr	r2, [pc, #468]	@ (8002a1c <HAL_RCC_OscConfig+0x4b0>)
 8002848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800284c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800284e:	f7fe fff7 	bl	8001840 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002856:	f7fe fff3 	bl	8001840 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e118      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002868:	4b6c      	ldr	r3, [pc, #432]	@ (8002a1c <HAL_RCC_OscConfig+0x4b0>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0f0      	beq.n	8002856 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d106      	bne.n	800288a <HAL_RCC_OscConfig+0x31e>
 800287c:	4b66      	ldr	r3, [pc, #408]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 800287e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002880:	4a65      	ldr	r2, [pc, #404]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	6713      	str	r3, [r2, #112]	@ 0x70
 8002888:	e01c      	b.n	80028c4 <HAL_RCC_OscConfig+0x358>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b05      	cmp	r3, #5
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0x340>
 8002892:	4b61      	ldr	r3, [pc, #388]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002896:	4a60      	ldr	r2, [pc, #384]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 8002898:	f043 0304 	orr.w	r3, r3, #4
 800289c:	6713      	str	r3, [r2, #112]	@ 0x70
 800289e:	4b5e      	ldr	r3, [pc, #376]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a2:	4a5d      	ldr	r2, [pc, #372]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028aa:	e00b      	b.n	80028c4 <HAL_RCC_OscConfig+0x358>
 80028ac:	4b5a      	ldr	r3, [pc, #360]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b0:	4a59      	ldr	r2, [pc, #356]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 80028b2:	f023 0301 	bic.w	r3, r3, #1
 80028b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028b8:	4b57      	ldr	r3, [pc, #348]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028bc:	4a56      	ldr	r2, [pc, #344]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 80028be:	f023 0304 	bic.w	r3, r3, #4
 80028c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d015      	beq.n	80028f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028cc:	f7fe ffb8 	bl	8001840 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d4:	f7fe ffb4 	bl	8001840 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e0d7      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0ee      	beq.n	80028d4 <HAL_RCC_OscConfig+0x368>
 80028f6:	e014      	b.n	8002922 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7fe ffa2 	bl	8001840 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002900:	f7fe ff9e 	bl	8001840 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e0c1      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002916:	4b40      	ldr	r3, [pc, #256]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1ee      	bne.n	8002900 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002922:	7dfb      	ldrb	r3, [r7, #23]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d105      	bne.n	8002934 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002928:	4b3b      	ldr	r3, [pc, #236]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 800292a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292c:	4a3a      	ldr	r2, [pc, #232]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 800292e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002932:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80ad 	beq.w	8002a98 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800293e:	4b36      	ldr	r3, [pc, #216]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b08      	cmp	r3, #8
 8002948:	d060      	beq.n	8002a0c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d145      	bne.n	80029de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002952:	4b33      	ldr	r3, [pc, #204]	@ (8002a20 <HAL_RCC_OscConfig+0x4b4>)
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fe ff72 	bl	8001840 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe ff6e 	bl	8001840 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e093      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002972:	4b29      	ldr	r3, [pc, #164]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69da      	ldr	r2, [r3, #28]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298c:	019b      	lsls	r3, r3, #6
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002994:	085b      	lsrs	r3, r3, #1
 8002996:	3b01      	subs	r3, #1
 8002998:	041b      	lsls	r3, r3, #16
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a0:	061b      	lsls	r3, r3, #24
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a8:	071b      	lsls	r3, r3, #28
 80029aa:	491b      	ldr	r1, [pc, #108]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a20 <HAL_RCC_OscConfig+0x4b4>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b6:	f7fe ff43 	bl	8001840 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029be:	f7fe ff3f 	bl	8001840 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e064      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d0:	4b11      	ldr	r3, [pc, #68]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x452>
 80029dc:	e05c      	b.n	8002a98 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029de:	4b10      	ldr	r3, [pc, #64]	@ (8002a20 <HAL_RCC_OscConfig+0x4b4>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7fe ff2c 	bl	8001840 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ec:	f7fe ff28 	bl	8001840 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e04d      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fe:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <HAL_RCC_OscConfig+0x4ac>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x480>
 8002a0a:	e045      	b.n	8002a98 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d107      	bne.n	8002a24 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e040      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40007000 	.word	0x40007000
 8002a20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a24:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa4 <HAL_RCC_OscConfig+0x538>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d030      	beq.n	8002a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d129      	bne.n	8002a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d122      	bne.n	8002a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a54:	4013      	ands	r3, r2
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d119      	bne.n	8002a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6a:	085b      	lsrs	r3, r3, #1
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d10f      	bne.n	8002a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d001      	beq.n	8002a98 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800

08002aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e041      	b.n	8002b3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe fd6c 	bl	80015ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	f000 fa7e 	bl	8002fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d001      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e04e      	b.n	8002bfe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a23      	ldr	r2, [pc, #140]	@ (8002c0c <HAL_TIM_Base_Start_IT+0xc4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d022      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0x80>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b8a:	d01d      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0x80>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1f      	ldr	r2, [pc, #124]	@ (8002c10 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d018      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0x80>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8002c14 <HAL_TIM_Base_Start_IT+0xcc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d013      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0x80>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8002c18 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d00e      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0x80>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1b      	ldr	r2, [pc, #108]	@ (8002c1c <HAL_TIM_Base_Start_IT+0xd4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d009      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0x80>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a19      	ldr	r2, [pc, #100]	@ (8002c20 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d004      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0x80>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a18      	ldr	r2, [pc, #96]	@ (8002c24 <HAL_TIM_Base_Start_IT+0xdc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d111      	bne.n	8002bec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b06      	cmp	r3, #6
 8002bd8:	d010      	beq.n	8002bfc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 0201 	orr.w	r2, r2, #1
 8002be8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bea:	e007      	b.n	8002bfc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40010000 	.word	0x40010000
 8002c10:	40000400 	.word	0x40000400
 8002c14:	40000800 	.word	0x40000800
 8002c18:	40000c00 	.word	0x40000c00
 8002c1c:	40010400 	.word	0x40010400
 8002c20:	40014000 	.word	0x40014000
 8002c24:	40001800 	.word	0x40001800

08002c28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d020      	beq.n	8002c8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d01b      	beq.n	8002c8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0202 	mvn.w	r2, #2
 8002c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f999 	bl	8002faa <HAL_TIM_IC_CaptureCallback>
 8002c78:	e005      	b.n	8002c86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f98b 	bl	8002f96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f99c 	bl	8002fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d020      	beq.n	8002cd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d01b      	beq.n	8002cd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0204 	mvn.w	r2, #4
 8002ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2202      	movs	r2, #2
 8002cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f973 	bl	8002faa <HAL_TIM_IC_CaptureCallback>
 8002cc4:	e005      	b.n	8002cd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f965 	bl	8002f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f976 	bl	8002fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d020      	beq.n	8002d24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d01b      	beq.n	8002d24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 0208 	mvn.w	r2, #8
 8002cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f94d 	bl	8002faa <HAL_TIM_IC_CaptureCallback>
 8002d10:	e005      	b.n	8002d1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f93f 	bl	8002f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f950 	bl	8002fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d020      	beq.n	8002d70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01b      	beq.n	8002d70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f06f 0210 	mvn.w	r2, #16
 8002d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2208      	movs	r2, #8
 8002d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f927 	bl	8002faa <HAL_TIM_IC_CaptureCallback>
 8002d5c:	e005      	b.n	8002d6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f919 	bl	8002f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f92a 	bl	8002fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00c      	beq.n	8002d94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d007      	beq.n	8002d94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0201 	mvn.w	r2, #1
 8002d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7fe f830 	bl	8000df4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00c      	beq.n	8002db8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d007      	beq.n	8002db8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fae4 	bl	8003380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00c      	beq.n	8002ddc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f8fb 	bl	8002fd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00c      	beq.n	8002e00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d007      	beq.n	8002e00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0220 	mvn.w	r2, #32
 8002df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fab6 	bl	800336c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e00:	bf00      	nop
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_TIM_ConfigClockSource+0x1c>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e0b4      	b.n	8002f8e <HAL_TIM_ConfigClockSource+0x186>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e5c:	d03e      	beq.n	8002edc <HAL_TIM_ConfigClockSource+0xd4>
 8002e5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e62:	f200 8087 	bhi.w	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e6a:	f000 8086 	beq.w	8002f7a <HAL_TIM_ConfigClockSource+0x172>
 8002e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e72:	d87f      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002e74:	2b70      	cmp	r3, #112	@ 0x70
 8002e76:	d01a      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0xa6>
 8002e78:	2b70      	cmp	r3, #112	@ 0x70
 8002e7a:	d87b      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002e7c:	2b60      	cmp	r3, #96	@ 0x60
 8002e7e:	d050      	beq.n	8002f22 <HAL_TIM_ConfigClockSource+0x11a>
 8002e80:	2b60      	cmp	r3, #96	@ 0x60
 8002e82:	d877      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002e84:	2b50      	cmp	r3, #80	@ 0x50
 8002e86:	d03c      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0xfa>
 8002e88:	2b50      	cmp	r3, #80	@ 0x50
 8002e8a:	d873      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002e8c:	2b40      	cmp	r3, #64	@ 0x40
 8002e8e:	d058      	beq.n	8002f42 <HAL_TIM_ConfigClockSource+0x13a>
 8002e90:	2b40      	cmp	r3, #64	@ 0x40
 8002e92:	d86f      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002e94:	2b30      	cmp	r3, #48	@ 0x30
 8002e96:	d064      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x15a>
 8002e98:	2b30      	cmp	r3, #48	@ 0x30
 8002e9a:	d86b      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d060      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x15a>
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d867      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d05c      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x15a>
 8002ea8:	2b10      	cmp	r3, #16
 8002eaa:	d05a      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x15a>
 8002eac:	e062      	b.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ebe:	f000 f9b9 	bl	8003234 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ed0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	609a      	str	r2, [r3, #8]
      break;
 8002eda:	e04f      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002eec:	f000 f9a2 	bl	8003234 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002efe:	609a      	str	r2, [r3, #8]
      break;
 8002f00:	e03c      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f000 f916 	bl	8003140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2150      	movs	r1, #80	@ 0x50
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 f96f 	bl	80031fe <TIM_ITRx_SetConfig>
      break;
 8002f20:	e02c      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f000 f935 	bl	800319e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2160      	movs	r1, #96	@ 0x60
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 f95f 	bl	80031fe <TIM_ITRx_SetConfig>
      break;
 8002f40:	e01c      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f000 f8f6 	bl	8003140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2140      	movs	r1, #64	@ 0x40
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 f94f 	bl	80031fe <TIM_ITRx_SetConfig>
      break;
 8002f60:	e00c      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	f000 f946 	bl	80031fe <TIM_ITRx_SetConfig>
      break;
 8002f72:	e003      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
      break;
 8002f78:	e000      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a46      	ldr	r2, [pc, #280]	@ (8003114 <TIM_Base_SetConfig+0x12c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d013      	beq.n	8003028 <TIM_Base_SetConfig+0x40>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003006:	d00f      	beq.n	8003028 <TIM_Base_SetConfig+0x40>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a43      	ldr	r2, [pc, #268]	@ (8003118 <TIM_Base_SetConfig+0x130>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d00b      	beq.n	8003028 <TIM_Base_SetConfig+0x40>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a42      	ldr	r2, [pc, #264]	@ (800311c <TIM_Base_SetConfig+0x134>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d007      	beq.n	8003028 <TIM_Base_SetConfig+0x40>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a41      	ldr	r2, [pc, #260]	@ (8003120 <TIM_Base_SetConfig+0x138>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d003      	beq.n	8003028 <TIM_Base_SetConfig+0x40>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a40      	ldr	r2, [pc, #256]	@ (8003124 <TIM_Base_SetConfig+0x13c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d108      	bne.n	800303a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800302e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a35      	ldr	r2, [pc, #212]	@ (8003114 <TIM_Base_SetConfig+0x12c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d02b      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003048:	d027      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a32      	ldr	r2, [pc, #200]	@ (8003118 <TIM_Base_SetConfig+0x130>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d023      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a31      	ldr	r2, [pc, #196]	@ (800311c <TIM_Base_SetConfig+0x134>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d01f      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a30      	ldr	r2, [pc, #192]	@ (8003120 <TIM_Base_SetConfig+0x138>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d01b      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a2f      	ldr	r2, [pc, #188]	@ (8003124 <TIM_Base_SetConfig+0x13c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d017      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a2e      	ldr	r2, [pc, #184]	@ (8003128 <TIM_Base_SetConfig+0x140>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d013      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a2d      	ldr	r2, [pc, #180]	@ (800312c <TIM_Base_SetConfig+0x144>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00f      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a2c      	ldr	r2, [pc, #176]	@ (8003130 <TIM_Base_SetConfig+0x148>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d00b      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a2b      	ldr	r2, [pc, #172]	@ (8003134 <TIM_Base_SetConfig+0x14c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d007      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a2a      	ldr	r2, [pc, #168]	@ (8003138 <TIM_Base_SetConfig+0x150>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d003      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a29      	ldr	r2, [pc, #164]	@ (800313c <TIM_Base_SetConfig+0x154>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d108      	bne.n	80030ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a10      	ldr	r2, [pc, #64]	@ (8003114 <TIM_Base_SetConfig+0x12c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d003      	beq.n	80030e0 <TIM_Base_SetConfig+0xf8>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a12      	ldr	r2, [pc, #72]	@ (8003124 <TIM_Base_SetConfig+0x13c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d103      	bne.n	80030e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d105      	bne.n	8003106 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f023 0201 	bic.w	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	611a      	str	r2, [r3, #16]
  }
}
 8003106:	bf00      	nop
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40010000 	.word	0x40010000
 8003118:	40000400 	.word	0x40000400
 800311c:	40000800 	.word	0x40000800
 8003120:	40000c00 	.word	0x40000c00
 8003124:	40010400 	.word	0x40010400
 8003128:	40014000 	.word	0x40014000
 800312c:	40014400 	.word	0x40014400
 8003130:	40014800 	.word	0x40014800
 8003134:	40001800 	.word	0x40001800
 8003138:	40001c00 	.word	0x40001c00
 800313c:	40002000 	.word	0x40002000

08003140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	f023 0201 	bic.w	r2, r3, #1
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800316a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f023 030a 	bic.w	r3, r3, #10
 800317c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	4313      	orrs	r3, r2
 8003184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	621a      	str	r2, [r3, #32]
}
 8003192:	bf00      	nop
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800319e:	b480      	push	{r7}
 80031a0:	b087      	sub	sp, #28
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f023 0210 	bic.w	r2, r3, #16
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80031c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	031b      	lsls	r3, r3, #12
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80031da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	621a      	str	r2, [r3, #32]
}
 80031f2:	bf00      	nop
 80031f4:	371c      	adds	r7, #28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003214:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	f043 0307 	orr.w	r3, r3, #7
 8003220:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	609a      	str	r2, [r3, #8]
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800324e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	021a      	lsls	r2, r3, #8
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	431a      	orrs	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4313      	orrs	r3, r2
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	4313      	orrs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	609a      	str	r2, [r3, #8]
}
 8003268:	bf00      	nop
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003288:	2302      	movs	r3, #2
 800328a:	e05a      	b.n	8003342 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a21      	ldr	r2, [pc, #132]	@ (8003350 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d022      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032d8:	d01d      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a1d      	ldr	r2, [pc, #116]	@ (8003354 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d018      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003358 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d013      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a1a      	ldr	r2, [pc, #104]	@ (800335c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d00e      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a18      	ldr	r2, [pc, #96]	@ (8003360 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d009      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a17      	ldr	r2, [pc, #92]	@ (8003364 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d004      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a15      	ldr	r2, [pc, #84]	@ (8003368 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d10c      	bne.n	8003330 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800331c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	4313      	orrs	r3, r2
 8003326:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40010000 	.word	0x40010000
 8003354:	40000400 	.word	0x40000400
 8003358:	40000800 	.word	0x40000800
 800335c:	40000c00 	.word	0x40000c00
 8003360:	40010400 	.word	0x40010400
 8003364:	40014000 	.word	0x40014000
 8003368:	40001800 	.word	0x40001800

0800336c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e042      	b.n	800342c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fe f91c 	bl	80015f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2224      	movs	r2, #36	@ 0x24
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 fa09 	bl	80037f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695a      	ldr	r2, [r3, #20]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800340c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08a      	sub	sp, #40	@ 0x28
 8003438:	af02      	add	r7, sp, #8
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	4613      	mov	r3, r2
 8003442:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b20      	cmp	r3, #32
 8003452:	d175      	bne.n	8003540 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_UART_Transmit+0x2c>
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e06e      	b.n	8003542 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2221      	movs	r2, #33	@ 0x21
 800346e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003472:	f7fe f9e5 	bl	8001840 <HAL_GetTick>
 8003476:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	88fa      	ldrh	r2, [r7, #6]
 800347c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	88fa      	ldrh	r2, [r7, #6]
 8003482:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800348c:	d108      	bne.n	80034a0 <HAL_UART_Transmit+0x6c>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d104      	bne.n	80034a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003496:	2300      	movs	r3, #0
 8003498:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	61bb      	str	r3, [r7, #24]
 800349e:	e003      	b.n	80034a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034a8:	e02e      	b.n	8003508 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2200      	movs	r2, #0
 80034b2:	2180      	movs	r1, #128	@ 0x80
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 f8df 	bl	8003678 <UART_WaitOnFlagUntilTimeout>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e03a      	b.n	8003542 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10b      	bne.n	80034ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	3302      	adds	r3, #2
 80034e6:	61bb      	str	r3, [r7, #24]
 80034e8:	e007      	b.n	80034fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	781a      	ldrb	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	3301      	adds	r3, #1
 80034f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1cb      	bne.n	80034aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2200      	movs	r2, #0
 800351a:	2140      	movs	r1, #64	@ 0x40
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f8ab 	bl	8003678 <UART_WaitOnFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e006      	b.n	8003542 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	e000      	b.n	8003542 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003540:	2302      	movs	r3, #2
  }
}
 8003542:	4618      	mov	r0, r3
 8003544:	3720      	adds	r7, #32
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b08a      	sub	sp, #40	@ 0x28
 800354e:	af02      	add	r7, sp, #8
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	4613      	mov	r3, r2
 8003558:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b20      	cmp	r3, #32
 8003568:	f040 8081 	bne.w	800366e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <HAL_UART_Receive+0x2e>
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e079      	b.n	8003670 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2222      	movs	r2, #34	@ 0x22
 8003586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003590:	f7fe f956 	bl	8001840 <HAL_GetTick>
 8003594:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	88fa      	ldrh	r2, [r7, #6]
 800359a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	88fa      	ldrh	r2, [r7, #6]
 80035a0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035aa:	d108      	bne.n	80035be <HAL_UART_Receive+0x74>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d104      	bne.n	80035be <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	61bb      	str	r3, [r7, #24]
 80035bc:	e003      	b.n	80035c6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80035c6:	e047      	b.n	8003658 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2200      	movs	r2, #0
 80035d0:	2120      	movs	r1, #32
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 f850 	bl	8003678 <UART_WaitOnFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e042      	b.n	8003670 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10c      	bne.n	800360a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	3302      	adds	r3, #2
 8003606:	61bb      	str	r3, [r7, #24]
 8003608:	e01f      	b.n	800364a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003612:	d007      	beq.n	8003624 <HAL_UART_Receive+0xda>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10a      	bne.n	8003632 <HAL_UART_Receive+0xe8>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d106      	bne.n	8003632 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	b2da      	uxtb	r2, r3
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	701a      	strb	r2, [r3, #0]
 8003630:	e008      	b.n	8003644 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800363e:	b2da      	uxtb	r2, r3
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	3301      	adds	r3, #1
 8003648:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1b2      	bne.n	80035c8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	e000      	b.n	8003670 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800366e:	2302      	movs	r3, #2
  }
}
 8003670:	4618      	mov	r0, r3
 8003672:	3720      	adds	r7, #32
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	4613      	mov	r3, r2
 8003686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003688:	e03b      	b.n	8003702 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003690:	d037      	beq.n	8003702 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003692:	f7fe f8d5 	bl	8001840 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	6a3a      	ldr	r2, [r7, #32]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d302      	bcc.n	80036a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e03a      	b.n	8003722 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d023      	beq.n	8003702 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b80      	cmp	r3, #128	@ 0x80
 80036be:	d020      	beq.n	8003702 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b40      	cmp	r3, #64	@ 0x40
 80036c4:	d01d      	beq.n	8003702 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d116      	bne.n	8003702 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f81d 	bl	800372a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2208      	movs	r2, #8
 80036f4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e00f      	b.n	8003722 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4013      	ands	r3, r2
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	429a      	cmp	r2, r3
 8003710:	bf0c      	ite	eq
 8003712:	2301      	moveq	r3, #1
 8003714:	2300      	movne	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	461a      	mov	r2, r3
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	429a      	cmp	r2, r3
 800371e:	d0b4      	beq.n	800368a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800372a:	b480      	push	{r7}
 800372c:	b095      	sub	sp, #84	@ 0x54
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	330c      	adds	r3, #12
 8003738:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800373c:	e853 3f00 	ldrex	r3, [r3]
 8003740:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003744:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003748:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	330c      	adds	r3, #12
 8003750:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003752:	643a      	str	r2, [r7, #64]	@ 0x40
 8003754:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003756:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003758:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800375a:	e841 2300 	strex	r3, r2, [r1]
 800375e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1e5      	bne.n	8003732 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3314      	adds	r3, #20
 800376c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	e853 3f00 	ldrex	r3, [r3]
 8003774:	61fb      	str	r3, [r7, #28]
   return(result);
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f023 0301 	bic.w	r3, r3, #1
 800377c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3314      	adds	r3, #20
 8003784:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003786:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003788:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800378c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800378e:	e841 2300 	strex	r3, r2, [r1]
 8003792:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1e5      	bne.n	8003766 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d119      	bne.n	80037d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	330c      	adds	r3, #12
 80037a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f023 0310 	bic.w	r3, r3, #16
 80037b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	330c      	adds	r3, #12
 80037c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037c2:	61ba      	str	r2, [r7, #24]
 80037c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c6:	6979      	ldr	r1, [r7, #20]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	613b      	str	r3, [r7, #16]
   return(result);
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1e5      	bne.n	80037a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80037e4:	bf00      	nop
 80037e6:	3754      	adds	r7, #84	@ 0x54
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037f4:	b0c0      	sub	sp, #256	@ 0x100
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380c:	68d9      	ldr	r1, [r3, #12]
 800380e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	ea40 0301 	orr.w	r3, r0, r1
 8003818:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800381a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	431a      	orrs	r2, r3
 8003828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	431a      	orrs	r2, r3
 8003830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800383c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003848:	f021 010c 	bic.w	r1, r1, #12
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003856:	430b      	orrs	r3, r1
 8003858:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800385a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800386a:	6999      	ldr	r1, [r3, #24]
 800386c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	ea40 0301 	orr.w	r3, r0, r1
 8003876:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	4b8f      	ldr	r3, [pc, #572]	@ (8003abc <UART_SetConfig+0x2cc>)
 8003880:	429a      	cmp	r2, r3
 8003882:	d005      	beq.n	8003890 <UART_SetConfig+0xa0>
 8003884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4b8d      	ldr	r3, [pc, #564]	@ (8003ac0 <UART_SetConfig+0x2d0>)
 800388c:	429a      	cmp	r2, r3
 800388e:	d104      	bne.n	800389a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003890:	f7fe fc2a 	bl	80020e8 <HAL_RCC_GetPCLK2Freq>
 8003894:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003898:	e003      	b.n	80038a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800389a:	f7fe fc11 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 800389e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038ac:	f040 810c 	bne.w	8003ac8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038b4:	2200      	movs	r2, #0
 80038b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80038be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80038c2:	4622      	mov	r2, r4
 80038c4:	462b      	mov	r3, r5
 80038c6:	1891      	adds	r1, r2, r2
 80038c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80038ca:	415b      	adcs	r3, r3
 80038cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038d2:	4621      	mov	r1, r4
 80038d4:	eb12 0801 	adds.w	r8, r2, r1
 80038d8:	4629      	mov	r1, r5
 80038da:	eb43 0901 	adc.w	r9, r3, r1
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038f2:	4690      	mov	r8, r2
 80038f4:	4699      	mov	r9, r3
 80038f6:	4623      	mov	r3, r4
 80038f8:	eb18 0303 	adds.w	r3, r8, r3
 80038fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003900:	462b      	mov	r3, r5
 8003902:	eb49 0303 	adc.w	r3, r9, r3
 8003906:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800390a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003916:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800391a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800391e:	460b      	mov	r3, r1
 8003920:	18db      	adds	r3, r3, r3
 8003922:	653b      	str	r3, [r7, #80]	@ 0x50
 8003924:	4613      	mov	r3, r2
 8003926:	eb42 0303 	adc.w	r3, r2, r3
 800392a:	657b      	str	r3, [r7, #84]	@ 0x54
 800392c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003930:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003934:	f7fd f8e6 	bl	8000b04 <__aeabi_uldivmod>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4b61      	ldr	r3, [pc, #388]	@ (8003ac4 <UART_SetConfig+0x2d4>)
 800393e:	fba3 2302 	umull	r2, r3, r3, r2
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	011c      	lsls	r4, r3, #4
 8003946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800394a:	2200      	movs	r2, #0
 800394c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003950:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003954:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003958:	4642      	mov	r2, r8
 800395a:	464b      	mov	r3, r9
 800395c:	1891      	adds	r1, r2, r2
 800395e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003960:	415b      	adcs	r3, r3
 8003962:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003964:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003968:	4641      	mov	r1, r8
 800396a:	eb12 0a01 	adds.w	sl, r2, r1
 800396e:	4649      	mov	r1, r9
 8003970:	eb43 0b01 	adc.w	fp, r3, r1
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003980:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003984:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003988:	4692      	mov	sl, r2
 800398a:	469b      	mov	fp, r3
 800398c:	4643      	mov	r3, r8
 800398e:	eb1a 0303 	adds.w	r3, sl, r3
 8003992:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003996:	464b      	mov	r3, r9
 8003998:	eb4b 0303 	adc.w	r3, fp, r3
 800399c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80039b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039b4:	460b      	mov	r3, r1
 80039b6:	18db      	adds	r3, r3, r3
 80039b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80039ba:	4613      	mov	r3, r2
 80039bc:	eb42 0303 	adc.w	r3, r2, r3
 80039c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80039c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80039ca:	f7fd f89b 	bl	8000b04 <__aeabi_uldivmod>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4611      	mov	r1, r2
 80039d4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ac4 <UART_SetConfig+0x2d4>)
 80039d6:	fba3 2301 	umull	r2, r3, r3, r1
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	2264      	movs	r2, #100	@ 0x64
 80039de:	fb02 f303 	mul.w	r3, r2, r3
 80039e2:	1acb      	subs	r3, r1, r3
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039ea:	4b36      	ldr	r3, [pc, #216]	@ (8003ac4 <UART_SetConfig+0x2d4>)
 80039ec:	fba3 2302 	umull	r2, r3, r3, r2
 80039f0:	095b      	lsrs	r3, r3, #5
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80039f8:	441c      	add	r4, r3
 80039fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039fe:	2200      	movs	r2, #0
 8003a00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a04:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003a0c:	4642      	mov	r2, r8
 8003a0e:	464b      	mov	r3, r9
 8003a10:	1891      	adds	r1, r2, r2
 8003a12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a14:	415b      	adcs	r3, r3
 8003a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a1c:	4641      	mov	r1, r8
 8003a1e:	1851      	adds	r1, r2, r1
 8003a20:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a22:	4649      	mov	r1, r9
 8003a24:	414b      	adcs	r3, r1
 8003a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a34:	4659      	mov	r1, fp
 8003a36:	00cb      	lsls	r3, r1, #3
 8003a38:	4651      	mov	r1, sl
 8003a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a3e:	4651      	mov	r1, sl
 8003a40:	00ca      	lsls	r2, r1, #3
 8003a42:	4610      	mov	r0, r2
 8003a44:	4619      	mov	r1, r3
 8003a46:	4603      	mov	r3, r0
 8003a48:	4642      	mov	r2, r8
 8003a4a:	189b      	adds	r3, r3, r2
 8003a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a50:	464b      	mov	r3, r9
 8003a52:	460a      	mov	r2, r1
 8003a54:	eb42 0303 	adc.w	r3, r2, r3
 8003a58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a68:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a70:	460b      	mov	r3, r1
 8003a72:	18db      	adds	r3, r3, r3
 8003a74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a76:	4613      	mov	r3, r2
 8003a78:	eb42 0303 	adc.w	r3, r2, r3
 8003a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a86:	f7fd f83d 	bl	8000b04 <__aeabi_uldivmod>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac4 <UART_SetConfig+0x2d4>)
 8003a90:	fba3 1302 	umull	r1, r3, r3, r2
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	2164      	movs	r1, #100	@ 0x64
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	3332      	adds	r3, #50	@ 0x32
 8003aa2:	4a08      	ldr	r2, [pc, #32]	@ (8003ac4 <UART_SetConfig+0x2d4>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	f003 0207 	and.w	r2, r3, #7
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4422      	add	r2, r4
 8003ab6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ab8:	e106      	b.n	8003cc8 <UART_SetConfig+0x4d8>
 8003aba:	bf00      	nop
 8003abc:	40011000 	.word	0x40011000
 8003ac0:	40011400 	.word	0x40011400
 8003ac4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ac8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003acc:	2200      	movs	r2, #0
 8003ace:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ad2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ad6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ada:	4642      	mov	r2, r8
 8003adc:	464b      	mov	r3, r9
 8003ade:	1891      	adds	r1, r2, r2
 8003ae0:	6239      	str	r1, [r7, #32]
 8003ae2:	415b      	adcs	r3, r3
 8003ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003aea:	4641      	mov	r1, r8
 8003aec:	1854      	adds	r4, r2, r1
 8003aee:	4649      	mov	r1, r9
 8003af0:	eb43 0501 	adc.w	r5, r3, r1
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	00eb      	lsls	r3, r5, #3
 8003afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b02:	00e2      	lsls	r2, r4, #3
 8003b04:	4614      	mov	r4, r2
 8003b06:	461d      	mov	r5, r3
 8003b08:	4643      	mov	r3, r8
 8003b0a:	18e3      	adds	r3, r4, r3
 8003b0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b10:	464b      	mov	r3, r9
 8003b12:	eb45 0303 	adc.w	r3, r5, r3
 8003b16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b36:	4629      	mov	r1, r5
 8003b38:	008b      	lsls	r3, r1, #2
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b40:	4621      	mov	r1, r4
 8003b42:	008a      	lsls	r2, r1, #2
 8003b44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b48:	f7fc ffdc 	bl	8000b04 <__aeabi_uldivmod>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4b60      	ldr	r3, [pc, #384]	@ (8003cd4 <UART_SetConfig+0x4e4>)
 8003b52:	fba3 2302 	umull	r2, r3, r3, r2
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	011c      	lsls	r4, r3, #4
 8003b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b6c:	4642      	mov	r2, r8
 8003b6e:	464b      	mov	r3, r9
 8003b70:	1891      	adds	r1, r2, r2
 8003b72:	61b9      	str	r1, [r7, #24]
 8003b74:	415b      	adcs	r3, r3
 8003b76:	61fb      	str	r3, [r7, #28]
 8003b78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b7c:	4641      	mov	r1, r8
 8003b7e:	1851      	adds	r1, r2, r1
 8003b80:	6139      	str	r1, [r7, #16]
 8003b82:	4649      	mov	r1, r9
 8003b84:	414b      	adcs	r3, r1
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	f04f 0300 	mov.w	r3, #0
 8003b90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b94:	4659      	mov	r1, fp
 8003b96:	00cb      	lsls	r3, r1, #3
 8003b98:	4651      	mov	r1, sl
 8003b9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b9e:	4651      	mov	r1, sl
 8003ba0:	00ca      	lsls	r2, r1, #3
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4642      	mov	r2, r8
 8003baa:	189b      	adds	r3, r3, r2
 8003bac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bb0:	464b      	mov	r3, r9
 8003bb2:	460a      	mov	r2, r1
 8003bb4:	eb42 0303 	adc.w	r3, r2, r3
 8003bb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bc6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003bd4:	4649      	mov	r1, r9
 8003bd6:	008b      	lsls	r3, r1, #2
 8003bd8:	4641      	mov	r1, r8
 8003bda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bde:	4641      	mov	r1, r8
 8003be0:	008a      	lsls	r2, r1, #2
 8003be2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003be6:	f7fc ff8d 	bl	8000b04 <__aeabi_uldivmod>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	4611      	mov	r1, r2
 8003bf0:	4b38      	ldr	r3, [pc, #224]	@ (8003cd4 <UART_SetConfig+0x4e4>)
 8003bf2:	fba3 2301 	umull	r2, r3, r3, r1
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	2264      	movs	r2, #100	@ 0x64
 8003bfa:	fb02 f303 	mul.w	r3, r2, r3
 8003bfe:	1acb      	subs	r3, r1, r3
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	3332      	adds	r3, #50	@ 0x32
 8003c04:	4a33      	ldr	r2, [pc, #204]	@ (8003cd4 <UART_SetConfig+0x4e4>)
 8003c06:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c10:	441c      	add	r4, r3
 8003c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c16:	2200      	movs	r2, #0
 8003c18:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c1a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c20:	4642      	mov	r2, r8
 8003c22:	464b      	mov	r3, r9
 8003c24:	1891      	adds	r1, r2, r2
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	415b      	adcs	r3, r3
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c30:	4641      	mov	r1, r8
 8003c32:	1851      	adds	r1, r2, r1
 8003c34:	6039      	str	r1, [r7, #0]
 8003c36:	4649      	mov	r1, r9
 8003c38:	414b      	adcs	r3, r1
 8003c3a:	607b      	str	r3, [r7, #4]
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c48:	4659      	mov	r1, fp
 8003c4a:	00cb      	lsls	r3, r1, #3
 8003c4c:	4651      	mov	r1, sl
 8003c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c52:	4651      	mov	r1, sl
 8003c54:	00ca      	lsls	r2, r1, #3
 8003c56:	4610      	mov	r0, r2
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	4642      	mov	r2, r8
 8003c5e:	189b      	adds	r3, r3, r2
 8003c60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c62:	464b      	mov	r3, r9
 8003c64:	460a      	mov	r2, r1
 8003c66:	eb42 0303 	adc.w	r3, r2, r3
 8003c6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c76:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c84:	4649      	mov	r1, r9
 8003c86:	008b      	lsls	r3, r1, #2
 8003c88:	4641      	mov	r1, r8
 8003c8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c8e:	4641      	mov	r1, r8
 8003c90:	008a      	lsls	r2, r1, #2
 8003c92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c96:	f7fc ff35 	bl	8000b04 <__aeabi_uldivmod>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd4 <UART_SetConfig+0x4e4>)
 8003ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	2164      	movs	r1, #100	@ 0x64
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	3332      	adds	r3, #50	@ 0x32
 8003cb2:	4a08      	ldr	r2, [pc, #32]	@ (8003cd4 <UART_SetConfig+0x4e4>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	f003 020f 	and.w	r2, r3, #15
 8003cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4422      	add	r2, r4
 8003cc6:	609a      	str	r2, [r3, #8]
}
 8003cc8:	bf00      	nop
 8003cca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cd4:	51eb851f 	.word	0x51eb851f

08003cd8 <memset>:
 8003cd8:	4402      	add	r2, r0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d100      	bne.n	8003ce2 <memset+0xa>
 8003ce0:	4770      	bx	lr
 8003ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ce6:	e7f9      	b.n	8003cdc <memset+0x4>

08003ce8 <__libc_init_array>:
 8003ce8:	b570      	push	{r4, r5, r6, lr}
 8003cea:	4d0d      	ldr	r5, [pc, #52]	@ (8003d20 <__libc_init_array+0x38>)
 8003cec:	4c0d      	ldr	r4, [pc, #52]	@ (8003d24 <__libc_init_array+0x3c>)
 8003cee:	1b64      	subs	r4, r4, r5
 8003cf0:	10a4      	asrs	r4, r4, #2
 8003cf2:	2600      	movs	r6, #0
 8003cf4:	42a6      	cmp	r6, r4
 8003cf6:	d109      	bne.n	8003d0c <__libc_init_array+0x24>
 8003cf8:	4d0b      	ldr	r5, [pc, #44]	@ (8003d28 <__libc_init_array+0x40>)
 8003cfa:	4c0c      	ldr	r4, [pc, #48]	@ (8003d2c <__libc_init_array+0x44>)
 8003cfc:	f001 f848 	bl	8004d90 <_init>
 8003d00:	1b64      	subs	r4, r4, r5
 8003d02:	10a4      	asrs	r4, r4, #2
 8003d04:	2600      	movs	r6, #0
 8003d06:	42a6      	cmp	r6, r4
 8003d08:	d105      	bne.n	8003d16 <__libc_init_array+0x2e>
 8003d0a:	bd70      	pop	{r4, r5, r6, pc}
 8003d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d10:	4798      	blx	r3
 8003d12:	3601      	adds	r6, #1
 8003d14:	e7ee      	b.n	8003cf4 <__libc_init_array+0xc>
 8003d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d1a:	4798      	blx	r3
 8003d1c:	3601      	adds	r6, #1
 8003d1e:	e7f2      	b.n	8003d06 <__libc_init_array+0x1e>
 8003d20:	08004fa0 	.word	0x08004fa0
 8003d24:	08004fa0 	.word	0x08004fa0
 8003d28:	08004fa0 	.word	0x08004fa0
 8003d2c:	08004fa4 	.word	0x08004fa4

08003d30 <sin>:
 8003d30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003d32:	ec53 2b10 	vmov	r2, r3, d0
 8003d36:	4826      	ldr	r0, [pc, #152]	@ (8003dd0 <sin+0xa0>)
 8003d38:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003d3c:	4281      	cmp	r1, r0
 8003d3e:	d807      	bhi.n	8003d50 <sin+0x20>
 8003d40:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003dc8 <sin+0x98>
 8003d44:	2000      	movs	r0, #0
 8003d46:	b005      	add	sp, #20
 8003d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d4c:	f000 b90c 	b.w	8003f68 <__kernel_sin>
 8003d50:	4820      	ldr	r0, [pc, #128]	@ (8003dd4 <sin+0xa4>)
 8003d52:	4281      	cmp	r1, r0
 8003d54:	d908      	bls.n	8003d68 <sin+0x38>
 8003d56:	4610      	mov	r0, r2
 8003d58:	4619      	mov	r1, r3
 8003d5a:	f7fc fa59 	bl	8000210 <__aeabi_dsub>
 8003d5e:	ec41 0b10 	vmov	d0, r0, r1
 8003d62:	b005      	add	sp, #20
 8003d64:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d68:	4668      	mov	r0, sp
 8003d6a:	f000 f9b9 	bl	80040e0 <__ieee754_rem_pio2>
 8003d6e:	f000 0003 	and.w	r0, r0, #3
 8003d72:	2801      	cmp	r0, #1
 8003d74:	d00c      	beq.n	8003d90 <sin+0x60>
 8003d76:	2802      	cmp	r0, #2
 8003d78:	d011      	beq.n	8003d9e <sin+0x6e>
 8003d7a:	b9e8      	cbnz	r0, 8003db8 <sin+0x88>
 8003d7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d80:	ed9d 0b00 	vldr	d0, [sp]
 8003d84:	2001      	movs	r0, #1
 8003d86:	f000 f8ef 	bl	8003f68 <__kernel_sin>
 8003d8a:	ec51 0b10 	vmov	r0, r1, d0
 8003d8e:	e7e6      	b.n	8003d5e <sin+0x2e>
 8003d90:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d94:	ed9d 0b00 	vldr	d0, [sp]
 8003d98:	f000 f81e 	bl	8003dd8 <__kernel_cos>
 8003d9c:	e7f5      	b.n	8003d8a <sin+0x5a>
 8003d9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003da2:	ed9d 0b00 	vldr	d0, [sp]
 8003da6:	2001      	movs	r0, #1
 8003da8:	f000 f8de 	bl	8003f68 <__kernel_sin>
 8003dac:	ec53 2b10 	vmov	r2, r3, d0
 8003db0:	4610      	mov	r0, r2
 8003db2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003db6:	e7d2      	b.n	8003d5e <sin+0x2e>
 8003db8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003dbc:	ed9d 0b00 	vldr	d0, [sp]
 8003dc0:	f000 f80a 	bl	8003dd8 <__kernel_cos>
 8003dc4:	e7f2      	b.n	8003dac <sin+0x7c>
 8003dc6:	bf00      	nop
	...
 8003dd0:	3fe921fb 	.word	0x3fe921fb
 8003dd4:	7fefffff 	.word	0x7fefffff

08003dd8 <__kernel_cos>:
 8003dd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ddc:	ec57 6b10 	vmov	r6, r7, d0
 8003de0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003de4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8003de8:	ed8d 1b00 	vstr	d1, [sp]
 8003dec:	d206      	bcs.n	8003dfc <__kernel_cos+0x24>
 8003dee:	4630      	mov	r0, r6
 8003df0:	4639      	mov	r1, r7
 8003df2:	f7fc fe5f 	bl	8000ab4 <__aeabi_d2iz>
 8003df6:	2800      	cmp	r0, #0
 8003df8:	f000 8088 	beq.w	8003f0c <__kernel_cos+0x134>
 8003dfc:	4632      	mov	r2, r6
 8003dfe:	463b      	mov	r3, r7
 8003e00:	4630      	mov	r0, r6
 8003e02:	4639      	mov	r1, r7
 8003e04:	f7fc fbbc 	bl	8000580 <__aeabi_dmul>
 8003e08:	4b51      	ldr	r3, [pc, #324]	@ (8003f50 <__kernel_cos+0x178>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	4604      	mov	r4, r0
 8003e0e:	460d      	mov	r5, r1
 8003e10:	f7fc fbb6 	bl	8000580 <__aeabi_dmul>
 8003e14:	a340      	add	r3, pc, #256	@ (adr r3, 8003f18 <__kernel_cos+0x140>)
 8003e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1a:	4682      	mov	sl, r0
 8003e1c:	468b      	mov	fp, r1
 8003e1e:	4620      	mov	r0, r4
 8003e20:	4629      	mov	r1, r5
 8003e22:	f7fc fbad 	bl	8000580 <__aeabi_dmul>
 8003e26:	a33e      	add	r3, pc, #248	@ (adr r3, 8003f20 <__kernel_cos+0x148>)
 8003e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2c:	f7fc f9f2 	bl	8000214 <__adddf3>
 8003e30:	4622      	mov	r2, r4
 8003e32:	462b      	mov	r3, r5
 8003e34:	f7fc fba4 	bl	8000580 <__aeabi_dmul>
 8003e38:	a33b      	add	r3, pc, #236	@ (adr r3, 8003f28 <__kernel_cos+0x150>)
 8003e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3e:	f7fc f9e7 	bl	8000210 <__aeabi_dsub>
 8003e42:	4622      	mov	r2, r4
 8003e44:	462b      	mov	r3, r5
 8003e46:	f7fc fb9b 	bl	8000580 <__aeabi_dmul>
 8003e4a:	a339      	add	r3, pc, #228	@ (adr r3, 8003f30 <__kernel_cos+0x158>)
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	f7fc f9e0 	bl	8000214 <__adddf3>
 8003e54:	4622      	mov	r2, r4
 8003e56:	462b      	mov	r3, r5
 8003e58:	f7fc fb92 	bl	8000580 <__aeabi_dmul>
 8003e5c:	a336      	add	r3, pc, #216	@ (adr r3, 8003f38 <__kernel_cos+0x160>)
 8003e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e62:	f7fc f9d5 	bl	8000210 <__aeabi_dsub>
 8003e66:	4622      	mov	r2, r4
 8003e68:	462b      	mov	r3, r5
 8003e6a:	f7fc fb89 	bl	8000580 <__aeabi_dmul>
 8003e6e:	a334      	add	r3, pc, #208	@ (adr r3, 8003f40 <__kernel_cos+0x168>)
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	f7fc f9ce 	bl	8000214 <__adddf3>
 8003e78:	4622      	mov	r2, r4
 8003e7a:	462b      	mov	r3, r5
 8003e7c:	f7fc fb80 	bl	8000580 <__aeabi_dmul>
 8003e80:	4622      	mov	r2, r4
 8003e82:	462b      	mov	r3, r5
 8003e84:	f7fc fb7c 	bl	8000580 <__aeabi_dmul>
 8003e88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e8c:	4604      	mov	r4, r0
 8003e8e:	460d      	mov	r5, r1
 8003e90:	4630      	mov	r0, r6
 8003e92:	4639      	mov	r1, r7
 8003e94:	f7fc fb74 	bl	8000580 <__aeabi_dmul>
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	4629      	mov	r1, r5
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f7fc f9b6 	bl	8000210 <__aeabi_dsub>
 8003ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f54 <__kernel_cos+0x17c>)
 8003ea6:	4598      	cmp	r8, r3
 8003ea8:	4606      	mov	r6, r0
 8003eaa:	460f      	mov	r7, r1
 8003eac:	d810      	bhi.n	8003ed0 <__kernel_cos+0xf8>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4650      	mov	r0, sl
 8003eb4:	4659      	mov	r1, fp
 8003eb6:	f7fc f9ab 	bl	8000210 <__aeabi_dsub>
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4926      	ldr	r1, [pc, #152]	@ (8003f58 <__kernel_cos+0x180>)
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	f7fc f9a5 	bl	8000210 <__aeabi_dsub>
 8003ec6:	ec41 0b10 	vmov	d0, r0, r1
 8003eca:	b003      	add	sp, #12
 8003ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ed0:	4b22      	ldr	r3, [pc, #136]	@ (8003f5c <__kernel_cos+0x184>)
 8003ed2:	4921      	ldr	r1, [pc, #132]	@ (8003f58 <__kernel_cos+0x180>)
 8003ed4:	4598      	cmp	r8, r3
 8003ed6:	bf8c      	ite	hi
 8003ed8:	4d21      	ldrhi	r5, [pc, #132]	@ (8003f60 <__kernel_cos+0x188>)
 8003eda:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8003ede:	2400      	movs	r4, #0
 8003ee0:	4622      	mov	r2, r4
 8003ee2:	462b      	mov	r3, r5
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	f7fc f993 	bl	8000210 <__aeabi_dsub>
 8003eea:	4622      	mov	r2, r4
 8003eec:	4680      	mov	r8, r0
 8003eee:	4689      	mov	r9, r1
 8003ef0:	462b      	mov	r3, r5
 8003ef2:	4650      	mov	r0, sl
 8003ef4:	4659      	mov	r1, fp
 8003ef6:	f7fc f98b 	bl	8000210 <__aeabi_dsub>
 8003efa:	4632      	mov	r2, r6
 8003efc:	463b      	mov	r3, r7
 8003efe:	f7fc f987 	bl	8000210 <__aeabi_dsub>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4640      	mov	r0, r8
 8003f08:	4649      	mov	r1, r9
 8003f0a:	e7da      	b.n	8003ec2 <__kernel_cos+0xea>
 8003f0c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8003f48 <__kernel_cos+0x170>
 8003f10:	e7db      	b.n	8003eca <__kernel_cos+0xf2>
 8003f12:	bf00      	nop
 8003f14:	f3af 8000 	nop.w
 8003f18:	be8838d4 	.word	0xbe8838d4
 8003f1c:	bda8fae9 	.word	0xbda8fae9
 8003f20:	bdb4b1c4 	.word	0xbdb4b1c4
 8003f24:	3e21ee9e 	.word	0x3e21ee9e
 8003f28:	809c52ad 	.word	0x809c52ad
 8003f2c:	3e927e4f 	.word	0x3e927e4f
 8003f30:	19cb1590 	.word	0x19cb1590
 8003f34:	3efa01a0 	.word	0x3efa01a0
 8003f38:	16c15177 	.word	0x16c15177
 8003f3c:	3f56c16c 	.word	0x3f56c16c
 8003f40:	5555554c 	.word	0x5555554c
 8003f44:	3fa55555 	.word	0x3fa55555
 8003f48:	00000000 	.word	0x00000000
 8003f4c:	3ff00000 	.word	0x3ff00000
 8003f50:	3fe00000 	.word	0x3fe00000
 8003f54:	3fd33332 	.word	0x3fd33332
 8003f58:	3ff00000 	.word	0x3ff00000
 8003f5c:	3fe90000 	.word	0x3fe90000
 8003f60:	3fd20000 	.word	0x3fd20000
 8003f64:	00000000 	.word	0x00000000

08003f68 <__kernel_sin>:
 8003f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f6c:	ec55 4b10 	vmov	r4, r5, d0
 8003f70:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8003f74:	b085      	sub	sp, #20
 8003f76:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8003f7a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8003f7e:	4680      	mov	r8, r0
 8003f80:	d205      	bcs.n	8003f8e <__kernel_sin+0x26>
 8003f82:	4620      	mov	r0, r4
 8003f84:	4629      	mov	r1, r5
 8003f86:	f7fc fd95 	bl	8000ab4 <__aeabi_d2iz>
 8003f8a:	2800      	cmp	r0, #0
 8003f8c:	d052      	beq.n	8004034 <__kernel_sin+0xcc>
 8003f8e:	4622      	mov	r2, r4
 8003f90:	462b      	mov	r3, r5
 8003f92:	4620      	mov	r0, r4
 8003f94:	4629      	mov	r1, r5
 8003f96:	f7fc faf3 	bl	8000580 <__aeabi_dmul>
 8003f9a:	4682      	mov	sl, r0
 8003f9c:	468b      	mov	fp, r1
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	f7fc faeb 	bl	8000580 <__aeabi_dmul>
 8003faa:	a342      	add	r3, pc, #264	@ (adr r3, 80040b4 <__kernel_sin+0x14c>)
 8003fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb0:	e9cd 0100 	strd	r0, r1, [sp]
 8003fb4:	4650      	mov	r0, sl
 8003fb6:	4659      	mov	r1, fp
 8003fb8:	f7fc fae2 	bl	8000580 <__aeabi_dmul>
 8003fbc:	a33f      	add	r3, pc, #252	@ (adr r3, 80040bc <__kernel_sin+0x154>)
 8003fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc2:	f7fc f925 	bl	8000210 <__aeabi_dsub>
 8003fc6:	4652      	mov	r2, sl
 8003fc8:	465b      	mov	r3, fp
 8003fca:	f7fc fad9 	bl	8000580 <__aeabi_dmul>
 8003fce:	a33d      	add	r3, pc, #244	@ (adr r3, 80040c4 <__kernel_sin+0x15c>)
 8003fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd4:	f7fc f91e 	bl	8000214 <__adddf3>
 8003fd8:	4652      	mov	r2, sl
 8003fda:	465b      	mov	r3, fp
 8003fdc:	f7fc fad0 	bl	8000580 <__aeabi_dmul>
 8003fe0:	a33a      	add	r3, pc, #232	@ (adr r3, 80040cc <__kernel_sin+0x164>)
 8003fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe6:	f7fc f913 	bl	8000210 <__aeabi_dsub>
 8003fea:	4652      	mov	r2, sl
 8003fec:	465b      	mov	r3, fp
 8003fee:	f7fc fac7 	bl	8000580 <__aeabi_dmul>
 8003ff2:	a338      	add	r3, pc, #224	@ (adr r3, 80040d4 <__kernel_sin+0x16c>)
 8003ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff8:	f7fc f90c 	bl	8000214 <__adddf3>
 8003ffc:	4606      	mov	r6, r0
 8003ffe:	460f      	mov	r7, r1
 8004000:	f1b8 0f00 	cmp.w	r8, #0
 8004004:	d11b      	bne.n	800403e <__kernel_sin+0xd6>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4650      	mov	r0, sl
 800400c:	4659      	mov	r1, fp
 800400e:	f7fc fab7 	bl	8000580 <__aeabi_dmul>
 8004012:	a325      	add	r3, pc, #148	@ (adr r3, 80040a8 <__kernel_sin+0x140>)
 8004014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004018:	f7fc f8fa 	bl	8000210 <__aeabi_dsub>
 800401c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004020:	f7fc faae 	bl	8000580 <__aeabi_dmul>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4620      	mov	r0, r4
 800402a:	4629      	mov	r1, r5
 800402c:	f7fc f8f2 	bl	8000214 <__adddf3>
 8004030:	4604      	mov	r4, r0
 8004032:	460d      	mov	r5, r1
 8004034:	ec45 4b10 	vmov	d0, r4, r5
 8004038:	b005      	add	sp, #20
 800403a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800403e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004042:	4b1b      	ldr	r3, [pc, #108]	@ (80040b0 <__kernel_sin+0x148>)
 8004044:	2200      	movs	r2, #0
 8004046:	f7fc fa9b 	bl	8000580 <__aeabi_dmul>
 800404a:	4632      	mov	r2, r6
 800404c:	4680      	mov	r8, r0
 800404e:	4689      	mov	r9, r1
 8004050:	463b      	mov	r3, r7
 8004052:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004056:	f7fc fa93 	bl	8000580 <__aeabi_dmul>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	4640      	mov	r0, r8
 8004060:	4649      	mov	r1, r9
 8004062:	f7fc f8d5 	bl	8000210 <__aeabi_dsub>
 8004066:	4652      	mov	r2, sl
 8004068:	465b      	mov	r3, fp
 800406a:	f7fc fa89 	bl	8000580 <__aeabi_dmul>
 800406e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004072:	f7fc f8cd 	bl	8000210 <__aeabi_dsub>
 8004076:	a30c      	add	r3, pc, #48	@ (adr r3, 80040a8 <__kernel_sin+0x140>)
 8004078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407c:	4606      	mov	r6, r0
 800407e:	460f      	mov	r7, r1
 8004080:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004084:	f7fc fa7c 	bl	8000580 <__aeabi_dmul>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4630      	mov	r0, r6
 800408e:	4639      	mov	r1, r7
 8004090:	f7fc f8c0 	bl	8000214 <__adddf3>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4620      	mov	r0, r4
 800409a:	4629      	mov	r1, r5
 800409c:	f7fc f8b8 	bl	8000210 <__aeabi_dsub>
 80040a0:	e7c6      	b.n	8004030 <__kernel_sin+0xc8>
 80040a2:	bf00      	nop
 80040a4:	f3af 8000 	nop.w
 80040a8:	55555549 	.word	0x55555549
 80040ac:	3fc55555 	.word	0x3fc55555
 80040b0:	3fe00000 	.word	0x3fe00000
 80040b4:	5acfd57c 	.word	0x5acfd57c
 80040b8:	3de5d93a 	.word	0x3de5d93a
 80040bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80040c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80040c4:	57b1fe7d 	.word	0x57b1fe7d
 80040c8:	3ec71de3 	.word	0x3ec71de3
 80040cc:	19c161d5 	.word	0x19c161d5
 80040d0:	3f2a01a0 	.word	0x3f2a01a0
 80040d4:	1110f8a6 	.word	0x1110f8a6
 80040d8:	3f811111 	.word	0x3f811111
 80040dc:	00000000 	.word	0x00000000

080040e0 <__ieee754_rem_pio2>:
 80040e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e4:	ec57 6b10 	vmov	r6, r7, d0
 80040e8:	4bc5      	ldr	r3, [pc, #788]	@ (8004400 <__ieee754_rem_pio2+0x320>)
 80040ea:	b08d      	sub	sp, #52	@ 0x34
 80040ec:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80040f0:	4598      	cmp	r8, r3
 80040f2:	4604      	mov	r4, r0
 80040f4:	9704      	str	r7, [sp, #16]
 80040f6:	d807      	bhi.n	8004108 <__ieee754_rem_pio2+0x28>
 80040f8:	2200      	movs	r2, #0
 80040fa:	2300      	movs	r3, #0
 80040fc:	ed80 0b00 	vstr	d0, [r0]
 8004100:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004104:	2500      	movs	r5, #0
 8004106:	e028      	b.n	800415a <__ieee754_rem_pio2+0x7a>
 8004108:	4bbe      	ldr	r3, [pc, #760]	@ (8004404 <__ieee754_rem_pio2+0x324>)
 800410a:	4598      	cmp	r8, r3
 800410c:	d878      	bhi.n	8004200 <__ieee754_rem_pio2+0x120>
 800410e:	9b04      	ldr	r3, [sp, #16]
 8004110:	4dbd      	ldr	r5, [pc, #756]	@ (8004408 <__ieee754_rem_pio2+0x328>)
 8004112:	2b00      	cmp	r3, #0
 8004114:	4630      	mov	r0, r6
 8004116:	a3ac      	add	r3, pc, #688	@ (adr r3, 80043c8 <__ieee754_rem_pio2+0x2e8>)
 8004118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411c:	4639      	mov	r1, r7
 800411e:	dd38      	ble.n	8004192 <__ieee754_rem_pio2+0xb2>
 8004120:	f7fc f876 	bl	8000210 <__aeabi_dsub>
 8004124:	45a8      	cmp	r8, r5
 8004126:	4606      	mov	r6, r0
 8004128:	460f      	mov	r7, r1
 800412a:	d01a      	beq.n	8004162 <__ieee754_rem_pio2+0x82>
 800412c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80043d0 <__ieee754_rem_pio2+0x2f0>)
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	f7fc f86d 	bl	8000210 <__aeabi_dsub>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	4680      	mov	r8, r0
 800413c:	4689      	mov	r9, r1
 800413e:	4630      	mov	r0, r6
 8004140:	4639      	mov	r1, r7
 8004142:	f7fc f865 	bl	8000210 <__aeabi_dsub>
 8004146:	a3a2      	add	r3, pc, #648	@ (adr r3, 80043d0 <__ieee754_rem_pio2+0x2f0>)
 8004148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414c:	f7fc f860 	bl	8000210 <__aeabi_dsub>
 8004150:	e9c4 8900 	strd	r8, r9, [r4]
 8004154:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004158:	2501      	movs	r5, #1
 800415a:	4628      	mov	r0, r5
 800415c:	b00d      	add	sp, #52	@ 0x34
 800415e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004162:	a39d      	add	r3, pc, #628	@ (adr r3, 80043d8 <__ieee754_rem_pio2+0x2f8>)
 8004164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004168:	f7fc f852 	bl	8000210 <__aeabi_dsub>
 800416c:	a39c      	add	r3, pc, #624	@ (adr r3, 80043e0 <__ieee754_rem_pio2+0x300>)
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	4606      	mov	r6, r0
 8004174:	460f      	mov	r7, r1
 8004176:	f7fc f84b 	bl	8000210 <__aeabi_dsub>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4680      	mov	r8, r0
 8004180:	4689      	mov	r9, r1
 8004182:	4630      	mov	r0, r6
 8004184:	4639      	mov	r1, r7
 8004186:	f7fc f843 	bl	8000210 <__aeabi_dsub>
 800418a:	a395      	add	r3, pc, #596	@ (adr r3, 80043e0 <__ieee754_rem_pio2+0x300>)
 800418c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004190:	e7dc      	b.n	800414c <__ieee754_rem_pio2+0x6c>
 8004192:	f7fc f83f 	bl	8000214 <__adddf3>
 8004196:	45a8      	cmp	r8, r5
 8004198:	4606      	mov	r6, r0
 800419a:	460f      	mov	r7, r1
 800419c:	d018      	beq.n	80041d0 <__ieee754_rem_pio2+0xf0>
 800419e:	a38c      	add	r3, pc, #560	@ (adr r3, 80043d0 <__ieee754_rem_pio2+0x2f0>)
 80041a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a4:	f7fc f836 	bl	8000214 <__adddf3>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4680      	mov	r8, r0
 80041ae:	4689      	mov	r9, r1
 80041b0:	4630      	mov	r0, r6
 80041b2:	4639      	mov	r1, r7
 80041b4:	f7fc f82c 	bl	8000210 <__aeabi_dsub>
 80041b8:	a385      	add	r3, pc, #532	@ (adr r3, 80043d0 <__ieee754_rem_pio2+0x2f0>)
 80041ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041be:	f7fc f829 	bl	8000214 <__adddf3>
 80041c2:	f04f 35ff 	mov.w	r5, #4294967295
 80041c6:	e9c4 8900 	strd	r8, r9, [r4]
 80041ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80041ce:	e7c4      	b.n	800415a <__ieee754_rem_pio2+0x7a>
 80041d0:	a381      	add	r3, pc, #516	@ (adr r3, 80043d8 <__ieee754_rem_pio2+0x2f8>)
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	f7fc f81d 	bl	8000214 <__adddf3>
 80041da:	a381      	add	r3, pc, #516	@ (adr r3, 80043e0 <__ieee754_rem_pio2+0x300>)
 80041dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e0:	4606      	mov	r6, r0
 80041e2:	460f      	mov	r7, r1
 80041e4:	f7fc f816 	bl	8000214 <__adddf3>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4680      	mov	r8, r0
 80041ee:	4689      	mov	r9, r1
 80041f0:	4630      	mov	r0, r6
 80041f2:	4639      	mov	r1, r7
 80041f4:	f7fc f80c 	bl	8000210 <__aeabi_dsub>
 80041f8:	a379      	add	r3, pc, #484	@ (adr r3, 80043e0 <__ieee754_rem_pio2+0x300>)
 80041fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fe:	e7de      	b.n	80041be <__ieee754_rem_pio2+0xde>
 8004200:	4b82      	ldr	r3, [pc, #520]	@ (800440c <__ieee754_rem_pio2+0x32c>)
 8004202:	4598      	cmp	r8, r3
 8004204:	f200 80d1 	bhi.w	80043aa <__ieee754_rem_pio2+0x2ca>
 8004208:	f000 f966 	bl	80044d8 <fabs>
 800420c:	ec57 6b10 	vmov	r6, r7, d0
 8004210:	a375      	add	r3, pc, #468	@ (adr r3, 80043e8 <__ieee754_rem_pio2+0x308>)
 8004212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004216:	4630      	mov	r0, r6
 8004218:	4639      	mov	r1, r7
 800421a:	f7fc f9b1 	bl	8000580 <__aeabi_dmul>
 800421e:	4b7c      	ldr	r3, [pc, #496]	@ (8004410 <__ieee754_rem_pio2+0x330>)
 8004220:	2200      	movs	r2, #0
 8004222:	f7fb fff7 	bl	8000214 <__adddf3>
 8004226:	f7fc fc45 	bl	8000ab4 <__aeabi_d2iz>
 800422a:	4605      	mov	r5, r0
 800422c:	f7fc f93e 	bl	80004ac <__aeabi_i2d>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004238:	a363      	add	r3, pc, #396	@ (adr r3, 80043c8 <__ieee754_rem_pio2+0x2e8>)
 800423a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423e:	f7fc f99f 	bl	8000580 <__aeabi_dmul>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	4630      	mov	r0, r6
 8004248:	4639      	mov	r1, r7
 800424a:	f7fb ffe1 	bl	8000210 <__aeabi_dsub>
 800424e:	a360      	add	r3, pc, #384	@ (adr r3, 80043d0 <__ieee754_rem_pio2+0x2f0>)
 8004250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004254:	4682      	mov	sl, r0
 8004256:	468b      	mov	fp, r1
 8004258:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800425c:	f7fc f990 	bl	8000580 <__aeabi_dmul>
 8004260:	2d1f      	cmp	r5, #31
 8004262:	4606      	mov	r6, r0
 8004264:	460f      	mov	r7, r1
 8004266:	dc0c      	bgt.n	8004282 <__ieee754_rem_pio2+0x1a2>
 8004268:	4b6a      	ldr	r3, [pc, #424]	@ (8004414 <__ieee754_rem_pio2+0x334>)
 800426a:	1e6a      	subs	r2, r5, #1
 800426c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004270:	4543      	cmp	r3, r8
 8004272:	d006      	beq.n	8004282 <__ieee754_rem_pio2+0x1a2>
 8004274:	4632      	mov	r2, r6
 8004276:	463b      	mov	r3, r7
 8004278:	4650      	mov	r0, sl
 800427a:	4659      	mov	r1, fp
 800427c:	f7fb ffc8 	bl	8000210 <__aeabi_dsub>
 8004280:	e00e      	b.n	80042a0 <__ieee754_rem_pio2+0x1c0>
 8004282:	463b      	mov	r3, r7
 8004284:	4632      	mov	r2, r6
 8004286:	4650      	mov	r0, sl
 8004288:	4659      	mov	r1, fp
 800428a:	f7fb ffc1 	bl	8000210 <__aeabi_dsub>
 800428e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004292:	9305      	str	r3, [sp, #20]
 8004294:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004298:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800429c:	2b10      	cmp	r3, #16
 800429e:	dc02      	bgt.n	80042a6 <__ieee754_rem_pio2+0x1c6>
 80042a0:	e9c4 0100 	strd	r0, r1, [r4]
 80042a4:	e039      	b.n	800431a <__ieee754_rem_pio2+0x23a>
 80042a6:	a34c      	add	r3, pc, #304	@ (adr r3, 80043d8 <__ieee754_rem_pio2+0x2f8>)
 80042a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042b0:	f7fc f966 	bl	8000580 <__aeabi_dmul>
 80042b4:	4606      	mov	r6, r0
 80042b6:	460f      	mov	r7, r1
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4650      	mov	r0, sl
 80042be:	4659      	mov	r1, fp
 80042c0:	f7fb ffa6 	bl	8000210 <__aeabi_dsub>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4680      	mov	r8, r0
 80042ca:	4689      	mov	r9, r1
 80042cc:	4650      	mov	r0, sl
 80042ce:	4659      	mov	r1, fp
 80042d0:	f7fb ff9e 	bl	8000210 <__aeabi_dsub>
 80042d4:	4632      	mov	r2, r6
 80042d6:	463b      	mov	r3, r7
 80042d8:	f7fb ff9a 	bl	8000210 <__aeabi_dsub>
 80042dc:	a340      	add	r3, pc, #256	@ (adr r3, 80043e0 <__ieee754_rem_pio2+0x300>)
 80042de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e2:	4606      	mov	r6, r0
 80042e4:	460f      	mov	r7, r1
 80042e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042ea:	f7fc f949 	bl	8000580 <__aeabi_dmul>
 80042ee:	4632      	mov	r2, r6
 80042f0:	463b      	mov	r3, r7
 80042f2:	f7fb ff8d 	bl	8000210 <__aeabi_dsub>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4606      	mov	r6, r0
 80042fc:	460f      	mov	r7, r1
 80042fe:	4640      	mov	r0, r8
 8004300:	4649      	mov	r1, r9
 8004302:	f7fb ff85 	bl	8000210 <__aeabi_dsub>
 8004306:	9a05      	ldr	r2, [sp, #20]
 8004308:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b31      	cmp	r3, #49	@ 0x31
 8004310:	dc20      	bgt.n	8004354 <__ieee754_rem_pio2+0x274>
 8004312:	e9c4 0100 	strd	r0, r1, [r4]
 8004316:	46c2      	mov	sl, r8
 8004318:	46cb      	mov	fp, r9
 800431a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800431e:	4650      	mov	r0, sl
 8004320:	4642      	mov	r2, r8
 8004322:	464b      	mov	r3, r9
 8004324:	4659      	mov	r1, fp
 8004326:	f7fb ff73 	bl	8000210 <__aeabi_dsub>
 800432a:	463b      	mov	r3, r7
 800432c:	4632      	mov	r2, r6
 800432e:	f7fb ff6f 	bl	8000210 <__aeabi_dsub>
 8004332:	9b04      	ldr	r3, [sp, #16]
 8004334:	2b00      	cmp	r3, #0
 8004336:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800433a:	f6bf af0e 	bge.w	800415a <__ieee754_rem_pio2+0x7a>
 800433e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8004342:	6063      	str	r3, [r4, #4]
 8004344:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004348:	f8c4 8000 	str.w	r8, [r4]
 800434c:	60a0      	str	r0, [r4, #8]
 800434e:	60e3      	str	r3, [r4, #12]
 8004350:	426d      	negs	r5, r5
 8004352:	e702      	b.n	800415a <__ieee754_rem_pio2+0x7a>
 8004354:	a326      	add	r3, pc, #152	@ (adr r3, 80043f0 <__ieee754_rem_pio2+0x310>)
 8004356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800435e:	f7fc f90f 	bl	8000580 <__aeabi_dmul>
 8004362:	4606      	mov	r6, r0
 8004364:	460f      	mov	r7, r1
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	4640      	mov	r0, r8
 800436c:	4649      	mov	r1, r9
 800436e:	f7fb ff4f 	bl	8000210 <__aeabi_dsub>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4682      	mov	sl, r0
 8004378:	468b      	mov	fp, r1
 800437a:	4640      	mov	r0, r8
 800437c:	4649      	mov	r1, r9
 800437e:	f7fb ff47 	bl	8000210 <__aeabi_dsub>
 8004382:	4632      	mov	r2, r6
 8004384:	463b      	mov	r3, r7
 8004386:	f7fb ff43 	bl	8000210 <__aeabi_dsub>
 800438a:	a31b      	add	r3, pc, #108	@ (adr r3, 80043f8 <__ieee754_rem_pio2+0x318>)
 800438c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004390:	4606      	mov	r6, r0
 8004392:	460f      	mov	r7, r1
 8004394:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004398:	f7fc f8f2 	bl	8000580 <__aeabi_dmul>
 800439c:	4632      	mov	r2, r6
 800439e:	463b      	mov	r3, r7
 80043a0:	f7fb ff36 	bl	8000210 <__aeabi_dsub>
 80043a4:	4606      	mov	r6, r0
 80043a6:	460f      	mov	r7, r1
 80043a8:	e764      	b.n	8004274 <__ieee754_rem_pio2+0x194>
 80043aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004418 <__ieee754_rem_pio2+0x338>)
 80043ac:	4598      	cmp	r8, r3
 80043ae:	d935      	bls.n	800441c <__ieee754_rem_pio2+0x33c>
 80043b0:	4632      	mov	r2, r6
 80043b2:	463b      	mov	r3, r7
 80043b4:	4630      	mov	r0, r6
 80043b6:	4639      	mov	r1, r7
 80043b8:	f7fb ff2a 	bl	8000210 <__aeabi_dsub>
 80043bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80043c0:	e9c4 0100 	strd	r0, r1, [r4]
 80043c4:	e69e      	b.n	8004104 <__ieee754_rem_pio2+0x24>
 80043c6:	bf00      	nop
 80043c8:	54400000 	.word	0x54400000
 80043cc:	3ff921fb 	.word	0x3ff921fb
 80043d0:	1a626331 	.word	0x1a626331
 80043d4:	3dd0b461 	.word	0x3dd0b461
 80043d8:	1a600000 	.word	0x1a600000
 80043dc:	3dd0b461 	.word	0x3dd0b461
 80043e0:	2e037073 	.word	0x2e037073
 80043e4:	3ba3198a 	.word	0x3ba3198a
 80043e8:	6dc9c883 	.word	0x6dc9c883
 80043ec:	3fe45f30 	.word	0x3fe45f30
 80043f0:	2e000000 	.word	0x2e000000
 80043f4:	3ba3198a 	.word	0x3ba3198a
 80043f8:	252049c1 	.word	0x252049c1
 80043fc:	397b839a 	.word	0x397b839a
 8004400:	3fe921fb 	.word	0x3fe921fb
 8004404:	4002d97b 	.word	0x4002d97b
 8004408:	3ff921fb 	.word	0x3ff921fb
 800440c:	413921fb 	.word	0x413921fb
 8004410:	3fe00000 	.word	0x3fe00000
 8004414:	08004dc0 	.word	0x08004dc0
 8004418:	7fefffff 	.word	0x7fefffff
 800441c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004420:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8004424:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004428:	4630      	mov	r0, r6
 800442a:	460f      	mov	r7, r1
 800442c:	f7fc fb42 	bl	8000ab4 <__aeabi_d2iz>
 8004430:	f7fc f83c 	bl	80004ac <__aeabi_i2d>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4630      	mov	r0, r6
 800443a:	4639      	mov	r1, r7
 800443c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004440:	f7fb fee6 	bl	8000210 <__aeabi_dsub>
 8004444:	4b22      	ldr	r3, [pc, #136]	@ (80044d0 <__ieee754_rem_pio2+0x3f0>)
 8004446:	2200      	movs	r2, #0
 8004448:	f7fc f89a 	bl	8000580 <__aeabi_dmul>
 800444c:	460f      	mov	r7, r1
 800444e:	4606      	mov	r6, r0
 8004450:	f7fc fb30 	bl	8000ab4 <__aeabi_d2iz>
 8004454:	f7fc f82a 	bl	80004ac <__aeabi_i2d>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4630      	mov	r0, r6
 800445e:	4639      	mov	r1, r7
 8004460:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004464:	f7fb fed4 	bl	8000210 <__aeabi_dsub>
 8004468:	4b19      	ldr	r3, [pc, #100]	@ (80044d0 <__ieee754_rem_pio2+0x3f0>)
 800446a:	2200      	movs	r2, #0
 800446c:	f7fc f888 	bl	8000580 <__aeabi_dmul>
 8004470:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8004474:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8004478:	f04f 0803 	mov.w	r8, #3
 800447c:	2600      	movs	r6, #0
 800447e:	2700      	movs	r7, #0
 8004480:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004484:	4632      	mov	r2, r6
 8004486:	463b      	mov	r3, r7
 8004488:	46c2      	mov	sl, r8
 800448a:	f108 38ff 	add.w	r8, r8, #4294967295
 800448e:	f7fc fadf 	bl	8000a50 <__aeabi_dcmpeq>
 8004492:	2800      	cmp	r0, #0
 8004494:	d1f4      	bne.n	8004480 <__ieee754_rem_pio2+0x3a0>
 8004496:	4b0f      	ldr	r3, [pc, #60]	@ (80044d4 <__ieee754_rem_pio2+0x3f4>)
 8004498:	9301      	str	r3, [sp, #4]
 800449a:	2302      	movs	r3, #2
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	462a      	mov	r2, r5
 80044a0:	4653      	mov	r3, sl
 80044a2:	4621      	mov	r1, r4
 80044a4:	a806      	add	r0, sp, #24
 80044a6:	f000 f81f 	bl	80044e8 <__kernel_rem_pio2>
 80044aa:	9b04      	ldr	r3, [sp, #16]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	4605      	mov	r5, r0
 80044b0:	f6bf ae53 	bge.w	800415a <__ieee754_rem_pio2+0x7a>
 80044b4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80044b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80044bc:	e9c4 2300 	strd	r2, r3, [r4]
 80044c0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80044c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80044c8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80044cc:	e740      	b.n	8004350 <__ieee754_rem_pio2+0x270>
 80044ce:	bf00      	nop
 80044d0:	41700000 	.word	0x41700000
 80044d4:	08004e40 	.word	0x08004e40

080044d8 <fabs>:
 80044d8:	ec51 0b10 	vmov	r0, r1, d0
 80044dc:	4602      	mov	r2, r0
 80044de:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80044e2:	ec43 2b10 	vmov	d0, r2, r3
 80044e6:	4770      	bx	lr

080044e8 <__kernel_rem_pio2>:
 80044e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ec:	ed2d 8b02 	vpush	{d8}
 80044f0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80044f4:	f112 0f14 	cmn.w	r2, #20
 80044f8:	9306      	str	r3, [sp, #24]
 80044fa:	9104      	str	r1, [sp, #16]
 80044fc:	4bbe      	ldr	r3, [pc, #760]	@ (80047f8 <__kernel_rem_pio2+0x310>)
 80044fe:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8004500:	9008      	str	r0, [sp, #32]
 8004502:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	9b06      	ldr	r3, [sp, #24]
 800450a:	f103 33ff 	add.w	r3, r3, #4294967295
 800450e:	bfa8      	it	ge
 8004510:	1ed4      	subge	r4, r2, #3
 8004512:	9305      	str	r3, [sp, #20]
 8004514:	bfb2      	itee	lt
 8004516:	2400      	movlt	r4, #0
 8004518:	2318      	movge	r3, #24
 800451a:	fb94 f4f3 	sdivge	r4, r4, r3
 800451e:	f06f 0317 	mvn.w	r3, #23
 8004522:	fb04 3303 	mla	r3, r4, r3, r3
 8004526:	eb03 0b02 	add.w	fp, r3, r2
 800452a:	9b00      	ldr	r3, [sp, #0]
 800452c:	9a05      	ldr	r2, [sp, #20]
 800452e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80047e8 <__kernel_rem_pio2+0x300>
 8004532:	eb03 0802 	add.w	r8, r3, r2
 8004536:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004538:	1aa7      	subs	r7, r4, r2
 800453a:	ae20      	add	r6, sp, #128	@ 0x80
 800453c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004540:	2500      	movs	r5, #0
 8004542:	4545      	cmp	r5, r8
 8004544:	dd13      	ble.n	800456e <__kernel_rem_pio2+0x86>
 8004546:	9b06      	ldr	r3, [sp, #24]
 8004548:	aa20      	add	r2, sp, #128	@ 0x80
 800454a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800454e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8004552:	f04f 0800 	mov.w	r8, #0
 8004556:	9b00      	ldr	r3, [sp, #0]
 8004558:	4598      	cmp	r8, r3
 800455a:	dc31      	bgt.n	80045c0 <__kernel_rem_pio2+0xd8>
 800455c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80047e8 <__kernel_rem_pio2+0x300>
 8004560:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004564:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004568:	462f      	mov	r7, r5
 800456a:	2600      	movs	r6, #0
 800456c:	e01b      	b.n	80045a6 <__kernel_rem_pio2+0xbe>
 800456e:	42ef      	cmn	r7, r5
 8004570:	d407      	bmi.n	8004582 <__kernel_rem_pio2+0x9a>
 8004572:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004576:	f7fb ff99 	bl	80004ac <__aeabi_i2d>
 800457a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800457e:	3501      	adds	r5, #1
 8004580:	e7df      	b.n	8004542 <__kernel_rem_pio2+0x5a>
 8004582:	ec51 0b18 	vmov	r0, r1, d8
 8004586:	e7f8      	b.n	800457a <__kernel_rem_pio2+0x92>
 8004588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800458c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004590:	f7fb fff6 	bl	8000580 <__aeabi_dmul>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800459c:	f7fb fe3a 	bl	8000214 <__adddf3>
 80045a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045a4:	3601      	adds	r6, #1
 80045a6:	9b05      	ldr	r3, [sp, #20]
 80045a8:	429e      	cmp	r6, r3
 80045aa:	f1a7 0708 	sub.w	r7, r7, #8
 80045ae:	ddeb      	ble.n	8004588 <__kernel_rem_pio2+0xa0>
 80045b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80045b4:	f108 0801 	add.w	r8, r8, #1
 80045b8:	ecaa 7b02 	vstmia	sl!, {d7}
 80045bc:	3508      	adds	r5, #8
 80045be:	e7ca      	b.n	8004556 <__kernel_rem_pio2+0x6e>
 80045c0:	9b00      	ldr	r3, [sp, #0]
 80045c2:	f8dd 8000 	ldr.w	r8, [sp]
 80045c6:	aa0c      	add	r2, sp, #48	@ 0x30
 80045c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80045cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80045ce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80045d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80045d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80045d6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80045da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045dc:	ab98      	add	r3, sp, #608	@ 0x260
 80045de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80045e2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80045e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80045ea:	ac0c      	add	r4, sp, #48	@ 0x30
 80045ec:	ab70      	add	r3, sp, #448	@ 0x1c0
 80045ee:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80045f2:	46a1      	mov	r9, r4
 80045f4:	46c2      	mov	sl, r8
 80045f6:	f1ba 0f00 	cmp.w	sl, #0
 80045fa:	f1a5 0508 	sub.w	r5, r5, #8
 80045fe:	dc77      	bgt.n	80046f0 <__kernel_rem_pio2+0x208>
 8004600:	4658      	mov	r0, fp
 8004602:	ed9d 0b02 	vldr	d0, [sp, #8]
 8004606:	f000 fac7 	bl	8004b98 <scalbn>
 800460a:	ec57 6b10 	vmov	r6, r7, d0
 800460e:	2200      	movs	r2, #0
 8004610:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8004614:	4630      	mov	r0, r6
 8004616:	4639      	mov	r1, r7
 8004618:	f7fb ffb2 	bl	8000580 <__aeabi_dmul>
 800461c:	ec41 0b10 	vmov	d0, r0, r1
 8004620:	f000 fb3a 	bl	8004c98 <floor>
 8004624:	4b75      	ldr	r3, [pc, #468]	@ (80047fc <__kernel_rem_pio2+0x314>)
 8004626:	ec51 0b10 	vmov	r0, r1, d0
 800462a:	2200      	movs	r2, #0
 800462c:	f7fb ffa8 	bl	8000580 <__aeabi_dmul>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4630      	mov	r0, r6
 8004636:	4639      	mov	r1, r7
 8004638:	f7fb fdea 	bl	8000210 <__aeabi_dsub>
 800463c:	460f      	mov	r7, r1
 800463e:	4606      	mov	r6, r0
 8004640:	f7fc fa38 	bl	8000ab4 <__aeabi_d2iz>
 8004644:	9002      	str	r0, [sp, #8]
 8004646:	f7fb ff31 	bl	80004ac <__aeabi_i2d>
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	4630      	mov	r0, r6
 8004650:	4639      	mov	r1, r7
 8004652:	f7fb fddd 	bl	8000210 <__aeabi_dsub>
 8004656:	f1bb 0f00 	cmp.w	fp, #0
 800465a:	4606      	mov	r6, r0
 800465c:	460f      	mov	r7, r1
 800465e:	dd6c      	ble.n	800473a <__kernel_rem_pio2+0x252>
 8004660:	f108 31ff 	add.w	r1, r8, #4294967295
 8004664:	ab0c      	add	r3, sp, #48	@ 0x30
 8004666:	9d02      	ldr	r5, [sp, #8]
 8004668:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800466c:	f1cb 0018 	rsb	r0, fp, #24
 8004670:	fa43 f200 	asr.w	r2, r3, r0
 8004674:	4415      	add	r5, r2
 8004676:	4082      	lsls	r2, r0
 8004678:	1a9b      	subs	r3, r3, r2
 800467a:	aa0c      	add	r2, sp, #48	@ 0x30
 800467c:	9502      	str	r5, [sp, #8]
 800467e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004682:	f1cb 0217 	rsb	r2, fp, #23
 8004686:	fa43 f902 	asr.w	r9, r3, r2
 800468a:	f1b9 0f00 	cmp.w	r9, #0
 800468e:	dd64      	ble.n	800475a <__kernel_rem_pio2+0x272>
 8004690:	9b02      	ldr	r3, [sp, #8]
 8004692:	2200      	movs	r2, #0
 8004694:	3301      	adds	r3, #1
 8004696:	9302      	str	r3, [sp, #8]
 8004698:	4615      	mov	r5, r2
 800469a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800469e:	4590      	cmp	r8, r2
 80046a0:	f300 80b8 	bgt.w	8004814 <__kernel_rem_pio2+0x32c>
 80046a4:	f1bb 0f00 	cmp.w	fp, #0
 80046a8:	dd07      	ble.n	80046ba <__kernel_rem_pio2+0x1d2>
 80046aa:	f1bb 0f01 	cmp.w	fp, #1
 80046ae:	f000 80bf 	beq.w	8004830 <__kernel_rem_pio2+0x348>
 80046b2:	f1bb 0f02 	cmp.w	fp, #2
 80046b6:	f000 80c6 	beq.w	8004846 <__kernel_rem_pio2+0x35e>
 80046ba:	f1b9 0f02 	cmp.w	r9, #2
 80046be:	d14c      	bne.n	800475a <__kernel_rem_pio2+0x272>
 80046c0:	4632      	mov	r2, r6
 80046c2:	463b      	mov	r3, r7
 80046c4:	494e      	ldr	r1, [pc, #312]	@ (8004800 <__kernel_rem_pio2+0x318>)
 80046c6:	2000      	movs	r0, #0
 80046c8:	f7fb fda2 	bl	8000210 <__aeabi_dsub>
 80046cc:	4606      	mov	r6, r0
 80046ce:	460f      	mov	r7, r1
 80046d0:	2d00      	cmp	r5, #0
 80046d2:	d042      	beq.n	800475a <__kernel_rem_pio2+0x272>
 80046d4:	4658      	mov	r0, fp
 80046d6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80047f0 <__kernel_rem_pio2+0x308>
 80046da:	f000 fa5d 	bl	8004b98 <scalbn>
 80046de:	4630      	mov	r0, r6
 80046e0:	4639      	mov	r1, r7
 80046e2:	ec53 2b10 	vmov	r2, r3, d0
 80046e6:	f7fb fd93 	bl	8000210 <__aeabi_dsub>
 80046ea:	4606      	mov	r6, r0
 80046ec:	460f      	mov	r7, r1
 80046ee:	e034      	b.n	800475a <__kernel_rem_pio2+0x272>
 80046f0:	4b44      	ldr	r3, [pc, #272]	@ (8004804 <__kernel_rem_pio2+0x31c>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046f8:	f7fb ff42 	bl	8000580 <__aeabi_dmul>
 80046fc:	f7fc f9da 	bl	8000ab4 <__aeabi_d2iz>
 8004700:	f7fb fed4 	bl	80004ac <__aeabi_i2d>
 8004704:	4b40      	ldr	r3, [pc, #256]	@ (8004808 <__kernel_rem_pio2+0x320>)
 8004706:	2200      	movs	r2, #0
 8004708:	4606      	mov	r6, r0
 800470a:	460f      	mov	r7, r1
 800470c:	f7fb ff38 	bl	8000580 <__aeabi_dmul>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004718:	f7fb fd7a 	bl	8000210 <__aeabi_dsub>
 800471c:	f7fc f9ca 	bl	8000ab4 <__aeabi_d2iz>
 8004720:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004724:	f849 0b04 	str.w	r0, [r9], #4
 8004728:	4639      	mov	r1, r7
 800472a:	4630      	mov	r0, r6
 800472c:	f7fb fd72 	bl	8000214 <__adddf3>
 8004730:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004738:	e75d      	b.n	80045f6 <__kernel_rem_pio2+0x10e>
 800473a:	d107      	bne.n	800474c <__kernel_rem_pio2+0x264>
 800473c:	f108 33ff 	add.w	r3, r8, #4294967295
 8004740:	aa0c      	add	r2, sp, #48	@ 0x30
 8004742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004746:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800474a:	e79e      	b.n	800468a <__kernel_rem_pio2+0x1a2>
 800474c:	4b2f      	ldr	r3, [pc, #188]	@ (800480c <__kernel_rem_pio2+0x324>)
 800474e:	2200      	movs	r2, #0
 8004750:	f7fc f99c 	bl	8000a8c <__aeabi_dcmpge>
 8004754:	2800      	cmp	r0, #0
 8004756:	d143      	bne.n	80047e0 <__kernel_rem_pio2+0x2f8>
 8004758:	4681      	mov	r9, r0
 800475a:	2200      	movs	r2, #0
 800475c:	2300      	movs	r3, #0
 800475e:	4630      	mov	r0, r6
 8004760:	4639      	mov	r1, r7
 8004762:	f7fc f975 	bl	8000a50 <__aeabi_dcmpeq>
 8004766:	2800      	cmp	r0, #0
 8004768:	f000 80bf 	beq.w	80048ea <__kernel_rem_pio2+0x402>
 800476c:	f108 33ff 	add.w	r3, r8, #4294967295
 8004770:	2200      	movs	r2, #0
 8004772:	9900      	ldr	r1, [sp, #0]
 8004774:	428b      	cmp	r3, r1
 8004776:	da6e      	bge.n	8004856 <__kernel_rem_pio2+0x36e>
 8004778:	2a00      	cmp	r2, #0
 800477a:	f000 8089 	beq.w	8004890 <__kernel_rem_pio2+0x3a8>
 800477e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004782:	ab0c      	add	r3, sp, #48	@ 0x30
 8004784:	f1ab 0b18 	sub.w	fp, fp, #24
 8004788:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0f6      	beq.n	800477e <__kernel_rem_pio2+0x296>
 8004790:	4658      	mov	r0, fp
 8004792:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80047f0 <__kernel_rem_pio2+0x308>
 8004796:	f000 f9ff 	bl	8004b98 <scalbn>
 800479a:	f108 0301 	add.w	r3, r8, #1
 800479e:	00da      	lsls	r2, r3, #3
 80047a0:	9205      	str	r2, [sp, #20]
 80047a2:	ec55 4b10 	vmov	r4, r5, d0
 80047a6:	aa70      	add	r2, sp, #448	@ 0x1c0
 80047a8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8004804 <__kernel_rem_pio2+0x31c>
 80047ac:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80047b0:	4646      	mov	r6, r8
 80047b2:	f04f 0a00 	mov.w	sl, #0
 80047b6:	2e00      	cmp	r6, #0
 80047b8:	f280 80cf 	bge.w	800495a <__kernel_rem_pio2+0x472>
 80047bc:	4644      	mov	r4, r8
 80047be:	2c00      	cmp	r4, #0
 80047c0:	f2c0 80fd 	blt.w	80049be <__kernel_rem_pio2+0x4d6>
 80047c4:	4b12      	ldr	r3, [pc, #72]	@ (8004810 <__kernel_rem_pio2+0x328>)
 80047c6:	461f      	mov	r7, r3
 80047c8:	ab70      	add	r3, sp, #448	@ 0x1c0
 80047ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80047ce:	9306      	str	r3, [sp, #24]
 80047d0:	f04f 0a00 	mov.w	sl, #0
 80047d4:	f04f 0b00 	mov.w	fp, #0
 80047d8:	2600      	movs	r6, #0
 80047da:	eba8 0504 	sub.w	r5, r8, r4
 80047de:	e0e2      	b.n	80049a6 <__kernel_rem_pio2+0x4be>
 80047e0:	f04f 0902 	mov.w	r9, #2
 80047e4:	e754      	b.n	8004690 <__kernel_rem_pio2+0x1a8>
 80047e6:	bf00      	nop
	...
 80047f4:	3ff00000 	.word	0x3ff00000
 80047f8:	08004f88 	.word	0x08004f88
 80047fc:	40200000 	.word	0x40200000
 8004800:	3ff00000 	.word	0x3ff00000
 8004804:	3e700000 	.word	0x3e700000
 8004808:	41700000 	.word	0x41700000
 800480c:	3fe00000 	.word	0x3fe00000
 8004810:	08004f48 	.word	0x08004f48
 8004814:	f854 3b04 	ldr.w	r3, [r4], #4
 8004818:	b945      	cbnz	r5, 800482c <__kernel_rem_pio2+0x344>
 800481a:	b123      	cbz	r3, 8004826 <__kernel_rem_pio2+0x33e>
 800481c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8004820:	f844 3c04 	str.w	r3, [r4, #-4]
 8004824:	2301      	movs	r3, #1
 8004826:	3201      	adds	r2, #1
 8004828:	461d      	mov	r5, r3
 800482a:	e738      	b.n	800469e <__kernel_rem_pio2+0x1b6>
 800482c:	1acb      	subs	r3, r1, r3
 800482e:	e7f7      	b.n	8004820 <__kernel_rem_pio2+0x338>
 8004830:	f108 32ff 	add.w	r2, r8, #4294967295
 8004834:	ab0c      	add	r3, sp, #48	@ 0x30
 8004836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800483a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800483e:	a90c      	add	r1, sp, #48	@ 0x30
 8004840:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004844:	e739      	b.n	80046ba <__kernel_rem_pio2+0x1d2>
 8004846:	f108 32ff 	add.w	r2, r8, #4294967295
 800484a:	ab0c      	add	r3, sp, #48	@ 0x30
 800484c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004850:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004854:	e7f3      	b.n	800483e <__kernel_rem_pio2+0x356>
 8004856:	a90c      	add	r1, sp, #48	@ 0x30
 8004858:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800485c:	3b01      	subs	r3, #1
 800485e:	430a      	orrs	r2, r1
 8004860:	e787      	b.n	8004772 <__kernel_rem_pio2+0x28a>
 8004862:	3401      	adds	r4, #1
 8004864:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004868:	2a00      	cmp	r2, #0
 800486a:	d0fa      	beq.n	8004862 <__kernel_rem_pio2+0x37a>
 800486c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800486e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004872:	eb0d 0503 	add.w	r5, sp, r3
 8004876:	9b06      	ldr	r3, [sp, #24]
 8004878:	aa20      	add	r2, sp, #128	@ 0x80
 800487a:	4443      	add	r3, r8
 800487c:	f108 0701 	add.w	r7, r8, #1
 8004880:	3d98      	subs	r5, #152	@ 0x98
 8004882:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8004886:	4444      	add	r4, r8
 8004888:	42bc      	cmp	r4, r7
 800488a:	da04      	bge.n	8004896 <__kernel_rem_pio2+0x3ae>
 800488c:	46a0      	mov	r8, r4
 800488e:	e6a2      	b.n	80045d6 <__kernel_rem_pio2+0xee>
 8004890:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004892:	2401      	movs	r4, #1
 8004894:	e7e6      	b.n	8004864 <__kernel_rem_pio2+0x37c>
 8004896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004898:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800489c:	f7fb fe06 	bl	80004ac <__aeabi_i2d>
 80048a0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8004b68 <__kernel_rem_pio2+0x680>
 80048a4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80048a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80048ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048b0:	46b2      	mov	sl, r6
 80048b2:	f04f 0800 	mov.w	r8, #0
 80048b6:	9b05      	ldr	r3, [sp, #20]
 80048b8:	4598      	cmp	r8, r3
 80048ba:	dd05      	ble.n	80048c8 <__kernel_rem_pio2+0x3e0>
 80048bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80048c0:	3701      	adds	r7, #1
 80048c2:	eca5 7b02 	vstmia	r5!, {d7}
 80048c6:	e7df      	b.n	8004888 <__kernel_rem_pio2+0x3a0>
 80048c8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80048cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80048d0:	f7fb fe56 	bl	8000580 <__aeabi_dmul>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048dc:	f7fb fc9a 	bl	8000214 <__adddf3>
 80048e0:	f108 0801 	add.w	r8, r8, #1
 80048e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048e8:	e7e5      	b.n	80048b6 <__kernel_rem_pio2+0x3ce>
 80048ea:	f1cb 0000 	rsb	r0, fp, #0
 80048ee:	ec47 6b10 	vmov	d0, r6, r7
 80048f2:	f000 f951 	bl	8004b98 <scalbn>
 80048f6:	ec55 4b10 	vmov	r4, r5, d0
 80048fa:	4b9d      	ldr	r3, [pc, #628]	@ (8004b70 <__kernel_rem_pio2+0x688>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	4620      	mov	r0, r4
 8004900:	4629      	mov	r1, r5
 8004902:	f7fc f8c3 	bl	8000a8c <__aeabi_dcmpge>
 8004906:	b300      	cbz	r0, 800494a <__kernel_rem_pio2+0x462>
 8004908:	4b9a      	ldr	r3, [pc, #616]	@ (8004b74 <__kernel_rem_pio2+0x68c>)
 800490a:	2200      	movs	r2, #0
 800490c:	4620      	mov	r0, r4
 800490e:	4629      	mov	r1, r5
 8004910:	f7fb fe36 	bl	8000580 <__aeabi_dmul>
 8004914:	f7fc f8ce 	bl	8000ab4 <__aeabi_d2iz>
 8004918:	4606      	mov	r6, r0
 800491a:	f7fb fdc7 	bl	80004ac <__aeabi_i2d>
 800491e:	4b94      	ldr	r3, [pc, #592]	@ (8004b70 <__kernel_rem_pio2+0x688>)
 8004920:	2200      	movs	r2, #0
 8004922:	f7fb fe2d 	bl	8000580 <__aeabi_dmul>
 8004926:	460b      	mov	r3, r1
 8004928:	4602      	mov	r2, r0
 800492a:	4629      	mov	r1, r5
 800492c:	4620      	mov	r0, r4
 800492e:	f7fb fc6f 	bl	8000210 <__aeabi_dsub>
 8004932:	f7fc f8bf 	bl	8000ab4 <__aeabi_d2iz>
 8004936:	ab0c      	add	r3, sp, #48	@ 0x30
 8004938:	f10b 0b18 	add.w	fp, fp, #24
 800493c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004940:	f108 0801 	add.w	r8, r8, #1
 8004944:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8004948:	e722      	b.n	8004790 <__kernel_rem_pio2+0x2a8>
 800494a:	4620      	mov	r0, r4
 800494c:	4629      	mov	r1, r5
 800494e:	f7fc f8b1 	bl	8000ab4 <__aeabi_d2iz>
 8004952:	ab0c      	add	r3, sp, #48	@ 0x30
 8004954:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004958:	e71a      	b.n	8004790 <__kernel_rem_pio2+0x2a8>
 800495a:	ab0c      	add	r3, sp, #48	@ 0x30
 800495c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004960:	f7fb fda4 	bl	80004ac <__aeabi_i2d>
 8004964:	4622      	mov	r2, r4
 8004966:	462b      	mov	r3, r5
 8004968:	f7fb fe0a 	bl	8000580 <__aeabi_dmul>
 800496c:	4652      	mov	r2, sl
 800496e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8004972:	465b      	mov	r3, fp
 8004974:	4620      	mov	r0, r4
 8004976:	4629      	mov	r1, r5
 8004978:	f7fb fe02 	bl	8000580 <__aeabi_dmul>
 800497c:	3e01      	subs	r6, #1
 800497e:	4604      	mov	r4, r0
 8004980:	460d      	mov	r5, r1
 8004982:	e718      	b.n	80047b6 <__kernel_rem_pio2+0x2ce>
 8004984:	9906      	ldr	r1, [sp, #24]
 8004986:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800498a:	9106      	str	r1, [sp, #24]
 800498c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8004990:	f7fb fdf6 	bl	8000580 <__aeabi_dmul>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	4650      	mov	r0, sl
 800499a:	4659      	mov	r1, fp
 800499c:	f7fb fc3a 	bl	8000214 <__adddf3>
 80049a0:	3601      	adds	r6, #1
 80049a2:	4682      	mov	sl, r0
 80049a4:	468b      	mov	fp, r1
 80049a6:	9b00      	ldr	r3, [sp, #0]
 80049a8:	429e      	cmp	r6, r3
 80049aa:	dc01      	bgt.n	80049b0 <__kernel_rem_pio2+0x4c8>
 80049ac:	42b5      	cmp	r5, r6
 80049ae:	dae9      	bge.n	8004984 <__kernel_rem_pio2+0x49c>
 80049b0:	ab48      	add	r3, sp, #288	@ 0x120
 80049b2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80049b6:	e9c5 ab00 	strd	sl, fp, [r5]
 80049ba:	3c01      	subs	r4, #1
 80049bc:	e6ff      	b.n	80047be <__kernel_rem_pio2+0x2d6>
 80049be:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	dc0b      	bgt.n	80049dc <__kernel_rem_pio2+0x4f4>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	dc39      	bgt.n	8004a3c <__kernel_rem_pio2+0x554>
 80049c8:	d05d      	beq.n	8004a86 <__kernel_rem_pio2+0x59e>
 80049ca:	9b02      	ldr	r3, [sp, #8]
 80049cc:	f003 0007 	and.w	r0, r3, #7
 80049d0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80049d4:	ecbd 8b02 	vpop	{d8}
 80049d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049dc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80049de:	2b03      	cmp	r3, #3
 80049e0:	d1f3      	bne.n	80049ca <__kernel_rem_pio2+0x4e2>
 80049e2:	9b05      	ldr	r3, [sp, #20]
 80049e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80049e8:	eb0d 0403 	add.w	r4, sp, r3
 80049ec:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80049f0:	4625      	mov	r5, r4
 80049f2:	46c2      	mov	sl, r8
 80049f4:	f1ba 0f00 	cmp.w	sl, #0
 80049f8:	f1a5 0508 	sub.w	r5, r5, #8
 80049fc:	dc6b      	bgt.n	8004ad6 <__kernel_rem_pio2+0x5ee>
 80049fe:	4645      	mov	r5, r8
 8004a00:	2d01      	cmp	r5, #1
 8004a02:	f1a4 0408 	sub.w	r4, r4, #8
 8004a06:	f300 8087 	bgt.w	8004b18 <__kernel_rem_pio2+0x630>
 8004a0a:	9c05      	ldr	r4, [sp, #20]
 8004a0c:	ab48      	add	r3, sp, #288	@ 0x120
 8004a0e:	441c      	add	r4, r3
 8004a10:	2000      	movs	r0, #0
 8004a12:	2100      	movs	r1, #0
 8004a14:	f1b8 0f01 	cmp.w	r8, #1
 8004a18:	f300 809c 	bgt.w	8004b54 <__kernel_rem_pio2+0x66c>
 8004a1c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8004a20:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8004a24:	f1b9 0f00 	cmp.w	r9, #0
 8004a28:	f040 80a6 	bne.w	8004b78 <__kernel_rem_pio2+0x690>
 8004a2c:	9b04      	ldr	r3, [sp, #16]
 8004a2e:	e9c3 7800 	strd	r7, r8, [r3]
 8004a32:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004a36:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004a3a:	e7c6      	b.n	80049ca <__kernel_rem_pio2+0x4e2>
 8004a3c:	9d05      	ldr	r5, [sp, #20]
 8004a3e:	ab48      	add	r3, sp, #288	@ 0x120
 8004a40:	441d      	add	r5, r3
 8004a42:	4644      	mov	r4, r8
 8004a44:	2000      	movs	r0, #0
 8004a46:	2100      	movs	r1, #0
 8004a48:	2c00      	cmp	r4, #0
 8004a4a:	da35      	bge.n	8004ab8 <__kernel_rem_pio2+0x5d0>
 8004a4c:	f1b9 0f00 	cmp.w	r9, #0
 8004a50:	d038      	beq.n	8004ac4 <__kernel_rem_pio2+0x5dc>
 8004a52:	4602      	mov	r2, r0
 8004a54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004a58:	9c04      	ldr	r4, [sp, #16]
 8004a5a:	e9c4 2300 	strd	r2, r3, [r4]
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8004a66:	f7fb fbd3 	bl	8000210 <__aeabi_dsub>
 8004a6a:	ad4a      	add	r5, sp, #296	@ 0x128
 8004a6c:	2401      	movs	r4, #1
 8004a6e:	45a0      	cmp	r8, r4
 8004a70:	da2b      	bge.n	8004aca <__kernel_rem_pio2+0x5e2>
 8004a72:	f1b9 0f00 	cmp.w	r9, #0
 8004a76:	d002      	beq.n	8004a7e <__kernel_rem_pio2+0x596>
 8004a78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	9b04      	ldr	r3, [sp, #16]
 8004a80:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004a84:	e7a1      	b.n	80049ca <__kernel_rem_pio2+0x4e2>
 8004a86:	9c05      	ldr	r4, [sp, #20]
 8004a88:	ab48      	add	r3, sp, #288	@ 0x120
 8004a8a:	441c      	add	r4, r3
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	2100      	movs	r1, #0
 8004a90:	f1b8 0f00 	cmp.w	r8, #0
 8004a94:	da09      	bge.n	8004aaa <__kernel_rem_pio2+0x5c2>
 8004a96:	f1b9 0f00 	cmp.w	r9, #0
 8004a9a:	d002      	beq.n	8004aa2 <__kernel_rem_pio2+0x5ba>
 8004a9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	9b04      	ldr	r3, [sp, #16]
 8004aa4:	e9c3 0100 	strd	r0, r1, [r3]
 8004aa8:	e78f      	b.n	80049ca <__kernel_rem_pio2+0x4e2>
 8004aaa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004aae:	f7fb fbb1 	bl	8000214 <__adddf3>
 8004ab2:	f108 38ff 	add.w	r8, r8, #4294967295
 8004ab6:	e7eb      	b.n	8004a90 <__kernel_rem_pio2+0x5a8>
 8004ab8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004abc:	f7fb fbaa 	bl	8000214 <__adddf3>
 8004ac0:	3c01      	subs	r4, #1
 8004ac2:	e7c1      	b.n	8004a48 <__kernel_rem_pio2+0x560>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	e7c6      	b.n	8004a58 <__kernel_rem_pio2+0x570>
 8004aca:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8004ace:	f7fb fba1 	bl	8000214 <__adddf3>
 8004ad2:	3401      	adds	r4, #1
 8004ad4:	e7cb      	b.n	8004a6e <__kernel_rem_pio2+0x586>
 8004ad6:	ed95 7b00 	vldr	d7, [r5]
 8004ada:	ed8d 7b00 	vstr	d7, [sp]
 8004ade:	ed95 7b02 	vldr	d7, [r5, #8]
 8004ae2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ae6:	ec53 2b17 	vmov	r2, r3, d7
 8004aea:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004aee:	f7fb fb91 	bl	8000214 <__adddf3>
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4606      	mov	r6, r0
 8004af8:	460f      	mov	r7, r1
 8004afa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004afe:	f7fb fb87 	bl	8000210 <__aeabi_dsub>
 8004b02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b06:	f7fb fb85 	bl	8000214 <__adddf3>
 8004b0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b0e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8004b12:	e9c5 6700 	strd	r6, r7, [r5]
 8004b16:	e76d      	b.n	80049f4 <__kernel_rem_pio2+0x50c>
 8004b18:	ed94 7b00 	vldr	d7, [r4]
 8004b1c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8004b20:	ec51 0b17 	vmov	r0, r1, d7
 8004b24:	4652      	mov	r2, sl
 8004b26:	465b      	mov	r3, fp
 8004b28:	ed8d 7b00 	vstr	d7, [sp]
 8004b2c:	f7fb fb72 	bl	8000214 <__adddf3>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4606      	mov	r6, r0
 8004b36:	460f      	mov	r7, r1
 8004b38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b3c:	f7fb fb68 	bl	8000210 <__aeabi_dsub>
 8004b40:	4652      	mov	r2, sl
 8004b42:	465b      	mov	r3, fp
 8004b44:	f7fb fb66 	bl	8000214 <__adddf3>
 8004b48:	3d01      	subs	r5, #1
 8004b4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004b4e:	e9c4 6700 	strd	r6, r7, [r4]
 8004b52:	e755      	b.n	8004a00 <__kernel_rem_pio2+0x518>
 8004b54:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004b58:	f7fb fb5c 	bl	8000214 <__adddf3>
 8004b5c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004b60:	e758      	b.n	8004a14 <__kernel_rem_pio2+0x52c>
 8004b62:	bf00      	nop
 8004b64:	f3af 8000 	nop.w
	...
 8004b70:	41700000 	.word	0x41700000
 8004b74:	3e700000 	.word	0x3e700000
 8004b78:	9b04      	ldr	r3, [sp, #16]
 8004b7a:	9a04      	ldr	r2, [sp, #16]
 8004b7c:	601f      	str	r7, [r3, #0]
 8004b7e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8004b82:	605c      	str	r4, [r3, #4]
 8004b84:	609d      	str	r5, [r3, #8]
 8004b86:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004b8a:	60d3      	str	r3, [r2, #12]
 8004b8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004b90:	6110      	str	r0, [r2, #16]
 8004b92:	6153      	str	r3, [r2, #20]
 8004b94:	e719      	b.n	80049ca <__kernel_rem_pio2+0x4e2>
 8004b96:	bf00      	nop

08004b98 <scalbn>:
 8004b98:	b570      	push	{r4, r5, r6, lr}
 8004b9a:	ec55 4b10 	vmov	r4, r5, d0
 8004b9e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004ba2:	4606      	mov	r6, r0
 8004ba4:	462b      	mov	r3, r5
 8004ba6:	b991      	cbnz	r1, 8004bce <scalbn+0x36>
 8004ba8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004bac:	4323      	orrs	r3, r4
 8004bae:	d03d      	beq.n	8004c2c <scalbn+0x94>
 8004bb0:	4b35      	ldr	r3, [pc, #212]	@ (8004c88 <scalbn+0xf0>)
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	4629      	mov	r1, r5
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f7fb fce2 	bl	8000580 <__aeabi_dmul>
 8004bbc:	4b33      	ldr	r3, [pc, #204]	@ (8004c8c <scalbn+0xf4>)
 8004bbe:	429e      	cmp	r6, r3
 8004bc0:	4604      	mov	r4, r0
 8004bc2:	460d      	mov	r5, r1
 8004bc4:	da0f      	bge.n	8004be6 <scalbn+0x4e>
 8004bc6:	a328      	add	r3, pc, #160	@ (adr r3, 8004c68 <scalbn+0xd0>)
 8004bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bcc:	e01e      	b.n	8004c0c <scalbn+0x74>
 8004bce:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004bd2:	4291      	cmp	r1, r2
 8004bd4:	d10b      	bne.n	8004bee <scalbn+0x56>
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	4620      	mov	r0, r4
 8004bda:	4629      	mov	r1, r5
 8004bdc:	f7fb fb1a 	bl	8000214 <__adddf3>
 8004be0:	4604      	mov	r4, r0
 8004be2:	460d      	mov	r5, r1
 8004be4:	e022      	b.n	8004c2c <scalbn+0x94>
 8004be6:	460b      	mov	r3, r1
 8004be8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004bec:	3936      	subs	r1, #54	@ 0x36
 8004bee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004bf2:	4296      	cmp	r6, r2
 8004bf4:	dd0d      	ble.n	8004c12 <scalbn+0x7a>
 8004bf6:	2d00      	cmp	r5, #0
 8004bf8:	a11d      	add	r1, pc, #116	@ (adr r1, 8004c70 <scalbn+0xd8>)
 8004bfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bfe:	da02      	bge.n	8004c06 <scalbn+0x6e>
 8004c00:	a11d      	add	r1, pc, #116	@ (adr r1, 8004c78 <scalbn+0xe0>)
 8004c02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c06:	a31a      	add	r3, pc, #104	@ (adr r3, 8004c70 <scalbn+0xd8>)
 8004c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0c:	f7fb fcb8 	bl	8000580 <__aeabi_dmul>
 8004c10:	e7e6      	b.n	8004be0 <scalbn+0x48>
 8004c12:	1872      	adds	r2, r6, r1
 8004c14:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004c18:	428a      	cmp	r2, r1
 8004c1a:	dcec      	bgt.n	8004bf6 <scalbn+0x5e>
 8004c1c:	2a00      	cmp	r2, #0
 8004c1e:	dd08      	ble.n	8004c32 <scalbn+0x9a>
 8004c20:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004c24:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004c28:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004c2c:	ec45 4b10 	vmov	d0, r4, r5
 8004c30:	bd70      	pop	{r4, r5, r6, pc}
 8004c32:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004c36:	da08      	bge.n	8004c4a <scalbn+0xb2>
 8004c38:	2d00      	cmp	r5, #0
 8004c3a:	a10b      	add	r1, pc, #44	@ (adr r1, 8004c68 <scalbn+0xd0>)
 8004c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c40:	dac1      	bge.n	8004bc6 <scalbn+0x2e>
 8004c42:	a10f      	add	r1, pc, #60	@ (adr r1, 8004c80 <scalbn+0xe8>)
 8004c44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c48:	e7bd      	b.n	8004bc6 <scalbn+0x2e>
 8004c4a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004c4e:	3236      	adds	r2, #54	@ 0x36
 8004c50:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004c54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004c58:	4620      	mov	r0, r4
 8004c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c90 <scalbn+0xf8>)
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	2200      	movs	r2, #0
 8004c60:	e7d4      	b.n	8004c0c <scalbn+0x74>
 8004c62:	bf00      	nop
 8004c64:	f3af 8000 	nop.w
 8004c68:	c2f8f359 	.word	0xc2f8f359
 8004c6c:	01a56e1f 	.word	0x01a56e1f
 8004c70:	8800759c 	.word	0x8800759c
 8004c74:	7e37e43c 	.word	0x7e37e43c
 8004c78:	8800759c 	.word	0x8800759c
 8004c7c:	fe37e43c 	.word	0xfe37e43c
 8004c80:	c2f8f359 	.word	0xc2f8f359
 8004c84:	81a56e1f 	.word	0x81a56e1f
 8004c88:	43500000 	.word	0x43500000
 8004c8c:	ffff3cb0 	.word	0xffff3cb0
 8004c90:	3c900000 	.word	0x3c900000
 8004c94:	00000000 	.word	0x00000000

08004c98 <floor>:
 8004c98:	ec51 0b10 	vmov	r0, r1, d0
 8004c9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004ca8:	2e13      	cmp	r6, #19
 8004caa:	460c      	mov	r4, r1
 8004cac:	4605      	mov	r5, r0
 8004cae:	4680      	mov	r8, r0
 8004cb0:	dc34      	bgt.n	8004d1c <floor+0x84>
 8004cb2:	2e00      	cmp	r6, #0
 8004cb4:	da17      	bge.n	8004ce6 <floor+0x4e>
 8004cb6:	a332      	add	r3, pc, #200	@ (adr r3, 8004d80 <floor+0xe8>)
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	f7fb faaa 	bl	8000214 <__adddf3>
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f7fb feec 	bl	8000aa0 <__aeabi_dcmpgt>
 8004cc8:	b150      	cbz	r0, 8004ce0 <floor+0x48>
 8004cca:	2c00      	cmp	r4, #0
 8004ccc:	da55      	bge.n	8004d7a <floor+0xe2>
 8004cce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004cd2:	432c      	orrs	r4, r5
 8004cd4:	2500      	movs	r5, #0
 8004cd6:	42ac      	cmp	r4, r5
 8004cd8:	4c2b      	ldr	r4, [pc, #172]	@ (8004d88 <floor+0xf0>)
 8004cda:	bf08      	it	eq
 8004cdc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	e023      	b.n	8004d2e <floor+0x96>
 8004ce6:	4f29      	ldr	r7, [pc, #164]	@ (8004d8c <floor+0xf4>)
 8004ce8:	4137      	asrs	r7, r6
 8004cea:	ea01 0307 	and.w	r3, r1, r7
 8004cee:	4303      	orrs	r3, r0
 8004cf0:	d01d      	beq.n	8004d2e <floor+0x96>
 8004cf2:	a323      	add	r3, pc, #140	@ (adr r3, 8004d80 <floor+0xe8>)
 8004cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf8:	f7fb fa8c 	bl	8000214 <__adddf3>
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	2300      	movs	r3, #0
 8004d00:	f7fb fece 	bl	8000aa0 <__aeabi_dcmpgt>
 8004d04:	2800      	cmp	r0, #0
 8004d06:	d0eb      	beq.n	8004ce0 <floor+0x48>
 8004d08:	2c00      	cmp	r4, #0
 8004d0a:	bfbe      	ittt	lt
 8004d0c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004d10:	4133      	asrlt	r3, r6
 8004d12:	18e4      	addlt	r4, r4, r3
 8004d14:	ea24 0407 	bic.w	r4, r4, r7
 8004d18:	2500      	movs	r5, #0
 8004d1a:	e7e1      	b.n	8004ce0 <floor+0x48>
 8004d1c:	2e33      	cmp	r6, #51	@ 0x33
 8004d1e:	dd0a      	ble.n	8004d36 <floor+0x9e>
 8004d20:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004d24:	d103      	bne.n	8004d2e <floor+0x96>
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	f7fb fa73 	bl	8000214 <__adddf3>
 8004d2e:	ec41 0b10 	vmov	d0, r0, r1
 8004d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d36:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8004d3a:	f04f 37ff 	mov.w	r7, #4294967295
 8004d3e:	40df      	lsrs	r7, r3
 8004d40:	4207      	tst	r7, r0
 8004d42:	d0f4      	beq.n	8004d2e <floor+0x96>
 8004d44:	a30e      	add	r3, pc, #56	@ (adr r3, 8004d80 <floor+0xe8>)
 8004d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4a:	f7fb fa63 	bl	8000214 <__adddf3>
 8004d4e:	2200      	movs	r2, #0
 8004d50:	2300      	movs	r3, #0
 8004d52:	f7fb fea5 	bl	8000aa0 <__aeabi_dcmpgt>
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d0c2      	beq.n	8004ce0 <floor+0x48>
 8004d5a:	2c00      	cmp	r4, #0
 8004d5c:	da0a      	bge.n	8004d74 <floor+0xdc>
 8004d5e:	2e14      	cmp	r6, #20
 8004d60:	d101      	bne.n	8004d66 <floor+0xce>
 8004d62:	3401      	adds	r4, #1
 8004d64:	e006      	b.n	8004d74 <floor+0xdc>
 8004d66:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	40b3      	lsls	r3, r6
 8004d6e:	441d      	add	r5, r3
 8004d70:	4545      	cmp	r5, r8
 8004d72:	d3f6      	bcc.n	8004d62 <floor+0xca>
 8004d74:	ea25 0507 	bic.w	r5, r5, r7
 8004d78:	e7b2      	b.n	8004ce0 <floor+0x48>
 8004d7a:	2500      	movs	r5, #0
 8004d7c:	462c      	mov	r4, r5
 8004d7e:	e7af      	b.n	8004ce0 <floor+0x48>
 8004d80:	8800759c 	.word	0x8800759c
 8004d84:	7e37e43c 	.word	0x7e37e43c
 8004d88:	bff00000 	.word	0xbff00000
 8004d8c:	000fffff 	.word	0x000fffff

08004d90 <_init>:
 8004d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d92:	bf00      	nop
 8004d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d96:	bc08      	pop	{r3}
 8004d98:	469e      	mov	lr, r3
 8004d9a:	4770      	bx	lr

08004d9c <_fini>:
 8004d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9e:	bf00      	nop
 8004da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da2:	bc08      	pop	{r3}
 8004da4:	469e      	mov	lr, r3
 8004da6:	4770      	bx	lr
