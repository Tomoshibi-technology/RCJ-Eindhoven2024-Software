
joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020b8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  0800227c  0800227c  0000327c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002290  08002290  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002290  08002290  00003290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002298  08002298  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002298  08002298  00003298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800229c  0800229c  0000329c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080022a0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080022ac  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080022ac  00004078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e2e  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017b9  00000000  00000000  0000be6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b0  00000000  00000000  0000d628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000042a  00000000  00000000  0000dbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024883  00000000  00000000  0000e002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000811c  00000000  00000000  00032885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5b81  00000000  00000000  0003a9a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110522  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001560  00000000  00000000  00110568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  00111ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002264 	.word	0x08002264

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002264 	.word	0x08002264

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <_ZN8JOYSTICKC1EP17ADC_HandleTypeDef>:
#include "joystick.h"

JOYSTICK::JOYSTICK(ADC_HandleTypeDef* ptr_adchandle){
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4a06      	ldr	r2, [pc, #24]	@ (800051c <_ZN8JOYSTICKC1EP17ADC_HandleTypeDef+0x28>)
 8000502:	6812      	ldr	r2, [r2, #0]
 8000504:	605a      	str	r2, [r3, #4]
	adchandle = ptr_adchandle;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	683a      	ldr	r2, [r7, #0]
 800050a:	601a      	str	r2, [r3, #0]
}
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4618      	mov	r0, r3
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	0800227c 	.word	0x0800227c

08000520 <_ZN8JOYSTICK8samplingEv>:

void JOYSTICK::sampling(){
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	for(int i=0; i<2; i++){
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	e01a      	b.n	8000564 <_ZN8JOYSTICK8samplingEv+0x44>
	  HAL_ADC_Start(adchandle);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fb10 	bl	8000b58 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(adchandle, 1);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2101      	movs	r1, #1
 800053e:	4618      	mov	r0, r3
 8000540:	f000 fbdc 	bl	8000cfc <HAL_ADC_PollForConversion>
	  adc_xy[i] = HAL_ADC_GetValue(adchandle);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4618      	mov	r0, r3
 800054a:	f000 fc62 	bl	8000e12 <HAL_ADC_GetValue>
 800054e:	4603      	mov	r3, r0
 8000550:	b299      	uxth	r1, r3
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	4413      	add	r3, r2
 800055a:	460a      	mov	r2, r1
 800055c:	809a      	strh	r2, [r3, #4]
	for(int i=0; i<2; i++){
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	3301      	adds	r3, #1
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	2b01      	cmp	r3, #1
 8000568:	dde1      	ble.n	800052e <_ZN8JOYSTICK8samplingEv+0xe>
	}
}
 800056a:	bf00      	nop
 800056c:	bf00      	nop
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <_ZN8JOYSTICK12get_adcValueEPt>:

void JOYSTICK::get_adcValue(uint16_t* adc_array){
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
	for(int i=0; i<2; i++){
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	e00c      	b.n	800059e <_ZN8JOYSTICK12get_adcValueEPt+0x2a>
	  adc_array[i] = adc_xy[i];
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	683a      	ldr	r2, [r7, #0]
 800058a:	441a      	add	r2, r3
 800058c:	6879      	ldr	r1, [r7, #4]
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	440b      	add	r3, r1
 8000594:	889b      	ldrh	r3, [r3, #4]
 8000596:	8013      	strh	r3, [r2, #0]
	for(int i=0; i<2; i++){
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	3301      	adds	r3, #1
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	ddef      	ble.n	8000584 <_ZN8JOYSTICK12get_adcValueEPt+0x10>
	}
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
	...

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fa17 	bl	80009ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f819 	bl	80005f4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f8f3 	bl	80007ac <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80005c6:	f000 f87f 	bl	80006c8 <_ZL12MX_ADC1_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  JOYSTICK joystick(&hadc1);
 80005ca:	463b      	mov	r3, r7
 80005cc:	4907      	ldr	r1, [pc, #28]	@ (80005ec <main+0x38>)
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff ff90 	bl	80004f4 <_ZN8JOYSTICKC1EP17ADC_HandleTypeDef>
//		  HAL_ADC_Start(&hadc1);
//		  HAL_ADC_PollForConversion(&hadc1, 10);
//		  adc_value = HAL_ADC_GetValue(&hadc1);
//		  adc[i] = adc_value;
//	  }
	  joystick.sampling();
 80005d4:	463b      	mov	r3, r7
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ffa2 	bl	8000520 <_ZN8JOYSTICK8samplingEv>
	  joystick.get_adcValue(adc);
 80005dc:	463b      	mov	r3, r7
 80005de:	4904      	ldr	r1, [pc, #16]	@ (80005f0 <main+0x3c>)
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ffc7 	bl	8000574 <_ZN8JOYSTICK12get_adcValueEPt>
	  joystick.sampling();
 80005e6:	bf00      	nop
 80005e8:	e7f4      	b.n	80005d4 <main+0x20>
 80005ea:	bf00      	nop
 80005ec:	20000028 	.word	0x20000028
 80005f0:	20000070 	.word	0x20000070

080005f4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	@ 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2234      	movs	r2, #52	@ 0x34
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f001 fe02 	bl	800220c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b28      	ldr	r3, [pc, #160]	@ (80006c0 <_Z18SystemClock_Configv+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	4a27      	ldr	r2, [pc, #156]	@ (80006c0 <_Z18SystemClock_Configv+0xcc>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	@ 0x40
 8000628:	4b25      	ldr	r3, [pc, #148]	@ (80006c0 <_Z18SystemClock_Configv+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000634:	2300      	movs	r3, #0
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	4b22      	ldr	r3, [pc, #136]	@ (80006c4 <_Z18SystemClock_Configv+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000640:	4a20      	ldr	r2, [pc, #128]	@ (80006c4 <_Z18SystemClock_Configv+0xd0>)
 8000642:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1e      	ldr	r3, [pc, #120]	@ (80006c4 <_Z18SystemClock_Configv+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000654:	2302      	movs	r3, #2
 8000656:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065c:	2310      	movs	r3, #16
 800065e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000660:	2300      	movs	r3, #0
 8000662:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fb31 	bl	8001cd0 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	bf14      	ite	ne
 8000674:	2301      	movne	r3, #1
 8000676:	2300      	moveq	r3, #0
 8000678:	b2db      	uxtb	r3, r3
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 800067e:	f000 f8d7 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f001 f887 	bl	80017b0 <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	bf14      	ite	ne
 80006a8:	2301      	movne	r3, #1
 80006aa:	2300      	moveq	r3, #0
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 80006b2:	f000 f8bd 	bl	8000830 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	@ 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ce:	463b      	mov	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006da:	4b31      	ldr	r3, [pc, #196]	@ (80007a0 <_ZL12MX_ADC1_Initv+0xd8>)
 80006dc:	4a31      	ldr	r2, [pc, #196]	@ (80007a4 <_ZL12MX_ADC1_Initv+0xdc>)
 80006de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006e0:	4b2f      	ldr	r3, [pc, #188]	@ (80007a0 <_ZL12MX_ADC1_Initv+0xd8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e6:	4b2e      	ldr	r3, [pc, #184]	@ (80007a0 <_ZL12MX_ADC1_Initv+0xd8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006ec:	4b2c      	ldr	r3, [pc, #176]	@ (80007a0 <_ZL12MX_ADC1_Initv+0xd8>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006f2:	4b2b      	ldr	r3, [pc, #172]	@ (80007a0 <_ZL12MX_ADC1_Initv+0xd8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80006f8:	4b29      	ldr	r3, [pc, #164]	@ (80007a0 <_ZL12MX_ADC1_Initv+0xd8>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000700:	4b27      	ldr	r3, [pc, #156]	@ (80007a0 <_ZL12MX_ADC1_Initv+0xd8>)
 8000702:	2201      	movs	r2, #1
 8000704:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000706:	4b26      	ldr	r3, [pc, #152]	@ (80007a0 <_ZL12MX_ADC1_Initv+0xd8>)
 8000708:	2200      	movs	r2, #0
 800070a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070c:	4b24      	ldr	r3, [pc, #144]	@ (80007a0 <_ZL12MX_ADC1_Initv+0xd8>)
 800070e:	4a26      	ldr	r2, [pc, #152]	@ (80007a8 <_ZL12MX_ADC1_Initv+0xe0>)
 8000710:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000712:	4b23      	ldr	r3, [pc, #140]	@ (80007a0 <_ZL12MX_ADC1_Initv+0xd8>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000718:	4b21      	ldr	r3, [pc, #132]	@ (80007a0 <_ZL12MX_ADC1_Initv+0xd8>)
 800071a:	2202      	movs	r2, #2
 800071c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800071e:	4b20      	ldr	r3, [pc, #128]	@ (80007a0 <_ZL12MX_ADC1_Initv+0xd8>)
 8000720:	2200      	movs	r2, #0
 8000722:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000726:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <_ZL12MX_ADC1_Initv+0xd8>)
 8000728:	2201      	movs	r2, #1
 800072a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072c:	481c      	ldr	r0, [pc, #112]	@ (80007a0 <_ZL12MX_ADC1_Initv+0xd8>)
 800072e:	f000 f9cf 	bl	8000ad0 <HAL_ADC_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	bf14      	ite	ne
 8000738:	2301      	movne	r3, #1
 800073a:	2300      	moveq	r3, #0
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <_ZL12MX_ADC1_Initv+0x7e>
  {
    Error_Handler();
 8000742:	f000 f875 	bl	8000830 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000746:	230b      	movs	r3, #11
 8000748:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800074a:	2301      	movs	r3, #1
 800074c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000752:	463b      	mov	r3, r7
 8000754:	4619      	mov	r1, r3
 8000756:	4812      	ldr	r0, [pc, #72]	@ (80007a0 <_ZL12MX_ADC1_Initv+0xd8>)
 8000758:	f000 fb68 	bl	8000e2c <HAL_ADC_ConfigChannel>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	bf14      	ite	ne
 8000762:	2301      	movne	r3, #1
 8000764:	2300      	moveq	r3, #0
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <_ZL12MX_ADC1_Initv+0xa8>
  {
    Error_Handler();
 800076c:	f000 f860 	bl	8000830 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000770:	230c      	movs	r3, #12
 8000772:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000774:	2302      	movs	r3, #2
 8000776:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4619      	mov	r1, r3
 800077c:	4808      	ldr	r0, [pc, #32]	@ (80007a0 <_ZL12MX_ADC1_Initv+0xd8>)
 800077e:	f000 fb55 	bl	8000e2c <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	bf14      	ite	ne
 8000788:	2301      	movne	r3, #1
 800078a:	2300      	moveq	r3, #0
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <_ZL12MX_ADC1_Initv+0xce>
  {
    Error_Handler();
 8000792:	f000 f84d 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000028 	.word	0x20000028
 80007a4:	40012000 	.word	0x40012000
 80007a8:	0f000001 	.word	0x0f000001

080007ac <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <_ZL12MX_GPIO_Initv+0x7c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a17      	ldr	r2, [pc, #92]	@ (8000828 <_ZL12MX_GPIO_Initv+0x7c>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <_ZL12MX_GPIO_Initv+0x7c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <_ZL12MX_GPIO_Initv+0x7c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a10      	ldr	r2, [pc, #64]	@ (8000828 <_ZL12MX_GPIO_Initv+0x7c>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <_ZL12MX_GPIO_Initv+0x7c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2104      	movs	r1, #4
 80007fe:	480b      	ldr	r0, [pc, #44]	@ (800082c <_ZL12MX_GPIO_Initv+0x80>)
 8000800:	f000 ffbc 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000804:	2304      	movs	r3, #4
 8000806:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	4619      	mov	r1, r3
 800081a:	4804      	ldr	r0, [pc, #16]	@ (800082c <_ZL12MX_GPIO_Initv+0x80>)
 800081c:	f000 fe1a 	bl	8001454 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000820:	bf00      	nop
 8000822:	3720      	adds	r7, #32
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40020400 	.word	0x40020400

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <Error_Handler+0x8>

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084a:	4a0f      	ldr	r2, [pc, #60]	@ (8000888 <HAL_MspInit+0x4c>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000850:	6453      	str	r3, [r2, #68]	@ 0x44
 8000852:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000856:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000866:	4a08      	ldr	r2, [pc, #32]	@ (8000888 <HAL_MspInit+0x4c>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800086c:	6413      	str	r3, [r2, #64]	@ 0x40
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a17      	ldr	r2, [pc, #92]	@ (8000908 <HAL_ADC_MspInit+0x7c>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d127      	bne.n	80008fe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b16      	ldr	r3, [pc, #88]	@ (800090c <HAL_ADC_MspInit+0x80>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b6:	4a15      	ldr	r2, [pc, #84]	@ (800090c <HAL_ADC_MspInit+0x80>)
 80008b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008be:	4b13      	ldr	r3, [pc, #76]	@ (800090c <HAL_ADC_MspInit+0x80>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <HAL_ADC_MspInit+0x80>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a0e      	ldr	r2, [pc, #56]	@ (800090c <HAL_ADC_MspInit+0x80>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <HAL_ADC_MspInit+0x80>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80008e6:	2306      	movs	r3, #6
 80008e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ea:	2303      	movs	r3, #3
 80008ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	@ (8000910 <HAL_ADC_MspInit+0x84>)
 80008fa:	f000 fdab 	bl	8001454 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80008fe:	bf00      	nop
 8000900:	3728      	adds	r7, #40	@ 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40012000 	.word	0x40012000
 800090c:	40023800 	.word	0x40023800
 8000910:	40020800 	.word	0x40020800

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <NMI_Handler+0x4>

0800091c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <HardFault_Handler+0x4>

08000924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <MemManage_Handler+0x4>

0800092c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <UsageFault_Handler+0x4>

0800093c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800096a:	f000 f891 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <SystemInit+0x20>)
 800097a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800097e:	4a05      	ldr	r2, [pc, #20]	@ (8000994 <SystemInit+0x20>)
 8000980:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000984:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000998:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800099c:	f7ff ffea 	bl	8000974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009a0:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009a2:	490d      	ldr	r1, [pc, #52]	@ (80009d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009a4:	4a0d      	ldr	r2, [pc, #52]	@ (80009dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009b8:	4c0a      	ldr	r4, [pc, #40]	@ (80009e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009c6:	f001 fc29 	bl	800221c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ca:	f7ff fdf3 	bl	80005b4 <main>
  bx  lr    
 80009ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009dc:	080022a0 	.word	0x080022a0
  ldr r2, =_sbss
 80009e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009e4:	20000078 	.word	0x20000078

080009e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC_IRQHandler>
	...

080009ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009f0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <HAL_Init+0x40>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a2c <HAL_Init+0x40>)
 80009f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009fc:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <HAL_Init+0x40>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <HAL_Init+0x40>)
 8000a02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a08:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <HAL_Init+0x40>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	@ (8000a2c <HAL_Init+0x40>)
 8000a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 fce9 	bl	80013ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1a:	200f      	movs	r0, #15
 8000a1c:	f000 f808 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a20:	f7ff ff0c 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023c00 	.word	0x40023c00

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <HAL_InitTick+0x54>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <HAL_InitTick+0x58>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 fcf3 	bl	800143a <HAL_SYSTICK_Config>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00e      	b.n	8000a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d80a      	bhi.n	8000a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a6c:	f000 fcc9 	bl	8001402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a70:	4a06      	ldr	r2, [pc, #24]	@ (8000a8c <HAL_InitTick+0x5c>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e000      	b.n	8000a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000004 	.word	0x20000004

08000a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <HAL_IncTick+0x20>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <HAL_IncTick+0x24>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a04      	ldr	r2, [pc, #16]	@ (8000ab4 <HAL_IncTick+0x24>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	20000074 	.word	0x20000074

08000ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b03      	ldr	r3, [pc, #12]	@ (8000acc <HAL_GetTick+0x14>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000074 	.word	0x20000074

08000ad0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d101      	bne.n	8000ae6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e033      	b.n	8000b4e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d109      	bne.n	8000b02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff fecc 	bl	800088c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2200      	movs	r2, #0
 8000af8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	f003 0310 	and.w	r3, r3, #16
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d118      	bne.n	8000b40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000b16:	f023 0302 	bic.w	r3, r3, #2
 8000b1a:	f043 0202 	orr.w	r2, r3, #2
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f000 fab4 	bl	8001090 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	f023 0303 	bic.w	r3, r3, #3
 8000b36:	f043 0201 	orr.w	r2, r3, #1
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b3e:	e001      	b.n	8000b44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d101      	bne.n	8000b72 <HAL_ADC_Start+0x1a>
 8000b6e:	2302      	movs	r3, #2
 8000b70:	e0b2      	b.n	8000cd8 <HAL_ADC_Start+0x180>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2201      	movs	r2, #1
 8000b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d018      	beq.n	8000bba <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	689a      	ldr	r2, [r3, #8]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f042 0201 	orr.w	r2, r2, #1
 8000b96:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000b98:	4b52      	ldr	r3, [pc, #328]	@ (8000ce4 <HAL_ADC_Start+0x18c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a52      	ldr	r2, [pc, #328]	@ (8000ce8 <HAL_ADC_Start+0x190>)
 8000b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba2:	0c9a      	lsrs	r2, r3, #18
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	4413      	add	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000bac:	e002      	b.n	8000bb4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d1f9      	bne.n	8000bae <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d17a      	bne.n	8000cbe <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bcc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000bd0:	f023 0301 	bic.w	r3, r3, #1
 8000bd4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d007      	beq.n	8000bfa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000bf2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000c06:	d106      	bne.n	8000c16 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0c:	f023 0206 	bic.w	r2, r3, #6
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	645a      	str	r2, [r3, #68]	@ 0x44
 8000c14:	e002      	b.n	8000c1c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c24:	4b31      	ldr	r3, [pc, #196]	@ (8000cec <HAL_ADC_Start+0x194>)
 8000c26:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000c30:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f003 031f 	and.w	r3, r3, #31
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d12a      	bne.n	8000c94 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a2b      	ldr	r2, [pc, #172]	@ (8000cf0 <HAL_ADC_Start+0x198>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d015      	beq.n	8000c74 <HAL_ADC_Start+0x11c>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a29      	ldr	r2, [pc, #164]	@ (8000cf4 <HAL_ADC_Start+0x19c>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d105      	bne.n	8000c5e <HAL_ADC_Start+0x106>
 8000c52:	4b26      	ldr	r3, [pc, #152]	@ (8000cec <HAL_ADC_Start+0x194>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 031f 	and.w	r3, r3, #31
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d00a      	beq.n	8000c74 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a25      	ldr	r2, [pc, #148]	@ (8000cf8 <HAL_ADC_Start+0x1a0>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d136      	bne.n	8000cd6 <HAL_ADC_Start+0x17e>
 8000c68:	4b20      	ldr	r3, [pc, #128]	@ (8000cec <HAL_ADC_Start+0x194>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 0310 	and.w	r3, r3, #16
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d130      	bne.n	8000cd6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d129      	bne.n	8000cd6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	e020      	b.n	8000cd6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a15      	ldr	r2, [pc, #84]	@ (8000cf0 <HAL_ADC_Start+0x198>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d11b      	bne.n	8000cd6 <HAL_ADC_Start+0x17e>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d114      	bne.n	8000cd6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	e00b      	b.n	8000cd6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	f043 0210 	orr.w	r2, r3, #16
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cce:	f043 0201 	orr.w	r2, r3, #1
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	431bde83 	.word	0x431bde83
 8000cec:	40012300 	.word	0x40012300
 8000cf0:	40012000 	.word	0x40012000
 8000cf4:	40012100 	.word	0x40012100
 8000cf8:	40012200 	.word	0x40012200

08000cfc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d18:	d113      	bne.n	8000d42 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d28:	d10b      	bne.n	8000d42 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2e:	f043 0220 	orr.w	r2, r3, #32
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e063      	b.n	8000e0a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d42:	f7ff feb9 	bl	8000ab8 <HAL_GetTick>
 8000d46:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000d48:	e021      	b.n	8000d8e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d50:	d01d      	beq.n	8000d8e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d007      	beq.n	8000d68 <HAL_ADC_PollForConversion+0x6c>
 8000d58:	f7ff feae 	bl	8000ab8 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d212      	bcs.n	8000d8e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d00b      	beq.n	8000d8e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7a:	f043 0204 	orr.w	r2, r3, #4
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e03d      	b.n	8000e0a <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 0302 	and.w	r3, r3, #2
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d1d6      	bne.n	8000d4a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f06f 0212 	mvn.w	r2, #18
 8000da4:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d123      	bne.n	8000e08 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d11f      	bne.n	8000e08 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dce:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d006      	beq.n	8000de4 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d111      	bne.n	8000e08 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d105      	bne.n	8000e08 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e00:	f043 0201 	orr.w	r2, r3, #1
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d101      	bne.n	8000e48 <HAL_ADC_ConfigChannel+0x1c>
 8000e44:	2302      	movs	r3, #2
 8000e46:	e113      	b.n	8001070 <HAL_ADC_ConfigChannel+0x244>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b09      	cmp	r3, #9
 8000e56:	d925      	bls.n	8000ea4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	68d9      	ldr	r1, [r3, #12]
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	461a      	mov	r2, r3
 8000e66:	4613      	mov	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	3b1e      	subs	r3, #30
 8000e6e:	2207      	movs	r2, #7
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43da      	mvns	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	400a      	ands	r2, r1
 8000e7c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	68d9      	ldr	r1, [r3, #12]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	4603      	mov	r3, r0
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4403      	add	r3, r0
 8000e96:	3b1e      	subs	r3, #30
 8000e98:	409a      	lsls	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	e022      	b.n	8000eea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6919      	ldr	r1, [r3, #16]
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	4413      	add	r3, r2
 8000eb8:	2207      	movs	r2, #7
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	400a      	ands	r2, r1
 8000ec6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6919      	ldr	r1, [r3, #16]
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	4618      	mov	r0, r3
 8000eda:	4603      	mov	r3, r0
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4403      	add	r3, r0
 8000ee0:	409a      	lsls	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d824      	bhi.n	8000f3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	3b05      	subs	r3, #5
 8000f04:	221f      	movs	r2, #31
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	400a      	ands	r2, r1
 8000f12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	4618      	mov	r0, r3
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	3b05      	subs	r3, #5
 8000f2e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	430a      	orrs	r2, r1
 8000f38:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f3a:	e04c      	b.n	8000fd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b0c      	cmp	r3, #12
 8000f42:	d824      	bhi.n	8000f8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	3b23      	subs	r3, #35	@ 0x23
 8000f56:	221f      	movs	r2, #31
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43da      	mvns	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	400a      	ands	r2, r1
 8000f64:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3b23      	subs	r3, #35	@ 0x23
 8000f80:	fa00 f203 	lsl.w	r2, r0, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f8c:	e023      	b.n	8000fd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	3b41      	subs	r3, #65	@ 0x41
 8000fa0:	221f      	movs	r2, #31
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	400a      	ands	r2, r1
 8000fae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	3b41      	subs	r3, #65	@ 0x41
 8000fca:	fa00 f203 	lsl.w	r2, r0, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fd6:	4b29      	ldr	r3, [pc, #164]	@ (800107c <HAL_ADC_ConfigChannel+0x250>)
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a28      	ldr	r2, [pc, #160]	@ (8001080 <HAL_ADC_ConfigChannel+0x254>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d10f      	bne.n	8001004 <HAL_ADC_ConfigChannel+0x1d8>
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b12      	cmp	r3, #18
 8000fea:	d10b      	bne.n	8001004 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a1d      	ldr	r2, [pc, #116]	@ (8001080 <HAL_ADC_ConfigChannel+0x254>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d12b      	bne.n	8001066 <HAL_ADC_ConfigChannel+0x23a>
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a1c      	ldr	r2, [pc, #112]	@ (8001084 <HAL_ADC_ConfigChannel+0x258>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d003      	beq.n	8001020 <HAL_ADC_ConfigChannel+0x1f4>
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b11      	cmp	r3, #17
 800101e:	d122      	bne.n	8001066 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a11      	ldr	r2, [pc, #68]	@ (8001084 <HAL_ADC_ConfigChannel+0x258>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d111      	bne.n	8001066 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001042:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <HAL_ADC_ConfigChannel+0x25c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a11      	ldr	r2, [pc, #68]	@ (800108c <HAL_ADC_ConfigChannel+0x260>)
 8001048:	fba2 2303 	umull	r2, r3, r2, r3
 800104c:	0c9a      	lsrs	r2, r3, #18
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001058:	e002      	b.n	8001060 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	3b01      	subs	r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f9      	bne.n	800105a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40012300 	.word	0x40012300
 8001080:	40012000 	.word	0x40012000
 8001084:	10000012 	.word	0x10000012
 8001088:	20000000 	.word	0x20000000
 800108c:	431bde83 	.word	0x431bde83

08001090 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001098:	4b79      	ldr	r3, [pc, #484]	@ (8001280 <ADC_Init+0x1f0>)
 800109a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	431a      	orrs	r2, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6859      	ldr	r1, [r3, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	021a      	lsls	r2, r3, #8
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	430a      	orrs	r2, r1
 80010d8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80010e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	6859      	ldr	r1, [r3, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	430a      	orrs	r2, r1
 80010fa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800110a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6899      	ldr	r1, [r3, #8]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68da      	ldr	r2, [r3, #12]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	430a      	orrs	r2, r1
 800111c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001122:	4a58      	ldr	r2, [pc, #352]	@ (8001284 <ADC_Init+0x1f4>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d022      	beq.n	800116e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001136:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6899      	ldr	r1, [r3, #8]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	430a      	orrs	r2, r1
 8001148:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001158:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6899      	ldr	r1, [r3, #8]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	430a      	orrs	r2, r1
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	e00f      	b.n	800118e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800117c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800118c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0202 	bic.w	r2, r2, #2
 800119c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6899      	ldr	r1, [r3, #8]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7e1b      	ldrb	r3, [r3, #24]
 80011a8:	005a      	lsls	r2, r3, #1
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d01b      	beq.n	80011f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80011ca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80011da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6859      	ldr	r1, [r3, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e6:	3b01      	subs	r3, #1
 80011e8:	035a      	lsls	r2, r3, #13
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	430a      	orrs	r2, r1
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	e007      	b.n	8001204 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001202:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001212:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	3b01      	subs	r3, #1
 8001220:	051a      	lsls	r2, r3, #20
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	430a      	orrs	r2, r1
 8001228:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001238:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6899      	ldr	r1, [r3, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001246:	025a      	lsls	r2, r3, #9
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800125e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6899      	ldr	r1, [r3, #8]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	029a      	lsls	r2, r3, #10
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	430a      	orrs	r2, r1
 8001272:	609a      	str	r2, [r3, #8]
}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	40012300 	.word	0x40012300
 8001284:	0f000001 	.word	0x0f000001

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	@ (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	6039      	str	r1, [r7, #0]
 80012f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	db0a      	blt.n	8001316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	490c      	ldr	r1, [pc, #48]	@ (8001338 <__NVIC_SetPriority+0x4c>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	0112      	lsls	r2, r2, #4
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	440b      	add	r3, r1
 8001310:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001314:	e00a      	b.n	800132c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4908      	ldr	r1, [pc, #32]	@ (800133c <__NVIC_SetPriority+0x50>)
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	3b04      	subs	r3, #4
 8001324:	0112      	lsls	r2, r2, #4
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	440b      	add	r3, r1
 800132a:	761a      	strb	r2, [r3, #24]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000e100 	.word	0xe000e100
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	@ 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f1c3 0307 	rsb	r3, r3, #7
 800135a:	2b04      	cmp	r3, #4
 800135c:	bf28      	it	cs
 800135e:	2304      	movcs	r3, #4
 8001360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3304      	adds	r3, #4
 8001366:	2b06      	cmp	r3, #6
 8001368:	d902      	bls.n	8001370 <NVIC_EncodePriority+0x30>
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3b03      	subs	r3, #3
 800136e:	e000      	b.n	8001372 <NVIC_EncodePriority+0x32>
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43da      	mvns	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	401a      	ands	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001388:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	43d9      	mvns	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	4313      	orrs	r3, r2
         );
}
 800139a:	4618      	mov	r0, r3
 800139c:	3724      	adds	r7, #36	@ 0x24
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013b8:	d301      	bcc.n	80013be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00f      	b.n	80013de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013be:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <SysTick_Config+0x40>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c6:	210f      	movs	r1, #15
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013cc:	f7ff ff8e 	bl	80012ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d0:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <SysTick_Config+0x40>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d6:	4b04      	ldr	r3, [pc, #16]	@ (80013e8 <SysTick_Config+0x40>)
 80013d8:	2207      	movs	r2, #7
 80013da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	e000e010 	.word	0xe000e010

080013ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff47 	bl	8001288 <__NVIC_SetPriorityGrouping>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001414:	f7ff ff5c 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8001418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	6978      	ldr	r0, [r7, #20]
 8001420:	f7ff ff8e 	bl	8001340 <NVIC_EncodePriority>
 8001424:	4602      	mov	r2, r0
 8001426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff5d 	bl	80012ec <__NVIC_SetPriority>
}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffb0 	bl	80013a8 <SysTick_Config>
 8001448:	4603      	mov	r3, r0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	@ 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
 800146e:	e165      	b.n	800173c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001470:	2201      	movs	r2, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	429a      	cmp	r2, r3
 800148a:	f040 8154 	bne.w	8001736 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	2b01      	cmp	r3, #1
 8001498:	d005      	beq.n	80014a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d130      	bne.n	8001508 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	2203      	movs	r2, #3
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014dc:	2201      	movs	r2, #1
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	f003 0201 	and.w	r2, r3, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b03      	cmp	r3, #3
 8001512:	d017      	beq.n	8001544 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d123      	bne.n	8001598 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	08da      	lsrs	r2, r3, #3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3208      	adds	r2, #8
 8001558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	220f      	movs	r2, #15
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	08da      	lsrs	r2, r3, #3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3208      	adds	r2, #8
 8001592:	69b9      	ldr	r1, [r7, #24]
 8001594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0203 	and.w	r2, r3, #3
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80ae 	beq.w	8001736 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b5d      	ldr	r3, [pc, #372]	@ (8001754 <HAL_GPIO_Init+0x300>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e2:	4a5c      	ldr	r2, [pc, #368]	@ (8001754 <HAL_GPIO_Init+0x300>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ea:	4b5a      	ldr	r3, [pc, #360]	@ (8001754 <HAL_GPIO_Init+0x300>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f6:	4a58      	ldr	r2, [pc, #352]	@ (8001758 <HAL_GPIO_Init+0x304>)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	220f      	movs	r2, #15
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4f      	ldr	r2, [pc, #316]	@ (800175c <HAL_GPIO_Init+0x308>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d025      	beq.n	800166e <HAL_GPIO_Init+0x21a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4e      	ldr	r2, [pc, #312]	@ (8001760 <HAL_GPIO_Init+0x30c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d01f      	beq.n	800166a <HAL_GPIO_Init+0x216>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4d      	ldr	r2, [pc, #308]	@ (8001764 <HAL_GPIO_Init+0x310>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d019      	beq.n	8001666 <HAL_GPIO_Init+0x212>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4c      	ldr	r2, [pc, #304]	@ (8001768 <HAL_GPIO_Init+0x314>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d013      	beq.n	8001662 <HAL_GPIO_Init+0x20e>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4b      	ldr	r2, [pc, #300]	@ (800176c <HAL_GPIO_Init+0x318>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d00d      	beq.n	800165e <HAL_GPIO_Init+0x20a>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4a      	ldr	r2, [pc, #296]	@ (8001770 <HAL_GPIO_Init+0x31c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d007      	beq.n	800165a <HAL_GPIO_Init+0x206>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a49      	ldr	r2, [pc, #292]	@ (8001774 <HAL_GPIO_Init+0x320>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d101      	bne.n	8001656 <HAL_GPIO_Init+0x202>
 8001652:	2306      	movs	r3, #6
 8001654:	e00c      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 8001656:	2307      	movs	r3, #7
 8001658:	e00a      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 800165a:	2305      	movs	r3, #5
 800165c:	e008      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 800165e:	2304      	movs	r3, #4
 8001660:	e006      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 8001662:	2303      	movs	r3, #3
 8001664:	e004      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 8001666:	2302      	movs	r3, #2
 8001668:	e002      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 800166e:	2300      	movs	r3, #0
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	f002 0203 	and.w	r2, r2, #3
 8001676:	0092      	lsls	r2, r2, #2
 8001678:	4093      	lsls	r3, r2
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001680:	4935      	ldr	r1, [pc, #212]	@ (8001758 <HAL_GPIO_Init+0x304>)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	3302      	adds	r3, #2
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800168e:	4b3a      	ldr	r3, [pc, #232]	@ (8001778 <HAL_GPIO_Init+0x324>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016b2:	4a31      	ldr	r2, [pc, #196]	@ (8001778 <HAL_GPIO_Init+0x324>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001778 <HAL_GPIO_Init+0x324>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016dc:	4a26      	ldr	r2, [pc, #152]	@ (8001778 <HAL_GPIO_Init+0x324>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016e2:	4b25      	ldr	r3, [pc, #148]	@ (8001778 <HAL_GPIO_Init+0x324>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001706:	4a1c      	ldr	r2, [pc, #112]	@ (8001778 <HAL_GPIO_Init+0x324>)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800170c:	4b1a      	ldr	r3, [pc, #104]	@ (8001778 <HAL_GPIO_Init+0x324>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001730:	4a11      	ldr	r2, [pc, #68]	@ (8001778 <HAL_GPIO_Init+0x324>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3301      	adds	r3, #1
 800173a:	61fb      	str	r3, [r7, #28]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	2b0f      	cmp	r3, #15
 8001740:	f67f ae96 	bls.w	8001470 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3724      	adds	r7, #36	@ 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40013800 	.word	0x40013800
 800175c:	40020000 	.word	0x40020000
 8001760:	40020400 	.word	0x40020400
 8001764:	40020800 	.word	0x40020800
 8001768:	40020c00 	.word	0x40020c00
 800176c:	40021000 	.word	0x40021000
 8001770:	40021400 	.word	0x40021400
 8001774:	40021800 	.word	0x40021800
 8001778:	40013c00 	.word	0x40013c00

0800177c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
 8001788:	4613      	mov	r3, r2
 800178a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800178c:	787b      	ldrb	r3, [r7, #1]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001792:	887a      	ldrh	r2, [r7, #2]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001798:	e003      	b.n	80017a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800179a:	887b      	ldrh	r3, [r7, #2]
 800179c:	041a      	lsls	r2, r3, #16
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	619a      	str	r2, [r3, #24]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0cc      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017c4:	4b68      	ldr	r3, [pc, #416]	@ (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d90c      	bls.n	80017ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b65      	ldr	r3, [pc, #404]	@ (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017da:	4b63      	ldr	r3, [pc, #396]	@ (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d001      	beq.n	80017ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0b8      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d020      	beq.n	800183a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001804:	4b59      	ldr	r3, [pc, #356]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a58      	ldr	r2, [pc, #352]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800180e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800181c:	4b53      	ldr	r3, [pc, #332]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	4a52      	ldr	r2, [pc, #328]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001828:	4b50      	ldr	r3, [pc, #320]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	494d      	ldr	r1, [pc, #308]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	4313      	orrs	r3, r2
 8001838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d044      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d107      	bne.n	800185e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184e:	4b47      	ldr	r3, [pc, #284]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d119      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e07f      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d003      	beq.n	800186e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186a:	2b03      	cmp	r3, #3
 800186c:	d107      	bne.n	800187e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186e:	4b3f      	ldr	r3, [pc, #252]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d109      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e06f      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187e:	4b3b      	ldr	r3, [pc, #236]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e067      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800188e:	4b37      	ldr	r3, [pc, #220]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f023 0203 	bic.w	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	4934      	ldr	r1, [pc, #208]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	4313      	orrs	r3, r2
 800189e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a0:	f7ff f90a 	bl	8000ab8 <HAL_GetTick>
 80018a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	e00a      	b.n	80018be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a8:	f7ff f906 	bl	8000ab8 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e04f      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018be:	4b2b      	ldr	r3, [pc, #172]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 020c 	and.w	r2, r3, #12
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d1eb      	bne.n	80018a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018d0:	4b25      	ldr	r3, [pc, #148]	@ (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 030f 	and.w	r3, r3, #15
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d20c      	bcs.n	80018f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b22      	ldr	r3, [pc, #136]	@ (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	4b20      	ldr	r3, [pc, #128]	@ (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e032      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d008      	beq.n	8001916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001904:	4b19      	ldr	r3, [pc, #100]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4916      	ldr	r1, [pc, #88]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d009      	beq.n	8001936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001922:	4b12      	ldr	r3, [pc, #72]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	490e      	ldr	r1, [pc, #56]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001936:	f000 f821 	bl	800197c <HAL_RCC_GetSysClockFreq>
 800193a:	4602      	mov	r2, r0
 800193c:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	490a      	ldr	r1, [pc, #40]	@ (8001970 <HAL_RCC_ClockConfig+0x1c0>)
 8001948:	5ccb      	ldrb	r3, [r1, r3]
 800194a:	fa22 f303 	lsr.w	r3, r2, r3
 800194e:	4a09      	ldr	r2, [pc, #36]	@ (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001952:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff f86a 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023c00 	.word	0x40023c00
 800196c:	40023800 	.word	0x40023800
 8001970:	08002280 	.word	0x08002280
 8001974:	20000000 	.word	0x20000000
 8001978:	20000004 	.word	0x20000004

0800197c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800197c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001980:	b0a6      	sub	sp, #152	@ 0x98
 8001982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001996:	2300      	movs	r3, #0
 8001998:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019a2:	4bc8      	ldr	r3, [pc, #800]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x348>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	2b0c      	cmp	r3, #12
 80019ac:	f200 817e 	bhi.w	8001cac <HAL_RCC_GetSysClockFreq+0x330>
 80019b0:	a201      	add	r2, pc, #4	@ (adr r2, 80019b8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80019b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b6:	bf00      	nop
 80019b8:	080019ed 	.word	0x080019ed
 80019bc:	08001cad 	.word	0x08001cad
 80019c0:	08001cad 	.word	0x08001cad
 80019c4:	08001cad 	.word	0x08001cad
 80019c8:	080019f5 	.word	0x080019f5
 80019cc:	08001cad 	.word	0x08001cad
 80019d0:	08001cad 	.word	0x08001cad
 80019d4:	08001cad 	.word	0x08001cad
 80019d8:	080019fd 	.word	0x080019fd
 80019dc:	08001cad 	.word	0x08001cad
 80019e0:	08001cad 	.word	0x08001cad
 80019e4:	08001cad 	.word	0x08001cad
 80019e8:	08001b67 	.word	0x08001b67
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019ec:	4bb6      	ldr	r3, [pc, #728]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80019ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80019f2:	e15f      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019f4:	4bb5      	ldr	r3, [pc, #724]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x350>)
 80019f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80019fa:	e15b      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019fc:	4bb1      	ldr	r3, [pc, #708]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x348>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a08:	4bae      	ldr	r3, [pc, #696]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d031      	beq.n	8001a78 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a14:	4bab      	ldr	r3, [pc, #684]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	099b      	lsrs	r3, r3, #6
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a26:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a28:	2300      	movs	r3, #0
 8001a2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a2c:	4ba7      	ldr	r3, [pc, #668]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x350>)
 8001a2e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a32:	462a      	mov	r2, r5
 8001a34:	fb03 f202 	mul.w	r2, r3, r2
 8001a38:	2300      	movs	r3, #0
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	fb01 f303 	mul.w	r3, r1, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	4aa2      	ldr	r2, [pc, #648]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x350>)
 8001a44:	4621      	mov	r1, r4
 8001a46:	fba1 1202 	umull	r1, r2, r1, r2
 8001a4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001a4c:	460a      	mov	r2, r1
 8001a4e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001a50:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001a52:	4413      	add	r3, r2
 8001a54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001a5e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001a60:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001a64:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001a68:	f7fe fbcc 	bl	8000204 <__aeabi_uldivmod>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4613      	mov	r3, r2
 8001a72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a76:	e064      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a78:	4b92      	ldr	r3, [pc, #584]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	099b      	lsrs	r3, r3, #6
 8001a7e:	2200      	movs	r2, #0
 8001a80:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a82:	657a      	str	r2, [r7, #84]	@ 0x54
 8001a84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a90:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001a94:	4622      	mov	r2, r4
 8001a96:	462b      	mov	r3, r5
 8001a98:	f04f 0000 	mov.w	r0, #0
 8001a9c:	f04f 0100 	mov.w	r1, #0
 8001aa0:	0159      	lsls	r1, r3, #5
 8001aa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aa6:	0150      	lsls	r0, r2, #5
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4621      	mov	r1, r4
 8001aae:	1a51      	subs	r1, r2, r1
 8001ab0:	6139      	str	r1, [r7, #16]
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	eb63 0301 	sbc.w	r3, r3, r1
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ac6:	4659      	mov	r1, fp
 8001ac8:	018b      	lsls	r3, r1, #6
 8001aca:	4651      	mov	r1, sl
 8001acc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ad0:	4651      	mov	r1, sl
 8001ad2:	018a      	lsls	r2, r1, #6
 8001ad4:	4651      	mov	r1, sl
 8001ad6:	ebb2 0801 	subs.w	r8, r2, r1
 8001ada:	4659      	mov	r1, fp
 8001adc:	eb63 0901 	sbc.w	r9, r3, r1
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001af0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001af4:	4690      	mov	r8, r2
 8001af6:	4699      	mov	r9, r3
 8001af8:	4623      	mov	r3, r4
 8001afa:	eb18 0303 	adds.w	r3, r8, r3
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	462b      	mov	r3, r5
 8001b02:	eb49 0303 	adc.w	r3, r9, r3
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b14:	4629      	mov	r1, r5
 8001b16:	028b      	lsls	r3, r1, #10
 8001b18:	4621      	mov	r1, r4
 8001b1a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b1e:	4621      	mov	r1, r4
 8001b20:	028a      	lsls	r2, r1, #10
 8001b22:	4610      	mov	r0, r2
 8001b24:	4619      	mov	r1, r3
 8001b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001b2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8001b30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001b34:	f7fe fb66 	bl	8000204 <__aeabi_uldivmod>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b42:	4b60      	ldr	r3, [pc, #384]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	0c1b      	lsrs	r3, r3, #16
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001b54:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001b58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b64:	e0a6      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b66:	4b57      	ldr	r3, [pc, #348]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b72:	4b54      	ldr	r3, [pc, #336]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d02a      	beq.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b7e:	4b51      	ldr	r3, [pc, #324]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	099b      	lsrs	r3, r3, #6
 8001b84:	2200      	movs	r2, #0
 8001b86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b90:	2100      	movs	r1, #0
 8001b92:	4b4e      	ldr	r3, [pc, #312]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x350>)
 8001b94:	fb03 f201 	mul.w	r2, r3, r1
 8001b98:	2300      	movs	r3, #0
 8001b9a:	fb00 f303 	mul.w	r3, r0, r3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	4a4a      	ldr	r2, [pc, #296]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x350>)
 8001ba2:	fba0 1202 	umull	r1, r2, r0, r2
 8001ba6:	677a      	str	r2, [r7, #116]	@ 0x74
 8001ba8:	460a      	mov	r2, r1
 8001baa:	673a      	str	r2, [r7, #112]	@ 0x70
 8001bac:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001bae:	4413      	add	r3, r2
 8001bb0:	677b      	str	r3, [r7, #116]	@ 0x74
 8001bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bba:	637a      	str	r2, [r7, #52]	@ 0x34
 8001bbc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001bc0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001bc4:	f7fe fb1e 	bl	8000204 <__aeabi_uldivmod>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4613      	mov	r3, r2
 8001bce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001bd2:	e05b      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	099b      	lsrs	r3, r3, #6
 8001bda:	2200      	movs	r2, #0
 8001bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001be6:	623b      	str	r3, [r7, #32]
 8001be8:	2300      	movs	r3, #0
 8001bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bf0:	4642      	mov	r2, r8
 8001bf2:	464b      	mov	r3, r9
 8001bf4:	f04f 0000 	mov.w	r0, #0
 8001bf8:	f04f 0100 	mov.w	r1, #0
 8001bfc:	0159      	lsls	r1, r3, #5
 8001bfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c02:	0150      	lsls	r0, r2, #5
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4641      	mov	r1, r8
 8001c0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c0e:	4649      	mov	r1, r9
 8001c10:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c28:	ebb2 040a 	subs.w	r4, r2, sl
 8001c2c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	00eb      	lsls	r3, r5, #3
 8001c3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c3e:	00e2      	lsls	r2, r4, #3
 8001c40:	4614      	mov	r4, r2
 8001c42:	461d      	mov	r5, r3
 8001c44:	4643      	mov	r3, r8
 8001c46:	18e3      	adds	r3, r4, r3
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	464b      	mov	r3, r9
 8001c4c:	eb45 0303 	adc.w	r3, r5, r3
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c5e:	4629      	mov	r1, r5
 8001c60:	028b      	lsls	r3, r1, #10
 8001c62:	4621      	mov	r1, r4
 8001c64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c68:	4621      	mov	r1, r4
 8001c6a:	028a      	lsls	r2, r1, #10
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c74:	2200      	movs	r2, #0
 8001c76:	61bb      	str	r3, [r7, #24]
 8001c78:	61fa      	str	r2, [r7, #28]
 8001c7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c7e:	f7fe fac1 	bl	8000204 <__aeabi_uldivmod>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4613      	mov	r3, r2
 8001c88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	0f1b      	lsrs	r3, r3, #28
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001c9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001c9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001caa:	e003      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cac:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001cae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001cb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3798      	adds	r7, #152	@ 0x98
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	00f42400 	.word	0x00f42400
 8001ccc:	017d7840 	.word	0x017d7840

08001cd0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e28d      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 8083 	beq.w	8001df6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001cf0:	4b94      	ldr	r3, [pc, #592]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d019      	beq.n	8001d30 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001cfc:	4b91      	ldr	r3, [pc, #580]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 030c 	and.w	r3, r3, #12
        || \
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d106      	bne.n	8001d16 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001d08:	4b8e      	ldr	r3, [pc, #568]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d14:	d00c      	beq.n	8001d30 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d16:	4b8b      	ldr	r3, [pc, #556]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001d1e:	2b0c      	cmp	r3, #12
 8001d20:	d112      	bne.n	8001d48 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d22:	4b88      	ldr	r3, [pc, #544]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d2e:	d10b      	bne.n	8001d48 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	4b84      	ldr	r3, [pc, #528]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d05b      	beq.n	8001df4 <HAL_RCC_OscConfig+0x124>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d157      	bne.n	8001df4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e25a      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d50:	d106      	bne.n	8001d60 <HAL_RCC_OscConfig+0x90>
 8001d52:	4b7c      	ldr	r3, [pc, #496]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a7b      	ldr	r2, [pc, #492]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e01d      	b.n	8001d9c <HAL_RCC_OscConfig+0xcc>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0xb4>
 8001d6a:	4b76      	ldr	r3, [pc, #472]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a75      	ldr	r2, [pc, #468]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	4b73      	ldr	r3, [pc, #460]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a72      	ldr	r2, [pc, #456]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e00b      	b.n	8001d9c <HAL_RCC_OscConfig+0xcc>
 8001d84:	4b6f      	ldr	r3, [pc, #444]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a6e      	ldr	r2, [pc, #440]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b6c      	ldr	r3, [pc, #432]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a6b      	ldr	r2, [pc, #428]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d013      	beq.n	8001dcc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	f7fe fe88 	bl	8000ab8 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dac:	f7fe fe84 	bl	8000ab8 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	@ 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e21f      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	4b61      	ldr	r3, [pc, #388]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0xdc>
 8001dca:	e014      	b.n	8001df6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7fe fe74 	bl	8000ab8 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7fe fe70 	bl	8000ab8 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	@ 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e20b      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de6:	4b57      	ldr	r3, [pc, #348]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x104>
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d06f      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e02:	4b50      	ldr	r3, [pc, #320]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d017      	beq.n	8001e3e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e0e:	4b4d      	ldr	r3, [pc, #308]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
        || \
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d105      	bne.n	8001e26 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e1a:	4b4a      	ldr	r3, [pc, #296]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00b      	beq.n	8001e3e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e26:	4b47      	ldr	r3, [pc, #284]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e2e:	2b0c      	cmp	r3, #12
 8001e30:	d11c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e32:	4b44      	ldr	r3, [pc, #272]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d116      	bne.n	8001e6c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3e:	4b41      	ldr	r3, [pc, #260]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_RCC_OscConfig+0x186>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e1d3      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e56:	4b3b      	ldr	r3, [pc, #236]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4937      	ldr	r1, [pc, #220]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6a:	e03a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d020      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e74:	4b34      	ldr	r3, [pc, #208]	@ (8001f48 <HAL_RCC_OscConfig+0x278>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7a:	f7fe fe1d 	bl	8000ab8 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e82:	f7fe fe19 	bl	8000ab8 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e1b4      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e94:	4b2b      	ldr	r3, [pc, #172]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea0:	4b28      	ldr	r3, [pc, #160]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4925      	ldr	r1, [pc, #148]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]
 8001eb4:	e015      	b.n	8001ee2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb6:	4b24      	ldr	r3, [pc, #144]	@ (8001f48 <HAL_RCC_OscConfig+0x278>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7fe fdfc 	bl	8000ab8 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec4:	f7fe fdf8 	bl	8000ab8 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e193      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d036      	beq.n	8001f5c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d016      	beq.n	8001f24 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef6:	4b15      	ldr	r3, [pc, #84]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001efc:	f7fe fddc 	bl	8000ab8 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f04:	f7fe fdd8 	bl	8000ab8 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e173      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f16:	4b0b      	ldr	r3, [pc, #44]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x234>
 8001f22:	e01b      	b.n	8001f5c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f24:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2a:	f7fe fdc5 	bl	8000ab8 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f30:	e00e      	b.n	8001f50 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f32:	f7fe fdc1 	bl	8000ab8 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d907      	bls.n	8001f50 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e15c      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
 8001f44:	40023800 	.word	0x40023800
 8001f48:	42470000 	.word	0x42470000
 8001f4c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f50:	4b8a      	ldr	r3, [pc, #552]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8001f52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1ea      	bne.n	8001f32 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 8097 	beq.w	8002098 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6e:	4b83      	ldr	r3, [pc, #524]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10f      	bne.n	8001f9a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	4b7f      	ldr	r3, [pc, #508]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	4a7e      	ldr	r2, [pc, #504]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8001f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8a:	4b7c      	ldr	r3, [pc, #496]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f96:	2301      	movs	r3, #1
 8001f98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9a:	4b79      	ldr	r3, [pc, #484]	@ (8002180 <HAL_RCC_OscConfig+0x4b0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d118      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fa6:	4b76      	ldr	r3, [pc, #472]	@ (8002180 <HAL_RCC_OscConfig+0x4b0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a75      	ldr	r2, [pc, #468]	@ (8002180 <HAL_RCC_OscConfig+0x4b0>)
 8001fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb2:	f7fe fd81 	bl	8000ab8 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fba:	f7fe fd7d 	bl	8000ab8 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e118      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fcc:	4b6c      	ldr	r3, [pc, #432]	@ (8002180 <HAL_RCC_OscConfig+0x4b0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_OscConfig+0x31e>
 8001fe0:	4b66      	ldr	r3, [pc, #408]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8001fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe4:	4a65      	ldr	r2, [pc, #404]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fec:	e01c      	b.n	8002028 <HAL_RCC_OscConfig+0x358>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b05      	cmp	r3, #5
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCC_OscConfig+0x340>
 8001ff6:	4b61      	ldr	r3, [pc, #388]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffa:	4a60      	ldr	r2, [pc, #384]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	6713      	str	r3, [r2, #112]	@ 0x70
 8002002:	4b5e      	ldr	r3, [pc, #376]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002006:	4a5d      	ldr	r2, [pc, #372]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6713      	str	r3, [r2, #112]	@ 0x70
 800200e:	e00b      	b.n	8002028 <HAL_RCC_OscConfig+0x358>
 8002010:	4b5a      	ldr	r3, [pc, #360]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8002012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002014:	4a59      	ldr	r2, [pc, #356]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8002016:	f023 0301 	bic.w	r3, r3, #1
 800201a:	6713      	str	r3, [r2, #112]	@ 0x70
 800201c:	4b57      	ldr	r3, [pc, #348]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 800201e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002020:	4a56      	ldr	r2, [pc, #344]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8002022:	f023 0304 	bic.w	r3, r3, #4
 8002026:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d015      	beq.n	800205c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002030:	f7fe fd42 	bl	8000ab8 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002036:	e00a      	b.n	800204e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002038:	f7fe fd3e 	bl	8000ab8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e0d7      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204e:	4b4b      	ldr	r3, [pc, #300]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0ee      	beq.n	8002038 <HAL_RCC_OscConfig+0x368>
 800205a:	e014      	b.n	8002086 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205c:	f7fe fd2c 	bl	8000ab8 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002062:	e00a      	b.n	800207a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002064:	f7fe fd28 	bl	8000ab8 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e0c1      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207a:	4b40      	ldr	r3, [pc, #256]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 800207c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1ee      	bne.n	8002064 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002086:	7dfb      	ldrb	r3, [r7, #23]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d105      	bne.n	8002098 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800208c:	4b3b      	ldr	r3, [pc, #236]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 800208e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002090:	4a3a      	ldr	r2, [pc, #232]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8002092:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002096:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 80ad 	beq.w	80021fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020a2:	4b36      	ldr	r3, [pc, #216]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d060      	beq.n	8002170 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d145      	bne.n	8002142 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b6:	4b33      	ldr	r3, [pc, #204]	@ (8002184 <HAL_RCC_OscConfig+0x4b4>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7fe fcfc 	bl	8000ab8 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c4:	f7fe fcf8 	bl	8000ab8 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e093      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d6:	4b29      	ldr	r3, [pc, #164]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69da      	ldr	r2, [r3, #28]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f0:	019b      	lsls	r3, r3, #6
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f8:	085b      	lsrs	r3, r3, #1
 80020fa:	3b01      	subs	r3, #1
 80020fc:	041b      	lsls	r3, r3, #16
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002104:	061b      	lsls	r3, r3, #24
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210c:	071b      	lsls	r3, r3, #28
 800210e:	491b      	ldr	r1, [pc, #108]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002114:	4b1b      	ldr	r3, [pc, #108]	@ (8002184 <HAL_RCC_OscConfig+0x4b4>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211a:	f7fe fccd 	bl	8000ab8 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002122:	f7fe fcc9 	bl	8000ab8 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e064      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002134:	4b11      	ldr	r3, [pc, #68]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f0      	beq.n	8002122 <HAL_RCC_OscConfig+0x452>
 8002140:	e05c      	b.n	80021fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002142:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <HAL_RCC_OscConfig+0x4b4>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002148:	f7fe fcb6 	bl	8000ab8 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002150:	f7fe fcb2 	bl	8000ab8 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e04d      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002162:	4b06      	ldr	r3, [pc, #24]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x480>
 800216e:	e045      	b.n	80021fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d107      	bne.n	8002188 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e040      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
 800217c:	40023800 	.word	0x40023800
 8002180:	40007000 	.word	0x40007000
 8002184:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002188:	4b1f      	ldr	r3, [pc, #124]	@ (8002208 <HAL_RCC_OscConfig+0x538>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d030      	beq.n	80021f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d129      	bne.n	80021f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d122      	bne.n	80021f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021b8:	4013      	ands	r3, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d119      	bne.n	80021f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ce:	085b      	lsrs	r3, r3, #1
 80021d0:	3b01      	subs	r3, #1
 80021d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d10f      	bne.n	80021f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d107      	bne.n	80021f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800

0800220c <memset>:
 800220c:	4402      	add	r2, r0
 800220e:	4603      	mov	r3, r0
 8002210:	4293      	cmp	r3, r2
 8002212:	d100      	bne.n	8002216 <memset+0xa>
 8002214:	4770      	bx	lr
 8002216:	f803 1b01 	strb.w	r1, [r3], #1
 800221a:	e7f9      	b.n	8002210 <memset+0x4>

0800221c <__libc_init_array>:
 800221c:	b570      	push	{r4, r5, r6, lr}
 800221e:	4d0d      	ldr	r5, [pc, #52]	@ (8002254 <__libc_init_array+0x38>)
 8002220:	4c0d      	ldr	r4, [pc, #52]	@ (8002258 <__libc_init_array+0x3c>)
 8002222:	1b64      	subs	r4, r4, r5
 8002224:	10a4      	asrs	r4, r4, #2
 8002226:	2600      	movs	r6, #0
 8002228:	42a6      	cmp	r6, r4
 800222a:	d109      	bne.n	8002240 <__libc_init_array+0x24>
 800222c:	4d0b      	ldr	r5, [pc, #44]	@ (800225c <__libc_init_array+0x40>)
 800222e:	4c0c      	ldr	r4, [pc, #48]	@ (8002260 <__libc_init_array+0x44>)
 8002230:	f000 f818 	bl	8002264 <_init>
 8002234:	1b64      	subs	r4, r4, r5
 8002236:	10a4      	asrs	r4, r4, #2
 8002238:	2600      	movs	r6, #0
 800223a:	42a6      	cmp	r6, r4
 800223c:	d105      	bne.n	800224a <__libc_init_array+0x2e>
 800223e:	bd70      	pop	{r4, r5, r6, pc}
 8002240:	f855 3b04 	ldr.w	r3, [r5], #4
 8002244:	4798      	blx	r3
 8002246:	3601      	adds	r6, #1
 8002248:	e7ee      	b.n	8002228 <__libc_init_array+0xc>
 800224a:	f855 3b04 	ldr.w	r3, [r5], #4
 800224e:	4798      	blx	r3
 8002250:	3601      	adds	r6, #1
 8002252:	e7f2      	b.n	800223a <__libc_init_array+0x1e>
 8002254:	08002298 	.word	0x08002298
 8002258:	08002298 	.word	0x08002298
 800225c:	08002298 	.word	0x08002298
 8002260:	0800229c 	.word	0x0800229c

08002264 <_init>:
 8002264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002266:	bf00      	nop
 8002268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800226a:	bc08      	pop	{r3}
 800226c:	469e      	mov	lr, r3
 800226e:	4770      	bx	lr

08002270 <_fini>:
 8002270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002272:	bf00      	nop
 8002274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002276:	bc08      	pop	{r3}
 8002278:	469e      	mov	lr, r3
 800227a:	4770      	bx	lr
