
Centor_mother_CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000688c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e64  08006a60  08006a60  00007a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078c4  080078c4  00009078  2**0
                  CONTENTS
  4 .ARM          00000008  080078c4  080078c4  000088c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078cc  080078cc  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078cc  080078cc  000088cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080078d0  080078d0  000088d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080078d4  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000798  20000078  0800794c  00009078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000810  0800794c  00009810  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8e5  00000000  00000000  000090a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025d1  00000000  00000000  0001898d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  0001af60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000946  00000000  00000000  0001bb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b01  00000000  00000000  0001c48e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fcd  00000000  00000000  00041f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db6db  00000000  00000000  00052f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e637  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003958  00000000  00000000  0012e67c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  00131fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006a44 	.word	0x08006a44

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08006a44 	.word	0x08006a44

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c2c:	f000 b96a 	b.w	8000f04 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	460c      	mov	r4, r1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d14e      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c54:	4694      	mov	ip, r2
 8000c56:	458c      	cmp	ip, r1
 8000c58:	4686      	mov	lr, r0
 8000c5a:	fab2 f282 	clz	r2, r2
 8000c5e:	d962      	bls.n	8000d26 <__udivmoddi4+0xde>
 8000c60:	b14a      	cbz	r2, 8000c76 <__udivmoddi4+0x2e>
 8000c62:	f1c2 0320 	rsb	r3, r2, #32
 8000c66:	4091      	lsls	r1, r2
 8000c68:	fa20 f303 	lsr.w	r3, r0, r3
 8000c6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c70:	4319      	orrs	r1, r3
 8000c72:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7a:	fa1f f68c 	uxth.w	r6, ip
 8000c7e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c86:	fb07 1114 	mls	r1, r7, r4, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb04 f106 	mul.w	r1, r4, r6
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c9e:	f080 8112 	bcs.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 810f 	bls.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca8:	3c02      	subs	r4, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	fa1f f38e 	uxth.w	r3, lr
 8000cb2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f606 	mul.w	r6, r0, r6
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x94>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cce:	f080 80fc 	bcs.w	8000eca <__udivmoddi4+0x282>
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	f240 80f9 	bls.w	8000eca <__udivmoddi4+0x282>
 8000cd8:	4463      	add	r3, ip
 8000cda:	3802      	subs	r0, #2
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	b11d      	cbz	r5, 8000cee <__udivmoddi4+0xa6>
 8000ce6:	40d3      	lsrs	r3, r2
 8000ce8:	2200      	movs	r2, #0
 8000cea:	e9c5 3200 	strd	r3, r2, [r5]
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d905      	bls.n	8000d02 <__udivmoddi4+0xba>
 8000cf6:	b10d      	cbz	r5, 8000cfc <__udivmoddi4+0xb4>
 8000cf8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e7f5      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d02:	fab3 f183 	clz	r1, r3
 8000d06:	2900      	cmp	r1, #0
 8000d08:	d146      	bne.n	8000d98 <__udivmoddi4+0x150>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d302      	bcc.n	8000d14 <__udivmoddi4+0xcc>
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	f0c0 80f0 	bcc.w	8000ef4 <__udivmoddi4+0x2ac>
 8000d14:	1a86      	subs	r6, r0, r2
 8000d16:	eb64 0303 	sbc.w	r3, r4, r3
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	2d00      	cmp	r5, #0
 8000d1e:	d0e6      	beq.n	8000cee <__udivmoddi4+0xa6>
 8000d20:	e9c5 6300 	strd	r6, r3, [r5]
 8000d24:	e7e3      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	f040 8090 	bne.w	8000e4c <__udivmoddi4+0x204>
 8000d2c:	eba1 040c 	sub.w	r4, r1, ip
 8000d30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d34:	fa1f f78c 	uxth.w	r7, ip
 8000d38:	2101      	movs	r1, #1
 8000d3a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d42:	fb08 4416 	mls	r4, r8, r6, r4
 8000d46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4a:	fb07 f006 	mul.w	r0, r7, r6
 8000d4e:	4298      	cmp	r0, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x11c>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x11a>
 8000d5c:	4298      	cmp	r0, r3
 8000d5e:	f200 80cd 	bhi.w	8000efc <__udivmoddi4+0x2b4>
 8000d62:	4626      	mov	r6, r4
 8000d64:	1a1c      	subs	r4, r3, r0
 8000d66:	fa1f f38e 	uxth.w	r3, lr
 8000d6a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d6e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d76:	fb00 f707 	mul.w	r7, r0, r7
 8000d7a:	429f      	cmp	r7, r3
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x148>
 8000d7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d82:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d86:	d202      	bcs.n	8000d8e <__udivmoddi4+0x146>
 8000d88:	429f      	cmp	r7, r3
 8000d8a:	f200 80b0 	bhi.w	8000eee <__udivmoddi4+0x2a6>
 8000d8e:	4620      	mov	r0, r4
 8000d90:	1bdb      	subs	r3, r3, r7
 8000d92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d96:	e7a5      	b.n	8000ce4 <__udivmoddi4+0x9c>
 8000d98:	f1c1 0620 	rsb	r6, r1, #32
 8000d9c:	408b      	lsls	r3, r1
 8000d9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000da2:	431f      	orrs	r7, r3
 8000da4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000da8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dac:	ea43 030c 	orr.w	r3, r3, ip
 8000db0:	40f4      	lsrs	r4, r6
 8000db2:	fa00 f801 	lsl.w	r8, r0, r1
 8000db6:	0c38      	lsrs	r0, r7, #16
 8000db8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dbc:	fbb4 fef0 	udiv	lr, r4, r0
 8000dc0:	fa1f fc87 	uxth.w	ip, r7
 8000dc4:	fb00 441e 	mls	r4, r0, lr, r4
 8000dc8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dcc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd0:	45a1      	cmp	r9, r4
 8000dd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd6:	d90a      	bls.n	8000dee <__udivmoddi4+0x1a6>
 8000dd8:	193c      	adds	r4, r7, r4
 8000dda:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dde:	f080 8084 	bcs.w	8000eea <__udivmoddi4+0x2a2>
 8000de2:	45a1      	cmp	r9, r4
 8000de4:	f240 8081 	bls.w	8000eea <__udivmoddi4+0x2a2>
 8000de8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dec:	443c      	add	r4, r7
 8000dee:	eba4 0409 	sub.w	r4, r4, r9
 8000df2:	fa1f f983 	uxth.w	r9, r3
 8000df6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dfa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dfe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e02:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x1d2>
 8000e0a:	193c      	adds	r4, r7, r4
 8000e0c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e10:	d267      	bcs.n	8000ee2 <__udivmoddi4+0x29a>
 8000e12:	45a4      	cmp	ip, r4
 8000e14:	d965      	bls.n	8000ee2 <__udivmoddi4+0x29a>
 8000e16:	3b02      	subs	r3, #2
 8000e18:	443c      	add	r4, r7
 8000e1a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e1e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e22:	eba4 040c 	sub.w	r4, r4, ip
 8000e26:	429c      	cmp	r4, r3
 8000e28:	46ce      	mov	lr, r9
 8000e2a:	469c      	mov	ip, r3
 8000e2c:	d351      	bcc.n	8000ed2 <__udivmoddi4+0x28a>
 8000e2e:	d04e      	beq.n	8000ece <__udivmoddi4+0x286>
 8000e30:	b155      	cbz	r5, 8000e48 <__udivmoddi4+0x200>
 8000e32:	ebb8 030e 	subs.w	r3, r8, lr
 8000e36:	eb64 040c 	sbc.w	r4, r4, ip
 8000e3a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e3e:	40cb      	lsrs	r3, r1
 8000e40:	431e      	orrs	r6, r3
 8000e42:	40cc      	lsrs	r4, r1
 8000e44:	e9c5 6400 	strd	r6, r4, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e750      	b.n	8000cee <__udivmoddi4+0xa6>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f103 	lsr.w	r1, r0, r3
 8000e54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e58:	fa24 f303 	lsr.w	r3, r4, r3
 8000e5c:	4094      	lsls	r4, r2
 8000e5e:	430c      	orrs	r4, r1
 8000e60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e64:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e68:	fa1f f78c 	uxth.w	r7, ip
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3110 	mls	r1, r8, r0, r3
 8000e74:	0c23      	lsrs	r3, r4, #16
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f107 	mul.w	r1, r0, r7
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x24c>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e8a:	d22c      	bcs.n	8000ee6 <__udivmoddi4+0x29e>
 8000e8c:	4299      	cmp	r1, r3
 8000e8e:	d92a      	bls.n	8000ee6 <__udivmoddi4+0x29e>
 8000e90:	3802      	subs	r0, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b2a4      	uxth	r4, r4
 8000e98:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e9c:	fb08 3311 	mls	r3, r8, r1, r3
 8000ea0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ea4:	fb01 f307 	mul.w	r3, r1, r7
 8000ea8:	42a3      	cmp	r3, r4
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x276>
 8000eac:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000eb4:	d213      	bcs.n	8000ede <__udivmoddi4+0x296>
 8000eb6:	42a3      	cmp	r3, r4
 8000eb8:	d911      	bls.n	8000ede <__udivmoddi4+0x296>
 8000eba:	3902      	subs	r1, #2
 8000ebc:	4464      	add	r4, ip
 8000ebe:	1ae4      	subs	r4, r4, r3
 8000ec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ec4:	e739      	b.n	8000d3a <__udivmoddi4+0xf2>
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	e6f0      	b.n	8000cac <__udivmoddi4+0x64>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e706      	b.n	8000cdc <__udivmoddi4+0x94>
 8000ece:	45c8      	cmp	r8, r9
 8000ed0:	d2ae      	bcs.n	8000e30 <__udivmoddi4+0x1e8>
 8000ed2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ed6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eda:	3801      	subs	r0, #1
 8000edc:	e7a8      	b.n	8000e30 <__udivmoddi4+0x1e8>
 8000ede:	4631      	mov	r1, r6
 8000ee0:	e7ed      	b.n	8000ebe <__udivmoddi4+0x276>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	e799      	b.n	8000e1a <__udivmoddi4+0x1d2>
 8000ee6:	4630      	mov	r0, r6
 8000ee8:	e7d4      	b.n	8000e94 <__udivmoddi4+0x24c>
 8000eea:	46d6      	mov	lr, sl
 8000eec:	e77f      	b.n	8000dee <__udivmoddi4+0x1a6>
 8000eee:	4463      	add	r3, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e74d      	b.n	8000d90 <__udivmoddi4+0x148>
 8000ef4:	4606      	mov	r6, r0
 8000ef6:	4623      	mov	r3, r4
 8000ef8:	4608      	mov	r0, r1
 8000efa:	e70f      	b.n	8000d1c <__udivmoddi4+0xd4>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	4463      	add	r3, ip
 8000f00:	e730      	b.n	8000d64 <__udivmoddi4+0x11c>
 8000f02:	bf00      	nop

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af04      	add	r7, sp, #16
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);//こっちだと動く
 8000f14:	230a      	movs	r3, #10
 8000f16:	9302      	str	r3, [sp, #8]
 8000f18:	2301      	movs	r3, #1
 8000f1a:	9301      	str	r3, [sp, #4]
 8000f1c:	1cfb      	adds	r3, r7, #3
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2301      	movs	r3, #1
 8000f22:	2200      	movs	r2, #0
 8000f24:	2178      	movs	r1, #120	@ 0x78
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f002 fe80 	bl	8003c2c <HAL_I2C_Mem_Write>
 8000f2c:	4603      	mov	r3, r0
//    return HAL_I2C_Master_Transmit(hi2c, SSD1306_I2C_ADDR, &command, 1, 10);//こっちだと動かない
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <_Z12ssd1306_InitP17I2C_HandleTypeDef>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8000f40:	2064      	movs	r0, #100	@ 0x64
 8000f42:	f001 fae7 	bl	8002514 <HAL_Delay>
    int status = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8000f4a:	21ae      	movs	r1, #174	@ 0xae
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ffdb 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8000f52:	4603      	mov	r3, r0
 8000f54:	461a      	mov	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	4413      	add	r3, r2
 8000f5a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8000f5c:	2120      	movs	r1, #32
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ffd2 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000f6e:	2110      	movs	r1, #16
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ffc9 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8000f80:	21b0      	movs	r1, #176	@ 0xb0
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffc0 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8000f92:	21c8      	movs	r1, #200	@ 0xc8
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ffb7 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ffae 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8000fac:	4603      	mov	r3, r0
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8000fb6:	2110      	movs	r1, #16
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ffa5 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8000fc8:	2140      	movs	r1, #64	@ 0x40
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ff9c 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8000fda:	2181      	movs	r1, #129	@ 0x81
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff93 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4413      	add	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8000fec:	21ff      	movs	r1, #255	@ 0xff
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ff8a 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8000ffe:	21a1      	movs	r1, #161	@ 0xa1
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ff81 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8001006:	4603      	mov	r3, r0
 8001008:	461a      	mov	r2, r3
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4413      	add	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8001010:	21a6      	movs	r1, #166	@ 0xa6
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ff78 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8001022:	21a8      	movs	r1, #168	@ 0xa8
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff6f 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4413      	add	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8001034:	213f      	movs	r1, #63	@ 0x3f
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ff66 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001046:	21a4      	movs	r1, #164	@ 0xa4
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff5d 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4413      	add	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001058:	21d3      	movs	r1, #211	@ 0xd3
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ff54 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8001060:	4603      	mov	r3, r0
 8001062:	461a      	mov	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 800106a:	2100      	movs	r1, #0
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff4b 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4413      	add	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 800107c:	21d5      	movs	r1, #213	@ 0xd5
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ff42 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8001084:	4603      	mov	r3, r0
 8001086:	461a      	mov	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 800108e:	21f0      	movs	r1, #240	@ 0xf0
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff39 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8001096:	4603      	mov	r3, r0
 8001098:	461a      	mov	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4413      	add	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 80010a0:	21d9      	movs	r1, #217	@ 0xd9
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ff30 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 80010b2:	2122      	movs	r1, #34	@ 0x22
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff27 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4413      	add	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 80010c4:	21da      	movs	r1, #218	@ 0xda
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ff1e 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4413      	add	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 80010d6:	2112      	movs	r1, #18
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff15 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4413      	add	r3, r2
 80010e6:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 80010e8:	21db      	movs	r1, #219	@ 0xdb
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ff0c 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 80010fa:	2120      	movs	r1, #32
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ff03 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 800110c:	218d      	movs	r1, #141	@ 0x8d
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff fefa 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4413      	add	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 800111e:	2114      	movs	r1, #20
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff fef1 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4413      	add	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001130:	21af      	movs	r1, #175	@ 0xaf
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff fee8 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <_Z12ssd1306_InitP17I2C_HandleTypeDef+0x214>
        return 1; // 失敗
 8001148:	2301      	movs	r3, #1
 800114a:	e00f      	b.n	800116c <_Z12ssd1306_InitP17I2C_HandleTypeDef+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 800114c:	2000      	movs	r0, #0
 800114e:	f000 f813 	bl	8001178 <_Z12ssd1306_Fill13SSD1306_COLOR>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 f834 	bl	80011c0 <_Z20ssd1306_UpdateScreenP17I2C_HandleTypeDef>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001158:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <_Z12ssd1306_InitP17I2C_HandleTypeDef+0x23c>)
 800115a:	2200      	movs	r2, #0
 800115c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800115e:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <_Z12ssd1306_InitP17I2C_HandleTypeDef+0x23c>)
 8001160:	2200      	movs	r2, #0
 8001162:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001164:	4b03      	ldr	r3, [pc, #12]	@ (8001174 <_Z12ssd1306_InitP17I2C_HandleTypeDef+0x23c>)
 8001166:	2201      	movs	r2, #1
 8001168:	715a      	strb	r2, [r3, #5]

    return 0;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000494 	.word	0x20000494

08001178 <_Z12ssd1306_Fill13SSD1306_COLOR>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	e00d      	b.n	80011a4 <_Z12ssd1306_Fill13SSD1306_COLOR+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <_Z12ssd1306_Fill13SSD1306_COLOR+0x1a>
 800118e:	2100      	movs	r1, #0
 8001190:	e000      	b.n	8001194 <_Z12ssd1306_Fill13SSD1306_COLOR+0x1c>
 8001192:	21ff      	movs	r1, #255	@ 0xff
 8001194:	4a09      	ldr	r2, [pc, #36]	@ (80011bc <_Z12ssd1306_Fill13SSD1306_COLOR+0x44>)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4413      	add	r3, r2
 800119a:	460a      	mov	r2, r1
 800119c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	3301      	adds	r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011aa:	d3ed      	bcc.n	8001188 <_Z12ssd1306_Fill13SSD1306_COLOR+0x10>
    }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000094 	.word	0x20000094

080011c0 <_Z20ssd1306_UpdateScreenP17I2C_HandleTypeDef>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af04      	add	r7, sp, #16
 80011c6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 80011c8:	2300      	movs	r3, #0
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	e020      	b.n	8001210 <_Z20ssd1306_UpdateScreenP17I2C_HandleTypeDef+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	3b50      	subs	r3, #80	@ 0x50
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	4619      	mov	r1, r3
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff fe96 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
        ssd1306_WriteCommand(hi2c, 0x00);
 80011dc:	2100      	movs	r1, #0
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fe92 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>
        ssd1306_WriteCommand(hi2c, 0x10);
 80011e4:	2110      	movs	r1, #16
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fe8e 	bl	8000f08 <_ZL20ssd1306_WriteCommandP17I2C_HandleTypeDefh>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	01db      	lsls	r3, r3, #7
 80011f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001220 <_Z20ssd1306_UpdateScreenP17I2C_HandleTypeDef+0x60>)
 80011f2:	4413      	add	r3, r2
 80011f4:	2264      	movs	r2, #100	@ 0x64
 80011f6:	9202      	str	r2, [sp, #8]
 80011f8:	2280      	movs	r2, #128	@ 0x80
 80011fa:	9201      	str	r2, [sp, #4]
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2301      	movs	r3, #1
 8001200:	2240      	movs	r2, #64	@ 0x40
 8001202:	2178      	movs	r1, #120	@ 0x78
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f002 fd11 	bl	8003c2c <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	3301      	adds	r3, #1
 800120e:	73fb      	strb	r3, [r7, #15]
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	2b07      	cmp	r3, #7
 8001214:	d9db      	bls.n	80011ce <_Z20ssd1306_UpdateScreenP17I2C_HandleTypeDef+0xe>
    }
}
 8001216:	bf00      	nop
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000094 	.word	0x20000094

08001224 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
 800122e:	460b      	mov	r3, r1
 8001230:	71bb      	strb	r3, [r7, #6]
 8001232:	4613      	mov	r3, r2
 8001234:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	db48      	blt.n	80012d0 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xac>
 800123e:	79bb      	ldrb	r3, [r7, #6]
 8001240:	2b3f      	cmp	r3, #63	@ 0x3f
 8001242:	d845      	bhi.n	80012d0 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001244:	4b25      	ldr	r3, [pc, #148]	@ (80012dc <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xb8>)
 8001246:	791b      	ldrb	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0x36>
    {
        color = (SSD1306_COLOR)!color;
 800124c:	797b      	ldrb	r3, [r7, #5]
 800124e:	2b00      	cmp	r3, #0
 8001250:	bf0c      	ite	eq
 8001252:	2301      	moveq	r3, #1
 8001254:	2300      	movne	r3, #0
 8001256:	b2db      	uxtb	r3, r3
 8001258:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 800125a:	797b      	ldrb	r3, [r7, #5]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d11a      	bne.n	8001296 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001260:	79fa      	ldrb	r2, [r7, #7]
 8001262:	79bb      	ldrb	r3, [r7, #6]
 8001264:	08db      	lsrs	r3, r3, #3
 8001266:	b2d8      	uxtb	r0, r3
 8001268:	4603      	mov	r3, r0
 800126a:	01db      	lsls	r3, r3, #7
 800126c:	4413      	add	r3, r2
 800126e:	4a1c      	ldr	r2, [pc, #112]	@ (80012e0 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xbc>)
 8001270:	5cd3      	ldrb	r3, [r2, r3]
 8001272:	b25a      	sxtb	r2, r3
 8001274:	79bb      	ldrb	r3, [r7, #6]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	2101      	movs	r1, #1
 800127c:	fa01 f303 	lsl.w	r3, r1, r3
 8001280:	b25b      	sxtb	r3, r3
 8001282:	4313      	orrs	r3, r2
 8001284:	b259      	sxtb	r1, r3
 8001286:	79fa      	ldrb	r2, [r7, #7]
 8001288:	4603      	mov	r3, r0
 800128a:	01db      	lsls	r3, r3, #7
 800128c:	4413      	add	r3, r2
 800128e:	b2c9      	uxtb	r1, r1
 8001290:	4a13      	ldr	r2, [pc, #76]	@ (80012e0 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xbc>)
 8001292:	54d1      	strb	r1, [r2, r3]
 8001294:	e01d      	b.n	80012d2 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001296:	79fa      	ldrb	r2, [r7, #7]
 8001298:	79bb      	ldrb	r3, [r7, #6]
 800129a:	08db      	lsrs	r3, r3, #3
 800129c:	b2d8      	uxtb	r0, r3
 800129e:	4603      	mov	r3, r0
 80012a0:	01db      	lsls	r3, r3, #7
 80012a2:	4413      	add	r3, r2
 80012a4:	4a0e      	ldr	r2, [pc, #56]	@ (80012e0 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xbc>)
 80012a6:	5cd3      	ldrb	r3, [r2, r3]
 80012a8:	b25a      	sxtb	r2, r3
 80012aa:	79bb      	ldrb	r3, [r7, #6]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	2101      	movs	r1, #1
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	b25b      	sxtb	r3, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	b25b      	sxtb	r3, r3
 80012bc:	4013      	ands	r3, r2
 80012be:	b259      	sxtb	r1, r3
 80012c0:	79fa      	ldrb	r2, [r7, #7]
 80012c2:	4603      	mov	r3, r0
 80012c4:	01db      	lsls	r3, r3, #7
 80012c6:	4413      	add	r3, r2
 80012c8:	b2c9      	uxtb	r1, r1
 80012ca:	4a05      	ldr	r2, [pc, #20]	@ (80012e0 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xbc>)
 80012cc:	54d1      	strb	r1, [r2, r3]
 80012ce:	e000      	b.n	80012d2 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0xae>
        return;
 80012d0:	bf00      	nop
    }
}
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	20000494 	.word	0x20000494
 80012e0:	20000094 	.word	0x20000094

080012e4 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b089      	sub	sp, #36	@ 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4604      	mov	r4, r0
 80012ec:	1d38      	adds	r0, r7, #4
 80012ee:	e880 0006 	stmia.w	r0, {r1, r2}
 80012f2:	461a      	mov	r2, r3
 80012f4:	4623      	mov	r3, r4
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	4613      	mov	r3, r2
 80012fa:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80012fc:	4b38      	ldr	r3, [pc, #224]	@ (80013e0 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	793b      	ldrb	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	2b7f      	cmp	r3, #127	@ 0x7f
 8001308:	dc06      	bgt.n	8001318 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800130a:	4b35      	ldr	r3, [pc, #212]	@ (80013e0 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 800130c:	885b      	ldrh	r3, [r3, #2]
 800130e:	461a      	mov	r2, r3
 8001310:	797b      	ldrb	r3, [r7, #5]
 8001312:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001314:	2b3f      	cmp	r3, #63	@ 0x3f
 8001316:	dd01      	ble.n	800131c <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x38>
    {
        // Not enough space on current line
        return 0;
 8001318:	2300      	movs	r3, #0
 800131a:	e05c      	b.n	80013d6 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
 8001320:	e04c      	b.n	80013bc <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	3b20      	subs	r3, #32
 8001328:	7979      	ldrb	r1, [r7, #5]
 800132a:	fb01 f303 	mul.w	r3, r1, r3
 800132e:	4619      	mov	r1, r3
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	440b      	add	r3, r1
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
 8001340:	e034      	b.n	80013ac <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xc8>
        {
            if ((b << j) & 0x8000)
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d012      	beq.n	8001378 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001352:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	4413      	add	r3, r2
 800135e:	b2d8      	uxtb	r0, r3
 8001360:	4b1f      	ldr	r3, [pc, #124]	@ (80013e0 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 8001362:	885b      	ldrh	r3, [r3, #2]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	4413      	add	r3, r2
 800136c:	b2db      	uxtb	r3, r3
 800136e:	7bba      	ldrb	r2, [r7, #14]
 8001370:	4619      	mov	r1, r3
 8001372:	f7ff ff57 	bl	8001224 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR>
 8001376:	e016      	b.n	80013a6 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001378:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	4413      	add	r3, r2
 8001384:	b2d8      	uxtb	r0, r3
 8001386:	4b16      	ldr	r3, [pc, #88]	@ (80013e0 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 8001388:	885b      	ldrh	r3, [r3, #2]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	4413      	add	r3, r2
 8001392:	b2d9      	uxtb	r1, r3
 8001394:	7bbb      	ldrb	r3, [r7, #14]
 8001396:	2b00      	cmp	r3, #0
 8001398:	bf0c      	ite	eq
 800139a:	2301      	moveq	r3, #1
 800139c:	2300      	movne	r3, #0
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	461a      	mov	r2, r3
 80013a2:	f7ff ff3f 	bl	8001224 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR>
        for (j = 0; j < Font.FontWidth; j++)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	3301      	adds	r3, #1
 80013aa:	61bb      	str	r3, [r7, #24]
 80013ac:	793b      	ldrb	r3, [r7, #4]
 80013ae:	461a      	mov	r2, r3
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d3c5      	bcc.n	8001342 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3301      	adds	r3, #1
 80013ba:	61fb      	str	r3, [r7, #28]
 80013bc:	797b      	ldrb	r3, [r7, #5]
 80013be:	461a      	mov	r2, r3
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d3ad      	bcc.n	8001322 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80013c6:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	793a      	ldrb	r2, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	4b03      	ldr	r3, [pc, #12]	@ (80013e0 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0xfc>)
 80013d2:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	@ 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd90      	pop	{r4, r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000494 	.word	0x20000494

080013e4 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	1d38      	adds	r0, r7, #4
 80013ee:	e880 0006 	stmia.w	r0, {r1, r2}
 80013f2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 80013f4:	e017      	b.n	8001426 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR+0x42>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	7818      	ldrb	r0, [r3, #0]
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	1d3a      	adds	r2, r7, #4
 80013fe:	ca06      	ldmia	r2, {r1, r2}
 8001400:	f7ff ff70 	bl	80012e4 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR>
 8001404:	4603      	mov	r3, r0
 8001406:	461a      	mov	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	429a      	cmp	r2, r3
 800140e:	bf14      	ite	ne
 8001410:	2301      	movne	r3, #1
 8001412:	2300      	moveq	r3, #0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR+0x3c>
        {
            // Char could not be written
            return *str;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	e008      	b.n	8001432 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR+0x4e>
        }

        // Next char
        str++;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3301      	adds	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1e3      	bne.n	80013f6 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR+0x12>
    }

    // Everything ok
    return *str;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	781b      	ldrb	r3, [r3, #0]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <_Z17ssd1306_SetCursorhh>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	460a      	mov	r2, r1
 8001446:	71fb      	strb	r3, [r7, #7]
 8001448:	4613      	mov	r3, r2
 800144a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	b29a      	uxth	r2, r3
 8001450:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <_Z17ssd1306_SetCursorhh+0x2c>)
 8001452:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001454:	79bb      	ldrb	r3, [r7, #6]
 8001456:	b29a      	uxth	r2, r3
 8001458:	4b03      	ldr	r3, [pc, #12]	@ (8001468 <_Z17ssd1306_SetCursorhh+0x2c>)
 800145a:	805a      	strh	r2, [r3, #2]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	20000494 	.word	0x20000494

0800146c <_ZN8JOYSTICKC1EP17ADC_HandleTypeDef>:
#include "joystick.h"

JOYSTICK::JOYSTICK(ADC_HandleTypeDef* ptr_adchandle){
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a06      	ldr	r2, [pc, #24]	@ (8001494 <_ZN8JOYSTICKC1EP17ADC_HandleTypeDef+0x28>)
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	605a      	str	r2, [r3, #4]
	adchandle = ptr_adchandle;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	601a      	str	r2, [r3, #0]
}
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	08006a60 	.word	0x08006a60

08001498 <_ZN8JOYSTICK8samplingEv>:

void JOYSTICK::sampling(){
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	for(int i=0; i<2; i++){
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	e01a      	b.n	80014dc <_ZN8JOYSTICK8samplingEv+0x44>
	  HAL_ADC_Start(adchandle);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f001 f89a 	bl	80025e4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(adchandle, 1);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2101      	movs	r1, #1
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 f966 	bl	8002788 <HAL_ADC_PollForConversion>
	  adc_xy[i] = HAL_ADC_GetValue(adchandle);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f001 f9ec 	bl	800289e <HAL_ADC_GetValue>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b299      	uxth	r1, r3
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	460a      	mov	r2, r1
 80014d4:	809a      	strh	r2, [r3, #4]
	for(int i=0; i<2; i++){
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3301      	adds	r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	dde1      	ble.n	80014a6 <_ZN8JOYSTICK8samplingEv+0xe>
	}
}
 80014e2:	bf00      	nop
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <_ZN8JOYSTICK12get_adcValueEPt>:

void JOYSTICK::get_adcValue(uint16_t* adc_array){
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	for(int i=0; i<2; i++){
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	e00c      	b.n	8001516 <_ZN8JOYSTICK12get_adcValueEPt+0x2a>
	  adc_array[i] = adc_xy[i];
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	441a      	add	r2, r3
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	440b      	add	r3, r1
 800150c:	889b      	ldrh	r3, [r3, #4]
 800150e:	8013      	strh	r3, [r2, #0]
	for(int i=0; i<2; i++){
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3301      	adds	r3, #1
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2b01      	cmp	r3, #1
 800151a:	ddef      	ble.n	80014fc <_ZN8JOYSTICK12get_adcValueEPt+0x10>
	}
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	0000      	movs	r0, r0
 800152c:	0000      	movs	r0, r0
	...

08001530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b097      	sub	sp, #92	@ 0x5c
 8001534:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001536:	f000 ff7b 	bl	8002430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800153a:	f000 f9eb 	bl	8001914 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153e:	f000 fb75 	bl	8001c2c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001542:	f000 fb53 	bl	8001bec <_ZL11MX_DMA_Initv>
  MX_USART1_UART_Init();
 8001546:	f000 fb23 	bl	8001b90 <_ZL19MX_USART1_UART_Initv>
  MX_UART5_Init();
 800154a:	f000 faf3 	bl	8001b34 <_ZL13MX_UART5_Initv>
  MX_ADC1_Init();
 800154e:	f000 fa4b 	bl	80019e8 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 8001552:	f000 fabb 	bl	8001acc <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1,rxBuf,128);
 8001556:	2280      	movs	r2, #128	@ 0x80
 8001558:	49af      	ldr	r1, [pc, #700]	@ (8001818 <main+0x2e8>)
 800155a:	48b0      	ldr	r0, [pc, #704]	@ (800181c <main+0x2ec>)
 800155c:	f003 fd0d 	bl	8004f7a <HAL_UART_Receive_DMA>
  JOYSTICK joystick(&hadc1);
 8001560:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001564:	49ae      	ldr	r1, [pc, #696]	@ (8001820 <main+0x2f0>)
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff80 	bl	800146c <_ZN8JOYSTICKC1EP17ADC_HandleTypeDef>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	ssd1306_Init(&hi2c1);
 800156c:	48ad      	ldr	r0, [pc, #692]	@ (8001824 <main+0x2f4>)
 800156e:	f7ff fce3 	bl	8000f38 <_Z12ssd1306_InitP17I2C_HandleTypeDef>
	HAL_Delay(1000);
 8001572:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001576:	f000 ffcd 	bl	8002514 <HAL_Delay>
	ssd1306_Fill(Black);
 800157a:	2000      	movs	r0, #0
 800157c:	f7ff fdfc 	bl	8001178 <_Z12ssd1306_Fill13SSD1306_COLOR>
	ssd1306_UpdateScreen(&hi2c1);
 8001580:	48a8      	ldr	r0, [pc, #672]	@ (8001824 <main+0x2f4>)
 8001582:	f7ff fe1d 	bl	80011c0 <_Z20ssd1306_UpdateScreenP17I2C_HandleTypeDef>

	HAL_Delay(100);
 8001586:	2064      	movs	r0, #100	@ 0x64
 8001588:	f000 ffc4 	bl	8002514 <HAL_Delay>
	ssd1306_SetCursor(7,13);
 800158c:	210d      	movs	r1, #13
 800158e:	2007      	movs	r0, #7
 8001590:	f7ff ff54 	bl	800143c <_Z17ssd1306_SetCursorhh>
	ssd1306_WriteString("Tomoshibi",Font_11x18,White);
 8001594:	4aa4      	ldr	r2, [pc, #656]	@ (8001828 <main+0x2f8>)
 8001596:	2301      	movs	r3, #1
 8001598:	ca06      	ldmia	r2, {r1, r2}
 800159a:	48a4      	ldr	r0, [pc, #656]	@ (800182c <main+0x2fc>)
 800159c:	f7ff ff22 	bl	80013e4 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
	ssd1306_SetCursor(12,33);
 80015a0:	2121      	movs	r1, #33	@ 0x21
 80015a2:	200c      	movs	r0, #12
 80015a4:	f7ff ff4a 	bl	800143c <_Z17ssd1306_SetCursorhh>
	ssd1306_WriteString("Technology",Font_11x18,White);
 80015a8:	4a9f      	ldr	r2, [pc, #636]	@ (8001828 <main+0x2f8>)
 80015aa:	2301      	movs	r3, #1
 80015ac:	ca06      	ldmia	r2, {r1, r2}
 80015ae:	48a0      	ldr	r0, [pc, #640]	@ (8001830 <main+0x300>)
 80015b0:	f7ff ff18 	bl	80013e4 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>

	ssd1306_UpdateScreen(&hi2c1);
 80015b4:	489b      	ldr	r0, [pc, #620]	@ (8001824 <main+0x2f4>)
 80015b6:	f7ff fe03 	bl	80011c0 <_Z20ssd1306_UpdateScreenP17I2C_HandleTypeDef>

	HAL_Delay(1000);
 80015ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015be:	f000 ffa9 	bl	8002514 <HAL_Delay>

  while (1)
  {
	readBuf(&huart1, rxBuf, 128, Data, 4, 0, &p_wrtptA, &p_rdptA, &stop_counterA, &error_counterA, 30);
 80015c2:	231e      	movs	r3, #30
 80015c4:	9306      	str	r3, [sp, #24]
 80015c6:	4b9b      	ldr	r3, [pc, #620]	@ (8001834 <main+0x304>)
 80015c8:	9305      	str	r3, [sp, #20]
 80015ca:	4b9b      	ldr	r3, [pc, #620]	@ (8001838 <main+0x308>)
 80015cc:	9304      	str	r3, [sp, #16]
 80015ce:	4b9b      	ldr	r3, [pc, #620]	@ (800183c <main+0x30c>)
 80015d0:	9303      	str	r3, [sp, #12]
 80015d2:	4b9b      	ldr	r3, [pc, #620]	@ (8001840 <main+0x310>)
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	2300      	movs	r3, #0
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	2304      	movs	r3, #4
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	4b99      	ldr	r3, [pc, #612]	@ (8001844 <main+0x314>)
 80015e0:	2280      	movs	r2, #128	@ 0x80
 80015e2:	498d      	ldr	r1, [pc, #564]	@ (8001818 <main+0x2e8>)
 80015e4:	488d      	ldr	r0, [pc, #564]	@ (800181c <main+0x2ec>)
 80015e6:	f000 fb9b 	bl	8001d20 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h>

	joystick.sampling();
 80015ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ff52 	bl	8001498 <_ZN8JOYSTICK8samplingEv>
	joystick.get_adcValue(adc_value);
 80015f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015f8:	4993      	ldr	r1, [pc, #588]	@ (8001848 <main+0x318>)
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff76 	bl	80014ec <_ZN8JOYSTICK12get_adcValueEPt>

	for(int n=0; n<2; n++){
 8001600:	2300      	movs	r3, #0
 8001602:	637b      	str	r3, [r7, #52]	@ 0x34
 8001604:	e022      	b.n	800164c <main+0x11c>
		if(2000<adc_value[n] && adc_value[n]<2096){
 8001606:	4a90      	ldr	r2, [pc, #576]	@ (8001848 <main+0x318>)
 8001608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800160a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800160e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001612:	d90c      	bls.n	800162e <main+0xfe>
 8001614:	4a8c      	ldr	r2, [pc, #560]	@ (8001848 <main+0x318>)
 8001616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800161c:	f5b3 6f03 	cmp.w	r3, #2096	@ 0x830
 8001620:	d205      	bcs.n	800162e <main+0xfe>
			stick[n] = 0;
 8001622:	4a8a      	ldr	r2, [pc, #552]	@ (800184c <main+0x31c>)
 8001624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001626:	2100      	movs	r1, #0
 8001628:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800162c:	e00b      	b.n	8001646 <main+0x116>
		}else{
			stick[n] = adc_value[n] - 2048;
 800162e:	4a86      	ldr	r2, [pc, #536]	@ (8001848 <main+0x318>)
 8001630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001632:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001636:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800163a:	b29b      	uxth	r3, r3
 800163c:	b219      	sxth	r1, r3
 800163e:	4a83      	ldr	r2, [pc, #524]	@ (800184c <main+0x31c>)
 8001640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001642:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int n=0; n<2; n++){
 8001646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001648:	3301      	adds	r3, #1
 800164a:	637b      	str	r3, [r7, #52]	@ 0x34
 800164c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800164e:	2b01      	cmp	r3, #1
 8001650:	ddd9      	ble.n	8001606 <main+0xd6>
		}
	}
	theta = (atan2(stick[1], stick[0])/3.1415*180.0+180.0) * 255/360;
 8001652:	4b7e      	ldr	r3, [pc, #504]	@ (800184c <main+0x31c>)
 8001654:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001658:	4a7c      	ldr	r2, [pc, #496]	@ (800184c <main+0x31c>)
 800165a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f000 fc74 	bl	8001f4e <_ZSt5atan2IssEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001666:	ec51 0b10 	vmov	r0, r1, d0
 800166a:	a365      	add	r3, pc, #404	@ (adr r3, 8001800 <main+0x2d0>)
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f7ff f904 	bl	800087c <__aeabi_ddiv>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	4b73      	ldr	r3, [pc, #460]	@ (8001850 <main+0x320>)
 8001682:	f7fe ffd1 	bl	8000628 <__aeabi_dmul>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	4b6f      	ldr	r3, [pc, #444]	@ (8001850 <main+0x320>)
 8001694:	f7fe fe12 	bl	80002bc <__adddf3>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	a359      	add	r3, pc, #356	@ (adr r3, 8001808 <main+0x2d8>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	f7fe ffbf 	bl	8000628 <__aeabi_dmul>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	4b67      	ldr	r3, [pc, #412]	@ (8001854 <main+0x324>)
 80016b8:	f7ff f8e0 	bl	800087c <__aeabi_ddiv>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f7ff fa60 	bl	8000b88 <__aeabi_d2iz>
 80016c8:	4603      	mov	r3, r0
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	4b62      	ldr	r3, [pc, #392]	@ (8001858 <main+0x328>)
 80016ce:	801a      	strh	r2, [r3, #0]
	if(stick[0]==0 && stick[1]==0)theta=0;
 80016d0:	4b5e      	ldr	r3, [pc, #376]	@ (800184c <main+0x31c>)
 80016d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d107      	bne.n	80016ea <main+0x1ba>
 80016da:	4b5c      	ldr	r3, [pc, #368]	@ (800184c <main+0x31c>)
 80016dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <main+0x1ba>
 80016e4:	4b5c      	ldr	r3, [pc, #368]	@ (8001858 <main+0x328>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	801a      	strh	r2, [r3, #0]
	if(theta == 250)theta=251;
 80016ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001858 <main+0x328>)
 80016ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f0:	2bfa      	cmp	r3, #250	@ 0xfa
 80016f2:	d102      	bne.n	80016fa <main+0x1ca>
 80016f4:	4b58      	ldr	r3, [pc, #352]	@ (8001858 <main+0x328>)
 80016f6:	22fb      	movs	r2, #251	@ 0xfb
 80016f8:	801a      	strh	r2, [r3, #0]
	radius = sqrt(stick[0]*stick[0] + stick[1]*stick[1]) * 250/2600;
 80016fa:	4b54      	ldr	r3, [pc, #336]	@ (800184c <main+0x31c>)
 80016fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001700:	461a      	mov	r2, r3
 8001702:	4b52      	ldr	r3, [pc, #328]	@ (800184c <main+0x31c>)
 8001704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001708:	fb03 f202 	mul.w	r2, r3, r2
 800170c:	4b4f      	ldr	r3, [pc, #316]	@ (800184c <main+0x31c>)
 800170e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001712:	4619      	mov	r1, r3
 8001714:	4b4d      	ldr	r3, [pc, #308]	@ (800184c <main+0x31c>)
 8001716:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800171a:	fb01 f303 	mul.w	r3, r1, r3
 800171e:	4413      	add	r3, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fc3b 	bl	8001f9c <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001726:	ec51 0b10 	vmov	r0, r1, d0
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	4b4b      	ldr	r3, [pc, #300]	@ (800185c <main+0x32c>)
 8001730:	f7fe ff7a 	bl	8000628 <__aeabi_dmul>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	a334      	add	r3, pc, #208	@ (adr r3, 8001810 <main+0x2e0>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7ff f89b 	bl	800087c <__aeabi_ddiv>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	f7ff fa43 	bl	8000bd8 <__aeabi_d2uiz>
 8001752:	4603      	mov	r3, r0
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4b42      	ldr	r3, [pc, #264]	@ (8001860 <main+0x330>)
 8001758:	701a      	strb	r2, [r3, #0]
	if(radius>255 || radius==250 )radius = 255;
 800175a:	4b41      	ldr	r3, [pc, #260]	@ (8001860 <main+0x330>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2bfa      	cmp	r3, #250	@ 0xfa
 8001760:	d102      	bne.n	8001768 <main+0x238>
 8001762:	4b3f      	ldr	r3, [pc, #252]	@ (8001860 <main+0x330>)
 8001764:	22ff      	movs	r2, #255	@ 0xff
 8001766:	701a      	strb	r2, [r3, #0]

	uint8_t vol = HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_4);
 8001768:	2110      	movs	r1, #16
 800176a:	483e      	ldr	r0, [pc, #248]	@ (8001864 <main+0x334>)
 800176c:	f002 f8e8 	bl	8003940 <HAL_GPIO_ReadPin>
 8001770:	4603      	mov	r3, r0
 8001772:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	mode = vol<<2 | HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15)<<1 | HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_13);
 8001776:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	b25c      	sxtb	r4, r3
 800177e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001782:	4839      	ldr	r0, [pc, #228]	@ (8001868 <main+0x338>)
 8001784:	f002 f8dc 	bl	8003940 <HAL_GPIO_ReadPin>
 8001788:	4603      	mov	r3, r0
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	b25b      	sxtb	r3, r3
 800178e:	4323      	orrs	r3, r4
 8001790:	b25c      	sxtb	r4, r3
 8001792:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001796:	4834      	ldr	r0, [pc, #208]	@ (8001868 <main+0x338>)
 8001798:	f002 f8d2 	bl	8003940 <HAL_GPIO_ReadPin>
 800179c:	4603      	mov	r3, r0
 800179e:	b25b      	sxtb	r3, r3
 80017a0:	4323      	orrs	r3, r4
 80017a2:	b25b      	sxtb	r3, r3
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b31      	ldr	r3, [pc, #196]	@ (800186c <main+0x33c>)
 80017a8:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	char buf[32];
	ssd1306_Fill(Black);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f7ff fce4 	bl	8001178 <_Z12ssd1306_Fill13SSD1306_COLOR>

	ssd1306_SetCursor(0,0);
 80017b0:	2100      	movs	r1, #0
 80017b2:	2000      	movs	r0, #0
 80017b4:	f7ff fe42 	bl	800143c <_Z17ssd1306_SetCursorhh>
    snprintf(buf, sizeof(buf), "t:%3d r:%3d", theta, radius);
 80017b8:	4b27      	ldr	r3, [pc, #156]	@ (8001858 <main+0x328>)
 80017ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017be:	461a      	mov	r2, r3
 80017c0:	4b27      	ldr	r3, [pc, #156]	@ (8001860 <main+0x330>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4638      	mov	r0, r7
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	4613      	mov	r3, r2
 80017ca:	4a29      	ldr	r2, [pc, #164]	@ (8001870 <main+0x340>)
 80017cc:	2120      	movs	r1, #32
 80017ce:	f004 fc85 	bl	80060dc <sniprintf>
	ssd1306_WriteString(buf,Font_11x18,White);
 80017d2:	4a15      	ldr	r2, [pc, #84]	@ (8001828 <main+0x2f8>)
 80017d4:	4638      	mov	r0, r7
 80017d6:	2301      	movs	r3, #1
 80017d8:	ca06      	ldmia	r2, {r1, r2}
 80017da:	f7ff fe03 	bl	80013e4 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>

	ssd1306_SetCursor(0,20);
 80017de:	2114      	movs	r1, #20
 80017e0:	2000      	movs	r0, #0
 80017e2:	f7ff fe2b 	bl	800143c <_Z17ssd1306_SetCursorhh>
//    snprintf(buf, sizeof(buf), "vol:%d", vol);
//	ssd1306_WriteString(buf,Font_11x18,White);
	if(vol==0){
 80017e6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d144      	bne.n	8001878 <main+0x348>
		ssd1306_WriteString("vol:Display",Font_11x18,White);
 80017ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001828 <main+0x2f8>)
 80017f0:	2301      	movs	r3, #1
 80017f2:	ca06      	ldmia	r2, {r1, r2}
 80017f4:	481f      	ldr	r0, [pc, #124]	@ (8001874 <main+0x344>)
 80017f6:	f7ff fdf5 	bl	80013e4 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
 80017fa:	e043      	b.n	8001884 <main+0x354>
 80017fc:	f3af 8000 	nop.w
 8001800:	c083126f 	.word	0xc083126f
 8001804:	400921ca 	.word	0x400921ca
 8001808:	00000000 	.word	0x00000000
 800180c:	406fe000 	.word	0x406fe000
 8001810:	00000000 	.word	0x00000000
 8001814:	40a45000 	.word	0x40a45000
 8001818:	20000630 	.word	0x20000630
 800181c:	20000580 	.word	0x20000580
 8001820:	2000049c 	.word	0x2000049c
 8001824:	200004e4 	.word	0x200004e4
 8001828:	20000000 	.word	0x20000000
 800182c:	08006a64 	.word	0x08006a64
 8001830:	08006a70 	.word	0x08006a70
 8001834:	2000062c 	.word	0x2000062c
 8001838:	2000062a 	.word	0x2000062a
 800183c:	20000629 	.word	0x20000629
 8001840:	20000628 	.word	0x20000628
 8001844:	200006b0 	.word	0x200006b0
 8001848:	200006b4 	.word	0x200006b4
 800184c:	200006b8 	.word	0x200006b8
 8001850:	40668000 	.word	0x40668000
 8001854:	40768000 	.word	0x40768000
 8001858:	200006bc 	.word	0x200006bc
 800185c:	406f4000 	.word	0x406f4000
 8001860:	200006be 	.word	0x200006be
 8001864:	40020800 	.word	0x40020800
 8001868:	40020400 	.word	0x40020400
 800186c:	200006bf 	.word	0x200006bf
 8001870:	08006a7c 	.word	0x08006a7c
 8001874:	08006a88 	.word	0x08006a88
	}else{
		ssd1306_WriteString("vol:Arm",Font_11x18,White);
 8001878:	4a1d      	ldr	r2, [pc, #116]	@ (80018f0 <main+0x3c0>)
 800187a:	2301      	movs	r3, #1
 800187c:	ca06      	ldmia	r2, {r1, r2}
 800187e:	481d      	ldr	r0, [pc, #116]	@ (80018f4 <main+0x3c4>)
 8001880:	f7ff fdb0 	bl	80013e4 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
	}

	ssd1306_SetCursor(0,40);
 8001884:	2128      	movs	r1, #40	@ 0x28
 8001886:	2000      	movs	r0, #0
 8001888:	f7ff fdd8 	bl	800143c <_Z17ssd1306_SetCursorhh>
    snprintf(buf, sizeof(buf), "mode:%d", mode);
 800188c:	4b1a      	ldr	r3, [pc, #104]	@ (80018f8 <main+0x3c8>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4638      	mov	r0, r7
 8001892:	4a1a      	ldr	r2, [pc, #104]	@ (80018fc <main+0x3cc>)
 8001894:	2120      	movs	r1, #32
 8001896:	f004 fc21 	bl	80060dc <sniprintf>
	ssd1306_WriteString(buf,Font_11x18,White);
 800189a:	4a15      	ldr	r2, [pc, #84]	@ (80018f0 <main+0x3c0>)
 800189c:	4638      	mov	r0, r7
 800189e:	2301      	movs	r3, #1
 80018a0:	ca06      	ldmia	r2, {r1, r2}
 80018a2:	f7ff fd9f 	bl	80013e4 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>

	ssd1306_UpdateScreen(&hi2c1);
 80018a6:	4816      	ldr	r0, [pc, #88]	@ (8001900 <main+0x3d0>)
 80018a8:	f7ff fc8a 	bl	80011c0 <_Z20ssd1306_UpdateScreenP17I2C_HandleTypeDef>

	uint8_t send_array[5] = {250,Data[3],theta,radius,mode};//start, h, x, y, mode
 80018ac:	f107 0320 	add.w	r3, r7, #32
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	711a      	strb	r2, [r3, #4]
 80018b6:	23fa      	movs	r3, #250	@ 0xfa
 80018b8:	f887 3020 	strb.w	r3, [r7, #32]
 80018bc:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <main+0x3d4>)
 80018be:	78db      	ldrb	r3, [r3, #3]
 80018c0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 80018c4:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <main+0x3d8>)
 80018c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80018d0:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <main+0x3dc>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80018d8:	4b07      	ldr	r3, [pc, #28]	@ (80018f8 <main+0x3c8>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	HAL_UART_Transmit(&huart5, send_array, 5, 1);
 80018e0:	f107 0120 	add.w	r1, r7, #32
 80018e4:	2301      	movs	r3, #1
 80018e6:	2205      	movs	r2, #5
 80018e8:	4809      	ldr	r0, [pc, #36]	@ (8001910 <main+0x3e0>)
 80018ea:	f003 fabb 	bl	8004e64 <HAL_UART_Transmit>
  }
 80018ee:	e668      	b.n	80015c2 <main+0x92>
 80018f0:	20000000 	.word	0x20000000
 80018f4:	08006a94 	.word	0x08006a94
 80018f8:	200006bf 	.word	0x200006bf
 80018fc:	08006a9c 	.word	0x08006a9c
 8001900:	200004e4 	.word	0x200004e4
 8001904:	200006b0 	.word	0x200006b0
 8001908:	200006bc 	.word	0x200006bc
 800190c:	200006be 	.word	0x200006be
 8001910:	20000538 	.word	0x20000538

08001914 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b094      	sub	sp, #80	@ 0x50
 8001918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	2234      	movs	r2, #52	@ 0x34
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f004 fc0e 	bl	8006144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001928:	f107 0308 	add.w	r3, r7, #8
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	4b28      	ldr	r3, [pc, #160]	@ (80019e0 <_Z18SystemClock_Configv+0xcc>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001940:	4a27      	ldr	r2, [pc, #156]	@ (80019e0 <_Z18SystemClock_Configv+0xcc>)
 8001942:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001946:	6413      	str	r3, [r2, #64]	@ 0x40
 8001948:	4b25      	ldr	r3, [pc, #148]	@ (80019e0 <_Z18SystemClock_Configv+0xcc>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001954:	2300      	movs	r3, #0
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	4b22      	ldr	r3, [pc, #136]	@ (80019e4 <_Z18SystemClock_Configv+0xd0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001960:	4a20      	ldr	r2, [pc, #128]	@ (80019e4 <_Z18SystemClock_Configv+0xd0>)
 8001962:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	4b1e      	ldr	r3, [pc, #120]	@ (80019e4 <_Z18SystemClock_Configv+0xd0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001974:	2302      	movs	r3, #2
 8001976:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001978:	2301      	movs	r3, #1
 800197a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800197c:	2310      	movs	r3, #16
 800197e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001980:	2300      	movs	r3, #0
 8001982:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4618      	mov	r0, r3
 800198a:	f002 ff7d 	bl	8004888 <HAL_RCC_OscConfig>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	bf14      	ite	ne
 8001994:	2301      	movne	r3, #1
 8001996:	2300      	moveq	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 800199e:	f000 fad0 	bl	8001f42 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a2:	230f      	movs	r3, #15
 80019a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019b6:	f107 0308 	add.w	r3, r7, #8
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f002 fc9f 	bl	8004300 <HAL_RCC_ClockConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf14      	ite	ne
 80019c8:	2301      	movne	r3, #1
 80019ca:	2300      	moveq	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 80019d2:	f000 fab6 	bl	8001f42 <Error_Handler>
  }
}
 80019d6:	bf00      	nop
 80019d8:	3750      	adds	r7, #80	@ 0x50
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40007000 	.word	0x40007000

080019e8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ee:	463b      	mov	r3, r7
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019fa:	4b31      	ldr	r3, [pc, #196]	@ (8001ac0 <_ZL12MX_ADC1_Initv+0xd8>)
 80019fc:	4a31      	ldr	r2, [pc, #196]	@ (8001ac4 <_ZL12MX_ADC1_Initv+0xdc>)
 80019fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a00:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a06:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a12:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8001a18:	4b29      	ldr	r3, [pc, #164]	@ (8001ac0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001a20:	4b27      	ldr	r3, [pc, #156]	@ (8001ac0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a26:	4b26      	ldr	r3, [pc, #152]	@ (8001ac0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a2c:	4b24      	ldr	r3, [pc, #144]	@ (8001ac0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001a2e:	4a26      	ldr	r2, [pc, #152]	@ (8001ac8 <_ZL12MX_ADC1_Initv+0xe0>)
 8001a30:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a32:	4b23      	ldr	r3, [pc, #140]	@ (8001ac0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001a38:	4b21      	ldr	r3, [pc, #132]	@ (8001ac0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a3e:	4b20      	ldr	r3, [pc, #128]	@ (8001ac0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001a46:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a4c:	481c      	ldr	r0, [pc, #112]	@ (8001ac0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001a4e:	f000 fd85 	bl	800255c <HAL_ADC_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf14      	ite	ne
 8001a58:	2301      	movne	r3, #1
 8001a5a:	2300      	moveq	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <_ZL12MX_ADC1_Initv+0x7e>
  {
    Error_Handler();
 8001a62:	f000 fa6e 	bl	8001f42 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001a66:	230b      	movs	r3, #11
 8001a68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a72:	463b      	mov	r3, r7
 8001a74:	4619      	mov	r1, r3
 8001a76:	4812      	ldr	r0, [pc, #72]	@ (8001ac0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001a78:	f000 ff1e 	bl	80028b8 <HAL_ADC_ConfigChannel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	bf14      	ite	ne
 8001a82:	2301      	movne	r3, #1
 8001a84:	2300      	moveq	r3, #0
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <_ZL12MX_ADC1_Initv+0xa8>
  {
    Error_Handler();
 8001a8c:	f000 fa59 	bl	8001f42 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001a90:	230c      	movs	r3, #12
 8001a92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001a94:	2302      	movs	r3, #2
 8001a96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a98:	463b      	mov	r3, r7
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4808      	ldr	r0, [pc, #32]	@ (8001ac0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001a9e:	f000 ff0b 	bl	80028b8 <HAL_ADC_ConfigChannel>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf14      	ite	ne
 8001aa8:	2301      	movne	r3, #1
 8001aaa:	2300      	moveq	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <_ZL12MX_ADC1_Initv+0xce>
  {
    Error_Handler();
 8001ab2:	f000 fa46 	bl	8001f42 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	2000049c 	.word	0x2000049c
 8001ac4:	40012000 	.word	0x40012000
 8001ac8:	0f000001 	.word	0x0f000001

08001acc <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ad0:	4b15      	ldr	r3, [pc, #84]	@ (8001b28 <_ZL12MX_I2C1_Initv+0x5c>)
 8001ad2:	4a16      	ldr	r2, [pc, #88]	@ (8001b2c <_ZL12MX_I2C1_Initv+0x60>)
 8001ad4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ad6:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <_ZL12MX_I2C1_Initv+0x5c>)
 8001ad8:	4a15      	ldr	r2, [pc, #84]	@ (8001b30 <_ZL12MX_I2C1_Initv+0x64>)
 8001ada:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <_ZL12MX_I2C1_Initv+0x5c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ae2:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <_ZL12MX_I2C1_Initv+0x5c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <_ZL12MX_I2C1_Initv+0x5c>)
 8001aea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001aee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b28 <_ZL12MX_I2C1_Initv+0x5c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001af6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <_ZL12MX_I2C1_Initv+0x5c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001afc:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <_ZL12MX_I2C1_Initv+0x5c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b02:	4b09      	ldr	r3, [pc, #36]	@ (8001b28 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b08:	4807      	ldr	r0, [pc, #28]	@ (8001b28 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b0a:	f001 ff4b 	bl	80039a4 <HAL_I2C_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	bf14      	ite	ne
 8001b14:	2301      	movne	r3, #1
 8001b16:	2300      	moveq	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001b1e:	f000 fa10 	bl	8001f42 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200004e4 	.word	0x200004e4
 8001b2c:	40005400 	.word	0x40005400
 8001b30:	000186a0 	.word	0x000186a0

08001b34 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001b38:	4b13      	ldr	r3, [pc, #76]	@ (8001b88 <_ZL13MX_UART5_Initv+0x54>)
 8001b3a:	4a14      	ldr	r2, [pc, #80]	@ (8001b8c <_ZL13MX_UART5_Initv+0x58>)
 8001b3c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001b3e:	4b12      	ldr	r3, [pc, #72]	@ (8001b88 <_ZL13MX_UART5_Initv+0x54>)
 8001b40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b44:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001b46:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <_ZL13MX_UART5_Initv+0x54>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b88 <_ZL13MX_UART5_Initv+0x54>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001b52:	4b0d      	ldr	r3, [pc, #52]	@ (8001b88 <_ZL13MX_UART5_Initv+0x54>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001b58:	4b0b      	ldr	r3, [pc, #44]	@ (8001b88 <_ZL13MX_UART5_Initv+0x54>)
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b88 <_ZL13MX_UART5_Initv+0x54>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b64:	4b08      	ldr	r3, [pc, #32]	@ (8001b88 <_ZL13MX_UART5_Initv+0x54>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001b6a:	4807      	ldr	r0, [pc, #28]	@ (8001b88 <_ZL13MX_UART5_Initv+0x54>)
 8001b6c:	f003 f92a 	bl	8004dc4 <HAL_UART_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	bf14      	ite	ne
 8001b76:	2301      	movne	r3, #1
 8001b78:	2300      	moveq	r3, #0
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <_ZL13MX_UART5_Initv+0x50>
  {
    Error_Handler();
 8001b80:	f000 f9df 	bl	8001f42 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000538 	.word	0x20000538
 8001b8c:	40005000 	.word	0x40005000

08001b90 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b94:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b96:	4a14      	ldr	r2, [pc, #80]	@ (8001be8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001b98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b9a:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ba0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba2:	4b10      	ldr	r3, [pc, #64]	@ (8001be4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bae:	4b0d      	ldr	r3, [pc, #52]	@ (8001be4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bba:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc0:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bc6:	4807      	ldr	r0, [pc, #28]	@ (8001be4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bc8:	f003 f8fc 	bl	8004dc4 <HAL_UART_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bf14      	ite	ne
 8001bd2:	2301      	movne	r3, #1
 8001bd4:	2300      	moveq	r3, #0
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001bdc:	f000 f9b1 	bl	8001f42 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000580 	.word	0x20000580
 8001be8:	40011000 	.word	0x40011000

08001bec <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <_ZL11MX_DMA_Initv+0x3c>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	4a0b      	ldr	r2, [pc, #44]	@ (8001c28 <_ZL11MX_DMA_Initv+0x3c>)
 8001bfc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c02:	4b09      	ldr	r3, [pc, #36]	@ (8001c28 <_ZL11MX_DMA_Initv+0x3c>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	203a      	movs	r0, #58	@ 0x3a
 8001c14:	f001 f959 	bl	8002eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001c18:	203a      	movs	r0, #58	@ 0x3a
 8001c1a:	f001 f972 	bl	8002f02 <HAL_NVIC_EnableIRQ>

}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800

08001c2c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	@ 0x28
 8001c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
 8001c40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	4b33      	ldr	r3, [pc, #204]	@ (8001d14 <_ZL12MX_GPIO_Initv+0xe8>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	4a32      	ldr	r2, [pc, #200]	@ (8001d14 <_ZL12MX_GPIO_Initv+0xe8>)
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c52:	4b30      	ldr	r3, [pc, #192]	@ (8001d14 <_ZL12MX_GPIO_Initv+0xe8>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b2c      	ldr	r3, [pc, #176]	@ (8001d14 <_ZL12MX_GPIO_Initv+0xe8>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	4a2b      	ldr	r2, [pc, #172]	@ (8001d14 <_ZL12MX_GPIO_Initv+0xe8>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6e:	4b29      	ldr	r3, [pc, #164]	@ (8001d14 <_ZL12MX_GPIO_Initv+0xe8>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	4b25      	ldr	r3, [pc, #148]	@ (8001d14 <_ZL12MX_GPIO_Initv+0xe8>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	4a24      	ldr	r2, [pc, #144]	@ (8001d14 <_ZL12MX_GPIO_Initv+0xe8>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8a:	4b22      	ldr	r3, [pc, #136]	@ (8001d14 <_ZL12MX_GPIO_Initv+0xe8>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d14 <_ZL12MX_GPIO_Initv+0xe8>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001d14 <_ZL12MX_GPIO_Initv+0xe8>)
 8001ca0:	f043 0308 	orr.w	r3, r3, #8
 8001ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d14 <_ZL12MX_GPIO_Initv+0xe8>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2104      	movs	r1, #4
 8001cb6:	4818      	ldr	r0, [pc, #96]	@ (8001d18 <_ZL12MX_GPIO_Initv+0xec>)
 8001cb8:	f001 fe5a 	bl	8003970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cbc:	2310      	movs	r3, #16
 8001cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4813      	ldr	r0, [pc, #76]	@ (8001d1c <_ZL12MX_GPIO_Initv+0xf0>)
 8001cd0:	f001 fca2 	bl	8003618 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001cd4:	2304      	movs	r3, #4
 8001cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	4619      	mov	r1, r3
 8001cea:	480b      	ldr	r0, [pc, #44]	@ (8001d18 <_ZL12MX_GPIO_Initv+0xec>)
 8001cec:	f001 fc94 	bl	8003618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001cf0:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4619      	mov	r1, r3
 8001d04:	4804      	ldr	r0, [pc, #16]	@ (8001d18 <_ZL12MX_GPIO_Initv+0xec>)
 8001d06:	f001 fc87 	bl	8003618 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d0a:	bf00      	nop
 8001d0c:	3728      	adds	r7, #40	@ 0x28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	40020800 	.word	0x40020800

08001d20 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h>:

/* USER CODE BEGIN 4 */


void readBuf(UART_HandleTypeDef* uart, uint8_t* buf, int buf_size, uint8_t* data, int data_size, uint8_t id, uint8_t* p_wrtpt, uint8_t* p_rdpt, uint16_t* stop_counter, uint16_t* error_counter, uint8_t go_back){
 8001d20:	b480      	push	{r7}
 8001d22:	b08d      	sub	sp, #52	@ 0x34
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	603b      	str	r3, [r7, #0]
	int wrt_pt = uart->hdmarx->Instance->NDTR;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	61bb      	str	r3, [r7, #24]
	wrt_pt= buf_size - wrt_pt;
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	61bb      	str	r3, [r7, #24]
	int rd_pt;

	if(wrt_pt != *p_rdpt){//wrtに追??��?��?付かれてな??��?��?
 8001d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d031      	beq.n	8001db0 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x90>
		if(buf[*p_rdpt] == 255){//p_rdptが書き換えられてな??��?��?=追??��?��?越されてな??��?��?
 8001d4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	4413      	add	r3, r2
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2bff      	cmp	r3, #255	@ 0xff
 8001d5a:	d116      	bne.n	8001d8a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x6a>
			if(wrt_pt != *p_wrtpt){//wrt_ptが�???��?��んだ=受信した
 8001d5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d006      	beq.n	8001d76 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x56>
//正常
				*stop_counter = 0;
 8001d68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	801a      	strh	r2, [r3, #0]
				rd_pt = *p_rdpt;
 8001d6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d74:	e049      	b.n	8001e0a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
			}else{//wrt_ptが�???��?��んでな??��?��?=受信してな??��?��?
//受信してな??��?��?
				(*stop_counter)++;
 8001d76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d80:	801a      	strh	r2, [r3, #0]
				rd_pt = *p_rdpt;
 8001d82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d88:	e03f      	b.n	8001e0a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
			}
		}else{//p_rdptが書き換えられた=追??��?��?越された
//追??��?��?越された
			(*error_counter)++;
 8001d8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d94:	801a      	strh	r2, [r3, #0]
			rd_pt = wrt_pt - go_back;
 8001d96:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if(rd_pt < 0){rd_pt += buf_size;}
 8001da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	da31      	bge.n	8001e0a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
 8001da6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4413      	add	r3, r2
 8001dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dae:	e02c      	b.n	8001e0a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
		}
	}else{//wrtに追??��?��?付かれた,追??��?��?付い??��?��?
		int front_pt = wrt_pt + 1;
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	3301      	adds	r3, #1
 8001db4:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(front_pt>buf_size-1){front_pt -= buf_size;}
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	dc03      	bgt.n	8001dc6 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xa6>
 8001dbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	62bb      	str	r3, [r7, #40]	@ 0x28

		if(buf[front_pt] == 255){
 8001dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	4413      	add	r3, r2
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2bff      	cmp	r3, #255	@ 0xff
 8001dd0:	d109      	bne.n	8001de6 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xc6>
//追??��?��?付い??��?��?
			(*stop_counter)++;
 8001dd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ddc:	801a      	strh	r2, [r3, #0]
			rd_pt = *p_rdpt;
 8001dde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001de4:	e011      	b.n	8001e0a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
		}else{
//追??��?��?付かれた
			(*error_counter)++;
 8001de6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	3301      	adds	r3, #1
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001df0:	801a      	strh	r2, [r3, #0]
			rd_pt = wrt_pt - go_back;
 8001df2:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if(rd_pt < 0){rd_pt += buf_size;}
 8001dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	da03      	bge.n	8001e0a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
 8001e02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4413      	add	r3, r2
 8001e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
	}

	if(*stop_counter > 65500){*stop_counter = 65500;}
 8001e0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d903      	bls.n	8001e1e <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xfe>
 8001e16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e18:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8001e1c:	801a      	strh	r2, [r3, #0]
	if(*error_counter > 65500){*error_counter = 65500;}
 8001e1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d903      	bls.n	8001e32 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x112>
 8001e2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e2c:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8001e30:	801a      	strh	r2, [r3, #0]


	while(1){
		int dif_pt = wrt_pt - rd_pt;
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	627b      	str	r3, [r7, #36]	@ 0x24
			if(dif_pt < 0){dif_pt += buf_size;}
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	da03      	bge.n	8001e48 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x128>
 8001e40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	627b      	str	r3, [r7, #36]	@ 0x24
		if(dif_pt <= go_back/2){break;}
 8001e48:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8001e4c:	085b      	lsrs	r3, r3, #1
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e54:	4293      	cmp	r3, r2
 8001e56:	dd65      	ble.n	8001f24 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x204>

		rd_pt++;
 8001e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(rd_pt>buf_size-1){rd_pt -= buf_size;}
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e62:	429a      	cmp	r2, r3
 8001e64:	dc03      	bgt.n	8001e6e <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x14e>
 8001e66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if(buf[rd_pt] == 250+id){
 8001e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	4413      	add	r3, r2
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001e7c:	33fa      	adds	r3, #250	@ 0xfa
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d14a      	bne.n	8001f18 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1f8>
			int goal_rdpt = rd_pt + data_size;//data_sizeに0はとれな??��?��?,25以上も??��?��???��?��?
 8001e82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e86:	4413      	add	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]

				if(goal_rdpt>buf_size-1){goal_rdpt -= buf_size;}
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	dc03      	bgt.n	8001e9a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x17a>
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	617b      	str	r3, [r7, #20]
			int temp_rdpt = rd_pt;
 8001e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e9c:	623b      	str	r3, [r7, #32]

			buf[rd_pt] = 255;
 8001e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	22ff      	movs	r2, #255	@ 0xff
 8001ea6:	701a      	strb	r2, [r3, #0]

			for(int i=0; i<data_size; i++){
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
 8001eac:	e01a      	b.n	8001ee4 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1c4>
				temp_rdpt += 1;
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	623b      	str	r3, [r7, #32]
					if(temp_rdpt>buf_size-1){temp_rdpt -= buf_size;}
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	dc03      	bgt.n	8001ec4 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1a4>
 8001ebc:	6a3a      	ldr	r2, [r7, #32]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	623b      	str	r3, [r7, #32]

				data[i] = buf[temp_rdpt];
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	441a      	add	r2, r3
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	6839      	ldr	r1, [r7, #0]
 8001ece:	440b      	add	r3, r1
 8001ed0:	7812      	ldrb	r2, [r2, #0]
 8001ed2:	701a      	strb	r2, [r3, #0]
				buf[temp_rdpt] = 255;
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	4413      	add	r3, r2
 8001eda:	22ff      	movs	r2, #255	@ 0xff
 8001edc:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<data_size; i++){
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	61fb      	str	r3, [r7, #28]
 8001ee4:	69fa      	ldr	r2, [r7, #28]
 8001ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	dbe0      	blt.n	8001eae <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x18e>
			}

			rd_pt = temp_rdpt;
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	62fb      	str	r3, [r7, #44]	@ 0x2c

			dif_pt = wrt_pt - rd_pt;
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	627b      	str	r3, [r7, #36]	@ 0x24
				if(dif_pt < 0){dif_pt += buf_size;}
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	da03      	bge.n	8001f06 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1e6>
 8001efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4413      	add	r3, r2
 8001f04:	627b      	str	r3, [r7, #36]	@ 0x24
			if(dif_pt >= buf_size/2){}
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	0fda      	lsrs	r2, r3, #31
 8001f0a:	4413      	add	r3, r2
 8001f0c:	105b      	asrs	r3, r3, #1
 8001f0e:	461a      	mov	r2, r3
 8001f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f12:	4293      	cmp	r3, r2
 8001f14:	da8d      	bge.n	8001e32 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x112>
			else{break;}
 8001f16:	e006      	b.n	8001f26 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x206>
		}else{buf[rd_pt] = 255;}
 8001f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	22ff      	movs	r2, #255	@ 0xff
 8001f20:	701a      	strb	r2, [r3, #0]
	}
 8001f22:	e786      	b.n	8001e32 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x112>
		if(dif_pt <= go_back/2){break;}
 8001f24:	bf00      	nop

	*p_rdpt = rd_pt;
 8001f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f2c:	701a      	strb	r2, [r3, #0]
//	*p_wrtpt = buf_size - (uart->hdmarx->Instance->CNDTR);
	*p_wrtpt = wrt_pt;
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f34:	701a      	strb	r2, [r3, #0]
}
 8001f36:	bf00      	nop
 8001f38:	3734      	adds	r7, #52	@ 0x34
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f46:	b672      	cpsid	i
}
 8001f48:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f4a:	bf00      	nop
 8001f4c:	e7fd      	b.n	8001f4a <Error_Handler+0x8>

08001f4e <_ZSt5atan2IssEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
 8001f4e:	b5b0      	push	{r4, r5, r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	4603      	mov	r3, r0
 8001f56:	460a      	mov	r2, r1
 8001f58:	80fb      	strh	r3, [r7, #6]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	80bb      	strh	r3, [r7, #4]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
 8001f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe faf6 	bl	8000554 <__aeabi_i2d>
 8001f68:	4604      	mov	r4, r0
 8001f6a:	460d      	mov	r5, r1
 8001f6c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe faef 	bl	8000554 <__aeabi_i2d>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	ec43 2b11 	vmov	d1, r2, r3
 8001f7e:	ec45 4b10 	vmov	d0, r4, r5
 8001f82:	f003 fd3b 	bl	80059fc <atan2>
 8001f86:	eeb0 7a40 	vmov.f32	s14, s0
 8001f8a:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001f8e:	eeb0 0a47 	vmov.f32	s0, s14
 8001f92:	eef0 0a67 	vmov.f32	s1, s15
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bdb0      	pop	{r4, r5, r7, pc}

08001f9c <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7fe fad5 	bl	8000554 <__aeabi_i2d>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	ec43 2b10 	vmov	d0, r2, r3
 8001fb2:	f003 fdeb 	bl	8005b8c <sqrt>
 8001fb6:	eeb0 7a40 	vmov.f32	s14, s0
 8001fba:	eef0 7a60 	vmov.f32	s15, s1
 8001fbe:	eeb0 0a47 	vmov.f32	s0, s14
 8001fc2:	eef0 0a67 	vmov.f32	s1, s15
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	607b      	str	r3, [r7, #4]
 8001fd6:	4b10      	ldr	r3, [pc, #64]	@ (8002018 <HAL_MspInit+0x4c>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	4a0f      	ldr	r2, [pc, #60]	@ (8002018 <HAL_MspInit+0x4c>)
 8001fdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8002018 <HAL_MspInit+0x4c>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fea:	607b      	str	r3, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	603b      	str	r3, [r7, #0]
 8001ff2:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <HAL_MspInit+0x4c>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	4a08      	ldr	r2, [pc, #32]	@ (8002018 <HAL_MspInit+0x4c>)
 8001ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ffe:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <HAL_MspInit+0x4c>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800

0800201c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	@ 0x28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a17      	ldr	r2, [pc, #92]	@ (8002098 <HAL_ADC_MspInit+0x7c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d127      	bne.n	800208e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	4b16      	ldr	r3, [pc, #88]	@ (800209c <HAL_ADC_MspInit+0x80>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	4a15      	ldr	r2, [pc, #84]	@ (800209c <HAL_ADC_MspInit+0x80>)
 8002048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800204c:	6453      	str	r3, [r2, #68]	@ 0x44
 800204e:	4b13      	ldr	r3, [pc, #76]	@ (800209c <HAL_ADC_MspInit+0x80>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b0f      	ldr	r3, [pc, #60]	@ (800209c <HAL_ADC_MspInit+0x80>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	4a0e      	ldr	r2, [pc, #56]	@ (800209c <HAL_ADC_MspInit+0x80>)
 8002064:	f043 0304 	orr.w	r3, r3, #4
 8002068:	6313      	str	r3, [r2, #48]	@ 0x30
 800206a:	4b0c      	ldr	r3, [pc, #48]	@ (800209c <HAL_ADC_MspInit+0x80>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002076:	2306      	movs	r3, #6
 8002078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800207a:	2303      	movs	r3, #3
 800207c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002082:	f107 0314 	add.w	r3, r7, #20
 8002086:	4619      	mov	r1, r3
 8002088:	4805      	ldr	r0, [pc, #20]	@ (80020a0 <HAL_ADC_MspInit+0x84>)
 800208a:	f001 fac5 	bl	8003618 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800208e:	bf00      	nop
 8002090:	3728      	adds	r7, #40	@ 0x28
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40012000 	.word	0x40012000
 800209c:	40023800 	.word	0x40023800
 80020a0:	40020800 	.word	0x40020800

080020a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	@ 0x28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a19      	ldr	r2, [pc, #100]	@ (8002128 <HAL_I2C_MspInit+0x84>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d12c      	bne.n	8002120 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	4b18      	ldr	r3, [pc, #96]	@ (800212c <HAL_I2C_MspInit+0x88>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	4a17      	ldr	r2, [pc, #92]	@ (800212c <HAL_I2C_MspInit+0x88>)
 80020d0:	f043 0302 	orr.w	r3, r3, #2
 80020d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d6:	4b15      	ldr	r3, [pc, #84]	@ (800212c <HAL_I2C_MspInit+0x88>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80020e2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80020e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020e8:	2312      	movs	r3, #18
 80020ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f0:	2303      	movs	r3, #3
 80020f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020f4:	2304      	movs	r3, #4
 80020f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	4619      	mov	r1, r3
 80020fe:	480c      	ldr	r0, [pc, #48]	@ (8002130 <HAL_I2C_MspInit+0x8c>)
 8002100:	f001 fa8a 	bl	8003618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	4b08      	ldr	r3, [pc, #32]	@ (800212c <HAL_I2C_MspInit+0x88>)
 800210a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210c:	4a07      	ldr	r2, [pc, #28]	@ (800212c <HAL_I2C_MspInit+0x88>)
 800210e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002112:	6413      	str	r3, [r2, #64]	@ 0x40
 8002114:	4b05      	ldr	r3, [pc, #20]	@ (800212c <HAL_I2C_MspInit+0x88>)
 8002116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002118:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002120:	bf00      	nop
 8002122:	3728      	adds	r7, #40	@ 0x28
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40005400 	.word	0x40005400
 800212c:	40023800 	.word	0x40023800
 8002130:	40020400 	.word	0x40020400

08002134 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08c      	sub	sp, #48	@ 0x30
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213c:	f107 031c 	add.w	r3, r7, #28
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a59      	ldr	r2, [pc, #356]	@ (80022b8 <HAL_UART_MspInit+0x184>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d14b      	bne.n	80021ee <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
 800215a:	4b58      	ldr	r3, [pc, #352]	@ (80022bc <HAL_UART_MspInit+0x188>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	4a57      	ldr	r2, [pc, #348]	@ (80022bc <HAL_UART_MspInit+0x188>)
 8002160:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002164:	6413      	str	r3, [r2, #64]	@ 0x40
 8002166:	4b55      	ldr	r3, [pc, #340]	@ (80022bc <HAL_UART_MspInit+0x188>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	4b51      	ldr	r3, [pc, #324]	@ (80022bc <HAL_UART_MspInit+0x188>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	4a50      	ldr	r2, [pc, #320]	@ (80022bc <HAL_UART_MspInit+0x188>)
 800217c:	f043 0304 	orr.w	r3, r3, #4
 8002180:	6313      	str	r3, [r2, #48]	@ 0x30
 8002182:	4b4e      	ldr	r3, [pc, #312]	@ (80022bc <HAL_UART_MspInit+0x188>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	4b4a      	ldr	r3, [pc, #296]	@ (80022bc <HAL_UART_MspInit+0x188>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	4a49      	ldr	r2, [pc, #292]	@ (80022bc <HAL_UART_MspInit+0x188>)
 8002198:	f043 0308 	orr.w	r3, r3, #8
 800219c:	6313      	str	r3, [r2, #48]	@ 0x30
 800219e:	4b47      	ldr	r3, [pc, #284]	@ (80022bc <HAL_UART_MspInit+0x188>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = TWE_TX_Pin;
 80021aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	2302      	movs	r3, #2
 80021b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b8:	2303      	movs	r3, #3
 80021ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80021bc:	2308      	movs	r3, #8
 80021be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TWE_TX_GPIO_Port, &GPIO_InitStruct);
 80021c0:	f107 031c 	add.w	r3, r7, #28
 80021c4:	4619      	mov	r1, r3
 80021c6:	483e      	ldr	r0, [pc, #248]	@ (80022c0 <HAL_UART_MspInit+0x18c>)
 80021c8:	f001 fa26 	bl	8003618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TWE_RX_Pin;
 80021cc:	2304      	movs	r3, #4
 80021ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d8:	2303      	movs	r3, #3
 80021da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80021dc:	2308      	movs	r3, #8
 80021de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TWE_RX_GPIO_Port, &GPIO_InitStruct);
 80021e0:	f107 031c 	add.w	r3, r7, #28
 80021e4:	4619      	mov	r1, r3
 80021e6:	4837      	ldr	r0, [pc, #220]	@ (80022c4 <HAL_UART_MspInit+0x190>)
 80021e8:	f001 fa16 	bl	8003618 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021ec:	e060      	b.n	80022b0 <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==USART1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a35      	ldr	r2, [pc, #212]	@ (80022c8 <HAL_UART_MspInit+0x194>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d15b      	bne.n	80022b0 <HAL_UART_MspInit+0x17c>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	4b2f      	ldr	r3, [pc, #188]	@ (80022bc <HAL_UART_MspInit+0x188>)
 80021fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002200:	4a2e      	ldr	r2, [pc, #184]	@ (80022bc <HAL_UART_MspInit+0x188>)
 8002202:	f043 0310 	orr.w	r3, r3, #16
 8002206:	6453      	str	r3, [r2, #68]	@ 0x44
 8002208:	4b2c      	ldr	r3, [pc, #176]	@ (80022bc <HAL_UART_MspInit+0x188>)
 800220a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220c:	f003 0310 	and.w	r3, r3, #16
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002214:	2300      	movs	r3, #0
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	4b28      	ldr	r3, [pc, #160]	@ (80022bc <HAL_UART_MspInit+0x188>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221c:	4a27      	ldr	r2, [pc, #156]	@ (80022bc <HAL_UART_MspInit+0x188>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6313      	str	r3, [r2, #48]	@ 0x30
 8002224:	4b25      	ldr	r3, [pc, #148]	@ (80022bc <HAL_UART_MspInit+0x188>)
 8002226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
 8002230:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223e:	2303      	movs	r3, #3
 8002240:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002242:	2307      	movs	r3, #7
 8002244:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002246:	f107 031c 	add.w	r3, r7, #28
 800224a:	4619      	mov	r1, r3
 800224c:	481f      	ldr	r0, [pc, #124]	@ (80022cc <HAL_UART_MspInit+0x198>)
 800224e:	f001 f9e3 	bl	8003618 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002252:	4b1f      	ldr	r3, [pc, #124]	@ (80022d0 <HAL_UART_MspInit+0x19c>)
 8002254:	4a1f      	ldr	r2, [pc, #124]	@ (80022d4 <HAL_UART_MspInit+0x1a0>)
 8002256:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002258:	4b1d      	ldr	r3, [pc, #116]	@ (80022d0 <HAL_UART_MspInit+0x19c>)
 800225a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800225e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002260:	4b1b      	ldr	r3, [pc, #108]	@ (80022d0 <HAL_UART_MspInit+0x19c>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002266:	4b1a      	ldr	r3, [pc, #104]	@ (80022d0 <HAL_UART_MspInit+0x19c>)
 8002268:	2200      	movs	r2, #0
 800226a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800226c:	4b18      	ldr	r3, [pc, #96]	@ (80022d0 <HAL_UART_MspInit+0x19c>)
 800226e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002272:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002274:	4b16      	ldr	r3, [pc, #88]	@ (80022d0 <HAL_UART_MspInit+0x19c>)
 8002276:	2200      	movs	r2, #0
 8002278:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800227a:	4b15      	ldr	r3, [pc, #84]	@ (80022d0 <HAL_UART_MspInit+0x19c>)
 800227c:	2200      	movs	r2, #0
 800227e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002280:	4b13      	ldr	r3, [pc, #76]	@ (80022d0 <HAL_UART_MspInit+0x19c>)
 8002282:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002286:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002288:	4b11      	ldr	r3, [pc, #68]	@ (80022d0 <HAL_UART_MspInit+0x19c>)
 800228a:	2200      	movs	r2, #0
 800228c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800228e:	4b10      	ldr	r3, [pc, #64]	@ (80022d0 <HAL_UART_MspInit+0x19c>)
 8002290:	2200      	movs	r2, #0
 8002292:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002294:	480e      	ldr	r0, [pc, #56]	@ (80022d0 <HAL_UART_MspInit+0x19c>)
 8002296:	f000 fe4f 	bl	8002f38 <HAL_DMA_Init>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_UART_MspInit+0x170>
      Error_Handler();
 80022a0:	f7ff fe4f 	bl	8001f42 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a0a      	ldr	r2, [pc, #40]	@ (80022d0 <HAL_UART_MspInit+0x19c>)
 80022a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80022aa:	4a09      	ldr	r2, [pc, #36]	@ (80022d0 <HAL_UART_MspInit+0x19c>)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80022b0:	bf00      	nop
 80022b2:	3730      	adds	r7, #48	@ 0x30
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40005000 	.word	0x40005000
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40020800 	.word	0x40020800
 80022c4:	40020c00 	.word	0x40020c00
 80022c8:	40011000 	.word	0x40011000
 80022cc:	40020000 	.word	0x40020000
 80022d0:	200005c8 	.word	0x200005c8
 80022d4:	40026440 	.word	0x40026440

080022d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022dc:	bf00      	nop
 80022de:	e7fd      	b.n	80022dc <NMI_Handler+0x4>

080022e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <HardFault_Handler+0x4>

080022e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022ec:	bf00      	nop
 80022ee:	e7fd      	b.n	80022ec <MemManage_Handler+0x4>

080022f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022f4:	bf00      	nop
 80022f6:	e7fd      	b.n	80022f4 <BusFault_Handler+0x4>

080022f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022fc:	bf00      	nop
 80022fe:	e7fd      	b.n	80022fc <UsageFault_Handler+0x4>

08002300 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800232e:	f000 f8d1 	bl	80024d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800233c:	4802      	ldr	r0, [pc, #8]	@ (8002348 <DMA2_Stream2_IRQHandler+0x10>)
 800233e:	f000 ff01 	bl	8003144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	200005c8 	.word	0x200005c8

0800234c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002354:	4a14      	ldr	r2, [pc, #80]	@ (80023a8 <_sbrk+0x5c>)
 8002356:	4b15      	ldr	r3, [pc, #84]	@ (80023ac <_sbrk+0x60>)
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002360:	4b13      	ldr	r3, [pc, #76]	@ (80023b0 <_sbrk+0x64>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d102      	bne.n	800236e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002368:	4b11      	ldr	r3, [pc, #68]	@ (80023b0 <_sbrk+0x64>)
 800236a:	4a12      	ldr	r2, [pc, #72]	@ (80023b4 <_sbrk+0x68>)
 800236c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800236e:	4b10      	ldr	r3, [pc, #64]	@ (80023b0 <_sbrk+0x64>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	429a      	cmp	r2, r3
 800237a:	d207      	bcs.n	800238c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800237c:	f003 feea 	bl	8006154 <__errno>
 8002380:	4603      	mov	r3, r0
 8002382:	220c      	movs	r2, #12
 8002384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002386:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800238a:	e009      	b.n	80023a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800238c:	4b08      	ldr	r3, [pc, #32]	@ (80023b0 <_sbrk+0x64>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002392:	4b07      	ldr	r3, [pc, #28]	@ (80023b0 <_sbrk+0x64>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	4a05      	ldr	r2, [pc, #20]	@ (80023b0 <_sbrk+0x64>)
 800239c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800239e:	68fb      	ldr	r3, [r7, #12]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20020000 	.word	0x20020000
 80023ac:	00000400 	.word	0x00000400
 80023b0:	200006c0 	.word	0x200006c0
 80023b4:	20000810 	.word	0x20000810

080023b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023bc:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <SystemInit+0x20>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c2:	4a05      	ldr	r2, [pc, #20]	@ (80023d8 <SystemInit+0x20>)
 80023c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002414 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023e0:	f7ff ffea 	bl	80023b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023e4:	480c      	ldr	r0, [pc, #48]	@ (8002418 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023e6:	490d      	ldr	r1, [pc, #52]	@ (800241c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002420 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023ec:	e002      	b.n	80023f4 <LoopCopyDataInit>

080023ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023f2:	3304      	adds	r3, #4

080023f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f8:	d3f9      	bcc.n	80023ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002424 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002428 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002400:	e001      	b.n	8002406 <LoopFillZerobss>

08002402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002404:	3204      	adds	r2, #4

08002406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002408:	d3fb      	bcc.n	8002402 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800240a:	f003 fea9 	bl	8006160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800240e:	f7ff f88f 	bl	8001530 <main>
  bx  lr    
 8002412:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002414:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800241c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002420:	080078d4 	.word	0x080078d4
  ldr r2, =_sbss
 8002424:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002428:	20000810 	.word	0x20000810

0800242c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800242c:	e7fe      	b.n	800242c <ADC_IRQHandler>
	...

08002430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002434:	4b0e      	ldr	r3, [pc, #56]	@ (8002470 <HAL_Init+0x40>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0d      	ldr	r2, [pc, #52]	@ (8002470 <HAL_Init+0x40>)
 800243a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800243e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002440:	4b0b      	ldr	r3, [pc, #44]	@ (8002470 <HAL_Init+0x40>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0a      	ldr	r2, [pc, #40]	@ (8002470 <HAL_Init+0x40>)
 8002446:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800244a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800244c:	4b08      	ldr	r3, [pc, #32]	@ (8002470 <HAL_Init+0x40>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a07      	ldr	r2, [pc, #28]	@ (8002470 <HAL_Init+0x40>)
 8002452:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002456:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002458:	2003      	movs	r0, #3
 800245a:	f000 fd2b 	bl	8002eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800245e:	200f      	movs	r0, #15
 8002460:	f000 f808 	bl	8002474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002464:	f7ff fdb2 	bl	8001fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023c00 	.word	0x40023c00

08002474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800247c:	4b12      	ldr	r3, [pc, #72]	@ (80024c8 <HAL_InitTick+0x54>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b12      	ldr	r3, [pc, #72]	@ (80024cc <HAL_InitTick+0x58>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4619      	mov	r1, r3
 8002486:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800248a:	fbb3 f3f1 	udiv	r3, r3, r1
 800248e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fd43 	bl	8002f1e <HAL_SYSTICK_Config>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e00e      	b.n	80024c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b0f      	cmp	r3, #15
 80024a6:	d80a      	bhi.n	80024be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a8:	2200      	movs	r2, #0
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024b0:	f000 fd0b 	bl	8002eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024b4:	4a06      	ldr	r2, [pc, #24]	@ (80024d0 <HAL_InitTick+0x5c>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e000      	b.n	80024c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000008 	.word	0x20000008
 80024cc:	20000010 	.word	0x20000010
 80024d0:	2000000c 	.word	0x2000000c

080024d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d8:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_IncTick+0x20>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	4b06      	ldr	r3, [pc, #24]	@ (80024f8 <HAL_IncTick+0x24>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	4a04      	ldr	r2, [pc, #16]	@ (80024f8 <HAL_IncTick+0x24>)
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000010 	.word	0x20000010
 80024f8:	200006c4 	.word	0x200006c4

080024fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002500:	4b03      	ldr	r3, [pc, #12]	@ (8002510 <HAL_GetTick+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	200006c4 	.word	0x200006c4

08002514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800251c:	f7ff ffee 	bl	80024fc <HAL_GetTick>
 8002520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800252c:	d005      	beq.n	800253a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800252e:	4b0a      	ldr	r3, [pc, #40]	@ (8002558 <HAL_Delay+0x44>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4413      	add	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800253a:	bf00      	nop
 800253c:	f7ff ffde 	bl	80024fc <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	429a      	cmp	r2, r3
 800254a:	d8f7      	bhi.n	800253c <HAL_Delay+0x28>
  {
  }
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000010 	.word	0x20000010

0800255c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e033      	b.n	80025da <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	2b00      	cmp	r3, #0
 8002578:	d109      	bne.n	800258e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff fd4e 	bl	800201c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b00      	cmp	r3, #0
 8002598:	d118      	bne.n	80025cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80025a2:	f023 0302 	bic.w	r3, r3, #2
 80025a6:	f043 0202 	orr.w	r2, r3, #2
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fab4 	bl	8002b1c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	f023 0303 	bic.w	r3, r3, #3
 80025c2:	f043 0201 	orr.w	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80025ca:	e001      	b.n	80025d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d101      	bne.n	80025fe <HAL_ADC_Start+0x1a>
 80025fa:	2302      	movs	r3, #2
 80025fc:	e0b2      	b.n	8002764 <HAL_ADC_Start+0x180>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b01      	cmp	r3, #1
 8002612:	d018      	beq.n	8002646 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002624:	4b52      	ldr	r3, [pc, #328]	@ (8002770 <HAL_ADC_Start+0x18c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a52      	ldr	r2, [pc, #328]	@ (8002774 <HAL_ADC_Start+0x190>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	0c9a      	lsrs	r2, r3, #18
 8002630:	4613      	mov	r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	4413      	add	r3, r2
 8002636:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002638:	e002      	b.n	8002640 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	3b01      	subs	r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f9      	bne.n	800263a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b01      	cmp	r3, #1
 8002652:	d17a      	bne.n	800274a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800265c:	f023 0301 	bic.w	r3, r3, #1
 8002660:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800267e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800268e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002692:	d106      	bne.n	80026a2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002698:	f023 0206 	bic.w	r2, r3, #6
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	645a      	str	r2, [r3, #68]	@ 0x44
 80026a0:	e002      	b.n	80026a8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026b0:	4b31      	ldr	r3, [pc, #196]	@ (8002778 <HAL_ADC_Start+0x194>)
 80026b2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80026bc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d12a      	bne.n	8002720 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a2b      	ldr	r2, [pc, #172]	@ (800277c <HAL_ADC_Start+0x198>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d015      	beq.n	8002700 <HAL_ADC_Start+0x11c>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a29      	ldr	r2, [pc, #164]	@ (8002780 <HAL_ADC_Start+0x19c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d105      	bne.n	80026ea <HAL_ADC_Start+0x106>
 80026de:	4b26      	ldr	r3, [pc, #152]	@ (8002778 <HAL_ADC_Start+0x194>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 031f 	and.w	r3, r3, #31
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a25      	ldr	r2, [pc, #148]	@ (8002784 <HAL_ADC_Start+0x1a0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d136      	bne.n	8002762 <HAL_ADC_Start+0x17e>
 80026f4:	4b20      	ldr	r3, [pc, #128]	@ (8002778 <HAL_ADC_Start+0x194>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 0310 	and.w	r3, r3, #16
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d130      	bne.n	8002762 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d129      	bne.n	8002762 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800271c:	609a      	str	r2, [r3, #8]
 800271e:	e020      	b.n	8002762 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a15      	ldr	r2, [pc, #84]	@ (800277c <HAL_ADC_Start+0x198>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d11b      	bne.n	8002762 <HAL_ADC_Start+0x17e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d114      	bne.n	8002762 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	e00b      	b.n	8002762 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	f043 0210 	orr.w	r2, r3, #16
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275a:	f043 0201 	orr.w	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	20000008 	.word	0x20000008
 8002774:	431bde83 	.word	0x431bde83
 8002778:	40012300 	.word	0x40012300
 800277c:	40012000 	.word	0x40012000
 8002780:	40012100 	.word	0x40012100
 8002784:	40012200 	.word	0x40012200

08002788 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027a4:	d113      	bne.n	80027ce <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027b4:	d10b      	bne.n	80027ce <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	f043 0220 	orr.w	r2, r3, #32
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e063      	b.n	8002896 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80027ce:	f7ff fe95 	bl	80024fc <HAL_GetTick>
 80027d2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027d4:	e021      	b.n	800281a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027dc:	d01d      	beq.n	800281a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d007      	beq.n	80027f4 <HAL_ADC_PollForConversion+0x6c>
 80027e4:	f7ff fe8a 	bl	80024fc <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d212      	bcs.n	800281a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d00b      	beq.n	800281a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	f043 0204 	orr.w	r2, r3, #4
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e03d      	b.n	8002896 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b02      	cmp	r3, #2
 8002826:	d1d6      	bne.n	80027d6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0212 	mvn.w	r2, #18
 8002830:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d123      	bne.n	8002894 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002850:	2b00      	cmp	r3, #0
 8002852:	d11f      	bne.n	8002894 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800285e:	2b00      	cmp	r3, #0
 8002860:	d006      	beq.n	8002870 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800286c:	2b00      	cmp	r3, #0
 800286e:	d111      	bne.n	8002894 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002874:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002880:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d105      	bne.n	8002894 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288c:	f043 0201 	orr.w	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x1c>
 80028d0:	2302      	movs	r3, #2
 80028d2:	e113      	b.n	8002afc <HAL_ADC_ConfigChannel+0x244>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b09      	cmp	r3, #9
 80028e2:	d925      	bls.n	8002930 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68d9      	ldr	r1, [r3, #12]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	4613      	mov	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4413      	add	r3, r2
 80028f8:	3b1e      	subs	r3, #30
 80028fa:	2207      	movs	r2, #7
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43da      	mvns	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	400a      	ands	r2, r1
 8002908:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68d9      	ldr	r1, [r3, #12]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	4618      	mov	r0, r3
 800291c:	4603      	mov	r3, r0
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4403      	add	r3, r0
 8002922:	3b1e      	subs	r3, #30
 8002924:	409a      	lsls	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	e022      	b.n	8002976 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6919      	ldr	r1, [r3, #16]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	b29b      	uxth	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	4613      	mov	r3, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	4413      	add	r3, r2
 8002944:	2207      	movs	r2, #7
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43da      	mvns	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	400a      	ands	r2, r1
 8002952:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6919      	ldr	r1, [r3, #16]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	b29b      	uxth	r3, r3
 8002964:	4618      	mov	r0, r3
 8002966:	4603      	mov	r3, r0
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	4403      	add	r3, r0
 800296c:	409a      	lsls	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b06      	cmp	r3, #6
 800297c:	d824      	bhi.n	80029c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	3b05      	subs	r3, #5
 8002990:	221f      	movs	r2, #31
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43da      	mvns	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	400a      	ands	r2, r1
 800299e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	4618      	mov	r0, r3
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	3b05      	subs	r3, #5
 80029ba:	fa00 f203 	lsl.w	r2, r0, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80029c6:	e04c      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b0c      	cmp	r3, #12
 80029ce:	d824      	bhi.n	8002a1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	3b23      	subs	r3, #35	@ 0x23
 80029e2:	221f      	movs	r2, #31
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43da      	mvns	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	400a      	ands	r2, r1
 80029f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	4618      	mov	r0, r3
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	3b23      	subs	r3, #35	@ 0x23
 8002a0c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a18:	e023      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	3b41      	subs	r3, #65	@ 0x41
 8002a2c:	221f      	movs	r2, #31
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43da      	mvns	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	400a      	ands	r2, r1
 8002a3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	4618      	mov	r0, r3
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	3b41      	subs	r3, #65	@ 0x41
 8002a56:	fa00 f203 	lsl.w	r2, r0, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a62:	4b29      	ldr	r3, [pc, #164]	@ (8002b08 <HAL_ADC_ConfigChannel+0x250>)
 8002a64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a28      	ldr	r2, [pc, #160]	@ (8002b0c <HAL_ADC_ConfigChannel+0x254>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d10f      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x1d8>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b12      	cmp	r3, #18
 8002a76:	d10b      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1d      	ldr	r2, [pc, #116]	@ (8002b0c <HAL_ADC_ConfigChannel+0x254>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d12b      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x23a>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002b10 <HAL_ADC_ConfigChannel+0x258>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d003      	beq.n	8002aac <HAL_ADC_ConfigChannel+0x1f4>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b11      	cmp	r3, #17
 8002aaa:	d122      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a11      	ldr	r2, [pc, #68]	@ (8002b10 <HAL_ADC_ConfigChannel+0x258>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d111      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ace:	4b11      	ldr	r3, [pc, #68]	@ (8002b14 <HAL_ADC_ConfigChannel+0x25c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a11      	ldr	r2, [pc, #68]	@ (8002b18 <HAL_ADC_ConfigChannel+0x260>)
 8002ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad8:	0c9a      	lsrs	r2, r3, #18
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ae4:	e002      	b.n	8002aec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f9      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	40012300 	.word	0x40012300
 8002b0c:	40012000 	.word	0x40012000
 8002b10:	10000012 	.word	0x10000012
 8002b14:	20000008 	.word	0x20000008
 8002b18:	431bde83 	.word	0x431bde83

08002b1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b24:	4b79      	ldr	r3, [pc, #484]	@ (8002d0c <ADC_Init+0x1f0>)
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6859      	ldr	r1, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	021a      	lsls	r2, r3, #8
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002b74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6859      	ldr	r1, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6899      	ldr	r1, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bae:	4a58      	ldr	r2, [pc, #352]	@ (8002d10 <ADC_Init+0x1f4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d022      	beq.n	8002bfa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002bc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6899      	ldr	r1, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002be4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6899      	ldr	r1, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	e00f      	b.n	8002c1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c18:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0202 	bic.w	r2, r2, #2
 8002c28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6899      	ldr	r1, [r3, #8]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	7e1b      	ldrb	r3, [r3, #24]
 8002c34:	005a      	lsls	r2, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d01b      	beq.n	8002c80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c56:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002c66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6859      	ldr	r1, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c72:	3b01      	subs	r3, #1
 8002c74:	035a      	lsls	r2, r3, #13
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	e007      	b.n	8002c90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c8e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	051a      	lsls	r2, r3, #20
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002cc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6899      	ldr	r1, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002cd2:	025a      	lsls	r2, r3, #9
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6899      	ldr	r1, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	029a      	lsls	r2, r3, #10
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	609a      	str	r2, [r3, #8]
}
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	40012300 	.word	0x40012300
 8002d10:	0f000001 	.word	0x0f000001

08002d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d24:	4b0c      	ldr	r3, [pc, #48]	@ (8002d58 <__NVIC_SetPriorityGrouping+0x44>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d30:	4013      	ands	r3, r2
 8002d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d46:	4a04      	ldr	r2, [pc, #16]	@ (8002d58 <__NVIC_SetPriorityGrouping+0x44>)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	60d3      	str	r3, [r2, #12]
}
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d60:	4b04      	ldr	r3, [pc, #16]	@ (8002d74 <__NVIC_GetPriorityGrouping+0x18>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	0a1b      	lsrs	r3, r3, #8
 8002d66:	f003 0307 	and.w	r3, r3, #7
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	db0b      	blt.n	8002da2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	f003 021f 	and.w	r2, r3, #31
 8002d90:	4907      	ldr	r1, [pc, #28]	@ (8002db0 <__NVIC_EnableIRQ+0x38>)
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	2001      	movs	r0, #1
 8002d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	e000e100 	.word	0xe000e100

08002db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	6039      	str	r1, [r7, #0]
 8002dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	db0a      	blt.n	8002dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	490c      	ldr	r1, [pc, #48]	@ (8002e00 <__NVIC_SetPriority+0x4c>)
 8002dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd2:	0112      	lsls	r2, r2, #4
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ddc:	e00a      	b.n	8002df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	4908      	ldr	r1, [pc, #32]	@ (8002e04 <__NVIC_SetPriority+0x50>)
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	3b04      	subs	r3, #4
 8002dec:	0112      	lsls	r2, r2, #4
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	440b      	add	r3, r1
 8002df2:	761a      	strb	r2, [r3, #24]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	e000e100 	.word	0xe000e100
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b089      	sub	sp, #36	@ 0x24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f1c3 0307 	rsb	r3, r3, #7
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	bf28      	it	cs
 8002e26:	2304      	movcs	r3, #4
 8002e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	2b06      	cmp	r3, #6
 8002e30:	d902      	bls.n	8002e38 <NVIC_EncodePriority+0x30>
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	3b03      	subs	r3, #3
 8002e36:	e000      	b.n	8002e3a <NVIC_EncodePriority+0x32>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43da      	mvns	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5a:	43d9      	mvns	r1, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e60:	4313      	orrs	r3, r2
         );
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3724      	adds	r7, #36	@ 0x24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e80:	d301      	bcc.n	8002e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e82:	2301      	movs	r3, #1
 8002e84:	e00f      	b.n	8002ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e86:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb0 <SysTick_Config+0x40>)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e8e:	210f      	movs	r1, #15
 8002e90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e94:	f7ff ff8e 	bl	8002db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e98:	4b05      	ldr	r3, [pc, #20]	@ (8002eb0 <SysTick_Config+0x40>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e9e:	4b04      	ldr	r3, [pc, #16]	@ (8002eb0 <SysTick_Config+0x40>)
 8002ea0:	2207      	movs	r2, #7
 8002ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	e000e010 	.word	0xe000e010

08002eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff ff29 	bl	8002d14 <__NVIC_SetPriorityGrouping>
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b086      	sub	sp, #24
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002edc:	f7ff ff3e 	bl	8002d5c <__NVIC_GetPriorityGrouping>
 8002ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	6978      	ldr	r0, [r7, #20]
 8002ee8:	f7ff ff8e 	bl	8002e08 <NVIC_EncodePriority>
 8002eec:	4602      	mov	r2, r0
 8002eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff5d 	bl	8002db4 <__NVIC_SetPriority>
}
 8002efa:	bf00      	nop
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	4603      	mov	r3, r0
 8002f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff ff31 	bl	8002d78 <__NVIC_EnableIRQ>
}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b082      	sub	sp, #8
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7ff ffa2 	bl	8002e70 <SysTick_Config>
 8002f2c:	4603      	mov	r3, r0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f44:	f7ff fada 	bl	80024fc <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e099      	b.n	8003088 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0201 	bic.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f74:	e00f      	b.n	8002f96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f76:	f7ff fac1 	bl	80024fc <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b05      	cmp	r3, #5
 8002f82:	d908      	bls.n	8002f96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e078      	b.n	8003088 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1e8      	bne.n	8002f76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	4b38      	ldr	r3, [pc, #224]	@ (8003090 <HAL_DMA_Init+0x158>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d107      	bne.n	8003000 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f023 0307 	bic.w	r3, r3, #7
 8003016:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003026:	2b04      	cmp	r3, #4
 8003028:	d117      	bne.n	800305a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00e      	beq.n	800305a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fa6f 	bl	8003520 <DMA_CheckFifoParam>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2240      	movs	r2, #64	@ 0x40
 800304c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003056:	2301      	movs	r3, #1
 8003058:	e016      	b.n	8003088 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 fa26 	bl	80034b4 <DMA_CalcBaseAndBitshift>
 8003068:	4603      	mov	r3, r0
 800306a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003070:	223f      	movs	r2, #63	@ 0x3f
 8003072:	409a      	lsls	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	f010803f 	.word	0xf010803f

08003094 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_DMA_Start_IT+0x26>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e040      	b.n	800313c <HAL_DMA_Start_IT+0xa8>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d12f      	bne.n	800312e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2202      	movs	r2, #2
 80030d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	68b9      	ldr	r1, [r7, #8]
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f9b8 	bl	8003458 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ec:	223f      	movs	r2, #63	@ 0x3f
 80030ee:	409a      	lsls	r2, r3
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0216 	orr.w	r2, r2, #22
 8003102:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0208 	orr.w	r2, r2, #8
 800311a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	e005      	b.n	800313a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003136:	2302      	movs	r3, #2
 8003138:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800313a:	7dfb      	ldrb	r3, [r7, #23]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003150:	4b8e      	ldr	r3, [pc, #568]	@ (800338c <HAL_DMA_IRQHandler+0x248>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a8e      	ldr	r2, [pc, #568]	@ (8003390 <HAL_DMA_IRQHandler+0x24c>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	0a9b      	lsrs	r3, r3, #10
 800315c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003162:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316e:	2208      	movs	r2, #8
 8003170:	409a      	lsls	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4013      	ands	r3, r2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d01a      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d013      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0204 	bic.w	r2, r2, #4
 8003196:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319c:	2208      	movs	r2, #8
 800319e:	409a      	lsls	r2, r3
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a8:	f043 0201 	orr.w	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b4:	2201      	movs	r2, #1
 80031b6:	409a      	lsls	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d012      	beq.n	80031e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00b      	beq.n	80031e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d2:	2201      	movs	r2, #1
 80031d4:	409a      	lsls	r2, r3
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031de:	f043 0202 	orr.w	r2, r3, #2
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ea:	2204      	movs	r2, #4
 80031ec:	409a      	lsls	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4013      	ands	r3, r2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d012      	beq.n	800321c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00b      	beq.n	800321c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003208:	2204      	movs	r2, #4
 800320a:	409a      	lsls	r2, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003214:	f043 0204 	orr.w	r2, r3, #4
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003220:	2210      	movs	r2, #16
 8003222:	409a      	lsls	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4013      	ands	r3, r2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d043      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d03c      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323e:	2210      	movs	r2, #16
 8003240:	409a      	lsls	r2, r3
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d018      	beq.n	8003286 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d108      	bne.n	8003274 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d024      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	4798      	blx	r3
 8003272:	e01f      	b.n	80032b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003278:	2b00      	cmp	r3, #0
 800327a:	d01b      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	4798      	blx	r3
 8003284:	e016      	b.n	80032b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d107      	bne.n	80032a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0208 	bic.w	r2, r2, #8
 80032a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b8:	2220      	movs	r2, #32
 80032ba:	409a      	lsls	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 808f 	beq.w	80033e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 8087 	beq.w	80033e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032da:	2220      	movs	r2, #32
 80032dc:	409a      	lsls	r2, r3
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b05      	cmp	r3, #5
 80032ec:	d136      	bne.n	800335c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0216 	bic.w	r2, r2, #22
 80032fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800330c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d103      	bne.n	800331e <HAL_DMA_IRQHandler+0x1da>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800331a:	2b00      	cmp	r3, #0
 800331c:	d007      	beq.n	800332e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0208 	bic.w	r2, r2, #8
 800332c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003332:	223f      	movs	r2, #63	@ 0x3f
 8003334:	409a      	lsls	r2, r3
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800334e:	2b00      	cmp	r3, #0
 8003350:	d07e      	beq.n	8003450 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	4798      	blx	r3
        }
        return;
 800335a:	e079      	b.n	8003450 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d01d      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10d      	bne.n	8003394 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337c:	2b00      	cmp	r3, #0
 800337e:	d031      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	4798      	blx	r3
 8003388:	e02c      	b.n	80033e4 <HAL_DMA_IRQHandler+0x2a0>
 800338a:	bf00      	nop
 800338c:	20000008 	.word	0x20000008
 8003390:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003398:	2b00      	cmp	r3, #0
 800339a:	d023      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	4798      	blx	r3
 80033a4:	e01e      	b.n	80033e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10f      	bne.n	80033d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0210 	bic.w	r2, r2, #16
 80033c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d032      	beq.n	8003452 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d022      	beq.n	800343e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2205      	movs	r2, #5
 80033fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0201 	bic.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	3301      	adds	r3, #1
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	429a      	cmp	r2, r3
 800341a:	d307      	bcc.n	800342c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f2      	bne.n	8003410 <HAL_DMA_IRQHandler+0x2cc>
 800342a:	e000      	b.n	800342e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800342c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	4798      	blx	r3
 800344e:	e000      	b.n	8003452 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003450:	bf00      	nop
    }
  }
}
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003474:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b40      	cmp	r3, #64	@ 0x40
 8003484:	d108      	bne.n	8003498 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003496:	e007      	b.n	80034a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	60da      	str	r2, [r3, #12]
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	3b10      	subs	r3, #16
 80034c4:	4a14      	ldr	r2, [pc, #80]	@ (8003518 <DMA_CalcBaseAndBitshift+0x64>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034ce:	4a13      	ldr	r2, [pc, #76]	@ (800351c <DMA_CalcBaseAndBitshift+0x68>)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4413      	add	r3, r2
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d909      	bls.n	80034f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034ea:	f023 0303 	bic.w	r3, r3, #3
 80034ee:	1d1a      	adds	r2, r3, #4
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80034f4:	e007      	b.n	8003506 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034fe:	f023 0303 	bic.w	r3, r3, #3
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	aaaaaaab 	.word	0xaaaaaaab
 800351c:	08007818 	.word	0x08007818

08003520 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003530:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d11f      	bne.n	800357a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b03      	cmp	r3, #3
 800353e:	d856      	bhi.n	80035ee <DMA_CheckFifoParam+0xce>
 8003540:	a201      	add	r2, pc, #4	@ (adr r2, 8003548 <DMA_CheckFifoParam+0x28>)
 8003542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003546:	bf00      	nop
 8003548:	08003559 	.word	0x08003559
 800354c:	0800356b 	.word	0x0800356b
 8003550:	08003559 	.word	0x08003559
 8003554:	080035ef 	.word	0x080035ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d046      	beq.n	80035f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003568:	e043      	b.n	80035f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003572:	d140      	bne.n	80035f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003578:	e03d      	b.n	80035f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003582:	d121      	bne.n	80035c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b03      	cmp	r3, #3
 8003588:	d837      	bhi.n	80035fa <DMA_CheckFifoParam+0xda>
 800358a:	a201      	add	r2, pc, #4	@ (adr r2, 8003590 <DMA_CheckFifoParam+0x70>)
 800358c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003590:	080035a1 	.word	0x080035a1
 8003594:	080035a7 	.word	0x080035a7
 8003598:	080035a1 	.word	0x080035a1
 800359c:	080035b9 	.word	0x080035b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
      break;
 80035a4:	e030      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d025      	beq.n	80035fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035b6:	e022      	b.n	80035fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035c0:	d11f      	bne.n	8003602 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035c6:	e01c      	b.n	8003602 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d903      	bls.n	80035d6 <DMA_CheckFifoParam+0xb6>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d003      	beq.n	80035dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035d4:	e018      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	73fb      	strb	r3, [r7, #15]
      break;
 80035da:	e015      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00e      	beq.n	8003606 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	73fb      	strb	r3, [r7, #15]
      break;
 80035ec:	e00b      	b.n	8003606 <DMA_CheckFifoParam+0xe6>
      break;
 80035ee:	bf00      	nop
 80035f0:	e00a      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;
 80035f2:	bf00      	nop
 80035f4:	e008      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;
 80035f6:	bf00      	nop
 80035f8:	e006      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;
 80035fa:	bf00      	nop
 80035fc:	e004      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;
 80035fe:	bf00      	nop
 8003600:	e002      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;   
 8003602:	bf00      	nop
 8003604:	e000      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;
 8003606:	bf00      	nop
    }
  } 
  
  return status; 
 8003608:	7bfb      	ldrb	r3, [r7, #15]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop

08003618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003618:	b480      	push	{r7}
 800361a:	b089      	sub	sp, #36	@ 0x24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800362a:	2300      	movs	r3, #0
 800362c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	e165      	b.n	8003900 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003634:	2201      	movs	r2, #1
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4013      	ands	r3, r2
 8003646:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	429a      	cmp	r2, r3
 800364e:	f040 8154 	bne.w	80038fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b01      	cmp	r3, #1
 800365c:	d005      	beq.n	800366a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003666:	2b02      	cmp	r3, #2
 8003668:	d130      	bne.n	80036cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	2203      	movs	r2, #3
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4013      	ands	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4313      	orrs	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036a0:	2201      	movs	r2, #1
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	43db      	mvns	r3, r3
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4013      	ands	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	091b      	lsrs	r3, r3, #4
 80036b6:	f003 0201 	and.w	r2, r3, #1
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d017      	beq.n	8003708 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	2203      	movs	r2, #3
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4013      	ands	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4313      	orrs	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d123      	bne.n	800375c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	08da      	lsrs	r2, r3, #3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3208      	adds	r2, #8
 800371c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003720:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	220f      	movs	r2, #15
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4013      	ands	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4313      	orrs	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	08da      	lsrs	r2, r3, #3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3208      	adds	r2, #8
 8003756:	69b9      	ldr	r1, [r7, #24]
 8003758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	2203      	movs	r2, #3
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 0203 	and.w	r2, r3, #3
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80ae 	beq.w	80038fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	4b5d      	ldr	r3, [pc, #372]	@ (8003918 <HAL_GPIO_Init+0x300>)
 80037a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a6:	4a5c      	ldr	r2, [pc, #368]	@ (8003918 <HAL_GPIO_Init+0x300>)
 80037a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80037ae:	4b5a      	ldr	r3, [pc, #360]	@ (8003918 <HAL_GPIO_Init+0x300>)
 80037b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037ba:	4a58      	ldr	r2, [pc, #352]	@ (800391c <HAL_GPIO_Init+0x304>)
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	089b      	lsrs	r3, r3, #2
 80037c0:	3302      	adds	r3, #2
 80037c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	220f      	movs	r2, #15
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	43db      	mvns	r3, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4013      	ands	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a4f      	ldr	r2, [pc, #316]	@ (8003920 <HAL_GPIO_Init+0x308>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d025      	beq.n	8003832 <HAL_GPIO_Init+0x21a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a4e      	ldr	r2, [pc, #312]	@ (8003924 <HAL_GPIO_Init+0x30c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d01f      	beq.n	800382e <HAL_GPIO_Init+0x216>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a4d      	ldr	r2, [pc, #308]	@ (8003928 <HAL_GPIO_Init+0x310>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d019      	beq.n	800382a <HAL_GPIO_Init+0x212>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a4c      	ldr	r2, [pc, #304]	@ (800392c <HAL_GPIO_Init+0x314>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d013      	beq.n	8003826 <HAL_GPIO_Init+0x20e>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a4b      	ldr	r2, [pc, #300]	@ (8003930 <HAL_GPIO_Init+0x318>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d00d      	beq.n	8003822 <HAL_GPIO_Init+0x20a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a4a      	ldr	r2, [pc, #296]	@ (8003934 <HAL_GPIO_Init+0x31c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d007      	beq.n	800381e <HAL_GPIO_Init+0x206>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a49      	ldr	r2, [pc, #292]	@ (8003938 <HAL_GPIO_Init+0x320>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d101      	bne.n	800381a <HAL_GPIO_Init+0x202>
 8003816:	2306      	movs	r3, #6
 8003818:	e00c      	b.n	8003834 <HAL_GPIO_Init+0x21c>
 800381a:	2307      	movs	r3, #7
 800381c:	e00a      	b.n	8003834 <HAL_GPIO_Init+0x21c>
 800381e:	2305      	movs	r3, #5
 8003820:	e008      	b.n	8003834 <HAL_GPIO_Init+0x21c>
 8003822:	2304      	movs	r3, #4
 8003824:	e006      	b.n	8003834 <HAL_GPIO_Init+0x21c>
 8003826:	2303      	movs	r3, #3
 8003828:	e004      	b.n	8003834 <HAL_GPIO_Init+0x21c>
 800382a:	2302      	movs	r3, #2
 800382c:	e002      	b.n	8003834 <HAL_GPIO_Init+0x21c>
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <HAL_GPIO_Init+0x21c>
 8003832:	2300      	movs	r3, #0
 8003834:	69fa      	ldr	r2, [r7, #28]
 8003836:	f002 0203 	and.w	r2, r2, #3
 800383a:	0092      	lsls	r2, r2, #2
 800383c:	4093      	lsls	r3, r2
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4313      	orrs	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003844:	4935      	ldr	r1, [pc, #212]	@ (800391c <HAL_GPIO_Init+0x304>)
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	089b      	lsrs	r3, r3, #2
 800384a:	3302      	adds	r3, #2
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003852:	4b3a      	ldr	r3, [pc, #232]	@ (800393c <HAL_GPIO_Init+0x324>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	43db      	mvns	r3, r3
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	4013      	ands	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003876:	4a31      	ldr	r2, [pc, #196]	@ (800393c <HAL_GPIO_Init+0x324>)
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800387c:	4b2f      	ldr	r3, [pc, #188]	@ (800393c <HAL_GPIO_Init+0x324>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	43db      	mvns	r3, r3
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4013      	ands	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038a0:	4a26      	ldr	r2, [pc, #152]	@ (800393c <HAL_GPIO_Init+0x324>)
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038a6:	4b25      	ldr	r3, [pc, #148]	@ (800393c <HAL_GPIO_Init+0x324>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	43db      	mvns	r3, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4013      	ands	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038ca:	4a1c      	ldr	r2, [pc, #112]	@ (800393c <HAL_GPIO_Init+0x324>)
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038d0:	4b1a      	ldr	r3, [pc, #104]	@ (800393c <HAL_GPIO_Init+0x324>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038f4:	4a11      	ldr	r2, [pc, #68]	@ (800393c <HAL_GPIO_Init+0x324>)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	3301      	adds	r3, #1
 80038fe:	61fb      	str	r3, [r7, #28]
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	2b0f      	cmp	r3, #15
 8003904:	f67f ae96 	bls.w	8003634 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003908:	bf00      	nop
 800390a:	bf00      	nop
 800390c:	3724      	adds	r7, #36	@ 0x24
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40023800 	.word	0x40023800
 800391c:	40013800 	.word	0x40013800
 8003920:	40020000 	.word	0x40020000
 8003924:	40020400 	.word	0x40020400
 8003928:	40020800 	.word	0x40020800
 800392c:	40020c00 	.word	0x40020c00
 8003930:	40021000 	.word	0x40021000
 8003934:	40021400 	.word	0x40021400
 8003938:	40021800 	.word	0x40021800
 800393c:	40013c00 	.word	0x40013c00

08003940 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	887b      	ldrh	r3, [r7, #2]
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003958:	2301      	movs	r3, #1
 800395a:	73fb      	strb	r3, [r7, #15]
 800395c:	e001      	b.n	8003962 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800395e:	2300      	movs	r3, #0
 8003960:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003962:	7bfb      	ldrb	r3, [r7, #15]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	807b      	strh	r3, [r7, #2]
 800397c:	4613      	mov	r3, r2
 800397e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003980:	787b      	ldrb	r3, [r7, #1]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003986:	887a      	ldrh	r2, [r7, #2]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800398c:	e003      	b.n	8003996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800398e:	887b      	ldrh	r3, [r7, #2]
 8003990:	041a      	lsls	r2, r3, #16
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	619a      	str	r2, [r3, #24]
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e12b      	b.n	8003c0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fe fb6a 	bl	80020a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2224      	movs	r2, #36	@ 0x24
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0201 	bic.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a08:	f000 fd6c 	bl	80044e4 <HAL_RCC_GetPCLK1Freq>
 8003a0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	4a81      	ldr	r2, [pc, #516]	@ (8003c18 <HAL_I2C_Init+0x274>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d807      	bhi.n	8003a28 <HAL_I2C_Init+0x84>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4a80      	ldr	r2, [pc, #512]	@ (8003c1c <HAL_I2C_Init+0x278>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	bf94      	ite	ls
 8003a20:	2301      	movls	r3, #1
 8003a22:	2300      	movhi	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	e006      	b.n	8003a36 <HAL_I2C_Init+0x92>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4a7d      	ldr	r2, [pc, #500]	@ (8003c20 <HAL_I2C_Init+0x27c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	bf94      	ite	ls
 8003a30:	2301      	movls	r3, #1
 8003a32:	2300      	movhi	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e0e7      	b.n	8003c0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4a78      	ldr	r2, [pc, #480]	@ (8003c24 <HAL_I2C_Init+0x280>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	0c9b      	lsrs	r3, r3, #18
 8003a48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	4a6a      	ldr	r2, [pc, #424]	@ (8003c18 <HAL_I2C_Init+0x274>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d802      	bhi.n	8003a78 <HAL_I2C_Init+0xd4>
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	3301      	adds	r3, #1
 8003a76:	e009      	b.n	8003a8c <HAL_I2C_Init+0xe8>
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	4a69      	ldr	r2, [pc, #420]	@ (8003c28 <HAL_I2C_Init+0x284>)
 8003a84:	fba2 2303 	umull	r2, r3, r2, r3
 8003a88:	099b      	lsrs	r3, r3, #6
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	430b      	orrs	r3, r1
 8003a92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a9e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	495c      	ldr	r1, [pc, #368]	@ (8003c18 <HAL_I2C_Init+0x274>)
 8003aa8:	428b      	cmp	r3, r1
 8003aaa:	d819      	bhi.n	8003ae0 <HAL_I2C_Init+0x13c>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	1e59      	subs	r1, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aba:	1c59      	adds	r1, r3, #1
 8003abc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ac0:	400b      	ands	r3, r1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <HAL_I2C_Init+0x138>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1e59      	subs	r1, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ada:	e051      	b.n	8003b80 <HAL_I2C_Init+0x1dc>
 8003adc:	2304      	movs	r3, #4
 8003ade:	e04f      	b.n	8003b80 <HAL_I2C_Init+0x1dc>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d111      	bne.n	8003b0c <HAL_I2C_Init+0x168>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	1e58      	subs	r0, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6859      	ldr	r1, [r3, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	440b      	add	r3, r1
 8003af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003afa:	3301      	adds	r3, #1
 8003afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	bf0c      	ite	eq
 8003b04:	2301      	moveq	r3, #1
 8003b06:	2300      	movne	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	e012      	b.n	8003b32 <HAL_I2C_Init+0x18e>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1e58      	subs	r0, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6859      	ldr	r1, [r3, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	0099      	lsls	r1, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b22:	3301      	adds	r3, #1
 8003b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bf0c      	ite	eq
 8003b2c:	2301      	moveq	r3, #1
 8003b2e:	2300      	movne	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_I2C_Init+0x196>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e022      	b.n	8003b80 <HAL_I2C_Init+0x1dc>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10e      	bne.n	8003b60 <HAL_I2C_Init+0x1bc>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1e58      	subs	r0, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6859      	ldr	r1, [r3, #4]
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	440b      	add	r3, r1
 8003b50:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b54:	3301      	adds	r3, #1
 8003b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b5e:	e00f      	b.n	8003b80 <HAL_I2C_Init+0x1dc>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	1e58      	subs	r0, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6859      	ldr	r1, [r3, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	0099      	lsls	r1, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b76:	3301      	adds	r3, #1
 8003b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	6809      	ldr	r1, [r1, #0]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69da      	ldr	r2, [r3, #28]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003bae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6911      	ldr	r1, [r2, #16]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	68d2      	ldr	r2, [r2, #12]
 8003bba:	4311      	orrs	r1, r2
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	000186a0 	.word	0x000186a0
 8003c1c:	001e847f 	.word	0x001e847f
 8003c20:	003d08ff 	.word	0x003d08ff
 8003c24:	431bde83 	.word	0x431bde83
 8003c28:	10624dd3 	.word	0x10624dd3

08003c2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	4608      	mov	r0, r1
 8003c36:	4611      	mov	r1, r2
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	817b      	strh	r3, [r7, #10]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	813b      	strh	r3, [r7, #8]
 8003c42:	4613      	mov	r3, r2
 8003c44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c46:	f7fe fc59 	bl	80024fc <HAL_GetTick>
 8003c4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	f040 80d9 	bne.w	8003e0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	2319      	movs	r3, #25
 8003c60:	2201      	movs	r2, #1
 8003c62:	496d      	ldr	r1, [pc, #436]	@ (8003e18 <HAL_I2C_Mem_Write+0x1ec>)
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f971 	bl	8003f4c <I2C_WaitOnFlagUntilTimeout>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c70:	2302      	movs	r3, #2
 8003c72:	e0cc      	b.n	8003e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_I2C_Mem_Write+0x56>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e0c5      	b.n	8003e0e <HAL_I2C_Mem_Write+0x1e2>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d007      	beq.n	8003ca8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2221      	movs	r2, #33	@ 0x21
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2240      	movs	r2, #64	@ 0x40
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a3a      	ldr	r2, [r7, #32]
 8003cd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4a4d      	ldr	r2, [pc, #308]	@ (8003e1c <HAL_I2C_Mem_Write+0x1f0>)
 8003ce8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cea:	88f8      	ldrh	r0, [r7, #6]
 8003cec:	893a      	ldrh	r2, [r7, #8]
 8003cee:	8979      	ldrh	r1, [r7, #10]
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 f890 	bl	8003e20 <I2C_RequestMemoryWrite>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d052      	beq.n	8003dac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e081      	b.n	8003e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 fa36 	bl	8004180 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00d      	beq.n	8003d36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d107      	bne.n	8003d32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e06b      	b.n	8003e0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3a:	781a      	ldrb	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d11b      	bne.n	8003dac <HAL_I2C_Mem_Write+0x180>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d017      	beq.n	8003dac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	781a      	ldrb	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1aa      	bne.n	8003d0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 fa29 	bl	8004210 <I2C_WaitOnBTFFlagUntilTimeout>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00d      	beq.n	8003de0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d107      	bne.n	8003ddc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e016      	b.n	8003e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	e000      	b.n	8003e0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e0c:	2302      	movs	r3, #2
  }
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	00100002 	.word	0x00100002
 8003e1c:	ffff0000 	.word	0xffff0000

08003e20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	4608      	mov	r0, r1
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4603      	mov	r3, r0
 8003e30:	817b      	strh	r3, [r7, #10]
 8003e32:	460b      	mov	r3, r1
 8003e34:	813b      	strh	r3, [r7, #8]
 8003e36:	4613      	mov	r3, r2
 8003e38:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 f878 	bl	8003f4c <I2C_WaitOnFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00d      	beq.n	8003e7e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e70:	d103      	bne.n	8003e7a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e78:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e05f      	b.n	8003f3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e7e:	897b      	ldrh	r3, [r7, #10]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	461a      	mov	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e90:	6a3a      	ldr	r2, [r7, #32]
 8003e92:	492d      	ldr	r1, [pc, #180]	@ (8003f48 <I2C_RequestMemoryWrite+0x128>)
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 f8d3 	bl	8004040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e04c      	b.n	8003f3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ebc:	6a39      	ldr	r1, [r7, #32]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f95e 	bl	8004180 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00d      	beq.n	8003ee6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d107      	bne.n	8003ee2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ee0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e02b      	b.n	8003f3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ee6:	88fb      	ldrh	r3, [r7, #6]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d105      	bne.n	8003ef8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eec:	893b      	ldrh	r3, [r7, #8]
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	611a      	str	r2, [r3, #16]
 8003ef6:	e021      	b.n	8003f3c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ef8:	893b      	ldrh	r3, [r7, #8]
 8003efa:	0a1b      	lsrs	r3, r3, #8
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f08:	6a39      	ldr	r1, [r7, #32]
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 f938 	bl	8004180 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00d      	beq.n	8003f32 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d107      	bne.n	8003f2e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e005      	b.n	8003f3e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f32:	893b      	ldrh	r3, [r7, #8]
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	00010002 	.word	0x00010002

08003f4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f5c:	e048      	b.n	8003ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f64:	d044      	beq.n	8003ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f66:	f7fe fac9 	bl	80024fc <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d302      	bcc.n	8003f7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d139      	bne.n	8003ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	0c1b      	lsrs	r3, r3, #16
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d10d      	bne.n	8003fa2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	43da      	mvns	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	4013      	ands	r3, r2
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	bf0c      	ite	eq
 8003f98:	2301      	moveq	r3, #1
 8003f9a:	2300      	movne	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	e00c      	b.n	8003fbc <I2C_WaitOnFlagUntilTimeout+0x70>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	43da      	mvns	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	4013      	ands	r3, r2
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bf0c      	ite	eq
 8003fb4:	2301      	moveq	r3, #1
 8003fb6:	2300      	movne	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	461a      	mov	r2, r3
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d116      	bne.n	8003ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fdc:	f043 0220 	orr.w	r2, r3, #32
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e023      	b.n	8004038 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	0c1b      	lsrs	r3, r3, #16
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d10d      	bne.n	8004016 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	43da      	mvns	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4013      	ands	r3, r2
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	bf0c      	ite	eq
 800400c:	2301      	moveq	r3, #1
 800400e:	2300      	movne	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	e00c      	b.n	8004030 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	43da      	mvns	r2, r3
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	4013      	ands	r3, r2
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	bf0c      	ite	eq
 8004028:	2301      	moveq	r3, #1
 800402a:	2300      	movne	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	461a      	mov	r2, r3
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	429a      	cmp	r2, r3
 8004034:	d093      	beq.n	8003f5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800404e:	e071      	b.n	8004134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800405a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800405e:	d123      	bne.n	80040a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800406e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004078:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004094:	f043 0204 	orr.w	r2, r3, #4
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e067      	b.n	8004178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040ae:	d041      	beq.n	8004134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b0:	f7fe fa24 	bl	80024fc <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d302      	bcc.n	80040c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d136      	bne.n	8004134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	0c1b      	lsrs	r3, r3, #16
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d10c      	bne.n	80040ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	43da      	mvns	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4013      	ands	r3, r2
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	bf14      	ite	ne
 80040e2:	2301      	movne	r3, #1
 80040e4:	2300      	moveq	r3, #0
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	e00b      	b.n	8004102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	43da      	mvns	r2, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	4013      	ands	r3, r2
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	bf14      	ite	ne
 80040fc:	2301      	movne	r3, #1
 80040fe:	2300      	moveq	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d016      	beq.n	8004134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004120:	f043 0220 	orr.w	r2, r3, #32
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e021      	b.n	8004178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	0c1b      	lsrs	r3, r3, #16
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b01      	cmp	r3, #1
 800413c:	d10c      	bne.n	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	43da      	mvns	r2, r3
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	4013      	ands	r3, r2
 800414a:	b29b      	uxth	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	bf14      	ite	ne
 8004150:	2301      	movne	r3, #1
 8004152:	2300      	moveq	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	e00b      	b.n	8004170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	43da      	mvns	r2, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4013      	ands	r3, r2
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	bf14      	ite	ne
 800416a:	2301      	movne	r3, #1
 800416c:	2300      	moveq	r3, #0
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	f47f af6d 	bne.w	8004050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800418c:	e034      	b.n	80041f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 f886 	bl	80042a0 <I2C_IsAcknowledgeFailed>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e034      	b.n	8004208 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041a4:	d028      	beq.n	80041f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a6:	f7fe f9a9 	bl	80024fc <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d302      	bcc.n	80041bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d11d      	bne.n	80041f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041c6:	2b80      	cmp	r3, #128	@ 0x80
 80041c8:	d016      	beq.n	80041f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e4:	f043 0220 	orr.w	r2, r3, #32
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e007      	b.n	8004208 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004202:	2b80      	cmp	r3, #128	@ 0x80
 8004204:	d1c3      	bne.n	800418e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800421c:	e034      	b.n	8004288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 f83e 	bl	80042a0 <I2C_IsAcknowledgeFailed>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e034      	b.n	8004298 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004234:	d028      	beq.n	8004288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004236:	f7fe f961 	bl	80024fc <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	429a      	cmp	r2, r3
 8004244:	d302      	bcc.n	800424c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d11d      	bne.n	8004288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b04      	cmp	r3, #4
 8004258:	d016      	beq.n	8004288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004274:	f043 0220 	orr.w	r2, r3, #32
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e007      	b.n	8004298 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	f003 0304 	and.w	r3, r3, #4
 8004292:	2b04      	cmp	r3, #4
 8004294:	d1c3      	bne.n	800421e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042b6:	d11b      	bne.n	80042f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042dc:	f043 0204 	orr.w	r2, r3, #4
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e000      	b.n	80042f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e0cc      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004314:	4b68      	ldr	r3, [pc, #416]	@ (80044b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 030f 	and.w	r3, r3, #15
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d90c      	bls.n	800433c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004322:	4b65      	ldr	r3, [pc, #404]	@ (80044b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800432a:	4b63      	ldr	r3, [pc, #396]	@ (80044b8 <HAL_RCC_ClockConfig+0x1b8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d001      	beq.n	800433c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0b8      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d020      	beq.n	800438a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004354:	4b59      	ldr	r3, [pc, #356]	@ (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	4a58      	ldr	r2, [pc, #352]	@ (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800435e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800436c:	4b53      	ldr	r3, [pc, #332]	@ (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	4a52      	ldr	r2, [pc, #328]	@ (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 8004372:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004378:	4b50      	ldr	r3, [pc, #320]	@ (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	494d      	ldr	r1, [pc, #308]	@ (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	4313      	orrs	r3, r2
 8004388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d044      	beq.n	8004420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d107      	bne.n	80043ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439e:	4b47      	ldr	r3, [pc, #284]	@ (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d119      	bne.n	80043de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e07f      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d003      	beq.n	80043be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d107      	bne.n	80043ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043be:	4b3f      	ldr	r3, [pc, #252]	@ (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d109      	bne.n	80043de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e06f      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ce:	4b3b      	ldr	r3, [pc, #236]	@ (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e067      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043de:	4b37      	ldr	r3, [pc, #220]	@ (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f023 0203 	bic.w	r2, r3, #3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	4934      	ldr	r1, [pc, #208]	@ (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043f0:	f7fe f884 	bl	80024fc <HAL_GetTick>
 80043f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f6:	e00a      	b.n	800440e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f8:	f7fe f880 	bl	80024fc <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004406:	4293      	cmp	r3, r2
 8004408:	d901      	bls.n	800440e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e04f      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440e:	4b2b      	ldr	r3, [pc, #172]	@ (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 020c 	and.w	r2, r3, #12
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	429a      	cmp	r2, r3
 800441e:	d1eb      	bne.n	80043f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004420:	4b25      	ldr	r3, [pc, #148]	@ (80044b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 030f 	and.w	r3, r3, #15
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d20c      	bcs.n	8004448 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442e:	4b22      	ldr	r3, [pc, #136]	@ (80044b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004436:	4b20      	ldr	r3, [pc, #128]	@ (80044b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d001      	beq.n	8004448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e032      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d008      	beq.n	8004466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004454:	4b19      	ldr	r3, [pc, #100]	@ (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	4916      	ldr	r1, [pc, #88]	@ (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 8004462:	4313      	orrs	r3, r2
 8004464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d009      	beq.n	8004486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004472:	4b12      	ldr	r3, [pc, #72]	@ (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	490e      	ldr	r1, [pc, #56]	@ (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	4313      	orrs	r3, r2
 8004484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004486:	f000 f855 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 800448a:	4602      	mov	r2, r0
 800448c:	4b0b      	ldr	r3, [pc, #44]	@ (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	490a      	ldr	r1, [pc, #40]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004498:	5ccb      	ldrb	r3, [r1, r3]
 800449a:	fa22 f303 	lsr.w	r3, r2, r3
 800449e:	4a09      	ldr	r2, [pc, #36]	@ (80044c4 <HAL_RCC_ClockConfig+0x1c4>)
 80044a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80044a2:	4b09      	ldr	r3, [pc, #36]	@ (80044c8 <HAL_RCC_ClockConfig+0x1c8>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fd ffe4 	bl	8002474 <HAL_InitTick>

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40023c00 	.word	0x40023c00
 80044bc:	40023800 	.word	0x40023800
 80044c0:	08007800 	.word	0x08007800
 80044c4:	20000008 	.word	0x20000008
 80044c8:	2000000c 	.word	0x2000000c

080044cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044d0:	4b03      	ldr	r3, [pc, #12]	@ (80044e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80044d2:	681b      	ldr	r3, [r3, #0]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	20000008 	.word	0x20000008

080044e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044e8:	f7ff fff0 	bl	80044cc <HAL_RCC_GetHCLKFreq>
 80044ec:	4602      	mov	r2, r0
 80044ee:	4b05      	ldr	r3, [pc, #20]	@ (8004504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	0a9b      	lsrs	r3, r3, #10
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	4903      	ldr	r1, [pc, #12]	@ (8004508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044fa:	5ccb      	ldrb	r3, [r1, r3]
 80044fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004500:	4618      	mov	r0, r3
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40023800 	.word	0x40023800
 8004508:	08007810 	.word	0x08007810

0800450c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004510:	f7ff ffdc 	bl	80044cc <HAL_RCC_GetHCLKFreq>
 8004514:	4602      	mov	r2, r0
 8004516:	4b05      	ldr	r3, [pc, #20]	@ (800452c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	0b5b      	lsrs	r3, r3, #13
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	4903      	ldr	r1, [pc, #12]	@ (8004530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004522:	5ccb      	ldrb	r3, [r1, r3]
 8004524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004528:	4618      	mov	r0, r3
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40023800 	.word	0x40023800
 8004530:	08007810 	.word	0x08007810

08004534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004538:	b0a6      	sub	sp, #152	@ 0x98
 800453a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800455a:	4bc8      	ldr	r3, [pc, #800]	@ (800487c <HAL_RCC_GetSysClockFreq+0x348>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 030c 	and.w	r3, r3, #12
 8004562:	2b0c      	cmp	r3, #12
 8004564:	f200 817e 	bhi.w	8004864 <HAL_RCC_GetSysClockFreq+0x330>
 8004568:	a201      	add	r2, pc, #4	@ (adr r2, 8004570 <HAL_RCC_GetSysClockFreq+0x3c>)
 800456a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456e:	bf00      	nop
 8004570:	080045a5 	.word	0x080045a5
 8004574:	08004865 	.word	0x08004865
 8004578:	08004865 	.word	0x08004865
 800457c:	08004865 	.word	0x08004865
 8004580:	080045ad 	.word	0x080045ad
 8004584:	08004865 	.word	0x08004865
 8004588:	08004865 	.word	0x08004865
 800458c:	08004865 	.word	0x08004865
 8004590:	080045b5 	.word	0x080045b5
 8004594:	08004865 	.word	0x08004865
 8004598:	08004865 	.word	0x08004865
 800459c:	08004865 	.word	0x08004865
 80045a0:	0800471f 	.word	0x0800471f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045a4:	4bb6      	ldr	r3, [pc, #728]	@ (8004880 <HAL_RCC_GetSysClockFreq+0x34c>)
 80045a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80045aa:	e15f      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045ac:	4bb5      	ldr	r3, [pc, #724]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x350>)
 80045ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80045b2:	e15b      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045b4:	4bb1      	ldr	r3, [pc, #708]	@ (800487c <HAL_RCC_GetSysClockFreq+0x348>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045c0:	4bae      	ldr	r3, [pc, #696]	@ (800487c <HAL_RCC_GetSysClockFreq+0x348>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d031      	beq.n	8004630 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045cc:	4bab      	ldr	r3, [pc, #684]	@ (800487c <HAL_RCC_GetSysClockFreq+0x348>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	099b      	lsrs	r3, r3, #6
 80045d2:	2200      	movs	r2, #0
 80045d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045de:	663b      	str	r3, [r7, #96]	@ 0x60
 80045e0:	2300      	movs	r3, #0
 80045e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80045e4:	4ba7      	ldr	r3, [pc, #668]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x350>)
 80045e6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80045ea:	462a      	mov	r2, r5
 80045ec:	fb03 f202 	mul.w	r2, r3, r2
 80045f0:	2300      	movs	r3, #0
 80045f2:	4621      	mov	r1, r4
 80045f4:	fb01 f303 	mul.w	r3, r1, r3
 80045f8:	4413      	add	r3, r2
 80045fa:	4aa2      	ldr	r2, [pc, #648]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x350>)
 80045fc:	4621      	mov	r1, r4
 80045fe:	fba1 1202 	umull	r1, r2, r1, r2
 8004602:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004604:	460a      	mov	r2, r1
 8004606:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004608:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800460a:	4413      	add	r3, r2
 800460c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800460e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004612:	2200      	movs	r2, #0
 8004614:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004616:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004618:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800461c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004620:	f7fc fafa 	bl	8000c18 <__aeabi_uldivmod>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4613      	mov	r3, r2
 800462a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800462e:	e064      	b.n	80046fa <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004630:	4b92      	ldr	r3, [pc, #584]	@ (800487c <HAL_RCC_GetSysClockFreq+0x348>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	099b      	lsrs	r3, r3, #6
 8004636:	2200      	movs	r2, #0
 8004638:	653b      	str	r3, [r7, #80]	@ 0x50
 800463a:	657a      	str	r2, [r7, #84]	@ 0x54
 800463c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800463e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004642:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004644:	2300      	movs	r3, #0
 8004646:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004648:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800464c:	4622      	mov	r2, r4
 800464e:	462b      	mov	r3, r5
 8004650:	f04f 0000 	mov.w	r0, #0
 8004654:	f04f 0100 	mov.w	r1, #0
 8004658:	0159      	lsls	r1, r3, #5
 800465a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800465e:	0150      	lsls	r0, r2, #5
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	4621      	mov	r1, r4
 8004666:	1a51      	subs	r1, r2, r1
 8004668:	6139      	str	r1, [r7, #16]
 800466a:	4629      	mov	r1, r5
 800466c:	eb63 0301 	sbc.w	r3, r3, r1
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800467e:	4659      	mov	r1, fp
 8004680:	018b      	lsls	r3, r1, #6
 8004682:	4651      	mov	r1, sl
 8004684:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004688:	4651      	mov	r1, sl
 800468a:	018a      	lsls	r2, r1, #6
 800468c:	4651      	mov	r1, sl
 800468e:	ebb2 0801 	subs.w	r8, r2, r1
 8004692:	4659      	mov	r1, fp
 8004694:	eb63 0901 	sbc.w	r9, r3, r1
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046ac:	4690      	mov	r8, r2
 80046ae:	4699      	mov	r9, r3
 80046b0:	4623      	mov	r3, r4
 80046b2:	eb18 0303 	adds.w	r3, r8, r3
 80046b6:	60bb      	str	r3, [r7, #8]
 80046b8:	462b      	mov	r3, r5
 80046ba:	eb49 0303 	adc.w	r3, r9, r3
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046cc:	4629      	mov	r1, r5
 80046ce:	028b      	lsls	r3, r1, #10
 80046d0:	4621      	mov	r1, r4
 80046d2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046d6:	4621      	mov	r1, r4
 80046d8:	028a      	lsls	r2, r1, #10
 80046da:	4610      	mov	r0, r2
 80046dc:	4619      	mov	r1, r3
 80046de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046e2:	2200      	movs	r2, #0
 80046e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80046e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80046e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80046ec:	f7fc fa94 	bl	8000c18 <__aeabi_uldivmod>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4613      	mov	r3, r2
 80046f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80046fa:	4b60      	ldr	r3, [pc, #384]	@ (800487c <HAL_RCC_GetSysClockFreq+0x348>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	0c1b      	lsrs	r3, r3, #16
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	3301      	adds	r3, #1
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800470c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004710:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004714:	fbb2 f3f3 	udiv	r3, r2, r3
 8004718:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800471c:	e0a6      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800471e:	4b57      	ldr	r3, [pc, #348]	@ (800487c <HAL_RCC_GetSysClockFreq+0x348>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004726:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800472a:	4b54      	ldr	r3, [pc, #336]	@ (800487c <HAL_RCC_GetSysClockFreq+0x348>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d02a      	beq.n	800478c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004736:	4b51      	ldr	r3, [pc, #324]	@ (800487c <HAL_RCC_GetSysClockFreq+0x348>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	099b      	lsrs	r3, r3, #6
 800473c:	2200      	movs	r2, #0
 800473e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004740:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004744:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004748:	2100      	movs	r1, #0
 800474a:	4b4e      	ldr	r3, [pc, #312]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x350>)
 800474c:	fb03 f201 	mul.w	r2, r3, r1
 8004750:	2300      	movs	r3, #0
 8004752:	fb00 f303 	mul.w	r3, r0, r3
 8004756:	4413      	add	r3, r2
 8004758:	4a4a      	ldr	r2, [pc, #296]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x350>)
 800475a:	fba0 1202 	umull	r1, r2, r0, r2
 800475e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004760:	460a      	mov	r2, r1
 8004762:	673a      	str	r2, [r7, #112]	@ 0x70
 8004764:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004766:	4413      	add	r3, r2
 8004768:	677b      	str	r3, [r7, #116]	@ 0x74
 800476a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800476e:	2200      	movs	r2, #0
 8004770:	633b      	str	r3, [r7, #48]	@ 0x30
 8004772:	637a      	str	r2, [r7, #52]	@ 0x34
 8004774:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004778:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800477c:	f7fc fa4c 	bl	8000c18 <__aeabi_uldivmod>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4613      	mov	r3, r2
 8004786:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800478a:	e05b      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800478c:	4b3b      	ldr	r3, [pc, #236]	@ (800487c <HAL_RCC_GetSysClockFreq+0x348>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	099b      	lsrs	r3, r3, #6
 8004792:	2200      	movs	r2, #0
 8004794:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004796:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479e:	623b      	str	r3, [r7, #32]
 80047a0:	2300      	movs	r3, #0
 80047a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80047a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047a8:	4642      	mov	r2, r8
 80047aa:	464b      	mov	r3, r9
 80047ac:	f04f 0000 	mov.w	r0, #0
 80047b0:	f04f 0100 	mov.w	r1, #0
 80047b4:	0159      	lsls	r1, r3, #5
 80047b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047ba:	0150      	lsls	r0, r2, #5
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4641      	mov	r1, r8
 80047c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80047c6:	4649      	mov	r1, r9
 80047c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047e0:	ebb2 040a 	subs.w	r4, r2, sl
 80047e4:	eb63 050b 	sbc.w	r5, r3, fp
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	00eb      	lsls	r3, r5, #3
 80047f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047f6:	00e2      	lsls	r2, r4, #3
 80047f8:	4614      	mov	r4, r2
 80047fa:	461d      	mov	r5, r3
 80047fc:	4643      	mov	r3, r8
 80047fe:	18e3      	adds	r3, r4, r3
 8004800:	603b      	str	r3, [r7, #0]
 8004802:	464b      	mov	r3, r9
 8004804:	eb45 0303 	adc.w	r3, r5, r3
 8004808:	607b      	str	r3, [r7, #4]
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004816:	4629      	mov	r1, r5
 8004818:	028b      	lsls	r3, r1, #10
 800481a:	4621      	mov	r1, r4
 800481c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004820:	4621      	mov	r1, r4
 8004822:	028a      	lsls	r2, r1, #10
 8004824:	4610      	mov	r0, r2
 8004826:	4619      	mov	r1, r3
 8004828:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800482c:	2200      	movs	r2, #0
 800482e:	61bb      	str	r3, [r7, #24]
 8004830:	61fa      	str	r2, [r7, #28]
 8004832:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004836:	f7fc f9ef 	bl	8000c18 <__aeabi_uldivmod>
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	4613      	mov	r3, r2
 8004840:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004844:	4b0d      	ldr	r3, [pc, #52]	@ (800487c <HAL_RCC_GetSysClockFreq+0x348>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	0f1b      	lsrs	r3, r3, #28
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8004852:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004856:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800485a:	fbb2 f3f3 	udiv	r3, r2, r3
 800485e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004862:	e003      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004864:	4b06      	ldr	r3, [pc, #24]	@ (8004880 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004866:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800486a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800486c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004870:	4618      	mov	r0, r3
 8004872:	3798      	adds	r7, #152	@ 0x98
 8004874:	46bd      	mov	sp, r7
 8004876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800487a:	bf00      	nop
 800487c:	40023800 	.word	0x40023800
 8004880:	00f42400 	.word	0x00f42400
 8004884:	017d7840 	.word	0x017d7840

08004888 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e28d      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 8083 	beq.w	80049ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80048a8:	4b94      	ldr	r3, [pc, #592]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 030c 	and.w	r3, r3, #12
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d019      	beq.n	80048e8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80048b4:	4b91      	ldr	r3, [pc, #580]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f003 030c 	and.w	r3, r3, #12
        || \
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d106      	bne.n	80048ce <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80048c0:	4b8e      	ldr	r3, [pc, #568]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048cc:	d00c      	beq.n	80048e8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ce:	4b8b      	ldr	r3, [pc, #556]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80048d6:	2b0c      	cmp	r3, #12
 80048d8:	d112      	bne.n	8004900 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048da:	4b88      	ldr	r3, [pc, #544]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048e6:	d10b      	bne.n	8004900 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e8:	4b84      	ldr	r3, [pc, #528]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d05b      	beq.n	80049ac <HAL_RCC_OscConfig+0x124>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d157      	bne.n	80049ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e25a      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004908:	d106      	bne.n	8004918 <HAL_RCC_OscConfig+0x90>
 800490a:	4b7c      	ldr	r3, [pc, #496]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a7b      	ldr	r2, [pc, #492]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 8004910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	e01d      	b.n	8004954 <HAL_RCC_OscConfig+0xcc>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004920:	d10c      	bne.n	800493c <HAL_RCC_OscConfig+0xb4>
 8004922:	4b76      	ldr	r3, [pc, #472]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a75      	ldr	r2, [pc, #468]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 8004928:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	4b73      	ldr	r3, [pc, #460]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a72      	ldr	r2, [pc, #456]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 8004934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	e00b      	b.n	8004954 <HAL_RCC_OscConfig+0xcc>
 800493c:	4b6f      	ldr	r3, [pc, #444]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a6e      	ldr	r2, [pc, #440]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 8004942:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	4b6c      	ldr	r3, [pc, #432]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a6b      	ldr	r2, [pc, #428]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 800494e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d013      	beq.n	8004984 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495c:	f7fd fdce 	bl	80024fc <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004964:	f7fd fdca 	bl	80024fc <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b64      	cmp	r3, #100	@ 0x64
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e21f      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004976:	4b61      	ldr	r3, [pc, #388]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0xdc>
 8004982:	e014      	b.n	80049ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004984:	f7fd fdba 	bl	80024fc <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800498c:	f7fd fdb6 	bl	80024fc <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b64      	cmp	r3, #100	@ 0x64
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e20b      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800499e:	4b57      	ldr	r3, [pc, #348]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1f0      	bne.n	800498c <HAL_RCC_OscConfig+0x104>
 80049aa:	e000      	b.n	80049ae <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d06f      	beq.n	8004a9a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80049ba:	4b50      	ldr	r3, [pc, #320]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d017      	beq.n	80049f6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80049c6:	4b4d      	ldr	r3, [pc, #308]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 030c 	and.w	r3, r3, #12
        || \
 80049ce:	2b08      	cmp	r3, #8
 80049d0:	d105      	bne.n	80049de <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80049d2:	4b4a      	ldr	r3, [pc, #296]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00b      	beq.n	80049f6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049de:	4b47      	ldr	r3, [pc, #284]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80049e6:	2b0c      	cmp	r3, #12
 80049e8:	d11c      	bne.n	8004a24 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ea:	4b44      	ldr	r3, [pc, #272]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d116      	bne.n	8004a24 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049f6:	4b41      	ldr	r3, [pc, #260]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <HAL_RCC_OscConfig+0x186>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d001      	beq.n	8004a0e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e1d3      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4937      	ldr	r1, [pc, #220]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a22:	e03a      	b.n	8004a9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d020      	beq.n	8004a6e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a2c:	4b34      	ldr	r3, [pc, #208]	@ (8004b00 <HAL_RCC_OscConfig+0x278>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a32:	f7fd fd63 	bl	80024fc <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a3a:	f7fd fd5f 	bl	80024fc <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e1b4      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a58:	4b28      	ldr	r3, [pc, #160]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	4925      	ldr	r1, [pc, #148]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	600b      	str	r3, [r1, #0]
 8004a6c:	e015      	b.n	8004a9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a6e:	4b24      	ldr	r3, [pc, #144]	@ (8004b00 <HAL_RCC_OscConfig+0x278>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a74:	f7fd fd42 	bl	80024fc <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a7c:	f7fd fd3e 	bl	80024fc <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e193      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1f0      	bne.n	8004a7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0308 	and.w	r3, r3, #8
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d036      	beq.n	8004b14 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d016      	beq.n	8004adc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aae:	4b15      	ldr	r3, [pc, #84]	@ (8004b04 <HAL_RCC_OscConfig+0x27c>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab4:	f7fd fd22 	bl	80024fc <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004abc:	f7fd fd1e 	bl	80024fc <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e173      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ace:	4b0b      	ldr	r3, [pc, #44]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 8004ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCC_OscConfig+0x234>
 8004ada:	e01b      	b.n	8004b14 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004adc:	4b09      	ldr	r3, [pc, #36]	@ (8004b04 <HAL_RCC_OscConfig+0x27c>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae2:	f7fd fd0b 	bl	80024fc <HAL_GetTick>
 8004ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae8:	e00e      	b.n	8004b08 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aea:	f7fd fd07 	bl	80024fc <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d907      	bls.n	8004b08 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e15c      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
 8004afc:	40023800 	.word	0x40023800
 8004b00:	42470000 	.word	0x42470000
 8004b04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b08:	4b8a      	ldr	r3, [pc, #552]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004b0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1ea      	bne.n	8004aea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 8097 	beq.w	8004c50 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b22:	2300      	movs	r3, #0
 8004b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b26:	4b83      	ldr	r3, [pc, #524]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10f      	bne.n	8004b52 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b32:	2300      	movs	r3, #0
 8004b34:	60bb      	str	r3, [r7, #8]
 8004b36:	4b7f      	ldr	r3, [pc, #508]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b42:	4b7c      	ldr	r3, [pc, #496]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b4a:	60bb      	str	r3, [r7, #8]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b52:	4b79      	ldr	r3, [pc, #484]	@ (8004d38 <HAL_RCC_OscConfig+0x4b0>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d118      	bne.n	8004b90 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b5e:	4b76      	ldr	r3, [pc, #472]	@ (8004d38 <HAL_RCC_OscConfig+0x4b0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a75      	ldr	r2, [pc, #468]	@ (8004d38 <HAL_RCC_OscConfig+0x4b0>)
 8004b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b6a:	f7fd fcc7 	bl	80024fc <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b72:	f7fd fcc3 	bl	80024fc <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e118      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b84:	4b6c      	ldr	r3, [pc, #432]	@ (8004d38 <HAL_RCC_OscConfig+0x4b0>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f0      	beq.n	8004b72 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d106      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x31e>
 8004b98:	4b66      	ldr	r3, [pc, #408]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9c:	4a65      	ldr	r2, [pc, #404]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004b9e:	f043 0301 	orr.w	r3, r3, #1
 8004ba2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ba4:	e01c      	b.n	8004be0 <HAL_RCC_OscConfig+0x358>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	2b05      	cmp	r3, #5
 8004bac:	d10c      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x340>
 8004bae:	4b61      	ldr	r3, [pc, #388]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb2:	4a60      	ldr	r2, [pc, #384]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004bb4:	f043 0304 	orr.w	r3, r3, #4
 8004bb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bba:	4b5e      	ldr	r3, [pc, #376]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bbe:	4a5d      	ldr	r2, [pc, #372]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004bc0:	f043 0301 	orr.w	r3, r3, #1
 8004bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bc6:	e00b      	b.n	8004be0 <HAL_RCC_OscConfig+0x358>
 8004bc8:	4b5a      	ldr	r3, [pc, #360]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bcc:	4a59      	ldr	r2, [pc, #356]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004bce:	f023 0301 	bic.w	r3, r3, #1
 8004bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bd4:	4b57      	ldr	r3, [pc, #348]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd8:	4a56      	ldr	r2, [pc, #344]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004bda:	f023 0304 	bic.w	r3, r3, #4
 8004bde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d015      	beq.n	8004c14 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be8:	f7fd fc88 	bl	80024fc <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bee:	e00a      	b.n	8004c06 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf0:	f7fd fc84 	bl	80024fc <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e0d7      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c06:	4b4b      	ldr	r3, [pc, #300]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0ee      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x368>
 8004c12:	e014      	b.n	8004c3e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c14:	f7fd fc72 	bl	80024fc <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c1a:	e00a      	b.n	8004c32 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c1c:	f7fd fc6e 	bl	80024fc <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e0c1      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c32:	4b40      	ldr	r3, [pc, #256]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1ee      	bne.n	8004c1c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c3e:	7dfb      	ldrb	r3, [r7, #23]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d105      	bne.n	8004c50 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c44:	4b3b      	ldr	r3, [pc, #236]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c48:	4a3a      	ldr	r2, [pc, #232]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004c4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80ad 	beq.w	8004db4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c5a:	4b36      	ldr	r3, [pc, #216]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
 8004c62:	2b08      	cmp	r3, #8
 8004c64:	d060      	beq.n	8004d28 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d145      	bne.n	8004cfa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c6e:	4b33      	ldr	r3, [pc, #204]	@ (8004d3c <HAL_RCC_OscConfig+0x4b4>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fd fc42 	bl	80024fc <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c7c:	f7fd fc3e 	bl	80024fc <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e093      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c8e:	4b29      	ldr	r3, [pc, #164]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69da      	ldr	r2, [r3, #28]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca8:	019b      	lsls	r3, r3, #6
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb0:	085b      	lsrs	r3, r3, #1
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	041b      	lsls	r3, r3, #16
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbc:	061b      	lsls	r3, r3, #24
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc4:	071b      	lsls	r3, r3, #28
 8004cc6:	491b      	ldr	r1, [pc, #108]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8004d3c <HAL_RCC_OscConfig+0x4b4>)
 8004cce:	2201      	movs	r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd2:	f7fd fc13 	bl	80024fc <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cda:	f7fd fc0f 	bl	80024fc <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e064      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cec:	4b11      	ldr	r3, [pc, #68]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f0      	beq.n	8004cda <HAL_RCC_OscConfig+0x452>
 8004cf8:	e05c      	b.n	8004db4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cfa:	4b10      	ldr	r3, [pc, #64]	@ (8004d3c <HAL_RCC_OscConfig+0x4b4>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d00:	f7fd fbfc 	bl	80024fc <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d08:	f7fd fbf8 	bl	80024fc <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e04d      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1a:	4b06      	ldr	r3, [pc, #24]	@ (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1f0      	bne.n	8004d08 <HAL_RCC_OscConfig+0x480>
 8004d26:	e045      	b.n	8004db4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d107      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e040      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
 8004d34:	40023800 	.word	0x40023800
 8004d38:	40007000 	.word	0x40007000
 8004d3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d40:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc0 <HAL_RCC_OscConfig+0x538>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d030      	beq.n	8004db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d129      	bne.n	8004db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d122      	bne.n	8004db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d70:	4013      	ands	r3, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d119      	bne.n	8004db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d86:	085b      	lsrs	r3, r3, #1
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d10f      	bne.n	8004db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d107      	bne.n	8004db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004daa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d001      	beq.n	8004db4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e000      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40023800 	.word	0x40023800

08004dc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e042      	b.n	8004e5c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d106      	bne.n	8004df0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7fd f9a2 	bl	8002134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2224      	movs	r2, #36	@ 0x24
 8004df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fb83 	bl	8005514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	695a      	ldr	r2, [r3, #20]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08a      	sub	sp, #40	@ 0x28
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	603b      	str	r3, [r7, #0]
 8004e70:	4613      	mov	r3, r2
 8004e72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b20      	cmp	r3, #32
 8004e82:	d175      	bne.n	8004f70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <HAL_UART_Transmit+0x2c>
 8004e8a:	88fb      	ldrh	r3, [r7, #6]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e06e      	b.n	8004f72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2221      	movs	r2, #33	@ 0x21
 8004e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ea2:	f7fd fb2b 	bl	80024fc <HAL_GetTick>
 8004ea6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	88fa      	ldrh	r2, [r7, #6]
 8004eac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	88fa      	ldrh	r2, [r7, #6]
 8004eb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ebc:	d108      	bne.n	8004ed0 <HAL_UART_Transmit+0x6c>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d104      	bne.n	8004ed0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	61bb      	str	r3, [r7, #24]
 8004ece:	e003      	b.n	8004ed8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ed8:	e02e      	b.n	8004f38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	2180      	movs	r1, #128	@ 0x80
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 f995 	bl	8005214 <UART_WaitOnFlagUntilTimeout>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e03a      	b.n	8004f72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10b      	bne.n	8004f1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	461a      	mov	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	3302      	adds	r3, #2
 8004f16:	61bb      	str	r3, [r7, #24]
 8004f18:	e007      	b.n	8004f2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	781a      	ldrb	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	3301      	adds	r3, #1
 8004f28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1cb      	bne.n	8004eda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2140      	movs	r1, #64	@ 0x40
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 f961 	bl	8005214 <UART_WaitOnFlagUntilTimeout>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e006      	b.n	8004f72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	e000      	b.n	8004f72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004f70:	2302      	movs	r3, #2
  }
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3720      	adds	r7, #32
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	60f8      	str	r0, [r7, #12]
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	4613      	mov	r3, r2
 8004f86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b20      	cmp	r3, #32
 8004f92:	d112      	bne.n	8004fba <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d002      	beq.n	8004fa0 <HAL_UART_Receive_DMA+0x26>
 8004f9a:	88fb      	ldrh	r3, [r7, #6]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e00b      	b.n	8004fbc <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004faa:	88fb      	ldrh	r3, [r7, #6]
 8004fac:	461a      	mov	r2, r3
 8004fae:	68b9      	ldr	r1, [r7, #8]
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 f989 	bl	80052c8 <UART_Start_Receive_DMA>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	e000      	b.n	8004fbc <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004fba:	2302      	movs	r3, #2
  }
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b09c      	sub	sp, #112	@ 0x70
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005024:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005030:	2b00      	cmp	r3, #0
 8005032:	d172      	bne.n	800511a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005034:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005036:	2200      	movs	r2, #0
 8005038:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800503a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	330c      	adds	r3, #12
 8005040:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005044:	e853 3f00 	ldrex	r3, [r3]
 8005048:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800504a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800504c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005050:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	330c      	adds	r3, #12
 8005058:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800505a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800505c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005060:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005062:	e841 2300 	strex	r3, r2, [r1]
 8005066:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005068:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1e5      	bne.n	800503a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800506e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3314      	adds	r3, #20
 8005074:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800507e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005080:	f023 0301 	bic.w	r3, r3, #1
 8005084:	667b      	str	r3, [r7, #100]	@ 0x64
 8005086:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3314      	adds	r3, #20
 800508c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800508e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005090:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005092:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005094:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800509c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1e5      	bne.n	800506e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3314      	adds	r3, #20
 80050a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	623b      	str	r3, [r7, #32]
   return(result);
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80050ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3314      	adds	r3, #20
 80050c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80050c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80050c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e5      	bne.n	80050a2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050d8:	2220      	movs	r2, #32
 80050da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d119      	bne.n	800511a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	330c      	adds	r3, #12
 80050ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f023 0310 	bic.w	r3, r3, #16
 80050fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	330c      	adds	r3, #12
 8005104:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005106:	61fa      	str	r2, [r7, #28]
 8005108:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	69b9      	ldr	r1, [r7, #24]
 800510c:	69fa      	ldr	r2, [r7, #28]
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	617b      	str	r3, [r7, #20]
   return(result);
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e5      	bne.n	80050e6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800511a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800511c:	2200      	movs	r2, #0
 800511e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005120:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005124:	2b01      	cmp	r3, #1
 8005126:	d106      	bne.n	8005136 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005128:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800512a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800512c:	4619      	mov	r1, r3
 800512e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005130:	f7ff ff66 	bl	8005000 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005134:	e002      	b.n	800513c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005136:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005138:	f7ff ff44 	bl	8004fc4 <HAL_UART_RxCpltCallback>
}
 800513c:	bf00      	nop
 800513e:	3770      	adds	r7, #112	@ 0x70
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005150:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2201      	movs	r2, #1
 8005156:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515c:	2b01      	cmp	r3, #1
 800515e:	d108      	bne.n	8005172 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005164:	085b      	lsrs	r3, r3, #1
 8005166:	b29b      	uxth	r3, r3
 8005168:	4619      	mov	r1, r3
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f7ff ff48 	bl	8005000 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005170:	e002      	b.n	8005178 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f7ff ff30 	bl	8004fd8 <HAL_UART_RxHalfCpltCallback>
}
 8005178:	bf00      	nop
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005188:	2300      	movs	r3, #0
 800518a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005190:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800519c:	2b80      	cmp	r3, #128	@ 0x80
 800519e:	bf0c      	ite	eq
 80051a0:	2301      	moveq	r3, #1
 80051a2:	2300      	movne	r3, #0
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b21      	cmp	r3, #33	@ 0x21
 80051b2:	d108      	bne.n	80051c6 <UART_DMAError+0x46>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d005      	beq.n	80051c6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2200      	movs	r2, #0
 80051be:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80051c0:	68b8      	ldr	r0, [r7, #8]
 80051c2:	f000 f91b 	bl	80053fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d0:	2b40      	cmp	r3, #64	@ 0x40
 80051d2:	bf0c      	ite	eq
 80051d4:	2301      	moveq	r3, #1
 80051d6:	2300      	movne	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b22      	cmp	r3, #34	@ 0x22
 80051e6:	d108      	bne.n	80051fa <UART_DMAError+0x7a>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d005      	beq.n	80051fa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2200      	movs	r2, #0
 80051f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80051f4:	68b8      	ldr	r0, [r7, #8]
 80051f6:	f000 f929 	bl	800544c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fe:	f043 0210 	orr.w	r2, r3, #16
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005206:	68b8      	ldr	r0, [r7, #8]
 8005208:	f7ff fef0 	bl	8004fec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800520c:	bf00      	nop
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	603b      	str	r3, [r7, #0]
 8005220:	4613      	mov	r3, r2
 8005222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005224:	e03b      	b.n	800529e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800522c:	d037      	beq.n	800529e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800522e:	f7fd f965 	bl	80024fc <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	6a3a      	ldr	r2, [r7, #32]
 800523a:	429a      	cmp	r2, r3
 800523c:	d302      	bcc.n	8005244 <UART_WaitOnFlagUntilTimeout+0x30>
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e03a      	b.n	80052be <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b00      	cmp	r3, #0
 8005254:	d023      	beq.n	800529e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b80      	cmp	r3, #128	@ 0x80
 800525a:	d020      	beq.n	800529e <UART_WaitOnFlagUntilTimeout+0x8a>
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b40      	cmp	r3, #64	@ 0x40
 8005260:	d01d      	beq.n	800529e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0308 	and.w	r3, r3, #8
 800526c:	2b08      	cmp	r3, #8
 800526e:	d116      	bne.n	800529e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005270:	2300      	movs	r3, #0
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 f8e0 	bl	800544c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2208      	movs	r2, #8
 8005290:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e00f      	b.n	80052be <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	4013      	ands	r3, r2
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	bf0c      	ite	eq
 80052ae:	2301      	moveq	r3, #1
 80052b0:	2300      	movne	r3, #0
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	461a      	mov	r2, r3
 80052b6:	79fb      	ldrb	r3, [r7, #7]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d0b4      	beq.n	8005226 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b098      	sub	sp, #96	@ 0x60
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	4613      	mov	r3, r2
 80052d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	88fa      	ldrh	r2, [r7, #6]
 80052e0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2222      	movs	r2, #34	@ 0x22
 80052ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f4:	4a3e      	ldr	r2, [pc, #248]	@ (80053f0 <UART_Start_Receive_DMA+0x128>)
 80052f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052fc:	4a3d      	ldr	r2, [pc, #244]	@ (80053f4 <UART_Start_Receive_DMA+0x12c>)
 80052fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005304:	4a3c      	ldr	r2, [pc, #240]	@ (80053f8 <UART_Start_Receive_DMA+0x130>)
 8005306:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800530c:	2200      	movs	r2, #0
 800530e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005310:	f107 0308 	add.w	r3, r7, #8
 8005314:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3304      	adds	r3, #4
 8005320:	4619      	mov	r1, r3
 8005322:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	f7fd feb4 	bl	8003094 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800532c:	2300      	movs	r3, #0
 800532e:	613b      	str	r3, [r7, #16]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	613b      	str	r3, [r7, #16]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d019      	beq.n	800537e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	330c      	adds	r3, #12
 8005350:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800535a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800535c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005360:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	330c      	adds	r3, #12
 8005368:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800536a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800536c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005370:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005378:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e5      	bne.n	800534a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3314      	adds	r3, #20
 8005384:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800538e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005390:	f043 0301 	orr.w	r3, r3, #1
 8005394:	657b      	str	r3, [r7, #84]	@ 0x54
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3314      	adds	r3, #20
 800539c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800539e:	63ba      	str	r2, [r7, #56]	@ 0x38
 80053a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80053a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053a6:	e841 2300 	strex	r3, r2, [r1]
 80053aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1e5      	bne.n	800537e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3314      	adds	r3, #20
 80053b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	617b      	str	r3, [r7, #20]
   return(result);
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3314      	adds	r3, #20
 80053d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80053d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80053d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	6a39      	ldr	r1, [r7, #32]
 80053d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	61fb      	str	r3, [r7, #28]
   return(result);
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e5      	bne.n	80053b2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3760      	adds	r7, #96	@ 0x60
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	08005019 	.word	0x08005019
 80053f4:	08005145 	.word	0x08005145
 80053f8:	08005181 	.word	0x08005181

080053fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b089      	sub	sp, #36	@ 0x24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	330c      	adds	r3, #12
 800540a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	60bb      	str	r3, [r7, #8]
   return(result);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800541a:	61fb      	str	r3, [r7, #28]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	330c      	adds	r3, #12
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	61ba      	str	r2, [r7, #24]
 8005426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	6979      	ldr	r1, [r7, #20]
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	613b      	str	r3, [r7, #16]
   return(result);
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e5      	bne.n	8005404 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2220      	movs	r2, #32
 800543c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005440:	bf00      	nop
 8005442:	3724      	adds	r7, #36	@ 0x24
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800544c:	b480      	push	{r7}
 800544e:	b095      	sub	sp, #84	@ 0x54
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	330c      	adds	r3, #12
 800545a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800545e:	e853 3f00 	ldrex	r3, [r3]
 8005462:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005466:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800546a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	330c      	adds	r3, #12
 8005472:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005474:	643a      	str	r2, [r7, #64]	@ 0x40
 8005476:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800547a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800547c:	e841 2300 	strex	r3, r2, [r1]
 8005480:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e5      	bne.n	8005454 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	3314      	adds	r3, #20
 800548e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	e853 3f00 	ldrex	r3, [r3]
 8005496:	61fb      	str	r3, [r7, #28]
   return(result);
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	f023 0301 	bic.w	r3, r3, #1
 800549e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3314      	adds	r3, #20
 80054a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054b0:	e841 2300 	strex	r3, r2, [r1]
 80054b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e5      	bne.n	8005488 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d119      	bne.n	80054f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	330c      	adds	r3, #12
 80054ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	e853 3f00 	ldrex	r3, [r3]
 80054d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f023 0310 	bic.w	r3, r3, #16
 80054da:	647b      	str	r3, [r7, #68]	@ 0x44
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	330c      	adds	r3, #12
 80054e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054e4:	61ba      	str	r2, [r7, #24]
 80054e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e8:	6979      	ldr	r1, [r7, #20]
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	e841 2300 	strex	r3, r2, [r1]
 80054f0:	613b      	str	r3, [r7, #16]
   return(result);
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1e5      	bne.n	80054c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005506:	bf00      	nop
 8005508:	3754      	adds	r7, #84	@ 0x54
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
	...

08005514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005518:	b0c0      	sub	sp, #256	@ 0x100
 800551a:	af00      	add	r7, sp, #0
 800551c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800552c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005530:	68d9      	ldr	r1, [r3, #12]
 8005532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	ea40 0301 	orr.w	r3, r0, r1
 800553c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800553e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	431a      	orrs	r2, r3
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	431a      	orrs	r2, r3
 8005554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800556c:	f021 010c 	bic.w	r1, r1, #12
 8005570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800557a:	430b      	orrs	r3, r1
 800557c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800557e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800558a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800558e:	6999      	ldr	r1, [r3, #24]
 8005590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	ea40 0301 	orr.w	r3, r0, r1
 800559a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800559c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	4b8f      	ldr	r3, [pc, #572]	@ (80057e0 <UART_SetConfig+0x2cc>)
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d005      	beq.n	80055b4 <UART_SetConfig+0xa0>
 80055a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	4b8d      	ldr	r3, [pc, #564]	@ (80057e4 <UART_SetConfig+0x2d0>)
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d104      	bne.n	80055be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055b4:	f7fe ffaa 	bl	800450c <HAL_RCC_GetPCLK2Freq>
 80055b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80055bc:	e003      	b.n	80055c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055be:	f7fe ff91 	bl	80044e4 <HAL_RCC_GetPCLK1Freq>
 80055c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055d0:	f040 810c 	bne.w	80057ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055d8:	2200      	movs	r2, #0
 80055da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80055e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80055e6:	4622      	mov	r2, r4
 80055e8:	462b      	mov	r3, r5
 80055ea:	1891      	adds	r1, r2, r2
 80055ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80055ee:	415b      	adcs	r3, r3
 80055f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80055f6:	4621      	mov	r1, r4
 80055f8:	eb12 0801 	adds.w	r8, r2, r1
 80055fc:	4629      	mov	r1, r5
 80055fe:	eb43 0901 	adc.w	r9, r3, r1
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	f04f 0300 	mov.w	r3, #0
 800560a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800560e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005616:	4690      	mov	r8, r2
 8005618:	4699      	mov	r9, r3
 800561a:	4623      	mov	r3, r4
 800561c:	eb18 0303 	adds.w	r3, r8, r3
 8005620:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005624:	462b      	mov	r3, r5
 8005626:	eb49 0303 	adc.w	r3, r9, r3
 800562a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800562e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800563a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800563e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005642:	460b      	mov	r3, r1
 8005644:	18db      	adds	r3, r3, r3
 8005646:	653b      	str	r3, [r7, #80]	@ 0x50
 8005648:	4613      	mov	r3, r2
 800564a:	eb42 0303 	adc.w	r3, r2, r3
 800564e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005650:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005654:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005658:	f7fb fade 	bl	8000c18 <__aeabi_uldivmod>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4b61      	ldr	r3, [pc, #388]	@ (80057e8 <UART_SetConfig+0x2d4>)
 8005662:	fba3 2302 	umull	r2, r3, r3, r2
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	011c      	lsls	r4, r3, #4
 800566a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800566e:	2200      	movs	r2, #0
 8005670:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005674:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005678:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800567c:	4642      	mov	r2, r8
 800567e:	464b      	mov	r3, r9
 8005680:	1891      	adds	r1, r2, r2
 8005682:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005684:	415b      	adcs	r3, r3
 8005686:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005688:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800568c:	4641      	mov	r1, r8
 800568e:	eb12 0a01 	adds.w	sl, r2, r1
 8005692:	4649      	mov	r1, r9
 8005694:	eb43 0b01 	adc.w	fp, r3, r1
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	f04f 0300 	mov.w	r3, #0
 80056a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056ac:	4692      	mov	sl, r2
 80056ae:	469b      	mov	fp, r3
 80056b0:	4643      	mov	r3, r8
 80056b2:	eb1a 0303 	adds.w	r3, sl, r3
 80056b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056ba:	464b      	mov	r3, r9
 80056bc:	eb4b 0303 	adc.w	r3, fp, r3
 80056c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80056c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80056d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056d8:	460b      	mov	r3, r1
 80056da:	18db      	adds	r3, r3, r3
 80056dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80056de:	4613      	mov	r3, r2
 80056e0:	eb42 0303 	adc.w	r3, r2, r3
 80056e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80056e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80056ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80056ee:	f7fb fa93 	bl	8000c18 <__aeabi_uldivmod>
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	4611      	mov	r1, r2
 80056f8:	4b3b      	ldr	r3, [pc, #236]	@ (80057e8 <UART_SetConfig+0x2d4>)
 80056fa:	fba3 2301 	umull	r2, r3, r3, r1
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	2264      	movs	r2, #100	@ 0x64
 8005702:	fb02 f303 	mul.w	r3, r2, r3
 8005706:	1acb      	subs	r3, r1, r3
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800570e:	4b36      	ldr	r3, [pc, #216]	@ (80057e8 <UART_SetConfig+0x2d4>)
 8005710:	fba3 2302 	umull	r2, r3, r3, r2
 8005714:	095b      	lsrs	r3, r3, #5
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800571c:	441c      	add	r4, r3
 800571e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005722:	2200      	movs	r2, #0
 8005724:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005728:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800572c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005730:	4642      	mov	r2, r8
 8005732:	464b      	mov	r3, r9
 8005734:	1891      	adds	r1, r2, r2
 8005736:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005738:	415b      	adcs	r3, r3
 800573a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800573c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005740:	4641      	mov	r1, r8
 8005742:	1851      	adds	r1, r2, r1
 8005744:	6339      	str	r1, [r7, #48]	@ 0x30
 8005746:	4649      	mov	r1, r9
 8005748:	414b      	adcs	r3, r1
 800574a:	637b      	str	r3, [r7, #52]	@ 0x34
 800574c:	f04f 0200 	mov.w	r2, #0
 8005750:	f04f 0300 	mov.w	r3, #0
 8005754:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005758:	4659      	mov	r1, fp
 800575a:	00cb      	lsls	r3, r1, #3
 800575c:	4651      	mov	r1, sl
 800575e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005762:	4651      	mov	r1, sl
 8005764:	00ca      	lsls	r2, r1, #3
 8005766:	4610      	mov	r0, r2
 8005768:	4619      	mov	r1, r3
 800576a:	4603      	mov	r3, r0
 800576c:	4642      	mov	r2, r8
 800576e:	189b      	adds	r3, r3, r2
 8005770:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005774:	464b      	mov	r3, r9
 8005776:	460a      	mov	r2, r1
 8005778:	eb42 0303 	adc.w	r3, r2, r3
 800577c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800578c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005790:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005794:	460b      	mov	r3, r1
 8005796:	18db      	adds	r3, r3, r3
 8005798:	62bb      	str	r3, [r7, #40]	@ 0x28
 800579a:	4613      	mov	r3, r2
 800579c:	eb42 0303 	adc.w	r3, r2, r3
 80057a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80057aa:	f7fb fa35 	bl	8000c18 <__aeabi_uldivmod>
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	4b0d      	ldr	r3, [pc, #52]	@ (80057e8 <UART_SetConfig+0x2d4>)
 80057b4:	fba3 1302 	umull	r1, r3, r3, r2
 80057b8:	095b      	lsrs	r3, r3, #5
 80057ba:	2164      	movs	r1, #100	@ 0x64
 80057bc:	fb01 f303 	mul.w	r3, r1, r3
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	3332      	adds	r3, #50	@ 0x32
 80057c6:	4a08      	ldr	r2, [pc, #32]	@ (80057e8 <UART_SetConfig+0x2d4>)
 80057c8:	fba2 2303 	umull	r2, r3, r2, r3
 80057cc:	095b      	lsrs	r3, r3, #5
 80057ce:	f003 0207 	and.w	r2, r3, #7
 80057d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4422      	add	r2, r4
 80057da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057dc:	e106      	b.n	80059ec <UART_SetConfig+0x4d8>
 80057de:	bf00      	nop
 80057e0:	40011000 	.word	0x40011000
 80057e4:	40011400 	.word	0x40011400
 80057e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057f0:	2200      	movs	r2, #0
 80057f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80057f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80057fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80057fe:	4642      	mov	r2, r8
 8005800:	464b      	mov	r3, r9
 8005802:	1891      	adds	r1, r2, r2
 8005804:	6239      	str	r1, [r7, #32]
 8005806:	415b      	adcs	r3, r3
 8005808:	627b      	str	r3, [r7, #36]	@ 0x24
 800580a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800580e:	4641      	mov	r1, r8
 8005810:	1854      	adds	r4, r2, r1
 8005812:	4649      	mov	r1, r9
 8005814:	eb43 0501 	adc.w	r5, r3, r1
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	00eb      	lsls	r3, r5, #3
 8005822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005826:	00e2      	lsls	r2, r4, #3
 8005828:	4614      	mov	r4, r2
 800582a:	461d      	mov	r5, r3
 800582c:	4643      	mov	r3, r8
 800582e:	18e3      	adds	r3, r4, r3
 8005830:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005834:	464b      	mov	r3, r9
 8005836:	eb45 0303 	adc.w	r3, r5, r3
 800583a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800583e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800584a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800584e:	f04f 0200 	mov.w	r2, #0
 8005852:	f04f 0300 	mov.w	r3, #0
 8005856:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800585a:	4629      	mov	r1, r5
 800585c:	008b      	lsls	r3, r1, #2
 800585e:	4621      	mov	r1, r4
 8005860:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005864:	4621      	mov	r1, r4
 8005866:	008a      	lsls	r2, r1, #2
 8005868:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800586c:	f7fb f9d4 	bl	8000c18 <__aeabi_uldivmod>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4b60      	ldr	r3, [pc, #384]	@ (80059f8 <UART_SetConfig+0x4e4>)
 8005876:	fba3 2302 	umull	r2, r3, r3, r2
 800587a:	095b      	lsrs	r3, r3, #5
 800587c:	011c      	lsls	r4, r3, #4
 800587e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005882:	2200      	movs	r2, #0
 8005884:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005888:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800588c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005890:	4642      	mov	r2, r8
 8005892:	464b      	mov	r3, r9
 8005894:	1891      	adds	r1, r2, r2
 8005896:	61b9      	str	r1, [r7, #24]
 8005898:	415b      	adcs	r3, r3
 800589a:	61fb      	str	r3, [r7, #28]
 800589c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058a0:	4641      	mov	r1, r8
 80058a2:	1851      	adds	r1, r2, r1
 80058a4:	6139      	str	r1, [r7, #16]
 80058a6:	4649      	mov	r1, r9
 80058a8:	414b      	adcs	r3, r1
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058b8:	4659      	mov	r1, fp
 80058ba:	00cb      	lsls	r3, r1, #3
 80058bc:	4651      	mov	r1, sl
 80058be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058c2:	4651      	mov	r1, sl
 80058c4:	00ca      	lsls	r2, r1, #3
 80058c6:	4610      	mov	r0, r2
 80058c8:	4619      	mov	r1, r3
 80058ca:	4603      	mov	r3, r0
 80058cc:	4642      	mov	r2, r8
 80058ce:	189b      	adds	r3, r3, r2
 80058d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058d4:	464b      	mov	r3, r9
 80058d6:	460a      	mov	r2, r1
 80058d8:	eb42 0303 	adc.w	r3, r2, r3
 80058dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	f04f 0300 	mov.w	r3, #0
 80058f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80058f8:	4649      	mov	r1, r9
 80058fa:	008b      	lsls	r3, r1, #2
 80058fc:	4641      	mov	r1, r8
 80058fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005902:	4641      	mov	r1, r8
 8005904:	008a      	lsls	r2, r1, #2
 8005906:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800590a:	f7fb f985 	bl	8000c18 <__aeabi_uldivmod>
 800590e:	4602      	mov	r2, r0
 8005910:	460b      	mov	r3, r1
 8005912:	4611      	mov	r1, r2
 8005914:	4b38      	ldr	r3, [pc, #224]	@ (80059f8 <UART_SetConfig+0x4e4>)
 8005916:	fba3 2301 	umull	r2, r3, r3, r1
 800591a:	095b      	lsrs	r3, r3, #5
 800591c:	2264      	movs	r2, #100	@ 0x64
 800591e:	fb02 f303 	mul.w	r3, r2, r3
 8005922:	1acb      	subs	r3, r1, r3
 8005924:	011b      	lsls	r3, r3, #4
 8005926:	3332      	adds	r3, #50	@ 0x32
 8005928:	4a33      	ldr	r2, [pc, #204]	@ (80059f8 <UART_SetConfig+0x4e4>)
 800592a:	fba2 2303 	umull	r2, r3, r2, r3
 800592e:	095b      	lsrs	r3, r3, #5
 8005930:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005934:	441c      	add	r4, r3
 8005936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800593a:	2200      	movs	r2, #0
 800593c:	673b      	str	r3, [r7, #112]	@ 0x70
 800593e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005940:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005944:	4642      	mov	r2, r8
 8005946:	464b      	mov	r3, r9
 8005948:	1891      	adds	r1, r2, r2
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	415b      	adcs	r3, r3
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005954:	4641      	mov	r1, r8
 8005956:	1851      	adds	r1, r2, r1
 8005958:	6039      	str	r1, [r7, #0]
 800595a:	4649      	mov	r1, r9
 800595c:	414b      	adcs	r3, r1
 800595e:	607b      	str	r3, [r7, #4]
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800596c:	4659      	mov	r1, fp
 800596e:	00cb      	lsls	r3, r1, #3
 8005970:	4651      	mov	r1, sl
 8005972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005976:	4651      	mov	r1, sl
 8005978:	00ca      	lsls	r2, r1, #3
 800597a:	4610      	mov	r0, r2
 800597c:	4619      	mov	r1, r3
 800597e:	4603      	mov	r3, r0
 8005980:	4642      	mov	r2, r8
 8005982:	189b      	adds	r3, r3, r2
 8005984:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005986:	464b      	mov	r3, r9
 8005988:	460a      	mov	r2, r1
 800598a:	eb42 0303 	adc.w	r3, r2, r3
 800598e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	663b      	str	r3, [r7, #96]	@ 0x60
 800599a:	667a      	str	r2, [r7, #100]	@ 0x64
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	f04f 0300 	mov.w	r3, #0
 80059a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80059a8:	4649      	mov	r1, r9
 80059aa:	008b      	lsls	r3, r1, #2
 80059ac:	4641      	mov	r1, r8
 80059ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059b2:	4641      	mov	r1, r8
 80059b4:	008a      	lsls	r2, r1, #2
 80059b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80059ba:	f7fb f92d 	bl	8000c18 <__aeabi_uldivmod>
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	4b0d      	ldr	r3, [pc, #52]	@ (80059f8 <UART_SetConfig+0x4e4>)
 80059c4:	fba3 1302 	umull	r1, r3, r3, r2
 80059c8:	095b      	lsrs	r3, r3, #5
 80059ca:	2164      	movs	r1, #100	@ 0x64
 80059cc:	fb01 f303 	mul.w	r3, r1, r3
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	011b      	lsls	r3, r3, #4
 80059d4:	3332      	adds	r3, #50	@ 0x32
 80059d6:	4a08      	ldr	r2, [pc, #32]	@ (80059f8 <UART_SetConfig+0x4e4>)
 80059d8:	fba2 2303 	umull	r2, r3, r2, r3
 80059dc:	095b      	lsrs	r3, r3, #5
 80059de:	f003 020f 	and.w	r2, r3, #15
 80059e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4422      	add	r2, r4
 80059ea:	609a      	str	r2, [r3, #8]
}
 80059ec:	bf00      	nop
 80059ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80059f2:	46bd      	mov	sp, r7
 80059f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059f8:	51eb851f 	.word	0x51eb851f

080059fc <atan2>:
 80059fc:	f000 b800 	b.w	8005a00 <__ieee754_atan2>

08005a00 <__ieee754_atan2>:
 8005a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a04:	ec57 6b11 	vmov	r6, r7, d1
 8005a08:	4273      	negs	r3, r6
 8005a0a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8005b88 <__ieee754_atan2+0x188>
 8005a0e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8005a12:	4333      	orrs	r3, r6
 8005a14:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005a18:	4543      	cmp	r3, r8
 8005a1a:	ec51 0b10 	vmov	r0, r1, d0
 8005a1e:	4635      	mov	r5, r6
 8005a20:	d809      	bhi.n	8005a36 <__ieee754_atan2+0x36>
 8005a22:	4244      	negs	r4, r0
 8005a24:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005a28:	4304      	orrs	r4, r0
 8005a2a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005a2e:	4544      	cmp	r4, r8
 8005a30:	468e      	mov	lr, r1
 8005a32:	4681      	mov	r9, r0
 8005a34:	d907      	bls.n	8005a46 <__ieee754_atan2+0x46>
 8005a36:	4632      	mov	r2, r6
 8005a38:	463b      	mov	r3, r7
 8005a3a:	f7fa fc3f 	bl	80002bc <__adddf3>
 8005a3e:	ec41 0b10 	vmov	d0, r0, r1
 8005a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a46:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8005a4a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8005a4e:	4334      	orrs	r4, r6
 8005a50:	d103      	bne.n	8005a5a <__ieee754_atan2+0x5a>
 8005a52:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a56:	f000 b8c7 	b.w	8005be8 <atan>
 8005a5a:	17bc      	asrs	r4, r7, #30
 8005a5c:	f004 0402 	and.w	r4, r4, #2
 8005a60:	ea53 0909 	orrs.w	r9, r3, r9
 8005a64:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8005a68:	d107      	bne.n	8005a7a <__ieee754_atan2+0x7a>
 8005a6a:	2c02      	cmp	r4, #2
 8005a6c:	d05f      	beq.n	8005b2e <__ieee754_atan2+0x12e>
 8005a6e:	2c03      	cmp	r4, #3
 8005a70:	d1e5      	bne.n	8005a3e <__ieee754_atan2+0x3e>
 8005a72:	a141      	add	r1, pc, #260	@ (adr r1, 8005b78 <__ieee754_atan2+0x178>)
 8005a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a78:	e7e1      	b.n	8005a3e <__ieee754_atan2+0x3e>
 8005a7a:	4315      	orrs	r5, r2
 8005a7c:	d106      	bne.n	8005a8c <__ieee754_atan2+0x8c>
 8005a7e:	f1be 0f00 	cmp.w	lr, #0
 8005a82:	da5f      	bge.n	8005b44 <__ieee754_atan2+0x144>
 8005a84:	a13e      	add	r1, pc, #248	@ (adr r1, 8005b80 <__ieee754_atan2+0x180>)
 8005a86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a8a:	e7d8      	b.n	8005a3e <__ieee754_atan2+0x3e>
 8005a8c:	4542      	cmp	r2, r8
 8005a8e:	d10f      	bne.n	8005ab0 <__ieee754_atan2+0xb0>
 8005a90:	4293      	cmp	r3, r2
 8005a92:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8005a96:	d107      	bne.n	8005aa8 <__ieee754_atan2+0xa8>
 8005a98:	2c02      	cmp	r4, #2
 8005a9a:	d84c      	bhi.n	8005b36 <__ieee754_atan2+0x136>
 8005a9c:	4b34      	ldr	r3, [pc, #208]	@ (8005b70 <__ieee754_atan2+0x170>)
 8005a9e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005aa2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005aa6:	e7ca      	b.n	8005a3e <__ieee754_atan2+0x3e>
 8005aa8:	2c02      	cmp	r4, #2
 8005aaa:	d848      	bhi.n	8005b3e <__ieee754_atan2+0x13e>
 8005aac:	4b31      	ldr	r3, [pc, #196]	@ (8005b74 <__ieee754_atan2+0x174>)
 8005aae:	e7f6      	b.n	8005a9e <__ieee754_atan2+0x9e>
 8005ab0:	4543      	cmp	r3, r8
 8005ab2:	d0e4      	beq.n	8005a7e <__ieee754_atan2+0x7e>
 8005ab4:	1a9b      	subs	r3, r3, r2
 8005ab6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8005aba:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005abe:	da1e      	bge.n	8005afe <__ieee754_atan2+0xfe>
 8005ac0:	2f00      	cmp	r7, #0
 8005ac2:	da01      	bge.n	8005ac8 <__ieee754_atan2+0xc8>
 8005ac4:	323c      	adds	r2, #60	@ 0x3c
 8005ac6:	db1e      	blt.n	8005b06 <__ieee754_atan2+0x106>
 8005ac8:	4632      	mov	r2, r6
 8005aca:	463b      	mov	r3, r7
 8005acc:	f7fa fed6 	bl	800087c <__aeabi_ddiv>
 8005ad0:	ec41 0b10 	vmov	d0, r0, r1
 8005ad4:	f000 fa20 	bl	8005f18 <fabs>
 8005ad8:	f000 f886 	bl	8005be8 <atan>
 8005adc:	ec51 0b10 	vmov	r0, r1, d0
 8005ae0:	2c01      	cmp	r4, #1
 8005ae2:	d013      	beq.n	8005b0c <__ieee754_atan2+0x10c>
 8005ae4:	2c02      	cmp	r4, #2
 8005ae6:	d015      	beq.n	8005b14 <__ieee754_atan2+0x114>
 8005ae8:	2c00      	cmp	r4, #0
 8005aea:	d0a8      	beq.n	8005a3e <__ieee754_atan2+0x3e>
 8005aec:	a318      	add	r3, pc, #96	@ (adr r3, 8005b50 <__ieee754_atan2+0x150>)
 8005aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af2:	f7fa fbe1 	bl	80002b8 <__aeabi_dsub>
 8005af6:	a318      	add	r3, pc, #96	@ (adr r3, 8005b58 <__ieee754_atan2+0x158>)
 8005af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afc:	e014      	b.n	8005b28 <__ieee754_atan2+0x128>
 8005afe:	a118      	add	r1, pc, #96	@ (adr r1, 8005b60 <__ieee754_atan2+0x160>)
 8005b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b04:	e7ec      	b.n	8005ae0 <__ieee754_atan2+0xe0>
 8005b06:	2000      	movs	r0, #0
 8005b08:	2100      	movs	r1, #0
 8005b0a:	e7e9      	b.n	8005ae0 <__ieee754_atan2+0xe0>
 8005b0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005b10:	4619      	mov	r1, r3
 8005b12:	e794      	b.n	8005a3e <__ieee754_atan2+0x3e>
 8005b14:	a30e      	add	r3, pc, #56	@ (adr r3, 8005b50 <__ieee754_atan2+0x150>)
 8005b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1a:	f7fa fbcd 	bl	80002b8 <__aeabi_dsub>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	a10d      	add	r1, pc, #52	@ (adr r1, 8005b58 <__ieee754_atan2+0x158>)
 8005b24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b28:	f7fa fbc6 	bl	80002b8 <__aeabi_dsub>
 8005b2c:	e787      	b.n	8005a3e <__ieee754_atan2+0x3e>
 8005b2e:	a10a      	add	r1, pc, #40	@ (adr r1, 8005b58 <__ieee754_atan2+0x158>)
 8005b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b34:	e783      	b.n	8005a3e <__ieee754_atan2+0x3e>
 8005b36:	a10c      	add	r1, pc, #48	@ (adr r1, 8005b68 <__ieee754_atan2+0x168>)
 8005b38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b3c:	e77f      	b.n	8005a3e <__ieee754_atan2+0x3e>
 8005b3e:	2000      	movs	r0, #0
 8005b40:	2100      	movs	r1, #0
 8005b42:	e77c      	b.n	8005a3e <__ieee754_atan2+0x3e>
 8005b44:	a106      	add	r1, pc, #24	@ (adr r1, 8005b60 <__ieee754_atan2+0x160>)
 8005b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b4a:	e778      	b.n	8005a3e <__ieee754_atan2+0x3e>
 8005b4c:	f3af 8000 	nop.w
 8005b50:	33145c07 	.word	0x33145c07
 8005b54:	3ca1a626 	.word	0x3ca1a626
 8005b58:	54442d18 	.word	0x54442d18
 8005b5c:	400921fb 	.word	0x400921fb
 8005b60:	54442d18 	.word	0x54442d18
 8005b64:	3ff921fb 	.word	0x3ff921fb
 8005b68:	54442d18 	.word	0x54442d18
 8005b6c:	3fe921fb 	.word	0x3fe921fb
 8005b70:	08007838 	.word	0x08007838
 8005b74:	08007820 	.word	0x08007820
 8005b78:	54442d18 	.word	0x54442d18
 8005b7c:	c00921fb 	.word	0xc00921fb
 8005b80:	54442d18 	.word	0x54442d18
 8005b84:	bff921fb 	.word	0xbff921fb
 8005b88:	7ff00000 	.word	0x7ff00000

08005b8c <sqrt>:
 8005b8c:	b538      	push	{r3, r4, r5, lr}
 8005b8e:	ed2d 8b02 	vpush	{d8}
 8005b92:	ec55 4b10 	vmov	r4, r5, d0
 8005b96:	f000 f9c7 	bl	8005f28 <__ieee754_sqrt>
 8005b9a:	4622      	mov	r2, r4
 8005b9c:	462b      	mov	r3, r5
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	4629      	mov	r1, r5
 8005ba2:	eeb0 8a40 	vmov.f32	s16, s0
 8005ba6:	eef0 8a60 	vmov.f32	s17, s1
 8005baa:	f7fa ffd7 	bl	8000b5c <__aeabi_dcmpun>
 8005bae:	b990      	cbnz	r0, 8005bd6 <sqrt+0x4a>
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	f7fa ffa8 	bl	8000b0c <__aeabi_dcmplt>
 8005bbc:	b158      	cbz	r0, 8005bd6 <sqrt+0x4a>
 8005bbe:	f000 fac9 	bl	8006154 <__errno>
 8005bc2:	2321      	movs	r3, #33	@ 0x21
 8005bc4:	6003      	str	r3, [r0, #0]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	2300      	movs	r3, #0
 8005bca:	4610      	mov	r0, r2
 8005bcc:	4619      	mov	r1, r3
 8005bce:	f7fa fe55 	bl	800087c <__aeabi_ddiv>
 8005bd2:	ec41 0b18 	vmov	d8, r0, r1
 8005bd6:	eeb0 0a48 	vmov.f32	s0, s16
 8005bda:	eef0 0a68 	vmov.f32	s1, s17
 8005bde:	ecbd 8b02 	vpop	{d8}
 8005be2:	bd38      	pop	{r3, r4, r5, pc}
 8005be4:	0000      	movs	r0, r0
	...

08005be8 <atan>:
 8005be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bec:	ec55 4b10 	vmov	r4, r5, d0
 8005bf0:	4bbf      	ldr	r3, [pc, #764]	@ (8005ef0 <atan+0x308>)
 8005bf2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8005bf6:	429e      	cmp	r6, r3
 8005bf8:	46ab      	mov	fp, r5
 8005bfa:	d918      	bls.n	8005c2e <atan+0x46>
 8005bfc:	4bbd      	ldr	r3, [pc, #756]	@ (8005ef4 <atan+0x30c>)
 8005bfe:	429e      	cmp	r6, r3
 8005c00:	d801      	bhi.n	8005c06 <atan+0x1e>
 8005c02:	d109      	bne.n	8005c18 <atan+0x30>
 8005c04:	b144      	cbz	r4, 8005c18 <atan+0x30>
 8005c06:	4622      	mov	r2, r4
 8005c08:	462b      	mov	r3, r5
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	4629      	mov	r1, r5
 8005c0e:	f7fa fb55 	bl	80002bc <__adddf3>
 8005c12:	4604      	mov	r4, r0
 8005c14:	460d      	mov	r5, r1
 8005c16:	e006      	b.n	8005c26 <atan+0x3e>
 8005c18:	f1bb 0f00 	cmp.w	fp, #0
 8005c1c:	f340 812b 	ble.w	8005e76 <atan+0x28e>
 8005c20:	a597      	add	r5, pc, #604	@ (adr r5, 8005e80 <atan+0x298>)
 8005c22:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005c26:	ec45 4b10 	vmov	d0, r4, r5
 8005c2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2e:	4bb2      	ldr	r3, [pc, #712]	@ (8005ef8 <atan+0x310>)
 8005c30:	429e      	cmp	r6, r3
 8005c32:	d813      	bhi.n	8005c5c <atan+0x74>
 8005c34:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8005c38:	429e      	cmp	r6, r3
 8005c3a:	d80c      	bhi.n	8005c56 <atan+0x6e>
 8005c3c:	a392      	add	r3, pc, #584	@ (adr r3, 8005e88 <atan+0x2a0>)
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	4620      	mov	r0, r4
 8005c44:	4629      	mov	r1, r5
 8005c46:	f7fa fb39 	bl	80002bc <__adddf3>
 8005c4a:	4bac      	ldr	r3, [pc, #688]	@ (8005efc <atan+0x314>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f7fa ff7b 	bl	8000b48 <__aeabi_dcmpgt>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d1e7      	bne.n	8005c26 <atan+0x3e>
 8005c56:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005c5a:	e029      	b.n	8005cb0 <atan+0xc8>
 8005c5c:	f000 f95c 	bl	8005f18 <fabs>
 8005c60:	4ba7      	ldr	r3, [pc, #668]	@ (8005f00 <atan+0x318>)
 8005c62:	429e      	cmp	r6, r3
 8005c64:	ec55 4b10 	vmov	r4, r5, d0
 8005c68:	f200 80bc 	bhi.w	8005de4 <atan+0x1fc>
 8005c6c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8005c70:	429e      	cmp	r6, r3
 8005c72:	f200 809e 	bhi.w	8005db2 <atan+0x1ca>
 8005c76:	4622      	mov	r2, r4
 8005c78:	462b      	mov	r3, r5
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	f7fa fb1d 	bl	80002bc <__adddf3>
 8005c82:	4b9e      	ldr	r3, [pc, #632]	@ (8005efc <atan+0x314>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	f7fa fb17 	bl	80002b8 <__aeabi_dsub>
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	4606      	mov	r6, r0
 8005c8e:	460f      	mov	r7, r1
 8005c90:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005c94:	4620      	mov	r0, r4
 8005c96:	4629      	mov	r1, r5
 8005c98:	f7fa fb10 	bl	80002bc <__adddf3>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	4639      	mov	r1, r7
 8005ca4:	f7fa fdea 	bl	800087c <__aeabi_ddiv>
 8005ca8:	f04f 0a00 	mov.w	sl, #0
 8005cac:	4604      	mov	r4, r0
 8005cae:	460d      	mov	r5, r1
 8005cb0:	4622      	mov	r2, r4
 8005cb2:	462b      	mov	r3, r5
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	f7fa fcb6 	bl	8000628 <__aeabi_dmul>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4680      	mov	r8, r0
 8005cc2:	4689      	mov	r9, r1
 8005cc4:	f7fa fcb0 	bl	8000628 <__aeabi_dmul>
 8005cc8:	a371      	add	r3, pc, #452	@ (adr r3, 8005e90 <atan+0x2a8>)
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	4606      	mov	r6, r0
 8005cd0:	460f      	mov	r7, r1
 8005cd2:	f7fa fca9 	bl	8000628 <__aeabi_dmul>
 8005cd6:	a370      	add	r3, pc, #448	@ (adr r3, 8005e98 <atan+0x2b0>)
 8005cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cdc:	f7fa faee 	bl	80002bc <__adddf3>
 8005ce0:	4632      	mov	r2, r6
 8005ce2:	463b      	mov	r3, r7
 8005ce4:	f7fa fca0 	bl	8000628 <__aeabi_dmul>
 8005ce8:	a36d      	add	r3, pc, #436	@ (adr r3, 8005ea0 <atan+0x2b8>)
 8005cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cee:	f7fa fae5 	bl	80002bc <__adddf3>
 8005cf2:	4632      	mov	r2, r6
 8005cf4:	463b      	mov	r3, r7
 8005cf6:	f7fa fc97 	bl	8000628 <__aeabi_dmul>
 8005cfa:	a36b      	add	r3, pc, #428	@ (adr r3, 8005ea8 <atan+0x2c0>)
 8005cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d00:	f7fa fadc 	bl	80002bc <__adddf3>
 8005d04:	4632      	mov	r2, r6
 8005d06:	463b      	mov	r3, r7
 8005d08:	f7fa fc8e 	bl	8000628 <__aeabi_dmul>
 8005d0c:	a368      	add	r3, pc, #416	@ (adr r3, 8005eb0 <atan+0x2c8>)
 8005d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d12:	f7fa fad3 	bl	80002bc <__adddf3>
 8005d16:	4632      	mov	r2, r6
 8005d18:	463b      	mov	r3, r7
 8005d1a:	f7fa fc85 	bl	8000628 <__aeabi_dmul>
 8005d1e:	a366      	add	r3, pc, #408	@ (adr r3, 8005eb8 <atan+0x2d0>)
 8005d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d24:	f7fa faca 	bl	80002bc <__adddf3>
 8005d28:	4642      	mov	r2, r8
 8005d2a:	464b      	mov	r3, r9
 8005d2c:	f7fa fc7c 	bl	8000628 <__aeabi_dmul>
 8005d30:	a363      	add	r3, pc, #396	@ (adr r3, 8005ec0 <atan+0x2d8>)
 8005d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d36:	4680      	mov	r8, r0
 8005d38:	4689      	mov	r9, r1
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	4639      	mov	r1, r7
 8005d3e:	f7fa fc73 	bl	8000628 <__aeabi_dmul>
 8005d42:	a361      	add	r3, pc, #388	@ (adr r3, 8005ec8 <atan+0x2e0>)
 8005d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d48:	f7fa fab6 	bl	80002b8 <__aeabi_dsub>
 8005d4c:	4632      	mov	r2, r6
 8005d4e:	463b      	mov	r3, r7
 8005d50:	f7fa fc6a 	bl	8000628 <__aeabi_dmul>
 8005d54:	a35e      	add	r3, pc, #376	@ (adr r3, 8005ed0 <atan+0x2e8>)
 8005d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5a:	f7fa faad 	bl	80002b8 <__aeabi_dsub>
 8005d5e:	4632      	mov	r2, r6
 8005d60:	463b      	mov	r3, r7
 8005d62:	f7fa fc61 	bl	8000628 <__aeabi_dmul>
 8005d66:	a35c      	add	r3, pc, #368	@ (adr r3, 8005ed8 <atan+0x2f0>)
 8005d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6c:	f7fa faa4 	bl	80002b8 <__aeabi_dsub>
 8005d70:	4632      	mov	r2, r6
 8005d72:	463b      	mov	r3, r7
 8005d74:	f7fa fc58 	bl	8000628 <__aeabi_dmul>
 8005d78:	a359      	add	r3, pc, #356	@ (adr r3, 8005ee0 <atan+0x2f8>)
 8005d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7e:	f7fa fa9b 	bl	80002b8 <__aeabi_dsub>
 8005d82:	4632      	mov	r2, r6
 8005d84:	463b      	mov	r3, r7
 8005d86:	f7fa fc4f 	bl	8000628 <__aeabi_dmul>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	4640      	mov	r0, r8
 8005d90:	4649      	mov	r1, r9
 8005d92:	f7fa fa93 	bl	80002bc <__adddf3>
 8005d96:	4622      	mov	r2, r4
 8005d98:	462b      	mov	r3, r5
 8005d9a:	f7fa fc45 	bl	8000628 <__aeabi_dmul>
 8005d9e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	d148      	bne.n	8005e3a <atan+0x252>
 8005da8:	4620      	mov	r0, r4
 8005daa:	4629      	mov	r1, r5
 8005dac:	f7fa fa84 	bl	80002b8 <__aeabi_dsub>
 8005db0:	e72f      	b.n	8005c12 <atan+0x2a>
 8005db2:	4b52      	ldr	r3, [pc, #328]	@ (8005efc <atan+0x314>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	4620      	mov	r0, r4
 8005db8:	4629      	mov	r1, r5
 8005dba:	f7fa fa7d 	bl	80002b8 <__aeabi_dsub>
 8005dbe:	4b4f      	ldr	r3, [pc, #316]	@ (8005efc <atan+0x314>)
 8005dc0:	4606      	mov	r6, r0
 8005dc2:	460f      	mov	r7, r1
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	4629      	mov	r1, r5
 8005dca:	f7fa fa77 	bl	80002bc <__adddf3>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	4639      	mov	r1, r7
 8005dd6:	f7fa fd51 	bl	800087c <__aeabi_ddiv>
 8005dda:	f04f 0a01 	mov.w	sl, #1
 8005dde:	4604      	mov	r4, r0
 8005de0:	460d      	mov	r5, r1
 8005de2:	e765      	b.n	8005cb0 <atan+0xc8>
 8005de4:	4b47      	ldr	r3, [pc, #284]	@ (8005f04 <atan+0x31c>)
 8005de6:	429e      	cmp	r6, r3
 8005de8:	d21c      	bcs.n	8005e24 <atan+0x23c>
 8005dea:	4b47      	ldr	r3, [pc, #284]	@ (8005f08 <atan+0x320>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	4620      	mov	r0, r4
 8005df0:	4629      	mov	r1, r5
 8005df2:	f7fa fa61 	bl	80002b8 <__aeabi_dsub>
 8005df6:	4b44      	ldr	r3, [pc, #272]	@ (8005f08 <atan+0x320>)
 8005df8:	4606      	mov	r6, r0
 8005dfa:	460f      	mov	r7, r1
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	4620      	mov	r0, r4
 8005e00:	4629      	mov	r1, r5
 8005e02:	f7fa fc11 	bl	8000628 <__aeabi_dmul>
 8005e06:	4b3d      	ldr	r3, [pc, #244]	@ (8005efc <atan+0x314>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f7fa fa57 	bl	80002bc <__adddf3>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	4630      	mov	r0, r6
 8005e14:	4639      	mov	r1, r7
 8005e16:	f7fa fd31 	bl	800087c <__aeabi_ddiv>
 8005e1a:	f04f 0a02 	mov.w	sl, #2
 8005e1e:	4604      	mov	r4, r0
 8005e20:	460d      	mov	r5, r1
 8005e22:	e745      	b.n	8005cb0 <atan+0xc8>
 8005e24:	4622      	mov	r2, r4
 8005e26:	462b      	mov	r3, r5
 8005e28:	4938      	ldr	r1, [pc, #224]	@ (8005f0c <atan+0x324>)
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	f7fa fd26 	bl	800087c <__aeabi_ddiv>
 8005e30:	f04f 0a03 	mov.w	sl, #3
 8005e34:	4604      	mov	r4, r0
 8005e36:	460d      	mov	r5, r1
 8005e38:	e73a      	b.n	8005cb0 <atan+0xc8>
 8005e3a:	4b35      	ldr	r3, [pc, #212]	@ (8005f10 <atan+0x328>)
 8005e3c:	4e35      	ldr	r6, [pc, #212]	@ (8005f14 <atan+0x32c>)
 8005e3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e46:	f7fa fa37 	bl	80002b8 <__aeabi_dsub>
 8005e4a:	4622      	mov	r2, r4
 8005e4c:	462b      	mov	r3, r5
 8005e4e:	f7fa fa33 	bl	80002b8 <__aeabi_dsub>
 8005e52:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8005e56:	4602      	mov	r2, r0
 8005e58:	460b      	mov	r3, r1
 8005e5a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005e5e:	f7fa fa2b 	bl	80002b8 <__aeabi_dsub>
 8005e62:	f1bb 0f00 	cmp.w	fp, #0
 8005e66:	4604      	mov	r4, r0
 8005e68:	460d      	mov	r5, r1
 8005e6a:	f6bf aedc 	bge.w	8005c26 <atan+0x3e>
 8005e6e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005e72:	461d      	mov	r5, r3
 8005e74:	e6d7      	b.n	8005c26 <atan+0x3e>
 8005e76:	a51c      	add	r5, pc, #112	@ (adr r5, 8005ee8 <atan+0x300>)
 8005e78:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005e7c:	e6d3      	b.n	8005c26 <atan+0x3e>
 8005e7e:	bf00      	nop
 8005e80:	54442d18 	.word	0x54442d18
 8005e84:	3ff921fb 	.word	0x3ff921fb
 8005e88:	8800759c 	.word	0x8800759c
 8005e8c:	7e37e43c 	.word	0x7e37e43c
 8005e90:	e322da11 	.word	0xe322da11
 8005e94:	3f90ad3a 	.word	0x3f90ad3a
 8005e98:	24760deb 	.word	0x24760deb
 8005e9c:	3fa97b4b 	.word	0x3fa97b4b
 8005ea0:	a0d03d51 	.word	0xa0d03d51
 8005ea4:	3fb10d66 	.word	0x3fb10d66
 8005ea8:	c54c206e 	.word	0xc54c206e
 8005eac:	3fb745cd 	.word	0x3fb745cd
 8005eb0:	920083ff 	.word	0x920083ff
 8005eb4:	3fc24924 	.word	0x3fc24924
 8005eb8:	5555550d 	.word	0x5555550d
 8005ebc:	3fd55555 	.word	0x3fd55555
 8005ec0:	2c6a6c2f 	.word	0x2c6a6c2f
 8005ec4:	bfa2b444 	.word	0xbfa2b444
 8005ec8:	52defd9a 	.word	0x52defd9a
 8005ecc:	3fadde2d 	.word	0x3fadde2d
 8005ed0:	af749a6d 	.word	0xaf749a6d
 8005ed4:	3fb3b0f2 	.word	0x3fb3b0f2
 8005ed8:	fe231671 	.word	0xfe231671
 8005edc:	3fbc71c6 	.word	0x3fbc71c6
 8005ee0:	9998ebc4 	.word	0x9998ebc4
 8005ee4:	3fc99999 	.word	0x3fc99999
 8005ee8:	54442d18 	.word	0x54442d18
 8005eec:	bff921fb 	.word	0xbff921fb
 8005ef0:	440fffff 	.word	0x440fffff
 8005ef4:	7ff00000 	.word	0x7ff00000
 8005ef8:	3fdbffff 	.word	0x3fdbffff
 8005efc:	3ff00000 	.word	0x3ff00000
 8005f00:	3ff2ffff 	.word	0x3ff2ffff
 8005f04:	40038000 	.word	0x40038000
 8005f08:	3ff80000 	.word	0x3ff80000
 8005f0c:	bff00000 	.word	0xbff00000
 8005f10:	08007850 	.word	0x08007850
 8005f14:	08007870 	.word	0x08007870

08005f18 <fabs>:
 8005f18:	ec51 0b10 	vmov	r0, r1, d0
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005f22:	ec43 2b10 	vmov	d0, r2, r3
 8005f26:	4770      	bx	lr

08005f28 <__ieee754_sqrt>:
 8005f28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f2c:	4a68      	ldr	r2, [pc, #416]	@ (80060d0 <__ieee754_sqrt+0x1a8>)
 8005f2e:	ec55 4b10 	vmov	r4, r5, d0
 8005f32:	43aa      	bics	r2, r5
 8005f34:	462b      	mov	r3, r5
 8005f36:	4621      	mov	r1, r4
 8005f38:	d110      	bne.n	8005f5c <__ieee754_sqrt+0x34>
 8005f3a:	4622      	mov	r2, r4
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	4629      	mov	r1, r5
 8005f40:	f7fa fb72 	bl	8000628 <__aeabi_dmul>
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	4620      	mov	r0, r4
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	f7fa f9b6 	bl	80002bc <__adddf3>
 8005f50:	4604      	mov	r4, r0
 8005f52:	460d      	mov	r5, r1
 8005f54:	ec45 4b10 	vmov	d0, r4, r5
 8005f58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f5c:	2d00      	cmp	r5, #0
 8005f5e:	dc0e      	bgt.n	8005f7e <__ieee754_sqrt+0x56>
 8005f60:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8005f64:	4322      	orrs	r2, r4
 8005f66:	d0f5      	beq.n	8005f54 <__ieee754_sqrt+0x2c>
 8005f68:	b19d      	cbz	r5, 8005f92 <__ieee754_sqrt+0x6a>
 8005f6a:	4622      	mov	r2, r4
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	4629      	mov	r1, r5
 8005f70:	f7fa f9a2 	bl	80002b8 <__aeabi_dsub>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	f7fa fc80 	bl	800087c <__aeabi_ddiv>
 8005f7c:	e7e8      	b.n	8005f50 <__ieee754_sqrt+0x28>
 8005f7e:	152a      	asrs	r2, r5, #20
 8005f80:	d115      	bne.n	8005fae <__ieee754_sqrt+0x86>
 8005f82:	2000      	movs	r0, #0
 8005f84:	e009      	b.n	8005f9a <__ieee754_sqrt+0x72>
 8005f86:	0acb      	lsrs	r3, r1, #11
 8005f88:	3a15      	subs	r2, #21
 8005f8a:	0549      	lsls	r1, r1, #21
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d0fa      	beq.n	8005f86 <__ieee754_sqrt+0x5e>
 8005f90:	e7f7      	b.n	8005f82 <__ieee754_sqrt+0x5a>
 8005f92:	462a      	mov	r2, r5
 8005f94:	e7fa      	b.n	8005f8c <__ieee754_sqrt+0x64>
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	3001      	adds	r0, #1
 8005f9a:	02dc      	lsls	r4, r3, #11
 8005f9c:	d5fb      	bpl.n	8005f96 <__ieee754_sqrt+0x6e>
 8005f9e:	1e44      	subs	r4, r0, #1
 8005fa0:	1b12      	subs	r2, r2, r4
 8005fa2:	f1c0 0420 	rsb	r4, r0, #32
 8005fa6:	fa21 f404 	lsr.w	r4, r1, r4
 8005faa:	4323      	orrs	r3, r4
 8005fac:	4081      	lsls	r1, r0
 8005fae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fb2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8005fb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fba:	07d2      	lsls	r2, r2, #31
 8005fbc:	bf5c      	itt	pl
 8005fbe:	005b      	lslpl	r3, r3, #1
 8005fc0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8005fc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005fc8:	bf58      	it	pl
 8005fca:	0049      	lslpl	r1, r1, #1
 8005fcc:	2600      	movs	r6, #0
 8005fce:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8005fd2:	106d      	asrs	r5, r5, #1
 8005fd4:	0049      	lsls	r1, r1, #1
 8005fd6:	2016      	movs	r0, #22
 8005fd8:	4632      	mov	r2, r6
 8005fda:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8005fde:	1917      	adds	r7, r2, r4
 8005fe0:	429f      	cmp	r7, r3
 8005fe2:	bfde      	ittt	le
 8005fe4:	193a      	addle	r2, r7, r4
 8005fe6:	1bdb      	suble	r3, r3, r7
 8005fe8:	1936      	addle	r6, r6, r4
 8005fea:	0fcf      	lsrs	r7, r1, #31
 8005fec:	3801      	subs	r0, #1
 8005fee:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8005ff2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005ff6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005ffa:	d1f0      	bne.n	8005fde <__ieee754_sqrt+0xb6>
 8005ffc:	4604      	mov	r4, r0
 8005ffe:	2720      	movs	r7, #32
 8006000:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006004:	429a      	cmp	r2, r3
 8006006:	eb00 0e0c 	add.w	lr, r0, ip
 800600a:	db02      	blt.n	8006012 <__ieee754_sqrt+0xea>
 800600c:	d113      	bne.n	8006036 <__ieee754_sqrt+0x10e>
 800600e:	458e      	cmp	lr, r1
 8006010:	d811      	bhi.n	8006036 <__ieee754_sqrt+0x10e>
 8006012:	f1be 0f00 	cmp.w	lr, #0
 8006016:	eb0e 000c 	add.w	r0, lr, ip
 800601a:	da42      	bge.n	80060a2 <__ieee754_sqrt+0x17a>
 800601c:	2800      	cmp	r0, #0
 800601e:	db40      	blt.n	80060a2 <__ieee754_sqrt+0x17a>
 8006020:	f102 0801 	add.w	r8, r2, #1
 8006024:	1a9b      	subs	r3, r3, r2
 8006026:	458e      	cmp	lr, r1
 8006028:	bf88      	it	hi
 800602a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800602e:	eba1 010e 	sub.w	r1, r1, lr
 8006032:	4464      	add	r4, ip
 8006034:	4642      	mov	r2, r8
 8006036:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800603a:	3f01      	subs	r7, #1
 800603c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006040:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006044:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006048:	d1dc      	bne.n	8006004 <__ieee754_sqrt+0xdc>
 800604a:	4319      	orrs	r1, r3
 800604c:	d01b      	beq.n	8006086 <__ieee754_sqrt+0x15e>
 800604e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80060d4 <__ieee754_sqrt+0x1ac>
 8006052:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80060d8 <__ieee754_sqrt+0x1b0>
 8006056:	e9da 0100 	ldrd	r0, r1, [sl]
 800605a:	e9db 2300 	ldrd	r2, r3, [fp]
 800605e:	f7fa f92b 	bl	80002b8 <__aeabi_dsub>
 8006062:	e9da 8900 	ldrd	r8, r9, [sl]
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	4640      	mov	r0, r8
 800606c:	4649      	mov	r1, r9
 800606e:	f7fa fd57 	bl	8000b20 <__aeabi_dcmple>
 8006072:	b140      	cbz	r0, 8006086 <__ieee754_sqrt+0x15e>
 8006074:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8006078:	e9da 0100 	ldrd	r0, r1, [sl]
 800607c:	e9db 2300 	ldrd	r2, r3, [fp]
 8006080:	d111      	bne.n	80060a6 <__ieee754_sqrt+0x17e>
 8006082:	3601      	adds	r6, #1
 8006084:	463c      	mov	r4, r7
 8006086:	1072      	asrs	r2, r6, #1
 8006088:	0863      	lsrs	r3, r4, #1
 800608a:	07f1      	lsls	r1, r6, #31
 800608c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006090:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006094:	bf48      	it	mi
 8006096:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800609a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800609e:	4618      	mov	r0, r3
 80060a0:	e756      	b.n	8005f50 <__ieee754_sqrt+0x28>
 80060a2:	4690      	mov	r8, r2
 80060a4:	e7be      	b.n	8006024 <__ieee754_sqrt+0xfc>
 80060a6:	f7fa f909 	bl	80002bc <__adddf3>
 80060aa:	e9da 8900 	ldrd	r8, r9, [sl]
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	4640      	mov	r0, r8
 80060b4:	4649      	mov	r1, r9
 80060b6:	f7fa fd29 	bl	8000b0c <__aeabi_dcmplt>
 80060ba:	b120      	cbz	r0, 80060c6 <__ieee754_sqrt+0x19e>
 80060bc:	1ca0      	adds	r0, r4, #2
 80060be:	bf08      	it	eq
 80060c0:	3601      	addeq	r6, #1
 80060c2:	3402      	adds	r4, #2
 80060c4:	e7df      	b.n	8006086 <__ieee754_sqrt+0x15e>
 80060c6:	1c63      	adds	r3, r4, #1
 80060c8:	f023 0401 	bic.w	r4, r3, #1
 80060cc:	e7db      	b.n	8006086 <__ieee754_sqrt+0x15e>
 80060ce:	bf00      	nop
 80060d0:	7ff00000 	.word	0x7ff00000
 80060d4:	20000020 	.word	0x20000020
 80060d8:	20000018 	.word	0x20000018

080060dc <sniprintf>:
 80060dc:	b40c      	push	{r2, r3}
 80060de:	b530      	push	{r4, r5, lr}
 80060e0:	4b17      	ldr	r3, [pc, #92]	@ (8006140 <sniprintf+0x64>)
 80060e2:	1e0c      	subs	r4, r1, #0
 80060e4:	681d      	ldr	r5, [r3, #0]
 80060e6:	b09d      	sub	sp, #116	@ 0x74
 80060e8:	da08      	bge.n	80060fc <sniprintf+0x20>
 80060ea:	238b      	movs	r3, #139	@ 0x8b
 80060ec:	602b      	str	r3, [r5, #0]
 80060ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060f2:	b01d      	add	sp, #116	@ 0x74
 80060f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060f8:	b002      	add	sp, #8
 80060fa:	4770      	bx	lr
 80060fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006100:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006104:	bf14      	ite	ne
 8006106:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800610a:	4623      	moveq	r3, r4
 800610c:	9304      	str	r3, [sp, #16]
 800610e:	9307      	str	r3, [sp, #28]
 8006110:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006114:	9002      	str	r0, [sp, #8]
 8006116:	9006      	str	r0, [sp, #24]
 8006118:	f8ad 3016 	strh.w	r3, [sp, #22]
 800611c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800611e:	ab21      	add	r3, sp, #132	@ 0x84
 8006120:	a902      	add	r1, sp, #8
 8006122:	4628      	mov	r0, r5
 8006124:	9301      	str	r3, [sp, #4]
 8006126:	f000 f89d 	bl	8006264 <_svfiprintf_r>
 800612a:	1c43      	adds	r3, r0, #1
 800612c:	bfbc      	itt	lt
 800612e:	238b      	movlt	r3, #139	@ 0x8b
 8006130:	602b      	strlt	r3, [r5, #0]
 8006132:	2c00      	cmp	r4, #0
 8006134:	d0dd      	beq.n	80060f2 <sniprintf+0x16>
 8006136:	9b02      	ldr	r3, [sp, #8]
 8006138:	2200      	movs	r2, #0
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	e7d9      	b.n	80060f2 <sniprintf+0x16>
 800613e:	bf00      	nop
 8006140:	20000028 	.word	0x20000028

08006144 <memset>:
 8006144:	4402      	add	r2, r0
 8006146:	4603      	mov	r3, r0
 8006148:	4293      	cmp	r3, r2
 800614a:	d100      	bne.n	800614e <memset+0xa>
 800614c:	4770      	bx	lr
 800614e:	f803 1b01 	strb.w	r1, [r3], #1
 8006152:	e7f9      	b.n	8006148 <memset+0x4>

08006154 <__errno>:
 8006154:	4b01      	ldr	r3, [pc, #4]	@ (800615c <__errno+0x8>)
 8006156:	6818      	ldr	r0, [r3, #0]
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	20000028 	.word	0x20000028

08006160 <__libc_init_array>:
 8006160:	b570      	push	{r4, r5, r6, lr}
 8006162:	4d0d      	ldr	r5, [pc, #52]	@ (8006198 <__libc_init_array+0x38>)
 8006164:	4c0d      	ldr	r4, [pc, #52]	@ (800619c <__libc_init_array+0x3c>)
 8006166:	1b64      	subs	r4, r4, r5
 8006168:	10a4      	asrs	r4, r4, #2
 800616a:	2600      	movs	r6, #0
 800616c:	42a6      	cmp	r6, r4
 800616e:	d109      	bne.n	8006184 <__libc_init_array+0x24>
 8006170:	4d0b      	ldr	r5, [pc, #44]	@ (80061a0 <__libc_init_array+0x40>)
 8006172:	4c0c      	ldr	r4, [pc, #48]	@ (80061a4 <__libc_init_array+0x44>)
 8006174:	f000 fc66 	bl	8006a44 <_init>
 8006178:	1b64      	subs	r4, r4, r5
 800617a:	10a4      	asrs	r4, r4, #2
 800617c:	2600      	movs	r6, #0
 800617e:	42a6      	cmp	r6, r4
 8006180:	d105      	bne.n	800618e <__libc_init_array+0x2e>
 8006182:	bd70      	pop	{r4, r5, r6, pc}
 8006184:	f855 3b04 	ldr.w	r3, [r5], #4
 8006188:	4798      	blx	r3
 800618a:	3601      	adds	r6, #1
 800618c:	e7ee      	b.n	800616c <__libc_init_array+0xc>
 800618e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006192:	4798      	blx	r3
 8006194:	3601      	adds	r6, #1
 8006196:	e7f2      	b.n	800617e <__libc_init_array+0x1e>
 8006198:	080078cc 	.word	0x080078cc
 800619c:	080078cc 	.word	0x080078cc
 80061a0:	080078cc 	.word	0x080078cc
 80061a4:	080078d0 	.word	0x080078d0

080061a8 <__retarget_lock_acquire_recursive>:
 80061a8:	4770      	bx	lr

080061aa <__retarget_lock_release_recursive>:
 80061aa:	4770      	bx	lr

080061ac <__ssputs_r>:
 80061ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061b0:	688e      	ldr	r6, [r1, #8]
 80061b2:	461f      	mov	r7, r3
 80061b4:	42be      	cmp	r6, r7
 80061b6:	680b      	ldr	r3, [r1, #0]
 80061b8:	4682      	mov	sl, r0
 80061ba:	460c      	mov	r4, r1
 80061bc:	4690      	mov	r8, r2
 80061be:	d82d      	bhi.n	800621c <__ssputs_r+0x70>
 80061c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80061c8:	d026      	beq.n	8006218 <__ssputs_r+0x6c>
 80061ca:	6965      	ldr	r5, [r4, #20]
 80061cc:	6909      	ldr	r1, [r1, #16]
 80061ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061d2:	eba3 0901 	sub.w	r9, r3, r1
 80061d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061da:	1c7b      	adds	r3, r7, #1
 80061dc:	444b      	add	r3, r9
 80061de:	106d      	asrs	r5, r5, #1
 80061e0:	429d      	cmp	r5, r3
 80061e2:	bf38      	it	cc
 80061e4:	461d      	movcc	r5, r3
 80061e6:	0553      	lsls	r3, r2, #21
 80061e8:	d527      	bpl.n	800623a <__ssputs_r+0x8e>
 80061ea:	4629      	mov	r1, r5
 80061ec:	f000 f958 	bl	80064a0 <_malloc_r>
 80061f0:	4606      	mov	r6, r0
 80061f2:	b360      	cbz	r0, 800624e <__ssputs_r+0xa2>
 80061f4:	6921      	ldr	r1, [r4, #16]
 80061f6:	464a      	mov	r2, r9
 80061f8:	f000 fbc4 	bl	8006984 <memcpy>
 80061fc:	89a3      	ldrh	r3, [r4, #12]
 80061fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006206:	81a3      	strh	r3, [r4, #12]
 8006208:	6126      	str	r6, [r4, #16]
 800620a:	6165      	str	r5, [r4, #20]
 800620c:	444e      	add	r6, r9
 800620e:	eba5 0509 	sub.w	r5, r5, r9
 8006212:	6026      	str	r6, [r4, #0]
 8006214:	60a5      	str	r5, [r4, #8]
 8006216:	463e      	mov	r6, r7
 8006218:	42be      	cmp	r6, r7
 800621a:	d900      	bls.n	800621e <__ssputs_r+0x72>
 800621c:	463e      	mov	r6, r7
 800621e:	6820      	ldr	r0, [r4, #0]
 8006220:	4632      	mov	r2, r6
 8006222:	4641      	mov	r1, r8
 8006224:	f000 fb84 	bl	8006930 <memmove>
 8006228:	68a3      	ldr	r3, [r4, #8]
 800622a:	1b9b      	subs	r3, r3, r6
 800622c:	60a3      	str	r3, [r4, #8]
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	4433      	add	r3, r6
 8006232:	6023      	str	r3, [r4, #0]
 8006234:	2000      	movs	r0, #0
 8006236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623a:	462a      	mov	r2, r5
 800623c:	f000 fb4a 	bl	80068d4 <_realloc_r>
 8006240:	4606      	mov	r6, r0
 8006242:	2800      	cmp	r0, #0
 8006244:	d1e0      	bne.n	8006208 <__ssputs_r+0x5c>
 8006246:	6921      	ldr	r1, [r4, #16]
 8006248:	4650      	mov	r0, sl
 800624a:	f000 fba9 	bl	80069a0 <_free_r>
 800624e:	230c      	movs	r3, #12
 8006250:	f8ca 3000 	str.w	r3, [sl]
 8006254:	89a3      	ldrh	r3, [r4, #12]
 8006256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800625a:	81a3      	strh	r3, [r4, #12]
 800625c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006260:	e7e9      	b.n	8006236 <__ssputs_r+0x8a>
	...

08006264 <_svfiprintf_r>:
 8006264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006268:	4698      	mov	r8, r3
 800626a:	898b      	ldrh	r3, [r1, #12]
 800626c:	061b      	lsls	r3, r3, #24
 800626e:	b09d      	sub	sp, #116	@ 0x74
 8006270:	4607      	mov	r7, r0
 8006272:	460d      	mov	r5, r1
 8006274:	4614      	mov	r4, r2
 8006276:	d510      	bpl.n	800629a <_svfiprintf_r+0x36>
 8006278:	690b      	ldr	r3, [r1, #16]
 800627a:	b973      	cbnz	r3, 800629a <_svfiprintf_r+0x36>
 800627c:	2140      	movs	r1, #64	@ 0x40
 800627e:	f000 f90f 	bl	80064a0 <_malloc_r>
 8006282:	6028      	str	r0, [r5, #0]
 8006284:	6128      	str	r0, [r5, #16]
 8006286:	b930      	cbnz	r0, 8006296 <_svfiprintf_r+0x32>
 8006288:	230c      	movs	r3, #12
 800628a:	603b      	str	r3, [r7, #0]
 800628c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006290:	b01d      	add	sp, #116	@ 0x74
 8006292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006296:	2340      	movs	r3, #64	@ 0x40
 8006298:	616b      	str	r3, [r5, #20]
 800629a:	2300      	movs	r3, #0
 800629c:	9309      	str	r3, [sp, #36]	@ 0x24
 800629e:	2320      	movs	r3, #32
 80062a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80062a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80062a8:	2330      	movs	r3, #48	@ 0x30
 80062aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006448 <_svfiprintf_r+0x1e4>
 80062ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062b2:	f04f 0901 	mov.w	r9, #1
 80062b6:	4623      	mov	r3, r4
 80062b8:	469a      	mov	sl, r3
 80062ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062be:	b10a      	cbz	r2, 80062c4 <_svfiprintf_r+0x60>
 80062c0:	2a25      	cmp	r2, #37	@ 0x25
 80062c2:	d1f9      	bne.n	80062b8 <_svfiprintf_r+0x54>
 80062c4:	ebba 0b04 	subs.w	fp, sl, r4
 80062c8:	d00b      	beq.n	80062e2 <_svfiprintf_r+0x7e>
 80062ca:	465b      	mov	r3, fp
 80062cc:	4622      	mov	r2, r4
 80062ce:	4629      	mov	r1, r5
 80062d0:	4638      	mov	r0, r7
 80062d2:	f7ff ff6b 	bl	80061ac <__ssputs_r>
 80062d6:	3001      	adds	r0, #1
 80062d8:	f000 80a7 	beq.w	800642a <_svfiprintf_r+0x1c6>
 80062dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062de:	445a      	add	r2, fp
 80062e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80062e2:	f89a 3000 	ldrb.w	r3, [sl]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 809f 	beq.w	800642a <_svfiprintf_r+0x1c6>
 80062ec:	2300      	movs	r3, #0
 80062ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80062f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062f6:	f10a 0a01 	add.w	sl, sl, #1
 80062fa:	9304      	str	r3, [sp, #16]
 80062fc:	9307      	str	r3, [sp, #28]
 80062fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006302:	931a      	str	r3, [sp, #104]	@ 0x68
 8006304:	4654      	mov	r4, sl
 8006306:	2205      	movs	r2, #5
 8006308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800630c:	484e      	ldr	r0, [pc, #312]	@ (8006448 <_svfiprintf_r+0x1e4>)
 800630e:	f7f9 ff7f 	bl	8000210 <memchr>
 8006312:	9a04      	ldr	r2, [sp, #16]
 8006314:	b9d8      	cbnz	r0, 800634e <_svfiprintf_r+0xea>
 8006316:	06d0      	lsls	r0, r2, #27
 8006318:	bf44      	itt	mi
 800631a:	2320      	movmi	r3, #32
 800631c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006320:	0711      	lsls	r1, r2, #28
 8006322:	bf44      	itt	mi
 8006324:	232b      	movmi	r3, #43	@ 0x2b
 8006326:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800632a:	f89a 3000 	ldrb.w	r3, [sl]
 800632e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006330:	d015      	beq.n	800635e <_svfiprintf_r+0xfa>
 8006332:	9a07      	ldr	r2, [sp, #28]
 8006334:	4654      	mov	r4, sl
 8006336:	2000      	movs	r0, #0
 8006338:	f04f 0c0a 	mov.w	ip, #10
 800633c:	4621      	mov	r1, r4
 800633e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006342:	3b30      	subs	r3, #48	@ 0x30
 8006344:	2b09      	cmp	r3, #9
 8006346:	d94b      	bls.n	80063e0 <_svfiprintf_r+0x17c>
 8006348:	b1b0      	cbz	r0, 8006378 <_svfiprintf_r+0x114>
 800634a:	9207      	str	r2, [sp, #28]
 800634c:	e014      	b.n	8006378 <_svfiprintf_r+0x114>
 800634e:	eba0 0308 	sub.w	r3, r0, r8
 8006352:	fa09 f303 	lsl.w	r3, r9, r3
 8006356:	4313      	orrs	r3, r2
 8006358:	9304      	str	r3, [sp, #16]
 800635a:	46a2      	mov	sl, r4
 800635c:	e7d2      	b.n	8006304 <_svfiprintf_r+0xa0>
 800635e:	9b03      	ldr	r3, [sp, #12]
 8006360:	1d19      	adds	r1, r3, #4
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	9103      	str	r1, [sp, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	bfbb      	ittet	lt
 800636a:	425b      	neglt	r3, r3
 800636c:	f042 0202 	orrlt.w	r2, r2, #2
 8006370:	9307      	strge	r3, [sp, #28]
 8006372:	9307      	strlt	r3, [sp, #28]
 8006374:	bfb8      	it	lt
 8006376:	9204      	strlt	r2, [sp, #16]
 8006378:	7823      	ldrb	r3, [r4, #0]
 800637a:	2b2e      	cmp	r3, #46	@ 0x2e
 800637c:	d10a      	bne.n	8006394 <_svfiprintf_r+0x130>
 800637e:	7863      	ldrb	r3, [r4, #1]
 8006380:	2b2a      	cmp	r3, #42	@ 0x2a
 8006382:	d132      	bne.n	80063ea <_svfiprintf_r+0x186>
 8006384:	9b03      	ldr	r3, [sp, #12]
 8006386:	1d1a      	adds	r2, r3, #4
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	9203      	str	r2, [sp, #12]
 800638c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006390:	3402      	adds	r4, #2
 8006392:	9305      	str	r3, [sp, #20]
 8006394:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006458 <_svfiprintf_r+0x1f4>
 8006398:	7821      	ldrb	r1, [r4, #0]
 800639a:	2203      	movs	r2, #3
 800639c:	4650      	mov	r0, sl
 800639e:	f7f9 ff37 	bl	8000210 <memchr>
 80063a2:	b138      	cbz	r0, 80063b4 <_svfiprintf_r+0x150>
 80063a4:	9b04      	ldr	r3, [sp, #16]
 80063a6:	eba0 000a 	sub.w	r0, r0, sl
 80063aa:	2240      	movs	r2, #64	@ 0x40
 80063ac:	4082      	lsls	r2, r0
 80063ae:	4313      	orrs	r3, r2
 80063b0:	3401      	adds	r4, #1
 80063b2:	9304      	str	r3, [sp, #16]
 80063b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063b8:	4824      	ldr	r0, [pc, #144]	@ (800644c <_svfiprintf_r+0x1e8>)
 80063ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063be:	2206      	movs	r2, #6
 80063c0:	f7f9 ff26 	bl	8000210 <memchr>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	d036      	beq.n	8006436 <_svfiprintf_r+0x1d2>
 80063c8:	4b21      	ldr	r3, [pc, #132]	@ (8006450 <_svfiprintf_r+0x1ec>)
 80063ca:	bb1b      	cbnz	r3, 8006414 <_svfiprintf_r+0x1b0>
 80063cc:	9b03      	ldr	r3, [sp, #12]
 80063ce:	3307      	adds	r3, #7
 80063d0:	f023 0307 	bic.w	r3, r3, #7
 80063d4:	3308      	adds	r3, #8
 80063d6:	9303      	str	r3, [sp, #12]
 80063d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063da:	4433      	add	r3, r6
 80063dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80063de:	e76a      	b.n	80062b6 <_svfiprintf_r+0x52>
 80063e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80063e4:	460c      	mov	r4, r1
 80063e6:	2001      	movs	r0, #1
 80063e8:	e7a8      	b.n	800633c <_svfiprintf_r+0xd8>
 80063ea:	2300      	movs	r3, #0
 80063ec:	3401      	adds	r4, #1
 80063ee:	9305      	str	r3, [sp, #20]
 80063f0:	4619      	mov	r1, r3
 80063f2:	f04f 0c0a 	mov.w	ip, #10
 80063f6:	4620      	mov	r0, r4
 80063f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063fc:	3a30      	subs	r2, #48	@ 0x30
 80063fe:	2a09      	cmp	r2, #9
 8006400:	d903      	bls.n	800640a <_svfiprintf_r+0x1a6>
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0c6      	beq.n	8006394 <_svfiprintf_r+0x130>
 8006406:	9105      	str	r1, [sp, #20]
 8006408:	e7c4      	b.n	8006394 <_svfiprintf_r+0x130>
 800640a:	fb0c 2101 	mla	r1, ip, r1, r2
 800640e:	4604      	mov	r4, r0
 8006410:	2301      	movs	r3, #1
 8006412:	e7f0      	b.n	80063f6 <_svfiprintf_r+0x192>
 8006414:	ab03      	add	r3, sp, #12
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	462a      	mov	r2, r5
 800641a:	4b0e      	ldr	r3, [pc, #56]	@ (8006454 <_svfiprintf_r+0x1f0>)
 800641c:	a904      	add	r1, sp, #16
 800641e:	4638      	mov	r0, r7
 8006420:	f3af 8000 	nop.w
 8006424:	1c42      	adds	r2, r0, #1
 8006426:	4606      	mov	r6, r0
 8006428:	d1d6      	bne.n	80063d8 <_svfiprintf_r+0x174>
 800642a:	89ab      	ldrh	r3, [r5, #12]
 800642c:	065b      	lsls	r3, r3, #25
 800642e:	f53f af2d 	bmi.w	800628c <_svfiprintf_r+0x28>
 8006432:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006434:	e72c      	b.n	8006290 <_svfiprintf_r+0x2c>
 8006436:	ab03      	add	r3, sp, #12
 8006438:	9300      	str	r3, [sp, #0]
 800643a:	462a      	mov	r2, r5
 800643c:	4b05      	ldr	r3, [pc, #20]	@ (8006454 <_svfiprintf_r+0x1f0>)
 800643e:	a904      	add	r1, sp, #16
 8006440:	4638      	mov	r0, r7
 8006442:	f000 f91b 	bl	800667c <_printf_i>
 8006446:	e7ed      	b.n	8006424 <_svfiprintf_r+0x1c0>
 8006448:	08007890 	.word	0x08007890
 800644c:	0800789a 	.word	0x0800789a
 8006450:	00000000 	.word	0x00000000
 8006454:	080061ad 	.word	0x080061ad
 8006458:	08007896 	.word	0x08007896

0800645c <sbrk_aligned>:
 800645c:	b570      	push	{r4, r5, r6, lr}
 800645e:	4e0f      	ldr	r6, [pc, #60]	@ (800649c <sbrk_aligned+0x40>)
 8006460:	460c      	mov	r4, r1
 8006462:	6831      	ldr	r1, [r6, #0]
 8006464:	4605      	mov	r5, r0
 8006466:	b911      	cbnz	r1, 800646e <sbrk_aligned+0x12>
 8006468:	f000 fa7c 	bl	8006964 <_sbrk_r>
 800646c:	6030      	str	r0, [r6, #0]
 800646e:	4621      	mov	r1, r4
 8006470:	4628      	mov	r0, r5
 8006472:	f000 fa77 	bl	8006964 <_sbrk_r>
 8006476:	1c43      	adds	r3, r0, #1
 8006478:	d103      	bne.n	8006482 <sbrk_aligned+0x26>
 800647a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800647e:	4620      	mov	r0, r4
 8006480:	bd70      	pop	{r4, r5, r6, pc}
 8006482:	1cc4      	adds	r4, r0, #3
 8006484:	f024 0403 	bic.w	r4, r4, #3
 8006488:	42a0      	cmp	r0, r4
 800648a:	d0f8      	beq.n	800647e <sbrk_aligned+0x22>
 800648c:	1a21      	subs	r1, r4, r0
 800648e:	4628      	mov	r0, r5
 8006490:	f000 fa68 	bl	8006964 <_sbrk_r>
 8006494:	3001      	adds	r0, #1
 8006496:	d1f2      	bne.n	800647e <sbrk_aligned+0x22>
 8006498:	e7ef      	b.n	800647a <sbrk_aligned+0x1e>
 800649a:	bf00      	nop
 800649c:	20000804 	.word	0x20000804

080064a0 <_malloc_r>:
 80064a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064a4:	1ccd      	adds	r5, r1, #3
 80064a6:	f025 0503 	bic.w	r5, r5, #3
 80064aa:	3508      	adds	r5, #8
 80064ac:	2d0c      	cmp	r5, #12
 80064ae:	bf38      	it	cc
 80064b0:	250c      	movcc	r5, #12
 80064b2:	2d00      	cmp	r5, #0
 80064b4:	4606      	mov	r6, r0
 80064b6:	db01      	blt.n	80064bc <_malloc_r+0x1c>
 80064b8:	42a9      	cmp	r1, r5
 80064ba:	d904      	bls.n	80064c6 <_malloc_r+0x26>
 80064bc:	230c      	movs	r3, #12
 80064be:	6033      	str	r3, [r6, #0]
 80064c0:	2000      	movs	r0, #0
 80064c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800659c <_malloc_r+0xfc>
 80064ca:	f000 f9f7 	bl	80068bc <__malloc_lock>
 80064ce:	f8d8 3000 	ldr.w	r3, [r8]
 80064d2:	461c      	mov	r4, r3
 80064d4:	bb44      	cbnz	r4, 8006528 <_malloc_r+0x88>
 80064d6:	4629      	mov	r1, r5
 80064d8:	4630      	mov	r0, r6
 80064da:	f7ff ffbf 	bl	800645c <sbrk_aligned>
 80064de:	1c43      	adds	r3, r0, #1
 80064e0:	4604      	mov	r4, r0
 80064e2:	d158      	bne.n	8006596 <_malloc_r+0xf6>
 80064e4:	f8d8 4000 	ldr.w	r4, [r8]
 80064e8:	4627      	mov	r7, r4
 80064ea:	2f00      	cmp	r7, #0
 80064ec:	d143      	bne.n	8006576 <_malloc_r+0xd6>
 80064ee:	2c00      	cmp	r4, #0
 80064f0:	d04b      	beq.n	800658a <_malloc_r+0xea>
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	4639      	mov	r1, r7
 80064f6:	4630      	mov	r0, r6
 80064f8:	eb04 0903 	add.w	r9, r4, r3
 80064fc:	f000 fa32 	bl	8006964 <_sbrk_r>
 8006500:	4581      	cmp	r9, r0
 8006502:	d142      	bne.n	800658a <_malloc_r+0xea>
 8006504:	6821      	ldr	r1, [r4, #0]
 8006506:	1a6d      	subs	r5, r5, r1
 8006508:	4629      	mov	r1, r5
 800650a:	4630      	mov	r0, r6
 800650c:	f7ff ffa6 	bl	800645c <sbrk_aligned>
 8006510:	3001      	adds	r0, #1
 8006512:	d03a      	beq.n	800658a <_malloc_r+0xea>
 8006514:	6823      	ldr	r3, [r4, #0]
 8006516:	442b      	add	r3, r5
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	f8d8 3000 	ldr.w	r3, [r8]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	bb62      	cbnz	r2, 800657c <_malloc_r+0xdc>
 8006522:	f8c8 7000 	str.w	r7, [r8]
 8006526:	e00f      	b.n	8006548 <_malloc_r+0xa8>
 8006528:	6822      	ldr	r2, [r4, #0]
 800652a:	1b52      	subs	r2, r2, r5
 800652c:	d420      	bmi.n	8006570 <_malloc_r+0xd0>
 800652e:	2a0b      	cmp	r2, #11
 8006530:	d917      	bls.n	8006562 <_malloc_r+0xc2>
 8006532:	1961      	adds	r1, r4, r5
 8006534:	42a3      	cmp	r3, r4
 8006536:	6025      	str	r5, [r4, #0]
 8006538:	bf18      	it	ne
 800653a:	6059      	strne	r1, [r3, #4]
 800653c:	6863      	ldr	r3, [r4, #4]
 800653e:	bf08      	it	eq
 8006540:	f8c8 1000 	streq.w	r1, [r8]
 8006544:	5162      	str	r2, [r4, r5]
 8006546:	604b      	str	r3, [r1, #4]
 8006548:	4630      	mov	r0, r6
 800654a:	f000 f9bd 	bl	80068c8 <__malloc_unlock>
 800654e:	f104 000b 	add.w	r0, r4, #11
 8006552:	1d23      	adds	r3, r4, #4
 8006554:	f020 0007 	bic.w	r0, r0, #7
 8006558:	1ac2      	subs	r2, r0, r3
 800655a:	bf1c      	itt	ne
 800655c:	1a1b      	subne	r3, r3, r0
 800655e:	50a3      	strne	r3, [r4, r2]
 8006560:	e7af      	b.n	80064c2 <_malloc_r+0x22>
 8006562:	6862      	ldr	r2, [r4, #4]
 8006564:	42a3      	cmp	r3, r4
 8006566:	bf0c      	ite	eq
 8006568:	f8c8 2000 	streq.w	r2, [r8]
 800656c:	605a      	strne	r2, [r3, #4]
 800656e:	e7eb      	b.n	8006548 <_malloc_r+0xa8>
 8006570:	4623      	mov	r3, r4
 8006572:	6864      	ldr	r4, [r4, #4]
 8006574:	e7ae      	b.n	80064d4 <_malloc_r+0x34>
 8006576:	463c      	mov	r4, r7
 8006578:	687f      	ldr	r7, [r7, #4]
 800657a:	e7b6      	b.n	80064ea <_malloc_r+0x4a>
 800657c:	461a      	mov	r2, r3
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	42a3      	cmp	r3, r4
 8006582:	d1fb      	bne.n	800657c <_malloc_r+0xdc>
 8006584:	2300      	movs	r3, #0
 8006586:	6053      	str	r3, [r2, #4]
 8006588:	e7de      	b.n	8006548 <_malloc_r+0xa8>
 800658a:	230c      	movs	r3, #12
 800658c:	6033      	str	r3, [r6, #0]
 800658e:	4630      	mov	r0, r6
 8006590:	f000 f99a 	bl	80068c8 <__malloc_unlock>
 8006594:	e794      	b.n	80064c0 <_malloc_r+0x20>
 8006596:	6005      	str	r5, [r0, #0]
 8006598:	e7d6      	b.n	8006548 <_malloc_r+0xa8>
 800659a:	bf00      	nop
 800659c:	20000808 	.word	0x20000808

080065a0 <_printf_common>:
 80065a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065a4:	4616      	mov	r6, r2
 80065a6:	4698      	mov	r8, r3
 80065a8:	688a      	ldr	r2, [r1, #8]
 80065aa:	690b      	ldr	r3, [r1, #16]
 80065ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065b0:	4293      	cmp	r3, r2
 80065b2:	bfb8      	it	lt
 80065b4:	4613      	movlt	r3, r2
 80065b6:	6033      	str	r3, [r6, #0]
 80065b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80065bc:	4607      	mov	r7, r0
 80065be:	460c      	mov	r4, r1
 80065c0:	b10a      	cbz	r2, 80065c6 <_printf_common+0x26>
 80065c2:	3301      	adds	r3, #1
 80065c4:	6033      	str	r3, [r6, #0]
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	0699      	lsls	r1, r3, #26
 80065ca:	bf42      	ittt	mi
 80065cc:	6833      	ldrmi	r3, [r6, #0]
 80065ce:	3302      	addmi	r3, #2
 80065d0:	6033      	strmi	r3, [r6, #0]
 80065d2:	6825      	ldr	r5, [r4, #0]
 80065d4:	f015 0506 	ands.w	r5, r5, #6
 80065d8:	d106      	bne.n	80065e8 <_printf_common+0x48>
 80065da:	f104 0a19 	add.w	sl, r4, #25
 80065de:	68e3      	ldr	r3, [r4, #12]
 80065e0:	6832      	ldr	r2, [r6, #0]
 80065e2:	1a9b      	subs	r3, r3, r2
 80065e4:	42ab      	cmp	r3, r5
 80065e6:	dc26      	bgt.n	8006636 <_printf_common+0x96>
 80065e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80065ec:	6822      	ldr	r2, [r4, #0]
 80065ee:	3b00      	subs	r3, #0
 80065f0:	bf18      	it	ne
 80065f2:	2301      	movne	r3, #1
 80065f4:	0692      	lsls	r2, r2, #26
 80065f6:	d42b      	bmi.n	8006650 <_printf_common+0xb0>
 80065f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80065fc:	4641      	mov	r1, r8
 80065fe:	4638      	mov	r0, r7
 8006600:	47c8      	blx	r9
 8006602:	3001      	adds	r0, #1
 8006604:	d01e      	beq.n	8006644 <_printf_common+0xa4>
 8006606:	6823      	ldr	r3, [r4, #0]
 8006608:	6922      	ldr	r2, [r4, #16]
 800660a:	f003 0306 	and.w	r3, r3, #6
 800660e:	2b04      	cmp	r3, #4
 8006610:	bf02      	ittt	eq
 8006612:	68e5      	ldreq	r5, [r4, #12]
 8006614:	6833      	ldreq	r3, [r6, #0]
 8006616:	1aed      	subeq	r5, r5, r3
 8006618:	68a3      	ldr	r3, [r4, #8]
 800661a:	bf0c      	ite	eq
 800661c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006620:	2500      	movne	r5, #0
 8006622:	4293      	cmp	r3, r2
 8006624:	bfc4      	itt	gt
 8006626:	1a9b      	subgt	r3, r3, r2
 8006628:	18ed      	addgt	r5, r5, r3
 800662a:	2600      	movs	r6, #0
 800662c:	341a      	adds	r4, #26
 800662e:	42b5      	cmp	r5, r6
 8006630:	d11a      	bne.n	8006668 <_printf_common+0xc8>
 8006632:	2000      	movs	r0, #0
 8006634:	e008      	b.n	8006648 <_printf_common+0xa8>
 8006636:	2301      	movs	r3, #1
 8006638:	4652      	mov	r2, sl
 800663a:	4641      	mov	r1, r8
 800663c:	4638      	mov	r0, r7
 800663e:	47c8      	blx	r9
 8006640:	3001      	adds	r0, #1
 8006642:	d103      	bne.n	800664c <_printf_common+0xac>
 8006644:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800664c:	3501      	adds	r5, #1
 800664e:	e7c6      	b.n	80065de <_printf_common+0x3e>
 8006650:	18e1      	adds	r1, r4, r3
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	2030      	movs	r0, #48	@ 0x30
 8006656:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800665a:	4422      	add	r2, r4
 800665c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006660:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006664:	3302      	adds	r3, #2
 8006666:	e7c7      	b.n	80065f8 <_printf_common+0x58>
 8006668:	2301      	movs	r3, #1
 800666a:	4622      	mov	r2, r4
 800666c:	4641      	mov	r1, r8
 800666e:	4638      	mov	r0, r7
 8006670:	47c8      	blx	r9
 8006672:	3001      	adds	r0, #1
 8006674:	d0e6      	beq.n	8006644 <_printf_common+0xa4>
 8006676:	3601      	adds	r6, #1
 8006678:	e7d9      	b.n	800662e <_printf_common+0x8e>
	...

0800667c <_printf_i>:
 800667c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006680:	7e0f      	ldrb	r7, [r1, #24]
 8006682:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006684:	2f78      	cmp	r7, #120	@ 0x78
 8006686:	4691      	mov	r9, r2
 8006688:	4680      	mov	r8, r0
 800668a:	460c      	mov	r4, r1
 800668c:	469a      	mov	sl, r3
 800668e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006692:	d807      	bhi.n	80066a4 <_printf_i+0x28>
 8006694:	2f62      	cmp	r7, #98	@ 0x62
 8006696:	d80a      	bhi.n	80066ae <_printf_i+0x32>
 8006698:	2f00      	cmp	r7, #0
 800669a:	f000 80d2 	beq.w	8006842 <_printf_i+0x1c6>
 800669e:	2f58      	cmp	r7, #88	@ 0x58
 80066a0:	f000 80b9 	beq.w	8006816 <_printf_i+0x19a>
 80066a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066ac:	e03a      	b.n	8006724 <_printf_i+0xa8>
 80066ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80066b2:	2b15      	cmp	r3, #21
 80066b4:	d8f6      	bhi.n	80066a4 <_printf_i+0x28>
 80066b6:	a101      	add	r1, pc, #4	@ (adr r1, 80066bc <_printf_i+0x40>)
 80066b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066bc:	08006715 	.word	0x08006715
 80066c0:	08006729 	.word	0x08006729
 80066c4:	080066a5 	.word	0x080066a5
 80066c8:	080066a5 	.word	0x080066a5
 80066cc:	080066a5 	.word	0x080066a5
 80066d0:	080066a5 	.word	0x080066a5
 80066d4:	08006729 	.word	0x08006729
 80066d8:	080066a5 	.word	0x080066a5
 80066dc:	080066a5 	.word	0x080066a5
 80066e0:	080066a5 	.word	0x080066a5
 80066e4:	080066a5 	.word	0x080066a5
 80066e8:	08006829 	.word	0x08006829
 80066ec:	08006753 	.word	0x08006753
 80066f0:	080067e3 	.word	0x080067e3
 80066f4:	080066a5 	.word	0x080066a5
 80066f8:	080066a5 	.word	0x080066a5
 80066fc:	0800684b 	.word	0x0800684b
 8006700:	080066a5 	.word	0x080066a5
 8006704:	08006753 	.word	0x08006753
 8006708:	080066a5 	.word	0x080066a5
 800670c:	080066a5 	.word	0x080066a5
 8006710:	080067eb 	.word	0x080067eb
 8006714:	6833      	ldr	r3, [r6, #0]
 8006716:	1d1a      	adds	r2, r3, #4
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6032      	str	r2, [r6, #0]
 800671c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006720:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006724:	2301      	movs	r3, #1
 8006726:	e09d      	b.n	8006864 <_printf_i+0x1e8>
 8006728:	6833      	ldr	r3, [r6, #0]
 800672a:	6820      	ldr	r0, [r4, #0]
 800672c:	1d19      	adds	r1, r3, #4
 800672e:	6031      	str	r1, [r6, #0]
 8006730:	0606      	lsls	r6, r0, #24
 8006732:	d501      	bpl.n	8006738 <_printf_i+0xbc>
 8006734:	681d      	ldr	r5, [r3, #0]
 8006736:	e003      	b.n	8006740 <_printf_i+0xc4>
 8006738:	0645      	lsls	r5, r0, #25
 800673a:	d5fb      	bpl.n	8006734 <_printf_i+0xb8>
 800673c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006740:	2d00      	cmp	r5, #0
 8006742:	da03      	bge.n	800674c <_printf_i+0xd0>
 8006744:	232d      	movs	r3, #45	@ 0x2d
 8006746:	426d      	negs	r5, r5
 8006748:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800674c:	4859      	ldr	r0, [pc, #356]	@ (80068b4 <_printf_i+0x238>)
 800674e:	230a      	movs	r3, #10
 8006750:	e011      	b.n	8006776 <_printf_i+0xfa>
 8006752:	6821      	ldr	r1, [r4, #0]
 8006754:	6833      	ldr	r3, [r6, #0]
 8006756:	0608      	lsls	r0, r1, #24
 8006758:	f853 5b04 	ldr.w	r5, [r3], #4
 800675c:	d402      	bmi.n	8006764 <_printf_i+0xe8>
 800675e:	0649      	lsls	r1, r1, #25
 8006760:	bf48      	it	mi
 8006762:	b2ad      	uxthmi	r5, r5
 8006764:	2f6f      	cmp	r7, #111	@ 0x6f
 8006766:	4853      	ldr	r0, [pc, #332]	@ (80068b4 <_printf_i+0x238>)
 8006768:	6033      	str	r3, [r6, #0]
 800676a:	bf14      	ite	ne
 800676c:	230a      	movne	r3, #10
 800676e:	2308      	moveq	r3, #8
 8006770:	2100      	movs	r1, #0
 8006772:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006776:	6866      	ldr	r6, [r4, #4]
 8006778:	60a6      	str	r6, [r4, #8]
 800677a:	2e00      	cmp	r6, #0
 800677c:	bfa2      	ittt	ge
 800677e:	6821      	ldrge	r1, [r4, #0]
 8006780:	f021 0104 	bicge.w	r1, r1, #4
 8006784:	6021      	strge	r1, [r4, #0]
 8006786:	b90d      	cbnz	r5, 800678c <_printf_i+0x110>
 8006788:	2e00      	cmp	r6, #0
 800678a:	d04b      	beq.n	8006824 <_printf_i+0x1a8>
 800678c:	4616      	mov	r6, r2
 800678e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006792:	fb03 5711 	mls	r7, r3, r1, r5
 8006796:	5dc7      	ldrb	r7, [r0, r7]
 8006798:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800679c:	462f      	mov	r7, r5
 800679e:	42bb      	cmp	r3, r7
 80067a0:	460d      	mov	r5, r1
 80067a2:	d9f4      	bls.n	800678e <_printf_i+0x112>
 80067a4:	2b08      	cmp	r3, #8
 80067a6:	d10b      	bne.n	80067c0 <_printf_i+0x144>
 80067a8:	6823      	ldr	r3, [r4, #0]
 80067aa:	07df      	lsls	r7, r3, #31
 80067ac:	d508      	bpl.n	80067c0 <_printf_i+0x144>
 80067ae:	6923      	ldr	r3, [r4, #16]
 80067b0:	6861      	ldr	r1, [r4, #4]
 80067b2:	4299      	cmp	r1, r3
 80067b4:	bfde      	ittt	le
 80067b6:	2330      	movle	r3, #48	@ 0x30
 80067b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067bc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80067c0:	1b92      	subs	r2, r2, r6
 80067c2:	6122      	str	r2, [r4, #16]
 80067c4:	f8cd a000 	str.w	sl, [sp]
 80067c8:	464b      	mov	r3, r9
 80067ca:	aa03      	add	r2, sp, #12
 80067cc:	4621      	mov	r1, r4
 80067ce:	4640      	mov	r0, r8
 80067d0:	f7ff fee6 	bl	80065a0 <_printf_common>
 80067d4:	3001      	adds	r0, #1
 80067d6:	d14a      	bne.n	800686e <_printf_i+0x1f2>
 80067d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067dc:	b004      	add	sp, #16
 80067de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	f043 0320 	orr.w	r3, r3, #32
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	4833      	ldr	r0, [pc, #204]	@ (80068b8 <_printf_i+0x23c>)
 80067ec:	2778      	movs	r7, #120	@ 0x78
 80067ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	6831      	ldr	r1, [r6, #0]
 80067f6:	061f      	lsls	r7, r3, #24
 80067f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80067fc:	d402      	bmi.n	8006804 <_printf_i+0x188>
 80067fe:	065f      	lsls	r7, r3, #25
 8006800:	bf48      	it	mi
 8006802:	b2ad      	uxthmi	r5, r5
 8006804:	6031      	str	r1, [r6, #0]
 8006806:	07d9      	lsls	r1, r3, #31
 8006808:	bf44      	itt	mi
 800680a:	f043 0320 	orrmi.w	r3, r3, #32
 800680e:	6023      	strmi	r3, [r4, #0]
 8006810:	b11d      	cbz	r5, 800681a <_printf_i+0x19e>
 8006812:	2310      	movs	r3, #16
 8006814:	e7ac      	b.n	8006770 <_printf_i+0xf4>
 8006816:	4827      	ldr	r0, [pc, #156]	@ (80068b4 <_printf_i+0x238>)
 8006818:	e7e9      	b.n	80067ee <_printf_i+0x172>
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	f023 0320 	bic.w	r3, r3, #32
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	e7f6      	b.n	8006812 <_printf_i+0x196>
 8006824:	4616      	mov	r6, r2
 8006826:	e7bd      	b.n	80067a4 <_printf_i+0x128>
 8006828:	6833      	ldr	r3, [r6, #0]
 800682a:	6825      	ldr	r5, [r4, #0]
 800682c:	6961      	ldr	r1, [r4, #20]
 800682e:	1d18      	adds	r0, r3, #4
 8006830:	6030      	str	r0, [r6, #0]
 8006832:	062e      	lsls	r6, r5, #24
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	d501      	bpl.n	800683c <_printf_i+0x1c0>
 8006838:	6019      	str	r1, [r3, #0]
 800683a:	e002      	b.n	8006842 <_printf_i+0x1c6>
 800683c:	0668      	lsls	r0, r5, #25
 800683e:	d5fb      	bpl.n	8006838 <_printf_i+0x1bc>
 8006840:	8019      	strh	r1, [r3, #0]
 8006842:	2300      	movs	r3, #0
 8006844:	6123      	str	r3, [r4, #16]
 8006846:	4616      	mov	r6, r2
 8006848:	e7bc      	b.n	80067c4 <_printf_i+0x148>
 800684a:	6833      	ldr	r3, [r6, #0]
 800684c:	1d1a      	adds	r2, r3, #4
 800684e:	6032      	str	r2, [r6, #0]
 8006850:	681e      	ldr	r6, [r3, #0]
 8006852:	6862      	ldr	r2, [r4, #4]
 8006854:	2100      	movs	r1, #0
 8006856:	4630      	mov	r0, r6
 8006858:	f7f9 fcda 	bl	8000210 <memchr>
 800685c:	b108      	cbz	r0, 8006862 <_printf_i+0x1e6>
 800685e:	1b80      	subs	r0, r0, r6
 8006860:	6060      	str	r0, [r4, #4]
 8006862:	6863      	ldr	r3, [r4, #4]
 8006864:	6123      	str	r3, [r4, #16]
 8006866:	2300      	movs	r3, #0
 8006868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800686c:	e7aa      	b.n	80067c4 <_printf_i+0x148>
 800686e:	6923      	ldr	r3, [r4, #16]
 8006870:	4632      	mov	r2, r6
 8006872:	4649      	mov	r1, r9
 8006874:	4640      	mov	r0, r8
 8006876:	47d0      	blx	sl
 8006878:	3001      	adds	r0, #1
 800687a:	d0ad      	beq.n	80067d8 <_printf_i+0x15c>
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	079b      	lsls	r3, r3, #30
 8006880:	d413      	bmi.n	80068aa <_printf_i+0x22e>
 8006882:	68e0      	ldr	r0, [r4, #12]
 8006884:	9b03      	ldr	r3, [sp, #12]
 8006886:	4298      	cmp	r0, r3
 8006888:	bfb8      	it	lt
 800688a:	4618      	movlt	r0, r3
 800688c:	e7a6      	b.n	80067dc <_printf_i+0x160>
 800688e:	2301      	movs	r3, #1
 8006890:	4632      	mov	r2, r6
 8006892:	4649      	mov	r1, r9
 8006894:	4640      	mov	r0, r8
 8006896:	47d0      	blx	sl
 8006898:	3001      	adds	r0, #1
 800689a:	d09d      	beq.n	80067d8 <_printf_i+0x15c>
 800689c:	3501      	adds	r5, #1
 800689e:	68e3      	ldr	r3, [r4, #12]
 80068a0:	9903      	ldr	r1, [sp, #12]
 80068a2:	1a5b      	subs	r3, r3, r1
 80068a4:	42ab      	cmp	r3, r5
 80068a6:	dcf2      	bgt.n	800688e <_printf_i+0x212>
 80068a8:	e7eb      	b.n	8006882 <_printf_i+0x206>
 80068aa:	2500      	movs	r5, #0
 80068ac:	f104 0619 	add.w	r6, r4, #25
 80068b0:	e7f5      	b.n	800689e <_printf_i+0x222>
 80068b2:	bf00      	nop
 80068b4:	080078a1 	.word	0x080078a1
 80068b8:	080078b2 	.word	0x080078b2

080068bc <__malloc_lock>:
 80068bc:	4801      	ldr	r0, [pc, #4]	@ (80068c4 <__malloc_lock+0x8>)
 80068be:	f7ff bc73 	b.w	80061a8 <__retarget_lock_acquire_recursive>
 80068c2:	bf00      	nop
 80068c4:	20000800 	.word	0x20000800

080068c8 <__malloc_unlock>:
 80068c8:	4801      	ldr	r0, [pc, #4]	@ (80068d0 <__malloc_unlock+0x8>)
 80068ca:	f7ff bc6e 	b.w	80061aa <__retarget_lock_release_recursive>
 80068ce:	bf00      	nop
 80068d0:	20000800 	.word	0x20000800

080068d4 <_realloc_r>:
 80068d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d8:	4680      	mov	r8, r0
 80068da:	4615      	mov	r5, r2
 80068dc:	460c      	mov	r4, r1
 80068de:	b921      	cbnz	r1, 80068ea <_realloc_r+0x16>
 80068e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068e4:	4611      	mov	r1, r2
 80068e6:	f7ff bddb 	b.w	80064a0 <_malloc_r>
 80068ea:	b92a      	cbnz	r2, 80068f8 <_realloc_r+0x24>
 80068ec:	f000 f858 	bl	80069a0 <_free_r>
 80068f0:	2400      	movs	r4, #0
 80068f2:	4620      	mov	r0, r4
 80068f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068f8:	f000 f89c 	bl	8006a34 <_malloc_usable_size_r>
 80068fc:	4285      	cmp	r5, r0
 80068fe:	4606      	mov	r6, r0
 8006900:	d802      	bhi.n	8006908 <_realloc_r+0x34>
 8006902:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006906:	d8f4      	bhi.n	80068f2 <_realloc_r+0x1e>
 8006908:	4629      	mov	r1, r5
 800690a:	4640      	mov	r0, r8
 800690c:	f7ff fdc8 	bl	80064a0 <_malloc_r>
 8006910:	4607      	mov	r7, r0
 8006912:	2800      	cmp	r0, #0
 8006914:	d0ec      	beq.n	80068f0 <_realloc_r+0x1c>
 8006916:	42b5      	cmp	r5, r6
 8006918:	462a      	mov	r2, r5
 800691a:	4621      	mov	r1, r4
 800691c:	bf28      	it	cs
 800691e:	4632      	movcs	r2, r6
 8006920:	f000 f830 	bl	8006984 <memcpy>
 8006924:	4621      	mov	r1, r4
 8006926:	4640      	mov	r0, r8
 8006928:	f000 f83a 	bl	80069a0 <_free_r>
 800692c:	463c      	mov	r4, r7
 800692e:	e7e0      	b.n	80068f2 <_realloc_r+0x1e>

08006930 <memmove>:
 8006930:	4288      	cmp	r0, r1
 8006932:	b510      	push	{r4, lr}
 8006934:	eb01 0402 	add.w	r4, r1, r2
 8006938:	d902      	bls.n	8006940 <memmove+0x10>
 800693a:	4284      	cmp	r4, r0
 800693c:	4623      	mov	r3, r4
 800693e:	d807      	bhi.n	8006950 <memmove+0x20>
 8006940:	1e43      	subs	r3, r0, #1
 8006942:	42a1      	cmp	r1, r4
 8006944:	d008      	beq.n	8006958 <memmove+0x28>
 8006946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800694a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800694e:	e7f8      	b.n	8006942 <memmove+0x12>
 8006950:	4402      	add	r2, r0
 8006952:	4601      	mov	r1, r0
 8006954:	428a      	cmp	r2, r1
 8006956:	d100      	bne.n	800695a <memmove+0x2a>
 8006958:	bd10      	pop	{r4, pc}
 800695a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800695e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006962:	e7f7      	b.n	8006954 <memmove+0x24>

08006964 <_sbrk_r>:
 8006964:	b538      	push	{r3, r4, r5, lr}
 8006966:	4d06      	ldr	r5, [pc, #24]	@ (8006980 <_sbrk_r+0x1c>)
 8006968:	2300      	movs	r3, #0
 800696a:	4604      	mov	r4, r0
 800696c:	4608      	mov	r0, r1
 800696e:	602b      	str	r3, [r5, #0]
 8006970:	f7fb fcec 	bl	800234c <_sbrk>
 8006974:	1c43      	adds	r3, r0, #1
 8006976:	d102      	bne.n	800697e <_sbrk_r+0x1a>
 8006978:	682b      	ldr	r3, [r5, #0]
 800697a:	b103      	cbz	r3, 800697e <_sbrk_r+0x1a>
 800697c:	6023      	str	r3, [r4, #0]
 800697e:	bd38      	pop	{r3, r4, r5, pc}
 8006980:	2000080c 	.word	0x2000080c

08006984 <memcpy>:
 8006984:	440a      	add	r2, r1
 8006986:	4291      	cmp	r1, r2
 8006988:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800698c:	d100      	bne.n	8006990 <memcpy+0xc>
 800698e:	4770      	bx	lr
 8006990:	b510      	push	{r4, lr}
 8006992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800699a:	4291      	cmp	r1, r2
 800699c:	d1f9      	bne.n	8006992 <memcpy+0xe>
 800699e:	bd10      	pop	{r4, pc}

080069a0 <_free_r>:
 80069a0:	b538      	push	{r3, r4, r5, lr}
 80069a2:	4605      	mov	r5, r0
 80069a4:	2900      	cmp	r1, #0
 80069a6:	d041      	beq.n	8006a2c <_free_r+0x8c>
 80069a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069ac:	1f0c      	subs	r4, r1, #4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	bfb8      	it	lt
 80069b2:	18e4      	addlt	r4, r4, r3
 80069b4:	f7ff ff82 	bl	80068bc <__malloc_lock>
 80069b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006a30 <_free_r+0x90>)
 80069ba:	6813      	ldr	r3, [r2, #0]
 80069bc:	b933      	cbnz	r3, 80069cc <_free_r+0x2c>
 80069be:	6063      	str	r3, [r4, #4]
 80069c0:	6014      	str	r4, [r2, #0]
 80069c2:	4628      	mov	r0, r5
 80069c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069c8:	f7ff bf7e 	b.w	80068c8 <__malloc_unlock>
 80069cc:	42a3      	cmp	r3, r4
 80069ce:	d908      	bls.n	80069e2 <_free_r+0x42>
 80069d0:	6820      	ldr	r0, [r4, #0]
 80069d2:	1821      	adds	r1, r4, r0
 80069d4:	428b      	cmp	r3, r1
 80069d6:	bf01      	itttt	eq
 80069d8:	6819      	ldreq	r1, [r3, #0]
 80069da:	685b      	ldreq	r3, [r3, #4]
 80069dc:	1809      	addeq	r1, r1, r0
 80069de:	6021      	streq	r1, [r4, #0]
 80069e0:	e7ed      	b.n	80069be <_free_r+0x1e>
 80069e2:	461a      	mov	r2, r3
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	b10b      	cbz	r3, 80069ec <_free_r+0x4c>
 80069e8:	42a3      	cmp	r3, r4
 80069ea:	d9fa      	bls.n	80069e2 <_free_r+0x42>
 80069ec:	6811      	ldr	r1, [r2, #0]
 80069ee:	1850      	adds	r0, r2, r1
 80069f0:	42a0      	cmp	r0, r4
 80069f2:	d10b      	bne.n	8006a0c <_free_r+0x6c>
 80069f4:	6820      	ldr	r0, [r4, #0]
 80069f6:	4401      	add	r1, r0
 80069f8:	1850      	adds	r0, r2, r1
 80069fa:	4283      	cmp	r3, r0
 80069fc:	6011      	str	r1, [r2, #0]
 80069fe:	d1e0      	bne.n	80069c2 <_free_r+0x22>
 8006a00:	6818      	ldr	r0, [r3, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	6053      	str	r3, [r2, #4]
 8006a06:	4408      	add	r0, r1
 8006a08:	6010      	str	r0, [r2, #0]
 8006a0a:	e7da      	b.n	80069c2 <_free_r+0x22>
 8006a0c:	d902      	bls.n	8006a14 <_free_r+0x74>
 8006a0e:	230c      	movs	r3, #12
 8006a10:	602b      	str	r3, [r5, #0]
 8006a12:	e7d6      	b.n	80069c2 <_free_r+0x22>
 8006a14:	6820      	ldr	r0, [r4, #0]
 8006a16:	1821      	adds	r1, r4, r0
 8006a18:	428b      	cmp	r3, r1
 8006a1a:	bf04      	itt	eq
 8006a1c:	6819      	ldreq	r1, [r3, #0]
 8006a1e:	685b      	ldreq	r3, [r3, #4]
 8006a20:	6063      	str	r3, [r4, #4]
 8006a22:	bf04      	itt	eq
 8006a24:	1809      	addeq	r1, r1, r0
 8006a26:	6021      	streq	r1, [r4, #0]
 8006a28:	6054      	str	r4, [r2, #4]
 8006a2a:	e7ca      	b.n	80069c2 <_free_r+0x22>
 8006a2c:	bd38      	pop	{r3, r4, r5, pc}
 8006a2e:	bf00      	nop
 8006a30:	20000808 	.word	0x20000808

08006a34 <_malloc_usable_size_r>:
 8006a34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a38:	1f18      	subs	r0, r3, #4
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	bfbc      	itt	lt
 8006a3e:	580b      	ldrlt	r3, [r1, r0]
 8006a40:	18c0      	addlt	r0, r0, r3
 8006a42:	4770      	bx	lr

08006a44 <_init>:
 8006a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a46:	bf00      	nop
 8006a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a4a:	bc08      	pop	{r3}
 8006a4c:	469e      	mov	lr, r3
 8006a4e:	4770      	bx	lr

08006a50 <_fini>:
 8006a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a52:	bf00      	nop
 8006a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a56:	bc08      	pop	{r3}
 8006a58:	469e      	mov	lr, r3
 8006a5a:	4770      	bx	lr
