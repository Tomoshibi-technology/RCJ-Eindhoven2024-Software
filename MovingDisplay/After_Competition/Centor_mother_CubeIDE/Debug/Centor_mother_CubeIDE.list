
Centor_mother_CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d18  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004ee0  08004ee0  00005ee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f78  08004f78  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  08004f78  08004f78  00005f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f80  08004f80  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f80  08004f80  00005f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f84  08004f84  00005f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004f88  00006000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000070  08004ff8  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08004ff8  00006398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfbf  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f2f  00000000  00000000  0001205f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  00013f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000069e  00000000  00000000  00014820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024cd4  00000000  00000000  00014ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bdd9  00000000  00000000  00039b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d813e  00000000  00000000  0004596b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011daa9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026f4  00000000  00000000  0011daec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  001201e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004ec8 	.word	0x08004ec8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	08004ec8 	.word	0x08004ec8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_uldivmod>:
 8000b70:	b953      	cbnz	r3, 8000b88 <__aeabi_uldivmod+0x18>
 8000b72:	b94a      	cbnz	r2, 8000b88 <__aeabi_uldivmod+0x18>
 8000b74:	2900      	cmp	r1, #0
 8000b76:	bf08      	it	eq
 8000b78:	2800      	cmpeq	r0, #0
 8000b7a:	bf1c      	itt	ne
 8000b7c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b80:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b84:	f000 b96a 	b.w	8000e5c <__aeabi_idiv0>
 8000b88:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b90:	f000 f806 	bl	8000ba0 <__udivmoddi4>
 8000b94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b9c:	b004      	add	sp, #16
 8000b9e:	4770      	bx	lr

08000ba0 <__udivmoddi4>:
 8000ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba4:	9d08      	ldr	r5, [sp, #32]
 8000ba6:	460c      	mov	r4, r1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d14e      	bne.n	8000c4a <__udivmoddi4+0xaa>
 8000bac:	4694      	mov	ip, r2
 8000bae:	458c      	cmp	ip, r1
 8000bb0:	4686      	mov	lr, r0
 8000bb2:	fab2 f282 	clz	r2, r2
 8000bb6:	d962      	bls.n	8000c7e <__udivmoddi4+0xde>
 8000bb8:	b14a      	cbz	r2, 8000bce <__udivmoddi4+0x2e>
 8000bba:	f1c2 0320 	rsb	r3, r2, #32
 8000bbe:	4091      	lsls	r1, r2
 8000bc0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc8:	4319      	orrs	r1, r3
 8000bca:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f f68c 	uxth.w	r6, ip
 8000bd6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bde:	fb07 1114 	mls	r1, r7, r4, r1
 8000be2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be6:	fb04 f106 	mul.w	r1, r4, r6
 8000bea:	4299      	cmp	r1, r3
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x64>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000bf6:	f080 8112 	bcs.w	8000e1e <__udivmoddi4+0x27e>
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	f240 810f 	bls.w	8000e1e <__udivmoddi4+0x27e>
 8000c00:	3c02      	subs	r4, #2
 8000c02:	4463      	add	r3, ip
 8000c04:	1a59      	subs	r1, r3, r1
 8000c06:	fa1f f38e 	uxth.w	r3, lr
 8000c0a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c0e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c16:	fb00 f606 	mul.w	r6, r0, r6
 8000c1a:	429e      	cmp	r6, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x94>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c26:	f080 80fc 	bcs.w	8000e22 <__udivmoddi4+0x282>
 8000c2a:	429e      	cmp	r6, r3
 8000c2c:	f240 80f9 	bls.w	8000e22 <__udivmoddi4+0x282>
 8000c30:	4463      	add	r3, ip
 8000c32:	3802      	subs	r0, #2
 8000c34:	1b9b      	subs	r3, r3, r6
 8000c36:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	b11d      	cbz	r5, 8000c46 <__udivmoddi4+0xa6>
 8000c3e:	40d3      	lsrs	r3, r2
 8000c40:	2200      	movs	r2, #0
 8000c42:	e9c5 3200 	strd	r3, r2, [r5]
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d905      	bls.n	8000c5a <__udivmoddi4+0xba>
 8000c4e:	b10d      	cbz	r5, 8000c54 <__udivmoddi4+0xb4>
 8000c50:	e9c5 0100 	strd	r0, r1, [r5]
 8000c54:	2100      	movs	r1, #0
 8000c56:	4608      	mov	r0, r1
 8000c58:	e7f5      	b.n	8000c46 <__udivmoddi4+0xa6>
 8000c5a:	fab3 f183 	clz	r1, r3
 8000c5e:	2900      	cmp	r1, #0
 8000c60:	d146      	bne.n	8000cf0 <__udivmoddi4+0x150>
 8000c62:	42a3      	cmp	r3, r4
 8000c64:	d302      	bcc.n	8000c6c <__udivmoddi4+0xcc>
 8000c66:	4290      	cmp	r0, r2
 8000c68:	f0c0 80f0 	bcc.w	8000e4c <__udivmoddi4+0x2ac>
 8000c6c:	1a86      	subs	r6, r0, r2
 8000c6e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c72:	2001      	movs	r0, #1
 8000c74:	2d00      	cmp	r5, #0
 8000c76:	d0e6      	beq.n	8000c46 <__udivmoddi4+0xa6>
 8000c78:	e9c5 6300 	strd	r6, r3, [r5]
 8000c7c:	e7e3      	b.n	8000c46 <__udivmoddi4+0xa6>
 8000c7e:	2a00      	cmp	r2, #0
 8000c80:	f040 8090 	bne.w	8000da4 <__udivmoddi4+0x204>
 8000c84:	eba1 040c 	sub.w	r4, r1, ip
 8000c88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c8c:	fa1f f78c 	uxth.w	r7, ip
 8000c90:	2101      	movs	r1, #1
 8000c92:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c96:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c9a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ca2:	fb07 f006 	mul.w	r0, r7, r6
 8000ca6:	4298      	cmp	r0, r3
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0x11c>
 8000caa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x11a>
 8000cb4:	4298      	cmp	r0, r3
 8000cb6:	f200 80cd 	bhi.w	8000e54 <__udivmoddi4+0x2b4>
 8000cba:	4626      	mov	r6, r4
 8000cbc:	1a1c      	subs	r4, r3, r0
 8000cbe:	fa1f f38e 	uxth.w	r3, lr
 8000cc2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cc6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cce:	fb00 f707 	mul.w	r7, r0, r7
 8000cd2:	429f      	cmp	r7, r3
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x148>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x146>
 8000ce0:	429f      	cmp	r7, r3
 8000ce2:	f200 80b0 	bhi.w	8000e46 <__udivmoddi4+0x2a6>
 8000ce6:	4620      	mov	r0, r4
 8000ce8:	1bdb      	subs	r3, r3, r7
 8000cea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cee:	e7a5      	b.n	8000c3c <__udivmoddi4+0x9c>
 8000cf0:	f1c1 0620 	rsb	r6, r1, #32
 8000cf4:	408b      	lsls	r3, r1
 8000cf6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cfa:	431f      	orrs	r7, r3
 8000cfc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d00:	fa04 f301 	lsl.w	r3, r4, r1
 8000d04:	ea43 030c 	orr.w	r3, r3, ip
 8000d08:	40f4      	lsrs	r4, r6
 8000d0a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d0e:	0c38      	lsrs	r0, r7, #16
 8000d10:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d14:	fbb4 fef0 	udiv	lr, r4, r0
 8000d18:	fa1f fc87 	uxth.w	ip, r7
 8000d1c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d20:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d24:	fb0e f90c 	mul.w	r9, lr, ip
 8000d28:	45a1      	cmp	r9, r4
 8000d2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d2e:	d90a      	bls.n	8000d46 <__udivmoddi4+0x1a6>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d36:	f080 8084 	bcs.w	8000e42 <__udivmoddi4+0x2a2>
 8000d3a:	45a1      	cmp	r9, r4
 8000d3c:	f240 8081 	bls.w	8000e42 <__udivmoddi4+0x2a2>
 8000d40:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d44:	443c      	add	r4, r7
 8000d46:	eba4 0409 	sub.w	r4, r4, r9
 8000d4a:	fa1f f983 	uxth.w	r9, r3
 8000d4e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d52:	fb00 4413 	mls	r4, r0, r3, r4
 8000d56:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d5e:	45a4      	cmp	ip, r4
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x1d2>
 8000d62:	193c      	adds	r4, r7, r4
 8000d64:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d68:	d267      	bcs.n	8000e3a <__udivmoddi4+0x29a>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	d965      	bls.n	8000e3a <__udivmoddi4+0x29a>
 8000d6e:	3b02      	subs	r3, #2
 8000d70:	443c      	add	r4, r7
 8000d72:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d76:	fba0 9302 	umull	r9, r3, r0, r2
 8000d7a:	eba4 040c 	sub.w	r4, r4, ip
 8000d7e:	429c      	cmp	r4, r3
 8000d80:	46ce      	mov	lr, r9
 8000d82:	469c      	mov	ip, r3
 8000d84:	d351      	bcc.n	8000e2a <__udivmoddi4+0x28a>
 8000d86:	d04e      	beq.n	8000e26 <__udivmoddi4+0x286>
 8000d88:	b155      	cbz	r5, 8000da0 <__udivmoddi4+0x200>
 8000d8a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d8e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d92:	fa04 f606 	lsl.w	r6, r4, r6
 8000d96:	40cb      	lsrs	r3, r1
 8000d98:	431e      	orrs	r6, r3
 8000d9a:	40cc      	lsrs	r4, r1
 8000d9c:	e9c5 6400 	strd	r6, r4, [r5]
 8000da0:	2100      	movs	r1, #0
 8000da2:	e750      	b.n	8000c46 <__udivmoddi4+0xa6>
 8000da4:	f1c2 0320 	rsb	r3, r2, #32
 8000da8:	fa20 f103 	lsr.w	r1, r0, r3
 8000dac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db0:	fa24 f303 	lsr.w	r3, r4, r3
 8000db4:	4094      	lsls	r4, r2
 8000db6:	430c      	orrs	r4, r1
 8000db8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dbc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dcc:	0c23      	lsrs	r3, r4, #16
 8000dce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd2:	fb00 f107 	mul.w	r1, r0, r7
 8000dd6:	4299      	cmp	r1, r3
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x24c>
 8000dda:	eb1c 0303 	adds.w	r3, ip, r3
 8000dde:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000de2:	d22c      	bcs.n	8000e3e <__udivmoddi4+0x29e>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	d92a      	bls.n	8000e3e <__udivmoddi4+0x29e>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4463      	add	r3, ip
 8000dec:	1a5b      	subs	r3, r3, r1
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000df4:	fb08 3311 	mls	r3, r8, r1, r3
 8000df8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dfc:	fb01 f307 	mul.w	r3, r1, r7
 8000e00:	42a3      	cmp	r3, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x276>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e0c:	d213      	bcs.n	8000e36 <__udivmoddi4+0x296>
 8000e0e:	42a3      	cmp	r3, r4
 8000e10:	d911      	bls.n	8000e36 <__udivmoddi4+0x296>
 8000e12:	3902      	subs	r1, #2
 8000e14:	4464      	add	r4, ip
 8000e16:	1ae4      	subs	r4, r4, r3
 8000e18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e1c:	e739      	b.n	8000c92 <__udivmoddi4+0xf2>
 8000e1e:	4604      	mov	r4, r0
 8000e20:	e6f0      	b.n	8000c04 <__udivmoddi4+0x64>
 8000e22:	4608      	mov	r0, r1
 8000e24:	e706      	b.n	8000c34 <__udivmoddi4+0x94>
 8000e26:	45c8      	cmp	r8, r9
 8000e28:	d2ae      	bcs.n	8000d88 <__udivmoddi4+0x1e8>
 8000e2a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e2e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e32:	3801      	subs	r0, #1
 8000e34:	e7a8      	b.n	8000d88 <__udivmoddi4+0x1e8>
 8000e36:	4631      	mov	r1, r6
 8000e38:	e7ed      	b.n	8000e16 <__udivmoddi4+0x276>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	e799      	b.n	8000d72 <__udivmoddi4+0x1d2>
 8000e3e:	4630      	mov	r0, r6
 8000e40:	e7d4      	b.n	8000dec <__udivmoddi4+0x24c>
 8000e42:	46d6      	mov	lr, sl
 8000e44:	e77f      	b.n	8000d46 <__udivmoddi4+0x1a6>
 8000e46:	4463      	add	r3, ip
 8000e48:	3802      	subs	r0, #2
 8000e4a:	e74d      	b.n	8000ce8 <__udivmoddi4+0x148>
 8000e4c:	4606      	mov	r6, r0
 8000e4e:	4623      	mov	r3, r4
 8000e50:	4608      	mov	r0, r1
 8000e52:	e70f      	b.n	8000c74 <__udivmoddi4+0xd4>
 8000e54:	3e02      	subs	r6, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	e730      	b.n	8000cbc <__udivmoddi4+0x11c>
 8000e5a:	bf00      	nop

08000e5c <__aeabi_idiv0>:
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop

08000e60 <_ZN8JOYSTICKC1EP17ADC_HandleTypeDef>:
#include "joystick.h"

JOYSTICK::JOYSTICK(ADC_HandleTypeDef* ptr_adchandle){
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a06      	ldr	r2, [pc, #24]	@ (8000e88 <_ZN8JOYSTICKC1EP17ADC_HandleTypeDef+0x28>)
 8000e6e:	6812      	ldr	r2, [r2, #0]
 8000e70:	605a      	str	r2, [r3, #4]
	adchandle = ptr_adchandle;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	683a      	ldr	r2, [r7, #0]
 8000e76:	601a      	str	r2, [r3, #0]
}
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	08004ee0 	.word	0x08004ee0

08000e8c <_ZN8JOYSTICK8samplingEv>:

void JOYSTICK::sampling(){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	for(int i=0; i<2; i++){
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	e01a      	b.n	8000ed0 <_ZN8JOYSTICK8samplingEv+0x44>
	  HAL_ADC_Start(adchandle);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 ff10 	bl	8001cc4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(adchandle, 1);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 ffdc 	bl	8001e68 <HAL_ADC_PollForConversion>
	  adc_xy[i] = HAL_ADC_GetValue(adchandle);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f001 f862 	bl	8001f7e <HAL_ADC_GetValue>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	b299      	uxth	r1, r3
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	4413      	add	r3, r2
 8000ec6:	460a      	mov	r2, r1
 8000ec8:	809a      	strh	r2, [r3, #4]
	for(int i=0; i<2; i++){
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	dde1      	ble.n	8000e9a <_ZN8JOYSTICK8samplingEv+0xe>
	}
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <_ZN8JOYSTICK12get_adcValueEPt>:

void JOYSTICK::get_adcValue(uint16_t* adc_array){
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
	for(int i=0; i<2; i++){
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	e00c      	b.n	8000f0a <_ZN8JOYSTICK12get_adcValueEPt+0x2a>
	  adc_array[i] = adc_xy[i];
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	441a      	add	r2, r3
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	440b      	add	r3, r1
 8000f00:	889b      	ldrh	r3, [r3, #4]
 8000f02:	8013      	strh	r3, [r2, #0]
	for(int i=0; i<2; i++){
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	3301      	adds	r3, #1
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	ddef      	ble.n	8000ef0 <_ZN8JOYSTICK12get_adcValueEPt+0x10>
	}
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b08f      	sub	sp, #60	@ 0x3c
 8000f24:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f26:	f000 fe17 	bl	8001b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2a:	f000 f947 	bl	80011bc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f2e:	f000 fa9d 	bl	800146c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000f32:	f000 fa7b 	bl	800142c <_ZL11MX_DMA_Initv>
  MX_USART1_UART_Init();
 8000f36:	f000 fa4b 	bl	80013d0 <_ZL19MX_USART1_UART_Initv>
  MX_UART5_Init();
 8000f3a:	f000 fa1b 	bl	8001374 <_ZL13MX_UART5_Initv>
  MX_ADC1_Init();
 8000f3e:	f000 f9a7 	bl	8001290 <_ZL12MX_ADC1_Initv>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1,rxBuf,128);
 8000f42:	2280      	movs	r2, #128	@ 0x80
 8000f44:	498a      	ldr	r1, [pc, #552]	@ (8001170 <main+0x250>)
 8000f46:	488b      	ldr	r0, [pc, #556]	@ (8001174 <main+0x254>)
 8000f48:	f002 fed9 	bl	8003cfe <HAL_UART_Receive_DMA>
  JOYSTICK joystick(&hadc1);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	4989      	ldr	r1, [pc, #548]	@ (8001178 <main+0x258>)
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff84 	bl	8000e60 <_ZN8JOYSTICKC1EP17ADC_HandleTypeDef>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	readBuf(&huart1, rxBuf, 128, Data, 4, 0, &p_wrtptA, &p_rdptA, &stop_counterA, &error_counterA, 30);
 8000f58:	231e      	movs	r3, #30
 8000f5a:	9306      	str	r3, [sp, #24]
 8000f5c:	4b87      	ldr	r3, [pc, #540]	@ (800117c <main+0x25c>)
 8000f5e:	9305      	str	r3, [sp, #20]
 8000f60:	4b87      	ldr	r3, [pc, #540]	@ (8001180 <main+0x260>)
 8000f62:	9304      	str	r3, [sp, #16]
 8000f64:	4b87      	ldr	r3, [pc, #540]	@ (8001184 <main+0x264>)
 8000f66:	9303      	str	r3, [sp, #12]
 8000f68:	4b87      	ldr	r3, [pc, #540]	@ (8001188 <main+0x268>)
 8000f6a:	9302      	str	r3, [sp, #8]
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	2304      	movs	r3, #4
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	4b85      	ldr	r3, [pc, #532]	@ (800118c <main+0x26c>)
 8000f76:	2280      	movs	r2, #128	@ 0x80
 8000f78:	497d      	ldr	r1, [pc, #500]	@ (8001170 <main+0x250>)
 8000f7a:	487e      	ldr	r0, [pc, #504]	@ (8001174 <main+0x254>)
 8000f7c:	f000 fae2 	bl	8001544 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h>

	joystick.sampling();
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff81 	bl	8000e8c <_ZN8JOYSTICK8samplingEv>
	joystick.get_adcValue(adc_value);
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	4980      	ldr	r1, [pc, #512]	@ (8001190 <main+0x270>)
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ffa5 	bl	8000ee0 <_ZN8JOYSTICK12get_adcValueEPt>

	for(int n=0; n<2; n++){
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	e022      	b.n	8000fe2 <main+0xc2>
		if(2000<adc_value[n] && adc_value[n]<2096){
 8000f9c:	4a7c      	ldr	r2, [pc, #496]	@ (8001190 <main+0x270>)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fa4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000fa8:	d90c      	bls.n	8000fc4 <main+0xa4>
 8000faa:	4a79      	ldr	r2, [pc, #484]	@ (8001190 <main+0x270>)
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fb2:	f5b3 6f03 	cmp.w	r3, #2096	@ 0x830
 8000fb6:	d205      	bcs.n	8000fc4 <main+0xa4>
			stick[n] = 0;
 8000fb8:	4a76      	ldr	r2, [pc, #472]	@ (8001194 <main+0x274>)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000fc2:	e00b      	b.n	8000fdc <main+0xbc>
		}else{
			stick[n] = adc_value[n] - 2048;
 8000fc4:	4a72      	ldr	r2, [pc, #456]	@ (8001190 <main+0x270>)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fcc:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	b219      	sxth	r1, r3
 8000fd4:	4a6f      	ldr	r2, [pc, #444]	@ (8001194 <main+0x274>)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int n=0; n<2; n++){
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	ddd9      	ble.n	8000f9c <main+0x7c>
		}
	}
	theta = (atan2(stick[1], stick[0])/3.1415*180.0+180.0) * 255/360;
 8000fe8:	4b6a      	ldr	r3, [pc, #424]	@ (8001194 <main+0x274>)
 8000fea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fee:	4a69      	ldr	r2, [pc, #420]	@ (8001194 <main+0x274>)
 8000ff0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 fbbb 	bl	8001772 <_ZSt5atan2IssEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000ffc:	ec51 0b10 	vmov	r0, r1, d0
 8001000:	a357      	add	r3, pc, #348	@ (adr r3, 8001160 <main+0x240>)
 8001002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001006:	f7ff fbe5 	bl	80007d4 <__aeabi_ddiv>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	4b60      	ldr	r3, [pc, #384]	@ (8001198 <main+0x278>)
 8001018:	f7ff fab2 	bl	8000580 <__aeabi_dmul>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	4b5b      	ldr	r3, [pc, #364]	@ (8001198 <main+0x278>)
 800102a:	f7ff f8f3 	bl	8000214 <__adddf3>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	a34c      	add	r3, pc, #304	@ (adr r3, 8001168 <main+0x248>)
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103c:	f7ff faa0 	bl	8000580 <__aeabi_dmul>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	4b53      	ldr	r3, [pc, #332]	@ (800119c <main+0x27c>)
 800104e:	f7ff fbc1 	bl	80007d4 <__aeabi_ddiv>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	f7ff fd41 	bl	8000ae0 <__aeabi_d2iz>
 800105e:	4603      	mov	r3, r0
 8001060:	b21a      	sxth	r2, r3
 8001062:	4b4f      	ldr	r3, [pc, #316]	@ (80011a0 <main+0x280>)
 8001064:	801a      	strh	r2, [r3, #0]
	if(stick[0]==0 && stick[1]==0)theta=0;
 8001066:	4b4b      	ldr	r3, [pc, #300]	@ (8001194 <main+0x274>)
 8001068:	f9b3 3000 	ldrsh.w	r3, [r3]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d107      	bne.n	8001080 <main+0x160>
 8001070:	4b48      	ldr	r3, [pc, #288]	@ (8001194 <main+0x274>)
 8001072:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d102      	bne.n	8001080 <main+0x160>
 800107a:	4b49      	ldr	r3, [pc, #292]	@ (80011a0 <main+0x280>)
 800107c:	2200      	movs	r2, #0
 800107e:	801a      	strh	r2, [r3, #0]
	if(theta == 250)theta=251;
 8001080:	4b47      	ldr	r3, [pc, #284]	@ (80011a0 <main+0x280>)
 8001082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001086:	2bfa      	cmp	r3, #250	@ 0xfa
 8001088:	d102      	bne.n	8001090 <main+0x170>
 800108a:	4b45      	ldr	r3, [pc, #276]	@ (80011a0 <main+0x280>)
 800108c:	22fb      	movs	r2, #251	@ 0xfb
 800108e:	801a      	strh	r2, [r3, #0]
	radius = sqrt(stick[0]*stick[0] + stick[1]*stick[1]) * 250/2400;
 8001090:	4b40      	ldr	r3, [pc, #256]	@ (8001194 <main+0x274>)
 8001092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001096:	461a      	mov	r2, r3
 8001098:	4b3e      	ldr	r3, [pc, #248]	@ (8001194 <main+0x274>)
 800109a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109e:	fb03 f202 	mul.w	r2, r3, r2
 80010a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001194 <main+0x274>)
 80010a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010a8:	4619      	mov	r1, r3
 80010aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001194 <main+0x274>)
 80010ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010b0:	fb01 f303 	mul.w	r3, r1, r3
 80010b4:	4413      	add	r3, r2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 fb82 	bl	80017c0 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80010bc:	ec51 0b10 	vmov	r0, r1, d0
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	4b37      	ldr	r3, [pc, #220]	@ (80011a4 <main+0x284>)
 80010c6:	f7ff fa5b 	bl	8000580 <__aeabi_dmul>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	4b34      	ldr	r3, [pc, #208]	@ (80011a8 <main+0x288>)
 80010d8:	f7ff fb7c 	bl	80007d4 <__aeabi_ddiv>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fd24 	bl	8000b30 <__aeabi_d2uiz>
 80010e8:	4603      	mov	r3, r0
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b2f      	ldr	r3, [pc, #188]	@ (80011ac <main+0x28c>)
 80010ee:	701a      	strb	r2, [r3, #0]
	if(radius>255 || radius==250 )radius = 255;
 80010f0:	4b2e      	ldr	r3, [pc, #184]	@ (80011ac <main+0x28c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2bfa      	cmp	r3, #250	@ 0xfa
 80010f6:	d102      	bne.n	80010fe <main+0x1de>
 80010f8:	4b2c      	ldr	r3, [pc, #176]	@ (80011ac <main+0x28c>)
 80010fa:	22ff      	movs	r2, #255	@ 0xff
 80010fc:	701a      	strb	r2, [r3, #0]


	mode = HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15)<<1 | HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_13);
 80010fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001102:	482b      	ldr	r0, [pc, #172]	@ (80011b0 <main+0x290>)
 8001104:	f001 ff8c 	bl	8003020 <HAL_GPIO_ReadPin>
 8001108:	4603      	mov	r3, r0
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	b25c      	sxtb	r4, r3
 800110e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001112:	4827      	ldr	r0, [pc, #156]	@ (80011b0 <main+0x290>)
 8001114:	f001 ff84 	bl	8003020 <HAL_GPIO_ReadPin>
 8001118:	4603      	mov	r3, r0
 800111a:	b25b      	sxtb	r3, r3
 800111c:	4323      	orrs	r3, r4
 800111e:	b25b      	sxtb	r3, r3
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4b24      	ldr	r3, [pc, #144]	@ (80011b4 <main+0x294>)
 8001124:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	uint8_t send_array[5] = {250,Data[3],theta,radius,mode};//start, h, x, y, mode
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	711a      	strb	r2, [r3, #4]
 800112e:	23fa      	movs	r3, #250	@ 0xfa
 8001130:	713b      	strb	r3, [r7, #4]
 8001132:	4b16      	ldr	r3, [pc, #88]	@ (800118c <main+0x26c>)
 8001134:	78db      	ldrb	r3, [r3, #3]
 8001136:	717b      	strb	r3, [r7, #5]
 8001138:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <main+0x280>)
 800113a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	71bb      	strb	r3, [r7, #6]
 8001142:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <main+0x28c>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
 8001148:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <main+0x294>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	723b      	strb	r3, [r7, #8]
	HAL_UART_Transmit(&huart5, send_array, 5, 1);
 800114e:	1d39      	adds	r1, r7, #4
 8001150:	2301      	movs	r3, #1
 8001152:	2205      	movs	r2, #5
 8001154:	4818      	ldr	r0, [pc, #96]	@ (80011b8 <main+0x298>)
 8001156:	f002 fd47 	bl	8003be8 <HAL_UART_Transmit>
  }
 800115a:	e6fd      	b.n	8000f58 <main+0x38>
 800115c:	f3af 8000 	nop.w
 8001160:	c083126f 	.word	0xc083126f
 8001164:	400921ca 	.word	0x400921ca
 8001168:	00000000 	.word	0x00000000
 800116c:	406fe000 	.word	0x406fe000
 8001170:	200001cc 	.word	0x200001cc
 8001174:	2000011c 	.word	0x2000011c
 8001178:	2000008c 	.word	0x2000008c
 800117c:	200001c8 	.word	0x200001c8
 8001180:	200001c6 	.word	0x200001c6
 8001184:	200001c5 	.word	0x200001c5
 8001188:	200001c4 	.word	0x200001c4
 800118c:	2000024c 	.word	0x2000024c
 8001190:	20000250 	.word	0x20000250
 8001194:	20000254 	.word	0x20000254
 8001198:	40668000 	.word	0x40668000
 800119c:	40768000 	.word	0x40768000
 80011a0:	20000258 	.word	0x20000258
 80011a4:	406f4000 	.word	0x406f4000
 80011a8:	40a2c000 	.word	0x40a2c000
 80011ac:	2000025a 	.word	0x2000025a
 80011b0:	40020400 	.word	0x40020400
 80011b4:	2000025b 	.word	0x2000025b
 80011b8:	200000d4 	.word	0x200000d4

080011bc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b094      	sub	sp, #80	@ 0x50
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	2234      	movs	r2, #52	@ 0x34
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f003 fe4a 	bl	8004e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d0:	f107 0308 	add.w	r3, r7, #8
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	4b28      	ldr	r3, [pc, #160]	@ (8001288 <_Z18SystemClock_Configv+0xcc>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e8:	4a27      	ldr	r2, [pc, #156]	@ (8001288 <_Z18SystemClock_Configv+0xcc>)
 80011ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f0:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <_Z18SystemClock_Configv+0xcc>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011fc:	2300      	movs	r3, #0
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	4b22      	ldr	r3, [pc, #136]	@ (800128c <_Z18SystemClock_Configv+0xd0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001208:	4a20      	ldr	r2, [pc, #128]	@ (800128c <_Z18SystemClock_Configv+0xd0>)
 800120a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b1e      	ldr	r3, [pc, #120]	@ (800128c <_Z18SystemClock_Configv+0xd0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800121c:	2302      	movs	r3, #2
 800121e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001220:	2301      	movs	r3, #1
 8001222:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001224:	2310      	movs	r3, #16
 8001226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001228:	2300      	movs	r3, #0
 800122a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4618      	mov	r0, r3
 8001232:	f002 f9eb 	bl	800360c <HAL_RCC_OscConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	bf14      	ite	ne
 800123c:	2301      	movne	r3, #1
 800123e:	2300      	moveq	r3, #0
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8001246:	f000 fa8e 	bl	8001766 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124a:	230f      	movs	r3, #15
 800124c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800125e:	f107 0308 	add.w	r3, r7, #8
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f001 ff0d 	bl	8003084 <HAL_RCC_ClockConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	bf14      	ite	ne
 8001270:	2301      	movne	r3, #1
 8001272:	2300      	moveq	r3, #0
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 800127a:	f000 fa74 	bl	8001766 <Error_Handler>
  }
}
 800127e:	bf00      	nop
 8001280:	3750      	adds	r7, #80	@ 0x50
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40007000 	.word	0x40007000

08001290 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001296:	463b      	mov	r3, r7
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012a2:	4b31      	ldr	r3, [pc, #196]	@ (8001368 <_ZL12MX_ADC1_Initv+0xd8>)
 80012a4:	4a31      	ldr	r2, [pc, #196]	@ (800136c <_ZL12MX_ADC1_Initv+0xdc>)
 80012a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001368 <_ZL12MX_ADC1_Initv+0xd8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001368 <_ZL12MX_ADC1_Initv+0xd8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80012b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001368 <_ZL12MX_ADC1_Initv+0xd8>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001368 <_ZL12MX_ADC1_Initv+0xd8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80012c0:	4b29      	ldr	r3, [pc, #164]	@ (8001368 <_ZL12MX_ADC1_Initv+0xd8>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80012c8:	4b27      	ldr	r3, [pc, #156]	@ (8001368 <_ZL12MX_ADC1_Initv+0xd8>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ce:	4b26      	ldr	r3, [pc, #152]	@ (8001368 <_ZL12MX_ADC1_Initv+0xd8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012d4:	4b24      	ldr	r3, [pc, #144]	@ (8001368 <_ZL12MX_ADC1_Initv+0xd8>)
 80012d6:	4a26      	ldr	r2, [pc, #152]	@ (8001370 <_ZL12MX_ADC1_Initv+0xe0>)
 80012d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012da:	4b23      	ldr	r3, [pc, #140]	@ (8001368 <_ZL12MX_ADC1_Initv+0xd8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80012e0:	4b21      	ldr	r3, [pc, #132]	@ (8001368 <_ZL12MX_ADC1_Initv+0xd8>)
 80012e2:	2202      	movs	r2, #2
 80012e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012e6:	4b20      	ldr	r3, [pc, #128]	@ (8001368 <_ZL12MX_ADC1_Initv+0xd8>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001368 <_ZL12MX_ADC1_Initv+0xd8>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012f4:	481c      	ldr	r0, [pc, #112]	@ (8001368 <_ZL12MX_ADC1_Initv+0xd8>)
 80012f6:	f000 fca1 	bl	8001c3c <HAL_ADC_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	bf14      	ite	ne
 8001300:	2301      	movne	r3, #1
 8001302:	2300      	moveq	r3, #0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <_ZL12MX_ADC1_Initv+0x7e>
  {
    Error_Handler();
 800130a:	f000 fa2c 	bl	8001766 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800130e:	230b      	movs	r3, #11
 8001310:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001312:	2301      	movs	r3, #1
 8001314:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001316:	2301      	movs	r3, #1
 8001318:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131a:	463b      	mov	r3, r7
 800131c:	4619      	mov	r1, r3
 800131e:	4812      	ldr	r0, [pc, #72]	@ (8001368 <_ZL12MX_ADC1_Initv+0xd8>)
 8001320:	f000 fe3a 	bl	8001f98 <HAL_ADC_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	bf14      	ite	ne
 800132a:	2301      	movne	r3, #1
 800132c:	2300      	moveq	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <_ZL12MX_ADC1_Initv+0xa8>
  {
    Error_Handler();
 8001334:	f000 fa17 	bl	8001766 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001338:	230c      	movs	r3, #12
 800133a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800133c:	2302      	movs	r3, #2
 800133e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001340:	463b      	mov	r3, r7
 8001342:	4619      	mov	r1, r3
 8001344:	4808      	ldr	r0, [pc, #32]	@ (8001368 <_ZL12MX_ADC1_Initv+0xd8>)
 8001346:	f000 fe27 	bl	8001f98 <HAL_ADC_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	bf14      	ite	ne
 8001350:	2301      	movne	r3, #1
 8001352:	2300      	moveq	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <_ZL12MX_ADC1_Initv+0xce>
  {
    Error_Handler();
 800135a:	f000 fa04 	bl	8001766 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	2000008c 	.word	0x2000008c
 800136c:	40012000 	.word	0x40012000
 8001370:	0f000001 	.word	0x0f000001

08001374 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001378:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <_ZL13MX_UART5_Initv+0x54>)
 800137a:	4a14      	ldr	r2, [pc, #80]	@ (80013cc <_ZL13MX_UART5_Initv+0x58>)
 800137c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800137e:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <_ZL13MX_UART5_Initv+0x54>)
 8001380:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001384:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <_ZL13MX_UART5_Initv+0x54>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800138c:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <_ZL13MX_UART5_Initv+0x54>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001392:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <_ZL13MX_UART5_Initv+0x54>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001398:	4b0b      	ldr	r3, [pc, #44]	@ (80013c8 <_ZL13MX_UART5_Initv+0x54>)
 800139a:	220c      	movs	r2, #12
 800139c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <_ZL13MX_UART5_Initv+0x54>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a4:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <_ZL13MX_UART5_Initv+0x54>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80013aa:	4807      	ldr	r0, [pc, #28]	@ (80013c8 <_ZL13MX_UART5_Initv+0x54>)
 80013ac:	f002 fbcc 	bl	8003b48 <HAL_UART_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	bf14      	ite	ne
 80013b6:	2301      	movne	r3, #1
 80013b8:	2300      	moveq	r3, #0
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <_ZL13MX_UART5_Initv+0x50>
  {
    Error_Handler();
 80013c0:	f000 f9d1 	bl	8001766 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200000d4 	.word	0x200000d4
 80013cc:	40005000 	.word	0x40005000

080013d0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013d4:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013d6:	4a14      	ldr	r2, [pc, #80]	@ (8001428 <_ZL19MX_USART1_UART_Initv+0x58>)
 80013d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013da:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013e2:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013f6:	220c      	movs	r2, #12
 80013f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001400:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001406:	4807      	ldr	r0, [pc, #28]	@ (8001424 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001408:	f002 fb9e 	bl	8003b48 <HAL_UART_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	bf14      	ite	ne
 8001412:	2301      	movne	r3, #1
 8001414:	2300      	moveq	r3, #0
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 800141c:	f000 f9a3 	bl	8001766 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	2000011c 	.word	0x2000011c
 8001428:	40011000 	.word	0x40011000

0800142c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <_ZL11MX_DMA_Initv+0x3c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a0b      	ldr	r2, [pc, #44]	@ (8001468 <_ZL11MX_DMA_Initv+0x3c>)
 800143c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <_ZL11MX_DMA_Initv+0x3c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	203a      	movs	r0, #58	@ 0x3a
 8001454:	f001 f8a9 	bl	80025aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001458:	203a      	movs	r0, #58	@ 0x3a
 800145a:	f001 f8c2 	bl	80025e2 <HAL_NVIC_EnableIRQ>

}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800

0800146c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	@ 0x28
 8001470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b2d      	ldr	r3, [pc, #180]	@ (800153c <_ZL12MX_GPIO_Initv+0xd0>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	4a2c      	ldr	r2, [pc, #176]	@ (800153c <_ZL12MX_GPIO_Initv+0xd0>)
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	6313      	str	r3, [r2, #48]	@ 0x30
 8001492:	4b2a      	ldr	r3, [pc, #168]	@ (800153c <_ZL12MX_GPIO_Initv+0xd0>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	f003 0304 	and.w	r3, r3, #4
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b26      	ldr	r3, [pc, #152]	@ (800153c <_ZL12MX_GPIO_Initv+0xd0>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a25      	ldr	r2, [pc, #148]	@ (800153c <_ZL12MX_GPIO_Initv+0xd0>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b23      	ldr	r3, [pc, #140]	@ (800153c <_ZL12MX_GPIO_Initv+0xd0>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	4b1f      	ldr	r3, [pc, #124]	@ (800153c <_ZL12MX_GPIO_Initv+0xd0>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a1e      	ldr	r2, [pc, #120]	@ (800153c <_ZL12MX_GPIO_Initv+0xd0>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b1c      	ldr	r3, [pc, #112]	@ (800153c <_ZL12MX_GPIO_Initv+0xd0>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	4b18      	ldr	r3, [pc, #96]	@ (800153c <_ZL12MX_GPIO_Initv+0xd0>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	4a17      	ldr	r2, [pc, #92]	@ (800153c <_ZL12MX_GPIO_Initv+0xd0>)
 80014e0:	f043 0308 	orr.w	r3, r3, #8
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e6:	4b15      	ldr	r3, [pc, #84]	@ (800153c <_ZL12MX_GPIO_Initv+0xd0>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2104      	movs	r1, #4
 80014f6:	4812      	ldr	r0, [pc, #72]	@ (8001540 <_ZL12MX_GPIO_Initv+0xd4>)
 80014f8:	f001 fdaa 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80014fc:	2304      	movs	r3, #4
 80014fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	480b      	ldr	r0, [pc, #44]	@ (8001540 <_ZL12MX_GPIO_Initv+0xd4>)
 8001514:	f001 fbf0 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001518:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800151c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4619      	mov	r1, r3
 800152c:	4804      	ldr	r0, [pc, #16]	@ (8001540 <_ZL12MX_GPIO_Initv+0xd4>)
 800152e:	f001 fbe3 	bl	8002cf8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001532:	bf00      	nop
 8001534:	3728      	adds	r7, #40	@ 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40020400 	.word	0x40020400

08001544 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h>:

/* USER CODE BEGIN 4 */


void readBuf(UART_HandleTypeDef* uart, uint8_t* buf, int buf_size, uint8_t* data, int data_size, uint8_t id, uint8_t* p_wrtpt, uint8_t* p_rdpt, uint16_t* stop_counter, uint16_t* error_counter, uint8_t go_back){
 8001544:	b480      	push	{r7}
 8001546:	b08d      	sub	sp, #52	@ 0x34
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	603b      	str	r3, [r7, #0]
	int wrt_pt = uart->hdmarx->Instance->NDTR;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	61bb      	str	r3, [r7, #24]
	wrt_pt= buf_size - wrt_pt;
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	61bb      	str	r3, [r7, #24]
	int rd_pt;

	if(wrt_pt != *p_rdpt){//wrtに追??��?��?付かれてな??��?��?
 8001564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	4293      	cmp	r3, r2
 800156e:	d031      	beq.n	80015d4 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x90>
		if(buf[*p_rdpt] == 255){//p_rdptが書き換えられてな??��?��?=追??��?��?越されてな??��?��?
 8001570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	4413      	add	r3, r2
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2bff      	cmp	r3, #255	@ 0xff
 800157e:	d116      	bne.n	80015ae <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x6a>
			if(wrt_pt != *p_wrtpt){//wrt_ptが�???��?��んだ=受信した
 8001580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	4293      	cmp	r3, r2
 800158a:	d006      	beq.n	800159a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x56>
//正常
				*stop_counter = 0;
 800158c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800158e:	2200      	movs	r2, #0
 8001590:	801a      	strh	r2, [r3, #0]
				rd_pt = *p_rdpt;
 8001592:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001598:	e049      	b.n	800162e <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
			}else{//wrt_ptが�???��?��んでな??��?��?=受信してな??��?��?
//受信してな??��?��?
				(*stop_counter)++;
 800159a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	3301      	adds	r3, #1
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015a4:	801a      	strh	r2, [r3, #0]
				rd_pt = *p_rdpt;
 80015a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015ac:	e03f      	b.n	800162e <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
			}
		}else{//p_rdptが書き換えられた=追??��?��?越された
//追??��?��?越された
			(*error_counter)++;
 80015ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	3301      	adds	r3, #1
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015b8:	801a      	strh	r2, [r3, #0]
			rd_pt = wrt_pt - go_back;
 80015ba:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if(rd_pt < 0){rd_pt += buf_size;}
 80015c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	da31      	bge.n	800162e <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
 80015ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4413      	add	r3, r2
 80015d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015d2:	e02c      	b.n	800162e <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
		}
	}else{//wrtに追??��?��?付かれた,追??��?��?付い??��?��?
		int front_pt = wrt_pt + 1;
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	3301      	adds	r3, #1
 80015d8:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(front_pt>buf_size-1){front_pt -= buf_size;}
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015de:	429a      	cmp	r2, r3
 80015e0:	dc03      	bgt.n	80015ea <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xa6>
 80015e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	62bb      	str	r3, [r7, #40]	@ 0x28

		if(buf[front_pt] == 255){
 80015ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	4413      	add	r3, r2
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2bff      	cmp	r3, #255	@ 0xff
 80015f4:	d109      	bne.n	800160a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xc6>
//追??��?��?付い??��?��?
			(*stop_counter)++;
 80015f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	3301      	adds	r3, #1
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001600:	801a      	strh	r2, [r3, #0]
			rd_pt = *p_rdpt;
 8001602:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001608:	e011      	b.n	800162e <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
		}else{
//追??��?��?付かれた
			(*error_counter)++;
 800160a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	3301      	adds	r3, #1
 8001610:	b29a      	uxth	r2, r3
 8001612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001614:	801a      	strh	r2, [r3, #0]
			rd_pt = wrt_pt - go_back;
 8001616:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if(rd_pt < 0){rd_pt += buf_size;}
 8001620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001622:	2b00      	cmp	r3, #0
 8001624:	da03      	bge.n	800162e <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
 8001626:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4413      	add	r3, r2
 800162c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
	}

	if(*stop_counter > 65500){*stop_counter = 65500;}
 800162e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8001636:	4293      	cmp	r3, r2
 8001638:	d903      	bls.n	8001642 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xfe>
 800163a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800163c:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8001640:	801a      	strh	r2, [r3, #0]
	if(*error_counter > 65500){*error_counter = 65500;}
 8001642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 800164a:	4293      	cmp	r3, r2
 800164c:	d903      	bls.n	8001656 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x112>
 800164e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001650:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8001654:	801a      	strh	r2, [r3, #0]


	while(1){
		int dif_pt = wrt_pt - rd_pt;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
			if(dif_pt < 0){dif_pt += buf_size;}
 800165e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001660:	2b00      	cmp	r3, #0
 8001662:	da03      	bge.n	800166c <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x128>
 8001664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	627b      	str	r3, [r7, #36]	@ 0x24
		if(dif_pt <= go_back/2){break;}
 800166c:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8001670:	085b      	lsrs	r3, r3, #1
 8001672:	b2db      	uxtb	r3, r3
 8001674:	461a      	mov	r2, r3
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	4293      	cmp	r3, r2
 800167a:	dd65      	ble.n	8001748 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x204>

		rd_pt++;
 800167c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800167e:	3301      	adds	r3, #1
 8001680:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(rd_pt>buf_size-1){rd_pt -= buf_size;}
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001686:	429a      	cmp	r2, r3
 8001688:	dc03      	bgt.n	8001692 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x14e>
 800168a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if(buf[rd_pt] == 250+id){
 8001692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	4413      	add	r3, r2
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80016a0:	33fa      	adds	r3, #250	@ 0xfa
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d14a      	bne.n	800173c <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1f8>
			int goal_rdpt = rd_pt + data_size;//data_sizeに0はとれな??��?��?,25以上も??��?��???��?��?
 80016a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016aa:	4413      	add	r3, r2
 80016ac:	617b      	str	r3, [r7, #20]

				if(goal_rdpt>buf_size-1){goal_rdpt -= buf_size;}
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	dc03      	bgt.n	80016be <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x17a>
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	617b      	str	r3, [r7, #20]
			int temp_rdpt = rd_pt;
 80016be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016c0:	623b      	str	r3, [r7, #32]

			buf[rd_pt] = 255;
 80016c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	4413      	add	r3, r2
 80016c8:	22ff      	movs	r2, #255	@ 0xff
 80016ca:	701a      	strb	r2, [r3, #0]

			for(int i=0; i<data_size; i++){
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
 80016d0:	e01a      	b.n	8001708 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1c4>
				temp_rdpt += 1;
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	3301      	adds	r3, #1
 80016d6:	623b      	str	r3, [r7, #32]
					if(temp_rdpt>buf_size-1){temp_rdpt -= buf_size;}
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	429a      	cmp	r2, r3
 80016de:	dc03      	bgt.n	80016e8 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1a4>
 80016e0:	6a3a      	ldr	r2, [r7, #32]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	623b      	str	r3, [r7, #32]

				data[i] = buf[temp_rdpt];
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	441a      	add	r2, r3
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	6839      	ldr	r1, [r7, #0]
 80016f2:	440b      	add	r3, r1
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	701a      	strb	r2, [r3, #0]
				buf[temp_rdpt] = 255;
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	4413      	add	r3, r2
 80016fe:	22ff      	movs	r2, #255	@ 0xff
 8001700:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<data_size; i++){
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3301      	adds	r3, #1
 8001706:	61fb      	str	r3, [r7, #28]
 8001708:	69fa      	ldr	r2, [r7, #28]
 800170a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800170c:	429a      	cmp	r2, r3
 800170e:	dbe0      	blt.n	80016d2 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x18e>
			}

			rd_pt = temp_rdpt;
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	62fb      	str	r3, [r7, #44]	@ 0x2c

			dif_pt = wrt_pt - rd_pt;
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
				if(dif_pt < 0){dif_pt += buf_size;}
 800171c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171e:	2b00      	cmp	r3, #0
 8001720:	da03      	bge.n	800172a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1e6>
 8001722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4413      	add	r3, r2
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
			if(dif_pt >= buf_size/2){}
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	0fda      	lsrs	r2, r3, #31
 800172e:	4413      	add	r3, r2
 8001730:	105b      	asrs	r3, r3, #1
 8001732:	461a      	mov	r2, r3
 8001734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001736:	4293      	cmp	r3, r2
 8001738:	da8d      	bge.n	8001656 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x112>
			else{break;}
 800173a:	e006      	b.n	800174a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x206>
		}else{buf[rd_pt] = 255;}
 800173c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	4413      	add	r3, r2
 8001742:	22ff      	movs	r2, #255	@ 0xff
 8001744:	701a      	strb	r2, [r3, #0]
	}
 8001746:	e786      	b.n	8001656 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x112>
		if(dif_pt <= go_back/2){break;}
 8001748:	bf00      	nop

	*p_rdpt = rd_pt;
 800174a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800174c:	b2da      	uxtb	r2, r3
 800174e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001750:	701a      	strb	r2, [r3, #0]
//	*p_wrtpt = buf_size - (uart->hdmarx->Instance->CNDTR);
	*p_wrtpt = wrt_pt;
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001758:	701a      	strb	r2, [r3, #0]
}
 800175a:	bf00      	nop
 800175c:	3734      	adds	r7, #52	@ 0x34
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800176a:	b672      	cpsid	i
}
 800176c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800176e:	bf00      	nop
 8001770:	e7fd      	b.n	800176e <Error_Handler+0x8>

08001772 <_ZSt5atan2IssEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
 8001772:	b5b0      	push	{r4, r5, r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	460a      	mov	r2, r1
 800177c:	80fb      	strh	r3, [r7, #6]
 800177e:	4613      	mov	r3, r2
 8001780:	80bb      	strh	r3, [r7, #4]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
 8001782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fe90 	bl	80004ac <__aeabi_i2d>
 800178c:	4604      	mov	r4, r0
 800178e:	460d      	mov	r5, r1
 8001790:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fe89 	bl	80004ac <__aeabi_i2d>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	ec43 2b11 	vmov	d1, r2, r3
 80017a2:	ec45 4b10 	vmov	d0, r4, r5
 80017a6:	f002 ffeb 	bl	8004780 <atan2>
 80017aa:	eeb0 7a40 	vmov.f32	s14, s0
 80017ae:	eef0 7a60 	vmov.f32	s15, s1
    }
 80017b2:	eeb0 0a47 	vmov.f32	s0, s14
 80017b6:	eef0 0a67 	vmov.f32	s1, s15
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bdb0      	pop	{r4, r5, r7, pc}

080017c0 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7fe fe6f 	bl	80004ac <__aeabi_i2d>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	ec43 2b10 	vmov	d0, r2, r3
 80017d6:	f003 f89d 	bl	8004914 <sqrt>
 80017da:	eeb0 7a40 	vmov.f32	s14, s0
 80017de:	eef0 7a60 	vmov.f32	s15, s1
 80017e2:	eeb0 0a47 	vmov.f32	s0, s14
 80017e6:	eef0 0a67 	vmov.f32	s1, s15
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	4b10      	ldr	r3, [pc, #64]	@ (800183c <HAL_MspInit+0x4c>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fe:	4a0f      	ldr	r2, [pc, #60]	@ (800183c <HAL_MspInit+0x4c>)
 8001800:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001804:	6453      	str	r3, [r2, #68]	@ 0x44
 8001806:	4b0d      	ldr	r3, [pc, #52]	@ (800183c <HAL_MspInit+0x4c>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <HAL_MspInit+0x4c>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	4a08      	ldr	r2, [pc, #32]	@ (800183c <HAL_MspInit+0x4c>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001820:	6413      	str	r3, [r2, #64]	@ 0x40
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <HAL_MspInit+0x4c>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800

08001840 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	@ 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a17      	ldr	r2, [pc, #92]	@ (80018bc <HAL_ADC_MspInit+0x7c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d127      	bne.n	80018b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b16      	ldr	r3, [pc, #88]	@ (80018c0 <HAL_ADC_MspInit+0x80>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186a:	4a15      	ldr	r2, [pc, #84]	@ (80018c0 <HAL_ADC_MspInit+0x80>)
 800186c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001870:	6453      	str	r3, [r2, #68]	@ 0x44
 8001872:	4b13      	ldr	r3, [pc, #76]	@ (80018c0 <HAL_ADC_MspInit+0x80>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b0f      	ldr	r3, [pc, #60]	@ (80018c0 <HAL_ADC_MspInit+0x80>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	4a0e      	ldr	r2, [pc, #56]	@ (80018c0 <HAL_ADC_MspInit+0x80>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	6313      	str	r3, [r2, #48]	@ 0x30
 800188e:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <HAL_ADC_MspInit+0x80>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800189a:	2306      	movs	r3, #6
 800189c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800189e:	2303      	movs	r3, #3
 80018a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <HAL_ADC_MspInit+0x84>)
 80018ae:	f001 fa23 	bl	8002cf8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80018b2:	bf00      	nop
 80018b4:	3728      	adds	r7, #40	@ 0x28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40012000 	.word	0x40012000
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40020800 	.word	0x40020800

080018c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08c      	sub	sp, #48	@ 0x30
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 031c 	add.w	r3, r7, #28
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a59      	ldr	r2, [pc, #356]	@ (8001a4c <HAL_UART_MspInit+0x184>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d14b      	bne.n	8001982 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
 80018ee:	4b58      	ldr	r3, [pc, #352]	@ (8001a50 <HAL_UART_MspInit+0x188>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	4a57      	ldr	r2, [pc, #348]	@ (8001a50 <HAL_UART_MspInit+0x188>)
 80018f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80018f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018fa:	4b55      	ldr	r3, [pc, #340]	@ (8001a50 <HAL_UART_MspInit+0x188>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001902:	61bb      	str	r3, [r7, #24]
 8001904:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	4b51      	ldr	r3, [pc, #324]	@ (8001a50 <HAL_UART_MspInit+0x188>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4a50      	ldr	r2, [pc, #320]	@ (8001a50 <HAL_UART_MspInit+0x188>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
 8001916:	4b4e      	ldr	r3, [pc, #312]	@ (8001a50 <HAL_UART_MspInit+0x188>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	4b4a      	ldr	r3, [pc, #296]	@ (8001a50 <HAL_UART_MspInit+0x188>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a49      	ldr	r2, [pc, #292]	@ (8001a50 <HAL_UART_MspInit+0x188>)
 800192c:	f043 0308 	orr.w	r3, r3, #8
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b47      	ldr	r3, [pc, #284]	@ (8001a50 <HAL_UART_MspInit+0x188>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = TWE_TX_Pin;
 800193e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194c:	2303      	movs	r3, #3
 800194e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001950:	2308      	movs	r3, #8
 8001952:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TWE_TX_GPIO_Port, &GPIO_InitStruct);
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	4619      	mov	r1, r3
 800195a:	483e      	ldr	r0, [pc, #248]	@ (8001a54 <HAL_UART_MspInit+0x18c>)
 800195c:	f001 f9cc 	bl	8002cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TWE_RX_Pin;
 8001960:	2304      	movs	r3, #4
 8001962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001970:	2308      	movs	r3, #8
 8001972:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TWE_RX_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 031c 	add.w	r3, r7, #28
 8001978:	4619      	mov	r1, r3
 800197a:	4837      	ldr	r0, [pc, #220]	@ (8001a58 <HAL_UART_MspInit+0x190>)
 800197c:	f001 f9bc 	bl	8002cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001980:	e060      	b.n	8001a44 <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==USART1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a35      	ldr	r2, [pc, #212]	@ (8001a5c <HAL_UART_MspInit+0x194>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d15b      	bne.n	8001a44 <HAL_UART_MspInit+0x17c>
    __HAL_RCC_USART1_CLK_ENABLE();
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	4b2f      	ldr	r3, [pc, #188]	@ (8001a50 <HAL_UART_MspInit+0x188>)
 8001992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001994:	4a2e      	ldr	r2, [pc, #184]	@ (8001a50 <HAL_UART_MspInit+0x188>)
 8001996:	f043 0310 	orr.w	r3, r3, #16
 800199a:	6453      	str	r3, [r2, #68]	@ 0x44
 800199c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a50 <HAL_UART_MspInit+0x188>)
 800199e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a0:	f003 0310 	and.w	r3, r3, #16
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	4b28      	ldr	r3, [pc, #160]	@ (8001a50 <HAL_UART_MspInit+0x188>)
 80019ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b0:	4a27      	ldr	r2, [pc, #156]	@ (8001a50 <HAL_UART_MspInit+0x188>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b8:	4b25      	ldr	r3, [pc, #148]	@ (8001a50 <HAL_UART_MspInit+0x188>)
 80019ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
 80019c4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d2:	2303      	movs	r3, #3
 80019d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019d6:	2307      	movs	r3, #7
 80019d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019da:	f107 031c 	add.w	r3, r7, #28
 80019de:	4619      	mov	r1, r3
 80019e0:	481f      	ldr	r0, [pc, #124]	@ (8001a60 <HAL_UART_MspInit+0x198>)
 80019e2:	f001 f989 	bl	8002cf8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80019e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a64 <HAL_UART_MspInit+0x19c>)
 80019e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a68 <HAL_UART_MspInit+0x1a0>)
 80019ea:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80019ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001a64 <HAL_UART_MspInit+0x19c>)
 80019ee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80019f2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a64 <HAL_UART_MspInit+0x19c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001a64 <HAL_UART_MspInit+0x19c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a00:	4b18      	ldr	r3, [pc, #96]	@ (8001a64 <HAL_UART_MspInit+0x19c>)
 8001a02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a06:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a08:	4b16      	ldr	r3, [pc, #88]	@ (8001a64 <HAL_UART_MspInit+0x19c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a0e:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <HAL_UART_MspInit+0x19c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001a14:	4b13      	ldr	r3, [pc, #76]	@ (8001a64 <HAL_UART_MspInit+0x19c>)
 8001a16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a1a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <HAL_UART_MspInit+0x19c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <HAL_UART_MspInit+0x19c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a28:	480e      	ldr	r0, [pc, #56]	@ (8001a64 <HAL_UART_MspInit+0x19c>)
 8001a2a:	f000 fdf5 	bl	8002618 <HAL_DMA_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_UART_MspInit+0x170>
      Error_Handler();
 8001a34:	f7ff fe97 	bl	8001766 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a64 <HAL_UART_MspInit+0x19c>)
 8001a3c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a3e:	4a09      	ldr	r2, [pc, #36]	@ (8001a64 <HAL_UART_MspInit+0x19c>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001a44:	bf00      	nop
 8001a46:	3730      	adds	r7, #48	@ 0x30
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40005000 	.word	0x40005000
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020800 	.word	0x40020800
 8001a58:	40020c00 	.word	0x40020c00
 8001a5c:	40011000 	.word	0x40011000
 8001a60:	40020000 	.word	0x40020000
 8001a64:	20000164 	.word	0x20000164
 8001a68:	40026440 	.word	0x40026440

08001a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <NMI_Handler+0x4>

08001a74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <HardFault_Handler+0x4>

08001a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <MemManage_Handler+0x4>

08001a84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <BusFault_Handler+0x4>

08001a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <UsageFault_Handler+0x4>

08001a94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac2:	f000 f89b 	bl	8001bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ad0:	4802      	ldr	r0, [pc, #8]	@ (8001adc <DMA2_Stream2_IRQHandler+0x10>)
 8001ad2:	f000 fea7 	bl	8002824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000164 	.word	0x20000164

08001ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae4:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <SystemInit+0x20>)
 8001ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aea:	4a05      	ldr	r2, [pc, #20]	@ (8001b00 <SystemInit+0x20>)
 8001aec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001af0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b08:	f7ff ffea 	bl	8001ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b0c:	480c      	ldr	r0, [pc, #48]	@ (8001b40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b0e:	490d      	ldr	r1, [pc, #52]	@ (8001b44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b10:	4a0d      	ldr	r2, [pc, #52]	@ (8001b48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b14:	e002      	b.n	8001b1c <LoopCopyDataInit>

08001b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1a:	3304      	adds	r3, #4

08001b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b20:	d3f9      	bcc.n	8001b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b22:	4a0a      	ldr	r2, [pc, #40]	@ (8001b4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b24:	4c0a      	ldr	r4, [pc, #40]	@ (8001b50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b28:	e001      	b.n	8001b2e <LoopFillZerobss>

08001b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b2c:	3204      	adds	r2, #4

08001b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b30:	d3fb      	bcc.n	8001b2a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b32:	f003 f9a5 	bl	8004e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b36:	f7ff f9f3 	bl	8000f20 <main>
  bx  lr    
 8001b3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b44:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b48:	08004f88 	.word	0x08004f88
  ldr r2, =_sbss
 8001b4c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b50:	20000398 	.word	0x20000398

08001b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b54:	e7fe      	b.n	8001b54 <ADC_IRQHandler>
	...

08001b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b98 <HAL_Init+0x40>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0d      	ldr	r2, [pc, #52]	@ (8001b98 <HAL_Init+0x40>)
 8001b62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b68:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <HAL_Init+0x40>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b98 <HAL_Init+0x40>)
 8001b6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b74:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <HAL_Init+0x40>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a07      	ldr	r2, [pc, #28]	@ (8001b98 <HAL_Init+0x40>)
 8001b7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b80:	2003      	movs	r0, #3
 8001b82:	f000 fd07 	bl	8002594 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b86:	200f      	movs	r0, #15
 8001b88:	f000 f808 	bl	8001b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b8c:	f7ff fe30 	bl	80017f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40023c00 	.word	0x40023c00

08001b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba4:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <HAL_InitTick+0x54>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <HAL_InitTick+0x58>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 fd1f 	bl	80025fe <HAL_SYSTICK_Config>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00e      	b.n	8001be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b0f      	cmp	r3, #15
 8001bce:	d80a      	bhi.n	8001be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bd8:	f000 fce7 	bl	80025aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bdc:	4a06      	ldr	r2, [pc, #24]	@ (8001bf8 <HAL_InitTick+0x5c>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e000      	b.n	8001be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	20000008 	.word	0x20000008
 8001bf8:	20000004 	.word	0x20000004

08001bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_IncTick+0x20>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <HAL_IncTick+0x24>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4a04      	ldr	r2, [pc, #16]	@ (8001c20 <HAL_IncTick+0x24>)
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000008 	.word	0x20000008
 8001c20:	2000025c 	.word	0x2000025c

08001c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return uwTick;
 8001c28:	4b03      	ldr	r3, [pc, #12]	@ (8001c38 <HAL_GetTick+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	2000025c 	.word	0x2000025c

08001c3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e033      	b.n	8001cba <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d109      	bne.n	8001c6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff fdf0 	bl	8001840 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	f003 0310 	and.w	r3, r3, #16
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d118      	bne.n	8001cac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c82:	f023 0302 	bic.w	r3, r3, #2
 8001c86:	f043 0202 	orr.w	r2, r3, #2
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 fab4 	bl	80021fc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	f023 0303 	bic.w	r3, r3, #3
 8001ca2:	f043 0201 	orr.w	r2, r3, #1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001caa:	e001      	b.n	8001cb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_Start+0x1a>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e0b2      	b.n	8001e44 <HAL_ADC_Start+0x180>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d018      	beq.n	8001d26 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d04:	4b52      	ldr	r3, [pc, #328]	@ (8001e50 <HAL_ADC_Start+0x18c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a52      	ldr	r2, [pc, #328]	@ (8001e54 <HAL_ADC_Start+0x190>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	0c9a      	lsrs	r2, r3, #18
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001d18:	e002      	b.n	8001d20 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f9      	bne.n	8001d1a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d17a      	bne.n	8001e2a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d38:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d007      	beq.n	8001d66 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d5e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d72:	d106      	bne.n	8001d82 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d78:	f023 0206 	bic.w	r2, r3, #6
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d80:	e002      	b.n	8001d88 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d90:	4b31      	ldr	r3, [pc, #196]	@ (8001e58 <HAL_ADC_Start+0x194>)
 8001d92:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001d9c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 031f 	and.w	r3, r3, #31
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d12a      	bne.n	8001e00 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a2b      	ldr	r2, [pc, #172]	@ (8001e5c <HAL_ADC_Start+0x198>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d015      	beq.n	8001de0 <HAL_ADC_Start+0x11c>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a29      	ldr	r2, [pc, #164]	@ (8001e60 <HAL_ADC_Start+0x19c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d105      	bne.n	8001dca <HAL_ADC_Start+0x106>
 8001dbe:	4b26      	ldr	r3, [pc, #152]	@ (8001e58 <HAL_ADC_Start+0x194>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 031f 	and.w	r3, r3, #31
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00a      	beq.n	8001de0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a25      	ldr	r2, [pc, #148]	@ (8001e64 <HAL_ADC_Start+0x1a0>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d136      	bne.n	8001e42 <HAL_ADC_Start+0x17e>
 8001dd4:	4b20      	ldr	r3, [pc, #128]	@ (8001e58 <HAL_ADC_Start+0x194>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0310 	and.w	r3, r3, #16
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d130      	bne.n	8001e42 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d129      	bne.n	8001e42 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001dfc:	609a      	str	r2, [r3, #8]
 8001dfe:	e020      	b.n	8001e42 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a15      	ldr	r2, [pc, #84]	@ (8001e5c <HAL_ADC_Start+0x198>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d11b      	bne.n	8001e42 <HAL_ADC_Start+0x17e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d114      	bne.n	8001e42 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	e00b      	b.n	8001e42 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f043 0210 	orr.w	r2, r3, #16
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3a:	f043 0201 	orr.w	r2, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	20000000 	.word	0x20000000
 8001e54:	431bde83 	.word	0x431bde83
 8001e58:	40012300 	.word	0x40012300
 8001e5c:	40012000 	.word	0x40012000
 8001e60:	40012100 	.word	0x40012100
 8001e64:	40012200 	.word	0x40012200

08001e68 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e84:	d113      	bne.n	8001eae <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e94:	d10b      	bne.n	8001eae <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f043 0220 	orr.w	r2, r3, #32
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e063      	b.n	8001f76 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eae:	f7ff feb9 	bl	8001c24 <HAL_GetTick>
 8001eb2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001eb4:	e021      	b.n	8001efa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ebc:	d01d      	beq.n	8001efa <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d007      	beq.n	8001ed4 <HAL_ADC_PollForConversion+0x6c>
 8001ec4:	f7ff feae 	bl	8001c24 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d212      	bcs.n	8001efa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d00b      	beq.n	8001efa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	f043 0204 	orr.w	r2, r3, #4
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e03d      	b.n	8001f76 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d1d6      	bne.n	8001eb6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0212 	mvn.w	r2, #18
 8001f10:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d123      	bne.n	8001f74 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d11f      	bne.n	8001f74 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d111      	bne.n	8001f74 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d105      	bne.n	8001f74 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6c:	f043 0201 	orr.w	r2, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1c>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e113      	b.n	80021dc <HAL_ADC_ConfigChannel+0x244>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b09      	cmp	r3, #9
 8001fc2:	d925      	bls.n	8002010 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68d9      	ldr	r1, [r3, #12]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3b1e      	subs	r3, #30
 8001fda:	2207      	movs	r2, #7
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43da      	mvns	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	400a      	ands	r2, r1
 8001fe8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68d9      	ldr	r1, [r3, #12]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4403      	add	r3, r0
 8002002:	3b1e      	subs	r3, #30
 8002004:	409a      	lsls	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	e022      	b.n	8002056 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6919      	ldr	r1, [r3, #16]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	b29b      	uxth	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	4613      	mov	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4413      	add	r3, r2
 8002024:	2207      	movs	r2, #7
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43da      	mvns	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	400a      	ands	r2, r1
 8002032:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6919      	ldr	r1, [r3, #16]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	4618      	mov	r0, r3
 8002046:	4603      	mov	r3, r0
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4403      	add	r3, r0
 800204c:	409a      	lsls	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b06      	cmp	r3, #6
 800205c:	d824      	bhi.n	80020a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	3b05      	subs	r3, #5
 8002070:	221f      	movs	r2, #31
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	400a      	ands	r2, r1
 800207e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	b29b      	uxth	r3, r3
 800208c:	4618      	mov	r0, r3
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	3b05      	subs	r3, #5
 800209a:	fa00 f203 	lsl.w	r2, r0, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80020a6:	e04c      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b0c      	cmp	r3, #12
 80020ae:	d824      	bhi.n	80020fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	3b23      	subs	r3, #35	@ 0x23
 80020c2:	221f      	movs	r2, #31
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43da      	mvns	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	400a      	ands	r2, r1
 80020d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	4618      	mov	r0, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	3b23      	subs	r3, #35	@ 0x23
 80020ec:	fa00 f203 	lsl.w	r2, r0, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80020f8:	e023      	b.n	8002142 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	3b41      	subs	r3, #65	@ 0x41
 800210c:	221f      	movs	r2, #31
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43da      	mvns	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	400a      	ands	r2, r1
 800211a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	b29b      	uxth	r3, r3
 8002128:	4618      	mov	r0, r3
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	3b41      	subs	r3, #65	@ 0x41
 8002136:	fa00 f203 	lsl.w	r2, r0, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002142:	4b29      	ldr	r3, [pc, #164]	@ (80021e8 <HAL_ADC_ConfigChannel+0x250>)
 8002144:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a28      	ldr	r2, [pc, #160]	@ (80021ec <HAL_ADC_ConfigChannel+0x254>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d10f      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x1d8>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b12      	cmp	r3, #18
 8002156:	d10b      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1d      	ldr	r2, [pc, #116]	@ (80021ec <HAL_ADC_ConfigChannel+0x254>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d12b      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x23a>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a1c      	ldr	r2, [pc, #112]	@ (80021f0 <HAL_ADC_ConfigChannel+0x258>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d003      	beq.n	800218c <HAL_ADC_ConfigChannel+0x1f4>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b11      	cmp	r3, #17
 800218a:	d122      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a11      	ldr	r2, [pc, #68]	@ (80021f0 <HAL_ADC_ConfigChannel+0x258>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d111      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021ae:	4b11      	ldr	r3, [pc, #68]	@ (80021f4 <HAL_ADC_ConfigChannel+0x25c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a11      	ldr	r2, [pc, #68]	@ (80021f8 <HAL_ADC_ConfigChannel+0x260>)
 80021b4:	fba2 2303 	umull	r2, r3, r2, r3
 80021b8:	0c9a      	lsrs	r2, r3, #18
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80021c4:	e002      	b.n	80021cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	3b01      	subs	r3, #1
 80021ca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f9      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	40012300 	.word	0x40012300
 80021ec:	40012000 	.word	0x40012000
 80021f0:	10000012 	.word	0x10000012
 80021f4:	20000000 	.word	0x20000000
 80021f8:	431bde83 	.word	0x431bde83

080021fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002204:	4b79      	ldr	r3, [pc, #484]	@ (80023ec <ADC_Init+0x1f0>)
 8002206:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	431a      	orrs	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002230:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6859      	ldr	r1, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	021a      	lsls	r2, r3, #8
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002254:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6859      	ldr	r1, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002276:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6899      	ldr	r1, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228e:	4a58      	ldr	r2, [pc, #352]	@ (80023f0 <ADC_Init+0x1f4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d022      	beq.n	80022da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6899      	ldr	r1, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6899      	ldr	r1, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	e00f      	b.n	80022fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022f8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0202 	bic.w	r2, r2, #2
 8002308:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6899      	ldr	r1, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	7e1b      	ldrb	r3, [r3, #24]
 8002314:	005a      	lsls	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d01b      	beq.n	8002360 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002336:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002346:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6859      	ldr	r1, [r3, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002352:	3b01      	subs	r3, #1
 8002354:	035a      	lsls	r2, r3, #13
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	e007      	b.n	8002370 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800236e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800237e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	3b01      	subs	r3, #1
 800238c:	051a      	lsls	r2, r3, #20
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80023a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6899      	ldr	r1, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023b2:	025a      	lsls	r2, r3, #9
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6899      	ldr	r1, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	029a      	lsls	r2, r3, #10
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	609a      	str	r2, [r3, #8]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	40012300 	.word	0x40012300
 80023f0:	0f000001 	.word	0x0f000001

080023f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002404:	4b0c      	ldr	r3, [pc, #48]	@ (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002410:	4013      	ands	r3, r2
 8002412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800241c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002426:	4a04      	ldr	r2, [pc, #16]	@ (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	60d3      	str	r3, [r2, #12]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002440:	4b04      	ldr	r3, [pc, #16]	@ (8002454 <__NVIC_GetPriorityGrouping+0x18>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	f003 0307 	and.w	r3, r3, #7
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	2b00      	cmp	r3, #0
 8002468:	db0b      	blt.n	8002482 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	4907      	ldr	r1, [pc, #28]	@ (8002490 <__NVIC_EnableIRQ+0x38>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	2001      	movs	r0, #1
 800247a:	fa00 f202 	lsl.w	r2, r0, r2
 800247e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	e000e100 	.word	0xe000e100

08002494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	6039      	str	r1, [r7, #0]
 800249e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	db0a      	blt.n	80024be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	490c      	ldr	r1, [pc, #48]	@ (80024e0 <__NVIC_SetPriority+0x4c>)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	0112      	lsls	r2, r2, #4
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	440b      	add	r3, r1
 80024b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024bc:	e00a      	b.n	80024d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4908      	ldr	r1, [pc, #32]	@ (80024e4 <__NVIC_SetPriority+0x50>)
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	3b04      	subs	r3, #4
 80024cc:	0112      	lsls	r2, r2, #4
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	440b      	add	r3, r1
 80024d2:	761a      	strb	r2, [r3, #24]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000e100 	.word	0xe000e100
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	@ 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f1c3 0307 	rsb	r3, r3, #7
 8002502:	2b04      	cmp	r3, #4
 8002504:	bf28      	it	cs
 8002506:	2304      	movcs	r3, #4
 8002508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3304      	adds	r3, #4
 800250e:	2b06      	cmp	r3, #6
 8002510:	d902      	bls.n	8002518 <NVIC_EncodePriority+0x30>
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3b03      	subs	r3, #3
 8002516:	e000      	b.n	800251a <NVIC_EncodePriority+0x32>
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800251c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43da      	mvns	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	401a      	ands	r2, r3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002530:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	43d9      	mvns	r1, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002540:	4313      	orrs	r3, r2
         );
}
 8002542:	4618      	mov	r0, r3
 8002544:	3724      	adds	r7, #36	@ 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3b01      	subs	r3, #1
 800255c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002560:	d301      	bcc.n	8002566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002562:	2301      	movs	r3, #1
 8002564:	e00f      	b.n	8002586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002566:	4a0a      	ldr	r2, [pc, #40]	@ (8002590 <SysTick_Config+0x40>)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800256e:	210f      	movs	r1, #15
 8002570:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002574:	f7ff ff8e 	bl	8002494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002578:	4b05      	ldr	r3, [pc, #20]	@ (8002590 <SysTick_Config+0x40>)
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800257e:	4b04      	ldr	r3, [pc, #16]	@ (8002590 <SysTick_Config+0x40>)
 8002580:	2207      	movs	r2, #7
 8002582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	e000e010 	.word	0xe000e010

08002594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff ff29 	bl	80023f4 <__NVIC_SetPriorityGrouping>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b086      	sub	sp, #24
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	4603      	mov	r3, r0
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]
 80025b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025bc:	f7ff ff3e 	bl	800243c <__NVIC_GetPriorityGrouping>
 80025c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	6978      	ldr	r0, [r7, #20]
 80025c8:	f7ff ff8e 	bl	80024e8 <NVIC_EncodePriority>
 80025cc:	4602      	mov	r2, r0
 80025ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d2:	4611      	mov	r1, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff5d 	bl	8002494 <__NVIC_SetPriority>
}
 80025da:	bf00      	nop
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff31 	bl	8002458 <__NVIC_EnableIRQ>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ffa2 	bl	8002550 <SysTick_Config>
 800260c:	4603      	mov	r3, r0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002624:	f7ff fafe 	bl	8001c24 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e099      	b.n	8002768 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0201 	bic.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002654:	e00f      	b.n	8002676 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002656:	f7ff fae5 	bl	8001c24 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b05      	cmp	r3, #5
 8002662:	d908      	bls.n	8002676 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2220      	movs	r2, #32
 8002668:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2203      	movs	r2, #3
 800266e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e078      	b.n	8002768 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1e8      	bne.n	8002656 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	4b38      	ldr	r3, [pc, #224]	@ (8002770 <HAL_DMA_Init+0x158>)
 8002690:	4013      	ands	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d107      	bne.n	80026e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d8:	4313      	orrs	r3, r2
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f023 0307 	bic.w	r3, r3, #7
 80026f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	4313      	orrs	r3, r2
 8002700:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	2b04      	cmp	r3, #4
 8002708:	d117      	bne.n	800273a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00e      	beq.n	800273a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fa6f 	bl	8002c00 <DMA_CheckFifoParam>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2240      	movs	r2, #64	@ 0x40
 800272c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002736:	2301      	movs	r3, #1
 8002738:	e016      	b.n	8002768 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 fa26 	bl	8002b94 <DMA_CalcBaseAndBitshift>
 8002748:	4603      	mov	r3, r0
 800274a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002750:	223f      	movs	r2, #63	@ 0x3f
 8002752:	409a      	lsls	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	f010803f 	.word	0xf010803f

08002774 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_DMA_Start_IT+0x26>
 8002796:	2302      	movs	r3, #2
 8002798:	e040      	b.n	800281c <HAL_DMA_Start_IT+0xa8>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d12f      	bne.n	800280e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2202      	movs	r2, #2
 80027b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 f9b8 	bl	8002b38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027cc:	223f      	movs	r2, #63	@ 0x3f
 80027ce:	409a      	lsls	r2, r3
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0216 	orr.w	r2, r2, #22
 80027e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d007      	beq.n	80027fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0208 	orr.w	r2, r2, #8
 80027fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	e005      	b.n	800281a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002816:	2302      	movs	r3, #2
 8002818:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800281a:	7dfb      	ldrb	r3, [r7, #23]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002830:	4b8e      	ldr	r3, [pc, #568]	@ (8002a6c <HAL_DMA_IRQHandler+0x248>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a8e      	ldr	r2, [pc, #568]	@ (8002a70 <HAL_DMA_IRQHandler+0x24c>)
 8002836:	fba2 2303 	umull	r2, r3, r2, r3
 800283a:	0a9b      	lsrs	r3, r3, #10
 800283c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002842:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284e:	2208      	movs	r2, #8
 8002850:	409a      	lsls	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4013      	ands	r3, r2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d01a      	beq.n	8002890 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d013      	beq.n	8002890 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0204 	bic.w	r2, r2, #4
 8002876:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287c:	2208      	movs	r2, #8
 800287e:	409a      	lsls	r2, r3
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002888:	f043 0201 	orr.w	r2, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002894:	2201      	movs	r2, #1
 8002896:	409a      	lsls	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4013      	ands	r3, r2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d012      	beq.n	80028c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00b      	beq.n	80028c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b2:	2201      	movs	r2, #1
 80028b4:	409a      	lsls	r2, r3
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028be:	f043 0202 	orr.w	r2, r3, #2
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ca:	2204      	movs	r2, #4
 80028cc:	409a      	lsls	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d012      	beq.n	80028fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00b      	beq.n	80028fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e8:	2204      	movs	r2, #4
 80028ea:	409a      	lsls	r2, r3
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f4:	f043 0204 	orr.w	r2, r3, #4
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002900:	2210      	movs	r2, #16
 8002902:	409a      	lsls	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4013      	ands	r3, r2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d043      	beq.n	8002994 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d03c      	beq.n	8002994 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291e:	2210      	movs	r2, #16
 8002920:	409a      	lsls	r2, r3
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d018      	beq.n	8002966 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d108      	bne.n	8002954 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	d024      	beq.n	8002994 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	4798      	blx	r3
 8002952:	e01f      	b.n	8002994 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002958:	2b00      	cmp	r3, #0
 800295a:	d01b      	beq.n	8002994 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	4798      	blx	r3
 8002964:	e016      	b.n	8002994 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d107      	bne.n	8002984 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0208 	bic.w	r2, r2, #8
 8002982:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002998:	2220      	movs	r2, #32
 800299a:	409a      	lsls	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 808f 	beq.w	8002ac4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0310 	and.w	r3, r3, #16
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 8087 	beq.w	8002ac4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ba:	2220      	movs	r2, #32
 80029bc:	409a      	lsls	r2, r3
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b05      	cmp	r3, #5
 80029cc:	d136      	bne.n	8002a3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0216 	bic.w	r2, r2, #22
 80029dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695a      	ldr	r2, [r3, #20]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d103      	bne.n	80029fe <HAL_DMA_IRQHandler+0x1da>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d007      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0208 	bic.w	r2, r2, #8
 8002a0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a12:	223f      	movs	r2, #63	@ 0x3f
 8002a14:	409a      	lsls	r2, r3
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d07e      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	4798      	blx	r3
        }
        return;
 8002a3a:	e079      	b.n	8002b30 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d01d      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10d      	bne.n	8002a74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d031      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
 8002a68:	e02c      	b.n	8002ac4 <HAL_DMA_IRQHandler+0x2a0>
 8002a6a:	bf00      	nop
 8002a6c:	20000000 	.word	0x20000000
 8002a70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d023      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	4798      	blx	r3
 8002a84:	e01e      	b.n	8002ac4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10f      	bne.n	8002ab4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0210 	bic.w	r2, r2, #16
 8002aa2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d032      	beq.n	8002b32 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d022      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2205      	movs	r2, #5
 8002adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0201 	bic.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	3301      	adds	r3, #1
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d307      	bcc.n	8002b0c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f2      	bne.n	8002af0 <HAL_DMA_IRQHandler+0x2cc>
 8002b0a:	e000      	b.n	8002b0e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b0c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d005      	beq.n	8002b32 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	4798      	blx	r3
 8002b2e:	e000      	b.n	8002b32 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b30:	bf00      	nop
    }
  }
}
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b40      	cmp	r3, #64	@ 0x40
 8002b64:	d108      	bne.n	8002b78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b76:	e007      	b.n	8002b88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	60da      	str	r2, [r3, #12]
}
 8002b88:	bf00      	nop
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	3b10      	subs	r3, #16
 8002ba4:	4a14      	ldr	r2, [pc, #80]	@ (8002bf8 <DMA_CalcBaseAndBitshift+0x64>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	091b      	lsrs	r3, r3, #4
 8002bac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bae:	4a13      	ldr	r2, [pc, #76]	@ (8002bfc <DMA_CalcBaseAndBitshift+0x68>)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d909      	bls.n	8002bd6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002bca:	f023 0303 	bic.w	r3, r3, #3
 8002bce:	1d1a      	adds	r2, r3, #4
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002bd4:	e007      	b.n	8002be6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002bde:	f023 0303 	bic.w	r3, r3, #3
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	aaaaaaab 	.word	0xaaaaaaab
 8002bfc:	08004efc 	.word	0x08004efc

08002c00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d11f      	bne.n	8002c5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d856      	bhi.n	8002cce <DMA_CheckFifoParam+0xce>
 8002c20:	a201      	add	r2, pc, #4	@ (adr r2, 8002c28 <DMA_CheckFifoParam+0x28>)
 8002c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c26:	bf00      	nop
 8002c28:	08002c39 	.word	0x08002c39
 8002c2c:	08002c4b 	.word	0x08002c4b
 8002c30:	08002c39 	.word	0x08002c39
 8002c34:	08002ccf 	.word	0x08002ccf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d046      	beq.n	8002cd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c48:	e043      	b.n	8002cd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c52:	d140      	bne.n	8002cd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c58:	e03d      	b.n	8002cd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c62:	d121      	bne.n	8002ca8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d837      	bhi.n	8002cda <DMA_CheckFifoParam+0xda>
 8002c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c70 <DMA_CheckFifoParam+0x70>)
 8002c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c70:	08002c81 	.word	0x08002c81
 8002c74:	08002c87 	.word	0x08002c87
 8002c78:	08002c81 	.word	0x08002c81
 8002c7c:	08002c99 	.word	0x08002c99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
      break;
 8002c84:	e030      	b.n	8002ce8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d025      	beq.n	8002cde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c96:	e022      	b.n	8002cde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ca0:	d11f      	bne.n	8002ce2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ca6:	e01c      	b.n	8002ce2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d903      	bls.n	8002cb6 <DMA_CheckFifoParam+0xb6>
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d003      	beq.n	8002cbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cb4:	e018      	b.n	8002ce8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8002cba:	e015      	b.n	8002ce8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00e      	beq.n	8002ce6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
      break;
 8002ccc:	e00b      	b.n	8002ce6 <DMA_CheckFifoParam+0xe6>
      break;
 8002cce:	bf00      	nop
 8002cd0:	e00a      	b.n	8002ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cd2:	bf00      	nop
 8002cd4:	e008      	b.n	8002ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cd6:	bf00      	nop
 8002cd8:	e006      	b.n	8002ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cda:	bf00      	nop
 8002cdc:	e004      	b.n	8002ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cde:	bf00      	nop
 8002ce0:	e002      	b.n	8002ce8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ce2:	bf00      	nop
 8002ce4:	e000      	b.n	8002ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ce6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop

08002cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b089      	sub	sp, #36	@ 0x24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	e165      	b.n	8002fe0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d14:	2201      	movs	r2, #1
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	4013      	ands	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	f040 8154 	bne.w	8002fda <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d005      	beq.n	8002d4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d130      	bne.n	8002dac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	2203      	movs	r2, #3
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d80:	2201      	movs	r2, #1
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 0201 	and.w	r2, r3, #1
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d017      	beq.n	8002de8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d123      	bne.n	8002e3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	08da      	lsrs	r2, r3, #3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3208      	adds	r2, #8
 8002dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	220f      	movs	r2, #15
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4013      	ands	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	08da      	lsrs	r2, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3208      	adds	r2, #8
 8002e36:	69b9      	ldr	r1, [r7, #24]
 8002e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	2203      	movs	r2, #3
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 0203 	and.w	r2, r3, #3
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80ae 	beq.w	8002fda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	4b5d      	ldr	r3, [pc, #372]	@ (8002ff8 <HAL_GPIO_Init+0x300>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e86:	4a5c      	ldr	r2, [pc, #368]	@ (8002ff8 <HAL_GPIO_Init+0x300>)
 8002e88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e8e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ff8 <HAL_GPIO_Init+0x300>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e9a:	4a58      	ldr	r2, [pc, #352]	@ (8002ffc <HAL_GPIO_Init+0x304>)
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	089b      	lsrs	r3, r3, #2
 8002ea0:	3302      	adds	r3, #2
 8002ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	220f      	movs	r2, #15
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a4f      	ldr	r2, [pc, #316]	@ (8003000 <HAL_GPIO_Init+0x308>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d025      	beq.n	8002f12 <HAL_GPIO_Init+0x21a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a4e      	ldr	r2, [pc, #312]	@ (8003004 <HAL_GPIO_Init+0x30c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d01f      	beq.n	8002f0e <HAL_GPIO_Init+0x216>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a4d      	ldr	r2, [pc, #308]	@ (8003008 <HAL_GPIO_Init+0x310>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d019      	beq.n	8002f0a <HAL_GPIO_Init+0x212>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a4c      	ldr	r2, [pc, #304]	@ (800300c <HAL_GPIO_Init+0x314>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <HAL_GPIO_Init+0x20e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a4b      	ldr	r2, [pc, #300]	@ (8003010 <HAL_GPIO_Init+0x318>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00d      	beq.n	8002f02 <HAL_GPIO_Init+0x20a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a4a      	ldr	r2, [pc, #296]	@ (8003014 <HAL_GPIO_Init+0x31c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d007      	beq.n	8002efe <HAL_GPIO_Init+0x206>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a49      	ldr	r2, [pc, #292]	@ (8003018 <HAL_GPIO_Init+0x320>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d101      	bne.n	8002efa <HAL_GPIO_Init+0x202>
 8002ef6:	2306      	movs	r3, #6
 8002ef8:	e00c      	b.n	8002f14 <HAL_GPIO_Init+0x21c>
 8002efa:	2307      	movs	r3, #7
 8002efc:	e00a      	b.n	8002f14 <HAL_GPIO_Init+0x21c>
 8002efe:	2305      	movs	r3, #5
 8002f00:	e008      	b.n	8002f14 <HAL_GPIO_Init+0x21c>
 8002f02:	2304      	movs	r3, #4
 8002f04:	e006      	b.n	8002f14 <HAL_GPIO_Init+0x21c>
 8002f06:	2303      	movs	r3, #3
 8002f08:	e004      	b.n	8002f14 <HAL_GPIO_Init+0x21c>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e002      	b.n	8002f14 <HAL_GPIO_Init+0x21c>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_GPIO_Init+0x21c>
 8002f12:	2300      	movs	r3, #0
 8002f14:	69fa      	ldr	r2, [r7, #28]
 8002f16:	f002 0203 	and.w	r2, r2, #3
 8002f1a:	0092      	lsls	r2, r2, #2
 8002f1c:	4093      	lsls	r3, r2
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f24:	4935      	ldr	r1, [pc, #212]	@ (8002ffc <HAL_GPIO_Init+0x304>)
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	089b      	lsrs	r3, r3, #2
 8002f2a:	3302      	adds	r3, #2
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f32:	4b3a      	ldr	r3, [pc, #232]	@ (800301c <HAL_GPIO_Init+0x324>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f56:	4a31      	ldr	r2, [pc, #196]	@ (800301c <HAL_GPIO_Init+0x324>)
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f5c:	4b2f      	ldr	r3, [pc, #188]	@ (800301c <HAL_GPIO_Init+0x324>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	43db      	mvns	r3, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f80:	4a26      	ldr	r2, [pc, #152]	@ (800301c <HAL_GPIO_Init+0x324>)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f86:	4b25      	ldr	r3, [pc, #148]	@ (800301c <HAL_GPIO_Init+0x324>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002faa:	4a1c      	ldr	r2, [pc, #112]	@ (800301c <HAL_GPIO_Init+0x324>)
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800301c <HAL_GPIO_Init+0x324>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fd4:	4a11      	ldr	r2, [pc, #68]	@ (800301c <HAL_GPIO_Init+0x324>)
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b0f      	cmp	r3, #15
 8002fe4:	f67f ae96 	bls.w	8002d14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	3724      	adds	r7, #36	@ 0x24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40013800 	.word	0x40013800
 8003000:	40020000 	.word	0x40020000
 8003004:	40020400 	.word	0x40020400
 8003008:	40020800 	.word	0x40020800
 800300c:	40020c00 	.word	0x40020c00
 8003010:	40021000 	.word	0x40021000
 8003014:	40021400 	.word	0x40021400
 8003018:	40021800 	.word	0x40021800
 800301c:	40013c00 	.word	0x40013c00

08003020 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	887b      	ldrh	r3, [r7, #2]
 8003032:	4013      	ands	r3, r2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
 800303c:	e001      	b.n	8003042 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800303e:	2300      	movs	r3, #0
 8003040:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003042:	7bfb      	ldrb	r3, [r7, #15]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	807b      	strh	r3, [r7, #2]
 800305c:	4613      	mov	r3, r2
 800305e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003060:	787b      	ldrb	r3, [r7, #1]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003066:	887a      	ldrh	r2, [r7, #2]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800306c:	e003      	b.n	8003076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800306e:	887b      	ldrh	r3, [r7, #2]
 8003070:	041a      	lsls	r2, r3, #16
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	619a      	str	r2, [r3, #24]
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0cc      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003098:	4b68      	ldr	r3, [pc, #416]	@ (800323c <HAL_RCC_ClockConfig+0x1b8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d90c      	bls.n	80030c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b65      	ldr	r3, [pc, #404]	@ (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ae:	4b63      	ldr	r3, [pc, #396]	@ (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0b8      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d020      	beq.n	800310e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d8:	4b59      	ldr	r3, [pc, #356]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4a58      	ldr	r2, [pc, #352]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f0:	4b53      	ldr	r3, [pc, #332]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4a52      	ldr	r2, [pc, #328]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030fc:	4b50      	ldr	r3, [pc, #320]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	494d      	ldr	r1, [pc, #308]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d044      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d107      	bne.n	8003132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	4b47      	ldr	r3, [pc, #284]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d119      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e07f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d003      	beq.n	8003142 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800313e:	2b03      	cmp	r3, #3
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003142:	4b3f      	ldr	r3, [pc, #252]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e06f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003152:	4b3b      	ldr	r3, [pc, #236]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e067      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003162:	4b37      	ldr	r3, [pc, #220]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f023 0203 	bic.w	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4934      	ldr	r1, [pc, #208]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	4313      	orrs	r3, r2
 8003172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003174:	f7fe fd56 	bl	8001c24 <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	e00a      	b.n	8003192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317c:	f7fe fd52 	bl	8001c24 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e04f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	4b2b      	ldr	r3, [pc, #172]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 020c 	and.w	r2, r3, #12
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d1eb      	bne.n	800317c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031a4:	4b25      	ldr	r3, [pc, #148]	@ (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d20c      	bcs.n	80031cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b22      	ldr	r3, [pc, #136]	@ (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ba:	4b20      	ldr	r3, [pc, #128]	@ (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e032      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d8:	4b19      	ldr	r3, [pc, #100]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4916      	ldr	r1, [pc, #88]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031f6:	4b12      	ldr	r3, [pc, #72]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	490e      	ldr	r1, [pc, #56]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800320a:	f000 f855 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 800320e:	4602      	mov	r2, r0
 8003210:	4b0b      	ldr	r3, [pc, #44]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	490a      	ldr	r1, [pc, #40]	@ (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 800321c:	5ccb      	ldrb	r3, [r1, r3]
 800321e:	fa22 f303 	lsr.w	r3, r2, r3
 8003222:	4a09      	ldr	r2, [pc, #36]	@ (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003226:	4b09      	ldr	r3, [pc, #36]	@ (800324c <HAL_RCC_ClockConfig+0x1c8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe fcb6 	bl	8001b9c <HAL_InitTick>

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40023c00 	.word	0x40023c00
 8003240:	40023800 	.word	0x40023800
 8003244:	08004ee4 	.word	0x08004ee4
 8003248:	20000000 	.word	0x20000000
 800324c:	20000004 	.word	0x20000004

08003250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003254:	4b03      	ldr	r3, [pc, #12]	@ (8003264 <HAL_RCC_GetHCLKFreq+0x14>)
 8003256:	681b      	ldr	r3, [r3, #0]
}
 8003258:	4618      	mov	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	20000000 	.word	0x20000000

08003268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800326c:	f7ff fff0 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 8003270:	4602      	mov	r2, r0
 8003272:	4b05      	ldr	r3, [pc, #20]	@ (8003288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	0a9b      	lsrs	r3, r3, #10
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	4903      	ldr	r1, [pc, #12]	@ (800328c <HAL_RCC_GetPCLK1Freq+0x24>)
 800327e:	5ccb      	ldrb	r3, [r1, r3]
 8003280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003284:	4618      	mov	r0, r3
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40023800 	.word	0x40023800
 800328c:	08004ef4 	.word	0x08004ef4

08003290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003294:	f7ff ffdc 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 8003298:	4602      	mov	r2, r0
 800329a:	4b05      	ldr	r3, [pc, #20]	@ (80032b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	0b5b      	lsrs	r3, r3, #13
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	4903      	ldr	r1, [pc, #12]	@ (80032b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032a6:	5ccb      	ldrb	r3, [r1, r3]
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40023800 	.word	0x40023800
 80032b4:	08004ef4 	.word	0x08004ef4

080032b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032bc:	b0a6      	sub	sp, #152	@ 0x98
 80032be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032de:	4bc8      	ldr	r3, [pc, #800]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x348>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b0c      	cmp	r3, #12
 80032e8:	f200 817e 	bhi.w	80035e8 <HAL_RCC_GetSysClockFreq+0x330>
 80032ec:	a201      	add	r2, pc, #4	@ (adr r2, 80032f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80032ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f2:	bf00      	nop
 80032f4:	08003329 	.word	0x08003329
 80032f8:	080035e9 	.word	0x080035e9
 80032fc:	080035e9 	.word	0x080035e9
 8003300:	080035e9 	.word	0x080035e9
 8003304:	08003331 	.word	0x08003331
 8003308:	080035e9 	.word	0x080035e9
 800330c:	080035e9 	.word	0x080035e9
 8003310:	080035e9 	.word	0x080035e9
 8003314:	08003339 	.word	0x08003339
 8003318:	080035e9 	.word	0x080035e9
 800331c:	080035e9 	.word	0x080035e9
 8003320:	080035e9 	.word	0x080035e9
 8003324:	080034a3 	.word	0x080034a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003328:	4bb6      	ldr	r3, [pc, #728]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x34c>)
 800332a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800332e:	e15f      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003330:	4bb5      	ldr	r3, [pc, #724]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x350>)
 8003332:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003336:	e15b      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003338:	4bb1      	ldr	r3, [pc, #708]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x348>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003340:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003344:	4bae      	ldr	r3, [pc, #696]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x348>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d031      	beq.n	80033b4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003350:	4bab      	ldr	r3, [pc, #684]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x348>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	099b      	lsrs	r3, r3, #6
 8003356:	2200      	movs	r2, #0
 8003358:	66bb      	str	r3, [r7, #104]	@ 0x68
 800335a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800335c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800335e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003362:	663b      	str	r3, [r7, #96]	@ 0x60
 8003364:	2300      	movs	r3, #0
 8003366:	667b      	str	r3, [r7, #100]	@ 0x64
 8003368:	4ba7      	ldr	r3, [pc, #668]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x350>)
 800336a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800336e:	462a      	mov	r2, r5
 8003370:	fb03 f202 	mul.w	r2, r3, r2
 8003374:	2300      	movs	r3, #0
 8003376:	4621      	mov	r1, r4
 8003378:	fb01 f303 	mul.w	r3, r1, r3
 800337c:	4413      	add	r3, r2
 800337e:	4aa2      	ldr	r2, [pc, #648]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x350>)
 8003380:	4621      	mov	r1, r4
 8003382:	fba1 1202 	umull	r1, r2, r1, r2
 8003386:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003388:	460a      	mov	r2, r1
 800338a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800338c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800338e:	4413      	add	r3, r2
 8003390:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003392:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003396:	2200      	movs	r2, #0
 8003398:	65bb      	str	r3, [r7, #88]	@ 0x58
 800339a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800339c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80033a0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80033a4:	f7fd fbe4 	bl	8000b70 <__aeabi_uldivmod>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4613      	mov	r3, r2
 80033ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80033b2:	e064      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b4:	4b92      	ldr	r3, [pc, #584]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x348>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	099b      	lsrs	r3, r3, #6
 80033ba:	2200      	movs	r2, #0
 80033bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80033be:	657a      	str	r2, [r7, #84]	@ 0x54
 80033c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033c8:	2300      	movs	r3, #0
 80033ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033cc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80033d0:	4622      	mov	r2, r4
 80033d2:	462b      	mov	r3, r5
 80033d4:	f04f 0000 	mov.w	r0, #0
 80033d8:	f04f 0100 	mov.w	r1, #0
 80033dc:	0159      	lsls	r1, r3, #5
 80033de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033e2:	0150      	lsls	r0, r2, #5
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4621      	mov	r1, r4
 80033ea:	1a51      	subs	r1, r2, r1
 80033ec:	6139      	str	r1, [r7, #16]
 80033ee:	4629      	mov	r1, r5
 80033f0:	eb63 0301 	sbc.w	r3, r3, r1
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003402:	4659      	mov	r1, fp
 8003404:	018b      	lsls	r3, r1, #6
 8003406:	4651      	mov	r1, sl
 8003408:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800340c:	4651      	mov	r1, sl
 800340e:	018a      	lsls	r2, r1, #6
 8003410:	4651      	mov	r1, sl
 8003412:	ebb2 0801 	subs.w	r8, r2, r1
 8003416:	4659      	mov	r1, fp
 8003418:	eb63 0901 	sbc.w	r9, r3, r1
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003428:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800342c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003430:	4690      	mov	r8, r2
 8003432:	4699      	mov	r9, r3
 8003434:	4623      	mov	r3, r4
 8003436:	eb18 0303 	adds.w	r3, r8, r3
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	462b      	mov	r3, r5
 800343e:	eb49 0303 	adc.w	r3, r9, r3
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003450:	4629      	mov	r1, r5
 8003452:	028b      	lsls	r3, r1, #10
 8003454:	4621      	mov	r1, r4
 8003456:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800345a:	4621      	mov	r1, r4
 800345c:	028a      	lsls	r2, r1, #10
 800345e:	4610      	mov	r0, r2
 8003460:	4619      	mov	r1, r3
 8003462:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003466:	2200      	movs	r2, #0
 8003468:	643b      	str	r3, [r7, #64]	@ 0x40
 800346a:	647a      	str	r2, [r7, #68]	@ 0x44
 800346c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003470:	f7fd fb7e 	bl	8000b70 <__aeabi_uldivmod>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4613      	mov	r3, r2
 800347a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800347e:	4b60      	ldr	r3, [pc, #384]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x348>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	0c1b      	lsrs	r3, r3, #16
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	3301      	adds	r3, #1
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003490:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003494:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003498:	fbb2 f3f3 	udiv	r3, r2, r3
 800349c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80034a0:	e0a6      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034a2:	4b57      	ldr	r3, [pc, #348]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x348>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ae:	4b54      	ldr	r3, [pc, #336]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x348>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d02a      	beq.n	8003510 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ba:	4b51      	ldr	r3, [pc, #324]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x348>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	099b      	lsrs	r3, r3, #6
 80034c0:	2200      	movs	r2, #0
 80034c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80034c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034cc:	2100      	movs	r1, #0
 80034ce:	4b4e      	ldr	r3, [pc, #312]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x350>)
 80034d0:	fb03 f201 	mul.w	r2, r3, r1
 80034d4:	2300      	movs	r3, #0
 80034d6:	fb00 f303 	mul.w	r3, r0, r3
 80034da:	4413      	add	r3, r2
 80034dc:	4a4a      	ldr	r2, [pc, #296]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x350>)
 80034de:	fba0 1202 	umull	r1, r2, r0, r2
 80034e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80034e4:	460a      	mov	r2, r1
 80034e6:	673a      	str	r2, [r7, #112]	@ 0x70
 80034e8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80034ea:	4413      	add	r3, r2
 80034ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80034ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034f2:	2200      	movs	r2, #0
 80034f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80034f6:	637a      	str	r2, [r7, #52]	@ 0x34
 80034f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80034fc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003500:	f7fd fb36 	bl	8000b70 <__aeabi_uldivmod>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4613      	mov	r3, r2
 800350a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800350e:	e05b      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003510:	4b3b      	ldr	r3, [pc, #236]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x348>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	099b      	lsrs	r3, r3, #6
 8003516:	2200      	movs	r2, #0
 8003518:	62bb      	str	r3, [r7, #40]	@ 0x28
 800351a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800351c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003522:	623b      	str	r3, [r7, #32]
 8003524:	2300      	movs	r3, #0
 8003526:	627b      	str	r3, [r7, #36]	@ 0x24
 8003528:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800352c:	4642      	mov	r2, r8
 800352e:	464b      	mov	r3, r9
 8003530:	f04f 0000 	mov.w	r0, #0
 8003534:	f04f 0100 	mov.w	r1, #0
 8003538:	0159      	lsls	r1, r3, #5
 800353a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800353e:	0150      	lsls	r0, r2, #5
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4641      	mov	r1, r8
 8003546:	ebb2 0a01 	subs.w	sl, r2, r1
 800354a:	4649      	mov	r1, r9
 800354c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800355c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003560:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003564:	ebb2 040a 	subs.w	r4, r2, sl
 8003568:	eb63 050b 	sbc.w	r5, r3, fp
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	00eb      	lsls	r3, r5, #3
 8003576:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800357a:	00e2      	lsls	r2, r4, #3
 800357c:	4614      	mov	r4, r2
 800357e:	461d      	mov	r5, r3
 8003580:	4643      	mov	r3, r8
 8003582:	18e3      	adds	r3, r4, r3
 8003584:	603b      	str	r3, [r7, #0]
 8003586:	464b      	mov	r3, r9
 8003588:	eb45 0303 	adc.w	r3, r5, r3
 800358c:	607b      	str	r3, [r7, #4]
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	f04f 0300 	mov.w	r3, #0
 8003596:	e9d7 4500 	ldrd	r4, r5, [r7]
 800359a:	4629      	mov	r1, r5
 800359c:	028b      	lsls	r3, r1, #10
 800359e:	4621      	mov	r1, r4
 80035a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035a4:	4621      	mov	r1, r4
 80035a6:	028a      	lsls	r2, r1, #10
 80035a8:	4610      	mov	r0, r2
 80035aa:	4619      	mov	r1, r3
 80035ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035b0:	2200      	movs	r2, #0
 80035b2:	61bb      	str	r3, [r7, #24]
 80035b4:	61fa      	str	r2, [r7, #28]
 80035b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035ba:	f7fd fad9 	bl	8000b70 <__aeabi_uldivmod>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4613      	mov	r3, r2
 80035c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80035c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x348>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	0f1b      	lsrs	r3, r3, #28
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80035d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80035da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80035de:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80035e6:	e003      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035e8:	4b06      	ldr	r3, [pc, #24]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x34c>)
 80035ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80035ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3798      	adds	r7, #152	@ 0x98
 80035f8:	46bd      	mov	sp, r7
 80035fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035fe:	bf00      	nop
 8003600:	40023800 	.word	0x40023800
 8003604:	00f42400 	.word	0x00f42400
 8003608:	017d7840 	.word	0x017d7840

0800360c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e28d      	b.n	8003b3a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 8083 	beq.w	8003732 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800362c:	4b94      	ldr	r3, [pc, #592]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 030c 	and.w	r3, r3, #12
 8003634:	2b04      	cmp	r3, #4
 8003636:	d019      	beq.n	800366c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003638:	4b91      	ldr	r3, [pc, #580]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003640:	2b08      	cmp	r3, #8
 8003642:	d106      	bne.n	8003652 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003644:	4b8e      	ldr	r3, [pc, #568]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800364c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003650:	d00c      	beq.n	800366c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003652:	4b8b      	ldr	r3, [pc, #556]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800365a:	2b0c      	cmp	r3, #12
 800365c:	d112      	bne.n	8003684 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800365e:	4b88      	ldr	r3, [pc, #544]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003666:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800366a:	d10b      	bne.n	8003684 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800366c:	4b84      	ldr	r3, [pc, #528]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d05b      	beq.n	8003730 <HAL_RCC_OscConfig+0x124>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d157      	bne.n	8003730 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e25a      	b.n	8003b3a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800368c:	d106      	bne.n	800369c <HAL_RCC_OscConfig+0x90>
 800368e:	4b7c      	ldr	r3, [pc, #496]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a7b      	ldr	r2, [pc, #492]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 8003694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	e01d      	b.n	80036d8 <HAL_RCC_OscConfig+0xcc>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036a4:	d10c      	bne.n	80036c0 <HAL_RCC_OscConfig+0xb4>
 80036a6:	4b76      	ldr	r3, [pc, #472]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a75      	ldr	r2, [pc, #468]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 80036ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	4b73      	ldr	r3, [pc, #460]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a72      	ldr	r2, [pc, #456]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 80036b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	e00b      	b.n	80036d8 <HAL_RCC_OscConfig+0xcc>
 80036c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 80036c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a6b      	ldr	r2, [pc, #428]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 80036d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d013      	beq.n	8003708 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e0:	f7fe faa0 	bl	8001c24 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e8:	f7fe fa9c 	bl	8001c24 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b64      	cmp	r3, #100	@ 0x64
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e21f      	b.n	8003b3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fa:	4b61      	ldr	r3, [pc, #388]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0xdc>
 8003706:	e014      	b.n	8003732 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7fe fa8c 	bl	8001c24 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003710:	f7fe fa88 	bl	8001c24 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	@ 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e20b      	b.n	8003b3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003722:	4b57      	ldr	r3, [pc, #348]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x104>
 800372e:	e000      	b.n	8003732 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d06f      	beq.n	800381e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800373e:	4b50      	ldr	r3, [pc, #320]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	2b00      	cmp	r3, #0
 8003748:	d017      	beq.n	800377a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800374a:	4b4d      	ldr	r3, [pc, #308]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003752:	2b08      	cmp	r3, #8
 8003754:	d105      	bne.n	8003762 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003756:	4b4a      	ldr	r3, [pc, #296]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00b      	beq.n	800377a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003762:	4b47      	ldr	r3, [pc, #284]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800376a:	2b0c      	cmp	r3, #12
 800376c:	d11c      	bne.n	80037a8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800376e:	4b44      	ldr	r3, [pc, #272]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d116      	bne.n	80037a8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377a:	4b41      	ldr	r3, [pc, #260]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d005      	beq.n	8003792 <HAL_RCC_OscConfig+0x186>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d001      	beq.n	8003792 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e1d3      	b.n	8003b3a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003792:	4b3b      	ldr	r3, [pc, #236]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	4937      	ldr	r1, [pc, #220]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037a6:	e03a      	b.n	800381e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d020      	beq.n	80037f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b0:	4b34      	ldr	r3, [pc, #208]	@ (8003884 <HAL_RCC_OscConfig+0x278>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b6:	f7fe fa35 	bl	8001c24 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037be:	f7fe fa31 	bl	8001c24 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e1b4      	b.n	8003b3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037dc:	4b28      	ldr	r3, [pc, #160]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	4925      	ldr	r1, [pc, #148]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	600b      	str	r3, [r1, #0]
 80037f0:	e015      	b.n	800381e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037f2:	4b24      	ldr	r3, [pc, #144]	@ (8003884 <HAL_RCC_OscConfig+0x278>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f8:	f7fe fa14 	bl	8001c24 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003800:	f7fe fa10 	bl	8001c24 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e193      	b.n	8003b3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003812:	4b1b      	ldr	r3, [pc, #108]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f0      	bne.n	8003800 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d036      	beq.n	8003898 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d016      	beq.n	8003860 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003832:	4b15      	ldr	r3, [pc, #84]	@ (8003888 <HAL_RCC_OscConfig+0x27c>)
 8003834:	2201      	movs	r2, #1
 8003836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7fe f9f4 	bl	8001c24 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003840:	f7fe f9f0 	bl	8001c24 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e173      	b.n	8003b3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003852:	4b0b      	ldr	r3, [pc, #44]	@ (8003880 <HAL_RCC_OscConfig+0x274>)
 8003854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0x234>
 800385e:	e01b      	b.n	8003898 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003860:	4b09      	ldr	r3, [pc, #36]	@ (8003888 <HAL_RCC_OscConfig+0x27c>)
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003866:	f7fe f9dd 	bl	8001c24 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800386c:	e00e      	b.n	800388c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800386e:	f7fe f9d9 	bl	8001c24 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d907      	bls.n	800388c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e15c      	b.n	8003b3a <HAL_RCC_OscConfig+0x52e>
 8003880:	40023800 	.word	0x40023800
 8003884:	42470000 	.word	0x42470000
 8003888:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800388c:	4b8a      	ldr	r3, [pc, #552]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 800388e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1ea      	bne.n	800386e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 8097 	beq.w	80039d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a6:	2300      	movs	r3, #0
 80038a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038aa:	4b83      	ldr	r3, [pc, #524]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10f      	bne.n	80038d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	4b7f      	ldr	r3, [pc, #508]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	4a7e      	ldr	r2, [pc, #504]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 80038c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038c6:	4b7c      	ldr	r3, [pc, #496]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ce:	60bb      	str	r3, [r7, #8]
 80038d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d2:	2301      	movs	r3, #1
 80038d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d6:	4b79      	ldr	r3, [pc, #484]	@ (8003abc <HAL_RCC_OscConfig+0x4b0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d118      	bne.n	8003914 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038e2:	4b76      	ldr	r3, [pc, #472]	@ (8003abc <HAL_RCC_OscConfig+0x4b0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a75      	ldr	r2, [pc, #468]	@ (8003abc <HAL_RCC_OscConfig+0x4b0>)
 80038e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ee:	f7fe f999 	bl	8001c24 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f6:	f7fe f995 	bl	8001c24 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e118      	b.n	8003b3a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003908:	4b6c      	ldr	r3, [pc, #432]	@ (8003abc <HAL_RCC_OscConfig+0x4b0>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0f0      	beq.n	80038f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d106      	bne.n	800392a <HAL_RCC_OscConfig+0x31e>
 800391c:	4b66      	ldr	r3, [pc, #408]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 800391e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003920:	4a65      	ldr	r2, [pc, #404]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	6713      	str	r3, [r2, #112]	@ 0x70
 8003928:	e01c      	b.n	8003964 <HAL_RCC_OscConfig+0x358>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b05      	cmp	r3, #5
 8003930:	d10c      	bne.n	800394c <HAL_RCC_OscConfig+0x340>
 8003932:	4b61      	ldr	r3, [pc, #388]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003936:	4a60      	ldr	r2, [pc, #384]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 8003938:	f043 0304 	orr.w	r3, r3, #4
 800393c:	6713      	str	r3, [r2, #112]	@ 0x70
 800393e:	4b5e      	ldr	r3, [pc, #376]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003942:	4a5d      	ldr	r2, [pc, #372]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	6713      	str	r3, [r2, #112]	@ 0x70
 800394a:	e00b      	b.n	8003964 <HAL_RCC_OscConfig+0x358>
 800394c:	4b5a      	ldr	r3, [pc, #360]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 800394e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003950:	4a59      	ldr	r2, [pc, #356]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 8003952:	f023 0301 	bic.w	r3, r3, #1
 8003956:	6713      	str	r3, [r2, #112]	@ 0x70
 8003958:	4b57      	ldr	r3, [pc, #348]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 800395a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800395c:	4a56      	ldr	r2, [pc, #344]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 800395e:	f023 0304 	bic.w	r3, r3, #4
 8003962:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d015      	beq.n	8003998 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396c:	f7fe f95a 	bl	8001c24 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003972:	e00a      	b.n	800398a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003974:	f7fe f956 	bl	8001c24 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e0d7      	b.n	8003b3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398a:	4b4b      	ldr	r3, [pc, #300]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0ee      	beq.n	8003974 <HAL_RCC_OscConfig+0x368>
 8003996:	e014      	b.n	80039c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003998:	f7fe f944 	bl	8001c24 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800399e:	e00a      	b.n	80039b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a0:	f7fe f940 	bl	8001c24 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e0c1      	b.n	8003b3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b6:	4b40      	ldr	r3, [pc, #256]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1ee      	bne.n	80039a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039c2:	7dfb      	ldrb	r3, [r7, #23]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d105      	bne.n	80039d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 80039ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039cc:	4a3a      	ldr	r2, [pc, #232]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 80039ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 80ad 	beq.w	8003b38 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039de:	4b36      	ldr	r3, [pc, #216]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d060      	beq.n	8003aac <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d145      	bne.n	8003a7e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f2:	4b33      	ldr	r3, [pc, #204]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b4>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fe f914 	bl	8001c24 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a00:	f7fe f910 	bl	8001c24 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e093      	b.n	8003b3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a12:	4b29      	ldr	r3, [pc, #164]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69da      	ldr	r2, [r3, #28]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2c:	019b      	lsls	r3, r3, #6
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a34:	085b      	lsrs	r3, r3, #1
 8003a36:	3b01      	subs	r3, #1
 8003a38:	041b      	lsls	r3, r3, #16
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a40:	061b      	lsls	r3, r3, #24
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a48:	071b      	lsls	r3, r3, #28
 8003a4a:	491b      	ldr	r1, [pc, #108]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a50:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b4>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a56:	f7fe f8e5 	bl	8001c24 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a5e:	f7fe f8e1 	bl	8001c24 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e064      	b.n	8003b3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a70:	4b11      	ldr	r3, [pc, #68]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0x452>
 8003a7c:	e05c      	b.n	8003b38 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a7e:	4b10      	ldr	r3, [pc, #64]	@ (8003ac0 <HAL_RCC_OscConfig+0x4b4>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fe f8ce 	bl	8001c24 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8c:	f7fe f8ca 	bl	8001c24 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e04d      	b.n	8003b3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9e:	4b06      	ldr	r3, [pc, #24]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ac>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x480>
 8003aaa:	e045      	b.n	8003b38 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d107      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e040      	b.n	8003b3a <HAL_RCC_OscConfig+0x52e>
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	40007000 	.word	0x40007000
 8003ac0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b44 <HAL_RCC_OscConfig+0x538>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d030      	beq.n	8003b34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d129      	bne.n	8003b34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d122      	bne.n	8003b34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003af4:	4013      	ands	r3, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003afa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d119      	bne.n	8003b34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0a:	085b      	lsrs	r3, r3, #1
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d10f      	bne.n	8003b34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d107      	bne.n	8003b34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d001      	beq.n	8003b38 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40023800 	.word	0x40023800

08003b48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e042      	b.n	8003be0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fd feaa 	bl	80018c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2224      	movs	r2, #36	@ 0x24
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fb83 	bl	8004298 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ba0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08a      	sub	sp, #40	@ 0x28
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d175      	bne.n	8003cf4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <HAL_UART_Transmit+0x2c>
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e06e      	b.n	8003cf6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2221      	movs	r2, #33	@ 0x21
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c26:	f7fd fffd 	bl	8001c24 <HAL_GetTick>
 8003c2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	88fa      	ldrh	r2, [r7, #6]
 8003c30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	88fa      	ldrh	r2, [r7, #6]
 8003c36:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c40:	d108      	bne.n	8003c54 <HAL_UART_Transmit+0x6c>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d104      	bne.n	8003c54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	e003      	b.n	8003c5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c5c:	e02e      	b.n	8003cbc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2200      	movs	r2, #0
 8003c66:	2180      	movs	r1, #128	@ 0x80
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f995 	bl	8003f98 <UART_WaitOnFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e03a      	b.n	8003cf6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10b      	bne.n	8003c9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	3302      	adds	r3, #2
 8003c9a:	61bb      	str	r3, [r7, #24]
 8003c9c:	e007      	b.n	8003cae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	781a      	ldrb	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	3301      	adds	r3, #1
 8003cac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1cb      	bne.n	8003c5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2140      	movs	r1, #64	@ 0x40
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 f961 	bl	8003f98 <UART_WaitOnFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e006      	b.n	8003cf6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e000      	b.n	8003cf6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003cf4:	2302      	movs	r3, #2
  }
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3720      	adds	r7, #32
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b084      	sub	sp, #16
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	d112      	bne.n	8003d3e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <HAL_UART_Receive_DMA+0x26>
 8003d1e:	88fb      	ldrh	r3, [r7, #6]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e00b      	b.n	8003d40 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003d2e:	88fb      	ldrh	r3, [r7, #6]
 8003d30:	461a      	mov	r2, r3
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 f989 	bl	800404c <UART_Start_Receive_DMA>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	e000      	b.n	8003d40 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003d3e:	2302      	movs	r3, #2
  }
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b09c      	sub	sp, #112	@ 0x70
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d172      	bne.n	8003e9e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003db8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dba:	2200      	movs	r2, #0
 8003dbc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	330c      	adds	r3, #12
 8003dc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dc8:	e853 3f00 	ldrex	r3, [r3]
 8003dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003dce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	330c      	adds	r3, #12
 8003ddc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003dde:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003de0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003de4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003de6:	e841 2300 	strex	r3, r2, [r1]
 8003dea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003dec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1e5      	bne.n	8003dbe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3314      	adds	r3, #20
 8003df8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	3314      	adds	r3, #20
 8003e10:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003e12:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e1a:	e841 2300 	strex	r3, r2, [r1]
 8003e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1e5      	bne.n	8003df2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3314      	adds	r3, #20
 8003e2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	623b      	str	r3, [r7, #32]
   return(result);
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3314      	adds	r3, #20
 8003e44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003e46:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e5      	bne.n	8003e26 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d119      	bne.n	8003e9e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	330c      	adds	r3, #12
 8003e70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f023 0310 	bic.w	r3, r3, #16
 8003e80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003e8a:	61fa      	str	r2, [r7, #28]
 8003e8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	69b9      	ldr	r1, [r7, #24]
 8003e90:	69fa      	ldr	r2, [r7, #28]
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	617b      	str	r3, [r7, #20]
   return(result);
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e5      	bne.n	8003e6a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ea4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d106      	bne.n	8003eba <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003eb4:	f7ff ff66 	bl	8003d84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003eb8:	e002      	b.n	8003ec0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003eba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003ebc:	f7ff ff44 	bl	8003d48 <HAL_UART_RxCpltCallback>
}
 8003ec0:	bf00      	nop
 8003ec2:	3770      	adds	r7, #112	@ 0x70
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d108      	bne.n	8003ef6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ee8:	085b      	lsrs	r3, r3, #1
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	4619      	mov	r1, r3
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f7ff ff48 	bl	8003d84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ef4:	e002      	b.n	8003efc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f7ff ff30 	bl	8003d5c <HAL_UART_RxHalfCpltCallback>
}
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f14:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f20:	2b80      	cmp	r3, #128	@ 0x80
 8003f22:	bf0c      	ite	eq
 8003f24:	2301      	moveq	r3, #1
 8003f26:	2300      	movne	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b21      	cmp	r3, #33	@ 0x21
 8003f36:	d108      	bne.n	8003f4a <UART_DMAError+0x46>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2200      	movs	r2, #0
 8003f42:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003f44:	68b8      	ldr	r0, [r7, #8]
 8003f46:	f000 f91b 	bl	8004180 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f54:	2b40      	cmp	r3, #64	@ 0x40
 8003f56:	bf0c      	ite	eq
 8003f58:	2301      	moveq	r3, #1
 8003f5a:	2300      	movne	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b22      	cmp	r3, #34	@ 0x22
 8003f6a:	d108      	bne.n	8003f7e <UART_DMAError+0x7a>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2200      	movs	r2, #0
 8003f76:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003f78:	68b8      	ldr	r0, [r7, #8]
 8003f7a:	f000 f929 	bl	80041d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f82:	f043 0210 	orr.w	r2, r3, #16
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f8a:	68b8      	ldr	r0, [r7, #8]
 8003f8c:	f7ff fef0 	bl	8003d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f90:	bf00      	nop
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	603b      	str	r3, [r7, #0]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa8:	e03b      	b.n	8004022 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fb0:	d037      	beq.n	8004022 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb2:	f7fd fe37 	bl	8001c24 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	6a3a      	ldr	r2, [r7, #32]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d302      	bcc.n	8003fc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e03a      	b.n	8004042 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d023      	beq.n	8004022 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b80      	cmp	r3, #128	@ 0x80
 8003fde:	d020      	beq.n	8004022 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b40      	cmp	r3, #64	@ 0x40
 8003fe4:	d01d      	beq.n	8004022 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d116      	bne.n	8004022 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 f8e0 	bl	80041d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2208      	movs	r2, #8
 8004014:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e00f      	b.n	8004042 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4013      	ands	r3, r2
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	429a      	cmp	r2, r3
 8004030:	bf0c      	ite	eq
 8004032:	2301      	moveq	r3, #1
 8004034:	2300      	movne	r3, #0
 8004036:	b2db      	uxtb	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	79fb      	ldrb	r3, [r7, #7]
 800403c:	429a      	cmp	r2, r3
 800403e:	d0b4      	beq.n	8003faa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b098      	sub	sp, #96	@ 0x60
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	4613      	mov	r3, r2
 8004058:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	88fa      	ldrh	r2, [r7, #6]
 8004064:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2222      	movs	r2, #34	@ 0x22
 8004070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004078:	4a3e      	ldr	r2, [pc, #248]	@ (8004174 <UART_Start_Receive_DMA+0x128>)
 800407a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004080:	4a3d      	ldr	r2, [pc, #244]	@ (8004178 <UART_Start_Receive_DMA+0x12c>)
 8004082:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004088:	4a3c      	ldr	r2, [pc, #240]	@ (800417c <UART_Start_Receive_DMA+0x130>)
 800408a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004090:	2200      	movs	r2, #0
 8004092:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004094:	f107 0308 	add.w	r3, r7, #8
 8004098:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3304      	adds	r3, #4
 80040a4:	4619      	mov	r1, r3
 80040a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	f7fe fb62 	bl	8002774 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80040b0:	2300      	movs	r3, #0
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	613b      	str	r3, [r7, #16]
 80040c4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d019      	beq.n	8004102 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	330c      	adds	r3, #12
 80040d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040d8:	e853 3f00 	ldrex	r3, [r3]
 80040dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	330c      	adds	r3, #12
 80040ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040ee:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80040f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80040f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80040fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e5      	bne.n	80040ce <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3314      	adds	r3, #20
 8004108:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800410c:	e853 3f00 	ldrex	r3, [r3]
 8004110:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	657b      	str	r3, [r7, #84]	@ 0x54
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3314      	adds	r3, #20
 8004120:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004122:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004124:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004126:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004128:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800412a:	e841 2300 	strex	r3, r2, [r1]
 800412e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1e5      	bne.n	8004102 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3314      	adds	r3, #20
 800413c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	617b      	str	r3, [r7, #20]
   return(result);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800414c:	653b      	str	r3, [r7, #80]	@ 0x50
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3314      	adds	r3, #20
 8004154:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004156:	627a      	str	r2, [r7, #36]	@ 0x24
 8004158:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415a:	6a39      	ldr	r1, [r7, #32]
 800415c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800415e:	e841 2300 	strex	r3, r2, [r1]
 8004162:	61fb      	str	r3, [r7, #28]
   return(result);
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1e5      	bne.n	8004136 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3760      	adds	r7, #96	@ 0x60
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	08003d9d 	.word	0x08003d9d
 8004178:	08003ec9 	.word	0x08003ec9
 800417c:	08003f05 	.word	0x08003f05

08004180 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004180:	b480      	push	{r7}
 8004182:	b089      	sub	sp, #36	@ 0x24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	330c      	adds	r3, #12
 800418e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	e853 3f00 	ldrex	r3, [r3]
 8004196:	60bb      	str	r3, [r7, #8]
   return(result);
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800419e:	61fb      	str	r3, [r7, #28]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	330c      	adds	r3, #12
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	61ba      	str	r2, [r7, #24]
 80041aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ac:	6979      	ldr	r1, [r7, #20]
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	e841 2300 	strex	r3, r2, [r1]
 80041b4:	613b      	str	r3, [r7, #16]
   return(result);
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1e5      	bne.n	8004188 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80041c4:	bf00      	nop
 80041c6:	3724      	adds	r7, #36	@ 0x24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b095      	sub	sp, #84	@ 0x54
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	330c      	adds	r3, #12
 80041de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e2:	e853 3f00 	ldrex	r3, [r3]
 80041e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	330c      	adds	r3, #12
 80041f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80041fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004200:	e841 2300 	strex	r3, r2, [r1]
 8004204:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1e5      	bne.n	80041d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3314      	adds	r3, #20
 8004212:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	61fb      	str	r3, [r7, #28]
   return(result);
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f023 0301 	bic.w	r3, r3, #1
 8004222:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3314      	adds	r3, #20
 800422a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800422c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800422e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004232:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004234:	e841 2300 	strex	r3, r2, [r1]
 8004238:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e5      	bne.n	800420c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004244:	2b01      	cmp	r3, #1
 8004246:	d119      	bne.n	800427c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	330c      	adds	r3, #12
 800424e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	e853 3f00 	ldrex	r3, [r3]
 8004256:	60bb      	str	r3, [r7, #8]
   return(result);
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f023 0310 	bic.w	r3, r3, #16
 800425e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	330c      	adds	r3, #12
 8004266:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004268:	61ba      	str	r2, [r7, #24]
 800426a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426c:	6979      	ldr	r1, [r7, #20]
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	e841 2300 	strex	r3, r2, [r1]
 8004274:	613b      	str	r3, [r7, #16]
   return(result);
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1e5      	bne.n	8004248 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800428a:	bf00      	nop
 800428c:	3754      	adds	r7, #84	@ 0x54
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
	...

08004298 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800429c:	b0c0      	sub	sp, #256	@ 0x100
 800429e:	af00      	add	r7, sp, #0
 80042a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b4:	68d9      	ldr	r1, [r3, #12]
 80042b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	ea40 0301 	orr.w	r3, r0, r1
 80042c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	431a      	orrs	r2, r3
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	431a      	orrs	r2, r3
 80042d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80042f0:	f021 010c 	bic.w	r1, r1, #12
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80042fe:	430b      	orrs	r3, r1
 8004300:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800430e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004312:	6999      	ldr	r1, [r3, #24]
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	ea40 0301 	orr.w	r3, r0, r1
 800431e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	4b8f      	ldr	r3, [pc, #572]	@ (8004564 <UART_SetConfig+0x2cc>)
 8004328:	429a      	cmp	r2, r3
 800432a:	d005      	beq.n	8004338 <UART_SetConfig+0xa0>
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b8d      	ldr	r3, [pc, #564]	@ (8004568 <UART_SetConfig+0x2d0>)
 8004334:	429a      	cmp	r2, r3
 8004336:	d104      	bne.n	8004342 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004338:	f7fe ffaa 	bl	8003290 <HAL_RCC_GetPCLK2Freq>
 800433c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004340:	e003      	b.n	800434a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004342:	f7fe ff91 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8004346:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800434a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004354:	f040 810c 	bne.w	8004570 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800435c:	2200      	movs	r2, #0
 800435e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004362:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004366:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800436a:	4622      	mov	r2, r4
 800436c:	462b      	mov	r3, r5
 800436e:	1891      	adds	r1, r2, r2
 8004370:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004372:	415b      	adcs	r3, r3
 8004374:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004376:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800437a:	4621      	mov	r1, r4
 800437c:	eb12 0801 	adds.w	r8, r2, r1
 8004380:	4629      	mov	r1, r5
 8004382:	eb43 0901 	adc.w	r9, r3, r1
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004392:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004396:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800439a:	4690      	mov	r8, r2
 800439c:	4699      	mov	r9, r3
 800439e:	4623      	mov	r3, r4
 80043a0:	eb18 0303 	adds.w	r3, r8, r3
 80043a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043a8:	462b      	mov	r3, r5
 80043aa:	eb49 0303 	adc.w	r3, r9, r3
 80043ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043c6:	460b      	mov	r3, r1
 80043c8:	18db      	adds	r3, r3, r3
 80043ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80043cc:	4613      	mov	r3, r2
 80043ce:	eb42 0303 	adc.w	r3, r2, r3
 80043d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80043d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80043dc:	f7fc fbc8 	bl	8000b70 <__aeabi_uldivmod>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4b61      	ldr	r3, [pc, #388]	@ (800456c <UART_SetConfig+0x2d4>)
 80043e6:	fba3 2302 	umull	r2, r3, r3, r2
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	011c      	lsls	r4, r3, #4
 80043ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043f2:	2200      	movs	r2, #0
 80043f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80043fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004400:	4642      	mov	r2, r8
 8004402:	464b      	mov	r3, r9
 8004404:	1891      	adds	r1, r2, r2
 8004406:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004408:	415b      	adcs	r3, r3
 800440a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800440c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004410:	4641      	mov	r1, r8
 8004412:	eb12 0a01 	adds.w	sl, r2, r1
 8004416:	4649      	mov	r1, r9
 8004418:	eb43 0b01 	adc.w	fp, r3, r1
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004428:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800442c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004430:	4692      	mov	sl, r2
 8004432:	469b      	mov	fp, r3
 8004434:	4643      	mov	r3, r8
 8004436:	eb1a 0303 	adds.w	r3, sl, r3
 800443a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800443e:	464b      	mov	r3, r9
 8004440:	eb4b 0303 	adc.w	r3, fp, r3
 8004444:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004454:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004458:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800445c:	460b      	mov	r3, r1
 800445e:	18db      	adds	r3, r3, r3
 8004460:	643b      	str	r3, [r7, #64]	@ 0x40
 8004462:	4613      	mov	r3, r2
 8004464:	eb42 0303 	adc.w	r3, r2, r3
 8004468:	647b      	str	r3, [r7, #68]	@ 0x44
 800446a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800446e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004472:	f7fc fb7d 	bl	8000b70 <__aeabi_uldivmod>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4611      	mov	r1, r2
 800447c:	4b3b      	ldr	r3, [pc, #236]	@ (800456c <UART_SetConfig+0x2d4>)
 800447e:	fba3 2301 	umull	r2, r3, r3, r1
 8004482:	095b      	lsrs	r3, r3, #5
 8004484:	2264      	movs	r2, #100	@ 0x64
 8004486:	fb02 f303 	mul.w	r3, r2, r3
 800448a:	1acb      	subs	r3, r1, r3
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004492:	4b36      	ldr	r3, [pc, #216]	@ (800456c <UART_SetConfig+0x2d4>)
 8004494:	fba3 2302 	umull	r2, r3, r3, r2
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044a0:	441c      	add	r4, r3
 80044a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044b4:	4642      	mov	r2, r8
 80044b6:	464b      	mov	r3, r9
 80044b8:	1891      	adds	r1, r2, r2
 80044ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044bc:	415b      	adcs	r3, r3
 80044be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044c4:	4641      	mov	r1, r8
 80044c6:	1851      	adds	r1, r2, r1
 80044c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80044ca:	4649      	mov	r1, r9
 80044cc:	414b      	adcs	r3, r1
 80044ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80044dc:	4659      	mov	r1, fp
 80044de:	00cb      	lsls	r3, r1, #3
 80044e0:	4651      	mov	r1, sl
 80044e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044e6:	4651      	mov	r1, sl
 80044e8:	00ca      	lsls	r2, r1, #3
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	4603      	mov	r3, r0
 80044f0:	4642      	mov	r2, r8
 80044f2:	189b      	adds	r3, r3, r2
 80044f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044f8:	464b      	mov	r3, r9
 80044fa:	460a      	mov	r2, r1
 80044fc:	eb42 0303 	adc.w	r3, r2, r3
 8004500:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004510:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004514:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004518:	460b      	mov	r3, r1
 800451a:	18db      	adds	r3, r3, r3
 800451c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800451e:	4613      	mov	r3, r2
 8004520:	eb42 0303 	adc.w	r3, r2, r3
 8004524:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004526:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800452a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800452e:	f7fc fb1f 	bl	8000b70 <__aeabi_uldivmod>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4b0d      	ldr	r3, [pc, #52]	@ (800456c <UART_SetConfig+0x2d4>)
 8004538:	fba3 1302 	umull	r1, r3, r3, r2
 800453c:	095b      	lsrs	r3, r3, #5
 800453e:	2164      	movs	r1, #100	@ 0x64
 8004540:	fb01 f303 	mul.w	r3, r1, r3
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	3332      	adds	r3, #50	@ 0x32
 800454a:	4a08      	ldr	r2, [pc, #32]	@ (800456c <UART_SetConfig+0x2d4>)
 800454c:	fba2 2303 	umull	r2, r3, r2, r3
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	f003 0207 	and.w	r2, r3, #7
 8004556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4422      	add	r2, r4
 800455e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004560:	e106      	b.n	8004770 <UART_SetConfig+0x4d8>
 8004562:	bf00      	nop
 8004564:	40011000 	.word	0x40011000
 8004568:	40011400 	.word	0x40011400
 800456c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004574:	2200      	movs	r2, #0
 8004576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800457a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800457e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004582:	4642      	mov	r2, r8
 8004584:	464b      	mov	r3, r9
 8004586:	1891      	adds	r1, r2, r2
 8004588:	6239      	str	r1, [r7, #32]
 800458a:	415b      	adcs	r3, r3
 800458c:	627b      	str	r3, [r7, #36]	@ 0x24
 800458e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004592:	4641      	mov	r1, r8
 8004594:	1854      	adds	r4, r2, r1
 8004596:	4649      	mov	r1, r9
 8004598:	eb43 0501 	adc.w	r5, r3, r1
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	00eb      	lsls	r3, r5, #3
 80045a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045aa:	00e2      	lsls	r2, r4, #3
 80045ac:	4614      	mov	r4, r2
 80045ae:	461d      	mov	r5, r3
 80045b0:	4643      	mov	r3, r8
 80045b2:	18e3      	adds	r3, r4, r3
 80045b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045b8:	464b      	mov	r3, r9
 80045ba:	eb45 0303 	adc.w	r3, r5, r3
 80045be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045de:	4629      	mov	r1, r5
 80045e0:	008b      	lsls	r3, r1, #2
 80045e2:	4621      	mov	r1, r4
 80045e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045e8:	4621      	mov	r1, r4
 80045ea:	008a      	lsls	r2, r1, #2
 80045ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80045f0:	f7fc fabe 	bl	8000b70 <__aeabi_uldivmod>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4b60      	ldr	r3, [pc, #384]	@ (800477c <UART_SetConfig+0x4e4>)
 80045fa:	fba3 2302 	umull	r2, r3, r3, r2
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	011c      	lsls	r4, r3, #4
 8004602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004606:	2200      	movs	r2, #0
 8004608:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800460c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004610:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004614:	4642      	mov	r2, r8
 8004616:	464b      	mov	r3, r9
 8004618:	1891      	adds	r1, r2, r2
 800461a:	61b9      	str	r1, [r7, #24]
 800461c:	415b      	adcs	r3, r3
 800461e:	61fb      	str	r3, [r7, #28]
 8004620:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004624:	4641      	mov	r1, r8
 8004626:	1851      	adds	r1, r2, r1
 8004628:	6139      	str	r1, [r7, #16]
 800462a:	4649      	mov	r1, r9
 800462c:	414b      	adcs	r3, r1
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	f04f 0300 	mov.w	r3, #0
 8004638:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800463c:	4659      	mov	r1, fp
 800463e:	00cb      	lsls	r3, r1, #3
 8004640:	4651      	mov	r1, sl
 8004642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004646:	4651      	mov	r1, sl
 8004648:	00ca      	lsls	r2, r1, #3
 800464a:	4610      	mov	r0, r2
 800464c:	4619      	mov	r1, r3
 800464e:	4603      	mov	r3, r0
 8004650:	4642      	mov	r2, r8
 8004652:	189b      	adds	r3, r3, r2
 8004654:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004658:	464b      	mov	r3, r9
 800465a:	460a      	mov	r2, r1
 800465c:	eb42 0303 	adc.w	r3, r2, r3
 8004660:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800466e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800467c:	4649      	mov	r1, r9
 800467e:	008b      	lsls	r3, r1, #2
 8004680:	4641      	mov	r1, r8
 8004682:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004686:	4641      	mov	r1, r8
 8004688:	008a      	lsls	r2, r1, #2
 800468a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800468e:	f7fc fa6f 	bl	8000b70 <__aeabi_uldivmod>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4611      	mov	r1, r2
 8004698:	4b38      	ldr	r3, [pc, #224]	@ (800477c <UART_SetConfig+0x4e4>)
 800469a:	fba3 2301 	umull	r2, r3, r3, r1
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	2264      	movs	r2, #100	@ 0x64
 80046a2:	fb02 f303 	mul.w	r3, r2, r3
 80046a6:	1acb      	subs	r3, r1, r3
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	3332      	adds	r3, #50	@ 0x32
 80046ac:	4a33      	ldr	r2, [pc, #204]	@ (800477c <UART_SetConfig+0x4e4>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046b8:	441c      	add	r4, r3
 80046ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046be:	2200      	movs	r2, #0
 80046c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80046c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80046c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046c8:	4642      	mov	r2, r8
 80046ca:	464b      	mov	r3, r9
 80046cc:	1891      	adds	r1, r2, r2
 80046ce:	60b9      	str	r1, [r7, #8]
 80046d0:	415b      	adcs	r3, r3
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046d8:	4641      	mov	r1, r8
 80046da:	1851      	adds	r1, r2, r1
 80046dc:	6039      	str	r1, [r7, #0]
 80046de:	4649      	mov	r1, r9
 80046e0:	414b      	adcs	r3, r1
 80046e2:	607b      	str	r3, [r7, #4]
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046f0:	4659      	mov	r1, fp
 80046f2:	00cb      	lsls	r3, r1, #3
 80046f4:	4651      	mov	r1, sl
 80046f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046fa:	4651      	mov	r1, sl
 80046fc:	00ca      	lsls	r2, r1, #3
 80046fe:	4610      	mov	r0, r2
 8004700:	4619      	mov	r1, r3
 8004702:	4603      	mov	r3, r0
 8004704:	4642      	mov	r2, r8
 8004706:	189b      	adds	r3, r3, r2
 8004708:	66bb      	str	r3, [r7, #104]	@ 0x68
 800470a:	464b      	mov	r3, r9
 800470c:	460a      	mov	r2, r1
 800470e:	eb42 0303 	adc.w	r3, r2, r3
 8004712:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	663b      	str	r3, [r7, #96]	@ 0x60
 800471e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800472c:	4649      	mov	r1, r9
 800472e:	008b      	lsls	r3, r1, #2
 8004730:	4641      	mov	r1, r8
 8004732:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004736:	4641      	mov	r1, r8
 8004738:	008a      	lsls	r2, r1, #2
 800473a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800473e:	f7fc fa17 	bl	8000b70 <__aeabi_uldivmod>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4b0d      	ldr	r3, [pc, #52]	@ (800477c <UART_SetConfig+0x4e4>)
 8004748:	fba3 1302 	umull	r1, r3, r3, r2
 800474c:	095b      	lsrs	r3, r3, #5
 800474e:	2164      	movs	r1, #100	@ 0x64
 8004750:	fb01 f303 	mul.w	r3, r1, r3
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	3332      	adds	r3, #50	@ 0x32
 800475a:	4a08      	ldr	r2, [pc, #32]	@ (800477c <UART_SetConfig+0x4e4>)
 800475c:	fba2 2303 	umull	r2, r3, r2, r3
 8004760:	095b      	lsrs	r3, r3, #5
 8004762:	f003 020f 	and.w	r2, r3, #15
 8004766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4422      	add	r2, r4
 800476e:	609a      	str	r2, [r3, #8]
}
 8004770:	bf00      	nop
 8004772:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004776:	46bd      	mov	sp, r7
 8004778:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800477c:	51eb851f 	.word	0x51eb851f

08004780 <atan2>:
 8004780:	f000 b802 	b.w	8004788 <__ieee754_atan2>
 8004784:	0000      	movs	r0, r0
	...

08004788 <__ieee754_atan2>:
 8004788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800478c:	ec57 6b11 	vmov	r6, r7, d1
 8004790:	4273      	negs	r3, r6
 8004792:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8004910 <__ieee754_atan2+0x188>
 8004796:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800479a:	4333      	orrs	r3, r6
 800479c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80047a0:	4543      	cmp	r3, r8
 80047a2:	ec51 0b10 	vmov	r0, r1, d0
 80047a6:	4635      	mov	r5, r6
 80047a8:	d809      	bhi.n	80047be <__ieee754_atan2+0x36>
 80047aa:	4244      	negs	r4, r0
 80047ac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80047b0:	4304      	orrs	r4, r0
 80047b2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80047b6:	4544      	cmp	r4, r8
 80047b8:	468e      	mov	lr, r1
 80047ba:	4681      	mov	r9, r0
 80047bc:	d907      	bls.n	80047ce <__ieee754_atan2+0x46>
 80047be:	4632      	mov	r2, r6
 80047c0:	463b      	mov	r3, r7
 80047c2:	f7fb fd27 	bl	8000214 <__adddf3>
 80047c6:	ec41 0b10 	vmov	d0, r0, r1
 80047ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ce:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80047d2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80047d6:	4334      	orrs	r4, r6
 80047d8:	d103      	bne.n	80047e2 <__ieee754_atan2+0x5a>
 80047da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047de:	f000 b8c7 	b.w	8004970 <atan>
 80047e2:	17bc      	asrs	r4, r7, #30
 80047e4:	f004 0402 	and.w	r4, r4, #2
 80047e8:	ea53 0909 	orrs.w	r9, r3, r9
 80047ec:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80047f0:	d107      	bne.n	8004802 <__ieee754_atan2+0x7a>
 80047f2:	2c02      	cmp	r4, #2
 80047f4:	d05f      	beq.n	80048b6 <__ieee754_atan2+0x12e>
 80047f6:	2c03      	cmp	r4, #3
 80047f8:	d1e5      	bne.n	80047c6 <__ieee754_atan2+0x3e>
 80047fa:	a141      	add	r1, pc, #260	@ (adr r1, 8004900 <__ieee754_atan2+0x178>)
 80047fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004800:	e7e1      	b.n	80047c6 <__ieee754_atan2+0x3e>
 8004802:	4315      	orrs	r5, r2
 8004804:	d106      	bne.n	8004814 <__ieee754_atan2+0x8c>
 8004806:	f1be 0f00 	cmp.w	lr, #0
 800480a:	da5f      	bge.n	80048cc <__ieee754_atan2+0x144>
 800480c:	a13e      	add	r1, pc, #248	@ (adr r1, 8004908 <__ieee754_atan2+0x180>)
 800480e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004812:	e7d8      	b.n	80047c6 <__ieee754_atan2+0x3e>
 8004814:	4542      	cmp	r2, r8
 8004816:	d10f      	bne.n	8004838 <__ieee754_atan2+0xb0>
 8004818:	4293      	cmp	r3, r2
 800481a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800481e:	d107      	bne.n	8004830 <__ieee754_atan2+0xa8>
 8004820:	2c02      	cmp	r4, #2
 8004822:	d84c      	bhi.n	80048be <__ieee754_atan2+0x136>
 8004824:	4b34      	ldr	r3, [pc, #208]	@ (80048f8 <__ieee754_atan2+0x170>)
 8004826:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800482a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800482e:	e7ca      	b.n	80047c6 <__ieee754_atan2+0x3e>
 8004830:	2c02      	cmp	r4, #2
 8004832:	d848      	bhi.n	80048c6 <__ieee754_atan2+0x13e>
 8004834:	4b31      	ldr	r3, [pc, #196]	@ (80048fc <__ieee754_atan2+0x174>)
 8004836:	e7f6      	b.n	8004826 <__ieee754_atan2+0x9e>
 8004838:	4543      	cmp	r3, r8
 800483a:	d0e4      	beq.n	8004806 <__ieee754_atan2+0x7e>
 800483c:	1a9b      	subs	r3, r3, r2
 800483e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8004842:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004846:	da1e      	bge.n	8004886 <__ieee754_atan2+0xfe>
 8004848:	2f00      	cmp	r7, #0
 800484a:	da01      	bge.n	8004850 <__ieee754_atan2+0xc8>
 800484c:	323c      	adds	r2, #60	@ 0x3c
 800484e:	db1e      	blt.n	800488e <__ieee754_atan2+0x106>
 8004850:	4632      	mov	r2, r6
 8004852:	463b      	mov	r3, r7
 8004854:	f7fb ffbe 	bl	80007d4 <__aeabi_ddiv>
 8004858:	ec41 0b10 	vmov	d0, r0, r1
 800485c:	f000 fa20 	bl	8004ca0 <fabs>
 8004860:	f000 f886 	bl	8004970 <atan>
 8004864:	ec51 0b10 	vmov	r0, r1, d0
 8004868:	2c01      	cmp	r4, #1
 800486a:	d013      	beq.n	8004894 <__ieee754_atan2+0x10c>
 800486c:	2c02      	cmp	r4, #2
 800486e:	d015      	beq.n	800489c <__ieee754_atan2+0x114>
 8004870:	2c00      	cmp	r4, #0
 8004872:	d0a8      	beq.n	80047c6 <__ieee754_atan2+0x3e>
 8004874:	a318      	add	r3, pc, #96	@ (adr r3, 80048d8 <__ieee754_atan2+0x150>)
 8004876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487a:	f7fb fcc9 	bl	8000210 <__aeabi_dsub>
 800487e:	a318      	add	r3, pc, #96	@ (adr r3, 80048e0 <__ieee754_atan2+0x158>)
 8004880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004884:	e014      	b.n	80048b0 <__ieee754_atan2+0x128>
 8004886:	a118      	add	r1, pc, #96	@ (adr r1, 80048e8 <__ieee754_atan2+0x160>)
 8004888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800488c:	e7ec      	b.n	8004868 <__ieee754_atan2+0xe0>
 800488e:	2000      	movs	r0, #0
 8004890:	2100      	movs	r1, #0
 8004892:	e7e9      	b.n	8004868 <__ieee754_atan2+0xe0>
 8004894:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004898:	4619      	mov	r1, r3
 800489a:	e794      	b.n	80047c6 <__ieee754_atan2+0x3e>
 800489c:	a30e      	add	r3, pc, #56	@ (adr r3, 80048d8 <__ieee754_atan2+0x150>)
 800489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a2:	f7fb fcb5 	bl	8000210 <__aeabi_dsub>
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	a10d      	add	r1, pc, #52	@ (adr r1, 80048e0 <__ieee754_atan2+0x158>)
 80048ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048b0:	f7fb fcae 	bl	8000210 <__aeabi_dsub>
 80048b4:	e787      	b.n	80047c6 <__ieee754_atan2+0x3e>
 80048b6:	a10a      	add	r1, pc, #40	@ (adr r1, 80048e0 <__ieee754_atan2+0x158>)
 80048b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048bc:	e783      	b.n	80047c6 <__ieee754_atan2+0x3e>
 80048be:	a10c      	add	r1, pc, #48	@ (adr r1, 80048f0 <__ieee754_atan2+0x168>)
 80048c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048c4:	e77f      	b.n	80047c6 <__ieee754_atan2+0x3e>
 80048c6:	2000      	movs	r0, #0
 80048c8:	2100      	movs	r1, #0
 80048ca:	e77c      	b.n	80047c6 <__ieee754_atan2+0x3e>
 80048cc:	a106      	add	r1, pc, #24	@ (adr r1, 80048e8 <__ieee754_atan2+0x160>)
 80048ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048d2:	e778      	b.n	80047c6 <__ieee754_atan2+0x3e>
 80048d4:	f3af 8000 	nop.w
 80048d8:	33145c07 	.word	0x33145c07
 80048dc:	3ca1a626 	.word	0x3ca1a626
 80048e0:	54442d18 	.word	0x54442d18
 80048e4:	400921fb 	.word	0x400921fb
 80048e8:	54442d18 	.word	0x54442d18
 80048ec:	3ff921fb 	.word	0x3ff921fb
 80048f0:	54442d18 	.word	0x54442d18
 80048f4:	3fe921fb 	.word	0x3fe921fb
 80048f8:	08004f20 	.word	0x08004f20
 80048fc:	08004f08 	.word	0x08004f08
 8004900:	54442d18 	.word	0x54442d18
 8004904:	c00921fb 	.word	0xc00921fb
 8004908:	54442d18 	.word	0x54442d18
 800490c:	bff921fb 	.word	0xbff921fb
 8004910:	7ff00000 	.word	0x7ff00000

08004914 <sqrt>:
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	ed2d 8b02 	vpush	{d8}
 800491a:	ec55 4b10 	vmov	r4, r5, d0
 800491e:	f000 f9c7 	bl	8004cb0 <__ieee754_sqrt>
 8004922:	4622      	mov	r2, r4
 8004924:	462b      	mov	r3, r5
 8004926:	4620      	mov	r0, r4
 8004928:	4629      	mov	r1, r5
 800492a:	eeb0 8a40 	vmov.f32	s16, s0
 800492e:	eef0 8a60 	vmov.f32	s17, s1
 8004932:	f7fc f8bf 	bl	8000ab4 <__aeabi_dcmpun>
 8004936:	b990      	cbnz	r0, 800495e <sqrt+0x4a>
 8004938:	2200      	movs	r2, #0
 800493a:	2300      	movs	r3, #0
 800493c:	4620      	mov	r0, r4
 800493e:	4629      	mov	r1, r5
 8004940:	f7fc f890 	bl	8000a64 <__aeabi_dcmplt>
 8004944:	b158      	cbz	r0, 800495e <sqrt+0x4a>
 8004946:	f000 fa95 	bl	8004e74 <__errno>
 800494a:	2321      	movs	r3, #33	@ 0x21
 800494c:	6003      	str	r3, [r0, #0]
 800494e:	2200      	movs	r2, #0
 8004950:	2300      	movs	r3, #0
 8004952:	4610      	mov	r0, r2
 8004954:	4619      	mov	r1, r3
 8004956:	f7fb ff3d 	bl	80007d4 <__aeabi_ddiv>
 800495a:	ec41 0b18 	vmov	d8, r0, r1
 800495e:	eeb0 0a48 	vmov.f32	s0, s16
 8004962:	eef0 0a68 	vmov.f32	s1, s17
 8004966:	ecbd 8b02 	vpop	{d8}
 800496a:	bd38      	pop	{r3, r4, r5, pc}
 800496c:	0000      	movs	r0, r0
	...

08004970 <atan>:
 8004970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004974:	ec55 4b10 	vmov	r4, r5, d0
 8004978:	4bbf      	ldr	r3, [pc, #764]	@ (8004c78 <atan+0x308>)
 800497a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800497e:	429e      	cmp	r6, r3
 8004980:	46ab      	mov	fp, r5
 8004982:	d918      	bls.n	80049b6 <atan+0x46>
 8004984:	4bbd      	ldr	r3, [pc, #756]	@ (8004c7c <atan+0x30c>)
 8004986:	429e      	cmp	r6, r3
 8004988:	d801      	bhi.n	800498e <atan+0x1e>
 800498a:	d109      	bne.n	80049a0 <atan+0x30>
 800498c:	b144      	cbz	r4, 80049a0 <atan+0x30>
 800498e:	4622      	mov	r2, r4
 8004990:	462b      	mov	r3, r5
 8004992:	4620      	mov	r0, r4
 8004994:	4629      	mov	r1, r5
 8004996:	f7fb fc3d 	bl	8000214 <__adddf3>
 800499a:	4604      	mov	r4, r0
 800499c:	460d      	mov	r5, r1
 800499e:	e006      	b.n	80049ae <atan+0x3e>
 80049a0:	f1bb 0f00 	cmp.w	fp, #0
 80049a4:	f340 812b 	ble.w	8004bfe <atan+0x28e>
 80049a8:	a597      	add	r5, pc, #604	@ (adr r5, 8004c08 <atan+0x298>)
 80049aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80049ae:	ec45 4b10 	vmov	d0, r4, r5
 80049b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b6:	4bb2      	ldr	r3, [pc, #712]	@ (8004c80 <atan+0x310>)
 80049b8:	429e      	cmp	r6, r3
 80049ba:	d813      	bhi.n	80049e4 <atan+0x74>
 80049bc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80049c0:	429e      	cmp	r6, r3
 80049c2:	d80c      	bhi.n	80049de <atan+0x6e>
 80049c4:	a392      	add	r3, pc, #584	@ (adr r3, 8004c10 <atan+0x2a0>)
 80049c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ca:	4620      	mov	r0, r4
 80049cc:	4629      	mov	r1, r5
 80049ce:	f7fb fc21 	bl	8000214 <__adddf3>
 80049d2:	4bac      	ldr	r3, [pc, #688]	@ (8004c84 <atan+0x314>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	f7fc f863 	bl	8000aa0 <__aeabi_dcmpgt>
 80049da:	2800      	cmp	r0, #0
 80049dc:	d1e7      	bne.n	80049ae <atan+0x3e>
 80049de:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80049e2:	e029      	b.n	8004a38 <atan+0xc8>
 80049e4:	f000 f95c 	bl	8004ca0 <fabs>
 80049e8:	4ba7      	ldr	r3, [pc, #668]	@ (8004c88 <atan+0x318>)
 80049ea:	429e      	cmp	r6, r3
 80049ec:	ec55 4b10 	vmov	r4, r5, d0
 80049f0:	f200 80bc 	bhi.w	8004b6c <atan+0x1fc>
 80049f4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80049f8:	429e      	cmp	r6, r3
 80049fa:	f200 809e 	bhi.w	8004b3a <atan+0x1ca>
 80049fe:	4622      	mov	r2, r4
 8004a00:	462b      	mov	r3, r5
 8004a02:	4620      	mov	r0, r4
 8004a04:	4629      	mov	r1, r5
 8004a06:	f7fb fc05 	bl	8000214 <__adddf3>
 8004a0a:	4b9e      	ldr	r3, [pc, #632]	@ (8004c84 <atan+0x314>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f7fb fbff 	bl	8000210 <__aeabi_dsub>
 8004a12:	2200      	movs	r2, #0
 8004a14:	4606      	mov	r6, r0
 8004a16:	460f      	mov	r7, r1
 8004a18:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	4629      	mov	r1, r5
 8004a20:	f7fb fbf8 	bl	8000214 <__adddf3>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4630      	mov	r0, r6
 8004a2a:	4639      	mov	r1, r7
 8004a2c:	f7fb fed2 	bl	80007d4 <__aeabi_ddiv>
 8004a30:	f04f 0a00 	mov.w	sl, #0
 8004a34:	4604      	mov	r4, r0
 8004a36:	460d      	mov	r5, r1
 8004a38:	4622      	mov	r2, r4
 8004a3a:	462b      	mov	r3, r5
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	4629      	mov	r1, r5
 8004a40:	f7fb fd9e 	bl	8000580 <__aeabi_dmul>
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	4680      	mov	r8, r0
 8004a4a:	4689      	mov	r9, r1
 8004a4c:	f7fb fd98 	bl	8000580 <__aeabi_dmul>
 8004a50:	a371      	add	r3, pc, #452	@ (adr r3, 8004c18 <atan+0x2a8>)
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	4606      	mov	r6, r0
 8004a58:	460f      	mov	r7, r1
 8004a5a:	f7fb fd91 	bl	8000580 <__aeabi_dmul>
 8004a5e:	a370      	add	r3, pc, #448	@ (adr r3, 8004c20 <atan+0x2b0>)
 8004a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a64:	f7fb fbd6 	bl	8000214 <__adddf3>
 8004a68:	4632      	mov	r2, r6
 8004a6a:	463b      	mov	r3, r7
 8004a6c:	f7fb fd88 	bl	8000580 <__aeabi_dmul>
 8004a70:	a36d      	add	r3, pc, #436	@ (adr r3, 8004c28 <atan+0x2b8>)
 8004a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a76:	f7fb fbcd 	bl	8000214 <__adddf3>
 8004a7a:	4632      	mov	r2, r6
 8004a7c:	463b      	mov	r3, r7
 8004a7e:	f7fb fd7f 	bl	8000580 <__aeabi_dmul>
 8004a82:	a36b      	add	r3, pc, #428	@ (adr r3, 8004c30 <atan+0x2c0>)
 8004a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a88:	f7fb fbc4 	bl	8000214 <__adddf3>
 8004a8c:	4632      	mov	r2, r6
 8004a8e:	463b      	mov	r3, r7
 8004a90:	f7fb fd76 	bl	8000580 <__aeabi_dmul>
 8004a94:	a368      	add	r3, pc, #416	@ (adr r3, 8004c38 <atan+0x2c8>)
 8004a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9a:	f7fb fbbb 	bl	8000214 <__adddf3>
 8004a9e:	4632      	mov	r2, r6
 8004aa0:	463b      	mov	r3, r7
 8004aa2:	f7fb fd6d 	bl	8000580 <__aeabi_dmul>
 8004aa6:	a366      	add	r3, pc, #408	@ (adr r3, 8004c40 <atan+0x2d0>)
 8004aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aac:	f7fb fbb2 	bl	8000214 <__adddf3>
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	f7fb fd64 	bl	8000580 <__aeabi_dmul>
 8004ab8:	a363      	add	r3, pc, #396	@ (adr r3, 8004c48 <atan+0x2d8>)
 8004aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abe:	4680      	mov	r8, r0
 8004ac0:	4689      	mov	r9, r1
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	4639      	mov	r1, r7
 8004ac6:	f7fb fd5b 	bl	8000580 <__aeabi_dmul>
 8004aca:	a361      	add	r3, pc, #388	@ (adr r3, 8004c50 <atan+0x2e0>)
 8004acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad0:	f7fb fb9e 	bl	8000210 <__aeabi_dsub>
 8004ad4:	4632      	mov	r2, r6
 8004ad6:	463b      	mov	r3, r7
 8004ad8:	f7fb fd52 	bl	8000580 <__aeabi_dmul>
 8004adc:	a35e      	add	r3, pc, #376	@ (adr r3, 8004c58 <atan+0x2e8>)
 8004ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae2:	f7fb fb95 	bl	8000210 <__aeabi_dsub>
 8004ae6:	4632      	mov	r2, r6
 8004ae8:	463b      	mov	r3, r7
 8004aea:	f7fb fd49 	bl	8000580 <__aeabi_dmul>
 8004aee:	a35c      	add	r3, pc, #368	@ (adr r3, 8004c60 <atan+0x2f0>)
 8004af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af4:	f7fb fb8c 	bl	8000210 <__aeabi_dsub>
 8004af8:	4632      	mov	r2, r6
 8004afa:	463b      	mov	r3, r7
 8004afc:	f7fb fd40 	bl	8000580 <__aeabi_dmul>
 8004b00:	a359      	add	r3, pc, #356	@ (adr r3, 8004c68 <atan+0x2f8>)
 8004b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b06:	f7fb fb83 	bl	8000210 <__aeabi_dsub>
 8004b0a:	4632      	mov	r2, r6
 8004b0c:	463b      	mov	r3, r7
 8004b0e:	f7fb fd37 	bl	8000580 <__aeabi_dmul>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	4640      	mov	r0, r8
 8004b18:	4649      	mov	r1, r9
 8004b1a:	f7fb fb7b 	bl	8000214 <__adddf3>
 8004b1e:	4622      	mov	r2, r4
 8004b20:	462b      	mov	r3, r5
 8004b22:	f7fb fd2d 	bl	8000580 <__aeabi_dmul>
 8004b26:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	d148      	bne.n	8004bc2 <atan+0x252>
 8004b30:	4620      	mov	r0, r4
 8004b32:	4629      	mov	r1, r5
 8004b34:	f7fb fb6c 	bl	8000210 <__aeabi_dsub>
 8004b38:	e72f      	b.n	800499a <atan+0x2a>
 8004b3a:	4b52      	ldr	r3, [pc, #328]	@ (8004c84 <atan+0x314>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	4620      	mov	r0, r4
 8004b40:	4629      	mov	r1, r5
 8004b42:	f7fb fb65 	bl	8000210 <__aeabi_dsub>
 8004b46:	4b4f      	ldr	r3, [pc, #316]	@ (8004c84 <atan+0x314>)
 8004b48:	4606      	mov	r6, r0
 8004b4a:	460f      	mov	r7, r1
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	4620      	mov	r0, r4
 8004b50:	4629      	mov	r1, r5
 8004b52:	f7fb fb5f 	bl	8000214 <__adddf3>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	4639      	mov	r1, r7
 8004b5e:	f7fb fe39 	bl	80007d4 <__aeabi_ddiv>
 8004b62:	f04f 0a01 	mov.w	sl, #1
 8004b66:	4604      	mov	r4, r0
 8004b68:	460d      	mov	r5, r1
 8004b6a:	e765      	b.n	8004a38 <atan+0xc8>
 8004b6c:	4b47      	ldr	r3, [pc, #284]	@ (8004c8c <atan+0x31c>)
 8004b6e:	429e      	cmp	r6, r3
 8004b70:	d21c      	bcs.n	8004bac <atan+0x23c>
 8004b72:	4b47      	ldr	r3, [pc, #284]	@ (8004c90 <atan+0x320>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	4620      	mov	r0, r4
 8004b78:	4629      	mov	r1, r5
 8004b7a:	f7fb fb49 	bl	8000210 <__aeabi_dsub>
 8004b7e:	4b44      	ldr	r3, [pc, #272]	@ (8004c90 <atan+0x320>)
 8004b80:	4606      	mov	r6, r0
 8004b82:	460f      	mov	r7, r1
 8004b84:	2200      	movs	r2, #0
 8004b86:	4620      	mov	r0, r4
 8004b88:	4629      	mov	r1, r5
 8004b8a:	f7fb fcf9 	bl	8000580 <__aeabi_dmul>
 8004b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c84 <atan+0x314>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	f7fb fb3f 	bl	8000214 <__adddf3>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	4630      	mov	r0, r6
 8004b9c:	4639      	mov	r1, r7
 8004b9e:	f7fb fe19 	bl	80007d4 <__aeabi_ddiv>
 8004ba2:	f04f 0a02 	mov.w	sl, #2
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	460d      	mov	r5, r1
 8004baa:	e745      	b.n	8004a38 <atan+0xc8>
 8004bac:	4622      	mov	r2, r4
 8004bae:	462b      	mov	r3, r5
 8004bb0:	4938      	ldr	r1, [pc, #224]	@ (8004c94 <atan+0x324>)
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	f7fb fe0e 	bl	80007d4 <__aeabi_ddiv>
 8004bb8:	f04f 0a03 	mov.w	sl, #3
 8004bbc:	4604      	mov	r4, r0
 8004bbe:	460d      	mov	r5, r1
 8004bc0:	e73a      	b.n	8004a38 <atan+0xc8>
 8004bc2:	4b35      	ldr	r3, [pc, #212]	@ (8004c98 <atan+0x328>)
 8004bc4:	4e35      	ldr	r6, [pc, #212]	@ (8004c9c <atan+0x32c>)
 8004bc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bce:	f7fb fb1f 	bl	8000210 <__aeabi_dsub>
 8004bd2:	4622      	mov	r2, r4
 8004bd4:	462b      	mov	r3, r5
 8004bd6:	f7fb fb1b 	bl	8000210 <__aeabi_dsub>
 8004bda:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8004bde:	4602      	mov	r2, r0
 8004be0:	460b      	mov	r3, r1
 8004be2:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004be6:	f7fb fb13 	bl	8000210 <__aeabi_dsub>
 8004bea:	f1bb 0f00 	cmp.w	fp, #0
 8004bee:	4604      	mov	r4, r0
 8004bf0:	460d      	mov	r5, r1
 8004bf2:	f6bf aedc 	bge.w	80049ae <atan+0x3e>
 8004bf6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004bfa:	461d      	mov	r5, r3
 8004bfc:	e6d7      	b.n	80049ae <atan+0x3e>
 8004bfe:	a51c      	add	r5, pc, #112	@ (adr r5, 8004c70 <atan+0x300>)
 8004c00:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004c04:	e6d3      	b.n	80049ae <atan+0x3e>
 8004c06:	bf00      	nop
 8004c08:	54442d18 	.word	0x54442d18
 8004c0c:	3ff921fb 	.word	0x3ff921fb
 8004c10:	8800759c 	.word	0x8800759c
 8004c14:	7e37e43c 	.word	0x7e37e43c
 8004c18:	e322da11 	.word	0xe322da11
 8004c1c:	3f90ad3a 	.word	0x3f90ad3a
 8004c20:	24760deb 	.word	0x24760deb
 8004c24:	3fa97b4b 	.word	0x3fa97b4b
 8004c28:	a0d03d51 	.word	0xa0d03d51
 8004c2c:	3fb10d66 	.word	0x3fb10d66
 8004c30:	c54c206e 	.word	0xc54c206e
 8004c34:	3fb745cd 	.word	0x3fb745cd
 8004c38:	920083ff 	.word	0x920083ff
 8004c3c:	3fc24924 	.word	0x3fc24924
 8004c40:	5555550d 	.word	0x5555550d
 8004c44:	3fd55555 	.word	0x3fd55555
 8004c48:	2c6a6c2f 	.word	0x2c6a6c2f
 8004c4c:	bfa2b444 	.word	0xbfa2b444
 8004c50:	52defd9a 	.word	0x52defd9a
 8004c54:	3fadde2d 	.word	0x3fadde2d
 8004c58:	af749a6d 	.word	0xaf749a6d
 8004c5c:	3fb3b0f2 	.word	0x3fb3b0f2
 8004c60:	fe231671 	.word	0xfe231671
 8004c64:	3fbc71c6 	.word	0x3fbc71c6
 8004c68:	9998ebc4 	.word	0x9998ebc4
 8004c6c:	3fc99999 	.word	0x3fc99999
 8004c70:	54442d18 	.word	0x54442d18
 8004c74:	bff921fb 	.word	0xbff921fb
 8004c78:	440fffff 	.word	0x440fffff
 8004c7c:	7ff00000 	.word	0x7ff00000
 8004c80:	3fdbffff 	.word	0x3fdbffff
 8004c84:	3ff00000 	.word	0x3ff00000
 8004c88:	3ff2ffff 	.word	0x3ff2ffff
 8004c8c:	40038000 	.word	0x40038000
 8004c90:	3ff80000 	.word	0x3ff80000
 8004c94:	bff00000 	.word	0xbff00000
 8004c98:	08004f38 	.word	0x08004f38
 8004c9c:	08004f58 	.word	0x08004f58

08004ca0 <fabs>:
 8004ca0:	ec51 0b10 	vmov	r0, r1, d0
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004caa:	ec43 2b10 	vmov	d0, r2, r3
 8004cae:	4770      	bx	lr

08004cb0 <__ieee754_sqrt>:
 8004cb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb4:	4a68      	ldr	r2, [pc, #416]	@ (8004e58 <__ieee754_sqrt+0x1a8>)
 8004cb6:	ec55 4b10 	vmov	r4, r5, d0
 8004cba:	43aa      	bics	r2, r5
 8004cbc:	462b      	mov	r3, r5
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	d110      	bne.n	8004ce4 <__ieee754_sqrt+0x34>
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	4629      	mov	r1, r5
 8004cc8:	f7fb fc5a 	bl	8000580 <__aeabi_dmul>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	f7fb fa9e 	bl	8000214 <__adddf3>
 8004cd8:	4604      	mov	r4, r0
 8004cda:	460d      	mov	r5, r1
 8004cdc:	ec45 4b10 	vmov	d0, r4, r5
 8004ce0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce4:	2d00      	cmp	r5, #0
 8004ce6:	dc0e      	bgt.n	8004d06 <__ieee754_sqrt+0x56>
 8004ce8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8004cec:	4322      	orrs	r2, r4
 8004cee:	d0f5      	beq.n	8004cdc <__ieee754_sqrt+0x2c>
 8004cf0:	b19d      	cbz	r5, 8004d1a <__ieee754_sqrt+0x6a>
 8004cf2:	4622      	mov	r2, r4
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	f7fb fa8a 	bl	8000210 <__aeabi_dsub>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	f7fb fd68 	bl	80007d4 <__aeabi_ddiv>
 8004d04:	e7e8      	b.n	8004cd8 <__ieee754_sqrt+0x28>
 8004d06:	152a      	asrs	r2, r5, #20
 8004d08:	d115      	bne.n	8004d36 <__ieee754_sqrt+0x86>
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	e009      	b.n	8004d22 <__ieee754_sqrt+0x72>
 8004d0e:	0acb      	lsrs	r3, r1, #11
 8004d10:	3a15      	subs	r2, #21
 8004d12:	0549      	lsls	r1, r1, #21
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0fa      	beq.n	8004d0e <__ieee754_sqrt+0x5e>
 8004d18:	e7f7      	b.n	8004d0a <__ieee754_sqrt+0x5a>
 8004d1a:	462a      	mov	r2, r5
 8004d1c:	e7fa      	b.n	8004d14 <__ieee754_sqrt+0x64>
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	3001      	adds	r0, #1
 8004d22:	02dc      	lsls	r4, r3, #11
 8004d24:	d5fb      	bpl.n	8004d1e <__ieee754_sqrt+0x6e>
 8004d26:	1e44      	subs	r4, r0, #1
 8004d28:	1b12      	subs	r2, r2, r4
 8004d2a:	f1c0 0420 	rsb	r4, r0, #32
 8004d2e:	fa21 f404 	lsr.w	r4, r1, r4
 8004d32:	4323      	orrs	r3, r4
 8004d34:	4081      	lsls	r1, r0
 8004d36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d3a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8004d3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d42:	07d2      	lsls	r2, r2, #31
 8004d44:	bf5c      	itt	pl
 8004d46:	005b      	lslpl	r3, r3, #1
 8004d48:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8004d4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004d50:	bf58      	it	pl
 8004d52:	0049      	lslpl	r1, r1, #1
 8004d54:	2600      	movs	r6, #0
 8004d56:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8004d5a:	106d      	asrs	r5, r5, #1
 8004d5c:	0049      	lsls	r1, r1, #1
 8004d5e:	2016      	movs	r0, #22
 8004d60:	4632      	mov	r2, r6
 8004d62:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8004d66:	1917      	adds	r7, r2, r4
 8004d68:	429f      	cmp	r7, r3
 8004d6a:	bfde      	ittt	le
 8004d6c:	193a      	addle	r2, r7, r4
 8004d6e:	1bdb      	suble	r3, r3, r7
 8004d70:	1936      	addle	r6, r6, r4
 8004d72:	0fcf      	lsrs	r7, r1, #31
 8004d74:	3801      	subs	r0, #1
 8004d76:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8004d7a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004d7e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004d82:	d1f0      	bne.n	8004d66 <__ieee754_sqrt+0xb6>
 8004d84:	4604      	mov	r4, r0
 8004d86:	2720      	movs	r7, #32
 8004d88:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	eb00 0e0c 	add.w	lr, r0, ip
 8004d92:	db02      	blt.n	8004d9a <__ieee754_sqrt+0xea>
 8004d94:	d113      	bne.n	8004dbe <__ieee754_sqrt+0x10e>
 8004d96:	458e      	cmp	lr, r1
 8004d98:	d811      	bhi.n	8004dbe <__ieee754_sqrt+0x10e>
 8004d9a:	f1be 0f00 	cmp.w	lr, #0
 8004d9e:	eb0e 000c 	add.w	r0, lr, ip
 8004da2:	da42      	bge.n	8004e2a <__ieee754_sqrt+0x17a>
 8004da4:	2800      	cmp	r0, #0
 8004da6:	db40      	blt.n	8004e2a <__ieee754_sqrt+0x17a>
 8004da8:	f102 0801 	add.w	r8, r2, #1
 8004dac:	1a9b      	subs	r3, r3, r2
 8004dae:	458e      	cmp	lr, r1
 8004db0:	bf88      	it	hi
 8004db2:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8004db6:	eba1 010e 	sub.w	r1, r1, lr
 8004dba:	4464      	add	r4, ip
 8004dbc:	4642      	mov	r2, r8
 8004dbe:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8004dc2:	3f01      	subs	r7, #1
 8004dc4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8004dc8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004dcc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004dd0:	d1dc      	bne.n	8004d8c <__ieee754_sqrt+0xdc>
 8004dd2:	4319      	orrs	r1, r3
 8004dd4:	d01b      	beq.n	8004e0e <__ieee754_sqrt+0x15e>
 8004dd6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8004e5c <__ieee754_sqrt+0x1ac>
 8004dda:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8004e60 <__ieee754_sqrt+0x1b0>
 8004dde:	e9da 0100 	ldrd	r0, r1, [sl]
 8004de2:	e9db 2300 	ldrd	r2, r3, [fp]
 8004de6:	f7fb fa13 	bl	8000210 <__aeabi_dsub>
 8004dea:	e9da 8900 	ldrd	r8, r9, [sl]
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	4640      	mov	r0, r8
 8004df4:	4649      	mov	r1, r9
 8004df6:	f7fb fe3f 	bl	8000a78 <__aeabi_dcmple>
 8004dfa:	b140      	cbz	r0, 8004e0e <__ieee754_sqrt+0x15e>
 8004dfc:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8004e00:	e9da 0100 	ldrd	r0, r1, [sl]
 8004e04:	e9db 2300 	ldrd	r2, r3, [fp]
 8004e08:	d111      	bne.n	8004e2e <__ieee754_sqrt+0x17e>
 8004e0a:	3601      	adds	r6, #1
 8004e0c:	463c      	mov	r4, r7
 8004e0e:	1072      	asrs	r2, r6, #1
 8004e10:	0863      	lsrs	r3, r4, #1
 8004e12:	07f1      	lsls	r1, r6, #31
 8004e14:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8004e18:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8004e1c:	bf48      	it	mi
 8004e1e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8004e22:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8004e26:	4618      	mov	r0, r3
 8004e28:	e756      	b.n	8004cd8 <__ieee754_sqrt+0x28>
 8004e2a:	4690      	mov	r8, r2
 8004e2c:	e7be      	b.n	8004dac <__ieee754_sqrt+0xfc>
 8004e2e:	f7fb f9f1 	bl	8000214 <__adddf3>
 8004e32:	e9da 8900 	ldrd	r8, r9, [sl]
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4640      	mov	r0, r8
 8004e3c:	4649      	mov	r1, r9
 8004e3e:	f7fb fe11 	bl	8000a64 <__aeabi_dcmplt>
 8004e42:	b120      	cbz	r0, 8004e4e <__ieee754_sqrt+0x19e>
 8004e44:	1ca0      	adds	r0, r4, #2
 8004e46:	bf08      	it	eq
 8004e48:	3601      	addeq	r6, #1
 8004e4a:	3402      	adds	r4, #2
 8004e4c:	e7df      	b.n	8004e0e <__ieee754_sqrt+0x15e>
 8004e4e:	1c63      	adds	r3, r4, #1
 8004e50:	f023 0401 	bic.w	r4, r3, #1
 8004e54:	e7db      	b.n	8004e0e <__ieee754_sqrt+0x15e>
 8004e56:	bf00      	nop
 8004e58:	7ff00000 	.word	0x7ff00000
 8004e5c:	20000018 	.word	0x20000018
 8004e60:	20000010 	.word	0x20000010

08004e64 <memset>:
 8004e64:	4402      	add	r2, r0
 8004e66:	4603      	mov	r3, r0
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d100      	bne.n	8004e6e <memset+0xa>
 8004e6c:	4770      	bx	lr
 8004e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e72:	e7f9      	b.n	8004e68 <memset+0x4>

08004e74 <__errno>:
 8004e74:	4b01      	ldr	r3, [pc, #4]	@ (8004e7c <__errno+0x8>)
 8004e76:	6818      	ldr	r0, [r3, #0]
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	20000020 	.word	0x20000020

08004e80 <__libc_init_array>:
 8004e80:	b570      	push	{r4, r5, r6, lr}
 8004e82:	4d0d      	ldr	r5, [pc, #52]	@ (8004eb8 <__libc_init_array+0x38>)
 8004e84:	4c0d      	ldr	r4, [pc, #52]	@ (8004ebc <__libc_init_array+0x3c>)
 8004e86:	1b64      	subs	r4, r4, r5
 8004e88:	10a4      	asrs	r4, r4, #2
 8004e8a:	2600      	movs	r6, #0
 8004e8c:	42a6      	cmp	r6, r4
 8004e8e:	d109      	bne.n	8004ea4 <__libc_init_array+0x24>
 8004e90:	4d0b      	ldr	r5, [pc, #44]	@ (8004ec0 <__libc_init_array+0x40>)
 8004e92:	4c0c      	ldr	r4, [pc, #48]	@ (8004ec4 <__libc_init_array+0x44>)
 8004e94:	f000 f818 	bl	8004ec8 <_init>
 8004e98:	1b64      	subs	r4, r4, r5
 8004e9a:	10a4      	asrs	r4, r4, #2
 8004e9c:	2600      	movs	r6, #0
 8004e9e:	42a6      	cmp	r6, r4
 8004ea0:	d105      	bne.n	8004eae <__libc_init_array+0x2e>
 8004ea2:	bd70      	pop	{r4, r5, r6, pc}
 8004ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ea8:	4798      	blx	r3
 8004eaa:	3601      	adds	r6, #1
 8004eac:	e7ee      	b.n	8004e8c <__libc_init_array+0xc>
 8004eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eb2:	4798      	blx	r3
 8004eb4:	3601      	adds	r6, #1
 8004eb6:	e7f2      	b.n	8004e9e <__libc_init_array+0x1e>
 8004eb8:	08004f80 	.word	0x08004f80
 8004ebc:	08004f80 	.word	0x08004f80
 8004ec0:	08004f80 	.word	0x08004f80
 8004ec4:	08004f84 	.word	0x08004f84

08004ec8 <_init>:
 8004ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eca:	bf00      	nop
 8004ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ece:	bc08      	pop	{r3}
 8004ed0:	469e      	mov	lr, r3
 8004ed2:	4770      	bx	lr

08004ed4 <_fini>:
 8004ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed6:	bf00      	nop
 8004ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eda:	bc08      	pop	{r3}
 8004edc:	469e      	mov	lr, r3
 8004ede:	4770      	bx	lr
