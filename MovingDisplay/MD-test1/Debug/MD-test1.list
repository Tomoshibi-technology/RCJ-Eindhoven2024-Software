
MD-test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ad4  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004b8c  08004b8c  00005b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c68  08004c68  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  08004c68  08004c68  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c68  08004c68  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c68  08004c68  00005c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c6c  08004c6c  00005c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004c70  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  20000010  08004c80  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08004c80  0000637c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107b1  00000000  00000000  00006038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002396  00000000  00000000  000167e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00018b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b30  00000000  00000000  00019998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000159d4  00000000  00000000  0001a4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001165e  00000000  00000000  0002fe9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a868  00000000  00000000  000414fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbd62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032fc  00000000  00000000  000cbda8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000cf0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004b74 	.word	0x08004b74

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08004b74 	.word	0x08004b74

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
    if (htim == &htim3){
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d104      	bne.n	8000406 <HAL_TIM_PeriodElapsedCallback+0x1a>
        u10_counter++;
 80003fc:	4b05      	ldr	r3, [pc, #20]	@ (8000414 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	1c5a      	adds	r2, r3, #1
 8000402:	4b04      	ldr	r3, [pc, #16]	@ (8000414 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000404:	601a      	str	r2, [r3, #0]
    }
}
 8000406:	46c0      	nop			@ (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	b002      	add	sp, #8
 800040c:	bd80      	pop	{r7, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)
 8000410:	2000002c 	.word	0x2000002c
 8000414:	200002a4 	.word	0x200002a4

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b089      	sub	sp, #36	@ 0x24
 800041c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041e:	f000 fdf5 	bl	800100c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000422:	f000 f915 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000426:	f000 faeb 	bl	8000a00 <MX_GPIO_Init>
  MX_DMA_Init();
 800042a:	f000 fac3 	bl	80009b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800042e:	f000 fa8d 	bl	800094c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000432:	f000 f961 	bl	80006f8 <MX_TIM3_Init>
  MX_TIM16_Init();
 8000436:	f000 f9b3 	bl	80007a0 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 800043a:	f000 fa39 	bl	80008b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800043e:	4b73      	ldr	r3, [pc, #460]	@ (800060c <main+0x1f4>)
 8000440:	0018      	movs	r0, r3
 8000442:	f002 f9d5 	bl	80027f0 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000446:	4b72      	ldr	r3, [pc, #456]	@ (8000610 <main+0x1f8>)
 8000448:	2100      	movs	r1, #0
 800044a:	0018      	movs	r0, r3
 800044c:	f002 fa7e 	bl	800294c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim16, TIM_CHANNEL_1);
 8000450:	4b6f      	ldr	r3, [pc, #444]	@ (8000610 <main+0x1f8>)
 8000452:	2100      	movs	r1, #0
 8000454:	0018      	movs	r0, r3
 8000456:	f003 fa25 	bl	80038a4 <HAL_TIMEx_PWMN_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t Ltika_pcounter = u10_counter;
 800045a:	4b6e      	ldr	r3, [pc, #440]	@ (8000614 <main+0x1fc>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	60fb      	str	r3, [r7, #12]

  uint32_t duty_pcounter = u10_counter;
 8000460:	4b6c      	ldr	r3, [pc, #432]	@ (8000614 <main+0x1fc>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	60bb      	str	r3, [r7, #8]

  uint32_t d_pcounter = u10_counter;
 8000466:	4b6b      	ldr	r3, [pc, #428]	@ (8000614 <main+0x1fc>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	607b      	str	r3, [r7, #4]

  HAL_UART_Receive_DMA(&huart1,rxBufA,sizeof(rxBufA));
 800046c:	496a      	ldr	r1, [pc, #424]	@ (8000618 <main+0x200>)
 800046e:	4b6b      	ldr	r3, [pc, #428]	@ (800061c <main+0x204>)
 8000470:	2240      	movs	r2, #64	@ 0x40
 8000472:	0018      	movs	r0, r3
 8000474:	f003 fc3e 	bl	8003cf4 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2,rxBufB,sizeof(rxBufB));
 8000478:	4969      	ldr	r1, [pc, #420]	@ (8000620 <main+0x208>)
 800047a:	4b6a      	ldr	r3, [pc, #424]	@ (8000624 <main+0x20c>)
 800047c:	2280      	movs	r2, #128	@ 0x80
 800047e:	0018      	movs	r0, r3
 8000480:	f003 fc38 	bl	8003cf4 <HAL_UART_Receive_DMA>

  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, 1);
 8000484:	23a0      	movs	r3, #160	@ 0xa0
 8000486:	05db      	lsls	r3, r3, #23
 8000488:	2201      	movs	r2, #1
 800048a:	2120      	movs	r1, #32
 800048c:	0018      	movs	r0, r3
 800048e:	f001 faf4 	bl	8001a7a <HAL_GPIO_WritePin>
  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, duty);
 8000492:	4b65      	ldr	r3, [pc, #404]	@ (8000628 <main+0x210>)
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	4b5e      	ldr	r3, [pc, #376]	@ (8000610 <main+0x1f8>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	635a      	str	r2, [r3, #52]	@ 0x34
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  dtime = u10_counter - d_pcounter;
 800049c:	4b5d      	ldr	r3, [pc, #372]	@ (8000614 <main+0x1fc>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	b29a      	uxth	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	1ad3      	subs	r3, r2, r3
 80004a8:	b29a      	uxth	r2, r3
 80004aa:	4b60      	ldr	r3, [pc, #384]	@ (800062c <main+0x214>)
 80004ac:	801a      	strh	r2, [r3, #0]
	  d_pcounter = d_pcounter + dtime;
 80004ae:	4b5f      	ldr	r3, [pc, #380]	@ (800062c <main+0x214>)
 80004b0:	881b      	ldrh	r3, [r3, #0]
 80004b2:	001a      	movs	r2, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	189b      	adds	r3, r3, r2
 80004b8:	607b      	str	r3, [r7, #4]

	  readBuf(&huart1, rxBufA, 64, rxDataA, 2, ID, 8);
 80004ba:	4b5d      	ldr	r3, [pc, #372]	@ (8000630 <main+0x218>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	001c      	movs	r4, r3
 80004c0:	4b5c      	ldr	r3, [pc, #368]	@ (8000634 <main+0x21c>)
 80004c2:	4955      	ldr	r1, [pc, #340]	@ (8000618 <main+0x200>)
 80004c4:	4855      	ldr	r0, [pc, #340]	@ (800061c <main+0x204>)
 80004c6:	2208      	movs	r2, #8
 80004c8:	9202      	str	r2, [sp, #8]
 80004ca:	9401      	str	r4, [sp, #4]
 80004cc:	2202      	movs	r2, #2
 80004ce:	9200      	str	r2, [sp, #0]
 80004d0:	2240      	movs	r2, #64	@ 0x40
 80004d2:	f000 fb0f 	bl	8000af4 <readBuf>
	  readBuf(&huart2, rxBufB, 128, rxDataB, 2, ID, 25);
 80004d6:	4b56      	ldr	r3, [pc, #344]	@ (8000630 <main+0x218>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	001c      	movs	r4, r3
 80004dc:	4b56      	ldr	r3, [pc, #344]	@ (8000638 <main+0x220>)
 80004de:	4950      	ldr	r1, [pc, #320]	@ (8000620 <main+0x208>)
 80004e0:	4850      	ldr	r0, [pc, #320]	@ (8000624 <main+0x20c>)
 80004e2:	2219      	movs	r2, #25
 80004e4:	9202      	str	r2, [sp, #8]
 80004e6:	9401      	str	r4, [sp, #4]
 80004e8:	2202      	movs	r2, #2
 80004ea:	9200      	str	r2, [sp, #0]
 80004ec:	2280      	movs	r2, #128	@ 0x80
 80004ee:	f000 fb01 	bl	8000af4 <readBuf>

	  goalSpeed = rxDataB[0] + rxDataB[1]*100;
 80004f2:	4b51      	ldr	r3, [pc, #324]	@ (8000638 <main+0x220>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	001a      	movs	r2, r3
 80004f8:	4b4f      	ldr	r3, [pc, #316]	@ (8000638 <main+0x220>)
 80004fa:	785b      	ldrb	r3, [r3, #1]
 80004fc:	0019      	movs	r1, r3
 80004fe:	2364      	movs	r3, #100	@ 0x64
 8000500:	434b      	muls	r3, r1
 8000502:	b29b      	uxth	r3, r3
 8000504:	18d3      	adds	r3, r2, r3
 8000506:	b29a      	uxth	r2, r3
 8000508:	4b4c      	ldr	r3, [pc, #304]	@ (800063c <main+0x224>)
 800050a:	801a      	strh	r2, [r3, #0]

	  //nowSpeed取�?
//	  nowSpeed = duty*10000/1280;
	  nowSpeed = rxDataA[0] + rxDataA[1]*100;
 800050c:	4b49      	ldr	r3, [pc, #292]	@ (8000634 <main+0x21c>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	001a      	movs	r2, r3
 8000512:	4b48      	ldr	r3, [pc, #288]	@ (8000634 <main+0x21c>)
 8000514:	785b      	ldrb	r3, [r3, #1]
 8000516:	0019      	movs	r1, r3
 8000518:	2364      	movs	r3, #100	@ 0x64
 800051a:	434b      	muls	r3, r1
 800051c:	b29b      	uxth	r3, r3
 800051e:	18d3      	adds	r3, r2, r3
 8000520:	b29a      	uxth	r2, r3
 8000522:	4b47      	ldr	r3, [pc, #284]	@ (8000640 <main+0x228>)
 8000524:	801a      	strh	r2, [r3, #0]

	  if(goalSpeed < nowSpeed){
 8000526:	4b45      	ldr	r3, [pc, #276]	@ (800063c <main+0x224>)
 8000528:	881a      	ldrh	r2, [r3, #0]
 800052a:	4b45      	ldr	r3, [pc, #276]	@ (8000640 <main+0x228>)
 800052c:	881b      	ldrh	r3, [r3, #0]
 800052e:	429a      	cmp	r2, r3
 8000530:	d20e      	bcs.n	8000550 <main+0x138>
		  if((u10_counter - duty_pcounter) > 50){
 8000532:	4b38      	ldr	r3, [pc, #224]	@ (8000614 <main+0x1fc>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	1ad3      	subs	r3, r2, r3
 800053a:	2b32      	cmp	r3, #50	@ 0x32
 800053c:	d921      	bls.n	8000582 <main+0x16a>
			  duty--;
 800053e:	4b3a      	ldr	r3, [pc, #232]	@ (8000628 <main+0x210>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	1e5a      	subs	r2, r3, #1
 8000544:	4b38      	ldr	r3, [pc, #224]	@ (8000628 <main+0x210>)
 8000546:	601a      	str	r2, [r3, #0]
			  duty_pcounter = u10_counter;
 8000548:	4b32      	ldr	r3, [pc, #200]	@ (8000614 <main+0x1fc>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	e018      	b.n	8000582 <main+0x16a>
		  }
	  }else if(goalSpeed > nowSpeed){
 8000550:	4b3a      	ldr	r3, [pc, #232]	@ (800063c <main+0x224>)
 8000552:	881a      	ldrh	r2, [r3, #0]
 8000554:	4b3a      	ldr	r3, [pc, #232]	@ (8000640 <main+0x228>)
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	429a      	cmp	r2, r3
 800055a:	d90e      	bls.n	800057a <main+0x162>
		  if((u10_counter - duty_pcounter) > 50){
 800055c:	4b2d      	ldr	r3, [pc, #180]	@ (8000614 <main+0x1fc>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	1ad3      	subs	r3, r2, r3
 8000564:	2b32      	cmp	r3, #50	@ 0x32
 8000566:	d90c      	bls.n	8000582 <main+0x16a>
			  duty++;
 8000568:	4b2f      	ldr	r3, [pc, #188]	@ (8000628 <main+0x210>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	1c5a      	adds	r2, r3, #1
 800056e:	4b2e      	ldr	r3, [pc, #184]	@ (8000628 <main+0x210>)
 8000570:	601a      	str	r2, [r3, #0]
			  duty_pcounter = u10_counter;
 8000572:	4b28      	ldr	r3, [pc, #160]	@ (8000614 <main+0x1fc>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	e003      	b.n	8000582 <main+0x16a>
		  }
	  }else{
		  duty = duty;
 800057a:	4b2b      	ldr	r3, [pc, #172]	@ (8000628 <main+0x210>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	4b2a      	ldr	r3, [pc, #168]	@ (8000628 <main+0x210>)
 8000580:	601a      	str	r2, [r3, #0]
	  }

	  if(duty > 1260){duty = 1260;}//duty制?��?
 8000582:	4b29      	ldr	r3, [pc, #164]	@ (8000628 <main+0x210>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a2f      	ldr	r2, [pc, #188]	@ (8000644 <main+0x22c>)
 8000588:	4293      	cmp	r3, r2
 800058a:	dd03      	ble.n	8000594 <main+0x17c>
 800058c:	4b26      	ldr	r3, [pc, #152]	@ (8000628 <main+0x210>)
 800058e:	4a2d      	ldr	r2, [pc, #180]	@ (8000644 <main+0x22c>)
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	e00b      	b.n	80005ac <main+0x194>
	  else if(duty < 20){duty = 20;}
 8000594:	4b24      	ldr	r3, [pc, #144]	@ (8000628 <main+0x210>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b13      	cmp	r3, #19
 800059a:	dc03      	bgt.n	80005a4 <main+0x18c>
 800059c:	4b22      	ldr	r3, [pc, #136]	@ (8000628 <main+0x210>)
 800059e:	2214      	movs	r2, #20
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	e003      	b.n	80005ac <main+0x194>
	  else{duty = duty;}
 80005a4:	4b20      	ldr	r3, [pc, #128]	@ (8000628 <main+0x210>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000628 <main+0x210>)
 80005aa:	601a      	str	r2, [r3, #0]

	  if(HAL_GPIO_ReadPin(SLSW_GPIO_Port, SLSW_Pin) == 1){//スタートスイ?��?チ読み込み
 80005ac:	23a0      	movs	r3, #160	@ 0xa0
 80005ae:	05db      	lsls	r3, r3, #23
 80005b0:	2102      	movs	r1, #2
 80005b2:	0018      	movs	r0, r3
 80005b4:	f001 fa44 	bl	8001a40 <HAL_GPIO_ReadPin>
 80005b8:	0003      	movs	r3, r0
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d10c      	bne.n	80005d8 <main+0x1c0>
		  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, 1);//シャ?��?トダウン解除
 80005be:	23a0      	movs	r3, #160	@ 0xa0
 80005c0:	05db      	lsls	r3, r3, #23
 80005c2:	2201      	movs	r2, #1
 80005c4:	2120      	movs	r1, #32
 80005c6:	0018      	movs	r0, r3
 80005c8:	f001 fa57 	bl	8001a7a <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, duty);//duty代入
 80005cc:	4b16      	ldr	r3, [pc, #88]	@ (8000628 <main+0x210>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <main+0x1f8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80005d6:	e008      	b.n	80005ea <main+0x1d2>
	  }else{
		  duty = 640;//速度0に設?��?
 80005d8:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <main+0x210>)
 80005da:	22a0      	movs	r2, #160	@ 0xa0
 80005dc:	0092      	lsls	r2, r2, #2
 80005de:	601a      	str	r2, [r3, #0]
//		  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, 0);
		  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, duty);
 80005e0:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <main+0x210>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <main+0x1f8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	635a      	str	r2, [r3, #52]	@ 0x34
	  }



	  if(u10_counter - Ltika_pcounter > 100000){
 80005ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000614 <main+0x1fc>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	4a15      	ldr	r2, [pc, #84]	@ (8000648 <main+0x230>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d800      	bhi.n	80005fa <main+0x1e2>
 80005f8:	e750      	b.n	800049c <main+0x84>
	  	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005fa:	4b14      	ldr	r3, [pc, #80]	@ (800064c <main+0x234>)
 80005fc:	2180      	movs	r1, #128	@ 0x80
 80005fe:	0018      	movs	r0, r3
 8000600:	f001 fa58 	bl	8001ab4 <HAL_GPIO_TogglePin>
    	Ltika_pcounter = u10_counter;
 8000604:	4b03      	ldr	r3, [pc, #12]	@ (8000614 <main+0x1fc>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	60fb      	str	r3, [r7, #12]
	  dtime = u10_counter - d_pcounter;
 800060a:	e747      	b.n	800049c <main+0x84>
 800060c:	2000002c 	.word	0x2000002c
 8000610:	20000078 	.word	0x20000078
 8000614:	200002a4 	.word	0x200002a4
 8000618:	200002a8 	.word	0x200002a8
 800061c:	200000c4 	.word	0x200000c4
 8000620:	200002ec 	.word	0x200002ec
 8000624:	20000158 	.word	0x20000158
 8000628:	20000000 	.word	0x20000000
 800062c:	20000374 	.word	0x20000374
 8000630:	2000036e 	.word	0x2000036e
 8000634:	200002e8 	.word	0x200002e8
 8000638:	2000036c 	.word	0x2000036c
 800063c:	20000370 	.word	0x20000370
 8000640:	20000372 	.word	0x20000372
 8000644:	000004ec 	.word	0x000004ec
 8000648:	000186a0 	.word	0x000186a0
 800064c:	50000400 	.word	0x50000400

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b590      	push	{r4, r7, lr}
 8000652:	b093      	sub	sp, #76	@ 0x4c
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	2414      	movs	r4, #20
 8000658:	193b      	adds	r3, r7, r4
 800065a:	0018      	movs	r0, r3
 800065c:	2334      	movs	r3, #52	@ 0x34
 800065e:	001a      	movs	r2, r3
 8000660:	2100      	movs	r1, #0
 8000662:	f004 fa5b 	bl	8004b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	0018      	movs	r0, r3
 800066a:	2310      	movs	r3, #16
 800066c:	001a      	movs	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	f004 fa54 	bl	8004b1c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2380      	movs	r3, #128	@ 0x80
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	0018      	movs	r0, r3
 800067a:	f001 fa37 	bl	8001aec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067e:	193b      	adds	r3, r7, r4
 8000680:	2201      	movs	r2, #1
 8000682:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000684:	193b      	adds	r3, r7, r4
 8000686:	22a0      	movs	r2, #160	@ 0xa0
 8000688:	02d2      	lsls	r2, r2, #11
 800068a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	0021      	movs	r1, r4
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2202      	movs	r2, #2
 8000692:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2203      	movs	r2, #3
 8000698:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2200      	movs	r2, #0
 800069e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2208      	movs	r2, #8
 80006a4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2280      	movs	r2, #128	@ 0x80
 80006aa:	0292      	lsls	r2, r2, #10
 80006ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	0592      	lsls	r2, r2, #22
 80006b4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	0018      	movs	r0, r3
 80006ba:	f001 fa63 	bl	8001b84 <HAL_RCC_OscConfig>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80006c2:	f000 fa75 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2207      	movs	r2, #7
 80006ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2202      	movs	r2, #2
 80006d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2102      	movs	r1, #2
 80006e2:	0018      	movs	r0, r3
 80006e4:	f001 fd5e 	bl	80021a4 <HAL_RCC_ClockConfig>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006ec:	f000 fa60 	bl	8000bb0 <Error_Handler>
  }
}
 80006f0:	46c0      	nop			@ (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b013      	add	sp, #76	@ 0x4c
 80006f6:	bd90      	pop	{r4, r7, pc}

080006f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fe:	2310      	movs	r3, #16
 8000700:	18fb      	adds	r3, r7, r3
 8000702:	0018      	movs	r0, r3
 8000704:	2310      	movs	r3, #16
 8000706:	001a      	movs	r2, r3
 8000708:	2100      	movs	r1, #0
 800070a:	f004 fa07 	bl	8004b1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	0018      	movs	r0, r3
 8000712:	230c      	movs	r3, #12
 8000714:	001a      	movs	r2, r3
 8000716:	2100      	movs	r1, #0
 8000718:	f004 fa00 	bl	8004b1c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800071c:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <MX_TIM3_Init+0xa0>)
 800071e:	4a1f      	ldr	r2, [pc, #124]	@ (800079c <MX_TIM3_Init+0xa4>)
 8000720:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000722:	4b1d      	ldr	r3, [pc, #116]	@ (8000798 <MX_TIM3_Init+0xa0>)
 8000724:	223f      	movs	r2, #63	@ 0x3f
 8000726:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000728:	4b1b      	ldr	r3, [pc, #108]	@ (8000798 <MX_TIM3_Init+0xa0>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 800072e:	4b1a      	ldr	r3, [pc, #104]	@ (8000798 <MX_TIM3_Init+0xa0>)
 8000730:	2209      	movs	r2, #9
 8000732:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000734:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <MX_TIM3_Init+0xa0>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073a:	4b17      	ldr	r3, [pc, #92]	@ (8000798 <MX_TIM3_Init+0xa0>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000740:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_TIM3_Init+0xa0>)
 8000742:	0018      	movs	r0, r3
 8000744:	f001 fffc 	bl	8002740 <HAL_TIM_Base_Init>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800074c:	f000 fa30 	bl	8000bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000750:	2110      	movs	r1, #16
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2280      	movs	r2, #128	@ 0x80
 8000756:	0152      	lsls	r2, r2, #5
 8000758:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800075a:	187a      	adds	r2, r7, r1
 800075c:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_TIM3_Init+0xa0>)
 800075e:	0011      	movs	r1, r2
 8000760:	0018      	movs	r0, r3
 8000762:	f002 fbd3 	bl	8002f0c <HAL_TIM_ConfigClockSource>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800076a:	f000 fa21 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800077a:	1d3a      	adds	r2, r7, #4
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_TIM3_Init+0xa0>)
 800077e:	0011      	movs	r1, r2
 8000780:	0018      	movs	r0, r3
 8000782:	f003 f927 	bl	80039d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800078a:	f000 fa11 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b008      	add	sp, #32
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	2000002c 	.word	0x2000002c
 800079c:	40000400 	.word	0x40000400

080007a0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b094      	sub	sp, #80	@ 0x50
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a6:	2334      	movs	r3, #52	@ 0x34
 80007a8:	18fb      	adds	r3, r7, r3
 80007aa:	0018      	movs	r0, r3
 80007ac:	231c      	movs	r3, #28
 80007ae:	001a      	movs	r2, r3
 80007b0:	2100      	movs	r1, #0
 80007b2:	f004 f9b3 	bl	8004b1c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007b6:	003b      	movs	r3, r7
 80007b8:	0018      	movs	r0, r3
 80007ba:	2334      	movs	r3, #52	@ 0x34
 80007bc:	001a      	movs	r2, r3
 80007be:	2100      	movs	r1, #0
 80007c0:	f004 f9ac 	bl	8004b1c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80007c4:	4b37      	ldr	r3, [pc, #220]	@ (80008a4 <MX_TIM16_Init+0x104>)
 80007c6:	4a38      	ldr	r2, [pc, #224]	@ (80008a8 <MX_TIM16_Init+0x108>)
 80007c8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80007ca:	4b36      	ldr	r3, [pc, #216]	@ (80008a4 <MX_TIM16_Init+0x104>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d0:	4b34      	ldr	r3, [pc, #208]	@ (80008a4 <MX_TIM16_Init+0x104>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1280-1;
 80007d6:	4b33      	ldr	r3, [pc, #204]	@ (80008a4 <MX_TIM16_Init+0x104>)
 80007d8:	4a34      	ldr	r2, [pc, #208]	@ (80008ac <MX_TIM16_Init+0x10c>)
 80007da:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007dc:	4b31      	ldr	r3, [pc, #196]	@ (80008a4 <MX_TIM16_Init+0x104>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80007e2:	4b30      	ldr	r3, [pc, #192]	@ (80008a4 <MX_TIM16_Init+0x104>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e8:	4b2e      	ldr	r3, [pc, #184]	@ (80008a4 <MX_TIM16_Init+0x104>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007ee:	4b2d      	ldr	r3, [pc, #180]	@ (80008a4 <MX_TIM16_Init+0x104>)
 80007f0:	0018      	movs	r0, r3
 80007f2:	f001 ffa5 	bl	8002740 <HAL_TIM_Base_Init>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80007fa:	f000 f9d9 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80007fe:	4b29      	ldr	r3, [pc, #164]	@ (80008a4 <MX_TIM16_Init+0x104>)
 8000800:	0018      	movs	r0, r3
 8000802:	f002 f843 	bl	800288c <HAL_TIM_PWM_Init>
 8000806:	1e03      	subs	r3, r0, #0
 8000808:	d001      	beq.n	800080e <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 800080a:	f000 f9d1 	bl	8000bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800080e:	2134      	movs	r1, #52	@ 0x34
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2260      	movs	r2, #96	@ 0x60
 8000814:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2200      	movs	r2, #0
 800081a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2200      	movs	r2, #0
 8000832:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2200      	movs	r2, #0
 8000838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800083a:	1879      	adds	r1, r7, r1
 800083c:	4b19      	ldr	r3, [pc, #100]	@ (80008a4 <MX_TIM16_Init+0x104>)
 800083e:	2200      	movs	r2, #0
 8000840:	0018      	movs	r0, r3
 8000842:	f002 fa63 	bl	8002d0c <HAL_TIM_PWM_ConfigChannel>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d001      	beq.n	800084e <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 800084a:	f000 f9b1 	bl	8000bb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800084e:	003b      	movs	r3, r7
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000854:	003b      	movs	r3, r7
 8000856:	2200      	movs	r2, #0
 8000858:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800085a:	003b      	movs	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000860:	003b      	movs	r3, r7
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000866:	003b      	movs	r3, r7
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800086c:	003b      	movs	r3, r7
 800086e:	2280      	movs	r2, #128	@ 0x80
 8000870:	0192      	lsls	r2, r2, #6
 8000872:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000874:	003b      	movs	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800087a:	003b      	movs	r3, r7
 800087c:	2200      	movs	r2, #0
 800087e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000880:	003a      	movs	r2, r7
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <MX_TIM16_Init+0x104>)
 8000884:	0011      	movs	r1, r2
 8000886:	0018      	movs	r0, r3
 8000888:	f003 f906 	bl	8003a98 <HAL_TIMEx_ConfigBreakDeadTime>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8000890:	f000 f98e 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000894:	4b03      	ldr	r3, [pc, #12]	@ (80008a4 <MX_TIM16_Init+0x104>)
 8000896:	0018      	movs	r0, r3
 8000898:	f000 f9f0 	bl	8000c7c <HAL_TIM_MspPostInit>

}
 800089c:	46c0      	nop			@ (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b014      	add	sp, #80	@ 0x50
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000078 	.word	0x20000078
 80008a8:	40014400 	.word	0x40014400
 80008ac:	000004ff 	.word	0x000004ff

080008b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b4:	4b23      	ldr	r3, [pc, #140]	@ (8000944 <MX_USART1_UART_Init+0x94>)
 80008b6:	4a24      	ldr	r2, [pc, #144]	@ (8000948 <MX_USART1_UART_Init+0x98>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ba:	4b22      	ldr	r3, [pc, #136]	@ (8000944 <MX_USART1_UART_Init+0x94>)
 80008bc:	22e1      	movs	r2, #225	@ 0xe1
 80008be:	0252      	lsls	r2, r2, #9
 80008c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b20      	ldr	r3, [pc, #128]	@ (8000944 <MX_USART1_UART_Init+0x94>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000944 <MX_USART1_UART_Init+0x94>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000944 <MX_USART1_UART_Init+0x94>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000944 <MX_USART1_UART_Init+0x94>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b1a      	ldr	r3, [pc, #104]	@ (8000944 <MX_USART1_UART_Init+0x94>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b18      	ldr	r3, [pc, #96]	@ (8000944 <MX_USART1_UART_Init+0x94>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e6:	4b17      	ldr	r3, [pc, #92]	@ (8000944 <MX_USART1_UART_Init+0x94>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ec:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <MX_USART1_UART_Init+0x94>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f2:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <MX_USART1_UART_Init+0x94>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008f8:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <MX_USART1_UART_Init+0x94>)
 80008fa:	0018      	movs	r0, r3
 80008fc:	f003 f9a4 	bl	8003c48 <HAL_UART_Init>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d001      	beq.n	8000908 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000904:	f000 f954 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000908:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <MX_USART1_UART_Init+0x94>)
 800090a:	2100      	movs	r1, #0
 800090c:	0018      	movs	r0, r3
 800090e:	f004 f825 	bl	800495c <HAL_UARTEx_SetTxFifoThreshold>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d001      	beq.n	800091a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000916:	f000 f94b 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800091a:	4b0a      	ldr	r3, [pc, #40]	@ (8000944 <MX_USART1_UART_Init+0x94>)
 800091c:	2100      	movs	r1, #0
 800091e:	0018      	movs	r0, r3
 8000920:	f004 f85c 	bl	80049dc <HAL_UARTEx_SetRxFifoThreshold>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000928:	f000 f942 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800092c:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <MX_USART1_UART_Init+0x94>)
 800092e:	0018      	movs	r0, r3
 8000930:	f003 ffda 	bl	80048e8 <HAL_UARTEx_DisableFifoMode>
 8000934:	1e03      	subs	r3, r0, #0
 8000936:	d001      	beq.n	800093c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000938:	f000 f93a 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800093c:	46c0      	nop			@ (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			@ (mov r8, r8)
 8000944:	200000c4 	.word	0x200000c4
 8000948:	40013800 	.word	0x40013800

0800094c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000950:	4b16      	ldr	r3, [pc, #88]	@ (80009ac <MX_USART2_UART_Init+0x60>)
 8000952:	4a17      	ldr	r2, [pc, #92]	@ (80009b0 <MX_USART2_UART_Init+0x64>)
 8000954:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000956:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <MX_USART2_UART_Init+0x60>)
 8000958:	22e1      	movs	r2, #225	@ 0xe1
 800095a:	0252      	lsls	r2, r2, #9
 800095c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <MX_USART2_UART_Init+0x60>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <MX_USART2_UART_Init+0x60>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096a:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <MX_USART2_UART_Init+0x60>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <MX_USART2_UART_Init+0x60>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b0d      	ldr	r3, [pc, #52]	@ (80009ac <MX_USART2_UART_Init+0x60>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <MX_USART2_UART_Init+0x60>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000982:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <MX_USART2_UART_Init+0x60>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000988:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <MX_USART2_UART_Init+0x60>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098e:	4b07      	ldr	r3, [pc, #28]	@ (80009ac <MX_USART2_UART_Init+0x60>)
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000994:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <MX_USART2_UART_Init+0x60>)
 8000996:	0018      	movs	r0, r3
 8000998:	f003 f956 	bl	8003c48 <HAL_UART_Init>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009a0:	f000 f906 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a4:	46c0      	nop			@ (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	20000158 	.word	0x20000158
 80009b0:	40004400 	.word	0x40004400

080009b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ba:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <MX_DMA_Init+0x48>)
 80009bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009be:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <MX_DMA_Init+0x48>)
 80009c0:	2101      	movs	r1, #1
 80009c2:	430a      	orrs	r2, r1
 80009c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80009c6:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <MX_DMA_Init+0x48>)
 80009c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009ca:	2201      	movs	r2, #1
 80009cc:	4013      	ands	r3, r2
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	2009      	movs	r0, #9
 80009d8:	f000 fc4a 	bl	8001270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009dc:	2009      	movs	r0, #9
 80009de:	f000 fc5c 	bl	800129a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	200a      	movs	r0, #10
 80009e8:	f000 fc42 	bl	8001270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80009ec:	200a      	movs	r0, #10
 80009ee:	f000 fc54 	bl	800129a <HAL_NVIC_EnableIRQ>

}
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b002      	add	sp, #8
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	40021000 	.word	0x40021000

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b089      	sub	sp, #36	@ 0x24
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	240c      	movs	r4, #12
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	2314      	movs	r3, #20
 8000a0e:	001a      	movs	r2, r3
 8000a10:	2100      	movs	r1, #0
 8000a12:	f004 f883 	bl	8004b1c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	4b35      	ldr	r3, [pc, #212]	@ (8000aec <MX_GPIO_Init+0xec>)
 8000a18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a1a:	4b34      	ldr	r3, [pc, #208]	@ (8000aec <MX_GPIO_Init+0xec>)
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a22:	4b32      	ldr	r3, [pc, #200]	@ (8000aec <MX_GPIO_Init+0xec>)
 8000a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a26:	2204      	movs	r2, #4
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000aec <MX_GPIO_Init+0xec>)
 8000a30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a32:	4b2e      	ldr	r3, [pc, #184]	@ (8000aec <MX_GPIO_Init+0xec>)
 8000a34:	2101      	movs	r1, #1
 8000a36:	430a      	orrs	r2, r1
 8000a38:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000aec <MX_GPIO_Init+0xec>)
 8000a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4013      	ands	r3, r2
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	4b29      	ldr	r3, [pc, #164]	@ (8000aec <MX_GPIO_Init+0xec>)
 8000a48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a4a:	4b28      	ldr	r3, [pc, #160]	@ (8000aec <MX_GPIO_Init+0xec>)
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a52:	4b26      	ldr	r3, [pc, #152]	@ (8000aec <MX_GPIO_Init+0xec>)
 8000a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a56:	2202      	movs	r2, #2
 8000a58:	4013      	ands	r3, r2
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_RESET);
 8000a5e:	23a0      	movs	r3, #160	@ 0xa0
 8000a60:	05db      	lsls	r3, r3, #23
 8000a62:	2200      	movs	r2, #0
 8000a64:	2120      	movs	r1, #32
 8000a66:	0018      	movs	r0, r3
 8000a68:	f001 f807 	bl	8001a7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a6c:	4b20      	ldr	r3, [pc, #128]	@ (8000af0 <MX_GPIO_Init+0xf0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2180      	movs	r1, #128	@ 0x80
 8000a72:	0018      	movs	r0, r3
 8000a74:	f001 f801 	bl	8001a7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SLSW_Pin */
  GPIO_InitStruct.Pin = SLSW_Pin;
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SLSW_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	193a      	adds	r2, r7, r4
 8000a8c:	23a0      	movs	r3, #160	@ 0xa0
 8000a8e:	05db      	lsls	r3, r3, #23
 8000a90:	0011      	movs	r1, r2
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 fe70 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	2220      	movs	r2, #32
 8000a9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	193a      	adds	r2, r7, r4
 8000ab2:	23a0      	movs	r3, #160	@ 0xa0
 8000ab4:	05db      	lsls	r3, r3, #23
 8000ab6:	0011      	movs	r1, r2
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f000 fe5d 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000abe:	0021      	movs	r1, r4
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2280      	movs	r2, #128	@ 0x80
 8000ac4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2201      	movs	r2, #1
 8000aca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	4a05      	ldr	r2, [pc, #20]	@ (8000af0 <MX_GPIO_Init+0xf0>)
 8000adc:	0019      	movs	r1, r3
 8000ade:	0010      	movs	r0, r2
 8000ae0:	f000 fe4a 	bl	8001778 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae4:	46c0      	nop			@ (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b009      	add	sp, #36	@ 0x24
 8000aea:	bd90      	pop	{r4, r7, pc}
 8000aec:	40021000 	.word	0x40021000
 8000af0:	50000400 	.word	0x50000400

08000af4 <readBuf>:

/* USER CODE BEGIN 4 */

void readBuf(UART_HandleTypeDef* uart, uint8_t* buf, int buf_size, uint8_t* data, int data_size, int id, int go_back){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	@ 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
 8000b00:	603b      	str	r3, [r7, #0]
	int index = uart->hdmarx->Instance->CNDTR;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	2280      	movs	r2, #128	@ 0x80
 8000b06:	589b      	ldr	r3, [r3, r2]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	61bb      	str	r3, [r7, #24]
	index = buf_size - index;
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	61bb      	str	r3, [r7, #24]
	int indexRead = index - go_back;
 8000b16:	69ba      	ldr	r2, [r7, #24]
 8000b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
	if(indexRead < 0){indexRead = indexRead + buf_size;}
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	da03      	bge.n	8000b2c <readBuf+0x38>
 8000b24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	18d3      	adds	r3, r2, r3
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24

	while(1){
		uint8_t readData = buf[indexRead];
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	18d2      	adds	r2, r2, r3
 8000b32:	2117      	movs	r1, #23
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	7812      	ldrb	r2, [r2, #0]
 8000b38:	701a      	strb	r2, [r3, #0]
		if(readData == 250+id){
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	781a      	ldrb	r2, [r3, #0]
 8000b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b40:	33fa      	adds	r3, #250	@ 0xfa
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d11f      	bne.n	8000b86 <readBuf+0x92>
			for(int i=1; i<=data_size; i++){
 8000b46:	2301      	movs	r3, #1
 8000b48:	623b      	str	r3, [r7, #32]
 8000b4a:	e017      	b.n	8000b7c <readBuf+0x88>
				int readPoint = indexRead + i;
 8000b4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
 8000b50:	18d3      	adds	r3, r2, r3
 8000b52:	61fb      	str	r3, [r7, #28]
				if(readPoint>buf_size-1){readPoint = readPoint - buf_size;}
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	dc03      	bgt.n	8000b64 <readBuf+0x70>
 8000b5c:	69fa      	ldr	r2, [r7, #28]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	61fb      	str	r3, [r7, #28]
				data[i-1] = buf[readPoint];
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	18d2      	adds	r2, r2, r3
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	6839      	ldr	r1, [r7, #0]
 8000b70:	18cb      	adds	r3, r1, r3
 8000b72:	7812      	ldrb	r2, [r2, #0]
 8000b74:	701a      	strb	r2, [r3, #0]
			for(int i=1; i<=data_size; i++){
 8000b76:	6a3b      	ldr	r3, [r7, #32]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	623b      	str	r3, [r7, #32]
 8000b7c:	6a3a      	ldr	r2, [r7, #32]
 8000b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b80:	429a      	cmp	r2, r3
 8000b82:	dde3      	ble.n	8000b4c <readBuf+0x58>
			}
			break;
 8000b84:	e010      	b.n	8000ba8 <readBuf+0xb4>
		}
		indexRead++;
 8000b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b88:	3301      	adds	r3, #1
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
		if(indexRead>buf_size-1){indexRead = indexRead - buf_size;}
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dc03      	bgt.n	8000b9c <readBuf+0xa8>
 8000b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	627b      	str	r3, [r7, #36]	@ 0x24
		if(indexRead == index){break;}
 8000b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d000      	beq.n	8000ba6 <readBuf+0xb2>
	while(1){
 8000ba4:	e7c2      	b.n	8000b2c <readBuf+0x38>
		if(indexRead == index){break;}
 8000ba6:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000ba8:	46c0      	nop			@ (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b00a      	add	sp, #40	@ 0x28
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	46c0      	nop			@ (mov r8, r8)
 8000bba:	e7fd      	b.n	8000bb8 <Error_Handler+0x8>

08000bbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <HAL_MspInit+0x44>)
 8000bc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <HAL_MspInit+0x44>)
 8000bc8:	2101      	movs	r1, #1
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <HAL_MspInit+0x44>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <HAL_MspInit+0x44>)
 8000bdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bde:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <HAL_MspInit+0x44>)
 8000be0:	2180      	movs	r1, #128	@ 0x80
 8000be2:	0549      	lsls	r1, r1, #21
 8000be4:	430a      	orrs	r2, r1
 8000be6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000be8:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <HAL_MspInit+0x44>)
 8000bea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bec:	2380      	movs	r3, #128	@ 0x80
 8000bee:	055b      	lsls	r3, r3, #21
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b002      	add	sp, #8
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	40021000 	.word	0x40021000

08000c04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a17      	ldr	r2, [pc, #92]	@ (8000c70 <HAL_TIM_Base_MspInit+0x6c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d114      	bne.n	8000c40 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c16:	4b17      	ldr	r3, [pc, #92]	@ (8000c74 <HAL_TIM_Base_MspInit+0x70>)
 8000c18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c1a:	4b16      	ldr	r3, [pc, #88]	@ (8000c74 <HAL_TIM_Base_MspInit+0x70>)
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c22:	4b14      	ldr	r3, [pc, #80]	@ (8000c74 <HAL_TIM_Base_MspInit+0x70>)
 8000c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c26:	2202      	movs	r2, #2
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2010      	movs	r0, #16
 8000c34:	f000 fb1c 	bl	8001270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c38:	2010      	movs	r0, #16
 8000c3a:	f000 fb2e 	bl	800129a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000c3e:	e012      	b.n	8000c66 <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM16)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0c      	ldr	r2, [pc, #48]	@ (8000c78 <HAL_TIM_Base_MspInit+0x74>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d10d      	bne.n	8000c66 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <HAL_TIM_Base_MspInit+0x70>)
 8000c4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c4e:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <HAL_TIM_Base_MspInit+0x70>)
 8000c50:	2180      	movs	r1, #128	@ 0x80
 8000c52:	0289      	lsls	r1, r1, #10
 8000c54:	430a      	orrs	r2, r1
 8000c56:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <HAL_TIM_Base_MspInit+0x70>)
 8000c5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c5c:	2380      	movs	r3, #128	@ 0x80
 8000c5e:	029b      	lsls	r3, r3, #10
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
}
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b004      	add	sp, #16
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			@ (mov r8, r8)
 8000c70:	40000400 	.word	0x40000400
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40014400 	.word	0x40014400

08000c7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b08b      	sub	sp, #44	@ 0x2c
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	2414      	movs	r4, #20
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	0018      	movs	r0, r3
 8000c8a:	2314      	movs	r3, #20
 8000c8c:	001a      	movs	r2, r3
 8000c8e:	2100      	movs	r1, #0
 8000c90:	f003 ff44 	bl	8004b1c <memset>
  if(htim->Instance==TIM16)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a25      	ldr	r2, [pc, #148]	@ (8000d30 <HAL_TIM_MspPostInit+0xb4>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d143      	bne.n	8000d26 <HAL_TIM_MspPostInit+0xaa>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	4b25      	ldr	r3, [pc, #148]	@ (8000d34 <HAL_TIM_MspPostInit+0xb8>)
 8000ca0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ca2:	4b24      	ldr	r3, [pc, #144]	@ (8000d34 <HAL_TIM_MspPostInit+0xb8>)
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000caa:	4b22      	ldr	r3, [pc, #136]	@ (8000d34 <HAL_TIM_MspPostInit+0xb8>)
 8000cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d34 <HAL_TIM_MspPostInit+0xb8>)
 8000cb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cba:	4b1e      	ldr	r3, [pc, #120]	@ (8000d34 <HAL_TIM_MspPostInit+0xb8>)
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <HAL_TIM_MspPostInit+0xb8>)
 8000cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    PB6     ------> TIM16_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	2240      	movs	r2, #64	@ 0x40
 8000cd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	193b      	adds	r3, r7, r4
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	193b      	adds	r3, r7, r4
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	193b      	adds	r3, r7, r4
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	2205      	movs	r2, #5
 8000cea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	193a      	adds	r2, r7, r4
 8000cee:	23a0      	movs	r3, #160	@ 0xa0
 8000cf0:	05db      	lsls	r3, r3, #23
 8000cf2:	0011      	movs	r1, r2
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f000 fd3f 	bl	8001778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cfa:	0021      	movs	r1, r4
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	2240      	movs	r2, #64	@ 0x40
 8000d00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2202      	movs	r2, #2
 8000d06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	2202      	movs	r2, #2
 8000d18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	4a06      	ldr	r2, [pc, #24]	@ (8000d38 <HAL_TIM_MspPostInit+0xbc>)
 8000d1e:	0019      	movs	r1, r3
 8000d20:	0010      	movs	r0, r2
 8000d22:	f000 fd29 	bl	8001778 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000d26:	46c0      	nop			@ (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b00b      	add	sp, #44	@ 0x2c
 8000d2c:	bd90      	pop	{r4, r7, pc}
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	40014400 	.word	0x40014400
 8000d34:	40021000 	.word	0x40021000
 8000d38:	50000400 	.word	0x50000400

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b093      	sub	sp, #76	@ 0x4c
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	2334      	movs	r3, #52	@ 0x34
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	0018      	movs	r0, r3
 8000d4a:	2314      	movs	r3, #20
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f003 fee4 	bl	8004b1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d54:	241c      	movs	r4, #28
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	0018      	movs	r0, r3
 8000d5a:	2318      	movs	r3, #24
 8000d5c:	001a      	movs	r2, r3
 8000d5e:	2100      	movs	r1, #0
 8000d60:	f003 fedc 	bl	8004b1c <memset>
  if(huart->Instance==USART1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a69      	ldr	r2, [pc, #420]	@ (8000f10 <HAL_UART_MspInit+0x1d4>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d16b      	bne.n	8000e46 <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	2201      	movs	r2, #1
 8000d72:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d74:	193b      	adds	r3, r7, r4
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d7a:	193b      	adds	r3, r7, r4
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f001 fbb9 	bl	80024f4 <HAL_RCCEx_PeriphCLKConfig>
 8000d82:	1e03      	subs	r3, r0, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d86:	f7ff ff13 	bl	8000bb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d8a:	4b62      	ldr	r3, [pc, #392]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000d8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d8e:	4b61      	ldr	r3, [pc, #388]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000d90:	2180      	movs	r1, #128	@ 0x80
 8000d92:	01c9      	lsls	r1, r1, #7
 8000d94:	430a      	orrs	r2, r1
 8000d96:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d98:	4b5e      	ldr	r3, [pc, #376]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000d9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d9c:	2380      	movs	r3, #128	@ 0x80
 8000d9e:	01db      	lsls	r3, r3, #7
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
 8000da4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b5b      	ldr	r3, [pc, #364]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000daa:	4b5a      	ldr	r3, [pc, #360]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000dac:	2101      	movs	r1, #1
 8000dae:	430a      	orrs	r2, r1
 8000db0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000db2:	4b58      	ldr	r3, [pc, #352]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000db6:	2201      	movs	r2, #1
 8000db8:	4013      	ands	r3, r2
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dbe:	2134      	movs	r1, #52	@ 0x34
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	22c0      	movs	r2, #192	@ 0xc0
 8000dc4:	00d2      	lsls	r2, r2, #3
 8000dc6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2202      	movs	r2, #2
 8000dcc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2201      	movs	r2, #1
 8000dde:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	187a      	adds	r2, r7, r1
 8000de2:	23a0      	movs	r3, #160	@ 0xa0
 8000de4:	05db      	lsls	r3, r3, #23
 8000de6:	0011      	movs	r1, r2
 8000de8:	0018      	movs	r0, r3
 8000dea:	f000 fcc5 	bl	8001778 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8000dee:	4b4a      	ldr	r3, [pc, #296]	@ (8000f18 <HAL_UART_MspInit+0x1dc>)
 8000df0:	4a4a      	ldr	r2, [pc, #296]	@ (8000f1c <HAL_UART_MspInit+0x1e0>)
 8000df2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000df4:	4b48      	ldr	r3, [pc, #288]	@ (8000f18 <HAL_UART_MspInit+0x1dc>)
 8000df6:	2232      	movs	r2, #50	@ 0x32
 8000df8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dfa:	4b47      	ldr	r3, [pc, #284]	@ (8000f18 <HAL_UART_MspInit+0x1dc>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e00:	4b45      	ldr	r3, [pc, #276]	@ (8000f18 <HAL_UART_MspInit+0x1dc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e06:	4b44      	ldr	r3, [pc, #272]	@ (8000f18 <HAL_UART_MspInit+0x1dc>)
 8000e08:	2280      	movs	r2, #128	@ 0x80
 8000e0a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e0c:	4b42      	ldr	r3, [pc, #264]	@ (8000f18 <HAL_UART_MspInit+0x1dc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e12:	4b41      	ldr	r3, [pc, #260]	@ (8000f18 <HAL_UART_MspInit+0x1dc>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000e18:	4b3f      	ldr	r3, [pc, #252]	@ (8000f18 <HAL_UART_MspInit+0x1dc>)
 8000e1a:	2220      	movs	r2, #32
 8000e1c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e1e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f18 <HAL_UART_MspInit+0x1dc>)
 8000e20:	2280      	movs	r2, #128	@ 0x80
 8000e22:	0152      	lsls	r2, r2, #5
 8000e24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e26:	4b3c      	ldr	r3, [pc, #240]	@ (8000f18 <HAL_UART_MspInit+0x1dc>)
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f000 fa53 	bl	80012d4 <HAL_DMA_Init>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8000e32:	f7ff febd 	bl	8000bb0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2180      	movs	r1, #128	@ 0x80
 8000e3a:	4a37      	ldr	r2, [pc, #220]	@ (8000f18 <HAL_UART_MspInit+0x1dc>)
 8000e3c:	505a      	str	r2, [r3, r1]
 8000e3e:	4b36      	ldr	r3, [pc, #216]	@ (8000f18 <HAL_UART_MspInit+0x1dc>)
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e44:	e05f      	b.n	8000f06 <HAL_UART_MspInit+0x1ca>
  else if(huart->Instance==USART2)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a35      	ldr	r2, [pc, #212]	@ (8000f20 <HAL_UART_MspInit+0x1e4>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d15a      	bne.n	8000f06 <HAL_UART_MspInit+0x1ca>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e50:	4b30      	ldr	r3, [pc, #192]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000e52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e54:	4b2f      	ldr	r3, [pc, #188]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000e56:	2180      	movs	r1, #128	@ 0x80
 8000e58:	0289      	lsls	r1, r1, #10
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000e60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e62:	2380      	movs	r3, #128	@ 0x80
 8000e64:	029b      	lsls	r3, r3, #10
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6c:	4b29      	ldr	r3, [pc, #164]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000e6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e70:	4b28      	ldr	r3, [pc, #160]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000e72:	2101      	movs	r1, #1
 8000e74:	430a      	orrs	r2, r1
 8000e76:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e78:	4b26      	ldr	r3, [pc, #152]	@ (8000f14 <HAL_UART_MspInit+0x1d8>)
 8000e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4013      	ands	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000e84:	2134      	movs	r1, #52	@ 0x34
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	4a26      	ldr	r2, [pc, #152]	@ (8000f24 <HAL_UART_MspInit+0x1e8>)
 8000e8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	2202      	movs	r2, #2
 8000e90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	187a      	adds	r2, r7, r1
 8000ea6:	23a0      	movs	r3, #160	@ 0xa0
 8000ea8:	05db      	lsls	r3, r3, #23
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f000 fc63 	bl	8001778 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <HAL_UART_MspInit+0x1ec>)
 8000eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f2c <HAL_UART_MspInit+0x1f0>)
 8000eb6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f28 <HAL_UART_MspInit+0x1ec>)
 8000eba:	2234      	movs	r2, #52	@ 0x34
 8000ebc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <HAL_UART_MspInit+0x1ec>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	@ (8000f28 <HAL_UART_MspInit+0x1ec>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eca:	4b17      	ldr	r3, [pc, #92]	@ (8000f28 <HAL_UART_MspInit+0x1ec>)
 8000ecc:	2280      	movs	r2, #128	@ 0x80
 8000ece:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <HAL_UART_MspInit+0x1ec>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <HAL_UART_MspInit+0x1ec>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <HAL_UART_MspInit+0x1ec>)
 8000ede:	2220      	movs	r2, #32
 8000ee0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <HAL_UART_MspInit+0x1ec>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <HAL_UART_MspInit+0x1ec>)
 8000eea:	0018      	movs	r0, r3
 8000eec:	f000 f9f2 	bl	80012d4 <HAL_DMA_Init>
 8000ef0:	1e03      	subs	r3, r0, #0
 8000ef2:	d001      	beq.n	8000ef8 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 8000ef4:	f7ff fe5c 	bl	8000bb0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2180      	movs	r1, #128	@ 0x80
 8000efc:	4a0a      	ldr	r2, [pc, #40]	@ (8000f28 <HAL_UART_MspInit+0x1ec>)
 8000efe:	505a      	str	r2, [r3, r1]
 8000f00:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <HAL_UART_MspInit+0x1ec>)
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f06:	46c0      	nop			@ (mov r8, r8)
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b013      	add	sp, #76	@ 0x4c
 8000f0c:	bd90      	pop	{r4, r7, pc}
 8000f0e:	46c0      	nop			@ (mov r8, r8)
 8000f10:	40013800 	.word	0x40013800
 8000f14:	40021000 	.word	0x40021000
 8000f18:	200001ec 	.word	0x200001ec
 8000f1c:	4002001c 	.word	0x4002001c
 8000f20:	40004400 	.word	0x40004400
 8000f24:	00008004 	.word	0x00008004
 8000f28:	20000248 	.word	0x20000248
 8000f2c:	40020008 	.word	0x40020008

08000f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f34:	46c0      	nop			@ (mov r8, r8)
 8000f36:	e7fd      	b.n	8000f34 <NMI_Handler+0x4>

08000f38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3c:	46c0      	nop			@ (mov r8, r8)
 8000f3e:	e7fd      	b.n	8000f3c <HardFault_Handler+0x4>

08000f40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f44:	46c0      	nop			@ (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4e:	46c0      	nop			@ (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f58:	f000 f8c2 	bl	80010e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5c:	46c0      	nop			@ (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f68:	4b03      	ldr	r3, [pc, #12]	@ (8000f78 <DMA1_Channel1_IRQHandler+0x14>)
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f000 fac2 	bl	80014f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f70:	46c0      	nop			@ (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	46c0      	nop			@ (mov r8, r8)
 8000f78:	20000248 	.word	0x20000248

08000f7c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f80:	4b03      	ldr	r3, [pc, #12]	@ (8000f90 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000f82:	0018      	movs	r0, r3
 8000f84:	f000 fab6 	bl	80014f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000f88:	46c0      	nop			@ (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			@ (mov r8, r8)
 8000f90:	200001ec 	.word	0x200001ec

08000f94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f98:	4b03      	ldr	r3, [pc, #12]	@ (8000fa8 <TIM3_IRQHandler+0x14>)
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f001 fdae 	bl	8002afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fa0:	46c0      	nop			@ (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	2000002c 	.word	0x2000002c

08000fac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb0:	46c0      	nop			@ (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fb8:	480d      	ldr	r0, [pc, #52]	@ (8000ff0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fbc:	f7ff fff6 	bl	8000fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc0:	480c      	ldr	r0, [pc, #48]	@ (8000ff4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fc2:	490d      	ldr	r1, [pc, #52]	@ (8000ff8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ffc <LoopForever+0xe>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001004 <LoopForever+0x16>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fe6:	f003 fda1 	bl	8004b2c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fea:	f7ff fa15 	bl	8000418 <main>

08000fee <LoopForever>:

LoopForever:
  b LoopForever
 8000fee:	e7fe      	b.n	8000fee <LoopForever>
  ldr   r0, =_estack
 8000ff0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ffc:	08004c70 	.word	0x08004c70
  ldr r2, =_sbss
 8001000:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001004:	2000037c 	.word	0x2000037c

08001008 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC1_IRQHandler>
	...

0800100c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001018:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <HAL_Init+0x3c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <HAL_Init+0x3c>)
 800101e:	2180      	movs	r1, #128	@ 0x80
 8001020:	0049      	lsls	r1, r1, #1
 8001022:	430a      	orrs	r2, r1
 8001024:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001026:	2003      	movs	r0, #3
 8001028:	f000 f810 	bl	800104c <HAL_InitTick>
 800102c:	1e03      	subs	r3, r0, #0
 800102e:	d003      	beq.n	8001038 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001030:	1dfb      	adds	r3, r7, #7
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
 8001036:	e001      	b.n	800103c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001038:	f7ff fdc0 	bl	8000bbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800103c:	1dfb      	adds	r3, r7, #7
 800103e:	781b      	ldrb	r3, [r3, #0]
}
 8001040:	0018      	movs	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	b002      	add	sp, #8
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40022000 	.word	0x40022000

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001054:	230f      	movs	r3, #15
 8001056:	18fb      	adds	r3, r7, r3
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800105c:	4b1d      	ldr	r3, [pc, #116]	@ (80010d4 <HAL_InitTick+0x88>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d02b      	beq.n	80010bc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001064:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <HAL_InitTick+0x8c>)
 8001066:	681c      	ldr	r4, [r3, #0]
 8001068:	4b1a      	ldr	r3, [pc, #104]	@ (80010d4 <HAL_InitTick+0x88>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	0019      	movs	r1, r3
 800106e:	23fa      	movs	r3, #250	@ 0xfa
 8001070:	0098      	lsls	r0, r3, #2
 8001072:	f7ff f845 	bl	8000100 <__udivsi3>
 8001076:	0003      	movs	r3, r0
 8001078:	0019      	movs	r1, r3
 800107a:	0020      	movs	r0, r4
 800107c:	f7ff f840 	bl	8000100 <__udivsi3>
 8001080:	0003      	movs	r3, r0
 8001082:	0018      	movs	r0, r3
 8001084:	f000 f919 	bl	80012ba <HAL_SYSTICK_Config>
 8001088:	1e03      	subs	r3, r0, #0
 800108a:	d112      	bne.n	80010b2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b03      	cmp	r3, #3
 8001090:	d80a      	bhi.n	80010a8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	2301      	movs	r3, #1
 8001096:	425b      	negs	r3, r3
 8001098:	2200      	movs	r2, #0
 800109a:	0018      	movs	r0, r3
 800109c:	f000 f8e8 	bl	8001270 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010a0:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <HAL_InitTick+0x90>)
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	e00d      	b.n	80010c4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010a8:	230f      	movs	r3, #15
 80010aa:	18fb      	adds	r3, r7, r3
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
 80010b0:	e008      	b.n	80010c4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010b2:	230f      	movs	r3, #15
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
 80010ba:	e003      	b.n	80010c4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010bc:	230f      	movs	r3, #15
 80010be:	18fb      	adds	r3, r7, r3
 80010c0:	2201      	movs	r2, #1
 80010c2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80010c4:	230f      	movs	r3, #15
 80010c6:	18fb      	adds	r3, r7, r3
 80010c8:	781b      	ldrb	r3, [r3, #0]
}
 80010ca:	0018      	movs	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b005      	add	sp, #20
 80010d0:	bd90      	pop	{r4, r7, pc}
 80010d2:	46c0      	nop			@ (mov r8, r8)
 80010d4:	2000000c 	.word	0x2000000c
 80010d8:	20000004 	.word	0x20000004
 80010dc:	20000008 	.word	0x20000008

080010e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <HAL_IncTick+0x1c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	001a      	movs	r2, r3
 80010ea:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <HAL_IncTick+0x20>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	18d2      	adds	r2, r2, r3
 80010f0:	4b03      	ldr	r3, [pc, #12]	@ (8001100 <HAL_IncTick+0x20>)
 80010f2:	601a      	str	r2, [r3, #0]
}
 80010f4:	46c0      	nop			@ (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	46c0      	nop			@ (mov r8, r8)
 80010fc:	2000000c 	.word	0x2000000c
 8001100:	20000378 	.word	0x20000378

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b02      	ldr	r3, [pc, #8]	@ (8001114 <HAL_GetTick+0x10>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	0018      	movs	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	20000378 	.word	0x20000378

08001118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	0002      	movs	r2, r0
 8001120:	1dfb      	adds	r3, r7, #7
 8001122:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001124:	1dfb      	adds	r3, r7, #7
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b7f      	cmp	r3, #127	@ 0x7f
 800112a:	d809      	bhi.n	8001140 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112c:	1dfb      	adds	r3, r7, #7
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	001a      	movs	r2, r3
 8001132:	231f      	movs	r3, #31
 8001134:	401a      	ands	r2, r3
 8001136:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <__NVIC_EnableIRQ+0x30>)
 8001138:	2101      	movs	r1, #1
 800113a:	4091      	lsls	r1, r2
 800113c:	000a      	movs	r2, r1
 800113e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001140:	46c0      	nop			@ (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	b002      	add	sp, #8
 8001146:	bd80      	pop	{r7, pc}
 8001148:	e000e100 	.word	0xe000e100

0800114c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	0002      	movs	r2, r0
 8001154:	6039      	str	r1, [r7, #0]
 8001156:	1dfb      	adds	r3, r7, #7
 8001158:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001160:	d828      	bhi.n	80011b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001162:	4a2f      	ldr	r2, [pc, #188]	@ (8001220 <__NVIC_SetPriority+0xd4>)
 8001164:	1dfb      	adds	r3, r7, #7
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	b25b      	sxtb	r3, r3
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	33c0      	adds	r3, #192	@ 0xc0
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	589b      	ldr	r3, [r3, r2]
 8001172:	1dfa      	adds	r2, r7, #7
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	0011      	movs	r1, r2
 8001178:	2203      	movs	r2, #3
 800117a:	400a      	ands	r2, r1
 800117c:	00d2      	lsls	r2, r2, #3
 800117e:	21ff      	movs	r1, #255	@ 0xff
 8001180:	4091      	lsls	r1, r2
 8001182:	000a      	movs	r2, r1
 8001184:	43d2      	mvns	r2, r2
 8001186:	401a      	ands	r2, r3
 8001188:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	019b      	lsls	r3, r3, #6
 800118e:	22ff      	movs	r2, #255	@ 0xff
 8001190:	401a      	ands	r2, r3
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	0018      	movs	r0, r3
 8001198:	2303      	movs	r3, #3
 800119a:	4003      	ands	r3, r0
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011a0:	481f      	ldr	r0, [pc, #124]	@ (8001220 <__NVIC_SetPriority+0xd4>)
 80011a2:	1dfb      	adds	r3, r7, #7
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	430a      	orrs	r2, r1
 80011ac:	33c0      	adds	r3, #192	@ 0xc0
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011b2:	e031      	b.n	8001218 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001224 <__NVIC_SetPriority+0xd8>)
 80011b6:	1dfb      	adds	r3, r7, #7
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	0019      	movs	r1, r3
 80011bc:	230f      	movs	r3, #15
 80011be:	400b      	ands	r3, r1
 80011c0:	3b08      	subs	r3, #8
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	3306      	adds	r3, #6
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	18d3      	adds	r3, r2, r3
 80011ca:	3304      	adds	r3, #4
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	1dfa      	adds	r2, r7, #7
 80011d0:	7812      	ldrb	r2, [r2, #0]
 80011d2:	0011      	movs	r1, r2
 80011d4:	2203      	movs	r2, #3
 80011d6:	400a      	ands	r2, r1
 80011d8:	00d2      	lsls	r2, r2, #3
 80011da:	21ff      	movs	r1, #255	@ 0xff
 80011dc:	4091      	lsls	r1, r2
 80011de:	000a      	movs	r2, r1
 80011e0:	43d2      	mvns	r2, r2
 80011e2:	401a      	ands	r2, r3
 80011e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	019b      	lsls	r3, r3, #6
 80011ea:	22ff      	movs	r2, #255	@ 0xff
 80011ec:	401a      	ands	r2, r3
 80011ee:	1dfb      	adds	r3, r7, #7
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	0018      	movs	r0, r3
 80011f4:	2303      	movs	r3, #3
 80011f6:	4003      	ands	r3, r0
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011fc:	4809      	ldr	r0, [pc, #36]	@ (8001224 <__NVIC_SetPriority+0xd8>)
 80011fe:	1dfb      	adds	r3, r7, #7
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	001c      	movs	r4, r3
 8001204:	230f      	movs	r3, #15
 8001206:	4023      	ands	r3, r4
 8001208:	3b08      	subs	r3, #8
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	430a      	orrs	r2, r1
 800120e:	3306      	adds	r3, #6
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	18c3      	adds	r3, r0, r3
 8001214:	3304      	adds	r3, #4
 8001216:	601a      	str	r2, [r3, #0]
}
 8001218:	46c0      	nop			@ (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b003      	add	sp, #12
 800121e:	bd90      	pop	{r4, r7, pc}
 8001220:	e000e100 	.word	0xe000e100
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	1e5a      	subs	r2, r3, #1
 8001234:	2380      	movs	r3, #128	@ 0x80
 8001236:	045b      	lsls	r3, r3, #17
 8001238:	429a      	cmp	r2, r3
 800123a:	d301      	bcc.n	8001240 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123c:	2301      	movs	r3, #1
 800123e:	e010      	b.n	8001262 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001240:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <SysTick_Config+0x44>)
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	3a01      	subs	r2, #1
 8001246:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001248:	2301      	movs	r3, #1
 800124a:	425b      	negs	r3, r3
 800124c:	2103      	movs	r1, #3
 800124e:	0018      	movs	r0, r3
 8001250:	f7ff ff7c 	bl	800114c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001254:	4b05      	ldr	r3, [pc, #20]	@ (800126c <SysTick_Config+0x44>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125a:	4b04      	ldr	r3, [pc, #16]	@ (800126c <SysTick_Config+0x44>)
 800125c:	2207      	movs	r2, #7
 800125e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001260:	2300      	movs	r3, #0
}
 8001262:	0018      	movs	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	b002      	add	sp, #8
 8001268:	bd80      	pop	{r7, pc}
 800126a:	46c0      	nop			@ (mov r8, r8)
 800126c:	e000e010 	.word	0xe000e010

08001270 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	210f      	movs	r1, #15
 800127c:	187b      	adds	r3, r7, r1
 800127e:	1c02      	adds	r2, r0, #0
 8001280:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	187b      	adds	r3, r7, r1
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b25b      	sxtb	r3, r3
 800128a:	0011      	movs	r1, r2
 800128c:	0018      	movs	r0, r3
 800128e:	f7ff ff5d 	bl	800114c <__NVIC_SetPriority>
}
 8001292:	46c0      	nop			@ (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	b004      	add	sp, #16
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	0002      	movs	r2, r0
 80012a2:	1dfb      	adds	r3, r7, #7
 80012a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	b25b      	sxtb	r3, r3
 80012ac:	0018      	movs	r0, r3
 80012ae:	f7ff ff33 	bl	8001118 <__NVIC_EnableIRQ>
}
 80012b2:	46c0      	nop			@ (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b002      	add	sp, #8
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	0018      	movs	r0, r3
 80012c6:	f7ff ffaf 	bl	8001228 <SysTick_Config>
 80012ca:	0003      	movs	r3, r0
}
 80012cc:	0018      	movs	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b002      	add	sp, #8
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e077      	b.n	80013d6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a3d      	ldr	r2, [pc, #244]	@ (80013e0 <HAL_DMA_Init+0x10c>)
 80012ec:	4694      	mov	ip, r2
 80012ee:	4463      	add	r3, ip
 80012f0:	2114      	movs	r1, #20
 80012f2:	0018      	movs	r0, r3
 80012f4:	f7fe ff04 	bl	8000100 <__udivsi3>
 80012f8:	0003      	movs	r3, r0
 80012fa:	009a      	lsls	r2, r3, #2
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2225      	movs	r2, #37	@ 0x25
 8001304:	2102      	movs	r1, #2
 8001306:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4934      	ldr	r1, [pc, #208]	@ (80013e4 <HAL_DMA_Init+0x110>)
 8001314:	400a      	ands	r2, r1
 8001316:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6819      	ldr	r1, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	431a      	orrs	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	431a      	orrs	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	431a      	orrs	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	0018      	movs	r0, r3
 8001352:	f000 f9c1 	bl	80016d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	2380      	movs	r3, #128	@ 0x80
 800135c:	01db      	lsls	r3, r3, #7
 800135e:	429a      	cmp	r2, r3
 8001360:	d102      	bne.n	8001368 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001370:	213f      	movs	r1, #63	@ 0x3f
 8001372:	400a      	ands	r2, r1
 8001374:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800137e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d011      	beq.n	80013ac <HAL_DMA_Init+0xd8>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b04      	cmp	r3, #4
 800138e:	d80d      	bhi.n	80013ac <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	0018      	movs	r0, r3
 8001394:	f000 f9cc 	bl	8001730 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	e008      	b.n	80013be <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2225      	movs	r2, #37	@ 0x25
 80013c8:	2101      	movs	r1, #1
 80013ca:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2224      	movs	r2, #36	@ 0x24
 80013d0:	2100      	movs	r1, #0
 80013d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	0018      	movs	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	b002      	add	sp, #8
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	46c0      	nop			@ (mov r8, r8)
 80013e0:	bffdfff8 	.word	0xbffdfff8
 80013e4:	ffff800f 	.word	0xffff800f

080013e8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013f6:	2317      	movs	r3, #23
 80013f8:	18fb      	adds	r3, r7, r3
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2224      	movs	r2, #36	@ 0x24
 8001402:	5c9b      	ldrb	r3, [r3, r2]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d101      	bne.n	800140c <HAL_DMA_Start_IT+0x24>
 8001408:	2302      	movs	r3, #2
 800140a:	e06f      	b.n	80014ec <HAL_DMA_Start_IT+0x104>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2224      	movs	r2, #36	@ 0x24
 8001410:	2101      	movs	r1, #1
 8001412:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2225      	movs	r2, #37	@ 0x25
 8001418:	5c9b      	ldrb	r3, [r3, r2]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b01      	cmp	r3, #1
 800141e:	d157      	bne.n	80014d0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2225      	movs	r2, #37	@ 0x25
 8001424:	2102      	movs	r1, #2
 8001426:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2200      	movs	r2, #0
 800142c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2101      	movs	r1, #1
 800143a:	438a      	bics	r2, r1
 800143c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	68b9      	ldr	r1, [r7, #8]
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f000 f907 	bl	8001658 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	2b00      	cmp	r3, #0
 8001450:	d008      	beq.n	8001464 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	210e      	movs	r1, #14
 800145e:	430a      	orrs	r2, r1
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	e00f      	b.n	8001484 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2104      	movs	r1, #4
 8001470:	438a      	bics	r2, r1
 8001472:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	210a      	movs	r1, #10
 8001480:	430a      	orrs	r2, r1
 8001482:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	2380      	movs	r3, #128	@ 0x80
 800148c:	025b      	lsls	r3, r3, #9
 800148e:	4013      	ands	r3, r2
 8001490:	d008      	beq.n	80014a4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149c:	2180      	movs	r1, #128	@ 0x80
 800149e:	0049      	lsls	r1, r1, #1
 80014a0:	430a      	orrs	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d008      	beq.n	80014be <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014b6:	2180      	movs	r1, #128	@ 0x80
 80014b8:	0049      	lsls	r1, r1, #1
 80014ba:	430a      	orrs	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2101      	movs	r1, #1
 80014ca:	430a      	orrs	r2, r1
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	e00a      	b.n	80014e6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2280      	movs	r2, #128	@ 0x80
 80014d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2224      	movs	r2, #36	@ 0x24
 80014da:	2100      	movs	r1, #0
 80014dc:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80014de:	2317      	movs	r3, #23
 80014e0:	18fb      	adds	r3, r7, r3
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80014e6:	2317      	movs	r3, #23
 80014e8:	18fb      	adds	r3, r7, r3
 80014ea:	781b      	ldrb	r3, [r3, #0]
}
 80014ec:	0018      	movs	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b006      	add	sp, #24
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80014fc:	4b55      	ldr	r3, [pc, #340]	@ (8001654 <HAL_DMA_IRQHandler+0x160>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	221c      	movs	r2, #28
 8001510:	4013      	ands	r3, r2
 8001512:	2204      	movs	r2, #4
 8001514:	409a      	lsls	r2, r3
 8001516:	0013      	movs	r3, r2
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	4013      	ands	r3, r2
 800151c:	d027      	beq.n	800156e <HAL_DMA_IRQHandler+0x7a>
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	2204      	movs	r2, #4
 8001522:	4013      	ands	r3, r2
 8001524:	d023      	beq.n	800156e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2220      	movs	r2, #32
 800152e:	4013      	ands	r3, r2
 8001530:	d107      	bne.n	8001542 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2104      	movs	r1, #4
 800153e:	438a      	bics	r2, r1
 8001540:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001542:	4b44      	ldr	r3, [pc, #272]	@ (8001654 <HAL_DMA_IRQHandler+0x160>)
 8001544:	6859      	ldr	r1, [r3, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	221c      	movs	r2, #28
 800154c:	4013      	ands	r3, r2
 800154e:	2204      	movs	r2, #4
 8001550:	409a      	lsls	r2, r3
 8001552:	4b40      	ldr	r3, [pc, #256]	@ (8001654 <HAL_DMA_IRQHandler+0x160>)
 8001554:	430a      	orrs	r2, r1
 8001556:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155c:	2b00      	cmp	r3, #0
 800155e:	d100      	bne.n	8001562 <HAL_DMA_IRQHandler+0x6e>
 8001560:	e073      	b.n	800164a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	0010      	movs	r0, r2
 800156a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800156c:	e06d      	b.n	800164a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	221c      	movs	r2, #28
 8001574:	4013      	ands	r3, r2
 8001576:	2202      	movs	r2, #2
 8001578:	409a      	lsls	r2, r3
 800157a:	0013      	movs	r3, r2
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4013      	ands	r3, r2
 8001580:	d02e      	beq.n	80015e0 <HAL_DMA_IRQHandler+0xec>
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	2202      	movs	r2, #2
 8001586:	4013      	ands	r3, r2
 8001588:	d02a      	beq.n	80015e0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2220      	movs	r2, #32
 8001592:	4013      	ands	r3, r2
 8001594:	d10b      	bne.n	80015ae <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	210a      	movs	r1, #10
 80015a2:	438a      	bics	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2225      	movs	r2, #37	@ 0x25
 80015aa:	2101      	movs	r1, #1
 80015ac:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80015ae:	4b29      	ldr	r3, [pc, #164]	@ (8001654 <HAL_DMA_IRQHandler+0x160>)
 80015b0:	6859      	ldr	r1, [r3, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	221c      	movs	r2, #28
 80015b8:	4013      	ands	r3, r2
 80015ba:	2202      	movs	r2, #2
 80015bc:	409a      	lsls	r2, r3
 80015be:	4b25      	ldr	r3, [pc, #148]	@ (8001654 <HAL_DMA_IRQHandler+0x160>)
 80015c0:	430a      	orrs	r2, r1
 80015c2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2224      	movs	r2, #36	@ 0x24
 80015c8:	2100      	movs	r1, #0
 80015ca:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d03a      	beq.n	800164a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	0010      	movs	r0, r2
 80015dc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80015de:	e034      	b.n	800164a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e4:	221c      	movs	r2, #28
 80015e6:	4013      	ands	r3, r2
 80015e8:	2208      	movs	r2, #8
 80015ea:	409a      	lsls	r2, r3
 80015ec:	0013      	movs	r3, r2
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4013      	ands	r3, r2
 80015f2:	d02b      	beq.n	800164c <HAL_DMA_IRQHandler+0x158>
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	2208      	movs	r2, #8
 80015f8:	4013      	ands	r3, r2
 80015fa:	d027      	beq.n	800164c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	210e      	movs	r1, #14
 8001608:	438a      	bics	r2, r1
 800160a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800160c:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <HAL_DMA_IRQHandler+0x160>)
 800160e:	6859      	ldr	r1, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001614:	221c      	movs	r2, #28
 8001616:	4013      	ands	r3, r2
 8001618:	2201      	movs	r2, #1
 800161a:	409a      	lsls	r2, r3
 800161c:	4b0d      	ldr	r3, [pc, #52]	@ (8001654 <HAL_DMA_IRQHandler+0x160>)
 800161e:	430a      	orrs	r2, r1
 8001620:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2225      	movs	r2, #37	@ 0x25
 800162c:	2101      	movs	r1, #1
 800162e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2224      	movs	r2, #36	@ 0x24
 8001634:	2100      	movs	r1, #0
 8001636:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	0010      	movs	r0, r2
 8001648:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800164a:	46c0      	nop			@ (mov r8, r8)
 800164c:	46c0      	nop			@ (mov r8, r8)
}
 800164e:	46bd      	mov	sp, r7
 8001650:	b004      	add	sp, #16
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40020000 	.word	0x40020000

08001658 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800166e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001674:	2b00      	cmp	r3, #0
 8001676:	d004      	beq.n	8001682 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001680:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001682:	4b14      	ldr	r3, [pc, #80]	@ (80016d4 <DMA_SetConfig+0x7c>)
 8001684:	6859      	ldr	r1, [r3, #4]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	221c      	movs	r2, #28
 800168c:	4013      	ands	r3, r2
 800168e:	2201      	movs	r2, #1
 8001690:	409a      	lsls	r2, r3
 8001692:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <DMA_SetConfig+0x7c>)
 8001694:	430a      	orrs	r2, r1
 8001696:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b10      	cmp	r3, #16
 80016a6:	d108      	bne.n	80016ba <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016b8:	e007      	b.n	80016ca <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	60da      	str	r2, [r3, #12]
}
 80016ca:	46c0      	nop			@ (mov r8, r8)
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b004      	add	sp, #16
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	46c0      	nop			@ (mov r8, r8)
 80016d4:	40020000 	.word	0x40020000

080016d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e4:	089b      	lsrs	r3, r3, #2
 80016e6:	4a10      	ldr	r2, [pc, #64]	@ (8001728 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80016e8:	4694      	mov	ip, r2
 80016ea:	4463      	add	r3, ip
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	001a      	movs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	001a      	movs	r2, r3
 80016fa:	23ff      	movs	r3, #255	@ 0xff
 80016fc:	4013      	ands	r3, r2
 80016fe:	3b08      	subs	r3, #8
 8001700:	2114      	movs	r1, #20
 8001702:	0018      	movs	r0, r3
 8001704:	f7fe fcfc 	bl	8000100 <__udivsi3>
 8001708:	0003      	movs	r3, r0
 800170a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a07      	ldr	r2, [pc, #28]	@ (800172c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001710:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	221f      	movs	r2, #31
 8001716:	4013      	ands	r3, r2
 8001718:	2201      	movs	r2, #1
 800171a:	409a      	lsls	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001720:	46c0      	nop			@ (mov r8, r8)
 8001722:	46bd      	mov	sp, r7
 8001724:	b004      	add	sp, #16
 8001726:	bd80      	pop	{r7, pc}
 8001728:	10008200 	.word	0x10008200
 800172c:	40020880 	.word	0x40020880

08001730 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	223f      	movs	r2, #63	@ 0x3f
 800173e:	4013      	ands	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001746:	4694      	mov	ip, r2
 8001748:	4463      	add	r3, ip
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	001a      	movs	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a07      	ldr	r2, [pc, #28]	@ (8001774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001756:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	3b01      	subs	r3, #1
 800175c:	2203      	movs	r2, #3
 800175e:	4013      	ands	r3, r2
 8001760:	2201      	movs	r2, #1
 8001762:	409a      	lsls	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001768:	46c0      	nop			@ (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	b004      	add	sp, #16
 800176e:	bd80      	pop	{r7, pc}
 8001770:	1000823f 	.word	0x1000823f
 8001774:	40020940 	.word	0x40020940

08001778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001786:	e147      	b.n	8001a18 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2101      	movs	r1, #1
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4091      	lsls	r1, r2
 8001792:	000a      	movs	r2, r1
 8001794:	4013      	ands	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d100      	bne.n	80017a0 <HAL_GPIO_Init+0x28>
 800179e:	e138      	b.n	8001a12 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2203      	movs	r2, #3
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d005      	beq.n	80017b8 <HAL_GPIO_Init+0x40>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2203      	movs	r2, #3
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d130      	bne.n	800181a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	2203      	movs	r2, #3
 80017c4:	409a      	lsls	r2, r3
 80017c6:	0013      	movs	r3, r2
 80017c8:	43da      	mvns	r2, r3
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4013      	ands	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	409a      	lsls	r2, r3
 80017da:	0013      	movs	r3, r2
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017ee:	2201      	movs	r2, #1
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	409a      	lsls	r2, r3
 80017f4:	0013      	movs	r3, r2
 80017f6:	43da      	mvns	r2, r3
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	091b      	lsrs	r3, r3, #4
 8001804:	2201      	movs	r2, #1
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
 800180c:	0013      	movs	r3, r2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2203      	movs	r2, #3
 8001820:	4013      	ands	r3, r2
 8001822:	2b03      	cmp	r3, #3
 8001824:	d017      	beq.n	8001856 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	409a      	lsls	r2, r3
 8001834:	0013      	movs	r3, r2
 8001836:	43da      	mvns	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	409a      	lsls	r2, r3
 8001848:	0013      	movs	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2203      	movs	r2, #3
 800185c:	4013      	ands	r3, r2
 800185e:	2b02      	cmp	r3, #2
 8001860:	d123      	bne.n	80018aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	08da      	lsrs	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3208      	adds	r2, #8
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	58d3      	ldr	r3, [r2, r3]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2207      	movs	r2, #7
 8001874:	4013      	ands	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	220f      	movs	r2, #15
 800187a:	409a      	lsls	r2, r3
 800187c:	0013      	movs	r3, r2
 800187e:	43da      	mvns	r2, r3
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	691a      	ldr	r2, [r3, #16]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2107      	movs	r1, #7
 800188e:	400b      	ands	r3, r1
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	409a      	lsls	r2, r3
 8001894:	0013      	movs	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	08da      	lsrs	r2, r3, #3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3208      	adds	r2, #8
 80018a4:	0092      	lsls	r2, r2, #2
 80018a6:	6939      	ldr	r1, [r7, #16]
 80018a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	409a      	lsls	r2, r3
 80018b8:	0013      	movs	r3, r2
 80018ba:	43da      	mvns	r2, r3
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2203      	movs	r2, #3
 80018c8:	401a      	ands	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	409a      	lsls	r2, r3
 80018d0:	0013      	movs	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	23c0      	movs	r3, #192	@ 0xc0
 80018e4:	029b      	lsls	r3, r3, #10
 80018e6:	4013      	ands	r3, r2
 80018e8:	d100      	bne.n	80018ec <HAL_GPIO_Init+0x174>
 80018ea:	e092      	b.n	8001a12 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80018ec:	4a50      	ldr	r2, [pc, #320]	@ (8001a30 <HAL_GPIO_Init+0x2b8>)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	089b      	lsrs	r3, r3, #2
 80018f2:	3318      	adds	r3, #24
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	589b      	ldr	r3, [r3, r2]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2203      	movs	r2, #3
 80018fe:	4013      	ands	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	220f      	movs	r2, #15
 8001904:	409a      	lsls	r2, r3
 8001906:	0013      	movs	r3, r2
 8001908:	43da      	mvns	r2, r3
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	23a0      	movs	r3, #160	@ 0xa0
 8001914:	05db      	lsls	r3, r3, #23
 8001916:	429a      	cmp	r2, r3
 8001918:	d013      	beq.n	8001942 <HAL_GPIO_Init+0x1ca>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a45      	ldr	r2, [pc, #276]	@ (8001a34 <HAL_GPIO_Init+0x2bc>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d00d      	beq.n	800193e <HAL_GPIO_Init+0x1c6>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a44      	ldr	r2, [pc, #272]	@ (8001a38 <HAL_GPIO_Init+0x2c0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d007      	beq.n	800193a <HAL_GPIO_Init+0x1c2>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a43      	ldr	r2, [pc, #268]	@ (8001a3c <HAL_GPIO_Init+0x2c4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d101      	bne.n	8001936 <HAL_GPIO_Init+0x1be>
 8001932:	2303      	movs	r3, #3
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x1cc>
 8001936:	2305      	movs	r3, #5
 8001938:	e004      	b.n	8001944 <HAL_GPIO_Init+0x1cc>
 800193a:	2302      	movs	r3, #2
 800193c:	e002      	b.n	8001944 <HAL_GPIO_Init+0x1cc>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <HAL_GPIO_Init+0x1cc>
 8001942:	2300      	movs	r3, #0
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	2103      	movs	r1, #3
 8001948:	400a      	ands	r2, r1
 800194a:	00d2      	lsls	r2, r2, #3
 800194c:	4093      	lsls	r3, r2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001954:	4936      	ldr	r1, [pc, #216]	@ (8001a30 <HAL_GPIO_Init+0x2b8>)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	3318      	adds	r3, #24
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001962:	4b33      	ldr	r3, [pc, #204]	@ (8001a30 <HAL_GPIO_Init+0x2b8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	43da      	mvns	r2, r3
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	2380      	movs	r3, #128	@ 0x80
 8001978:	035b      	lsls	r3, r3, #13
 800197a:	4013      	ands	r3, r2
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001986:	4b2a      	ldr	r3, [pc, #168]	@ (8001a30 <HAL_GPIO_Init+0x2b8>)
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800198c:	4b28      	ldr	r3, [pc, #160]	@ (8001a30 <HAL_GPIO_Init+0x2b8>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	43da      	mvns	r2, r3
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	2380      	movs	r3, #128	@ 0x80
 80019a2:	039b      	lsls	r3, r3, #14
 80019a4:	4013      	ands	r3, r2
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a30 <HAL_GPIO_Init+0x2b8>)
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001a30 <HAL_GPIO_Init+0x2b8>)
 80019b8:	2384      	movs	r3, #132	@ 0x84
 80019ba:	58d3      	ldr	r3, [r2, r3]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	43da      	mvns	r2, r3
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	2380      	movs	r3, #128	@ 0x80
 80019ce:	029b      	lsls	r3, r3, #10
 80019d0:	4013      	ands	r3, r2
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019dc:	4914      	ldr	r1, [pc, #80]	@ (8001a30 <HAL_GPIO_Init+0x2b8>)
 80019de:	2284      	movs	r2, #132	@ 0x84
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80019e4:	4a12      	ldr	r2, [pc, #72]	@ (8001a30 <HAL_GPIO_Init+0x2b8>)
 80019e6:	2380      	movs	r3, #128	@ 0x80
 80019e8:	58d3      	ldr	r3, [r2, r3]
 80019ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	43da      	mvns	r2, r3
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	2380      	movs	r3, #128	@ 0x80
 80019fc:	025b      	lsls	r3, r3, #9
 80019fe:	4013      	ands	r3, r2
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a0a:	4909      	ldr	r1, [pc, #36]	@ (8001a30 <HAL_GPIO_Init+0x2b8>)
 8001a0c:	2280      	movs	r2, #128	@ 0x80
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3301      	adds	r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	40da      	lsrs	r2, r3
 8001a20:	1e13      	subs	r3, r2, #0
 8001a22:	d000      	beq.n	8001a26 <HAL_GPIO_Init+0x2ae>
 8001a24:	e6b0      	b.n	8001788 <HAL_GPIO_Init+0x10>
  }
}
 8001a26:	46c0      	nop			@ (mov r8, r8)
 8001a28:	46c0      	nop			@ (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b006      	add	sp, #24
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40021800 	.word	0x40021800
 8001a34:	50000400 	.word	0x50000400
 8001a38:	50000800 	.word	0x50000800
 8001a3c:	50000c00 	.word	0x50000c00

08001a40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	000a      	movs	r2, r1
 8001a4a:	1cbb      	adds	r3, r7, #2
 8001a4c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	1cba      	adds	r2, r7, #2
 8001a54:	8812      	ldrh	r2, [r2, #0]
 8001a56:	4013      	ands	r3, r2
 8001a58:	d004      	beq.n	8001a64 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001a5a:	230f      	movs	r3, #15
 8001a5c:	18fb      	adds	r3, r7, r3
 8001a5e:	2201      	movs	r2, #1
 8001a60:	701a      	strb	r2, [r3, #0]
 8001a62:	e003      	b.n	8001a6c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a64:	230f      	movs	r3, #15
 8001a66:	18fb      	adds	r3, r7, r3
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001a6c:	230f      	movs	r3, #15
 8001a6e:	18fb      	adds	r3, r7, r3
 8001a70:	781b      	ldrb	r3, [r3, #0]
}
 8001a72:	0018      	movs	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b004      	add	sp, #16
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	0008      	movs	r0, r1
 8001a84:	0011      	movs	r1, r2
 8001a86:	1cbb      	adds	r3, r7, #2
 8001a88:	1c02      	adds	r2, r0, #0
 8001a8a:	801a      	strh	r2, [r3, #0]
 8001a8c:	1c7b      	adds	r3, r7, #1
 8001a8e:	1c0a      	adds	r2, r1, #0
 8001a90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a92:	1c7b      	adds	r3, r7, #1
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d004      	beq.n	8001aa4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a9a:	1cbb      	adds	r3, r7, #2
 8001a9c:	881a      	ldrh	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001aa2:	e003      	b.n	8001aac <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aa4:	1cbb      	adds	r3, r7, #2
 8001aa6:	881a      	ldrh	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001aac:	46c0      	nop			@ (mov r8, r8)
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b002      	add	sp, #8
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	000a      	movs	r2, r1
 8001abe:	1cbb      	adds	r3, r7, #2
 8001ac0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ac8:	1cbb      	adds	r3, r7, #2
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	041a      	lsls	r2, r3, #16
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	1cb9      	adds	r1, r7, #2
 8001ad8:	8809      	ldrh	r1, [r1, #0]
 8001ada:	400b      	ands	r3, r1
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	619a      	str	r2, [r3, #24]
}
 8001ae2:	46c0      	nop			@ (mov r8, r8)
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b004      	add	sp, #16
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001af4:	4b19      	ldr	r3, [pc, #100]	@ (8001b5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a19      	ldr	r2, [pc, #100]	@ (8001b60 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	0019      	movs	r1, r3
 8001afe:	4b17      	ldr	r3, [pc, #92]	@ (8001b5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	2380      	movs	r3, #128	@ 0x80
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d11f      	bne.n	8001b50 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001b10:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	0013      	movs	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	189b      	adds	r3, r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4912      	ldr	r1, [pc, #72]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f7fe faee 	bl	8000100 <__udivsi3>
 8001b24:	0003      	movs	r3, r0
 8001b26:	3301      	adds	r3, #1
 8001b28:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b2a:	e008      	b.n	8001b3e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	e001      	b.n	8001b3e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e009      	b.n	8001b52 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b3e:	4b07      	ldr	r3, [pc, #28]	@ (8001b5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b40:	695a      	ldr	r2, [r3, #20]
 8001b42:	2380      	movs	r3, #128	@ 0x80
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	401a      	ands	r2, r3
 8001b48:	2380      	movs	r3, #128	@ 0x80
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d0ed      	beq.n	8001b2c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	0018      	movs	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b004      	add	sp, #16
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			@ (mov r8, r8)
 8001b5c:	40007000 	.word	0x40007000
 8001b60:	fffff9ff 	.word	0xfffff9ff
 8001b64:	20000004 	.word	0x20000004
 8001b68:	000f4240 	.word	0x000f4240

08001b6c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001b70:	4b03      	ldr	r3, [pc, #12]	@ (8001b80 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	23e0      	movs	r3, #224	@ 0xe0
 8001b76:	01db      	lsls	r3, r3, #7
 8001b78:	4013      	ands	r3, r2
}
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40021000 	.word	0x40021000

08001b84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e2f3      	b.n	800217e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d100      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x1e>
 8001ba0:	e07c      	b.n	8001c9c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ba2:	4bc3      	ldr	r3, [pc, #780]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2238      	movs	r2, #56	@ 0x38
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bac:	4bc0      	ldr	r3, [pc, #768]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	2b10      	cmp	r3, #16
 8001bba:	d102      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x3e>
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d002      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d10b      	bne.n	8001be0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc8:	4bb9      	ldr	r3, [pc, #740]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	2380      	movs	r3, #128	@ 0x80
 8001bce:	029b      	lsls	r3, r3, #10
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d062      	beq.n	8001c9a <HAL_RCC_OscConfig+0x116>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d15e      	bne.n	8001c9a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e2ce      	b.n	800217e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	2380      	movs	r3, #128	@ 0x80
 8001be6:	025b      	lsls	r3, r3, #9
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d107      	bne.n	8001bfc <HAL_RCC_OscConfig+0x78>
 8001bec:	4bb0      	ldr	r3, [pc, #704]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4baf      	ldr	r3, [pc, #700]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001bf2:	2180      	movs	r1, #128	@ 0x80
 8001bf4:	0249      	lsls	r1, r1, #9
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	e020      	b.n	8001c3e <HAL_RCC_OscConfig+0xba>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	23a0      	movs	r3, #160	@ 0xa0
 8001c02:	02db      	lsls	r3, r3, #11
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d10e      	bne.n	8001c26 <HAL_RCC_OscConfig+0xa2>
 8001c08:	4ba9      	ldr	r3, [pc, #676]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4ba8      	ldr	r3, [pc, #672]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001c0e:	2180      	movs	r1, #128	@ 0x80
 8001c10:	02c9      	lsls	r1, r1, #11
 8001c12:	430a      	orrs	r2, r1
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	4ba6      	ldr	r3, [pc, #664]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4ba5      	ldr	r3, [pc, #660]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001c1c:	2180      	movs	r1, #128	@ 0x80
 8001c1e:	0249      	lsls	r1, r1, #9
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	e00b      	b.n	8001c3e <HAL_RCC_OscConfig+0xba>
 8001c26:	4ba2      	ldr	r3, [pc, #648]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4ba1      	ldr	r3, [pc, #644]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001c2c:	49a1      	ldr	r1, [pc, #644]	@ (8001eb4 <HAL_RCC_OscConfig+0x330>)
 8001c2e:	400a      	ands	r2, r1
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	4b9f      	ldr	r3, [pc, #636]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	4b9e      	ldr	r3, [pc, #632]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001c38:	499f      	ldr	r1, [pc, #636]	@ (8001eb8 <HAL_RCC_OscConfig+0x334>)
 8001c3a:	400a      	ands	r2, r1
 8001c3c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d014      	beq.n	8001c70 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c46:	f7ff fa5d 	bl	8001104 <HAL_GetTick>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c50:	f7ff fa58 	bl	8001104 <HAL_GetTick>
 8001c54:	0002      	movs	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	@ 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e28d      	b.n	800217e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c62:	4b93      	ldr	r3, [pc, #588]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	2380      	movs	r3, #128	@ 0x80
 8001c68:	029b      	lsls	r3, r3, #10
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0xcc>
 8001c6e:	e015      	b.n	8001c9c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff fa48 	bl	8001104 <HAL_GetTick>
 8001c74:	0003      	movs	r3, r0
 8001c76:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c7a:	f7ff fa43 	bl	8001104 <HAL_GetTick>
 8001c7e:	0002      	movs	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b64      	cmp	r3, #100	@ 0x64
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e278      	b.n	800217e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c8c:	4b88      	ldr	r3, [pc, #544]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2380      	movs	r3, #128	@ 0x80
 8001c92:	029b      	lsls	r3, r3, #10
 8001c94:	4013      	ands	r3, r2
 8001c96:	d1f0      	bne.n	8001c7a <HAL_RCC_OscConfig+0xf6>
 8001c98:	e000      	b.n	8001c9c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c9a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d100      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x124>
 8001ca6:	e099      	b.n	8001ddc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ca8:	4b81      	ldr	r3, [pc, #516]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2238      	movs	r2, #56	@ 0x38
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cb2:	4b7f      	ldr	r3, [pc, #508]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	4013      	ands	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	2b10      	cmp	r3, #16
 8001cc0:	d102      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x144>
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d002      	beq.n	8001cce <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d135      	bne.n	8001d3a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cce:	4b78      	ldr	r3, [pc, #480]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	2380      	movs	r3, #128	@ 0x80
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d005      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x162>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e24b      	b.n	800217e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce6:	4b72      	ldr	r3, [pc, #456]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4a74      	ldr	r2, [pc, #464]	@ (8001ebc <HAL_RCC_OscConfig+0x338>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	0019      	movs	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	021a      	lsls	r2, r3, #8
 8001cf6:	4b6e      	ldr	r3, [pc, #440]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d112      	bne.n	8001d28 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d02:	4b6b      	ldr	r3, [pc, #428]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a6e      	ldr	r2, [pc, #440]	@ (8001ec0 <HAL_RCC_OscConfig+0x33c>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	4b67      	ldr	r3, [pc, #412]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001d12:	430a      	orrs	r2, r1
 8001d14:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001d16:	4b66      	ldr	r3, [pc, #408]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	0adb      	lsrs	r3, r3, #11
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	4013      	ands	r3, r2
 8001d20:	4a68      	ldr	r2, [pc, #416]	@ (8001ec4 <HAL_RCC_OscConfig+0x340>)
 8001d22:	40da      	lsrs	r2, r3
 8001d24:	4b68      	ldr	r3, [pc, #416]	@ (8001ec8 <HAL_RCC_OscConfig+0x344>)
 8001d26:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d28:	4b68      	ldr	r3, [pc, #416]	@ (8001ecc <HAL_RCC_OscConfig+0x348>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f7ff f98d 	bl	800104c <HAL_InitTick>
 8001d32:	1e03      	subs	r3, r0, #0
 8001d34:	d051      	beq.n	8001dda <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e221      	b.n	800217e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d030      	beq.n	8001da4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d42:	4b5b      	ldr	r3, [pc, #364]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a5e      	ldr	r2, [pc, #376]	@ (8001ec0 <HAL_RCC_OscConfig+0x33c>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	0019      	movs	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	4b57      	ldr	r3, [pc, #348]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001d52:	430a      	orrs	r2, r1
 8001d54:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001d56:	4b56      	ldr	r3, [pc, #344]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	4b55      	ldr	r3, [pc, #340]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001d5c:	2180      	movs	r1, #128	@ 0x80
 8001d5e:	0049      	lsls	r1, r1, #1
 8001d60:	430a      	orrs	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d64:	f7ff f9ce 	bl	8001104 <HAL_GetTick>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d6e:	f7ff f9c9 	bl	8001104 <HAL_GetTick>
 8001d72:	0002      	movs	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e1fe      	b.n	800217e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d80:	4b4b      	ldr	r3, [pc, #300]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	2380      	movs	r3, #128	@ 0x80
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8c:	4b48      	ldr	r3, [pc, #288]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	4a4a      	ldr	r2, [pc, #296]	@ (8001ebc <HAL_RCC_OscConfig+0x338>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	0019      	movs	r1, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	021a      	lsls	r2, r3, #8
 8001d9c:	4b44      	ldr	r3, [pc, #272]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	e01b      	b.n	8001ddc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001da4:	4b42      	ldr	r3, [pc, #264]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b41      	ldr	r3, [pc, #260]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001daa:	4949      	ldr	r1, [pc, #292]	@ (8001ed0 <HAL_RCC_OscConfig+0x34c>)
 8001dac:	400a      	ands	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7ff f9a8 	bl	8001104 <HAL_GetTick>
 8001db4:	0003      	movs	r3, r0
 8001db6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dba:	f7ff f9a3 	bl	8001104 <HAL_GetTick>
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e1d8      	b.n	800217e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dcc:	4b38      	ldr	r3, [pc, #224]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	2380      	movs	r3, #128	@ 0x80
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d1f0      	bne.n	8001dba <HAL_RCC_OscConfig+0x236>
 8001dd8:	e000      	b.n	8001ddc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dda:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2208      	movs	r2, #8
 8001de2:	4013      	ands	r3, r2
 8001de4:	d047      	beq.n	8001e76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001de6:	4b32      	ldr	r3, [pc, #200]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2238      	movs	r2, #56	@ 0x38
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b18      	cmp	r3, #24
 8001df0:	d10a      	bne.n	8001e08 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001df2:	4b2f      	ldr	r3, [pc, #188]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df6:	2202      	movs	r2, #2
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d03c      	beq.n	8001e76 <HAL_RCC_OscConfig+0x2f2>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d138      	bne.n	8001e76 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e1ba      	b.n	800217e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d019      	beq.n	8001e44 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001e10:	4b27      	ldr	r3, [pc, #156]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001e12:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e14:	4b26      	ldr	r3, [pc, #152]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001e16:	2101      	movs	r1, #1
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7ff f972 	bl	8001104 <HAL_GetTick>
 8001e20:	0003      	movs	r3, r0
 8001e22:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e26:	f7ff f96d 	bl	8001104 <HAL_GetTick>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e1a2      	b.n	800217e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e38:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d0f1      	beq.n	8001e26 <HAL_RCC_OscConfig+0x2a2>
 8001e42:	e018      	b.n	8001e76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001e44:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001e46:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e48:	4b19      	ldr	r3, [pc, #100]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	438a      	bics	r2, r1
 8001e4e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7ff f958 	bl	8001104 <HAL_GetTick>
 8001e54:	0003      	movs	r3, r0
 8001e56:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5a:	f7ff f953 	bl	8001104 <HAL_GetTick>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e188      	b.n	800217e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e6c:	4b10      	ldr	r3, [pc, #64]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001e6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e70:	2202      	movs	r2, #2
 8001e72:	4013      	ands	r3, r2
 8001e74:	d1f1      	bne.n	8001e5a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2204      	movs	r2, #4
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d100      	bne.n	8001e82 <HAL_RCC_OscConfig+0x2fe>
 8001e80:	e0c6      	b.n	8002010 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e82:	231f      	movs	r3, #31
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e8a:	4b09      	ldr	r3, [pc, #36]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2238      	movs	r2, #56	@ 0x38
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b20      	cmp	r3, #32
 8001e94:	d11e      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001e96:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <HAL_RCC_OscConfig+0x32c>)
 8001e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d100      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x31e>
 8001ea0:	e0b6      	b.n	8002010 <HAL_RCC_OscConfig+0x48c>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d000      	beq.n	8001eac <HAL_RCC_OscConfig+0x328>
 8001eaa:	e0b1      	b.n	8002010 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e166      	b.n	800217e <HAL_RCC_OscConfig+0x5fa>
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	fffeffff 	.word	0xfffeffff
 8001eb8:	fffbffff 	.word	0xfffbffff
 8001ebc:	ffff80ff 	.word	0xffff80ff
 8001ec0:	ffffc7ff 	.word	0xffffc7ff
 8001ec4:	00f42400 	.word	0x00f42400
 8001ec8:	20000004 	.word	0x20000004
 8001ecc:	20000008 	.word	0x20000008
 8001ed0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ed4:	4bac      	ldr	r3, [pc, #688]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8001ed6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ed8:	2380      	movs	r3, #128	@ 0x80
 8001eda:	055b      	lsls	r3, r3, #21
 8001edc:	4013      	ands	r3, r2
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x360>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <HAL_RCC_OscConfig+0x362>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d011      	beq.n	8001f0e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001eea:	4ba7      	ldr	r3, [pc, #668]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8001eec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eee:	4ba6      	ldr	r3, [pc, #664]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8001ef0:	2180      	movs	r1, #128	@ 0x80
 8001ef2:	0549      	lsls	r1, r1, #21
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ef8:	4ba3      	ldr	r3, [pc, #652]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8001efa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001efc:	2380      	movs	r3, #128	@ 0x80
 8001efe:	055b      	lsls	r3, r3, #21
 8001f00:	4013      	ands	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001f06:	231f      	movs	r3, #31
 8001f08:	18fb      	adds	r3, r7, r3
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f0e:	4b9f      	ldr	r3, [pc, #636]	@ (800218c <HAL_RCC_OscConfig+0x608>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	2380      	movs	r3, #128	@ 0x80
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4013      	ands	r3, r2
 8001f18:	d11a      	bne.n	8001f50 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f1a:	4b9c      	ldr	r3, [pc, #624]	@ (800218c <HAL_RCC_OscConfig+0x608>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	4b9b      	ldr	r3, [pc, #620]	@ (800218c <HAL_RCC_OscConfig+0x608>)
 8001f20:	2180      	movs	r1, #128	@ 0x80
 8001f22:	0049      	lsls	r1, r1, #1
 8001f24:	430a      	orrs	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001f28:	f7ff f8ec 	bl	8001104 <HAL_GetTick>
 8001f2c:	0003      	movs	r3, r0
 8001f2e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f32:	f7ff f8e7 	bl	8001104 <HAL_GetTick>
 8001f36:	0002      	movs	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e11c      	b.n	800217e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f44:	4b91      	ldr	r3, [pc, #580]	@ (800218c <HAL_RCC_OscConfig+0x608>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	2380      	movs	r3, #128	@ 0x80
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d106      	bne.n	8001f66 <HAL_RCC_OscConfig+0x3e2>
 8001f58:	4b8b      	ldr	r3, [pc, #556]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8001f5a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f5c:	4b8a      	ldr	r3, [pc, #552]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8001f5e:	2101      	movs	r1, #1
 8001f60:	430a      	orrs	r2, r1
 8001f62:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f64:	e01c      	b.n	8001fa0 <HAL_RCC_OscConfig+0x41c>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b05      	cmp	r3, #5
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x404>
 8001f6e:	4b86      	ldr	r3, [pc, #536]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8001f70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f72:	4b85      	ldr	r3, [pc, #532]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8001f74:	2104      	movs	r1, #4
 8001f76:	430a      	orrs	r2, r1
 8001f78:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f7a:	4b83      	ldr	r3, [pc, #524]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8001f7c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f7e:	4b82      	ldr	r3, [pc, #520]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8001f80:	2101      	movs	r1, #1
 8001f82:	430a      	orrs	r2, r1
 8001f84:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f86:	e00b      	b.n	8001fa0 <HAL_RCC_OscConfig+0x41c>
 8001f88:	4b7f      	ldr	r3, [pc, #508]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8001f8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f8c:	4b7e      	ldr	r3, [pc, #504]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8001f8e:	2101      	movs	r1, #1
 8001f90:	438a      	bics	r2, r1
 8001f92:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f94:	4b7c      	ldr	r3, [pc, #496]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8001f96:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f98:	4b7b      	ldr	r3, [pc, #492]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8001f9a:	2104      	movs	r1, #4
 8001f9c:	438a      	bics	r2, r1
 8001f9e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d014      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa8:	f7ff f8ac 	bl	8001104 <HAL_GetTick>
 8001fac:	0003      	movs	r3, r0
 8001fae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb0:	e009      	b.n	8001fc6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb2:	f7ff f8a7 	bl	8001104 <HAL_GetTick>
 8001fb6:	0002      	movs	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	4a74      	ldr	r2, [pc, #464]	@ (8002190 <HAL_RCC_OscConfig+0x60c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e0db      	b.n	800217e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc6:	4b70      	ldr	r3, [pc, #448]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fca:	2202      	movs	r2, #2
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d0f0      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x42e>
 8001fd0:	e013      	b.n	8001ffa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd2:	f7ff f897 	bl	8001104 <HAL_GetTick>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fda:	e009      	b.n	8001ff0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fdc:	f7ff f892 	bl	8001104 <HAL_GetTick>
 8001fe0:	0002      	movs	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	4a6a      	ldr	r2, [pc, #424]	@ (8002190 <HAL_RCC_OscConfig+0x60c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e0c6      	b.n	800217e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ff0:	4b65      	ldr	r3, [pc, #404]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001ffa:	231f      	movs	r3, #31
 8001ffc:	18fb      	adds	r3, r7, r3
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d105      	bne.n	8002010 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002004:	4b60      	ldr	r3, [pc, #384]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8002006:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002008:	4b5f      	ldr	r3, [pc, #380]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 800200a:	4962      	ldr	r1, [pc, #392]	@ (8002194 <HAL_RCC_OscConfig+0x610>)
 800200c:	400a      	ands	r2, r1
 800200e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d100      	bne.n	800201a <HAL_RCC_OscConfig+0x496>
 8002018:	e0b0      	b.n	800217c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800201a:	4b5b      	ldr	r3, [pc, #364]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2238      	movs	r2, #56	@ 0x38
 8002020:	4013      	ands	r3, r2
 8002022:	2b10      	cmp	r3, #16
 8002024:	d100      	bne.n	8002028 <HAL_RCC_OscConfig+0x4a4>
 8002026:	e078      	b.n	800211a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d153      	bne.n	80020d8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002030:	4b55      	ldr	r3, [pc, #340]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b54      	ldr	r3, [pc, #336]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8002036:	4958      	ldr	r1, [pc, #352]	@ (8002198 <HAL_RCC_OscConfig+0x614>)
 8002038:	400a      	ands	r2, r1
 800203a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7ff f862 	bl	8001104 <HAL_GetTick>
 8002040:	0003      	movs	r3, r0
 8002042:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002046:	f7ff f85d 	bl	8001104 <HAL_GetTick>
 800204a:	0002      	movs	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e092      	b.n	800217e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002058:	4b4b      	ldr	r3, [pc, #300]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2380      	movs	r3, #128	@ 0x80
 800205e:	049b      	lsls	r3, r3, #18
 8002060:	4013      	ands	r3, r2
 8002062:	d1f0      	bne.n	8002046 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002064:	4b48      	ldr	r3, [pc, #288]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4a4c      	ldr	r2, [pc, #304]	@ (800219c <HAL_RCC_OscConfig+0x618>)
 800206a:	4013      	ands	r3, r2
 800206c:	0019      	movs	r1, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1a      	ldr	r2, [r3, #32]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	431a      	orrs	r2, r3
 800208c:	4b3e      	ldr	r3, [pc, #248]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 800208e:	430a      	orrs	r2, r1
 8002090:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002092:	4b3d      	ldr	r3, [pc, #244]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4b3c      	ldr	r3, [pc, #240]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8002098:	2180      	movs	r1, #128	@ 0x80
 800209a:	0449      	lsls	r1, r1, #17
 800209c:	430a      	orrs	r2, r1
 800209e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80020a0:	4b39      	ldr	r3, [pc, #228]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	4b38      	ldr	r3, [pc, #224]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 80020a6:	2180      	movs	r1, #128	@ 0x80
 80020a8:	0549      	lsls	r1, r1, #21
 80020aa:	430a      	orrs	r2, r1
 80020ac:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ae:	f7ff f829 	bl	8001104 <HAL_GetTick>
 80020b2:	0003      	movs	r3, r0
 80020b4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b8:	f7ff f824 	bl	8001104 <HAL_GetTick>
 80020bc:	0002      	movs	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e059      	b.n	800217e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	2380      	movs	r3, #128	@ 0x80
 80020d0:	049b      	lsls	r3, r3, #18
 80020d2:	4013      	ands	r3, r2
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0x534>
 80020d6:	e051      	b.n	800217c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 80020de:	492e      	ldr	r1, [pc, #184]	@ (8002198 <HAL_RCC_OscConfig+0x614>)
 80020e0:	400a      	ands	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e4:	f7ff f80e 	bl	8001104 <HAL_GetTick>
 80020e8:	0003      	movs	r3, r0
 80020ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ee:	f7ff f809 	bl	8001104 <HAL_GetTick>
 80020f2:	0002      	movs	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e03e      	b.n	800217e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002100:	4b21      	ldr	r3, [pc, #132]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2380      	movs	r3, #128	@ 0x80
 8002106:	049b      	lsls	r3, r3, #18
 8002108:	4013      	ands	r3, r2
 800210a:	d1f0      	bne.n	80020ee <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800210c:	4b1e      	ldr	r3, [pc, #120]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	4b1d      	ldr	r3, [pc, #116]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8002112:	4923      	ldr	r1, [pc, #140]	@ (80021a0 <HAL_RCC_OscConfig+0x61c>)
 8002114:	400a      	ands	r2, r1
 8002116:	60da      	str	r2, [r3, #12]
 8002118:	e030      	b.n	800217c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e02b      	b.n	800217e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002126:	4b18      	ldr	r3, [pc, #96]	@ (8002188 <HAL_RCC_OscConfig+0x604>)
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	2203      	movs	r2, #3
 8002130:	401a      	ands	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	429a      	cmp	r2, r3
 8002138:	d11e      	bne.n	8002178 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2270      	movs	r2, #112	@ 0x70
 800213e:	401a      	ands	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002144:	429a      	cmp	r2, r3
 8002146:	d117      	bne.n	8002178 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	23fe      	movs	r3, #254	@ 0xfe
 800214c:	01db      	lsls	r3, r3, #7
 800214e:	401a      	ands	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002154:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002156:	429a      	cmp	r2, r3
 8002158:	d10e      	bne.n	8002178 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	23f8      	movs	r3, #248	@ 0xf8
 800215e:	039b      	lsls	r3, r3, #14
 8002160:	401a      	ands	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002166:	429a      	cmp	r2, r3
 8002168:	d106      	bne.n	8002178 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	0f5b      	lsrs	r3, r3, #29
 800216e:	075a      	lsls	r2, r3, #29
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	0018      	movs	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	b008      	add	sp, #32
 8002184:	bd80      	pop	{r7, pc}
 8002186:	46c0      	nop			@ (mov r8, r8)
 8002188:	40021000 	.word	0x40021000
 800218c:	40007000 	.word	0x40007000
 8002190:	00001388 	.word	0x00001388
 8002194:	efffffff 	.word	0xefffffff
 8002198:	feffffff 	.word	0xfeffffff
 800219c:	1fc1808c 	.word	0x1fc1808c
 80021a0:	effefffc 	.word	0xeffefffc

080021a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0e9      	b.n	800238c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021b8:	4b76      	ldr	r3, [pc, #472]	@ (8002394 <HAL_RCC_ClockConfig+0x1f0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2207      	movs	r2, #7
 80021be:	4013      	ands	r3, r2
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d91e      	bls.n	8002204 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c6:	4b73      	ldr	r3, [pc, #460]	@ (8002394 <HAL_RCC_ClockConfig+0x1f0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2207      	movs	r2, #7
 80021cc:	4393      	bics	r3, r2
 80021ce:	0019      	movs	r1, r3
 80021d0:	4b70      	ldr	r3, [pc, #448]	@ (8002394 <HAL_RCC_ClockConfig+0x1f0>)
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021d8:	f7fe ff94 	bl	8001104 <HAL_GetTick>
 80021dc:	0003      	movs	r3, r0
 80021de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021e0:	e009      	b.n	80021f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e2:	f7fe ff8f 	bl	8001104 <HAL_GetTick>
 80021e6:	0002      	movs	r2, r0
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	4a6a      	ldr	r2, [pc, #424]	@ (8002398 <HAL_RCC_ClockConfig+0x1f4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e0ca      	b.n	800238c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021f6:	4b67      	ldr	r3, [pc, #412]	@ (8002394 <HAL_RCC_ClockConfig+0x1f0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2207      	movs	r2, #7
 80021fc:	4013      	ands	r3, r2
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d1ee      	bne.n	80021e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2202      	movs	r2, #2
 800220a:	4013      	ands	r3, r2
 800220c:	d015      	beq.n	800223a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2204      	movs	r2, #4
 8002214:	4013      	ands	r3, r2
 8002216:	d006      	beq.n	8002226 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002218:	4b60      	ldr	r3, [pc, #384]	@ (800239c <HAL_RCC_ClockConfig+0x1f8>)
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	4b5f      	ldr	r3, [pc, #380]	@ (800239c <HAL_RCC_ClockConfig+0x1f8>)
 800221e:	21e0      	movs	r1, #224	@ 0xe0
 8002220:	01c9      	lsls	r1, r1, #7
 8002222:	430a      	orrs	r2, r1
 8002224:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002226:	4b5d      	ldr	r3, [pc, #372]	@ (800239c <HAL_RCC_ClockConfig+0x1f8>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	4a5d      	ldr	r2, [pc, #372]	@ (80023a0 <HAL_RCC_ClockConfig+0x1fc>)
 800222c:	4013      	ands	r3, r2
 800222e:	0019      	movs	r1, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	4b59      	ldr	r3, [pc, #356]	@ (800239c <HAL_RCC_ClockConfig+0x1f8>)
 8002236:	430a      	orrs	r2, r1
 8002238:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2201      	movs	r2, #1
 8002240:	4013      	ands	r3, r2
 8002242:	d057      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d107      	bne.n	800225c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800224c:	4b53      	ldr	r3, [pc, #332]	@ (800239c <HAL_RCC_ClockConfig+0x1f8>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	2380      	movs	r3, #128	@ 0x80
 8002252:	029b      	lsls	r3, r3, #10
 8002254:	4013      	ands	r3, r2
 8002256:	d12b      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e097      	b.n	800238c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d107      	bne.n	8002274 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002264:	4b4d      	ldr	r3, [pc, #308]	@ (800239c <HAL_RCC_ClockConfig+0x1f8>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	2380      	movs	r3, #128	@ 0x80
 800226a:	049b      	lsls	r3, r3, #18
 800226c:	4013      	ands	r3, r2
 800226e:	d11f      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e08b      	b.n	800238c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d107      	bne.n	800228c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800227c:	4b47      	ldr	r3, [pc, #284]	@ (800239c <HAL_RCC_ClockConfig+0x1f8>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	2380      	movs	r3, #128	@ 0x80
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4013      	ands	r3, r2
 8002286:	d113      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e07f      	b.n	800238c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b03      	cmp	r3, #3
 8002292:	d106      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002294:	4b41      	ldr	r3, [pc, #260]	@ (800239c <HAL_RCC_ClockConfig+0x1f8>)
 8002296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002298:	2202      	movs	r2, #2
 800229a:	4013      	ands	r3, r2
 800229c:	d108      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e074      	b.n	800238c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022a2:	4b3e      	ldr	r3, [pc, #248]	@ (800239c <HAL_RCC_ClockConfig+0x1f8>)
 80022a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a6:	2202      	movs	r2, #2
 80022a8:	4013      	ands	r3, r2
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e06d      	b.n	800238c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022b0:	4b3a      	ldr	r3, [pc, #232]	@ (800239c <HAL_RCC_ClockConfig+0x1f8>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2207      	movs	r2, #7
 80022b6:	4393      	bics	r3, r2
 80022b8:	0019      	movs	r1, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	4b37      	ldr	r3, [pc, #220]	@ (800239c <HAL_RCC_ClockConfig+0x1f8>)
 80022c0:	430a      	orrs	r2, r1
 80022c2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022c4:	f7fe ff1e 	bl	8001104 <HAL_GetTick>
 80022c8:	0003      	movs	r3, r0
 80022ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022cc:	e009      	b.n	80022e2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ce:	f7fe ff19 	bl	8001104 <HAL_GetTick>
 80022d2:	0002      	movs	r2, r0
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	4a2f      	ldr	r2, [pc, #188]	@ (8002398 <HAL_RCC_ClockConfig+0x1f4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e054      	b.n	800238c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	4b2e      	ldr	r3, [pc, #184]	@ (800239c <HAL_RCC_ClockConfig+0x1f8>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2238      	movs	r2, #56	@ 0x38
 80022e8:	401a      	ands	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d1ec      	bne.n	80022ce <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022f4:	4b27      	ldr	r3, [pc, #156]	@ (8002394 <HAL_RCC_ClockConfig+0x1f0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2207      	movs	r2, #7
 80022fa:	4013      	ands	r3, r2
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d21e      	bcs.n	8002340 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	4b24      	ldr	r3, [pc, #144]	@ (8002394 <HAL_RCC_ClockConfig+0x1f0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2207      	movs	r2, #7
 8002308:	4393      	bics	r3, r2
 800230a:	0019      	movs	r1, r3
 800230c:	4b21      	ldr	r3, [pc, #132]	@ (8002394 <HAL_RCC_ClockConfig+0x1f0>)
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002314:	f7fe fef6 	bl	8001104 <HAL_GetTick>
 8002318:	0003      	movs	r3, r0
 800231a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800231c:	e009      	b.n	8002332 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800231e:	f7fe fef1 	bl	8001104 <HAL_GetTick>
 8002322:	0002      	movs	r2, r0
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	4a1b      	ldr	r2, [pc, #108]	@ (8002398 <HAL_RCC_ClockConfig+0x1f4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e02c      	b.n	800238c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002332:	4b18      	ldr	r3, [pc, #96]	@ (8002394 <HAL_RCC_ClockConfig+0x1f0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2207      	movs	r2, #7
 8002338:	4013      	ands	r3, r2
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d1ee      	bne.n	800231e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2204      	movs	r2, #4
 8002346:	4013      	ands	r3, r2
 8002348:	d009      	beq.n	800235e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800234a:	4b14      	ldr	r3, [pc, #80]	@ (800239c <HAL_RCC_ClockConfig+0x1f8>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	4a15      	ldr	r2, [pc, #84]	@ (80023a4 <HAL_RCC_ClockConfig+0x200>)
 8002350:	4013      	ands	r3, r2
 8002352:	0019      	movs	r1, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	4b10      	ldr	r3, [pc, #64]	@ (800239c <HAL_RCC_ClockConfig+0x1f8>)
 800235a:	430a      	orrs	r2, r1
 800235c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800235e:	f000 f829 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8002362:	0001      	movs	r1, r0
 8002364:	4b0d      	ldr	r3, [pc, #52]	@ (800239c <HAL_RCC_ClockConfig+0x1f8>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	220f      	movs	r2, #15
 800236c:	401a      	ands	r2, r3
 800236e:	4b0e      	ldr	r3, [pc, #56]	@ (80023a8 <HAL_RCC_ClockConfig+0x204>)
 8002370:	0092      	lsls	r2, r2, #2
 8002372:	58d3      	ldr	r3, [r2, r3]
 8002374:	221f      	movs	r2, #31
 8002376:	4013      	ands	r3, r2
 8002378:	000a      	movs	r2, r1
 800237a:	40da      	lsrs	r2, r3
 800237c:	4b0b      	ldr	r3, [pc, #44]	@ (80023ac <HAL_RCC_ClockConfig+0x208>)
 800237e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002380:	4b0b      	ldr	r3, [pc, #44]	@ (80023b0 <HAL_RCC_ClockConfig+0x20c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	0018      	movs	r0, r3
 8002386:	f7fe fe61 	bl	800104c <HAL_InitTick>
 800238a:	0003      	movs	r3, r0
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b004      	add	sp, #16
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40022000 	.word	0x40022000
 8002398:	00001388 	.word	0x00001388
 800239c:	40021000 	.word	0x40021000
 80023a0:	fffff0ff 	.word	0xfffff0ff
 80023a4:	ffff8fff 	.word	0xffff8fff
 80023a8:	08004b8c 	.word	0x08004b8c
 80023ac:	20000004 	.word	0x20000004
 80023b0:	20000008 	.word	0x20000008

080023b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ba:	4b3c      	ldr	r3, [pc, #240]	@ (80024ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2238      	movs	r2, #56	@ 0x38
 80023c0:	4013      	ands	r3, r2
 80023c2:	d10f      	bne.n	80023e4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80023c4:	4b39      	ldr	r3, [pc, #228]	@ (80024ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	0adb      	lsrs	r3, r3, #11
 80023ca:	2207      	movs	r2, #7
 80023cc:	4013      	ands	r3, r2
 80023ce:	2201      	movs	r2, #1
 80023d0:	409a      	lsls	r2, r3
 80023d2:	0013      	movs	r3, r2
 80023d4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80023d6:	6839      	ldr	r1, [r7, #0]
 80023d8:	4835      	ldr	r0, [pc, #212]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80023da:	f7fd fe91 	bl	8000100 <__udivsi3>
 80023de:	0003      	movs	r3, r0
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	e05d      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023e4:	4b31      	ldr	r3, [pc, #196]	@ (80024ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2238      	movs	r2, #56	@ 0x38
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d102      	bne.n	80023f6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023f0:	4b2f      	ldr	r3, [pc, #188]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	e054      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f6:	4b2d      	ldr	r3, [pc, #180]	@ (80024ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2238      	movs	r2, #56	@ 0x38
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b10      	cmp	r3, #16
 8002400:	d138      	bne.n	8002474 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002402:	4b2a      	ldr	r3, [pc, #168]	@ (80024ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2203      	movs	r2, #3
 8002408:	4013      	ands	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800240c:	4b27      	ldr	r3, [pc, #156]	@ (80024ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	2207      	movs	r2, #7
 8002414:	4013      	ands	r3, r2
 8002416:	3301      	adds	r3, #1
 8002418:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2b03      	cmp	r3, #3
 800241e:	d10d      	bne.n	800243c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	4823      	ldr	r0, [pc, #140]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002424:	f7fd fe6c 	bl	8000100 <__udivsi3>
 8002428:	0003      	movs	r3, r0
 800242a:	0019      	movs	r1, r3
 800242c:	4b1f      	ldr	r3, [pc, #124]	@ (80024ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	227f      	movs	r2, #127	@ 0x7f
 8002434:	4013      	ands	r3, r2
 8002436:	434b      	muls	r3, r1
 8002438:	617b      	str	r3, [r7, #20]
        break;
 800243a:	e00d      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	481c      	ldr	r0, [pc, #112]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002440:	f7fd fe5e 	bl	8000100 <__udivsi3>
 8002444:	0003      	movs	r3, r0
 8002446:	0019      	movs	r1, r3
 8002448:	4b18      	ldr	r3, [pc, #96]	@ (80024ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	227f      	movs	r2, #127	@ 0x7f
 8002450:	4013      	ands	r3, r2
 8002452:	434b      	muls	r3, r1
 8002454:	617b      	str	r3, [r7, #20]
        break;
 8002456:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002458:	4b14      	ldr	r3, [pc, #80]	@ (80024ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	0f5b      	lsrs	r3, r3, #29
 800245e:	2207      	movs	r2, #7
 8002460:	4013      	ands	r3, r2
 8002462:	3301      	adds	r3, #1
 8002464:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	6978      	ldr	r0, [r7, #20]
 800246a:	f7fd fe49 	bl	8000100 <__udivsi3>
 800246e:	0003      	movs	r3, r0
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	e015      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002474:	4b0d      	ldr	r3, [pc, #52]	@ (80024ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2238      	movs	r2, #56	@ 0x38
 800247a:	4013      	ands	r3, r2
 800247c:	2b20      	cmp	r3, #32
 800247e:	d103      	bne.n	8002488 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002480:	2380      	movs	r3, #128	@ 0x80
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002488:	4b08      	ldr	r3, [pc, #32]	@ (80024ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2238      	movs	r2, #56	@ 0x38
 800248e:	4013      	ands	r3, r2
 8002490:	2b18      	cmp	r3, #24
 8002492:	d103      	bne.n	800249c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002494:	23fa      	movs	r3, #250	@ 0xfa
 8002496:	01db      	lsls	r3, r3, #7
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	e001      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024a0:	693b      	ldr	r3, [r7, #16]
}
 80024a2:	0018      	movs	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b006      	add	sp, #24
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	46c0      	nop			@ (mov r8, r8)
 80024ac:	40021000 	.word	0x40021000
 80024b0:	00f42400 	.word	0x00f42400

080024b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024b8:	4b02      	ldr	r3, [pc, #8]	@ (80024c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80024ba:	681b      	ldr	r3, [r3, #0]
}
 80024bc:	0018      	movs	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	46c0      	nop			@ (mov r8, r8)
 80024c4:	20000004 	.word	0x20000004

080024c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024c8:	b5b0      	push	{r4, r5, r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80024cc:	f7ff fff2 	bl	80024b4 <HAL_RCC_GetHCLKFreq>
 80024d0:	0004      	movs	r4, r0
 80024d2:	f7ff fb4b 	bl	8001b6c <LL_RCC_GetAPB1Prescaler>
 80024d6:	0003      	movs	r3, r0
 80024d8:	0b1a      	lsrs	r2, r3, #12
 80024da:	4b05      	ldr	r3, [pc, #20]	@ (80024f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024dc:	0092      	lsls	r2, r2, #2
 80024de:	58d3      	ldr	r3, [r2, r3]
 80024e0:	221f      	movs	r2, #31
 80024e2:	4013      	ands	r3, r2
 80024e4:	40dc      	lsrs	r4, r3
 80024e6:	0023      	movs	r3, r4
}
 80024e8:	0018      	movs	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bdb0      	pop	{r4, r5, r7, pc}
 80024ee:	46c0      	nop			@ (mov r8, r8)
 80024f0:	08004bcc 	.word	0x08004bcc

080024f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80024fc:	2313      	movs	r3, #19
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	2200      	movs	r2, #0
 8002502:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002504:	2312      	movs	r3, #18
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	2380      	movs	r3, #128	@ 0x80
 8002512:	029b      	lsls	r3, r3, #10
 8002514:	4013      	ands	r3, r2
 8002516:	d100      	bne.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002518:	e0a3      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251a:	2011      	movs	r0, #17
 800251c:	183b      	adds	r3, r7, r0
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002522:	4b7f      	ldr	r3, [pc, #508]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002524:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002526:	2380      	movs	r3, #128	@ 0x80
 8002528:	055b      	lsls	r3, r3, #21
 800252a:	4013      	ands	r3, r2
 800252c:	d110      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	4b7c      	ldr	r3, [pc, #496]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002530:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002532:	4b7b      	ldr	r3, [pc, #492]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002534:	2180      	movs	r1, #128	@ 0x80
 8002536:	0549      	lsls	r1, r1, #21
 8002538:	430a      	orrs	r2, r1
 800253a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800253c:	4b78      	ldr	r3, [pc, #480]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800253e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002540:	2380      	movs	r3, #128	@ 0x80
 8002542:	055b      	lsls	r3, r3, #21
 8002544:	4013      	ands	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800254a:	183b      	adds	r3, r7, r0
 800254c:	2201      	movs	r2, #1
 800254e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002550:	4b74      	ldr	r3, [pc, #464]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b73      	ldr	r3, [pc, #460]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002556:	2180      	movs	r1, #128	@ 0x80
 8002558:	0049      	lsls	r1, r1, #1
 800255a:	430a      	orrs	r2, r1
 800255c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800255e:	f7fe fdd1 	bl	8001104 <HAL_GetTick>
 8002562:	0003      	movs	r3, r0
 8002564:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002566:	e00b      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002568:	f7fe fdcc 	bl	8001104 <HAL_GetTick>
 800256c:	0002      	movs	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d904      	bls.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002576:	2313      	movs	r3, #19
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	2203      	movs	r2, #3
 800257c:	701a      	strb	r2, [r3, #0]
        break;
 800257e:	e005      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002580:	4b68      	ldr	r3, [pc, #416]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	2380      	movs	r3, #128	@ 0x80
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4013      	ands	r3, r2
 800258a:	d0ed      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800258c:	2313      	movs	r3, #19
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d154      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002596:	4b62      	ldr	r3, [pc, #392]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002598:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800259a:	23c0      	movs	r3, #192	@ 0xc0
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4013      	ands	r3, r2
 80025a0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d019      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d014      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b6:	4a5c      	ldr	r2, [pc, #368]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025bc:	4b58      	ldr	r3, [pc, #352]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025c0:	4b57      	ldr	r3, [pc, #348]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025c2:	2180      	movs	r1, #128	@ 0x80
 80025c4:	0249      	lsls	r1, r1, #9
 80025c6:	430a      	orrs	r2, r1
 80025c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025ca:	4b55      	ldr	r3, [pc, #340]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025ce:	4b54      	ldr	r3, [pc, #336]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025d0:	4956      	ldr	r1, [pc, #344]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80025d2:	400a      	ands	r2, r1
 80025d4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025d6:	4b52      	ldr	r3, [pc, #328]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2201      	movs	r2, #1
 80025e0:	4013      	ands	r3, r2
 80025e2:	d016      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7fe fd8e 	bl	8001104 <HAL_GetTick>
 80025e8:	0003      	movs	r3, r0
 80025ea:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ec:	e00c      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ee:	f7fe fd89 	bl	8001104 <HAL_GetTick>
 80025f2:	0002      	movs	r2, r0
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	4a4d      	ldr	r2, [pc, #308]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d904      	bls.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80025fe:	2313      	movs	r3, #19
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	2203      	movs	r2, #3
 8002604:	701a      	strb	r2, [r3, #0]
            break;
 8002606:	e004      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002608:	4b45      	ldr	r3, [pc, #276]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800260a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260c:	2202      	movs	r2, #2
 800260e:	4013      	ands	r3, r2
 8002610:	d0ed      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002612:	2313      	movs	r3, #19
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10a      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800261c:	4b40      	ldr	r3, [pc, #256]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800261e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002620:	4a41      	ldr	r2, [pc, #260]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002622:	4013      	ands	r3, r2
 8002624:	0019      	movs	r1, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	4b3d      	ldr	r3, [pc, #244]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800262c:	430a      	orrs	r2, r1
 800262e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002630:	e00c      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002632:	2312      	movs	r3, #18
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	2213      	movs	r2, #19
 8002638:	18ba      	adds	r2, r7, r2
 800263a:	7812      	ldrb	r2, [r2, #0]
 800263c:	701a      	strb	r2, [r3, #0]
 800263e:	e005      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002640:	2312      	movs	r3, #18
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	2213      	movs	r2, #19
 8002646:	18ba      	adds	r2, r7, r2
 8002648:	7812      	ldrb	r2, [r2, #0]
 800264a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800264c:	2311      	movs	r3, #17
 800264e:	18fb      	adds	r3, r7, r3
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d105      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002656:	4b32      	ldr	r3, [pc, #200]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002658:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800265a:	4b31      	ldr	r3, [pc, #196]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800265c:	4935      	ldr	r1, [pc, #212]	@ (8002734 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800265e:	400a      	ands	r2, r1
 8002660:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2201      	movs	r2, #1
 8002668:	4013      	ands	r3, r2
 800266a:	d009      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800266c:	4b2c      	ldr	r3, [pc, #176]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800266e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002670:	2203      	movs	r2, #3
 8002672:	4393      	bics	r3, r2
 8002674:	0019      	movs	r1, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	4b29      	ldr	r3, [pc, #164]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800267c:	430a      	orrs	r2, r1
 800267e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2220      	movs	r2, #32
 8002686:	4013      	ands	r3, r2
 8002688:	d009      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800268a:	4b25      	ldr	r3, [pc, #148]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800268c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268e:	4a2a      	ldr	r2, [pc, #168]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002690:	4013      	ands	r3, r2
 8002692:	0019      	movs	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	4b21      	ldr	r3, [pc, #132]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800269a:	430a      	orrs	r2, r1
 800269c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	2380      	movs	r3, #128	@ 0x80
 80026a4:	01db      	lsls	r3, r3, #7
 80026a6:	4013      	ands	r3, r2
 80026a8:	d015      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	0899      	lsrs	r1, r3, #2
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026b8:	430a      	orrs	r2, r1
 80026ba:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	2380      	movs	r3, #128	@ 0x80
 80026c2:	05db      	lsls	r3, r3, #23
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d106      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80026c8:	4b15      	ldr	r3, [pc, #84]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	4b14      	ldr	r3, [pc, #80]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026ce:	2180      	movs	r1, #128	@ 0x80
 80026d0:	0249      	lsls	r1, r1, #9
 80026d2:	430a      	orrs	r2, r1
 80026d4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	2380      	movs	r3, #128	@ 0x80
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	4013      	ands	r3, r2
 80026e0:	d016      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80026e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e6:	4a15      	ldr	r2, [pc, #84]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	0019      	movs	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026f2:	430a      	orrs	r2, r1
 80026f4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	2380      	movs	r3, #128	@ 0x80
 80026fc:	01db      	lsls	r3, r3, #7
 80026fe:	429a      	cmp	r2, r3
 8002700:	d106      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002702:	4b07      	ldr	r3, [pc, #28]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002708:	2180      	movs	r1, #128	@ 0x80
 800270a:	0249      	lsls	r1, r1, #9
 800270c:	430a      	orrs	r2, r1
 800270e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002710:	2312      	movs	r3, #18
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	781b      	ldrb	r3, [r3, #0]
}
 8002716:	0018      	movs	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	b006      	add	sp, #24
 800271c:	bd80      	pop	{r7, pc}
 800271e:	46c0      	nop			@ (mov r8, r8)
 8002720:	40021000 	.word	0x40021000
 8002724:	40007000 	.word	0x40007000
 8002728:	fffffcff 	.word	0xfffffcff
 800272c:	fffeffff 	.word	0xfffeffff
 8002730:	00001388 	.word	0x00001388
 8002734:	efffffff 	.word	0xefffffff
 8002738:	ffffcfff 	.word	0xffffcfff
 800273c:	ffff3fff 	.word	0xffff3fff

08002740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e04a      	b.n	80027e8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	223d      	movs	r2, #61	@ 0x3d
 8002756:	5c9b      	ldrb	r3, [r3, r2]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d107      	bne.n	800276e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	223c      	movs	r2, #60	@ 0x3c
 8002762:	2100      	movs	r1, #0
 8002764:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	0018      	movs	r0, r3
 800276a:	f7fe fa4b 	bl	8000c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	223d      	movs	r2, #61	@ 0x3d
 8002772:	2102      	movs	r1, #2
 8002774:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3304      	adds	r3, #4
 800277e:	0019      	movs	r1, r3
 8002780:	0010      	movs	r0, r2
 8002782:	f000 fcb9 	bl	80030f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2248      	movs	r2, #72	@ 0x48
 800278a:	2101      	movs	r1, #1
 800278c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	223e      	movs	r2, #62	@ 0x3e
 8002792:	2101      	movs	r1, #1
 8002794:	5499      	strb	r1, [r3, r2]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	223f      	movs	r2, #63	@ 0x3f
 800279a:	2101      	movs	r1, #1
 800279c:	5499      	strb	r1, [r3, r2]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2240      	movs	r2, #64	@ 0x40
 80027a2:	2101      	movs	r1, #1
 80027a4:	5499      	strb	r1, [r3, r2]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2241      	movs	r2, #65	@ 0x41
 80027aa:	2101      	movs	r1, #1
 80027ac:	5499      	strb	r1, [r3, r2]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2242      	movs	r2, #66	@ 0x42
 80027b2:	2101      	movs	r1, #1
 80027b4:	5499      	strb	r1, [r3, r2]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2243      	movs	r2, #67	@ 0x43
 80027ba:	2101      	movs	r1, #1
 80027bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2244      	movs	r2, #68	@ 0x44
 80027c2:	2101      	movs	r1, #1
 80027c4:	5499      	strb	r1, [r3, r2]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2245      	movs	r2, #69	@ 0x45
 80027ca:	2101      	movs	r1, #1
 80027cc:	5499      	strb	r1, [r3, r2]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2246      	movs	r2, #70	@ 0x46
 80027d2:	2101      	movs	r1, #1
 80027d4:	5499      	strb	r1, [r3, r2]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2247      	movs	r2, #71	@ 0x47
 80027da:	2101      	movs	r1, #1
 80027dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	223d      	movs	r2, #61	@ 0x3d
 80027e2:	2101      	movs	r1, #1
 80027e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	0018      	movs	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b002      	add	sp, #8
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	223d      	movs	r2, #61	@ 0x3d
 80027fc:	5c9b      	ldrb	r3, [r3, r2]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b01      	cmp	r3, #1
 8002802:	d001      	beq.n	8002808 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e037      	b.n	8002878 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	223d      	movs	r2, #61	@ 0x3d
 800280c:	2102      	movs	r1, #2
 800280e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2101      	movs	r1, #1
 800281c:	430a      	orrs	r2, r1
 800281e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a16      	ldr	r2, [pc, #88]	@ (8002880 <HAL_TIM_Base_Start_IT+0x90>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d004      	beq.n	8002834 <HAL_TIM_Base_Start_IT+0x44>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a15      	ldr	r2, [pc, #84]	@ (8002884 <HAL_TIM_Base_Start_IT+0x94>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d116      	bne.n	8002862 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	4a13      	ldr	r2, [pc, #76]	@ (8002888 <HAL_TIM_Base_Start_IT+0x98>)
 800283c:	4013      	ands	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b06      	cmp	r3, #6
 8002844:	d016      	beq.n	8002874 <HAL_TIM_Base_Start_IT+0x84>
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	2380      	movs	r3, #128	@ 0x80
 800284a:	025b      	lsls	r3, r3, #9
 800284c:	429a      	cmp	r2, r3
 800284e:	d011      	beq.n	8002874 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2101      	movs	r1, #1
 800285c:	430a      	orrs	r2, r1
 800285e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002860:	e008      	b.n	8002874 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2101      	movs	r1, #1
 800286e:	430a      	orrs	r2, r1
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	e000      	b.n	8002876 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002874:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	0018      	movs	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	b004      	add	sp, #16
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40012c00 	.word	0x40012c00
 8002884:	40000400 	.word	0x40000400
 8002888:	00010007 	.word	0x00010007

0800288c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e04a      	b.n	8002934 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	223d      	movs	r2, #61	@ 0x3d
 80028a2:	5c9b      	ldrb	r3, [r3, r2]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d107      	bne.n	80028ba <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	223c      	movs	r2, #60	@ 0x3c
 80028ae:	2100      	movs	r1, #0
 80028b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	0018      	movs	r0, r3
 80028b6:	f000 f841 	bl	800293c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	223d      	movs	r2, #61	@ 0x3d
 80028be:	2102      	movs	r1, #2
 80028c0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3304      	adds	r3, #4
 80028ca:	0019      	movs	r1, r3
 80028cc:	0010      	movs	r0, r2
 80028ce:	f000 fc13 	bl	80030f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2248      	movs	r2, #72	@ 0x48
 80028d6:	2101      	movs	r1, #1
 80028d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	223e      	movs	r2, #62	@ 0x3e
 80028de:	2101      	movs	r1, #1
 80028e0:	5499      	strb	r1, [r3, r2]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	223f      	movs	r2, #63	@ 0x3f
 80028e6:	2101      	movs	r1, #1
 80028e8:	5499      	strb	r1, [r3, r2]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2240      	movs	r2, #64	@ 0x40
 80028ee:	2101      	movs	r1, #1
 80028f0:	5499      	strb	r1, [r3, r2]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2241      	movs	r2, #65	@ 0x41
 80028f6:	2101      	movs	r1, #1
 80028f8:	5499      	strb	r1, [r3, r2]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2242      	movs	r2, #66	@ 0x42
 80028fe:	2101      	movs	r1, #1
 8002900:	5499      	strb	r1, [r3, r2]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2243      	movs	r2, #67	@ 0x43
 8002906:	2101      	movs	r1, #1
 8002908:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2244      	movs	r2, #68	@ 0x44
 800290e:	2101      	movs	r1, #1
 8002910:	5499      	strb	r1, [r3, r2]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2245      	movs	r2, #69	@ 0x45
 8002916:	2101      	movs	r1, #1
 8002918:	5499      	strb	r1, [r3, r2]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2246      	movs	r2, #70	@ 0x46
 800291e:	2101      	movs	r1, #1
 8002920:	5499      	strb	r1, [r3, r2]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2247      	movs	r2, #71	@ 0x47
 8002926:	2101      	movs	r1, #1
 8002928:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	223d      	movs	r2, #61	@ 0x3d
 800292e:	2101      	movs	r1, #1
 8002930:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	0018      	movs	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	b002      	add	sp, #8
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002944:	46c0      	nop			@ (mov r8, r8)
 8002946:	46bd      	mov	sp, r7
 8002948:	b002      	add	sp, #8
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d108      	bne.n	800296e <HAL_TIM_PWM_Start+0x22>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	223e      	movs	r2, #62	@ 0x3e
 8002960:	5c9b      	ldrb	r3, [r3, r2]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	1e5a      	subs	r2, r3, #1
 8002968:	4193      	sbcs	r3, r2
 800296a:	b2db      	uxtb	r3, r3
 800296c:	e037      	b.n	80029de <HAL_TIM_PWM_Start+0x92>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b04      	cmp	r3, #4
 8002972:	d108      	bne.n	8002986 <HAL_TIM_PWM_Start+0x3a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	223f      	movs	r2, #63	@ 0x3f
 8002978:	5c9b      	ldrb	r3, [r3, r2]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	1e5a      	subs	r2, r3, #1
 8002980:	4193      	sbcs	r3, r2
 8002982:	b2db      	uxtb	r3, r3
 8002984:	e02b      	b.n	80029de <HAL_TIM_PWM_Start+0x92>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b08      	cmp	r3, #8
 800298a:	d108      	bne.n	800299e <HAL_TIM_PWM_Start+0x52>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2240      	movs	r2, #64	@ 0x40
 8002990:	5c9b      	ldrb	r3, [r3, r2]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	3b01      	subs	r3, #1
 8002996:	1e5a      	subs	r2, r3, #1
 8002998:	4193      	sbcs	r3, r2
 800299a:	b2db      	uxtb	r3, r3
 800299c:	e01f      	b.n	80029de <HAL_TIM_PWM_Start+0x92>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b0c      	cmp	r3, #12
 80029a2:	d108      	bne.n	80029b6 <HAL_TIM_PWM_Start+0x6a>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2241      	movs	r2, #65	@ 0x41
 80029a8:	5c9b      	ldrb	r3, [r3, r2]
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	1e5a      	subs	r2, r3, #1
 80029b0:	4193      	sbcs	r3, r2
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	e013      	b.n	80029de <HAL_TIM_PWM_Start+0x92>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b10      	cmp	r3, #16
 80029ba:	d108      	bne.n	80029ce <HAL_TIM_PWM_Start+0x82>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2242      	movs	r2, #66	@ 0x42
 80029c0:	5c9b      	ldrb	r3, [r3, r2]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	1e5a      	subs	r2, r3, #1
 80029c8:	4193      	sbcs	r3, r2
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	e007      	b.n	80029de <HAL_TIM_PWM_Start+0x92>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2243      	movs	r2, #67	@ 0x43
 80029d2:	5c9b      	ldrb	r3, [r3, r2]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	3b01      	subs	r3, #1
 80029d8:	1e5a      	subs	r2, r3, #1
 80029da:	4193      	sbcs	r3, r2
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e07b      	b.n	8002ade <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d104      	bne.n	80029f6 <HAL_TIM_PWM_Start+0xaa>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	223e      	movs	r2, #62	@ 0x3e
 80029f0:	2102      	movs	r1, #2
 80029f2:	5499      	strb	r1, [r3, r2]
 80029f4:	e023      	b.n	8002a3e <HAL_TIM_PWM_Start+0xf2>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d104      	bne.n	8002a06 <HAL_TIM_PWM_Start+0xba>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	223f      	movs	r2, #63	@ 0x3f
 8002a00:	2102      	movs	r1, #2
 8002a02:	5499      	strb	r1, [r3, r2]
 8002a04:	e01b      	b.n	8002a3e <HAL_TIM_PWM_Start+0xf2>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d104      	bne.n	8002a16 <HAL_TIM_PWM_Start+0xca>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2240      	movs	r2, #64	@ 0x40
 8002a10:	2102      	movs	r1, #2
 8002a12:	5499      	strb	r1, [r3, r2]
 8002a14:	e013      	b.n	8002a3e <HAL_TIM_PWM_Start+0xf2>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b0c      	cmp	r3, #12
 8002a1a:	d104      	bne.n	8002a26 <HAL_TIM_PWM_Start+0xda>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2241      	movs	r2, #65	@ 0x41
 8002a20:	2102      	movs	r1, #2
 8002a22:	5499      	strb	r1, [r3, r2]
 8002a24:	e00b      	b.n	8002a3e <HAL_TIM_PWM_Start+0xf2>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b10      	cmp	r3, #16
 8002a2a:	d104      	bne.n	8002a36 <HAL_TIM_PWM_Start+0xea>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2242      	movs	r2, #66	@ 0x42
 8002a30:	2102      	movs	r1, #2
 8002a32:	5499      	strb	r1, [r3, r2]
 8002a34:	e003      	b.n	8002a3e <HAL_TIM_PWM_Start+0xf2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2243      	movs	r2, #67	@ 0x43
 8002a3a:	2102      	movs	r1, #2
 8002a3c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6839      	ldr	r1, [r7, #0]
 8002a44:	2201      	movs	r2, #1
 8002a46:	0018      	movs	r0, r3
 8002a48:	f000 ff08 	bl	800385c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a25      	ldr	r2, [pc, #148]	@ (8002ae8 <HAL_TIM_PWM_Start+0x19c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d009      	beq.n	8002a6a <HAL_TIM_PWM_Start+0x11e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a24      	ldr	r2, [pc, #144]	@ (8002aec <HAL_TIM_PWM_Start+0x1a0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d004      	beq.n	8002a6a <HAL_TIM_PWM_Start+0x11e>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a22      	ldr	r2, [pc, #136]	@ (8002af0 <HAL_TIM_PWM_Start+0x1a4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d101      	bne.n	8002a6e <HAL_TIM_PWM_Start+0x122>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <HAL_TIM_PWM_Start+0x124>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2180      	movs	r1, #128	@ 0x80
 8002a80:	0209      	lsls	r1, r1, #8
 8002a82:	430a      	orrs	r2, r1
 8002a84:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a17      	ldr	r2, [pc, #92]	@ (8002ae8 <HAL_TIM_PWM_Start+0x19c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d004      	beq.n	8002a9a <HAL_TIM_PWM_Start+0x14e>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a17      	ldr	r2, [pc, #92]	@ (8002af4 <HAL_TIM_PWM_Start+0x1a8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d116      	bne.n	8002ac8 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	4a15      	ldr	r2, [pc, #84]	@ (8002af8 <HAL_TIM_PWM_Start+0x1ac>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b06      	cmp	r3, #6
 8002aaa:	d016      	beq.n	8002ada <HAL_TIM_PWM_Start+0x18e>
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	2380      	movs	r3, #128	@ 0x80
 8002ab0:	025b      	lsls	r3, r3, #9
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d011      	beq.n	8002ada <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac6:	e008      	b.n	8002ada <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	e000      	b.n	8002adc <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ada:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	0018      	movs	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	b004      	add	sp, #16
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	46c0      	nop			@ (mov r8, r8)
 8002ae8:	40012c00 	.word	0x40012c00
 8002aec:	40014400 	.word	0x40014400
 8002af0:	40014800 	.word	0x40014800
 8002af4:	40000400 	.word	0x40000400
 8002af8:	00010007 	.word	0x00010007

08002afc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2202      	movs	r2, #2
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d021      	beq.n	8002b60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	4013      	ands	r3, r2
 8002b22:	d01d      	beq.n	8002b60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2203      	movs	r2, #3
 8002b2a:	4252      	negs	r2, r2
 8002b2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d004      	beq.n	8002b4a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	0018      	movs	r0, r3
 8002b44:	f000 fac0 	bl	80030c8 <HAL_TIM_IC_CaptureCallback>
 8002b48:	e007      	b.n	8002b5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f000 fab3 	bl	80030b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	0018      	movs	r0, r3
 8002b56:	f000 fabf 	bl	80030d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2204      	movs	r2, #4
 8002b64:	4013      	ands	r3, r2
 8002b66:	d022      	beq.n	8002bae <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2204      	movs	r2, #4
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d01e      	beq.n	8002bae <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2205      	movs	r2, #5
 8002b76:	4252      	negs	r2, r2
 8002b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699a      	ldr	r2, [r3, #24]
 8002b86:	23c0      	movs	r3, #192	@ 0xc0
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d004      	beq.n	8002b98 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f000 fa99 	bl	80030c8 <HAL_TIM_IC_CaptureCallback>
 8002b96:	e007      	b.n	8002ba8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f000 fa8c 	bl	80030b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f000 fa98 	bl	80030d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2208      	movs	r2, #8
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	d021      	beq.n	8002bfa <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2208      	movs	r2, #8
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d01d      	beq.n	8002bfa <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2209      	movs	r2, #9
 8002bc4:	4252      	negs	r2, r2
 8002bc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2204      	movs	r2, #4
 8002bcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d004      	beq.n	8002be4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f000 fa73 	bl	80030c8 <HAL_TIM_IC_CaptureCallback>
 8002be2:	e007      	b.n	8002bf4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	0018      	movs	r0, r3
 8002be8:	f000 fa66 	bl	80030b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f000 fa72 	bl	80030d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2210      	movs	r2, #16
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d022      	beq.n	8002c48 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2210      	movs	r2, #16
 8002c06:	4013      	ands	r3, r2
 8002c08:	d01e      	beq.n	8002c48 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2211      	movs	r2, #17
 8002c10:	4252      	negs	r2, r2
 8002c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2208      	movs	r2, #8
 8002c18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	69da      	ldr	r2, [r3, #28]
 8002c20:	23c0      	movs	r3, #192	@ 0xc0
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4013      	ands	r3, r2
 8002c26:	d004      	beq.n	8002c32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f000 fa4c 	bl	80030c8 <HAL_TIM_IC_CaptureCallback>
 8002c30:	e007      	b.n	8002c42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	0018      	movs	r0, r3
 8002c36:	f000 fa3f 	bl	80030b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f000 fa4b 	bl	80030d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d00c      	beq.n	8002c6a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	4013      	ands	r3, r2
 8002c56:	d008      	beq.n	8002c6a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	4252      	negs	r2, r2
 8002c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	0018      	movs	r0, r3
 8002c66:	f7fd fbc1 	bl	80003ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2280      	movs	r2, #128	@ 0x80
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d104      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	2380      	movs	r3, #128	@ 0x80
 8002c76:	019b      	lsls	r3, r3, #6
 8002c78:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c7a:	d00b      	beq.n	8002c94 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2280      	movs	r2, #128	@ 0x80
 8002c80:	4013      	ands	r3, r2
 8002c82:	d007      	beq.n	8002c94 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1e      	ldr	r2, [pc, #120]	@ (8002d04 <HAL_TIM_IRQHandler+0x208>)
 8002c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 ffa6 	bl	8003be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	2380      	movs	r3, #128	@ 0x80
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d00b      	beq.n	8002cb6 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2280      	movs	r2, #128	@ 0x80
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d007      	beq.n	8002cb6 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a17      	ldr	r2, [pc, #92]	@ (8002d08 <HAL_TIM_IRQHandler+0x20c>)
 8002cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f000 ff9d 	bl	8003bf0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2240      	movs	r2, #64	@ 0x40
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d00c      	beq.n	8002cd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2240      	movs	r2, #64	@ 0x40
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d008      	beq.n	8002cd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2241      	movs	r2, #65	@ 0x41
 8002ccc:	4252      	negs	r2, r2
 8002cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f000 fa08 	bl	80030e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d00c      	beq.n	8002cfa <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d008      	beq.n	8002cfa <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2221      	movs	r2, #33	@ 0x21
 8002cee:	4252      	negs	r2, r2
 8002cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f000 ff6b 	bl	8003bd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cfa:	46c0      	nop			@ (mov r8, r8)
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	b004      	add	sp, #16
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	46c0      	nop			@ (mov r8, r8)
 8002d04:	ffffdf7f 	.word	0xffffdf7f
 8002d08:	fffffeff 	.word	0xfffffeff

08002d0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d18:	2317      	movs	r3, #23
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	223c      	movs	r2, #60	@ 0x3c
 8002d24:	5c9b      	ldrb	r3, [r3, r2]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_TIM_PWM_ConfigChannel+0x22>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e0e5      	b.n	8002efa <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	223c      	movs	r2, #60	@ 0x3c
 8002d32:	2101      	movs	r1, #1
 8002d34:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b14      	cmp	r3, #20
 8002d3a:	d900      	bls.n	8002d3e <HAL_TIM_PWM_ConfigChannel+0x32>
 8002d3c:	e0d1      	b.n	8002ee2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	009a      	lsls	r2, r3, #2
 8002d42:	4b70      	ldr	r3, [pc, #448]	@ (8002f04 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002d44:	18d3      	adds	r3, r2, r3
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	0011      	movs	r1, r2
 8002d52:	0018      	movs	r0, r3
 8002d54:	f000 fa4a 	bl	80031ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2108      	movs	r1, #8
 8002d64:	430a      	orrs	r2, r1
 8002d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699a      	ldr	r2, [r3, #24]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2104      	movs	r1, #4
 8002d74:	438a      	bics	r2, r1
 8002d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6999      	ldr	r1, [r3, #24]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	691a      	ldr	r2, [r3, #16]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	619a      	str	r2, [r3, #24]
      break;
 8002d8a:	e0af      	b.n	8002eec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	0011      	movs	r1, r2
 8002d94:	0018      	movs	r0, r3
 8002d96:	f000 faa9 	bl	80032ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699a      	ldr	r2, [r3, #24]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2180      	movs	r1, #128	@ 0x80
 8002da6:	0109      	lsls	r1, r1, #4
 8002da8:	430a      	orrs	r2, r1
 8002daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4954      	ldr	r1, [pc, #336]	@ (8002f08 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002db8:	400a      	ands	r2, r1
 8002dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6999      	ldr	r1, [r3, #24]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	021a      	lsls	r2, r3, #8
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	619a      	str	r2, [r3, #24]
      break;
 8002dd0:	e08c      	b.n	8002eec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	0011      	movs	r1, r2
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f000 fb04 	bl	80033e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	69da      	ldr	r2, [r3, #28]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2108      	movs	r1, #8
 8002dec:	430a      	orrs	r2, r1
 8002dee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	69da      	ldr	r2, [r3, #28]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2104      	movs	r1, #4
 8002dfc:	438a      	bics	r2, r1
 8002dfe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69d9      	ldr	r1, [r3, #28]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	61da      	str	r2, [r3, #28]
      break;
 8002e12:	e06b      	b.n	8002eec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	0011      	movs	r1, r2
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f000 fb65 	bl	80034ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69da      	ldr	r2, [r3, #28]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2180      	movs	r1, #128	@ 0x80
 8002e2e:	0109      	lsls	r1, r1, #4
 8002e30:	430a      	orrs	r2, r1
 8002e32:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	69da      	ldr	r2, [r3, #28]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4932      	ldr	r1, [pc, #200]	@ (8002f08 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002e40:	400a      	ands	r2, r1
 8002e42:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	69d9      	ldr	r1, [r3, #28]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	021a      	lsls	r2, r3, #8
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	61da      	str	r2, [r3, #28]
      break;
 8002e58:	e048      	b.n	8002eec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	0011      	movs	r1, r2
 8002e62:	0018      	movs	r0, r3
 8002e64:	f000 fba6 	bl	80035b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2108      	movs	r1, #8
 8002e74:	430a      	orrs	r2, r1
 8002e76:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2104      	movs	r1, #4
 8002e84:	438a      	bics	r2, r1
 8002e86:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002e9a:	e027      	b.n	8002eec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	0011      	movs	r1, r2
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f000 fbdf 	bl	8003668 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2180      	movs	r1, #128	@ 0x80
 8002eb6:	0109      	lsls	r1, r1, #4
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4910      	ldr	r1, [pc, #64]	@ (8002f08 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002ec8:	400a      	ands	r2, r1
 8002eca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	021a      	lsls	r2, r3, #8
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002ee0:	e004      	b.n	8002eec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002ee2:	2317      	movs	r3, #23
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	701a      	strb	r2, [r3, #0]
      break;
 8002eea:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	223c      	movs	r2, #60	@ 0x3c
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	5499      	strb	r1, [r3, r2]

  return status;
 8002ef4:	2317      	movs	r3, #23
 8002ef6:	18fb      	adds	r3, r7, r3
 8002ef8:	781b      	ldrb	r3, [r3, #0]
}
 8002efa:	0018      	movs	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	b006      	add	sp, #24
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	46c0      	nop			@ (mov r8, r8)
 8002f04:	08004bec 	.word	0x08004bec
 8002f08:	fffffbff 	.word	0xfffffbff

08002f0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f16:	230f      	movs	r3, #15
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	223c      	movs	r2, #60	@ 0x3c
 8002f22:	5c9b      	ldrb	r3, [r3, r2]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_TIM_ConfigClockSource+0x20>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e0bc      	b.n	80030a6 <HAL_TIM_ConfigClockSource+0x19a>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	223c      	movs	r2, #60	@ 0x3c
 8002f30:	2101      	movs	r1, #1
 8002f32:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	223d      	movs	r2, #61	@ 0x3d
 8002f38:	2102      	movs	r1, #2
 8002f3a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4a5a      	ldr	r2, [pc, #360]	@ (80030b0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4a59      	ldr	r2, [pc, #356]	@ (80030b4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2280      	movs	r2, #128	@ 0x80
 8002f62:	0192      	lsls	r2, r2, #6
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d040      	beq.n	8002fea <HAL_TIM_ConfigClockSource+0xde>
 8002f68:	2280      	movs	r2, #128	@ 0x80
 8002f6a:	0192      	lsls	r2, r2, #6
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d900      	bls.n	8002f72 <HAL_TIM_ConfigClockSource+0x66>
 8002f70:	e088      	b.n	8003084 <HAL_TIM_ConfigClockSource+0x178>
 8002f72:	2280      	movs	r2, #128	@ 0x80
 8002f74:	0152      	lsls	r2, r2, #5
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d100      	bne.n	8002f7c <HAL_TIM_ConfigClockSource+0x70>
 8002f7a:	e088      	b.n	800308e <HAL_TIM_ConfigClockSource+0x182>
 8002f7c:	2280      	movs	r2, #128	@ 0x80
 8002f7e:	0152      	lsls	r2, r2, #5
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d900      	bls.n	8002f86 <HAL_TIM_ConfigClockSource+0x7a>
 8002f84:	e07e      	b.n	8003084 <HAL_TIM_ConfigClockSource+0x178>
 8002f86:	2b70      	cmp	r3, #112	@ 0x70
 8002f88:	d018      	beq.n	8002fbc <HAL_TIM_ConfigClockSource+0xb0>
 8002f8a:	d900      	bls.n	8002f8e <HAL_TIM_ConfigClockSource+0x82>
 8002f8c:	e07a      	b.n	8003084 <HAL_TIM_ConfigClockSource+0x178>
 8002f8e:	2b60      	cmp	r3, #96	@ 0x60
 8002f90:	d04f      	beq.n	8003032 <HAL_TIM_ConfigClockSource+0x126>
 8002f92:	d900      	bls.n	8002f96 <HAL_TIM_ConfigClockSource+0x8a>
 8002f94:	e076      	b.n	8003084 <HAL_TIM_ConfigClockSource+0x178>
 8002f96:	2b50      	cmp	r3, #80	@ 0x50
 8002f98:	d03b      	beq.n	8003012 <HAL_TIM_ConfigClockSource+0x106>
 8002f9a:	d900      	bls.n	8002f9e <HAL_TIM_ConfigClockSource+0x92>
 8002f9c:	e072      	b.n	8003084 <HAL_TIM_ConfigClockSource+0x178>
 8002f9e:	2b40      	cmp	r3, #64	@ 0x40
 8002fa0:	d057      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0x146>
 8002fa2:	d900      	bls.n	8002fa6 <HAL_TIM_ConfigClockSource+0x9a>
 8002fa4:	e06e      	b.n	8003084 <HAL_TIM_ConfigClockSource+0x178>
 8002fa6:	2b30      	cmp	r3, #48	@ 0x30
 8002fa8:	d063      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0x166>
 8002faa:	d86b      	bhi.n	8003084 <HAL_TIM_ConfigClockSource+0x178>
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	d060      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0x166>
 8002fb0:	d868      	bhi.n	8003084 <HAL_TIM_ConfigClockSource+0x178>
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d05d      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0x166>
 8002fb6:	2b10      	cmp	r3, #16
 8002fb8:	d05b      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0x166>
 8002fba:	e063      	b.n	8003084 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fcc:	f000 fc26 	bl	800381c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2277      	movs	r2, #119	@ 0x77
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	609a      	str	r2, [r3, #8]
      break;
 8002fe8:	e052      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ffa:	f000 fc0f 	bl	800381c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2180      	movs	r1, #128	@ 0x80
 800300a:	01c9      	lsls	r1, r1, #7
 800300c:	430a      	orrs	r2, r1
 800300e:	609a      	str	r2, [r3, #8]
      break;
 8003010:	e03e      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800301e:	001a      	movs	r2, r3
 8003020:	f000 fb80 	bl	8003724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2150      	movs	r1, #80	@ 0x50
 800302a:	0018      	movs	r0, r3
 800302c:	f000 fbda 	bl	80037e4 <TIM_ITRx_SetConfig>
      break;
 8003030:	e02e      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800303e:	001a      	movs	r2, r3
 8003040:	f000 fb9e 	bl	8003780 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2160      	movs	r1, #96	@ 0x60
 800304a:	0018      	movs	r0, r3
 800304c:	f000 fbca 	bl	80037e4 <TIM_ITRx_SetConfig>
      break;
 8003050:	e01e      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800305e:	001a      	movs	r2, r3
 8003060:	f000 fb60 	bl	8003724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2140      	movs	r1, #64	@ 0x40
 800306a:	0018      	movs	r0, r3
 800306c:	f000 fbba 	bl	80037e4 <TIM_ITRx_SetConfig>
      break;
 8003070:	e00e      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	0019      	movs	r1, r3
 800307c:	0010      	movs	r0, r2
 800307e:	f000 fbb1 	bl	80037e4 <TIM_ITRx_SetConfig>
      break;
 8003082:	e005      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003084:	230f      	movs	r3, #15
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	2201      	movs	r2, #1
 800308a:	701a      	strb	r2, [r3, #0]
      break;
 800308c:	e000      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800308e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	223d      	movs	r2, #61	@ 0x3d
 8003094:	2101      	movs	r1, #1
 8003096:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	223c      	movs	r2, #60	@ 0x3c
 800309c:	2100      	movs	r1, #0
 800309e:	5499      	strb	r1, [r3, r2]

  return status;
 80030a0:	230f      	movs	r3, #15
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	781b      	ldrb	r3, [r3, #0]
}
 80030a6:	0018      	movs	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b004      	add	sp, #16
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	46c0      	nop			@ (mov r8, r8)
 80030b0:	ffceff88 	.word	0xffceff88
 80030b4:	ffff00ff 	.word	0xffff00ff

080030b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030c0:	46c0      	nop			@ (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b002      	add	sp, #8
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030d0:	46c0      	nop			@ (mov r8, r8)
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b002      	add	sp, #8
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030e0:	46c0      	nop			@ (mov r8, r8)
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b002      	add	sp, #8
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030f0:	46c0      	nop			@ (mov r8, r8)
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b002      	add	sp, #8
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a32      	ldr	r2, [pc, #200]	@ (80031d4 <TIM_Base_SetConfig+0xdc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d003      	beq.n	8003118 <TIM_Base_SetConfig+0x20>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a31      	ldr	r2, [pc, #196]	@ (80031d8 <TIM_Base_SetConfig+0xe0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d108      	bne.n	800312a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2270      	movs	r2, #112	@ 0x70
 800311c:	4393      	bics	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a29      	ldr	r2, [pc, #164]	@ (80031d4 <TIM_Base_SetConfig+0xdc>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00f      	beq.n	8003152 <TIM_Base_SetConfig+0x5a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a28      	ldr	r2, [pc, #160]	@ (80031d8 <TIM_Base_SetConfig+0xe0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00b      	beq.n	8003152 <TIM_Base_SetConfig+0x5a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a27      	ldr	r2, [pc, #156]	@ (80031dc <TIM_Base_SetConfig+0xe4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d007      	beq.n	8003152 <TIM_Base_SetConfig+0x5a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a26      	ldr	r2, [pc, #152]	@ (80031e0 <TIM_Base_SetConfig+0xe8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d003      	beq.n	8003152 <TIM_Base_SetConfig+0x5a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a25      	ldr	r2, [pc, #148]	@ (80031e4 <TIM_Base_SetConfig+0xec>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d108      	bne.n	8003164 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4a24      	ldr	r2, [pc, #144]	@ (80031e8 <TIM_Base_SetConfig+0xf0>)
 8003156:	4013      	ands	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2280      	movs	r2, #128	@ 0x80
 8003168:	4393      	bics	r3, r2
 800316a:	001a      	movs	r2, r3
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	4313      	orrs	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a11      	ldr	r2, [pc, #68]	@ (80031d4 <TIM_Base_SetConfig+0xdc>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d007      	beq.n	80031a2 <TIM_Base_SetConfig+0xaa>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a12      	ldr	r2, [pc, #72]	@ (80031e0 <TIM_Base_SetConfig+0xe8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d003      	beq.n	80031a2 <TIM_Base_SetConfig+0xaa>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a11      	ldr	r2, [pc, #68]	@ (80031e4 <TIM_Base_SetConfig+0xec>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d103      	bne.n	80031aa <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	2201      	movs	r2, #1
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d106      	bne.n	80031ca <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	2201      	movs	r2, #1
 80031c2:	4393      	bics	r3, r2
 80031c4:	001a      	movs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	611a      	str	r2, [r3, #16]
  }
}
 80031ca:	46c0      	nop			@ (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b004      	add	sp, #16
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			@ (mov r8, r8)
 80031d4:	40012c00 	.word	0x40012c00
 80031d8:	40000400 	.word	0x40000400
 80031dc:	40002000 	.word	0x40002000
 80031e0:	40014400 	.word	0x40014400
 80031e4:	40014800 	.word	0x40014800
 80031e8:	fffffcff 	.word	0xfffffcff

080031ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	2201      	movs	r2, #1
 8003202:	4393      	bics	r3, r2
 8003204:	001a      	movs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4a2e      	ldr	r2, [pc, #184]	@ (80032d4 <TIM_OC1_SetConfig+0xe8>)
 800321a:	4013      	ands	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2203      	movs	r2, #3
 8003222:	4393      	bics	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4313      	orrs	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2202      	movs	r2, #2
 8003234:	4393      	bics	r3, r2
 8003236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a24      	ldr	r2, [pc, #144]	@ (80032d8 <TIM_OC1_SetConfig+0xec>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d007      	beq.n	800325a <TIM_OC1_SetConfig+0x6e>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a23      	ldr	r2, [pc, #140]	@ (80032dc <TIM_OC1_SetConfig+0xf0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d003      	beq.n	800325a <TIM_OC1_SetConfig+0x6e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a22      	ldr	r2, [pc, #136]	@ (80032e0 <TIM_OC1_SetConfig+0xf4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d10c      	bne.n	8003274 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2208      	movs	r2, #8
 800325e:	4393      	bics	r3, r2
 8003260:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	4313      	orrs	r3, r2
 800326a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2204      	movs	r2, #4
 8003270:	4393      	bics	r3, r2
 8003272:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a18      	ldr	r2, [pc, #96]	@ (80032d8 <TIM_OC1_SetConfig+0xec>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d007      	beq.n	800328c <TIM_OC1_SetConfig+0xa0>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a17      	ldr	r2, [pc, #92]	@ (80032dc <TIM_OC1_SetConfig+0xf0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d003      	beq.n	800328c <TIM_OC1_SetConfig+0xa0>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a16      	ldr	r2, [pc, #88]	@ (80032e0 <TIM_OC1_SetConfig+0xf4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d111      	bne.n	80032b0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4a15      	ldr	r2, [pc, #84]	@ (80032e4 <TIM_OC1_SetConfig+0xf8>)
 8003290:	4013      	ands	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4a14      	ldr	r2, [pc, #80]	@ (80032e8 <TIM_OC1_SetConfig+0xfc>)
 8003298:	4013      	ands	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	621a      	str	r2, [r3, #32]
}
 80032ca:	46c0      	nop			@ (mov r8, r8)
 80032cc:	46bd      	mov	sp, r7
 80032ce:	b006      	add	sp, #24
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	fffeff8f 	.word	0xfffeff8f
 80032d8:	40012c00 	.word	0x40012c00
 80032dc:	40014400 	.word	0x40014400
 80032e0:	40014800 	.word	0x40014800
 80032e4:	fffffeff 	.word	0xfffffeff
 80032e8:	fffffdff 	.word	0xfffffdff

080032ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	2210      	movs	r2, #16
 8003302:	4393      	bics	r3, r2
 8003304:	001a      	movs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4a2c      	ldr	r2, [pc, #176]	@ (80033cc <TIM_OC2_SetConfig+0xe0>)
 800331a:	4013      	ands	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4a2b      	ldr	r2, [pc, #172]	@ (80033d0 <TIM_OC2_SetConfig+0xe4>)
 8003322:	4013      	ands	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	021b      	lsls	r3, r3, #8
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2220      	movs	r2, #32
 8003336:	4393      	bics	r3, r2
 8003338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a22      	ldr	r2, [pc, #136]	@ (80033d4 <TIM_OC2_SetConfig+0xe8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d10d      	bne.n	800336a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2280      	movs	r2, #128	@ 0x80
 8003352:	4393      	bics	r3, r2
 8003354:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	4313      	orrs	r3, r2
 8003360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2240      	movs	r2, #64	@ 0x40
 8003366:	4393      	bics	r3, r2
 8003368:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a19      	ldr	r2, [pc, #100]	@ (80033d4 <TIM_OC2_SetConfig+0xe8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d007      	beq.n	8003382 <TIM_OC2_SetConfig+0x96>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a18      	ldr	r2, [pc, #96]	@ (80033d8 <TIM_OC2_SetConfig+0xec>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d003      	beq.n	8003382 <TIM_OC2_SetConfig+0x96>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a17      	ldr	r2, [pc, #92]	@ (80033dc <TIM_OC2_SetConfig+0xf0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d113      	bne.n	80033aa <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4a16      	ldr	r2, [pc, #88]	@ (80033e0 <TIM_OC2_SetConfig+0xf4>)
 8003386:	4013      	ands	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4a15      	ldr	r2, [pc, #84]	@ (80033e4 <TIM_OC2_SetConfig+0xf8>)
 800338e:	4013      	ands	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	621a      	str	r2, [r3, #32]
}
 80033c4:	46c0      	nop			@ (mov r8, r8)
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b006      	add	sp, #24
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	feff8fff 	.word	0xfeff8fff
 80033d0:	fffffcff 	.word	0xfffffcff
 80033d4:	40012c00 	.word	0x40012c00
 80033d8:	40014400 	.word	0x40014400
 80033dc:	40014800 	.word	0x40014800
 80033e0:	fffffbff 	.word	0xfffffbff
 80033e4:	fffff7ff 	.word	0xfffff7ff

080033e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	4a31      	ldr	r2, [pc, #196]	@ (80034c4 <TIM_OC3_SetConfig+0xdc>)
 80033fe:	401a      	ands	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4a2d      	ldr	r2, [pc, #180]	@ (80034c8 <TIM_OC3_SetConfig+0xe0>)
 8003414:	4013      	ands	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2203      	movs	r2, #3
 800341c:	4393      	bics	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	4313      	orrs	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	4a27      	ldr	r2, [pc, #156]	@ (80034cc <TIM_OC3_SetConfig+0xe4>)
 800342e:	4013      	ands	r3, r2
 8003430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	021b      	lsls	r3, r3, #8
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a23      	ldr	r2, [pc, #140]	@ (80034d0 <TIM_OC3_SetConfig+0xe8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d10d      	bne.n	8003462 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	4a22      	ldr	r2, [pc, #136]	@ (80034d4 <TIM_OC3_SetConfig+0xec>)
 800344a:	4013      	ands	r3, r2
 800344c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	4a1e      	ldr	r2, [pc, #120]	@ (80034d8 <TIM_OC3_SetConfig+0xf0>)
 800345e:	4013      	ands	r3, r2
 8003460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a1a      	ldr	r2, [pc, #104]	@ (80034d0 <TIM_OC3_SetConfig+0xe8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d007      	beq.n	800347a <TIM_OC3_SetConfig+0x92>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a1b      	ldr	r2, [pc, #108]	@ (80034dc <TIM_OC3_SetConfig+0xf4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d003      	beq.n	800347a <TIM_OC3_SetConfig+0x92>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a1a      	ldr	r2, [pc, #104]	@ (80034e0 <TIM_OC3_SetConfig+0xf8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d113      	bne.n	80034a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4a19      	ldr	r2, [pc, #100]	@ (80034e4 <TIM_OC3_SetConfig+0xfc>)
 800347e:	4013      	ands	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4a18      	ldr	r2, [pc, #96]	@ (80034e8 <TIM_OC3_SetConfig+0x100>)
 8003486:	4013      	ands	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	621a      	str	r2, [r3, #32]
}
 80034bc:	46c0      	nop			@ (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b006      	add	sp, #24
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	fffffeff 	.word	0xfffffeff
 80034c8:	fffeff8f 	.word	0xfffeff8f
 80034cc:	fffffdff 	.word	0xfffffdff
 80034d0:	40012c00 	.word	0x40012c00
 80034d4:	fffff7ff 	.word	0xfffff7ff
 80034d8:	fffffbff 	.word	0xfffffbff
 80034dc:	40014400 	.word	0x40014400
 80034e0:	40014800 	.word	0x40014800
 80034e4:	ffffefff 	.word	0xffffefff
 80034e8:	ffffdfff 	.word	0xffffdfff

080034ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	4a24      	ldr	r2, [pc, #144]	@ (8003594 <TIM_OC4_SetConfig+0xa8>)
 8003502:	401a      	ands	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4a20      	ldr	r2, [pc, #128]	@ (8003598 <TIM_OC4_SetConfig+0xac>)
 8003518:	4013      	ands	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4a1f      	ldr	r2, [pc, #124]	@ (800359c <TIM_OC4_SetConfig+0xb0>)
 8003520:	4013      	ands	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	021b      	lsls	r3, r3, #8
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4313      	orrs	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4a1b      	ldr	r2, [pc, #108]	@ (80035a0 <TIM_OC4_SetConfig+0xb4>)
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	031b      	lsls	r3, r3, #12
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a17      	ldr	r2, [pc, #92]	@ (80035a4 <TIM_OC4_SetConfig+0xb8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d007      	beq.n	800355c <TIM_OC4_SetConfig+0x70>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a16      	ldr	r2, [pc, #88]	@ (80035a8 <TIM_OC4_SetConfig+0xbc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d003      	beq.n	800355c <TIM_OC4_SetConfig+0x70>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a15      	ldr	r2, [pc, #84]	@ (80035ac <TIM_OC4_SetConfig+0xc0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d109      	bne.n	8003570 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	4a14      	ldr	r2, [pc, #80]	@ (80035b0 <TIM_OC4_SetConfig+0xc4>)
 8003560:	4013      	ands	r3, r2
 8003562:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	019b      	lsls	r3, r3, #6
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	4313      	orrs	r3, r2
 800356e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	621a      	str	r2, [r3, #32]
}
 800358a:	46c0      	nop			@ (mov r8, r8)
 800358c:	46bd      	mov	sp, r7
 800358e:	b006      	add	sp, #24
 8003590:	bd80      	pop	{r7, pc}
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	ffffefff 	.word	0xffffefff
 8003598:	feff8fff 	.word	0xfeff8fff
 800359c:	fffffcff 	.word	0xfffffcff
 80035a0:	ffffdfff 	.word	0xffffdfff
 80035a4:	40012c00 	.word	0x40012c00
 80035a8:	40014400 	.word	0x40014400
 80035ac:	40014800 	.word	0x40014800
 80035b0:	ffffbfff 	.word	0xffffbfff

080035b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	4a21      	ldr	r2, [pc, #132]	@ (8003650 <TIM_OC5_SetConfig+0x9c>)
 80035ca:	401a      	ands	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4a1d      	ldr	r2, [pc, #116]	@ (8003654 <TIM_OC5_SetConfig+0xa0>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4a19      	ldr	r2, [pc, #100]	@ (8003658 <TIM_OC5_SetConfig+0xa4>)
 80035f2:	4013      	ands	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	041b      	lsls	r3, r3, #16
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a15      	ldr	r2, [pc, #84]	@ (800365c <TIM_OC5_SetConfig+0xa8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d007      	beq.n	800361a <TIM_OC5_SetConfig+0x66>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a14      	ldr	r2, [pc, #80]	@ (8003660 <TIM_OC5_SetConfig+0xac>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d003      	beq.n	800361a <TIM_OC5_SetConfig+0x66>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a13      	ldr	r2, [pc, #76]	@ (8003664 <TIM_OC5_SetConfig+0xb0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d109      	bne.n	800362e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	4a0c      	ldr	r2, [pc, #48]	@ (8003650 <TIM_OC5_SetConfig+0x9c>)
 800361e:	4013      	ands	r3, r2
 8003620:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	021b      	lsls	r3, r3, #8
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	4313      	orrs	r3, r2
 800362c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	621a      	str	r2, [r3, #32]
}
 8003648:	46c0      	nop			@ (mov r8, r8)
 800364a:	46bd      	mov	sp, r7
 800364c:	b006      	add	sp, #24
 800364e:	bd80      	pop	{r7, pc}
 8003650:	fffeffff 	.word	0xfffeffff
 8003654:	fffeff8f 	.word	0xfffeff8f
 8003658:	fffdffff 	.word	0xfffdffff
 800365c:	40012c00 	.word	0x40012c00
 8003660:	40014400 	.word	0x40014400
 8003664:	40014800 	.word	0x40014800

08003668 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	4a22      	ldr	r2, [pc, #136]	@ (8003708 <TIM_OC6_SetConfig+0xa0>)
 800367e:	401a      	ands	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4a1e      	ldr	r2, [pc, #120]	@ (800370c <TIM_OC6_SetConfig+0xa4>)
 8003694:	4013      	ands	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003710 <TIM_OC6_SetConfig+0xa8>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	051b      	lsls	r3, r3, #20
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a16      	ldr	r2, [pc, #88]	@ (8003714 <TIM_OC6_SetConfig+0xac>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d007      	beq.n	80036d0 <TIM_OC6_SetConfig+0x68>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a15      	ldr	r2, [pc, #84]	@ (8003718 <TIM_OC6_SetConfig+0xb0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d003      	beq.n	80036d0 <TIM_OC6_SetConfig+0x68>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a14      	ldr	r2, [pc, #80]	@ (800371c <TIM_OC6_SetConfig+0xb4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d109      	bne.n	80036e4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	4a13      	ldr	r2, [pc, #76]	@ (8003720 <TIM_OC6_SetConfig+0xb8>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	029b      	lsls	r3, r3, #10
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	621a      	str	r2, [r3, #32]
}
 80036fe:	46c0      	nop			@ (mov r8, r8)
 8003700:	46bd      	mov	sp, r7
 8003702:	b006      	add	sp, #24
 8003704:	bd80      	pop	{r7, pc}
 8003706:	46c0      	nop			@ (mov r8, r8)
 8003708:	ffefffff 	.word	0xffefffff
 800370c:	feff8fff 	.word	0xfeff8fff
 8003710:	ffdfffff 	.word	0xffdfffff
 8003714:	40012c00 	.word	0x40012c00
 8003718:	40014400 	.word	0x40014400
 800371c:	40014800 	.word	0x40014800
 8003720:	fffbffff 	.word	0xfffbffff

08003724 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	2201      	movs	r2, #1
 800373c:	4393      	bics	r3, r2
 800373e:	001a      	movs	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	22f0      	movs	r2, #240	@ 0xf0
 800374e:	4393      	bics	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	220a      	movs	r2, #10
 8003760:	4393      	bics	r3, r2
 8003762:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	4313      	orrs	r3, r2
 800376a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	621a      	str	r2, [r3, #32]
}
 8003778:	46c0      	nop			@ (mov r8, r8)
 800377a:	46bd      	mov	sp, r7
 800377c:	b006      	add	sp, #24
 800377e:	bd80      	pop	{r7, pc}

08003780 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	2210      	movs	r2, #16
 8003798:	4393      	bics	r3, r2
 800379a:	001a      	movs	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4a0d      	ldr	r2, [pc, #52]	@ (80037e0 <TIM_TI2_ConfigInputStage+0x60>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	031b      	lsls	r3, r3, #12
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	22a0      	movs	r2, #160	@ 0xa0
 80037bc:	4393      	bics	r3, r2
 80037be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	621a      	str	r2, [r3, #32]
}
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	46bd      	mov	sp, r7
 80037da:	b006      	add	sp, #24
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	46c0      	nop			@ (mov r8, r8)
 80037e0:	ffff0fff 	.word	0xffff0fff

080037e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4a08      	ldr	r2, [pc, #32]	@ (8003818 <TIM_ITRx_SetConfig+0x34>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4313      	orrs	r3, r2
 8003802:	2207      	movs	r2, #7
 8003804:	4313      	orrs	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	609a      	str	r2, [r3, #8]
}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	46bd      	mov	sp, r7
 8003812:	b004      	add	sp, #16
 8003814:	bd80      	pop	{r7, pc}
 8003816:	46c0      	nop			@ (mov r8, r8)
 8003818:	ffcfff8f 	.word	0xffcfff8f

0800381c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	4a09      	ldr	r2, [pc, #36]	@ (8003858 <TIM_ETR_SetConfig+0x3c>)
 8003834:	4013      	ands	r3, r2
 8003836:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	021a      	lsls	r2, r3, #8
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	431a      	orrs	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4313      	orrs	r3, r2
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	609a      	str	r2, [r3, #8]
}
 8003850:	46c0      	nop			@ (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	b006      	add	sp, #24
 8003856:	bd80      	pop	{r7, pc}
 8003858:	ffff00ff 	.word	0xffff00ff

0800385c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	221f      	movs	r2, #31
 800386c:	4013      	ands	r3, r2
 800386e:	2201      	movs	r2, #1
 8003870:	409a      	lsls	r2, r3
 8003872:	0013      	movs	r3, r2
 8003874:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	43d2      	mvns	r2, r2
 800387e:	401a      	ands	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a1a      	ldr	r2, [r3, #32]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	211f      	movs	r1, #31
 800388c:	400b      	ands	r3, r1
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	4099      	lsls	r1, r3
 8003892:	000b      	movs	r3, r1
 8003894:	431a      	orrs	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	621a      	str	r2, [r3, #32]
}
 800389a:	46c0      	nop			@ (mov r8, r8)
 800389c:	46bd      	mov	sp, r7
 800389e:	b006      	add	sp, #24
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d108      	bne.n	80038c6 <HAL_TIMEx_PWMN_Start+0x22>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2244      	movs	r2, #68	@ 0x44
 80038b8:	5c9b      	ldrb	r3, [r3, r2]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	1e5a      	subs	r2, r3, #1
 80038c0:	4193      	sbcs	r3, r2
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	e01f      	b.n	8003906 <HAL_TIMEx_PWMN_Start+0x62>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d108      	bne.n	80038de <HAL_TIMEx_PWMN_Start+0x3a>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2245      	movs	r2, #69	@ 0x45
 80038d0:	5c9b      	ldrb	r3, [r3, r2]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	1e5a      	subs	r2, r3, #1
 80038d8:	4193      	sbcs	r3, r2
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	e013      	b.n	8003906 <HAL_TIMEx_PWMN_Start+0x62>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d108      	bne.n	80038f6 <HAL_TIMEx_PWMN_Start+0x52>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2246      	movs	r2, #70	@ 0x46
 80038e8:	5c9b      	ldrb	r3, [r3, r2]
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	1e5a      	subs	r2, r3, #1
 80038f0:	4193      	sbcs	r3, r2
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	e007      	b.n	8003906 <HAL_TIMEx_PWMN_Start+0x62>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2247      	movs	r2, #71	@ 0x47
 80038fa:	5c9b      	ldrb	r3, [r3, r2]
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	3b01      	subs	r3, #1
 8003900:	1e5a      	subs	r2, r3, #1
 8003902:	4193      	sbcs	r3, r2
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e057      	b.n	80039be <HAL_TIMEx_PWMN_Start+0x11a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d104      	bne.n	800391e <HAL_TIMEx_PWMN_Start+0x7a>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2244      	movs	r2, #68	@ 0x44
 8003918:	2102      	movs	r1, #2
 800391a:	5499      	strb	r1, [r3, r2]
 800391c:	e013      	b.n	8003946 <HAL_TIMEx_PWMN_Start+0xa2>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b04      	cmp	r3, #4
 8003922:	d104      	bne.n	800392e <HAL_TIMEx_PWMN_Start+0x8a>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2245      	movs	r2, #69	@ 0x45
 8003928:	2102      	movs	r1, #2
 800392a:	5499      	strb	r1, [r3, r2]
 800392c:	e00b      	b.n	8003946 <HAL_TIMEx_PWMN_Start+0xa2>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b08      	cmp	r3, #8
 8003932:	d104      	bne.n	800393e <HAL_TIMEx_PWMN_Start+0x9a>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2246      	movs	r2, #70	@ 0x46
 8003938:	2102      	movs	r1, #2
 800393a:	5499      	strb	r1, [r3, r2]
 800393c:	e003      	b.n	8003946 <HAL_TIMEx_PWMN_Start+0xa2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2247      	movs	r2, #71	@ 0x47
 8003942:	2102      	movs	r1, #2
 8003944:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6839      	ldr	r1, [r7, #0]
 800394c:	2204      	movs	r2, #4
 800394e:	0018      	movs	r0, r3
 8003950:	f000 f956 	bl	8003c00 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2180      	movs	r1, #128	@ 0x80
 8003960:	0209      	lsls	r1, r1, #8
 8003962:	430a      	orrs	r2, r1
 8003964:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a17      	ldr	r2, [pc, #92]	@ (80039c8 <HAL_TIMEx_PWMN_Start+0x124>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d004      	beq.n	800397a <HAL_TIMEx_PWMN_Start+0xd6>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a15      	ldr	r2, [pc, #84]	@ (80039cc <HAL_TIMEx_PWMN_Start+0x128>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d116      	bne.n	80039a8 <HAL_TIMEx_PWMN_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	4a13      	ldr	r2, [pc, #76]	@ (80039d0 <HAL_TIMEx_PWMN_Start+0x12c>)
 8003982:	4013      	ands	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2b06      	cmp	r3, #6
 800398a:	d016      	beq.n	80039ba <HAL_TIMEx_PWMN_Start+0x116>
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	2380      	movs	r3, #128	@ 0x80
 8003990:	025b      	lsls	r3, r3, #9
 8003992:	429a      	cmp	r2, r3
 8003994:	d011      	beq.n	80039ba <HAL_TIMEx_PWMN_Start+0x116>
    {
      __HAL_TIM_ENABLE(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2101      	movs	r1, #1
 80039a2:	430a      	orrs	r2, r1
 80039a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a6:	e008      	b.n	80039ba <HAL_TIMEx_PWMN_Start+0x116>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2101      	movs	r1, #1
 80039b4:	430a      	orrs	r2, r1
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	e000      	b.n	80039bc <HAL_TIMEx_PWMN_Start+0x118>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ba:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	0018      	movs	r0, r3
 80039c0:	46bd      	mov	sp, r7
 80039c2:	b004      	add	sp, #16
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	46c0      	nop			@ (mov r8, r8)
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	40000400 	.word	0x40000400
 80039d0:	00010007 	.word	0x00010007

080039d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	223c      	movs	r2, #60	@ 0x3c
 80039e2:	5c9b      	ldrb	r3, [r3, r2]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e04a      	b.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	223c      	movs	r2, #60	@ 0x3c
 80039f0:	2101      	movs	r1, #1
 80039f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	223d      	movs	r2, #61	@ 0x3d
 80039f8:	2102      	movs	r1, #2
 80039fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a1e      	ldr	r2, [pc, #120]	@ (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d108      	bne.n	8003a28 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4a1d      	ldr	r2, [pc, #116]	@ (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2270      	movs	r2, #112	@ 0x70
 8003a2c:	4393      	bics	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a11      	ldr	r2, [pc, #68]	@ (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d004      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a10      	ldr	r2, [pc, #64]	@ (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d10c      	bne.n	8003a70 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2280      	movs	r2, #128	@ 0x80
 8003a5a:	4393      	bics	r3, r2
 8003a5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	223d      	movs	r2, #61	@ 0x3d
 8003a74:	2101      	movs	r1, #1
 8003a76:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	223c      	movs	r2, #60	@ 0x3c
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	0018      	movs	r0, r3
 8003a84:	46bd      	mov	sp, r7
 8003a86:	b004      	add	sp, #16
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	46c0      	nop			@ (mov r8, r8)
 8003a8c:	40012c00 	.word	0x40012c00
 8003a90:	ff0fffff 	.word	0xff0fffff
 8003a94:	40000400 	.word	0x40000400

08003a98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	223c      	movs	r2, #60	@ 0x3c
 8003aaa:	5c9b      	ldrb	r3, [r3, r2]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e06f      	b.n	8003b94 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	223c      	movs	r2, #60	@ 0x3c
 8003ab8:	2101      	movs	r1, #1
 8003aba:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	22ff      	movs	r2, #255	@ 0xff
 8003ac0:	4393      	bics	r3, r2
 8003ac2:	001a      	movs	r2, r3
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4a33      	ldr	r2, [pc, #204]	@ (8003b9c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003ad0:	401a      	ands	r2, r3
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4a30      	ldr	r2, [pc, #192]	@ (8003ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003ade:	401a      	ands	r2, r3
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4a2e      	ldr	r2, [pc, #184]	@ (8003ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003aec:	401a      	ands	r2, r3
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4a2b      	ldr	r2, [pc, #172]	@ (8003ba8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003afa:	401a      	ands	r2, r3
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4a29      	ldr	r2, [pc, #164]	@ (8003bac <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003b08:	401a      	ands	r2, r3
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4a26      	ldr	r2, [pc, #152]	@ (8003bb0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003b16:	401a      	ands	r2, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4a24      	ldr	r2, [pc, #144]	@ (8003bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003b24:	401a      	ands	r2, r3
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	041b      	lsls	r3, r3, #16
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a21      	ldr	r2, [pc, #132]	@ (8003bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003b34:	401a      	ands	r2, r3
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a1e      	ldr	r2, [pc, #120]	@ (8003bbc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d11c      	bne.n	8003b82 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003b4c:	401a      	ands	r2, r3
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b52:	051b      	lsls	r3, r3, #20
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8003bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003b5c:	401a      	ands	r2, r3
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4a17      	ldr	r2, [pc, #92]	@ (8003bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003b6a:	401a      	ands	r2, r3
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4a15      	ldr	r2, [pc, #84]	@ (8003bcc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003b78:	401a      	ands	r2, r3
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	223c      	movs	r2, #60	@ 0x3c
 8003b8e:	2100      	movs	r1, #0
 8003b90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	0018      	movs	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b004      	add	sp, #16
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	fffffcff 	.word	0xfffffcff
 8003ba0:	fffffbff 	.word	0xfffffbff
 8003ba4:	fffff7ff 	.word	0xfffff7ff
 8003ba8:	ffffefff 	.word	0xffffefff
 8003bac:	ffffdfff 	.word	0xffffdfff
 8003bb0:	ffffbfff 	.word	0xffffbfff
 8003bb4:	fff0ffff 	.word	0xfff0ffff
 8003bb8:	efffffff 	.word	0xefffffff
 8003bbc:	40012c00 	.word	0x40012c00
 8003bc0:	ff0fffff 	.word	0xff0fffff
 8003bc4:	feffffff 	.word	0xfeffffff
 8003bc8:	fdffffff 	.word	0xfdffffff
 8003bcc:	dfffffff 	.word	0xdfffffff

08003bd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bd8:	46c0      	nop			@ (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b002      	add	sp, #8
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003be8:	46c0      	nop			@ (mov r8, r8)
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b002      	add	sp, #8
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bf8:	46c0      	nop			@ (mov r8, r8)
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b002      	add	sp, #8
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	220f      	movs	r2, #15
 8003c10:	4013      	ands	r3, r2
 8003c12:	2204      	movs	r2, #4
 8003c14:	409a      	lsls	r2, r3
 8003c16:	0013      	movs	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	43d2      	mvns	r2, r2
 8003c22:	401a      	ands	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a1a      	ldr	r2, [r3, #32]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	210f      	movs	r1, #15
 8003c30:	400b      	ands	r3, r1
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	4099      	lsls	r1, r3
 8003c36:	000b      	movs	r3, r1
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	621a      	str	r2, [r3, #32]
}
 8003c3e:	46c0      	nop			@ (mov r8, r8)
 8003c40:	46bd      	mov	sp, r7
 8003c42:	b006      	add	sp, #24
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e046      	b.n	8003ce8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2288      	movs	r2, #136	@ 0x88
 8003c5e:	589b      	ldr	r3, [r3, r2]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d107      	bne.n	8003c74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2284      	movs	r2, #132	@ 0x84
 8003c68:	2100      	movs	r1, #0
 8003c6a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f7fd f864 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2288      	movs	r2, #136	@ 0x88
 8003c78:	2124      	movs	r1, #36	@ 0x24
 8003c7a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2101      	movs	r1, #1
 8003c88:	438a      	bics	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	0018      	movs	r0, r3
 8003c98:	f000 fa10 	bl	80040bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f000 f8a2 	bl	8003de8 <UART_SetConfig>
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e01c      	b.n	8003ce8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	490d      	ldr	r1, [pc, #52]	@ (8003cf0 <HAL_UART_Init+0xa8>)
 8003cba:	400a      	ands	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	212a      	movs	r1, #42	@ 0x2a
 8003cca:	438a      	bics	r2, r1
 8003ccc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2101      	movs	r1, #1
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f000 fa9f 	bl	8004224 <UART_CheckIdleState>
 8003ce6:	0003      	movs	r3, r0
}
 8003ce8:	0018      	movs	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b002      	add	sp, #8
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	ffffb7ff 	.word	0xffffb7ff

08003cf4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	1dbb      	adds	r3, r7, #6
 8003d00:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	228c      	movs	r2, #140	@ 0x8c
 8003d06:	589b      	ldr	r3, [r3, r2]
 8003d08:	2b20      	cmp	r3, #32
 8003d0a:	d145      	bne.n	8003d98 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_UART_Receive_DMA+0x26>
 8003d12:	1dbb      	adds	r3, r7, #6
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e03d      	b.n	8003d9a <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	2380      	movs	r3, #128	@ 0x80
 8003d24:	015b      	lsls	r3, r3, #5
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d109      	bne.n	8003d3e <HAL_UART_Receive_DMA+0x4a>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d105      	bne.n	8003d3e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2201      	movs	r2, #1
 8003d36:	4013      	ands	r3, r2
 8003d38:	d001      	beq.n	8003d3e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e02d      	b.n	8003d9a <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	2380      	movs	r3, #128	@ 0x80
 8003d4c:	041b      	lsls	r3, r3, #16
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d019      	beq.n	8003d86 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d52:	f3ef 8310 	mrs	r3, PRIMASK
 8003d56:	613b      	str	r3, [r7, #16]
  return(result);
 8003d58:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d5a:	61fb      	str	r3, [r7, #28]
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f383 8810 	msr	PRIMASK, r3
}
 8003d66:	46c0      	nop			@ (mov r8, r8)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2180      	movs	r1, #128	@ 0x80
 8003d74:	04c9      	lsls	r1, r1, #19
 8003d76:	430a      	orrs	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	f383 8810 	msr	PRIMASK, r3
}
 8003d84:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003d86:	1dbb      	adds	r3, r7, #6
 8003d88:	881a      	ldrh	r2, [r3, #0]
 8003d8a:	68b9      	ldr	r1, [r7, #8]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f000 fb62 	bl	8004458 <UART_Start_Receive_DMA>
 8003d94:	0003      	movs	r3, r0
 8003d96:	e000      	b.n	8003d9a <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003d98:	2302      	movs	r3, #2
  }
}
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b008      	add	sp, #32
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b082      	sub	sp, #8
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003daa:	46c0      	nop			@ (mov r8, r8)
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b002      	add	sp, #8
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	b002      	add	sp, #8
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003dca:	46c0      	nop			@ (mov r8, r8)
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	b002      	add	sp, #8
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	000a      	movs	r2, r1
 8003ddc:	1cbb      	adds	r3, r7, #2
 8003dde:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003de0:	46c0      	nop			@ (mov r8, r8)
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b002      	add	sp, #8
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003df0:	231a      	movs	r3, #26
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	2200      	movs	r2, #0
 8003df6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4aa1      	ldr	r2, [pc, #644]	@ (800409c <UART_SetConfig+0x2b4>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	0019      	movs	r1, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	4a9c      	ldr	r2, [pc, #624]	@ (80040a0 <UART_SetConfig+0x2b8>)
 8003e2e:	4013      	ands	r3, r2
 8003e30:	0019      	movs	r1, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	69fa      	ldr	r2, [r7, #28]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4a93      	ldr	r2, [pc, #588]	@ (80040a4 <UART_SetConfig+0x2bc>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	0019      	movs	r1, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69fa      	ldr	r2, [r7, #28]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6a:	220f      	movs	r2, #15
 8003e6c:	4393      	bics	r3, r2
 8003e6e:	0019      	movs	r1, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a89      	ldr	r2, [pc, #548]	@ (80040a8 <UART_SetConfig+0x2c0>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d127      	bne.n	8003ed6 <UART_SetConfig+0xee>
 8003e86:	4b89      	ldr	r3, [pc, #548]	@ (80040ac <UART_SetConfig+0x2c4>)
 8003e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b03      	cmp	r3, #3
 8003e90:	d017      	beq.n	8003ec2 <UART_SetConfig+0xda>
 8003e92:	d81b      	bhi.n	8003ecc <UART_SetConfig+0xe4>
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d00a      	beq.n	8003eae <UART_SetConfig+0xc6>
 8003e98:	d818      	bhi.n	8003ecc <UART_SetConfig+0xe4>
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <UART_SetConfig+0xbc>
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d00a      	beq.n	8003eb8 <UART_SetConfig+0xd0>
 8003ea2:	e013      	b.n	8003ecc <UART_SetConfig+0xe4>
 8003ea4:	231b      	movs	r3, #27
 8003ea6:	18fb      	adds	r3, r7, r3
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	701a      	strb	r2, [r3, #0]
 8003eac:	e021      	b.n	8003ef2 <UART_SetConfig+0x10a>
 8003eae:	231b      	movs	r3, #27
 8003eb0:	18fb      	adds	r3, r7, r3
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	e01c      	b.n	8003ef2 <UART_SetConfig+0x10a>
 8003eb8:	231b      	movs	r3, #27
 8003eba:	18fb      	adds	r3, r7, r3
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	701a      	strb	r2, [r3, #0]
 8003ec0:	e017      	b.n	8003ef2 <UART_SetConfig+0x10a>
 8003ec2:	231b      	movs	r3, #27
 8003ec4:	18fb      	adds	r3, r7, r3
 8003ec6:	2208      	movs	r2, #8
 8003ec8:	701a      	strb	r2, [r3, #0]
 8003eca:	e012      	b.n	8003ef2 <UART_SetConfig+0x10a>
 8003ecc:	231b      	movs	r3, #27
 8003ece:	18fb      	adds	r3, r7, r3
 8003ed0:	2210      	movs	r2, #16
 8003ed2:	701a      	strb	r2, [r3, #0]
 8003ed4:	e00d      	b.n	8003ef2 <UART_SetConfig+0x10a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a75      	ldr	r2, [pc, #468]	@ (80040b0 <UART_SetConfig+0x2c8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d104      	bne.n	8003eea <UART_SetConfig+0x102>
 8003ee0:	231b      	movs	r3, #27
 8003ee2:	18fb      	adds	r3, r7, r3
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	701a      	strb	r2, [r3, #0]
 8003ee8:	e003      	b.n	8003ef2 <UART_SetConfig+0x10a>
 8003eea:	231b      	movs	r3, #27
 8003eec:	18fb      	adds	r3, r7, r3
 8003eee:	2210      	movs	r2, #16
 8003ef0:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69da      	ldr	r2, [r3, #28]
 8003ef6:	2380      	movs	r3, #128	@ 0x80
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d000      	beq.n	8003f00 <UART_SetConfig+0x118>
 8003efe:	e065      	b.n	8003fcc <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8003f00:	231b      	movs	r3, #27
 8003f02:	18fb      	adds	r3, r7, r3
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	d015      	beq.n	8003f36 <UART_SetConfig+0x14e>
 8003f0a:	dc18      	bgt.n	8003f3e <UART_SetConfig+0x156>
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d00d      	beq.n	8003f2c <UART_SetConfig+0x144>
 8003f10:	dc15      	bgt.n	8003f3e <UART_SetConfig+0x156>
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <UART_SetConfig+0x134>
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d005      	beq.n	8003f26 <UART_SetConfig+0x13e>
 8003f1a:	e010      	b.n	8003f3e <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f1c:	f7fe fad4 	bl	80024c8 <HAL_RCC_GetPCLK1Freq>
 8003f20:	0003      	movs	r3, r0
 8003f22:	617b      	str	r3, [r7, #20]
        break;
 8003f24:	e012      	b.n	8003f4c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f26:	4b63      	ldr	r3, [pc, #396]	@ (80040b4 <UART_SetConfig+0x2cc>)
 8003f28:	617b      	str	r3, [r7, #20]
        break;
 8003f2a:	e00f      	b.n	8003f4c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f2c:	f7fe fa42 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8003f30:	0003      	movs	r3, r0
 8003f32:	617b      	str	r3, [r7, #20]
        break;
 8003f34:	e00a      	b.n	8003f4c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f36:	2380      	movs	r3, #128	@ 0x80
 8003f38:	021b      	lsls	r3, r3, #8
 8003f3a:	617b      	str	r3, [r7, #20]
        break;
 8003f3c:	e006      	b.n	8003f4c <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f42:	231a      	movs	r3, #26
 8003f44:	18fb      	adds	r3, r7, r3
 8003f46:	2201      	movs	r2, #1
 8003f48:	701a      	strb	r2, [r3, #0]
        break;
 8003f4a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d100      	bne.n	8003f54 <UART_SetConfig+0x16c>
 8003f52:	e08d      	b.n	8004070 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f58:	4b57      	ldr	r3, [pc, #348]	@ (80040b8 <UART_SetConfig+0x2d0>)
 8003f5a:	0052      	lsls	r2, r2, #1
 8003f5c:	5ad3      	ldrh	r3, [r2, r3]
 8003f5e:	0019      	movs	r1, r3
 8003f60:	6978      	ldr	r0, [r7, #20]
 8003f62:	f7fc f8cd 	bl	8000100 <__udivsi3>
 8003f66:	0003      	movs	r3, r0
 8003f68:	005a      	lsls	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	085b      	lsrs	r3, r3, #1
 8003f70:	18d2      	adds	r2, r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	0019      	movs	r1, r3
 8003f78:	0010      	movs	r0, r2
 8003f7a:	f7fc f8c1 	bl	8000100 <__udivsi3>
 8003f7e:	0003      	movs	r3, r0
 8003f80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	2b0f      	cmp	r3, #15
 8003f86:	d91c      	bls.n	8003fc2 <UART_SetConfig+0x1da>
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	2380      	movs	r3, #128	@ 0x80
 8003f8c:	025b      	lsls	r3, r3, #9
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d217      	bcs.n	8003fc2 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	200e      	movs	r0, #14
 8003f98:	183b      	adds	r3, r7, r0
 8003f9a:	210f      	movs	r1, #15
 8003f9c:	438a      	bics	r2, r1
 8003f9e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	085b      	lsrs	r3, r3, #1
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2207      	movs	r2, #7
 8003fa8:	4013      	ands	r3, r2
 8003faa:	b299      	uxth	r1, r3
 8003fac:	183b      	adds	r3, r7, r0
 8003fae:	183a      	adds	r2, r7, r0
 8003fb0:	8812      	ldrh	r2, [r2, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	183a      	adds	r2, r7, r0
 8003fbc:	8812      	ldrh	r2, [r2, #0]
 8003fbe:	60da      	str	r2, [r3, #12]
 8003fc0:	e056      	b.n	8004070 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003fc2:	231a      	movs	r3, #26
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	701a      	strb	r2, [r3, #0]
 8003fca:	e051      	b.n	8004070 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fcc:	231b      	movs	r3, #27
 8003fce:	18fb      	adds	r3, r7, r3
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d015      	beq.n	8004002 <UART_SetConfig+0x21a>
 8003fd6:	dc18      	bgt.n	800400a <UART_SetConfig+0x222>
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d00d      	beq.n	8003ff8 <UART_SetConfig+0x210>
 8003fdc:	dc15      	bgt.n	800400a <UART_SetConfig+0x222>
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <UART_SetConfig+0x200>
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d005      	beq.n	8003ff2 <UART_SetConfig+0x20a>
 8003fe6:	e010      	b.n	800400a <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe8:	f7fe fa6e 	bl	80024c8 <HAL_RCC_GetPCLK1Freq>
 8003fec:	0003      	movs	r3, r0
 8003fee:	617b      	str	r3, [r7, #20]
        break;
 8003ff0:	e012      	b.n	8004018 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ff2:	4b30      	ldr	r3, [pc, #192]	@ (80040b4 <UART_SetConfig+0x2cc>)
 8003ff4:	617b      	str	r3, [r7, #20]
        break;
 8003ff6:	e00f      	b.n	8004018 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ff8:	f7fe f9dc 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	617b      	str	r3, [r7, #20]
        break;
 8004000:	e00a      	b.n	8004018 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004002:	2380      	movs	r3, #128	@ 0x80
 8004004:	021b      	lsls	r3, r3, #8
 8004006:	617b      	str	r3, [r7, #20]
        break;
 8004008:	e006      	b.n	8004018 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800400e:	231a      	movs	r3, #26
 8004010:	18fb      	adds	r3, r7, r3
 8004012:	2201      	movs	r2, #1
 8004014:	701a      	strb	r2, [r3, #0]
        break;
 8004016:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d028      	beq.n	8004070 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004022:	4b25      	ldr	r3, [pc, #148]	@ (80040b8 <UART_SetConfig+0x2d0>)
 8004024:	0052      	lsls	r2, r2, #1
 8004026:	5ad3      	ldrh	r3, [r2, r3]
 8004028:	0019      	movs	r1, r3
 800402a:	6978      	ldr	r0, [r7, #20]
 800402c:	f7fc f868 	bl	8000100 <__udivsi3>
 8004030:	0003      	movs	r3, r0
 8004032:	001a      	movs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	085b      	lsrs	r3, r3, #1
 800403a:	18d2      	adds	r2, r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	0019      	movs	r1, r3
 8004042:	0010      	movs	r0, r2
 8004044:	f7fc f85c 	bl	8000100 <__udivsi3>
 8004048:	0003      	movs	r3, r0
 800404a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	2b0f      	cmp	r3, #15
 8004050:	d90a      	bls.n	8004068 <UART_SetConfig+0x280>
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	2380      	movs	r3, #128	@ 0x80
 8004056:	025b      	lsls	r3, r3, #9
 8004058:	429a      	cmp	r2, r3
 800405a:	d205      	bcs.n	8004068 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	b29a      	uxth	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60da      	str	r2, [r3, #12]
 8004066:	e003      	b.n	8004070 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004068:	231a      	movs	r3, #26
 800406a:	18fb      	adds	r3, r7, r3
 800406c:	2201      	movs	r2, #1
 800406e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	226a      	movs	r2, #106	@ 0x6a
 8004074:	2101      	movs	r1, #1
 8004076:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2268      	movs	r2, #104	@ 0x68
 800407c:	2101      	movs	r1, #1
 800407e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800408c:	231a      	movs	r3, #26
 800408e:	18fb      	adds	r3, r7, r3
 8004090:	781b      	ldrb	r3, [r3, #0]
}
 8004092:	0018      	movs	r0, r3
 8004094:	46bd      	mov	sp, r7
 8004096:	b008      	add	sp, #32
 8004098:	bd80      	pop	{r7, pc}
 800409a:	46c0      	nop			@ (mov r8, r8)
 800409c:	cfff69f3 	.word	0xcfff69f3
 80040a0:	ffffcfff 	.word	0xffffcfff
 80040a4:	11fff4ff 	.word	0x11fff4ff
 80040a8:	40013800 	.word	0x40013800
 80040ac:	40021000 	.word	0x40021000
 80040b0:	40004400 	.word	0x40004400
 80040b4:	00f42400 	.word	0x00f42400
 80040b8:	08004c40 	.word	0x08004c40

080040bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c8:	2208      	movs	r2, #8
 80040ca:	4013      	ands	r3, r2
 80040cc:	d00b      	beq.n	80040e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	4a4a      	ldr	r2, [pc, #296]	@ (8004200 <UART_AdvFeatureConfig+0x144>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	0019      	movs	r1, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ea:	2201      	movs	r2, #1
 80040ec:	4013      	ands	r3, r2
 80040ee:	d00b      	beq.n	8004108 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	4a43      	ldr	r2, [pc, #268]	@ (8004204 <UART_AdvFeatureConfig+0x148>)
 80040f8:	4013      	ands	r3, r2
 80040fa:	0019      	movs	r1, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410c:	2202      	movs	r2, #2
 800410e:	4013      	ands	r3, r2
 8004110:	d00b      	beq.n	800412a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	4a3b      	ldr	r2, [pc, #236]	@ (8004208 <UART_AdvFeatureConfig+0x14c>)
 800411a:	4013      	ands	r3, r2
 800411c:	0019      	movs	r1, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412e:	2204      	movs	r2, #4
 8004130:	4013      	ands	r3, r2
 8004132:	d00b      	beq.n	800414c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	4a34      	ldr	r2, [pc, #208]	@ (800420c <UART_AdvFeatureConfig+0x150>)
 800413c:	4013      	ands	r3, r2
 800413e:	0019      	movs	r1, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004150:	2210      	movs	r2, #16
 8004152:	4013      	ands	r3, r2
 8004154:	d00b      	beq.n	800416e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	4a2c      	ldr	r2, [pc, #176]	@ (8004210 <UART_AdvFeatureConfig+0x154>)
 800415e:	4013      	ands	r3, r2
 8004160:	0019      	movs	r1, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004172:	2220      	movs	r2, #32
 8004174:	4013      	ands	r3, r2
 8004176:	d00b      	beq.n	8004190 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	4a25      	ldr	r2, [pc, #148]	@ (8004214 <UART_AdvFeatureConfig+0x158>)
 8004180:	4013      	ands	r3, r2
 8004182:	0019      	movs	r1, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004194:	2240      	movs	r2, #64	@ 0x40
 8004196:	4013      	ands	r3, r2
 8004198:	d01d      	beq.n	80041d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004218 <UART_AdvFeatureConfig+0x15c>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	0019      	movs	r1, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041b6:	2380      	movs	r3, #128	@ 0x80
 80041b8:	035b      	lsls	r3, r3, #13
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d10b      	bne.n	80041d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	4a15      	ldr	r2, [pc, #84]	@ (800421c <UART_AdvFeatureConfig+0x160>)
 80041c6:	4013      	ands	r3, r2
 80041c8:	0019      	movs	r1, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041da:	2280      	movs	r2, #128	@ 0x80
 80041dc:	4013      	ands	r3, r2
 80041de:	d00b      	beq.n	80041f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	4a0e      	ldr	r2, [pc, #56]	@ (8004220 <UART_AdvFeatureConfig+0x164>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	0019      	movs	r1, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	605a      	str	r2, [r3, #4]
  }
}
 80041f8:	46c0      	nop			@ (mov r8, r8)
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b002      	add	sp, #8
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	ffff7fff 	.word	0xffff7fff
 8004204:	fffdffff 	.word	0xfffdffff
 8004208:	fffeffff 	.word	0xfffeffff
 800420c:	fffbffff 	.word	0xfffbffff
 8004210:	ffffefff 	.word	0xffffefff
 8004214:	ffffdfff 	.word	0xffffdfff
 8004218:	ffefffff 	.word	0xffefffff
 800421c:	ff9fffff 	.word	0xff9fffff
 8004220:	fff7ffff 	.word	0xfff7ffff

08004224 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b092      	sub	sp, #72	@ 0x48
 8004228:	af02      	add	r7, sp, #8
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2290      	movs	r2, #144	@ 0x90
 8004230:	2100      	movs	r1, #0
 8004232:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004234:	f7fc ff66 	bl	8001104 <HAL_GetTick>
 8004238:	0003      	movs	r3, r0
 800423a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2208      	movs	r2, #8
 8004244:	4013      	ands	r3, r2
 8004246:	2b08      	cmp	r3, #8
 8004248:	d12d      	bne.n	80042a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800424a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800424c:	2280      	movs	r2, #128	@ 0x80
 800424e:	0391      	lsls	r1, r2, #14
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	4a47      	ldr	r2, [pc, #284]	@ (8004370 <UART_CheckIdleState+0x14c>)
 8004254:	9200      	str	r2, [sp, #0]
 8004256:	2200      	movs	r2, #0
 8004258:	f000 f88e 	bl	8004378 <UART_WaitOnFlagUntilTimeout>
 800425c:	1e03      	subs	r3, r0, #0
 800425e:	d022      	beq.n	80042a6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004260:	f3ef 8310 	mrs	r3, PRIMASK
 8004264:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004268:	63bb      	str	r3, [r7, #56]	@ 0x38
 800426a:	2301      	movs	r3, #1
 800426c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004270:	f383 8810 	msr	PRIMASK, r3
}
 8004274:	46c0      	nop			@ (mov r8, r8)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2180      	movs	r1, #128	@ 0x80
 8004282:	438a      	bics	r2, r1
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004288:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800428a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800428c:	f383 8810 	msr	PRIMASK, r3
}
 8004290:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2288      	movs	r2, #136	@ 0x88
 8004296:	2120      	movs	r1, #32
 8004298:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2284      	movs	r2, #132	@ 0x84
 800429e:	2100      	movs	r1, #0
 80042a0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e060      	b.n	8004368 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2204      	movs	r2, #4
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d146      	bne.n	8004342 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042b6:	2280      	movs	r2, #128	@ 0x80
 80042b8:	03d1      	lsls	r1, r2, #15
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	4a2c      	ldr	r2, [pc, #176]	@ (8004370 <UART_CheckIdleState+0x14c>)
 80042be:	9200      	str	r2, [sp, #0]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f000 f859 	bl	8004378 <UART_WaitOnFlagUntilTimeout>
 80042c6:	1e03      	subs	r3, r0, #0
 80042c8:	d03b      	beq.n	8004342 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ca:	f3ef 8310 	mrs	r3, PRIMASK
 80042ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80042d0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80042d4:	2301      	movs	r3, #1
 80042d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f383 8810 	msr	PRIMASK, r3
}
 80042de:	46c0      	nop			@ (mov r8, r8)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4922      	ldr	r1, [pc, #136]	@ (8004374 <UART_CheckIdleState+0x150>)
 80042ec:	400a      	ands	r2, r1
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f383 8810 	msr	PRIMASK, r3
}
 80042fa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004300:	61bb      	str	r3, [r7, #24]
  return(result);
 8004302:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004304:	633b      	str	r3, [r7, #48]	@ 0x30
 8004306:	2301      	movs	r3, #1
 8004308:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	f383 8810 	msr	PRIMASK, r3
}
 8004310:	46c0      	nop			@ (mov r8, r8)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2101      	movs	r1, #1
 800431e:	438a      	bics	r2, r1
 8004320:	609a      	str	r2, [r3, #8]
 8004322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004324:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	f383 8810 	msr	PRIMASK, r3
}
 800432c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	228c      	movs	r2, #140	@ 0x8c
 8004332:	2120      	movs	r1, #32
 8004334:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2284      	movs	r2, #132	@ 0x84
 800433a:	2100      	movs	r1, #0
 800433c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e012      	b.n	8004368 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2288      	movs	r2, #136	@ 0x88
 8004346:	2120      	movs	r1, #32
 8004348:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	228c      	movs	r2, #140	@ 0x8c
 800434e:	2120      	movs	r1, #32
 8004350:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2284      	movs	r2, #132	@ 0x84
 8004362:	2100      	movs	r1, #0
 8004364:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	0018      	movs	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	b010      	add	sp, #64	@ 0x40
 800436e:	bd80      	pop	{r7, pc}
 8004370:	01ffffff 	.word	0x01ffffff
 8004374:	fffffedf 	.word	0xfffffedf

08004378 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	1dfb      	adds	r3, r7, #7
 8004386:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004388:	e051      	b.n	800442e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	3301      	adds	r3, #1
 800438e:	d04e      	beq.n	800442e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004390:	f7fc feb8 	bl	8001104 <HAL_GetTick>
 8004394:	0002      	movs	r2, r0
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	429a      	cmp	r2, r3
 800439e:	d302      	bcc.n	80043a6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e051      	b.n	800444e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2204      	movs	r2, #4
 80043b2:	4013      	ands	r3, r2
 80043b4:	d03b      	beq.n	800442e <UART_WaitOnFlagUntilTimeout+0xb6>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b80      	cmp	r3, #128	@ 0x80
 80043ba:	d038      	beq.n	800442e <UART_WaitOnFlagUntilTimeout+0xb6>
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b40      	cmp	r3, #64	@ 0x40
 80043c0:	d035      	beq.n	800442e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	2208      	movs	r2, #8
 80043ca:	4013      	ands	r3, r2
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d111      	bne.n	80043f4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2208      	movs	r2, #8
 80043d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	0018      	movs	r0, r3
 80043dc:	f000 f922 	bl	8004624 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2290      	movs	r2, #144	@ 0x90
 80043e4:	2108      	movs	r1, #8
 80043e6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2284      	movs	r2, #132	@ 0x84
 80043ec:	2100      	movs	r1, #0
 80043ee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e02c      	b.n	800444e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	69da      	ldr	r2, [r3, #28]
 80043fa:	2380      	movs	r3, #128	@ 0x80
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	401a      	ands	r2, r3
 8004400:	2380      	movs	r3, #128	@ 0x80
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	429a      	cmp	r2, r3
 8004406:	d112      	bne.n	800442e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2280      	movs	r2, #128	@ 0x80
 800440e:	0112      	lsls	r2, r2, #4
 8004410:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	0018      	movs	r0, r3
 8004416:	f000 f905 	bl	8004624 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2290      	movs	r2, #144	@ 0x90
 800441e:	2120      	movs	r1, #32
 8004420:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2284      	movs	r2, #132	@ 0x84
 8004426:	2100      	movs	r1, #0
 8004428:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e00f      	b.n	800444e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	4013      	ands	r3, r2
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	425a      	negs	r2, r3
 800443e:	4153      	adcs	r3, r2
 8004440:	b2db      	uxtb	r3, r3
 8004442:	001a      	movs	r2, r3
 8004444:	1dfb      	adds	r3, r7, #7
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d09e      	beq.n	800438a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	0018      	movs	r0, r3
 8004450:	46bd      	mov	sp, r7
 8004452:	b004      	add	sp, #16
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b090      	sub	sp, #64	@ 0x40
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	1dbb      	adds	r3, r7, #6
 8004464:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	1dba      	adds	r2, r7, #6
 8004470:	215c      	movs	r1, #92	@ 0x5c
 8004472:	8812      	ldrh	r2, [r2, #0]
 8004474:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2290      	movs	r2, #144	@ 0x90
 800447a:	2100      	movs	r1, #0
 800447c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	228c      	movs	r2, #140	@ 0x8c
 8004482:	2122      	movs	r1, #34	@ 0x22
 8004484:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2280      	movs	r2, #128	@ 0x80
 800448a:	589b      	ldr	r3, [r3, r2]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d02d      	beq.n	80044ec <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2280      	movs	r2, #128	@ 0x80
 8004494:	589b      	ldr	r3, [r3, r2]
 8004496:	4a40      	ldr	r2, [pc, #256]	@ (8004598 <UART_Start_Receive_DMA+0x140>)
 8004498:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2280      	movs	r2, #128	@ 0x80
 800449e:	589b      	ldr	r3, [r3, r2]
 80044a0:	4a3e      	ldr	r2, [pc, #248]	@ (800459c <UART_Start_Receive_DMA+0x144>)
 80044a2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2280      	movs	r2, #128	@ 0x80
 80044a8:	589b      	ldr	r3, [r3, r2]
 80044aa:	4a3d      	ldr	r2, [pc, #244]	@ (80045a0 <UART_Start_Receive_DMA+0x148>)
 80044ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2280      	movs	r2, #128	@ 0x80
 80044b2:	589b      	ldr	r3, [r3, r2]
 80044b4:	2200      	movs	r2, #0
 80044b6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2280      	movs	r2, #128	@ 0x80
 80044bc:	5898      	ldr	r0, [r3, r2]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3324      	adds	r3, #36	@ 0x24
 80044c4:	0019      	movs	r1, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ca:	001a      	movs	r2, r3
 80044cc:	1dbb      	adds	r3, r7, #6
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	f7fc ff8a 	bl	80013e8 <HAL_DMA_Start_IT>
 80044d4:	1e03      	subs	r3, r0, #0
 80044d6:	d009      	beq.n	80044ec <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2290      	movs	r2, #144	@ 0x90
 80044dc:	2110      	movs	r1, #16
 80044de:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	228c      	movs	r2, #140	@ 0x8c
 80044e4:	2120      	movs	r1, #32
 80044e6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e050      	b.n	800458e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d019      	beq.n	8004528 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044f4:	f3ef 8310 	mrs	r3, PRIMASK
 80044f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80044fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044fe:	2301      	movs	r3, #1
 8004500:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004504:	f383 8810 	msr	PRIMASK, r3
}
 8004508:	46c0      	nop			@ (mov r8, r8)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2180      	movs	r1, #128	@ 0x80
 8004516:	0049      	lsls	r1, r1, #1
 8004518:	430a      	orrs	r2, r1
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800451e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004522:	f383 8810 	msr	PRIMASK, r3
}
 8004526:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004528:	f3ef 8310 	mrs	r3, PRIMASK
 800452c:	613b      	str	r3, [r7, #16]
  return(result);
 800452e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004530:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004532:	2301      	movs	r3, #1
 8004534:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f383 8810 	msr	PRIMASK, r3
}
 800453c:	46c0      	nop			@ (mov r8, r8)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2101      	movs	r1, #1
 800454a:	430a      	orrs	r2, r1
 800454c:	609a      	str	r2, [r3, #8]
 800454e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004550:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	f383 8810 	msr	PRIMASK, r3
}
 8004558:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800455a:	f3ef 8310 	mrs	r3, PRIMASK
 800455e:	61fb      	str	r3, [r7, #28]
  return(result);
 8004560:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004562:	637b      	str	r3, [r7, #52]	@ 0x34
 8004564:	2301      	movs	r3, #1
 8004566:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	f383 8810 	msr	PRIMASK, r3
}
 800456e:	46c0      	nop			@ (mov r8, r8)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2140      	movs	r1, #64	@ 0x40
 800457c:	430a      	orrs	r2, r1
 800457e:	609a      	str	r2, [r3, #8]
 8004580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004582:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004586:	f383 8810 	msr	PRIMASK, r3
}
 800458a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	0018      	movs	r0, r3
 8004590:	46bd      	mov	sp, r7
 8004592:	b010      	add	sp, #64	@ 0x40
 8004594:	bd80      	pop	{r7, pc}
 8004596:	46c0      	nop			@ (mov r8, r8)
 8004598:	080046f1 	.word	0x080046f1
 800459c:	08004821 	.word	0x08004821
 80045a0:	08004863 	.word	0x08004863

080045a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08a      	sub	sp, #40	@ 0x28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ac:	f3ef 8310 	mrs	r3, PRIMASK
 80045b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80045b2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80045b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80045b6:	2301      	movs	r3, #1
 80045b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f383 8810 	msr	PRIMASK, r3
}
 80045c0:	46c0      	nop			@ (mov r8, r8)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	21c0      	movs	r1, #192	@ 0xc0
 80045ce:	438a      	bics	r2, r1
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f383 8810 	msr	PRIMASK, r3
}
 80045dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045de:	f3ef 8310 	mrs	r3, PRIMASK
 80045e2:	617b      	str	r3, [r7, #20]
  return(result);
 80045e4:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80045e6:	623b      	str	r3, [r7, #32]
 80045e8:	2301      	movs	r3, #1
 80045ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	f383 8810 	msr	PRIMASK, r3
}
 80045f2:	46c0      	nop			@ (mov r8, r8)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4908      	ldr	r1, [pc, #32]	@ (8004620 <UART_EndTxTransfer+0x7c>)
 8004600:	400a      	ands	r2, r1
 8004602:	609a      	str	r2, [r3, #8]
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f383 8810 	msr	PRIMASK, r3
}
 800460e:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2288      	movs	r2, #136	@ 0x88
 8004614:	2120      	movs	r1, #32
 8004616:	5099      	str	r1, [r3, r2]
}
 8004618:	46c0      	nop			@ (mov r8, r8)
 800461a:	46bd      	mov	sp, r7
 800461c:	b00a      	add	sp, #40	@ 0x28
 800461e:	bd80      	pop	{r7, pc}
 8004620:	ff7fffff 	.word	0xff7fffff

08004624 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08e      	sub	sp, #56	@ 0x38
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800462c:	f3ef 8310 	mrs	r3, PRIMASK
 8004630:	617b      	str	r3, [r7, #20]
  return(result);
 8004632:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004634:	637b      	str	r3, [r7, #52]	@ 0x34
 8004636:	2301      	movs	r3, #1
 8004638:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	f383 8810 	msr	PRIMASK, r3
}
 8004640:	46c0      	nop			@ (mov r8, r8)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4926      	ldr	r1, [pc, #152]	@ (80046e8 <UART_EndRxTransfer+0xc4>)
 800464e:	400a      	ands	r2, r1
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004654:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	f383 8810 	msr	PRIMASK, r3
}
 800465c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800465e:	f3ef 8310 	mrs	r3, PRIMASK
 8004662:	623b      	str	r3, [r7, #32]
  return(result);
 8004664:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004666:	633b      	str	r3, [r7, #48]	@ 0x30
 8004668:	2301      	movs	r3, #1
 800466a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466e:	f383 8810 	msr	PRIMASK, r3
}
 8004672:	46c0      	nop			@ (mov r8, r8)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	491b      	ldr	r1, [pc, #108]	@ (80046ec <UART_EndRxTransfer+0xc8>)
 8004680:	400a      	ands	r2, r1
 8004682:	609a      	str	r2, [r3, #8]
 8004684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004686:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468a:	f383 8810 	msr	PRIMASK, r3
}
 800468e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004694:	2b01      	cmp	r3, #1
 8004696:	d118      	bne.n	80046ca <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004698:	f3ef 8310 	mrs	r3, PRIMASK
 800469c:	60bb      	str	r3, [r7, #8]
  return(result);
 800469e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046a2:	2301      	movs	r3, #1
 80046a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f383 8810 	msr	PRIMASK, r3
}
 80046ac:	46c0      	nop			@ (mov r8, r8)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2110      	movs	r1, #16
 80046ba:	438a      	bics	r2, r1
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f383 8810 	msr	PRIMASK, r3
}
 80046c8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	228c      	movs	r2, #140	@ 0x8c
 80046ce:	2120      	movs	r1, #32
 80046d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80046de:	46c0      	nop			@ (mov r8, r8)
 80046e0:	46bd      	mov	sp, r7
 80046e2:	b00e      	add	sp, #56	@ 0x38
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	46c0      	nop			@ (mov r8, r8)
 80046e8:	fffffedf 	.word	0xfffffedf
 80046ec:	effffffe 	.word	0xeffffffe

080046f0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b094      	sub	sp, #80	@ 0x50
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046fc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2220      	movs	r2, #32
 8004706:	4013      	ands	r3, r2
 8004708:	d16f      	bne.n	80047ea <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800470a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800470c:	225e      	movs	r2, #94	@ 0x5e
 800470e:	2100      	movs	r1, #0
 8004710:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004712:	f3ef 8310 	mrs	r3, PRIMASK
 8004716:	61bb      	str	r3, [r7, #24]
  return(result);
 8004718:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800471a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800471c:	2301      	movs	r3, #1
 800471e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f383 8810 	msr	PRIMASK, r3
}
 8004726:	46c0      	nop			@ (mov r8, r8)
 8004728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	493a      	ldr	r1, [pc, #232]	@ (800481c <UART_DMAReceiveCplt+0x12c>)
 8004734:	400a      	ands	r2, r1
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800473a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	f383 8810 	msr	PRIMASK, r3
}
 8004742:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004744:	f3ef 8310 	mrs	r3, PRIMASK
 8004748:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474c:	647b      	str	r3, [r7, #68]	@ 0x44
 800474e:	2301      	movs	r3, #1
 8004750:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004754:	f383 8810 	msr	PRIMASK, r3
}
 8004758:	46c0      	nop			@ (mov r8, r8)
 800475a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2101      	movs	r1, #1
 8004766:	438a      	bics	r2, r1
 8004768:	609a      	str	r2, [r3, #8]
 800476a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800476c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004770:	f383 8810 	msr	PRIMASK, r3
}
 8004774:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004776:	f3ef 8310 	mrs	r3, PRIMASK
 800477a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800477c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800477e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004780:	2301      	movs	r3, #1
 8004782:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004786:	f383 8810 	msr	PRIMASK, r3
}
 800478a:	46c0      	nop			@ (mov r8, r8)
 800478c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2140      	movs	r1, #64	@ 0x40
 8004798:	438a      	bics	r2, r1
 800479a:	609a      	str	r2, [r3, #8]
 800479c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800479e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a2:	f383 8810 	msr	PRIMASK, r3
}
 80047a6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047aa:	228c      	movs	r2, #140	@ 0x8c
 80047ac:	2120      	movs	r1, #32
 80047ae:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d118      	bne.n	80047ea <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047b8:	f3ef 8310 	mrs	r3, PRIMASK
 80047bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80047be:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047c2:	2301      	movs	r3, #1
 80047c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f383 8810 	msr	PRIMASK, r3
}
 80047cc:	46c0      	nop			@ (mov r8, r8)
 80047ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2110      	movs	r1, #16
 80047da:	438a      	bics	r2, r1
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f383 8810 	msr	PRIMASK, r3
}
 80047e8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047ec:	2200      	movs	r2, #0
 80047ee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d108      	bne.n	800480a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047fa:	225c      	movs	r2, #92	@ 0x5c
 80047fc:	5a9a      	ldrh	r2, [r3, r2]
 80047fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004800:	0011      	movs	r1, r2
 8004802:	0018      	movs	r0, r3
 8004804:	f7ff fae5 	bl	8003dd2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004808:	e003      	b.n	8004812 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800480a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800480c:	0018      	movs	r0, r3
 800480e:	f7ff fac8 	bl	8003da2 <HAL_UART_RxCpltCallback>
}
 8004812:	46c0      	nop			@ (mov r8, r8)
 8004814:	46bd      	mov	sp, r7
 8004816:	b014      	add	sp, #80	@ 0x50
 8004818:	bd80      	pop	{r7, pc}
 800481a:	46c0      	nop			@ (mov r8, r8)
 800481c:	fffffeff 	.word	0xfffffeff

08004820 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2201      	movs	r2, #1
 8004832:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004838:	2b01      	cmp	r3, #1
 800483a:	d10a      	bne.n	8004852 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	225c      	movs	r2, #92	@ 0x5c
 8004840:	5a9b      	ldrh	r3, [r3, r2]
 8004842:	085b      	lsrs	r3, r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	0011      	movs	r1, r2
 800484a:	0018      	movs	r0, r3
 800484c:	f7ff fac1 	bl	8003dd2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004850:	e003      	b.n	800485a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	0018      	movs	r0, r3
 8004856:	f7ff faac 	bl	8003db2 <HAL_UART_RxHalfCpltCallback>
}
 800485a:	46c0      	nop			@ (mov r8, r8)
 800485c:	46bd      	mov	sp, r7
 800485e:	b004      	add	sp, #16
 8004860:	bd80      	pop	{r7, pc}

08004862 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b086      	sub	sp, #24
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2288      	movs	r2, #136	@ 0x88
 8004874:	589b      	ldr	r3, [r3, r2]
 8004876:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	228c      	movs	r2, #140	@ 0x8c
 800487c:	589b      	ldr	r3, [r3, r2]
 800487e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2280      	movs	r2, #128	@ 0x80
 8004888:	4013      	ands	r3, r2
 800488a:	2b80      	cmp	r3, #128	@ 0x80
 800488c:	d10a      	bne.n	80048a4 <UART_DMAError+0x42>
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2b21      	cmp	r3, #33	@ 0x21
 8004892:	d107      	bne.n	80048a4 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	2256      	movs	r2, #86	@ 0x56
 8004898:	2100      	movs	r1, #0
 800489a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	0018      	movs	r0, r3
 80048a0:	f7ff fe80 	bl	80045a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2240      	movs	r2, #64	@ 0x40
 80048ac:	4013      	ands	r3, r2
 80048ae:	2b40      	cmp	r3, #64	@ 0x40
 80048b0:	d10a      	bne.n	80048c8 <UART_DMAError+0x66>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2b22      	cmp	r3, #34	@ 0x22
 80048b6:	d107      	bne.n	80048c8 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	225e      	movs	r2, #94	@ 0x5e
 80048bc:	2100      	movs	r1, #0
 80048be:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	0018      	movs	r0, r3
 80048c4:	f7ff feae 	bl	8004624 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	2290      	movs	r2, #144	@ 0x90
 80048cc:	589b      	ldr	r3, [r3, r2]
 80048ce:	2210      	movs	r2, #16
 80048d0:	431a      	orrs	r2, r3
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2190      	movs	r1, #144	@ 0x90
 80048d6:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	0018      	movs	r0, r3
 80048dc:	f7ff fa71 	bl	8003dc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048e0:	46c0      	nop			@ (mov r8, r8)
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b006      	add	sp, #24
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2284      	movs	r2, #132	@ 0x84
 80048f4:	5c9b      	ldrb	r3, [r3, r2]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_UARTEx_DisableFifoMode+0x16>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e027      	b.n	800494e <HAL_UARTEx_DisableFifoMode+0x66>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2284      	movs	r2, #132	@ 0x84
 8004902:	2101      	movs	r1, #1
 8004904:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2288      	movs	r2, #136	@ 0x88
 800490a:	2124      	movs	r1, #36	@ 0x24
 800490c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2101      	movs	r1, #1
 8004922:	438a      	bics	r2, r1
 8004924:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4a0b      	ldr	r2, [pc, #44]	@ (8004958 <HAL_UARTEx_DisableFifoMode+0x70>)
 800492a:	4013      	ands	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2288      	movs	r2, #136	@ 0x88
 8004940:	2120      	movs	r1, #32
 8004942:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2284      	movs	r2, #132	@ 0x84
 8004948:	2100      	movs	r1, #0
 800494a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	0018      	movs	r0, r3
 8004950:	46bd      	mov	sp, r7
 8004952:	b004      	add	sp, #16
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			@ (mov r8, r8)
 8004958:	dfffffff 	.word	0xdfffffff

0800495c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2284      	movs	r2, #132	@ 0x84
 800496a:	5c9b      	ldrb	r3, [r3, r2]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004970:	2302      	movs	r3, #2
 8004972:	e02e      	b.n	80049d2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2284      	movs	r2, #132	@ 0x84
 8004978:	2101      	movs	r1, #1
 800497a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2288      	movs	r2, #136	@ 0x88
 8004980:	2124      	movs	r1, #36	@ 0x24
 8004982:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2101      	movs	r1, #1
 8004998:	438a      	bics	r2, r1
 800499a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	08d9      	lsrs	r1, r3, #3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	0018      	movs	r0, r3
 80049b4:	f000 f854 	bl	8004a60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2288      	movs	r2, #136	@ 0x88
 80049c4:	2120      	movs	r1, #32
 80049c6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2284      	movs	r2, #132	@ 0x84
 80049cc:	2100      	movs	r1, #0
 80049ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	0018      	movs	r0, r3
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b004      	add	sp, #16
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2284      	movs	r2, #132	@ 0x84
 80049ea:	5c9b      	ldrb	r3, [r3, r2]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d101      	bne.n	80049f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e02f      	b.n	8004a54 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2284      	movs	r2, #132	@ 0x84
 80049f8:	2101      	movs	r1, #1
 80049fa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2288      	movs	r2, #136	@ 0x88
 8004a00:	2124      	movs	r1, #36	@ 0x24
 8004a02:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2101      	movs	r1, #1
 8004a18:	438a      	bics	r2, r1
 8004a1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	4a0e      	ldr	r2, [pc, #56]	@ (8004a5c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004a24:	4013      	ands	r3, r2
 8004a26:	0019      	movs	r1, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	0018      	movs	r0, r3
 8004a36:	f000 f813 	bl	8004a60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2288      	movs	r2, #136	@ 0x88
 8004a46:	2120      	movs	r1, #32
 8004a48:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2284      	movs	r2, #132	@ 0x84
 8004a4e:	2100      	movs	r1, #0
 8004a50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	0018      	movs	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	b004      	add	sp, #16
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	f1ffffff 	.word	0xf1ffffff

08004a60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d108      	bne.n	8004a82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	226a      	movs	r2, #106	@ 0x6a
 8004a74:	2101      	movs	r1, #1
 8004a76:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2268      	movs	r2, #104	@ 0x68
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a80:	e043      	b.n	8004b0a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a82:	260f      	movs	r6, #15
 8004a84:	19bb      	adds	r3, r7, r6
 8004a86:	2208      	movs	r2, #8
 8004a88:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a8a:	200e      	movs	r0, #14
 8004a8c:	183b      	adds	r3, r7, r0
 8004a8e:	2208      	movs	r2, #8
 8004a90:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	0e5b      	lsrs	r3, r3, #25
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	240d      	movs	r4, #13
 8004a9e:	193b      	adds	r3, r7, r4
 8004aa0:	2107      	movs	r1, #7
 8004aa2:	400a      	ands	r2, r1
 8004aa4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	0f5b      	lsrs	r3, r3, #29
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	250c      	movs	r5, #12
 8004ab2:	197b      	adds	r3, r7, r5
 8004ab4:	2107      	movs	r1, #7
 8004ab6:	400a      	ands	r2, r1
 8004ab8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004aba:	183b      	adds	r3, r7, r0
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	197a      	adds	r2, r7, r5
 8004ac0:	7812      	ldrb	r2, [r2, #0]
 8004ac2:	4914      	ldr	r1, [pc, #80]	@ (8004b14 <UARTEx_SetNbDataToProcess+0xb4>)
 8004ac4:	5c8a      	ldrb	r2, [r1, r2]
 8004ac6:	435a      	muls	r2, r3
 8004ac8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004aca:	197b      	adds	r3, r7, r5
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	4a12      	ldr	r2, [pc, #72]	@ (8004b18 <UARTEx_SetNbDataToProcess+0xb8>)
 8004ad0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ad2:	0019      	movs	r1, r3
 8004ad4:	f7fb fb9e 	bl	8000214 <__divsi3>
 8004ad8:	0003      	movs	r3, r0
 8004ada:	b299      	uxth	r1, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	226a      	movs	r2, #106	@ 0x6a
 8004ae0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ae2:	19bb      	adds	r3, r7, r6
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	193a      	adds	r2, r7, r4
 8004ae8:	7812      	ldrb	r2, [r2, #0]
 8004aea:	490a      	ldr	r1, [pc, #40]	@ (8004b14 <UARTEx_SetNbDataToProcess+0xb4>)
 8004aec:	5c8a      	ldrb	r2, [r1, r2]
 8004aee:	435a      	muls	r2, r3
 8004af0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004af2:	193b      	adds	r3, r7, r4
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	4a08      	ldr	r2, [pc, #32]	@ (8004b18 <UARTEx_SetNbDataToProcess+0xb8>)
 8004af8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004afa:	0019      	movs	r1, r3
 8004afc:	f7fb fb8a 	bl	8000214 <__divsi3>
 8004b00:	0003      	movs	r3, r0
 8004b02:	b299      	uxth	r1, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2268      	movs	r2, #104	@ 0x68
 8004b08:	5299      	strh	r1, [r3, r2]
}
 8004b0a:	46c0      	nop			@ (mov r8, r8)
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b005      	add	sp, #20
 8004b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b12:	46c0      	nop			@ (mov r8, r8)
 8004b14:	08004c58 	.word	0x08004c58
 8004b18:	08004c60 	.word	0x08004c60

08004b1c <memset>:
 8004b1c:	0003      	movs	r3, r0
 8004b1e:	1882      	adds	r2, r0, r2
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d100      	bne.n	8004b26 <memset+0xa>
 8004b24:	4770      	bx	lr
 8004b26:	7019      	strb	r1, [r3, #0]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	e7f9      	b.n	8004b20 <memset+0x4>

08004b2c <__libc_init_array>:
 8004b2c:	b570      	push	{r4, r5, r6, lr}
 8004b2e:	2600      	movs	r6, #0
 8004b30:	4c0c      	ldr	r4, [pc, #48]	@ (8004b64 <__libc_init_array+0x38>)
 8004b32:	4d0d      	ldr	r5, [pc, #52]	@ (8004b68 <__libc_init_array+0x3c>)
 8004b34:	1b64      	subs	r4, r4, r5
 8004b36:	10a4      	asrs	r4, r4, #2
 8004b38:	42a6      	cmp	r6, r4
 8004b3a:	d109      	bne.n	8004b50 <__libc_init_array+0x24>
 8004b3c:	2600      	movs	r6, #0
 8004b3e:	f000 f819 	bl	8004b74 <_init>
 8004b42:	4c0a      	ldr	r4, [pc, #40]	@ (8004b6c <__libc_init_array+0x40>)
 8004b44:	4d0a      	ldr	r5, [pc, #40]	@ (8004b70 <__libc_init_array+0x44>)
 8004b46:	1b64      	subs	r4, r4, r5
 8004b48:	10a4      	asrs	r4, r4, #2
 8004b4a:	42a6      	cmp	r6, r4
 8004b4c:	d105      	bne.n	8004b5a <__libc_init_array+0x2e>
 8004b4e:	bd70      	pop	{r4, r5, r6, pc}
 8004b50:	00b3      	lsls	r3, r6, #2
 8004b52:	58eb      	ldr	r3, [r5, r3]
 8004b54:	4798      	blx	r3
 8004b56:	3601      	adds	r6, #1
 8004b58:	e7ee      	b.n	8004b38 <__libc_init_array+0xc>
 8004b5a:	00b3      	lsls	r3, r6, #2
 8004b5c:	58eb      	ldr	r3, [r5, r3]
 8004b5e:	4798      	blx	r3
 8004b60:	3601      	adds	r6, #1
 8004b62:	e7f2      	b.n	8004b4a <__libc_init_array+0x1e>
 8004b64:	08004c68 	.word	0x08004c68
 8004b68:	08004c68 	.word	0x08004c68
 8004b6c:	08004c6c 	.word	0x08004c6c
 8004b70:	08004c68 	.word	0x08004c68

08004b74 <_init>:
 8004b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b76:	46c0      	nop			@ (mov r8, r8)
 8004b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7a:	bc08      	pop	{r3}
 8004b7c:	469e      	mov	lr, r3
 8004b7e:	4770      	bx	lr

08004b80 <_fini>:
 8004b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b82:	46c0      	nop			@ (mov r8, r8)
 8004b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b86:	bc08      	pop	{r3}
 8004b88:	469e      	mov	lr, r3
 8004b8a:	4770      	bx	lr
