
MD-test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004630  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080046e8  080046e8  000056e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047c0  080047c0  00006070  2**0
                  CONTENTS
  4 .ARM          00000000  080047c0  080047c0  00006070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047c0  080047c0  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047c0  080047c0  000057c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047c4  080047c4  000057c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080047c8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000070  08004838  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08004838  000063cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed55  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001efa  00000000  00000000  00014ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00016ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a6b  00000000  00000000  00017a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a6b  00000000  00000000  00018483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010077  00000000  00000000  0002deee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a760  00000000  00000000  0003df65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c86c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a74  00000000  00000000  000c8708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000cc17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080046d0 	.word	0x080046d0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	080046d0 	.word	0x080046d0

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	@ 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f806 	bl	8000238 <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__aeabi_idiv0>:
 8000238:	4770      	bx	lr
 800023a:	46c0      	nop			@ (mov r8, r8)

0800023c <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern void initialise_monitor_handles(void);//printfの初期化�?�プロトタイプ宣�?

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//タイマ�?�割り込みの�?容�?1msであ�?�れて1増や�?
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
    if (htim == &htim3){
 8000244:	687a      	ldr	r2, [r7, #4]
 8000246:	4b06      	ldr	r3, [pc, #24]	@ (8000260 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000248:	429a      	cmp	r2, r3
 800024a:	d104      	bne.n	8000256 <HAL_TIM_PeriodElapsedCallback+0x1a>
        m_counter++;
 800024c:	4b05      	ldr	r3, [pc, #20]	@ (8000264 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	1c5a      	adds	r2, r3, #1
 8000252:	4b04      	ldr	r3, [pc, #16]	@ (8000264 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000254:	601a      	str	r2, [r3, #0]
    }
}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	46bd      	mov	sp, r7
 800025a:	b002      	add	sp, #8
 800025c:	bd80      	pop	{r7, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)
 8000260:	2000008c 	.word	0x2000008c
 8000264:	200001c8 	.word	0x200001c8

08000268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000268:	b590      	push	{r4, r7, lr}
 800026a:	b0a9      	sub	sp, #164	@ 0xa4
 800026c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026e:	f000 fb5f 	bl	8000930 <HAL_Init>

  /* USER CODE BEGIN Init */
  initialise_monitor_handles();//printf初期�?
 8000272:	f003 fa51 	bl	8003718 <initialise_monitor_handles>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000276:	f000 f8c5 	bl	8000404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027a:	f000 f9b3 	bl	80005e4 <MX_GPIO_Init>
  MX_DMA_Init();
 800027e:	f000 f993 	bl	80005a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000282:	f000 f95d 	bl	8000540 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000286:	f000 f905 	bl	8000494 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);//タイマ�?�開�?
 800028a:	4b59      	ldr	r3, [pc, #356]	@ (80003f0 <main+0x188>)
 800028c:	0018      	movs	r0, r3
 800028e:	f001 fdff 	bl	8001e90 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//タイマ�?�カウンターの初期条件をと�?
  uint32_t p_counter;
  p_counter = m_counter;
 8000292:	4b58      	ldr	r3, [pc, #352]	@ (80003f4 <main+0x18c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	229c      	movs	r2, #156	@ 0x9c
 8000298:	18ba      	adds	r2, r7, r2
 800029a:	6013      	str	r3, [r2, #0]

//DMA関係�?�配�?�と変数を宣�?
  uint8_t rxBuf[128];//レシーブバ�?ファの用意�?�とりあえず0入れとくべきか�?
  uint8_t rxData[2]={0,0};//�?ータを�?�納する�?��??
 800029c:	003b      	movs	r3, r7
 800029e:	2200      	movs	r2, #0
 80002a0:	801a      	strh	r2, [r3, #0]
  uint8_t readData;//�?ータ探索用の�?時的なハコ
  uint8_t ID = 0;//自身のID
 80002a2:	238f      	movs	r3, #143	@ 0x8f
 80002a4:	18fb      	adds	r3, r7, r3
 80002a6:	2200      	movs	r2, #0
 80002a8:	701a      	strb	r2, [r3, #0]
  int index;//バッファの書き�?�し位置
  int indexRead;//読み込み位置、�?�期値は0に設�?


  HAL_UART_Receive_DMA(&huart2,rxBuf,sizeof(rxBuf));//DMAスター�?
 80002aa:	1d39      	adds	r1, r7, #4
 80002ac:	4b52      	ldr	r3, [pc, #328]	@ (80003f8 <main+0x190>)
 80002ae:	2280      	movs	r2, #128	@ 0x80
 80002b0:	0018      	movs	r0, r3
 80002b2:	f002 fa1f 	bl	80026f4 <HAL_UART_Receive_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	index = huart2.hdmarx->Instance->CNDTR;//バッファー残容�?
 80002b6:	4b50      	ldr	r3, [pc, #320]	@ (80003f8 <main+0x190>)
 80002b8:	2280      	movs	r2, #128	@ 0x80
 80002ba:	589b      	ldr	r3, [r3, r2]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	2188      	movs	r1, #136	@ 0x88
 80002c2:	187a      	adds	r2, r7, r1
 80002c4:	6013      	str	r3, [r2, #0]
	index = sizeof(rxBuf) - index;//�?新の受信�?ータ位置
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	2280      	movs	r2, #128	@ 0x80
 80002cc:	1ad3      	subs	r3, r2, r3
 80002ce:	187a      	adds	r2, r7, r1
 80002d0:	6013      	str	r3, [r2, #0]
	indexRead = index - 25;//読み込み位置の設�?
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	3b19      	subs	r3, #25
 80002d8:	2298      	movs	r2, #152	@ 0x98
 80002da:	18b9      	adds	r1, r7, r2
 80002dc:	600b      	str	r3, [r1, #0]
//	adjindex(&indexRead, rxBuf);//読み込み位置補正
	if(indexRead < 0){indexRead = indexRead + sizeof(rxBuf);}
 80002de:	18bb      	adds	r3, r7, r2
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	da04      	bge.n	80002f0 <main+0x88>
 80002e6:	18bb      	adds	r3, r7, r2
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	3380      	adds	r3, #128	@ 0x80
 80002ec:	18ba      	adds	r2, r7, r2
 80002ee:	6013      	str	r3, [r2, #0]

	while(1){
		readData = rxBuf[indexRead];//ID識別用の�?時的な変数
 80002f0:	2087      	movs	r0, #135	@ 0x87
 80002f2:	183b      	adds	r3, r7, r0
 80002f4:	1d39      	adds	r1, r7, #4
 80002f6:	2298      	movs	r2, #152	@ 0x98
 80002f8:	18ba      	adds	r2, r7, r2
 80002fa:	6812      	ldr	r2, [r2, #0]
 80002fc:	188a      	adds	r2, r1, r2
 80002fe:	7812      	ldrb	r2, [r2, #0]
 8000300:	701a      	strb	r2, [r3, #0]
		if(readData == 250+ID){//自�?のIDにたどりつ�?たと�?
 8000302:	183b      	adds	r3, r7, r0
 8000304:	781a      	ldrb	r2, [r3, #0]
 8000306:	238f      	movs	r3, #143	@ 0x8f
 8000308:	18fb      	adds	r3, r7, r3
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	33fa      	adds	r3, #250	@ 0xfa
 800030e:	429a      	cmp	r2, r3
 8000310:	d12e      	bne.n	8000370 <main+0x108>
			for(int i=1; i<3; i++){//rxDataに格�?
 8000312:	2301      	movs	r3, #1
 8000314:	2294      	movs	r2, #148	@ 0x94
 8000316:	18ba      	adds	r2, r7, r2
 8000318:	6013      	str	r3, [r2, #0]
 800031a:	e023      	b.n	8000364 <main+0xfc>
				int readPoint = indexRead + i;
 800031c:	2398      	movs	r3, #152	@ 0x98
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	2394      	movs	r3, #148	@ 0x94
 8000324:	18fb      	adds	r3, r7, r3
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	18d3      	adds	r3, r2, r3
 800032a:	2290      	movs	r2, #144	@ 0x90
 800032c:	18b9      	adds	r1, r7, r2
 800032e:	600b      	str	r3, [r1, #0]
//				adjindex(&readPoint, rxBuf);
				if(readPoint>sizeof(rxBuf)-1){readPoint = readPoint - sizeof(rxBuf);}
 8000330:	18bb      	adds	r3, r7, r2
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b7f      	cmp	r3, #127	@ 0x7f
 8000336:	d904      	bls.n	8000342 <main+0xda>
 8000338:	18bb      	adds	r3, r7, r2
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3b80      	subs	r3, #128	@ 0x80
 800033e:	18ba      	adds	r2, r7, r2
 8000340:	6013      	str	r3, [r2, #0]
				rxData[i-1] = rxBuf[readPoint];
 8000342:	2094      	movs	r0, #148	@ 0x94
 8000344:	183b      	adds	r3, r7, r0
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	3b01      	subs	r3, #1
 800034a:	1d39      	adds	r1, r7, #4
 800034c:	2290      	movs	r2, #144	@ 0x90
 800034e:	18ba      	adds	r2, r7, r2
 8000350:	6812      	ldr	r2, [r2, #0]
 8000352:	188a      	adds	r2, r1, r2
 8000354:	7811      	ldrb	r1, [r2, #0]
 8000356:	003a      	movs	r2, r7
 8000358:	54d1      	strb	r1, [r2, r3]
			for(int i=1; i<3; i++){//rxDataに格�?
 800035a:	183b      	adds	r3, r7, r0
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	3301      	adds	r3, #1
 8000360:	183a      	adds	r2, r7, r0
 8000362:	6013      	str	r3, [r2, #0]
 8000364:	2394      	movs	r3, #148	@ 0x94
 8000366:	18fb      	adds	r3, r7, r3
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2b02      	cmp	r3, #2
 800036c:	ddd6      	ble.n	800031c <main+0xb4>
			}
			break;
 800036e:	e018      	b.n	80003a2 <main+0x13a>
		}
		indexRead++;//�?個�?�める
 8000370:	2298      	movs	r2, #152	@ 0x98
 8000372:	18bb      	adds	r3, r7, r2
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	3301      	adds	r3, #1
 8000378:	18b9      	adds	r1, r7, r2
 800037a:	600b      	str	r3, [r1, #0]
//		adjindex(&indexRead, rxBuf);//補正
		if(indexRead>sizeof(rxBuf)-1){indexRead = indexRead - sizeof(rxBuf);}
 800037c:	18bb      	adds	r3, r7, r2
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2b7f      	cmp	r3, #127	@ 0x7f
 8000382:	d904      	bls.n	800038e <main+0x126>
 8000384:	18bb      	adds	r3, r7, r2
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	3b80      	subs	r3, #128	@ 0x80
 800038a:	18ba      	adds	r2, r7, r2
 800038c:	6013      	str	r3, [r2, #0]
		if(indexRead == index){break;}//�?新位置まで読んでIDがなかったらブレイク
 800038e:	2398      	movs	r3, #152	@ 0x98
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	2388      	movs	r3, #136	@ 0x88
 8000396:	18fb      	adds	r3, r7, r3
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	429a      	cmp	r2, r3
 800039c:	d000      	beq.n	80003a0 <main+0x138>
		readData = rxBuf[indexRead];//ID識別用の�?時的な変数
 800039e:	e7a7      	b.n	80002f0 <main+0x88>
		if(indexRead == index){break;}//�?新位置まで読んでIDがなかったらブレイク
 80003a0:	46c0      	nop			@ (mov r8, r8)
//	printf("%u::%u\n%lu\n", rxData[0], rxData[1], m_counter);

//ここから先�?��?0.1秒ごとにprintfしてLEDをトグルするプログラ�?
//普通にHAL_TIM_PeriodElapsedCallbackの中でど�?にかするべき�?�ような気もするけど�?ったん無�?

	  if(m_counter - p_counter > 1000){
 80003a2:	4b14      	ldr	r3, [pc, #80]	@ (80003f4 <main+0x18c>)
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	249c      	movs	r4, #156	@ 0x9c
 80003a8:	193b      	adds	r3, r7, r4
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	1ad2      	subs	r2, r2, r3
 80003ae:	23fa      	movs	r3, #250	@ 0xfa
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	429a      	cmp	r2, r3
 80003b4:	d800      	bhi.n	80003b8 <main+0x150>
 80003b6:	e77e      	b.n	80002b6 <main+0x4e>
	    printf("%u::%u  @%lu\n", rxData[0], rxData[1], m_counter);
 80003b8:	003b      	movs	r3, r7
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	0019      	movs	r1, r3
 80003be:	003b      	movs	r3, r7
 80003c0:	785b      	ldrb	r3, [r3, #1]
 80003c2:	001a      	movs	r2, r3
 80003c4:	4b0b      	ldr	r3, [pc, #44]	@ (80003f4 <main+0x18c>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	480c      	ldr	r0, [pc, #48]	@ (80003fc <main+0x194>)
 80003ca:	f003 fae3 	bl	8003994 <iprintf>
	  	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80003ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000400 <main+0x198>)
 80003d0:	2180      	movs	r1, #128	@ 0x80
 80003d2:	0018      	movs	r0, r3
 80003d4:	f000 ffe3 	bl	800139e <HAL_GPIO_TogglePin>
    	p_counter = m_counter;
 80003d8:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <main+0x18c>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	193a      	adds	r2, r7, r4
 80003de:	6013      	str	r3, [r2, #0]
    	rxData[0] = 0, rxData[1] = 0;
 80003e0:	003b      	movs	r3, r7
 80003e2:	2200      	movs	r2, #0
 80003e4:	701a      	strb	r2, [r3, #0]
 80003e6:	003b      	movs	r3, r7
 80003e8:	2200      	movs	r2, #0
 80003ea:	705a      	strb	r2, [r3, #1]
	index = huart2.hdmarx->Instance->CNDTR;//バッファー残容�?
 80003ec:	e763      	b.n	80002b6 <main+0x4e>
 80003ee:	46c0      	nop			@ (mov r8, r8)
 80003f0:	2000008c 	.word	0x2000008c
 80003f4:	200001c8 	.word	0x200001c8
 80003f8:	200000d8 	.word	0x200000d8
 80003fc:	080046e8 	.word	0x080046e8
 8000400:	50000400 	.word	0x50000400

08000404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000404:	b590      	push	{r4, r7, lr}
 8000406:	b093      	sub	sp, #76	@ 0x4c
 8000408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040a:	2414      	movs	r4, #20
 800040c:	193b      	adds	r3, r7, r4
 800040e:	0018      	movs	r0, r3
 8000410:	2334      	movs	r3, #52	@ 0x34
 8000412:	001a      	movs	r2, r3
 8000414:	2100      	movs	r1, #0
 8000416:	f003 fb19 	bl	8003a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	0018      	movs	r0, r3
 800041e:	2310      	movs	r3, #16
 8000420:	001a      	movs	r2, r3
 8000422:	2100      	movs	r1, #0
 8000424:	f003 fb12 	bl	8003a4c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000428:	2380      	movs	r3, #128	@ 0x80
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	0018      	movs	r0, r3
 800042e:	f000 ffd1 	bl	80013d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000432:	193b      	adds	r3, r7, r4
 8000434:	2202      	movs	r2, #2
 8000436:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000438:	193b      	adds	r3, r7, r4
 800043a:	2280      	movs	r2, #128	@ 0x80
 800043c:	0052      	lsls	r2, r2, #1
 800043e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000440:	193b      	adds	r3, r7, r4
 8000442:	2200      	movs	r2, #0
 8000444:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000446:	193b      	adds	r3, r7, r4
 8000448:	2240      	movs	r2, #64	@ 0x40
 800044a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800044c:	193b      	adds	r3, r7, r4
 800044e:	2200      	movs	r2, #0
 8000450:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000452:	193b      	adds	r3, r7, r4
 8000454:	0018      	movs	r0, r3
 8000456:	f001 f809 	bl	800146c <HAL_RCC_OscConfig>
 800045a:	1e03      	subs	r3, r0, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800045e:	f000 f905 	bl	800066c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	2207      	movs	r2, #7
 8000466:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2200      	movs	r2, #0
 800046c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2200      	movs	r2, #0
 8000478:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	2100      	movs	r1, #0
 800047e:	0018      	movs	r0, r3
 8000480:	f001 fb04 	bl	8001a8c <HAL_RCC_ClockConfig>
 8000484:	1e03      	subs	r3, r0, #0
 8000486:	d001      	beq.n	800048c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000488:	f000 f8f0 	bl	800066c <Error_Handler>
  }
}
 800048c:	46c0      	nop			@ (mov r8, r8)
 800048e:	46bd      	mov	sp, r7
 8000490:	b013      	add	sp, #76	@ 0x4c
 8000492:	bd90      	pop	{r4, r7, pc}

08000494 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800049a:	2310      	movs	r3, #16
 800049c:	18fb      	adds	r3, r7, r3
 800049e:	0018      	movs	r0, r3
 80004a0:	2310      	movs	r3, #16
 80004a2:	001a      	movs	r2, r3
 80004a4:	2100      	movs	r1, #0
 80004a6:	f003 fad1 	bl	8003a4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	0018      	movs	r0, r3
 80004ae:	230c      	movs	r3, #12
 80004b0:	001a      	movs	r2, r3
 80004b2:	2100      	movs	r1, #0
 80004b4:	f003 faca 	bl	8003a4c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000534 <MX_TIM3_Init+0xa0>)
 80004ba:	4a1f      	ldr	r2, [pc, #124]	@ (8000538 <MX_TIM3_Init+0xa4>)
 80004bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 80004be:	4b1d      	ldr	r3, [pc, #116]	@ (8000534 <MX_TIM3_Init+0xa0>)
 80004c0:	220f      	movs	r2, #15
 80004c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000534 <MX_TIM3_Init+0xa0>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80004ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000534 <MX_TIM3_Init+0xa0>)
 80004cc:	4a1b      	ldr	r2, [pc, #108]	@ (800053c <MX_TIM3_Init+0xa8>)
 80004ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d0:	4b18      	ldr	r3, [pc, #96]	@ (8000534 <MX_TIM3_Init+0xa0>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004d6:	4b17      	ldr	r3, [pc, #92]	@ (8000534 <MX_TIM3_Init+0xa0>)
 80004d8:	2200      	movs	r2, #0
 80004da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004dc:	4b15      	ldr	r3, [pc, #84]	@ (8000534 <MX_TIM3_Init+0xa0>)
 80004de:	0018      	movs	r0, r3
 80004e0:	f001 fc7e 	bl	8001de0 <HAL_TIM_Base_Init>
 80004e4:	1e03      	subs	r3, r0, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80004e8:	f000 f8c0 	bl	800066c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ec:	2110      	movs	r1, #16
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2280      	movs	r2, #128	@ 0x80
 80004f2:	0152      	lsls	r2, r2, #5
 80004f4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004f6:	187a      	adds	r2, r7, r1
 80004f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000534 <MX_TIM3_Init+0xa0>)
 80004fa:	0011      	movs	r1, r2
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 fe1d 	bl	800213c <HAL_TIM_ConfigClockSource>
 8000502:	1e03      	subs	r3, r0, #0
 8000504:	d001      	beq.n	800050a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000506:	f000 f8b1 	bl	800066c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000516:	1d3a      	adds	r2, r7, #4
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <MX_TIM3_Init+0xa0>)
 800051a:	0011      	movs	r1, r2
 800051c:	0018      	movs	r0, r3
 800051e:	f002 f819 	bl	8002554 <HAL_TIMEx_MasterConfigSynchronization>
 8000522:	1e03      	subs	r3, r0, #0
 8000524:	d001      	beq.n	800052a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000526:	f000 f8a1 	bl	800066c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b008      	add	sp, #32
 8000530:	bd80      	pop	{r7, pc}
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	2000008c 	.word	0x2000008c
 8000538:	40000400 	.word	0x40000400
 800053c:	000003e7 	.word	0x000003e7

08000540 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000544:	4b16      	ldr	r3, [pc, #88]	@ (80005a0 <MX_USART2_UART_Init+0x60>)
 8000546:	4a17      	ldr	r2, [pc, #92]	@ (80005a4 <MX_USART2_UART_Init+0x64>)
 8000548:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800054a:	4b15      	ldr	r3, [pc, #84]	@ (80005a0 <MX_USART2_UART_Init+0x60>)
 800054c:	22e1      	movs	r2, #225	@ 0xe1
 800054e:	0252      	lsls	r2, r2, #9
 8000550:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000552:	4b13      	ldr	r3, [pc, #76]	@ (80005a0 <MX_USART2_UART_Init+0x60>)
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000558:	4b11      	ldr	r3, [pc, #68]	@ (80005a0 <MX_USART2_UART_Init+0x60>)
 800055a:	2200      	movs	r2, #0
 800055c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800055e:	4b10      	ldr	r3, [pc, #64]	@ (80005a0 <MX_USART2_UART_Init+0x60>)
 8000560:	2200      	movs	r2, #0
 8000562:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000564:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <MX_USART2_UART_Init+0x60>)
 8000566:	220c      	movs	r2, #12
 8000568:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800056a:	4b0d      	ldr	r3, [pc, #52]	@ (80005a0 <MX_USART2_UART_Init+0x60>)
 800056c:	2200      	movs	r2, #0
 800056e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000570:	4b0b      	ldr	r3, [pc, #44]	@ (80005a0 <MX_USART2_UART_Init+0x60>)
 8000572:	2200      	movs	r2, #0
 8000574:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000576:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <MX_USART2_UART_Init+0x60>)
 8000578:	2200      	movs	r2, #0
 800057a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800057c:	4b08      	ldr	r3, [pc, #32]	@ (80005a0 <MX_USART2_UART_Init+0x60>)
 800057e:	2200      	movs	r2, #0
 8000580:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000582:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <MX_USART2_UART_Init+0x60>)
 8000584:	2200      	movs	r2, #0
 8000586:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000588:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <MX_USART2_UART_Init+0x60>)
 800058a:	0018      	movs	r0, r3
 800058c:	f002 f85c 	bl	8002648 <HAL_UART_Init>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000594:	f000 f86a 	bl	800066c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000598:	46c0      	nop			@ (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	200000d8 	.word	0x200000d8
 80005a4:	40004400 	.word	0x40004400

080005a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ae:	4b0c      	ldr	r3, [pc, #48]	@ (80005e0 <MX_DMA_Init+0x38>)
 80005b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80005b2:	4b0b      	ldr	r3, [pc, #44]	@ (80005e0 <MX_DMA_Init+0x38>)
 80005b4:	2101      	movs	r1, #1
 80005b6:	430a      	orrs	r2, r1
 80005b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80005ba:	4b09      	ldr	r3, [pc, #36]	@ (80005e0 <MX_DMA_Init+0x38>)
 80005bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80005be:	2201      	movs	r2, #1
 80005c0:	4013      	ands	r3, r2
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	2009      	movs	r0, #9
 80005cc:	f000 fae2 	bl	8000b94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005d0:	2009      	movs	r0, #9
 80005d2:	f000 faf4 	bl	8000bbe <HAL_NVIC_EnableIRQ>

}
 80005d6:	46c0      	nop			@ (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	b002      	add	sp, #8
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	40021000 	.word	0x40021000

080005e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b089      	sub	sp, #36	@ 0x24
 80005e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	240c      	movs	r4, #12
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	0018      	movs	r0, r3
 80005f0:	2314      	movs	r3, #20
 80005f2:	001a      	movs	r2, r3
 80005f4:	2100      	movs	r1, #0
 80005f6:	f003 fa29 	bl	8003a4c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000664 <MX_GPIO_Init+0x80>)
 80005fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005fe:	4b19      	ldr	r3, [pc, #100]	@ (8000664 <MX_GPIO_Init+0x80>)
 8000600:	2101      	movs	r1, #1
 8000602:	430a      	orrs	r2, r1
 8000604:	635a      	str	r2, [r3, #52]	@ 0x34
 8000606:	4b17      	ldr	r3, [pc, #92]	@ (8000664 <MX_GPIO_Init+0x80>)
 8000608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800060a:	2201      	movs	r2, #1
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b14      	ldr	r3, [pc, #80]	@ (8000664 <MX_GPIO_Init+0x80>)
 8000614:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000616:	4b13      	ldr	r3, [pc, #76]	@ (8000664 <MX_GPIO_Init+0x80>)
 8000618:	2102      	movs	r1, #2
 800061a:	430a      	orrs	r2, r1
 800061c:	635a      	str	r2, [r3, #52]	@ 0x34
 800061e:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <MX_GPIO_Init+0x80>)
 8000620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000622:	2202      	movs	r2, #2
 8000624:	4013      	ands	r3, r2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800062a:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <MX_GPIO_Init+0x84>)
 800062c:	2200      	movs	r2, #0
 800062e:	2180      	movs	r1, #128	@ 0x80
 8000630:	0018      	movs	r0, r3
 8000632:	f000 fe97 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000636:	0021      	movs	r1, r4
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2280      	movs	r2, #128	@ 0x80
 800063c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2201      	movs	r2, #1
 8000642:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000650:	187b      	adds	r3, r7, r1
 8000652:	4a05      	ldr	r2, [pc, #20]	@ (8000668 <MX_GPIO_Init+0x84>)
 8000654:	0019      	movs	r1, r3
 8000656:	0010      	movs	r0, r2
 8000658:	f000 fd20 	bl	800109c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800065c:	46c0      	nop			@ (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b009      	add	sp, #36	@ 0x24
 8000662:	bd90      	pop	{r4, r7, pc}
 8000664:	40021000 	.word	0x40021000
 8000668:	50000400 	.word	0x50000400

0800066c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000670:	b672      	cpsid	i
}
 8000672:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000674:	46c0      	nop			@ (mov r8, r8)
 8000676:	e7fd      	b.n	8000674 <Error_Handler+0x8>

08000678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067e:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <HAL_MspInit+0x44>)
 8000680:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <HAL_MspInit+0x44>)
 8000684:	2101      	movs	r1, #1
 8000686:	430a      	orrs	r2, r1
 8000688:	641a      	str	r2, [r3, #64]	@ 0x40
 800068a:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <HAL_MspInit+0x44>)
 800068c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068e:	2201      	movs	r2, #1
 8000690:	4013      	ands	r3, r2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <HAL_MspInit+0x44>)
 8000698:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800069a:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <HAL_MspInit+0x44>)
 800069c:	2180      	movs	r1, #128	@ 0x80
 800069e:	0549      	lsls	r1, r1, #21
 80006a0:	430a      	orrs	r2, r1
 80006a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006a4:	4b05      	ldr	r3, [pc, #20]	@ (80006bc <HAL_MspInit+0x44>)
 80006a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006a8:	2380      	movs	r3, #128	@ 0x80
 80006aa:	055b      	lsls	r3, r3, #21
 80006ac:	4013      	ands	r3, r2
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b2:	46c0      	nop			@ (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b002      	add	sp, #8
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	40021000 	.word	0x40021000

080006c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000704 <HAL_TIM_Base_MspInit+0x44>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d113      	bne.n	80006fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <HAL_TIM_Base_MspInit+0x48>)
 80006d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <HAL_TIM_Base_MspInit+0x48>)
 80006d8:	2102      	movs	r1, #2
 80006da:	430a      	orrs	r2, r1
 80006dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006de:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <HAL_TIM_Base_MspInit+0x48>)
 80006e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006e2:	2202      	movs	r2, #2
 80006e4:	4013      	ands	r3, r2
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	2010      	movs	r0, #16
 80006f0:	f000 fa50 	bl	8000b94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80006f4:	2010      	movs	r0, #16
 80006f6:	f000 fa62 	bl	8000bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b004      	add	sp, #16
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	40000400 	.word	0x40000400
 8000708:	40021000 	.word	0x40021000

0800070c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b08b      	sub	sp, #44	@ 0x2c
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	2414      	movs	r4, #20
 8000716:	193b      	adds	r3, r7, r4
 8000718:	0018      	movs	r0, r3
 800071a:	2314      	movs	r3, #20
 800071c:	001a      	movs	r2, r3
 800071e:	2100      	movs	r1, #0
 8000720:	f003 f994 	bl	8003a4c <memset>
  if(huart->Instance==USART2)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a30      	ldr	r2, [pc, #192]	@ (80007ec <HAL_UART_MspInit+0xe0>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d15a      	bne.n	80007e4 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800072e:	4b30      	ldr	r3, [pc, #192]	@ (80007f0 <HAL_UART_MspInit+0xe4>)
 8000730:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <HAL_UART_MspInit+0xe4>)
 8000734:	2180      	movs	r1, #128	@ 0x80
 8000736:	0289      	lsls	r1, r1, #10
 8000738:	430a      	orrs	r2, r1
 800073a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800073c:	4b2c      	ldr	r3, [pc, #176]	@ (80007f0 <HAL_UART_MspInit+0xe4>)
 800073e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000740:	2380      	movs	r3, #128	@ 0x80
 8000742:	029b      	lsls	r3, r3, #10
 8000744:	4013      	ands	r3, r2
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b29      	ldr	r3, [pc, #164]	@ (80007f0 <HAL_UART_MspInit+0xe4>)
 800074c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800074e:	4b28      	ldr	r3, [pc, #160]	@ (80007f0 <HAL_UART_MspInit+0xe4>)
 8000750:	2101      	movs	r1, #1
 8000752:	430a      	orrs	r2, r1
 8000754:	635a      	str	r2, [r3, #52]	@ 0x34
 8000756:	4b26      	ldr	r3, [pc, #152]	@ (80007f0 <HAL_UART_MspInit+0xe4>)
 8000758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800075a:	2201      	movs	r2, #1
 800075c:	4013      	ands	r3, r2
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000762:	0021      	movs	r1, r4
 8000764:	187b      	adds	r3, r7, r1
 8000766:	4a23      	ldr	r2, [pc, #140]	@ (80007f4 <HAL_UART_MspInit+0xe8>)
 8000768:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2202      	movs	r2, #2
 800076e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2201      	movs	r2, #1
 8000780:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	187a      	adds	r2, r7, r1
 8000784:	23a0      	movs	r3, #160	@ 0xa0
 8000786:	05db      	lsls	r3, r3, #23
 8000788:	0011      	movs	r1, r2
 800078a:	0018      	movs	r0, r3
 800078c:	f000 fc86 	bl	800109c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000790:	4b19      	ldr	r3, [pc, #100]	@ (80007f8 <HAL_UART_MspInit+0xec>)
 8000792:	4a1a      	ldr	r2, [pc, #104]	@ (80007fc <HAL_UART_MspInit+0xf0>)
 8000794:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000796:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <HAL_UART_MspInit+0xec>)
 8000798:	2234      	movs	r2, #52	@ 0x34
 800079a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800079c:	4b16      	ldr	r3, [pc, #88]	@ (80007f8 <HAL_UART_MspInit+0xec>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007a2:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <HAL_UART_MspInit+0xec>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007a8:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <HAL_UART_MspInit+0xec>)
 80007aa:	2280      	movs	r2, #128	@ 0x80
 80007ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007ae:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <HAL_UART_MspInit+0xec>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007b4:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <HAL_UART_MspInit+0xec>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <HAL_UART_MspInit+0xec>)
 80007bc:	2220      	movs	r2, #32
 80007be:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007c0:	4b0d      	ldr	r3, [pc, #52]	@ (80007f8 <HAL_UART_MspInit+0xec>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80007c6:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <HAL_UART_MspInit+0xec>)
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 fa15 	bl	8000bf8 <HAL_DMA_Init>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80007d2:	f7ff ff4b 	bl	800066c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2180      	movs	r1, #128	@ 0x80
 80007da:	4a07      	ldr	r2, [pc, #28]	@ (80007f8 <HAL_UART_MspInit+0xec>)
 80007dc:	505a      	str	r2, [r3, r1]
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <HAL_UART_MspInit+0xec>)
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007e4:	46c0      	nop			@ (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b00b      	add	sp, #44	@ 0x2c
 80007ea:	bd90      	pop	{r4, r7, pc}
 80007ec:	40004400 	.word	0x40004400
 80007f0:	40021000 	.word	0x40021000
 80007f4:	00008004 	.word	0x00008004
 80007f8:	2000016c 	.word	0x2000016c
 80007fc:	40020008 	.word	0x40020008

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000804:	46c0      	nop			@ (mov r8, r8)
 8000806:	e7fd      	b.n	8000804 <NMI_Handler+0x4>

08000808 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080c:	46c0      	nop			@ (mov r8, r8)
 800080e:	e7fd      	b.n	800080c <HardFault_Handler+0x4>

08000810 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000814:	46c0      	nop			@ (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081e:	46c0      	nop			@ (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000828:	f000 f8ec 	bl	8000a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082c:	46c0      	nop			@ (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000838:	4b03      	ldr	r3, [pc, #12]	@ (8000848 <DMA1_Channel1_IRQHandler+0x14>)
 800083a:	0018      	movs	r0, r3
 800083c:	f000 faec 	bl	8000e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000840:	46c0      	nop			@ (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	2000016c 	.word	0x2000016c

0800084c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000850:	4b03      	ldr	r3, [pc, #12]	@ (8000860 <TIM3_IRQHandler+0x14>)
 8000852:	0018      	movs	r0, r3
 8000854:	f001 fb6a 	bl	8001f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000858:	46c0      	nop			@ (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			@ (mov r8, r8)
 8000860:	2000008c 	.word	0x2000008c

08000864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800086c:	4a14      	ldr	r2, [pc, #80]	@ (80008c0 <_sbrk+0x5c>)
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <_sbrk+0x60>)
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000878:	4b13      	ldr	r3, [pc, #76]	@ (80008c8 <_sbrk+0x64>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d102      	bne.n	8000886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000880:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <_sbrk+0x64>)
 8000882:	4a12      	ldr	r2, [pc, #72]	@ (80008cc <_sbrk+0x68>)
 8000884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <_sbrk+0x64>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	18d3      	adds	r3, r2, r3
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	429a      	cmp	r2, r3
 8000892:	d207      	bcs.n	80008a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000894:	f003 f930 	bl	8003af8 <__errno>
 8000898:	0003      	movs	r3, r0
 800089a:	220c      	movs	r2, #12
 800089c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800089e:	2301      	movs	r3, #1
 80008a0:	425b      	negs	r3, r3
 80008a2:	e009      	b.n	80008b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008a4:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <_sbrk+0x64>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008aa:	4b07      	ldr	r3, [pc, #28]	@ (80008c8 <_sbrk+0x64>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	18d2      	adds	r2, r2, r3
 80008b2:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <_sbrk+0x64>)
 80008b4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008b6:	68fb      	ldr	r3, [r7, #12]
}
 80008b8:	0018      	movs	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b006      	add	sp, #24
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20002000 	.word	0x20002000
 80008c4:	00000400 	.word	0x00000400
 80008c8:	200001cc 	.word	0x200001cc
 80008cc:	200003d0 	.word	0x200003d0

080008d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d4:	46c0      	nop			@ (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008dc:	480d      	ldr	r0, [pc, #52]	@ (8000914 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008e0:	f7ff fff6 	bl	80008d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e4:	480c      	ldr	r0, [pc, #48]	@ (8000918 <LoopForever+0x6>)
  ldr r1, =_edata
 80008e6:	490d      	ldr	r1, [pc, #52]	@ (800091c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000920 <LoopForever+0xe>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ec:	e002      	b.n	80008f4 <LoopCopyDataInit>

080008ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f2:	3304      	adds	r3, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f8:	d3f9      	bcc.n	80008ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000928 <LoopForever+0x16>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000900:	e001      	b.n	8000906 <LoopFillZerobss>

08000902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000904:	3204      	adds	r2, #4

08000906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000908:	d3fb      	bcc.n	8000902 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800090a:	f003 f8fb 	bl	8003b04 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800090e:	f7ff fcab 	bl	8000268 <main>

08000912 <LoopForever>:

LoopForever:
  b LoopForever
 8000912:	e7fe      	b.n	8000912 <LoopForever>
  ldr   r0, =_estack
 8000914:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000920:	080047c8 	.word	0x080047c8
  ldr r2, =_sbss
 8000924:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000928:	200003cc 	.word	0x200003cc

0800092c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_IRQHandler>
	...

08000930 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800093c:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <HAL_Init+0x3c>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <HAL_Init+0x3c>)
 8000942:	2180      	movs	r1, #128	@ 0x80
 8000944:	0049      	lsls	r1, r1, #1
 8000946:	430a      	orrs	r2, r1
 8000948:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800094a:	2003      	movs	r0, #3
 800094c:	f000 f810 	bl	8000970 <HAL_InitTick>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d003      	beq.n	800095c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	2201      	movs	r2, #1
 8000958:	701a      	strb	r2, [r3, #0]
 800095a:	e001      	b.n	8000960 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800095c:	f7ff fe8c 	bl	8000678 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000960:	1dfb      	adds	r3, r7, #7
 8000962:	781b      	ldrb	r3, [r3, #0]
}
 8000964:	0018      	movs	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	b002      	add	sp, #8
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40022000 	.word	0x40022000

08000970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000978:	230f      	movs	r3, #15
 800097a:	18fb      	adds	r3, r7, r3
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000980:	4b1d      	ldr	r3, [pc, #116]	@ (80009f8 <HAL_InitTick+0x88>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d02b      	beq.n	80009e0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000988:	4b1c      	ldr	r3, [pc, #112]	@ (80009fc <HAL_InitTick+0x8c>)
 800098a:	681c      	ldr	r4, [r3, #0]
 800098c:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <HAL_InitTick+0x88>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	0019      	movs	r1, r3
 8000992:	23fa      	movs	r3, #250	@ 0xfa
 8000994:	0098      	lsls	r0, r3, #2
 8000996:	f7ff fbc5 	bl	8000124 <__udivsi3>
 800099a:	0003      	movs	r3, r0
 800099c:	0019      	movs	r1, r3
 800099e:	0020      	movs	r0, r4
 80009a0:	f7ff fbc0 	bl	8000124 <__udivsi3>
 80009a4:	0003      	movs	r3, r0
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 f919 	bl	8000bde <HAL_SYSTICK_Config>
 80009ac:	1e03      	subs	r3, r0, #0
 80009ae:	d112      	bne.n	80009d6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b03      	cmp	r3, #3
 80009b4:	d80a      	bhi.n	80009cc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b6:	6879      	ldr	r1, [r7, #4]
 80009b8:	2301      	movs	r3, #1
 80009ba:	425b      	negs	r3, r3
 80009bc:	2200      	movs	r2, #0
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 f8e8 	bl	8000b94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a00 <HAL_InitTick+0x90>)
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	e00d      	b.n	80009e8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80009cc:	230f      	movs	r3, #15
 80009ce:	18fb      	adds	r3, r7, r3
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
 80009d4:	e008      	b.n	80009e8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009d6:	230f      	movs	r3, #15
 80009d8:	18fb      	adds	r3, r7, r3
 80009da:	2201      	movs	r2, #1
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	e003      	b.n	80009e8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009e0:	230f      	movs	r3, #15
 80009e2:	18fb      	adds	r3, r7, r3
 80009e4:	2201      	movs	r2, #1
 80009e6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009e8:	230f      	movs	r3, #15
 80009ea:	18fb      	adds	r3, r7, r3
 80009ec:	781b      	ldrb	r3, [r3, #0]
}
 80009ee:	0018      	movs	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b005      	add	sp, #20
 80009f4:	bd90      	pop	{r4, r7, pc}
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000004 	.word	0x20000004

08000a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a08:	4b05      	ldr	r3, [pc, #20]	@ (8000a20 <HAL_IncTick+0x1c>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	001a      	movs	r2, r3
 8000a0e:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <HAL_IncTick+0x20>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	18d2      	adds	r2, r2, r3
 8000a14:	4b03      	ldr	r3, [pc, #12]	@ (8000a24 <HAL_IncTick+0x20>)
 8000a16:	601a      	str	r2, [r3, #0]
}
 8000a18:	46c0      	nop			@ (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			@ (mov r8, r8)
 8000a20:	20000008 	.word	0x20000008
 8000a24:	200001d0 	.word	0x200001d0

08000a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a2c:	4b02      	ldr	r3, [pc, #8]	@ (8000a38 <HAL_GetTick+0x10>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
}
 8000a30:	0018      	movs	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	200001d0 	.word	0x200001d0

08000a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	0002      	movs	r2, r0
 8000a44:	1dfb      	adds	r3, r7, #7
 8000a46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a4e:	d809      	bhi.n	8000a64 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	001a      	movs	r2, r3
 8000a56:	231f      	movs	r3, #31
 8000a58:	401a      	ands	r2, r3
 8000a5a:	4b04      	ldr	r3, [pc, #16]	@ (8000a6c <__NVIC_EnableIRQ+0x30>)
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4091      	lsls	r1, r2
 8000a60:	000a      	movs	r2, r1
 8000a62:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000a64:	46c0      	nop			@ (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	e000e100 	.word	0xe000e100

08000a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	0002      	movs	r2, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a84:	d828      	bhi.n	8000ad8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a86:	4a2f      	ldr	r2, [pc, #188]	@ (8000b44 <__NVIC_SetPriority+0xd4>)
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b25b      	sxtb	r3, r3
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	33c0      	adds	r3, #192	@ 0xc0
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	589b      	ldr	r3, [r3, r2]
 8000a96:	1dfa      	adds	r2, r7, #7
 8000a98:	7812      	ldrb	r2, [r2, #0]
 8000a9a:	0011      	movs	r1, r2
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	400a      	ands	r2, r1
 8000aa0:	00d2      	lsls	r2, r2, #3
 8000aa2:	21ff      	movs	r1, #255	@ 0xff
 8000aa4:	4091      	lsls	r1, r2
 8000aa6:	000a      	movs	r2, r1
 8000aa8:	43d2      	mvns	r2, r2
 8000aaa:	401a      	ands	r2, r3
 8000aac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	019b      	lsls	r3, r3, #6
 8000ab2:	22ff      	movs	r2, #255	@ 0xff
 8000ab4:	401a      	ands	r2, r3
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	0018      	movs	r0, r3
 8000abc:	2303      	movs	r3, #3
 8000abe:	4003      	ands	r3, r0
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac4:	481f      	ldr	r0, [pc, #124]	@ (8000b44 <__NVIC_SetPriority+0xd4>)
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b25b      	sxtb	r3, r3
 8000acc:	089b      	lsrs	r3, r3, #2
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	33c0      	adds	r3, #192	@ 0xc0
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ad6:	e031      	b.n	8000b3c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b48 <__NVIC_SetPriority+0xd8>)
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	0019      	movs	r1, r3
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	400b      	ands	r3, r1
 8000ae4:	3b08      	subs	r3, #8
 8000ae6:	089b      	lsrs	r3, r3, #2
 8000ae8:	3306      	adds	r3, #6
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	18d3      	adds	r3, r2, r3
 8000aee:	3304      	adds	r3, #4
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	1dfa      	adds	r2, r7, #7
 8000af4:	7812      	ldrb	r2, [r2, #0]
 8000af6:	0011      	movs	r1, r2
 8000af8:	2203      	movs	r2, #3
 8000afa:	400a      	ands	r2, r1
 8000afc:	00d2      	lsls	r2, r2, #3
 8000afe:	21ff      	movs	r1, #255	@ 0xff
 8000b00:	4091      	lsls	r1, r2
 8000b02:	000a      	movs	r2, r1
 8000b04:	43d2      	mvns	r2, r2
 8000b06:	401a      	ands	r2, r3
 8000b08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	019b      	lsls	r3, r3, #6
 8000b0e:	22ff      	movs	r2, #255	@ 0xff
 8000b10:	401a      	ands	r2, r3
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	0018      	movs	r0, r3
 8000b18:	2303      	movs	r3, #3
 8000b1a:	4003      	ands	r3, r0
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b20:	4809      	ldr	r0, [pc, #36]	@ (8000b48 <__NVIC_SetPriority+0xd8>)
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	001c      	movs	r4, r3
 8000b28:	230f      	movs	r3, #15
 8000b2a:	4023      	ands	r3, r4
 8000b2c:	3b08      	subs	r3, #8
 8000b2e:	089b      	lsrs	r3, r3, #2
 8000b30:	430a      	orrs	r2, r1
 8000b32:	3306      	adds	r3, #6
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	18c3      	adds	r3, r0, r3
 8000b38:	3304      	adds	r3, #4
 8000b3a:	601a      	str	r2, [r3, #0]
}
 8000b3c:	46c0      	nop			@ (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b003      	add	sp, #12
 8000b42:	bd90      	pop	{r4, r7, pc}
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	1e5a      	subs	r2, r3, #1
 8000b58:	2380      	movs	r3, #128	@ 0x80
 8000b5a:	045b      	lsls	r3, r3, #17
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d301      	bcc.n	8000b64 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b60:	2301      	movs	r3, #1
 8000b62:	e010      	b.n	8000b86 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b64:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <SysTick_Config+0x44>)
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	3a01      	subs	r2, #1
 8000b6a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	425b      	negs	r3, r3
 8000b70:	2103      	movs	r1, #3
 8000b72:	0018      	movs	r0, r3
 8000b74:	f7ff ff7c 	bl	8000a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b78:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <SysTick_Config+0x44>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7e:	4b04      	ldr	r3, [pc, #16]	@ (8000b90 <SysTick_Config+0x44>)
 8000b80:	2207      	movs	r2, #7
 8000b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	0018      	movs	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b002      	add	sp, #8
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	e000e010 	.word	0xe000e010

08000b94 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
 8000b9e:	210f      	movs	r1, #15
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	1c02      	adds	r2, r0, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b25b      	sxtb	r3, r3
 8000bae:	0011      	movs	r1, r2
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f7ff ff5d 	bl	8000a70 <__NVIC_SetPriority>
}
 8000bb6:	46c0      	nop			@ (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b004      	add	sp, #16
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	0002      	movs	r2, r0
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b25b      	sxtb	r3, r3
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f7ff ff33 	bl	8000a3c <__NVIC_EnableIRQ>
}
 8000bd6:	46c0      	nop			@ (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b002      	add	sp, #8
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff ffaf 	bl	8000b4c <SysTick_Config>
 8000bee:	0003      	movs	r3, r0
}
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b002      	add	sp, #8
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d101      	bne.n	8000c0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e077      	b.n	8000cfa <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a3d      	ldr	r2, [pc, #244]	@ (8000d04 <HAL_DMA_Init+0x10c>)
 8000c10:	4694      	mov	ip, r2
 8000c12:	4463      	add	r3, ip
 8000c14:	2114      	movs	r1, #20
 8000c16:	0018      	movs	r0, r3
 8000c18:	f7ff fa84 	bl	8000124 <__udivsi3>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	009a      	lsls	r2, r3, #2
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2225      	movs	r2, #37	@ 0x25
 8000c28:	2102      	movs	r1, #2
 8000c2a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4934      	ldr	r1, [pc, #208]	@ (8000d08 <HAL_DMA_Init+0x110>)
 8000c38:	400a      	ands	r2, r1
 8000c3a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	6819      	ldr	r1, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	689a      	ldr	r2, [r3, #8]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	431a      	orrs	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	431a      	orrs	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	431a      	orrs	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	431a      	orrs	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a1b      	ldr	r3, [r3, #32]
 8000c68:	431a      	orrs	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	0018      	movs	r0, r3
 8000c76:	f000 f9c1 	bl	8000ffc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	2380      	movs	r3, #128	@ 0x80
 8000c80:	01db      	lsls	r3, r3, #7
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d102      	bne.n	8000c8c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685a      	ldr	r2, [r3, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c94:	213f      	movs	r1, #63	@ 0x3f
 8000c96:	400a      	ands	r2, r1
 8000c98:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000ca2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d011      	beq.n	8000cd0 <HAL_DMA_Init+0xd8>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2b04      	cmp	r3, #4
 8000cb2:	d80d      	bhi.n	8000cd0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f000 f9cc 	bl	8001054 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	e008      	b.n	8000ce2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2225      	movs	r2, #37	@ 0x25
 8000cec:	2101      	movs	r1, #1
 8000cee:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2224      	movs	r2, #36	@ 0x24
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b002      	add	sp, #8
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	bffdfff8 	.word	0xbffdfff8
 8000d08:	ffff800f 	.word	0xffff800f

08000d0c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
 8000d18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d1a:	2317      	movs	r3, #23
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	2224      	movs	r2, #36	@ 0x24
 8000d26:	5c9b      	ldrb	r3, [r3, r2]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d101      	bne.n	8000d30 <HAL_DMA_Start_IT+0x24>
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	e06f      	b.n	8000e10 <HAL_DMA_Start_IT+0x104>
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2224      	movs	r2, #36	@ 0x24
 8000d34:	2101      	movs	r1, #1
 8000d36:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2225      	movs	r2, #37	@ 0x25
 8000d3c:	5c9b      	ldrb	r3, [r3, r2]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d157      	bne.n	8000df4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2225      	movs	r2, #37	@ 0x25
 8000d48:	2102      	movs	r1, #2
 8000d4a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	438a      	bics	r2, r1
 8000d60:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	68b9      	ldr	r1, [r7, #8]
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f000 f907 	bl	8000f7c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d008      	beq.n	8000d88 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	210e      	movs	r1, #14
 8000d82:	430a      	orrs	r2, r1
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	e00f      	b.n	8000da8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2104      	movs	r1, #4
 8000d94:	438a      	bics	r2, r1
 8000d96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	210a      	movs	r1, #10
 8000da4:	430a      	orrs	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	2380      	movs	r3, #128	@ 0x80
 8000db0:	025b      	lsls	r3, r3, #9
 8000db2:	4013      	ands	r3, r2
 8000db4:	d008      	beq.n	8000dc8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc0:	2180      	movs	r1, #128	@ 0x80
 8000dc2:	0049      	lsls	r1, r1, #1
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d008      	beq.n	8000de2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000dda:	2180      	movs	r1, #128	@ 0x80
 8000ddc:	0049      	lsls	r1, r1, #1
 8000dde:	430a      	orrs	r2, r1
 8000de0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2101      	movs	r1, #1
 8000dee:	430a      	orrs	r2, r1
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	e00a      	b.n	8000e0a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2280      	movs	r2, #128	@ 0x80
 8000df8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	2224      	movs	r2, #36	@ 0x24
 8000dfe:	2100      	movs	r1, #0
 8000e00:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8000e02:	2317      	movs	r3, #23
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000e0a:	2317      	movs	r3, #23
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	781b      	ldrb	r3, [r3, #0]
}
 8000e10:	0018      	movs	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b006      	add	sp, #24
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8000e20:	4b55      	ldr	r3, [pc, #340]	@ (8000f78 <HAL_DMA_IRQHandler+0x160>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e32:	221c      	movs	r2, #28
 8000e34:	4013      	ands	r3, r2
 8000e36:	2204      	movs	r2, #4
 8000e38:	409a      	lsls	r2, r3
 8000e3a:	0013      	movs	r3, r2
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	d027      	beq.n	8000e92 <HAL_DMA_IRQHandler+0x7a>
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	2204      	movs	r2, #4
 8000e46:	4013      	ands	r3, r2
 8000e48:	d023      	beq.n	8000e92 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2220      	movs	r2, #32
 8000e52:	4013      	ands	r3, r2
 8000e54:	d107      	bne.n	8000e66 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2104      	movs	r1, #4
 8000e62:	438a      	bics	r2, r1
 8000e64:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8000e66:	4b44      	ldr	r3, [pc, #272]	@ (8000f78 <HAL_DMA_IRQHandler+0x160>)
 8000e68:	6859      	ldr	r1, [r3, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	221c      	movs	r2, #28
 8000e70:	4013      	ands	r3, r2
 8000e72:	2204      	movs	r2, #4
 8000e74:	409a      	lsls	r2, r3
 8000e76:	4b40      	ldr	r3, [pc, #256]	@ (8000f78 <HAL_DMA_IRQHandler+0x160>)
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d100      	bne.n	8000e86 <HAL_DMA_IRQHandler+0x6e>
 8000e84:	e073      	b.n	8000f6e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	0010      	movs	r0, r2
 8000e8e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8000e90:	e06d      	b.n	8000f6e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	221c      	movs	r2, #28
 8000e98:	4013      	ands	r3, r2
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	409a      	lsls	r2, r3
 8000e9e:	0013      	movs	r3, r2
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	d02e      	beq.n	8000f04 <HAL_DMA_IRQHandler+0xec>
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	4013      	ands	r3, r2
 8000eac:	d02a      	beq.n	8000f04 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2220      	movs	r2, #32
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	d10b      	bne.n	8000ed2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	210a      	movs	r1, #10
 8000ec6:	438a      	bics	r2, r1
 8000ec8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2225      	movs	r2, #37	@ 0x25
 8000ece:	2101      	movs	r1, #1
 8000ed0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8000ed2:	4b29      	ldr	r3, [pc, #164]	@ (8000f78 <HAL_DMA_IRQHandler+0x160>)
 8000ed4:	6859      	ldr	r1, [r3, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	221c      	movs	r2, #28
 8000edc:	4013      	ands	r3, r2
 8000ede:	2202      	movs	r2, #2
 8000ee0:	409a      	lsls	r2, r3
 8000ee2:	4b25      	ldr	r3, [pc, #148]	@ (8000f78 <HAL_DMA_IRQHandler+0x160>)
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2224      	movs	r2, #36	@ 0x24
 8000eec:	2100      	movs	r1, #0
 8000eee:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d03a      	beq.n	8000f6e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	0010      	movs	r0, r2
 8000f00:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8000f02:	e034      	b.n	8000f6e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f08:	221c      	movs	r2, #28
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	0013      	movs	r3, r2
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	4013      	ands	r3, r2
 8000f16:	d02b      	beq.n	8000f70 <HAL_DMA_IRQHandler+0x158>
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	2208      	movs	r2, #8
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	d027      	beq.n	8000f70 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	210e      	movs	r1, #14
 8000f2c:	438a      	bics	r2, r1
 8000f2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8000f30:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <HAL_DMA_IRQHandler+0x160>)
 8000f32:	6859      	ldr	r1, [r3, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f38:	221c      	movs	r2, #28
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <HAL_DMA_IRQHandler+0x160>)
 8000f42:	430a      	orrs	r2, r1
 8000f44:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2225      	movs	r2, #37	@ 0x25
 8000f50:	2101      	movs	r1, #1
 8000f52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2224      	movs	r2, #36	@ 0x24
 8000f58:	2100      	movs	r1, #0
 8000f5a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d005      	beq.n	8000f70 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	0010      	movs	r0, r2
 8000f6c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000f6e:	46c0      	nop			@ (mov r8, r8)
 8000f70:	46c0      	nop			@ (mov r8, r8)
}
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b004      	add	sp, #16
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40020000 	.word	0x40020000

08000f7c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000f92:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d004      	beq.n	8000fa6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000fa4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8000fa6:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <DMA_SetConfig+0x7c>)
 8000fa8:	6859      	ldr	r1, [r3, #4]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fae:	221c      	movs	r2, #28
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	409a      	lsls	r2, r3
 8000fb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <DMA_SetConfig+0x7c>)
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	2b10      	cmp	r3, #16
 8000fca:	d108      	bne.n	8000fde <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fdc:	e007      	b.n	8000fee <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	60da      	str	r2, [r3, #12]
}
 8000fee:	46c0      	nop			@ (mov r8, r8)
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b004      	add	sp, #16
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	40020000 	.word	0x40020000

08000ffc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001008:	089b      	lsrs	r3, r3, #2
 800100a:	4a10      	ldr	r2, [pc, #64]	@ (800104c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800100c:	4694      	mov	ip, r2
 800100e:	4463      	add	r3, ip
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	001a      	movs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	001a      	movs	r2, r3
 800101e:	23ff      	movs	r3, #255	@ 0xff
 8001020:	4013      	ands	r3, r2
 8001022:	3b08      	subs	r3, #8
 8001024:	2114      	movs	r1, #20
 8001026:	0018      	movs	r0, r3
 8001028:	f7ff f87c 	bl	8000124 <__udivsi3>
 800102c:	0003      	movs	r3, r0
 800102e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a07      	ldr	r2, [pc, #28]	@ (8001050 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001034:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	221f      	movs	r2, #31
 800103a:	4013      	ands	r3, r2
 800103c:	2201      	movs	r2, #1
 800103e:	409a      	lsls	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001044:	46c0      	nop			@ (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	b004      	add	sp, #16
 800104a:	bd80      	pop	{r7, pc}
 800104c:	10008200 	.word	0x10008200
 8001050:	40020880 	.word	0x40020880

08001054 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	223f      	movs	r2, #63	@ 0x3f
 8001062:	4013      	ands	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4a0a      	ldr	r2, [pc, #40]	@ (8001094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800106a:	4694      	mov	ip, r2
 800106c:	4463      	add	r3, ip
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	001a      	movs	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a07      	ldr	r2, [pc, #28]	@ (8001098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800107a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	3b01      	subs	r3, #1
 8001080:	2203      	movs	r2, #3
 8001082:	4013      	ands	r3, r2
 8001084:	2201      	movs	r2, #1
 8001086:	409a      	lsls	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800108c:	46c0      	nop			@ (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	b004      	add	sp, #16
 8001092:	bd80      	pop	{r7, pc}
 8001094:	1000823f 	.word	0x1000823f
 8001098:	40020940 	.word	0x40020940

0800109c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010aa:	e147      	b.n	800133c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2101      	movs	r1, #1
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4091      	lsls	r1, r2
 80010b6:	000a      	movs	r2, r1
 80010b8:	4013      	ands	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d100      	bne.n	80010c4 <HAL_GPIO_Init+0x28>
 80010c2:	e138      	b.n	8001336 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2203      	movs	r2, #3
 80010ca:	4013      	ands	r3, r2
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d005      	beq.n	80010dc <HAL_GPIO_Init+0x40>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2203      	movs	r2, #3
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d130      	bne.n	800113e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	409a      	lsls	r2, r3
 80010ea:	0013      	movs	r3, r2
 80010ec:	43da      	mvns	r2, r3
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	68da      	ldr	r2, [r3, #12]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	409a      	lsls	r2, r3
 80010fe:	0013      	movs	r3, r2
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001112:	2201      	movs	r2, #1
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	43da      	mvns	r2, r3
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	091b      	lsrs	r3, r3, #4
 8001128:	2201      	movs	r2, #1
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
 8001130:	0013      	movs	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2203      	movs	r2, #3
 8001144:	4013      	ands	r3, r2
 8001146:	2b03      	cmp	r3, #3
 8001148:	d017      	beq.n	800117a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	409a      	lsls	r2, r3
 8001158:	0013      	movs	r3, r2
 800115a:	43da      	mvns	r2, r3
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	409a      	lsls	r2, r3
 800116c:	0013      	movs	r3, r2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2203      	movs	r2, #3
 8001180:	4013      	ands	r3, r2
 8001182:	2b02      	cmp	r3, #2
 8001184:	d123      	bne.n	80011ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	08da      	lsrs	r2, r3, #3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3208      	adds	r2, #8
 800118e:	0092      	lsls	r2, r2, #2
 8001190:	58d3      	ldr	r3, [r2, r3]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	2207      	movs	r2, #7
 8001198:	4013      	ands	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	220f      	movs	r2, #15
 800119e:	409a      	lsls	r2, r3
 80011a0:	0013      	movs	r3, r2
 80011a2:	43da      	mvns	r2, r3
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	691a      	ldr	r2, [r3, #16]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	2107      	movs	r1, #7
 80011b2:	400b      	ands	r3, r1
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	409a      	lsls	r2, r3
 80011b8:	0013      	movs	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	08da      	lsrs	r2, r3, #3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3208      	adds	r2, #8
 80011c8:	0092      	lsls	r2, r2, #2
 80011ca:	6939      	ldr	r1, [r7, #16]
 80011cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	43da      	mvns	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2203      	movs	r2, #3
 80011ec:	401a      	ands	r2, r3
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	409a      	lsls	r2, r3
 80011f4:	0013      	movs	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	23c0      	movs	r3, #192	@ 0xc0
 8001208:	029b      	lsls	r3, r3, #10
 800120a:	4013      	ands	r3, r2
 800120c:	d100      	bne.n	8001210 <HAL_GPIO_Init+0x174>
 800120e:	e092      	b.n	8001336 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001210:	4a50      	ldr	r2, [pc, #320]	@ (8001354 <HAL_GPIO_Init+0x2b8>)
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3318      	adds	r3, #24
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	589b      	ldr	r3, [r3, r2]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2203      	movs	r2, #3
 8001222:	4013      	ands	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	220f      	movs	r2, #15
 8001228:	409a      	lsls	r2, r3
 800122a:	0013      	movs	r3, r2
 800122c:	43da      	mvns	r2, r3
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	23a0      	movs	r3, #160	@ 0xa0
 8001238:	05db      	lsls	r3, r3, #23
 800123a:	429a      	cmp	r2, r3
 800123c:	d013      	beq.n	8001266 <HAL_GPIO_Init+0x1ca>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a45      	ldr	r2, [pc, #276]	@ (8001358 <HAL_GPIO_Init+0x2bc>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d00d      	beq.n	8001262 <HAL_GPIO_Init+0x1c6>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a44      	ldr	r2, [pc, #272]	@ (800135c <HAL_GPIO_Init+0x2c0>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d007      	beq.n	800125e <HAL_GPIO_Init+0x1c2>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a43      	ldr	r2, [pc, #268]	@ (8001360 <HAL_GPIO_Init+0x2c4>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d101      	bne.n	800125a <HAL_GPIO_Init+0x1be>
 8001256:	2303      	movs	r3, #3
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x1cc>
 800125a:	2305      	movs	r3, #5
 800125c:	e004      	b.n	8001268 <HAL_GPIO_Init+0x1cc>
 800125e:	2302      	movs	r3, #2
 8001260:	e002      	b.n	8001268 <HAL_GPIO_Init+0x1cc>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <HAL_GPIO_Init+0x1cc>
 8001266:	2300      	movs	r3, #0
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	2103      	movs	r1, #3
 800126c:	400a      	ands	r2, r1
 800126e:	00d2      	lsls	r2, r2, #3
 8001270:	4093      	lsls	r3, r2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001278:	4936      	ldr	r1, [pc, #216]	@ (8001354 <HAL_GPIO_Init+0x2b8>)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3318      	adds	r3, #24
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001286:	4b33      	ldr	r3, [pc, #204]	@ (8001354 <HAL_GPIO_Init+0x2b8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	43da      	mvns	r2, r3
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	2380      	movs	r3, #128	@ 0x80
 800129c:	035b      	lsls	r3, r3, #13
 800129e:	4013      	ands	r3, r2
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001354 <HAL_GPIO_Init+0x2b8>)
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80012b0:	4b28      	ldr	r3, [pc, #160]	@ (8001354 <HAL_GPIO_Init+0x2b8>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	43da      	mvns	r2, r3
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	2380      	movs	r3, #128	@ 0x80
 80012c6:	039b      	lsls	r3, r3, #14
 80012c8:	4013      	ands	r3, r2
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001354 <HAL_GPIO_Init+0x2b8>)
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012da:	4a1e      	ldr	r2, [pc, #120]	@ (8001354 <HAL_GPIO_Init+0x2b8>)
 80012dc:	2384      	movs	r3, #132	@ 0x84
 80012de:	58d3      	ldr	r3, [r2, r3]
 80012e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	43da      	mvns	r2, r3
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	2380      	movs	r3, #128	@ 0x80
 80012f2:	029b      	lsls	r3, r3, #10
 80012f4:	4013      	ands	r3, r2
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001300:	4914      	ldr	r1, [pc, #80]	@ (8001354 <HAL_GPIO_Init+0x2b8>)
 8001302:	2284      	movs	r2, #132	@ 0x84
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001308:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <HAL_GPIO_Init+0x2b8>)
 800130a:	2380      	movs	r3, #128	@ 0x80
 800130c:	58d3      	ldr	r3, [r2, r3]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	43da      	mvns	r2, r3
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	2380      	movs	r3, #128	@ 0x80
 8001320:	025b      	lsls	r3, r3, #9
 8001322:	4013      	ands	r3, r2
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800132e:	4909      	ldr	r1, [pc, #36]	@ (8001354 <HAL_GPIO_Init+0x2b8>)
 8001330:	2280      	movs	r2, #128	@ 0x80
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3301      	adds	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	40da      	lsrs	r2, r3
 8001344:	1e13      	subs	r3, r2, #0
 8001346:	d000      	beq.n	800134a <HAL_GPIO_Init+0x2ae>
 8001348:	e6b0      	b.n	80010ac <HAL_GPIO_Init+0x10>
  }
}
 800134a:	46c0      	nop			@ (mov r8, r8)
 800134c:	46c0      	nop			@ (mov r8, r8)
 800134e:	46bd      	mov	sp, r7
 8001350:	b006      	add	sp, #24
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40021800 	.word	0x40021800
 8001358:	50000400 	.word	0x50000400
 800135c:	50000800 	.word	0x50000800
 8001360:	50000c00 	.word	0x50000c00

08001364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	0008      	movs	r0, r1
 800136e:	0011      	movs	r1, r2
 8001370:	1cbb      	adds	r3, r7, #2
 8001372:	1c02      	adds	r2, r0, #0
 8001374:	801a      	strh	r2, [r3, #0]
 8001376:	1c7b      	adds	r3, r7, #1
 8001378:	1c0a      	adds	r2, r1, #0
 800137a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800137c:	1c7b      	adds	r3, r7, #1
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d004      	beq.n	800138e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001384:	1cbb      	adds	r3, r7, #2
 8001386:	881a      	ldrh	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800138c:	e003      	b.n	8001396 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800138e:	1cbb      	adds	r3, r7, #2
 8001390:	881a      	ldrh	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001396:	46c0      	nop			@ (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	b002      	add	sp, #8
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b084      	sub	sp, #16
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	000a      	movs	r2, r1
 80013a8:	1cbb      	adds	r3, r7, #2
 80013aa:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013b2:	1cbb      	adds	r3, r7, #2
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	4013      	ands	r3, r2
 80013ba:	041a      	lsls	r2, r3, #16
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	43db      	mvns	r3, r3
 80013c0:	1cb9      	adds	r1, r7, #2
 80013c2:	8809      	ldrh	r1, [r1, #0]
 80013c4:	400b      	ands	r3, r1
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]
}
 80013cc:	46c0      	nop			@ (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b004      	add	sp, #16
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80013dc:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a19      	ldr	r2, [pc, #100]	@ (8001448 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80013e2:	4013      	ands	r3, r2
 80013e4:	0019      	movs	r1, r3
 80013e6:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	2380      	movs	r3, #128	@ 0x80
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d11f      	bne.n	8001438 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80013f8:	4b14      	ldr	r3, [pc, #80]	@ (800144c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	0013      	movs	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	189b      	adds	r3, r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4912      	ldr	r1, [pc, #72]	@ (8001450 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001406:	0018      	movs	r0, r3
 8001408:	f7fe fe8c 	bl	8000124 <__udivsi3>
 800140c:	0003      	movs	r3, r0
 800140e:	3301      	adds	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001412:	e008      	b.n	8001426 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	3b01      	subs	r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	e001      	b.n	8001426 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e009      	b.n	800143a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001426:	4b07      	ldr	r3, [pc, #28]	@ (8001444 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001428:	695a      	ldr	r2, [r3, #20]
 800142a:	2380      	movs	r3, #128	@ 0x80
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	401a      	ands	r2, r3
 8001430:	2380      	movs	r3, #128	@ 0x80
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	429a      	cmp	r2, r3
 8001436:	d0ed      	beq.n	8001414 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	0018      	movs	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	b004      	add	sp, #16
 8001440:	bd80      	pop	{r7, pc}
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	40007000 	.word	0x40007000
 8001448:	fffff9ff 	.word	0xfffff9ff
 800144c:	20000000 	.word	0x20000000
 8001450:	000f4240 	.word	0x000f4240

08001454 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001458:	4b03      	ldr	r3, [pc, #12]	@ (8001468 <LL_RCC_GetAPB1Prescaler+0x14>)
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	23e0      	movs	r3, #224	@ 0xe0
 800145e:	01db      	lsls	r3, r3, #7
 8001460:	4013      	ands	r3, r2
}
 8001462:	0018      	movs	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40021000 	.word	0x40021000

0800146c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e2f3      	b.n	8001a66 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2201      	movs	r2, #1
 8001484:	4013      	ands	r3, r2
 8001486:	d100      	bne.n	800148a <HAL_RCC_OscConfig+0x1e>
 8001488:	e07c      	b.n	8001584 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800148a:	4bc3      	ldr	r3, [pc, #780]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2238      	movs	r2, #56	@ 0x38
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001494:	4bc0      	ldr	r3, [pc, #768]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	2203      	movs	r2, #3
 800149a:	4013      	ands	r3, r2
 800149c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	2b10      	cmp	r3, #16
 80014a2:	d102      	bne.n	80014aa <HAL_RCC_OscConfig+0x3e>
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d002      	beq.n	80014b0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	2b08      	cmp	r3, #8
 80014ae:	d10b      	bne.n	80014c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b0:	4bb9      	ldr	r3, [pc, #740]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	029b      	lsls	r3, r3, #10
 80014b8:	4013      	ands	r3, r2
 80014ba:	d062      	beq.n	8001582 <HAL_RCC_OscConfig+0x116>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d15e      	bne.n	8001582 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e2ce      	b.n	8001a66 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	2380      	movs	r3, #128	@ 0x80
 80014ce:	025b      	lsls	r3, r3, #9
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d107      	bne.n	80014e4 <HAL_RCC_OscConfig+0x78>
 80014d4:	4bb0      	ldr	r3, [pc, #704]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4baf      	ldr	r3, [pc, #700]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 80014da:	2180      	movs	r1, #128	@ 0x80
 80014dc:	0249      	lsls	r1, r1, #9
 80014de:	430a      	orrs	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	e020      	b.n	8001526 <HAL_RCC_OscConfig+0xba>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	23a0      	movs	r3, #160	@ 0xa0
 80014ea:	02db      	lsls	r3, r3, #11
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d10e      	bne.n	800150e <HAL_RCC_OscConfig+0xa2>
 80014f0:	4ba9      	ldr	r3, [pc, #676]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4ba8      	ldr	r3, [pc, #672]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 80014f6:	2180      	movs	r1, #128	@ 0x80
 80014f8:	02c9      	lsls	r1, r1, #11
 80014fa:	430a      	orrs	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	4ba6      	ldr	r3, [pc, #664]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4ba5      	ldr	r3, [pc, #660]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 8001504:	2180      	movs	r1, #128	@ 0x80
 8001506:	0249      	lsls	r1, r1, #9
 8001508:	430a      	orrs	r2, r1
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	e00b      	b.n	8001526 <HAL_RCC_OscConfig+0xba>
 800150e:	4ba2      	ldr	r3, [pc, #648]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4ba1      	ldr	r3, [pc, #644]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 8001514:	49a1      	ldr	r1, [pc, #644]	@ (800179c <HAL_RCC_OscConfig+0x330>)
 8001516:	400a      	ands	r2, r1
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	4b9f      	ldr	r3, [pc, #636]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4b9e      	ldr	r3, [pc, #632]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 8001520:	499f      	ldr	r1, [pc, #636]	@ (80017a0 <HAL_RCC_OscConfig+0x334>)
 8001522:	400a      	ands	r2, r1
 8001524:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d014      	beq.n	8001558 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152e:	f7ff fa7b 	bl	8000a28 <HAL_GetTick>
 8001532:	0003      	movs	r3, r0
 8001534:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff fa76 	bl	8000a28 <HAL_GetTick>
 800153c:	0002      	movs	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	@ 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e28d      	b.n	8001a66 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800154a:	4b93      	ldr	r3, [pc, #588]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	2380      	movs	r3, #128	@ 0x80
 8001550:	029b      	lsls	r3, r3, #10
 8001552:	4013      	ands	r3, r2
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0xcc>
 8001556:	e015      	b.n	8001584 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fa66 	bl	8000a28 <HAL_GetTick>
 800155c:	0003      	movs	r3, r0
 800155e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001562:	f7ff fa61 	bl	8000a28 <HAL_GetTick>
 8001566:	0002      	movs	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b64      	cmp	r3, #100	@ 0x64
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e278      	b.n	8001a66 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001574:	4b88      	ldr	r3, [pc, #544]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	2380      	movs	r3, #128	@ 0x80
 800157a:	029b      	lsls	r3, r3, #10
 800157c:	4013      	ands	r3, r2
 800157e:	d1f0      	bne.n	8001562 <HAL_RCC_OscConfig+0xf6>
 8001580:	e000      	b.n	8001584 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001582:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2202      	movs	r2, #2
 800158a:	4013      	ands	r3, r2
 800158c:	d100      	bne.n	8001590 <HAL_RCC_OscConfig+0x124>
 800158e:	e099      	b.n	80016c4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001590:	4b81      	ldr	r3, [pc, #516]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2238      	movs	r2, #56	@ 0x38
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800159a:	4b7f      	ldr	r3, [pc, #508]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	2203      	movs	r2, #3
 80015a0:	4013      	ands	r3, r2
 80015a2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2b10      	cmp	r3, #16
 80015a8:	d102      	bne.n	80015b0 <HAL_RCC_OscConfig+0x144>
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d002      	beq.n	80015b6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d135      	bne.n	8001622 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015b6:	4b78      	ldr	r3, [pc, #480]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	2380      	movs	r3, #128	@ 0x80
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	4013      	ands	r3, r2
 80015c0:	d005      	beq.n	80015ce <HAL_RCC_OscConfig+0x162>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e24b      	b.n	8001a66 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ce:	4b72      	ldr	r3, [pc, #456]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4a74      	ldr	r2, [pc, #464]	@ (80017a4 <HAL_RCC_OscConfig+0x338>)
 80015d4:	4013      	ands	r3, r2
 80015d6:	0019      	movs	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	021a      	lsls	r2, r3, #8
 80015de:	4b6e      	ldr	r3, [pc, #440]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 80015e0:	430a      	orrs	r2, r1
 80015e2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d112      	bne.n	8001610 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015ea:	4b6b      	ldr	r3, [pc, #428]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a6e      	ldr	r2, [pc, #440]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	0019      	movs	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	4b67      	ldr	r3, [pc, #412]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 80015fa:	430a      	orrs	r2, r1
 80015fc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80015fe:	4b66      	ldr	r3, [pc, #408]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	0adb      	lsrs	r3, r3, #11
 8001604:	2207      	movs	r2, #7
 8001606:	4013      	ands	r3, r2
 8001608:	4a68      	ldr	r2, [pc, #416]	@ (80017ac <HAL_RCC_OscConfig+0x340>)
 800160a:	40da      	lsrs	r2, r3
 800160c:	4b68      	ldr	r3, [pc, #416]	@ (80017b0 <HAL_RCC_OscConfig+0x344>)
 800160e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001610:	4b68      	ldr	r3, [pc, #416]	@ (80017b4 <HAL_RCC_OscConfig+0x348>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	0018      	movs	r0, r3
 8001616:	f7ff f9ab 	bl	8000970 <HAL_InitTick>
 800161a:	1e03      	subs	r3, r0, #0
 800161c:	d051      	beq.n	80016c2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e221      	b.n	8001a66 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d030      	beq.n	800168c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800162a:	4b5b      	ldr	r3, [pc, #364]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a5e      	ldr	r2, [pc, #376]	@ (80017a8 <HAL_RCC_OscConfig+0x33c>)
 8001630:	4013      	ands	r3, r2
 8001632:	0019      	movs	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	4b57      	ldr	r3, [pc, #348]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 800163a:	430a      	orrs	r2, r1
 800163c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800163e:	4b56      	ldr	r3, [pc, #344]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4b55      	ldr	r3, [pc, #340]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 8001644:	2180      	movs	r1, #128	@ 0x80
 8001646:	0049      	lsls	r1, r1, #1
 8001648:	430a      	orrs	r2, r1
 800164a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff f9ec 	bl	8000a28 <HAL_GetTick>
 8001650:	0003      	movs	r3, r0
 8001652:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001656:	f7ff f9e7 	bl	8000a28 <HAL_GetTick>
 800165a:	0002      	movs	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e1fe      	b.n	8001a66 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001668:	4b4b      	ldr	r3, [pc, #300]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2380      	movs	r3, #128	@ 0x80
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	4013      	ands	r3, r2
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001674:	4b48      	ldr	r3, [pc, #288]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	4a4a      	ldr	r2, [pc, #296]	@ (80017a4 <HAL_RCC_OscConfig+0x338>)
 800167a:	4013      	ands	r3, r2
 800167c:	0019      	movs	r1, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	021a      	lsls	r2, r3, #8
 8001684:	4b44      	ldr	r3, [pc, #272]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 8001686:	430a      	orrs	r2, r1
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	e01b      	b.n	80016c4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800168c:	4b42      	ldr	r3, [pc, #264]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b41      	ldr	r3, [pc, #260]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 8001692:	4949      	ldr	r1, [pc, #292]	@ (80017b8 <HAL_RCC_OscConfig+0x34c>)
 8001694:	400a      	ands	r2, r1
 8001696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff f9c6 	bl	8000a28 <HAL_GetTick>
 800169c:	0003      	movs	r3, r0
 800169e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a2:	f7ff f9c1 	bl	8000a28 <HAL_GetTick>
 80016a6:	0002      	movs	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e1d8      	b.n	8001a66 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016b4:	4b38      	ldr	r3, [pc, #224]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2380      	movs	r3, #128	@ 0x80
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	4013      	ands	r3, r2
 80016be:	d1f0      	bne.n	80016a2 <HAL_RCC_OscConfig+0x236>
 80016c0:	e000      	b.n	80016c4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2208      	movs	r2, #8
 80016ca:	4013      	ands	r3, r2
 80016cc:	d047      	beq.n	800175e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80016ce:	4b32      	ldr	r3, [pc, #200]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2238      	movs	r2, #56	@ 0x38
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b18      	cmp	r3, #24
 80016d8:	d10a      	bne.n	80016f0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80016da:	4b2f      	ldr	r3, [pc, #188]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 80016dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016de:	2202      	movs	r2, #2
 80016e0:	4013      	ands	r3, r2
 80016e2:	d03c      	beq.n	800175e <HAL_RCC_OscConfig+0x2f2>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d138      	bne.n	800175e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e1ba      	b.n	8001a66 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d019      	beq.n	800172c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80016f8:	4b27      	ldr	r3, [pc, #156]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 80016fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80016fc:	4b26      	ldr	r3, [pc, #152]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 80016fe:	2101      	movs	r1, #1
 8001700:	430a      	orrs	r2, r1
 8001702:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff f990 	bl	8000a28 <HAL_GetTick>
 8001708:	0003      	movs	r3, r0
 800170a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170e:	f7ff f98b 	bl	8000a28 <HAL_GetTick>
 8001712:	0002      	movs	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e1a2      	b.n	8001a66 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001720:	4b1d      	ldr	r3, [pc, #116]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 8001722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001724:	2202      	movs	r2, #2
 8001726:	4013      	ands	r3, r2
 8001728:	d0f1      	beq.n	800170e <HAL_RCC_OscConfig+0x2a2>
 800172a:	e018      	b.n	800175e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800172c:	4b1a      	ldr	r3, [pc, #104]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 800172e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001730:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 8001732:	2101      	movs	r1, #1
 8001734:	438a      	bics	r2, r1
 8001736:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001738:	f7ff f976 	bl	8000a28 <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001742:	f7ff f971 	bl	8000a28 <HAL_GetTick>
 8001746:	0002      	movs	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e188      	b.n	8001a66 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001754:	4b10      	ldr	r3, [pc, #64]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 8001756:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001758:	2202      	movs	r2, #2
 800175a:	4013      	ands	r3, r2
 800175c:	d1f1      	bne.n	8001742 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2204      	movs	r2, #4
 8001764:	4013      	ands	r3, r2
 8001766:	d100      	bne.n	800176a <HAL_RCC_OscConfig+0x2fe>
 8001768:	e0c6      	b.n	80018f8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800176a:	231f      	movs	r3, #31
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001772:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2238      	movs	r2, #56	@ 0x38
 8001778:	4013      	ands	r3, r2
 800177a:	2b20      	cmp	r3, #32
 800177c:	d11e      	bne.n	80017bc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800177e:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_RCC_OscConfig+0x32c>)
 8001780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001782:	2202      	movs	r2, #2
 8001784:	4013      	ands	r3, r2
 8001786:	d100      	bne.n	800178a <HAL_RCC_OscConfig+0x31e>
 8001788:	e0b6      	b.n	80018f8 <HAL_RCC_OscConfig+0x48c>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d000      	beq.n	8001794 <HAL_RCC_OscConfig+0x328>
 8001792:	e0b1      	b.n	80018f8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e166      	b.n	8001a66 <HAL_RCC_OscConfig+0x5fa>
 8001798:	40021000 	.word	0x40021000
 800179c:	fffeffff 	.word	0xfffeffff
 80017a0:	fffbffff 	.word	0xfffbffff
 80017a4:	ffff80ff 	.word	0xffff80ff
 80017a8:	ffffc7ff 	.word	0xffffc7ff
 80017ac:	00f42400 	.word	0x00f42400
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000004 	.word	0x20000004
 80017b8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017bc:	4bac      	ldr	r3, [pc, #688]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 80017be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017c0:	2380      	movs	r3, #128	@ 0x80
 80017c2:	055b      	lsls	r3, r3, #21
 80017c4:	4013      	ands	r3, r2
 80017c6:	d101      	bne.n	80017cc <HAL_RCC_OscConfig+0x360>
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <HAL_RCC_OscConfig+0x362>
 80017cc:	2300      	movs	r3, #0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d011      	beq.n	80017f6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	4ba7      	ldr	r3, [pc, #668]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 80017d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017d6:	4ba6      	ldr	r3, [pc, #664]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 80017d8:	2180      	movs	r1, #128	@ 0x80
 80017da:	0549      	lsls	r1, r1, #21
 80017dc:	430a      	orrs	r2, r1
 80017de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017e0:	4ba3      	ldr	r3, [pc, #652]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 80017e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017e4:	2380      	movs	r3, #128	@ 0x80
 80017e6:	055b      	lsls	r3, r3, #21
 80017e8:	4013      	ands	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80017ee:	231f      	movs	r3, #31
 80017f0:	18fb      	adds	r3, r7, r3
 80017f2:	2201      	movs	r2, #1
 80017f4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f6:	4b9f      	ldr	r3, [pc, #636]	@ (8001a74 <HAL_RCC_OscConfig+0x608>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	2380      	movs	r3, #128	@ 0x80
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4013      	ands	r3, r2
 8001800:	d11a      	bne.n	8001838 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001802:	4b9c      	ldr	r3, [pc, #624]	@ (8001a74 <HAL_RCC_OscConfig+0x608>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b9b      	ldr	r3, [pc, #620]	@ (8001a74 <HAL_RCC_OscConfig+0x608>)
 8001808:	2180      	movs	r1, #128	@ 0x80
 800180a:	0049      	lsls	r1, r1, #1
 800180c:	430a      	orrs	r2, r1
 800180e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001810:	f7ff f90a 	bl	8000a28 <HAL_GetTick>
 8001814:	0003      	movs	r3, r0
 8001816:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181a:	f7ff f905 	bl	8000a28 <HAL_GetTick>
 800181e:	0002      	movs	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e11c      	b.n	8001a66 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800182c:	4b91      	ldr	r3, [pc, #580]	@ (8001a74 <HAL_RCC_OscConfig+0x608>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2380      	movs	r3, #128	@ 0x80
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4013      	ands	r3, r2
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d106      	bne.n	800184e <HAL_RCC_OscConfig+0x3e2>
 8001840:	4b8b      	ldr	r3, [pc, #556]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 8001842:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001844:	4b8a      	ldr	r3, [pc, #552]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 8001846:	2101      	movs	r1, #1
 8001848:	430a      	orrs	r2, r1
 800184a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800184c:	e01c      	b.n	8001888 <HAL_RCC_OscConfig+0x41c>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b05      	cmp	r3, #5
 8001854:	d10c      	bne.n	8001870 <HAL_RCC_OscConfig+0x404>
 8001856:	4b86      	ldr	r3, [pc, #536]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 8001858:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800185a:	4b85      	ldr	r3, [pc, #532]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 800185c:	2104      	movs	r1, #4
 800185e:	430a      	orrs	r2, r1
 8001860:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001862:	4b83      	ldr	r3, [pc, #524]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 8001864:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001866:	4b82      	ldr	r3, [pc, #520]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 8001868:	2101      	movs	r1, #1
 800186a:	430a      	orrs	r2, r1
 800186c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800186e:	e00b      	b.n	8001888 <HAL_RCC_OscConfig+0x41c>
 8001870:	4b7f      	ldr	r3, [pc, #508]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 8001872:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001874:	4b7e      	ldr	r3, [pc, #504]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 8001876:	2101      	movs	r1, #1
 8001878:	438a      	bics	r2, r1
 800187a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800187c:	4b7c      	ldr	r3, [pc, #496]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 800187e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001880:	4b7b      	ldr	r3, [pc, #492]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 8001882:	2104      	movs	r1, #4
 8001884:	438a      	bics	r2, r1
 8001886:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d014      	beq.n	80018ba <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001890:	f7ff f8ca 	bl	8000a28 <HAL_GetTick>
 8001894:	0003      	movs	r3, r0
 8001896:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001898:	e009      	b.n	80018ae <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189a:	f7ff f8c5 	bl	8000a28 <HAL_GetTick>
 800189e:	0002      	movs	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	4a74      	ldr	r2, [pc, #464]	@ (8001a78 <HAL_RCC_OscConfig+0x60c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e0db      	b.n	8001a66 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ae:	4b70      	ldr	r3, [pc, #448]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 80018b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b2:	2202      	movs	r2, #2
 80018b4:	4013      	ands	r3, r2
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x42e>
 80018b8:	e013      	b.n	80018e2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ba:	f7ff f8b5 	bl	8000a28 <HAL_GetTick>
 80018be:	0003      	movs	r3, r0
 80018c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018c2:	e009      	b.n	80018d8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c4:	f7ff f8b0 	bl	8000a28 <HAL_GetTick>
 80018c8:	0002      	movs	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	4a6a      	ldr	r2, [pc, #424]	@ (8001a78 <HAL_RCC_OscConfig+0x60c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e0c6      	b.n	8001a66 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018d8:	4b65      	ldr	r3, [pc, #404]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 80018da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018dc:	2202      	movs	r2, #2
 80018de:	4013      	ands	r3, r2
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80018e2:	231f      	movs	r3, #31
 80018e4:	18fb      	adds	r3, r7, r3
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d105      	bne.n	80018f8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80018ec:	4b60      	ldr	r3, [pc, #384]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 80018ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018f0:	4b5f      	ldr	r3, [pc, #380]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 80018f2:	4962      	ldr	r1, [pc, #392]	@ (8001a7c <HAL_RCC_OscConfig+0x610>)
 80018f4:	400a      	ands	r2, r1
 80018f6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d100      	bne.n	8001902 <HAL_RCC_OscConfig+0x496>
 8001900:	e0b0      	b.n	8001a64 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001902:	4b5b      	ldr	r3, [pc, #364]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2238      	movs	r2, #56	@ 0x38
 8001908:	4013      	ands	r3, r2
 800190a:	2b10      	cmp	r3, #16
 800190c:	d100      	bne.n	8001910 <HAL_RCC_OscConfig+0x4a4>
 800190e:	e078      	b.n	8001a02 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	2b02      	cmp	r3, #2
 8001916:	d153      	bne.n	80019c0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001918:	4b55      	ldr	r3, [pc, #340]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b54      	ldr	r3, [pc, #336]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 800191e:	4958      	ldr	r1, [pc, #352]	@ (8001a80 <HAL_RCC_OscConfig+0x614>)
 8001920:	400a      	ands	r2, r1
 8001922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001924:	f7ff f880 	bl	8000a28 <HAL_GetTick>
 8001928:	0003      	movs	r3, r0
 800192a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192e:	f7ff f87b 	bl	8000a28 <HAL_GetTick>
 8001932:	0002      	movs	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e092      	b.n	8001a66 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001940:	4b4b      	ldr	r3, [pc, #300]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	2380      	movs	r3, #128	@ 0x80
 8001946:	049b      	lsls	r3, r3, #18
 8001948:	4013      	ands	r3, r2
 800194a:	d1f0      	bne.n	800192e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800194c:	4b48      	ldr	r3, [pc, #288]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	4a4c      	ldr	r2, [pc, #304]	@ (8001a84 <HAL_RCC_OscConfig+0x618>)
 8001952:	4013      	ands	r3, r2
 8001954:	0019      	movs	r1, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1a      	ldr	r2, [r3, #32]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	431a      	orrs	r2, r3
 8001974:	4b3e      	ldr	r3, [pc, #248]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 8001976:	430a      	orrs	r2, r1
 8001978:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800197a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 8001980:	2180      	movs	r1, #128	@ 0x80
 8001982:	0449      	lsls	r1, r1, #17
 8001984:	430a      	orrs	r2, r1
 8001986:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001988:	4b39      	ldr	r3, [pc, #228]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	4b38      	ldr	r3, [pc, #224]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 800198e:	2180      	movs	r1, #128	@ 0x80
 8001990:	0549      	lsls	r1, r1, #21
 8001992:	430a      	orrs	r2, r1
 8001994:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001996:	f7ff f847 	bl	8000a28 <HAL_GetTick>
 800199a:	0003      	movs	r3, r0
 800199c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff f842 	bl	8000a28 <HAL_GetTick>
 80019a4:	0002      	movs	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e059      	b.n	8001a66 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2380      	movs	r3, #128	@ 0x80
 80019b8:	049b      	lsls	r3, r3, #18
 80019ba:	4013      	ands	r3, r2
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x534>
 80019be:	e051      	b.n	8001a64 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 80019c6:	492e      	ldr	r1, [pc, #184]	@ (8001a80 <HAL_RCC_OscConfig+0x614>)
 80019c8:	400a      	ands	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7ff f82c 	bl	8000a28 <HAL_GetTick>
 80019d0:	0003      	movs	r3, r0
 80019d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d6:	f7ff f827 	bl	8000a28 <HAL_GetTick>
 80019da:	0002      	movs	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e03e      	b.n	8001a66 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e8:	4b21      	ldr	r3, [pc, #132]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2380      	movs	r3, #128	@ 0x80
 80019ee:	049b      	lsls	r3, r3, #18
 80019f0:	4013      	ands	r3, r2
 80019f2:	d1f0      	bne.n	80019d6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80019f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 80019fa:	4923      	ldr	r1, [pc, #140]	@ (8001a88 <HAL_RCC_OscConfig+0x61c>)
 80019fc:	400a      	ands	r2, r1
 80019fe:	60da      	str	r2, [r3, #12]
 8001a00:	e030      	b.n	8001a64 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e02b      	b.n	8001a66 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001a0e:	4b18      	ldr	r3, [pc, #96]	@ (8001a70 <HAL_RCC_OscConfig+0x604>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	2203      	movs	r2, #3
 8001a18:	401a      	ands	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d11e      	bne.n	8001a60 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	2270      	movs	r2, #112	@ 0x70
 8001a26:	401a      	ands	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d117      	bne.n	8001a60 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	23fe      	movs	r3, #254	@ 0xfe
 8001a34:	01db      	lsls	r3, r3, #7
 8001a36:	401a      	ands	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d10e      	bne.n	8001a60 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	23f8      	movs	r3, #248	@ 0xf8
 8001a46:	039b      	lsls	r3, r3, #14
 8001a48:	401a      	ands	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d106      	bne.n	8001a60 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	0f5b      	lsrs	r3, r3, #29
 8001a56:	075a      	lsls	r2, r3, #29
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	0018      	movs	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b008      	add	sp, #32
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			@ (mov r8, r8)
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40007000 	.word	0x40007000
 8001a78:	00001388 	.word	0x00001388
 8001a7c:	efffffff 	.word	0xefffffff
 8001a80:	feffffff 	.word	0xfeffffff
 8001a84:	1fc1808c 	.word	0x1fc1808c
 8001a88:	effefffc 	.word	0xeffefffc

08001a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0e9      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa0:	4b76      	ldr	r3, [pc, #472]	@ (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2207      	movs	r2, #7
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d91e      	bls.n	8001aec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aae:	4b73      	ldr	r3, [pc, #460]	@ (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2207      	movs	r2, #7
 8001ab4:	4393      	bics	r3, r2
 8001ab6:	0019      	movs	r1, r3
 8001ab8:	4b70      	ldr	r3, [pc, #448]	@ (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ac0:	f7fe ffb2 	bl	8000a28 <HAL_GetTick>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ac8:	e009      	b.n	8001ade <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aca:	f7fe ffad 	bl	8000a28 <HAL_GetTick>
 8001ace:	0002      	movs	r2, r0
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	4a6a      	ldr	r2, [pc, #424]	@ (8001c80 <HAL_RCC_ClockConfig+0x1f4>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e0ca      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ade:	4b67      	ldr	r3, [pc, #412]	@ (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2207      	movs	r2, #7
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d1ee      	bne.n	8001aca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2202      	movs	r2, #2
 8001af2:	4013      	ands	r3, r2
 8001af4:	d015      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2204      	movs	r2, #4
 8001afc:	4013      	ands	r3, r2
 8001afe:	d006      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b00:	4b60      	ldr	r3, [pc, #384]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f8>)
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	4b5f      	ldr	r3, [pc, #380]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f8>)
 8001b06:	21e0      	movs	r1, #224	@ 0xe0
 8001b08:	01c9      	lsls	r1, r1, #7
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f8>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	4a5d      	ldr	r2, [pc, #372]	@ (8001c88 <HAL_RCC_ClockConfig+0x1fc>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	0019      	movs	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	4b59      	ldr	r3, [pc, #356]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f8>)
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2201      	movs	r2, #1
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d057      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d107      	bne.n	8001b44 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b34:	4b53      	ldr	r3, [pc, #332]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f8>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	@ 0x80
 8001b3a:	029b      	lsls	r3, r3, #10
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d12b      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e097      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d107      	bne.n	8001b5c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4c:	4b4d      	ldr	r3, [pc, #308]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f8>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2380      	movs	r3, #128	@ 0x80
 8001b52:	049b      	lsls	r3, r3, #18
 8001b54:	4013      	ands	r3, r2
 8001b56:	d11f      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e08b      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d107      	bne.n	8001b74 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b64:	4b47      	ldr	r3, [pc, #284]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f8>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	2380      	movs	r3, #128	@ 0x80
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d113      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e07f      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d106      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b7c:	4b41      	ldr	r3, [pc, #260]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f8>)
 8001b7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b80:	2202      	movs	r2, #2
 8001b82:	4013      	ands	r3, r2
 8001b84:	d108      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e074      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b8a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f8>)
 8001b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b8e:	2202      	movs	r2, #2
 8001b90:	4013      	ands	r3, r2
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e06d      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b98:	4b3a      	ldr	r3, [pc, #232]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f8>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	4393      	bics	r3, r2
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	4b37      	ldr	r3, [pc, #220]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f8>)
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bac:	f7fe ff3c 	bl	8000a28 <HAL_GetTick>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb4:	e009      	b.n	8001bca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb6:	f7fe ff37 	bl	8000a28 <HAL_GetTick>
 8001bba:	0002      	movs	r2, r0
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	4a2f      	ldr	r2, [pc, #188]	@ (8001c80 <HAL_RCC_ClockConfig+0x1f4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e054      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bca:	4b2e      	ldr	r3, [pc, #184]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f8>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2238      	movs	r2, #56	@ 0x38
 8001bd0:	401a      	ands	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d1ec      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bdc:	4b27      	ldr	r3, [pc, #156]	@ (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2207      	movs	r2, #7
 8001be2:	4013      	ands	r3, r2
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d21e      	bcs.n	8001c28 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	4b24      	ldr	r3, [pc, #144]	@ (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2207      	movs	r2, #7
 8001bf0:	4393      	bics	r3, r2
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	4b21      	ldr	r3, [pc, #132]	@ (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bfc:	f7fe ff14 	bl	8000a28 <HAL_GetTick>
 8001c00:	0003      	movs	r3, r0
 8001c02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c04:	e009      	b.n	8001c1a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c06:	f7fe ff0f 	bl	8000a28 <HAL_GetTick>
 8001c0a:	0002      	movs	r2, r0
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	4a1b      	ldr	r2, [pc, #108]	@ (8001c80 <HAL_RCC_ClockConfig+0x1f4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e02c      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c1a:	4b18      	ldr	r3, [pc, #96]	@ (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2207      	movs	r2, #7
 8001c20:	4013      	ands	r3, r2
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d1ee      	bne.n	8001c06 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d009      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c32:	4b14      	ldr	r3, [pc, #80]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f8>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	4a15      	ldr	r2, [pc, #84]	@ (8001c8c <HAL_RCC_ClockConfig+0x200>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	0019      	movs	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	4b10      	ldr	r3, [pc, #64]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f8>)
 8001c42:	430a      	orrs	r2, r1
 8001c44:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c46:	f000 f829 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 8001c4a:	0001      	movs	r1, r0
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f8>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	220f      	movs	r2, #15
 8001c54:	401a      	ands	r2, r3
 8001c56:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <HAL_RCC_ClockConfig+0x204>)
 8001c58:	0092      	lsls	r2, r2, #2
 8001c5a:	58d3      	ldr	r3, [r2, r3]
 8001c5c:	221f      	movs	r2, #31
 8001c5e:	4013      	ands	r3, r2
 8001c60:	000a      	movs	r2, r1
 8001c62:	40da      	lsrs	r2, r3
 8001c64:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <HAL_RCC_ClockConfig+0x208>)
 8001c66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c68:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <HAL_RCC_ClockConfig+0x20c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f7fe fe7f 	bl	8000970 <HAL_InitTick>
 8001c72:	0003      	movs	r3, r0
}
 8001c74:	0018      	movs	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b004      	add	sp, #16
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40022000 	.word	0x40022000
 8001c80:	00001388 	.word	0x00001388
 8001c84:	40021000 	.word	0x40021000
 8001c88:	fffff0ff 	.word	0xfffff0ff
 8001c8c:	ffff8fff 	.word	0xffff8fff
 8001c90:	080046f8 	.word	0x080046f8
 8001c94:	20000000 	.word	0x20000000
 8001c98:	20000004 	.word	0x20000004

08001c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ca2:	4b3c      	ldr	r3, [pc, #240]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2238      	movs	r2, #56	@ 0x38
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d10f      	bne.n	8001ccc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001cac:	4b39      	ldr	r3, [pc, #228]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	0adb      	lsrs	r3, r3, #11
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	409a      	lsls	r2, r3
 8001cba:	0013      	movs	r3, r2
 8001cbc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001cbe:	6839      	ldr	r1, [r7, #0]
 8001cc0:	4835      	ldr	r0, [pc, #212]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001cc2:	f7fe fa2f 	bl	8000124 <__udivsi3>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	e05d      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ccc:	4b31      	ldr	r3, [pc, #196]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2238      	movs	r2, #56	@ 0x38
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d102      	bne.n	8001cde <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cd8:	4b30      	ldr	r3, [pc, #192]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x100>)
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	e054      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cde:	4b2d      	ldr	r3, [pc, #180]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2238      	movs	r2, #56	@ 0x38
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b10      	cmp	r3, #16
 8001ce8:	d138      	bne.n	8001d5c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001cea:	4b2a      	ldr	r3, [pc, #168]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	2203      	movs	r2, #3
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cf4:	4b27      	ldr	r3, [pc, #156]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	2207      	movs	r2, #7
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	3301      	adds	r3, #1
 8001d00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d10d      	bne.n	8001d24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	4824      	ldr	r0, [pc, #144]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x100>)
 8001d0c:	f7fe fa0a 	bl	8000124 <__udivsi3>
 8001d10:	0003      	movs	r3, r0
 8001d12:	0019      	movs	r1, r3
 8001d14:	4b1f      	ldr	r3, [pc, #124]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	227f      	movs	r2, #127	@ 0x7f
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	434b      	muls	r3, r1
 8001d20:	617b      	str	r3, [r7, #20]
        break;
 8001d22:	e00d      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	481c      	ldr	r0, [pc, #112]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d28:	f7fe f9fc 	bl	8000124 <__udivsi3>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	0019      	movs	r1, r3
 8001d30:	4b18      	ldr	r3, [pc, #96]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	227f      	movs	r2, #127	@ 0x7f
 8001d38:	4013      	ands	r3, r2
 8001d3a:	434b      	muls	r3, r1
 8001d3c:	617b      	str	r3, [r7, #20]
        break;
 8001d3e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001d40:	4b14      	ldr	r3, [pc, #80]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0f5b      	lsrs	r3, r3, #29
 8001d46:	2207      	movs	r2, #7
 8001d48:	4013      	ands	r3, r2
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	6978      	ldr	r0, [r7, #20]
 8001d52:	f7fe f9e7 	bl	8000124 <__udivsi3>
 8001d56:	0003      	movs	r3, r0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	e015      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2238      	movs	r2, #56	@ 0x38
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b20      	cmp	r3, #32
 8001d66:	d103      	bne.n	8001d70 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001d68:	2380      	movs	r3, #128	@ 0x80
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	e00b      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d70:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2238      	movs	r2, #56	@ 0x38
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b18      	cmp	r3, #24
 8001d7a:	d103      	bne.n	8001d84 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001d7c:	23fa      	movs	r3, #250	@ 0xfa
 8001d7e:	01db      	lsls	r3, r3, #7
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	e001      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d88:	693b      	ldr	r3, [r7, #16]
}
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	b006      	add	sp, #24
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	46c0      	nop			@ (mov r8, r8)
 8001d94:	40021000 	.word	0x40021000
 8001d98:	00f42400 	.word	0x00f42400
 8001d9c:	007a1200 	.word	0x007a1200

08001da0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da4:	4b02      	ldr	r3, [pc, #8]	@ (8001db0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001da6:	681b      	ldr	r3, [r3, #0]
}
 8001da8:	0018      	movs	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	46c0      	nop			@ (mov r8, r8)
 8001db0:	20000000 	.word	0x20000000

08001db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001db4:	b5b0      	push	{r4, r5, r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001db8:	f7ff fff2 	bl	8001da0 <HAL_RCC_GetHCLKFreq>
 8001dbc:	0004      	movs	r4, r0
 8001dbe:	f7ff fb49 	bl	8001454 <LL_RCC_GetAPB1Prescaler>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	0b1a      	lsrs	r2, r3, #12
 8001dc6:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dc8:	0092      	lsls	r2, r2, #2
 8001dca:	58d3      	ldr	r3, [r2, r3]
 8001dcc:	221f      	movs	r2, #31
 8001dce:	4013      	ands	r3, r2
 8001dd0:	40dc      	lsrs	r4, r3
 8001dd2:	0023      	movs	r3, r4
}
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dda:	46c0      	nop			@ (mov r8, r8)
 8001ddc:	08004738 	.word	0x08004738

08001de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e04a      	b.n	8001e88 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	223d      	movs	r2, #61	@ 0x3d
 8001df6:	5c9b      	ldrb	r3, [r3, r2]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d107      	bne.n	8001e0e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	223c      	movs	r2, #60	@ 0x3c
 8001e02:	2100      	movs	r1, #0
 8001e04:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f7fe fc59 	bl	80006c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	223d      	movs	r2, #61	@ 0x3d
 8001e12:	2102      	movs	r1, #2
 8001e14:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	0019      	movs	r1, r3
 8001e20:	0010      	movs	r0, r2
 8001e22:	f000 fa81 	bl	8002328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2248      	movs	r2, #72	@ 0x48
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	223e      	movs	r2, #62	@ 0x3e
 8001e32:	2101      	movs	r1, #1
 8001e34:	5499      	strb	r1, [r3, r2]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	223f      	movs	r2, #63	@ 0x3f
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	5499      	strb	r1, [r3, r2]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2240      	movs	r2, #64	@ 0x40
 8001e42:	2101      	movs	r1, #1
 8001e44:	5499      	strb	r1, [r3, r2]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2241      	movs	r2, #65	@ 0x41
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	5499      	strb	r1, [r3, r2]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2242      	movs	r2, #66	@ 0x42
 8001e52:	2101      	movs	r1, #1
 8001e54:	5499      	strb	r1, [r3, r2]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2243      	movs	r2, #67	@ 0x43
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2244      	movs	r2, #68	@ 0x44
 8001e62:	2101      	movs	r1, #1
 8001e64:	5499      	strb	r1, [r3, r2]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2245      	movs	r2, #69	@ 0x45
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	5499      	strb	r1, [r3, r2]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2246      	movs	r2, #70	@ 0x46
 8001e72:	2101      	movs	r1, #1
 8001e74:	5499      	strb	r1, [r3, r2]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2247      	movs	r2, #71	@ 0x47
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	223d      	movs	r2, #61	@ 0x3d
 8001e82:	2101      	movs	r1, #1
 8001e84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	0018      	movs	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b002      	add	sp, #8
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	223d      	movs	r2, #61	@ 0x3d
 8001e9c:	5c9b      	ldrb	r3, [r3, r2]
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d001      	beq.n	8001ea8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e037      	b.n	8001f18 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	223d      	movs	r2, #61	@ 0x3d
 8001eac:	2102      	movs	r1, #2
 8001eae:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2101      	movs	r1, #1
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a16      	ldr	r2, [pc, #88]	@ (8001f20 <HAL_TIM_Base_Start_IT+0x90>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d004      	beq.n	8001ed4 <HAL_TIM_Base_Start_IT+0x44>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a15      	ldr	r2, [pc, #84]	@ (8001f24 <HAL_TIM_Base_Start_IT+0x94>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d116      	bne.n	8001f02 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	4a13      	ldr	r2, [pc, #76]	@ (8001f28 <HAL_TIM_Base_Start_IT+0x98>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b06      	cmp	r3, #6
 8001ee4:	d016      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x84>
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	2380      	movs	r3, #128	@ 0x80
 8001eea:	025b      	lsls	r3, r3, #9
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d011      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2101      	movs	r1, #1
 8001efc:	430a      	orrs	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f00:	e008      	b.n	8001f14 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e000      	b.n	8001f16 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f14:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	0018      	movs	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b004      	add	sp, #16
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40012c00 	.word	0x40012c00
 8001f24:	40000400 	.word	0x40000400
 8001f28:	00010007 	.word	0x00010007

08001f2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2202      	movs	r2, #2
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d021      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	4013      	ands	r3, r2
 8001f52:	d01d      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2203      	movs	r2, #3
 8001f5a:	4252      	negs	r2, r2
 8001f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d004      	beq.n	8001f7a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	0018      	movs	r0, r3
 8001f74:	f000 f9c0 	bl	80022f8 <HAL_TIM_IC_CaptureCallback>
 8001f78:	e007      	b.n	8001f8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f000 f9b3 	bl	80022e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	0018      	movs	r0, r3
 8001f86:	f000 f9bf 	bl	8002308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2204      	movs	r2, #4
 8001f94:	4013      	ands	r3, r2
 8001f96:	d022      	beq.n	8001fde <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2204      	movs	r2, #4
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d01e      	beq.n	8001fde <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2205      	movs	r2, #5
 8001fa6:	4252      	negs	r2, r2
 8001fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2202      	movs	r2, #2
 8001fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699a      	ldr	r2, [r3, #24]
 8001fb6:	23c0      	movs	r3, #192	@ 0xc0
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d004      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f000 f999 	bl	80022f8 <HAL_TIM_IC_CaptureCallback>
 8001fc6:	e007      	b.n	8001fd8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f000 f98c 	bl	80022e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	f000 f998 	bl	8002308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2208      	movs	r2, #8
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d021      	beq.n	800202a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2208      	movs	r2, #8
 8001fea:	4013      	ands	r3, r2
 8001fec:	d01d      	beq.n	800202a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2209      	movs	r2, #9
 8001ff4:	4252      	negs	r2, r2
 8001ff6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	2203      	movs	r2, #3
 8002006:	4013      	ands	r3, r2
 8002008:	d004      	beq.n	8002014 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	0018      	movs	r0, r3
 800200e:	f000 f973 	bl	80022f8 <HAL_TIM_IC_CaptureCallback>
 8002012:	e007      	b.n	8002024 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	0018      	movs	r0, r3
 8002018:	f000 f966 	bl	80022e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	0018      	movs	r0, r3
 8002020:	f000 f972 	bl	8002308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2210      	movs	r2, #16
 800202e:	4013      	ands	r3, r2
 8002030:	d022      	beq.n	8002078 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2210      	movs	r2, #16
 8002036:	4013      	ands	r3, r2
 8002038:	d01e      	beq.n	8002078 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2211      	movs	r2, #17
 8002040:	4252      	negs	r2, r2
 8002042:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2208      	movs	r2, #8
 8002048:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	69da      	ldr	r2, [r3, #28]
 8002050:	23c0      	movs	r3, #192	@ 0xc0
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4013      	ands	r3, r2
 8002056:	d004      	beq.n	8002062 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	0018      	movs	r0, r3
 800205c:	f000 f94c 	bl	80022f8 <HAL_TIM_IC_CaptureCallback>
 8002060:	e007      	b.n	8002072 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	0018      	movs	r0, r3
 8002066:	f000 f93f 	bl	80022e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	0018      	movs	r0, r3
 800206e:	f000 f94b 	bl	8002308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2201      	movs	r2, #1
 800207c:	4013      	ands	r3, r2
 800207e:	d00c      	beq.n	800209a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2201      	movs	r2, #1
 8002084:	4013      	ands	r3, r2
 8002086:	d008      	beq.n	800209a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2202      	movs	r2, #2
 800208e:	4252      	negs	r2, r2
 8002090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	0018      	movs	r0, r3
 8002096:	f7fe f8d1 	bl	800023c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2280      	movs	r2, #128	@ 0x80
 800209e:	4013      	ands	r3, r2
 80020a0:	d104      	bne.n	80020ac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	2380      	movs	r3, #128	@ 0x80
 80020a6:	019b      	lsls	r3, r3, #6
 80020a8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80020aa:	d00b      	beq.n	80020c4 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2280      	movs	r2, #128	@ 0x80
 80020b0:	4013      	ands	r3, r2
 80020b2:	d007      	beq.n	80020c4 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002134 <HAL_TIM_IRQHandler+0x208>)
 80020ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	0018      	movs	r0, r3
 80020c0:	f000 fab2 	bl	8002628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	2380      	movs	r3, #128	@ 0x80
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4013      	ands	r3, r2
 80020cc:	d00b      	beq.n	80020e6 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2280      	movs	r2, #128	@ 0x80
 80020d2:	4013      	ands	r3, r2
 80020d4:	d007      	beq.n	80020e6 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a17      	ldr	r2, [pc, #92]	@ (8002138 <HAL_TIM_IRQHandler+0x20c>)
 80020dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	0018      	movs	r0, r3
 80020e2:	f000 faa9 	bl	8002638 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2240      	movs	r2, #64	@ 0x40
 80020ea:	4013      	ands	r3, r2
 80020ec:	d00c      	beq.n	8002108 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2240      	movs	r2, #64	@ 0x40
 80020f2:	4013      	ands	r3, r2
 80020f4:	d008      	beq.n	8002108 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2241      	movs	r2, #65	@ 0x41
 80020fc:	4252      	negs	r2, r2
 80020fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	0018      	movs	r0, r3
 8002104:	f000 f908 	bl	8002318 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2220      	movs	r2, #32
 800210c:	4013      	ands	r3, r2
 800210e:	d00c      	beq.n	800212a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2220      	movs	r2, #32
 8002114:	4013      	ands	r3, r2
 8002116:	d008      	beq.n	800212a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2221      	movs	r2, #33	@ 0x21
 800211e:	4252      	negs	r2, r2
 8002120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	0018      	movs	r0, r3
 8002126:	f000 fa77 	bl	8002618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800212a:	46c0      	nop			@ (mov r8, r8)
 800212c:	46bd      	mov	sp, r7
 800212e:	b004      	add	sp, #16
 8002130:	bd80      	pop	{r7, pc}
 8002132:	46c0      	nop			@ (mov r8, r8)
 8002134:	ffffdf7f 	.word	0xffffdf7f
 8002138:	fffffeff 	.word	0xfffffeff

0800213c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002146:	230f      	movs	r3, #15
 8002148:	18fb      	adds	r3, r7, r3
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	223c      	movs	r2, #60	@ 0x3c
 8002152:	5c9b      	ldrb	r3, [r3, r2]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_TIM_ConfigClockSource+0x20>
 8002158:	2302      	movs	r3, #2
 800215a:	e0bc      	b.n	80022d6 <HAL_TIM_ConfigClockSource+0x19a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	223c      	movs	r2, #60	@ 0x3c
 8002160:	2101      	movs	r1, #1
 8002162:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	223d      	movs	r2, #61	@ 0x3d
 8002168:	2102      	movs	r1, #2
 800216a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4a5a      	ldr	r2, [pc, #360]	@ (80022e0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002178:	4013      	ands	r3, r2
 800217a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	4a59      	ldr	r2, [pc, #356]	@ (80022e4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002180:	4013      	ands	r3, r2
 8002182:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2280      	movs	r2, #128	@ 0x80
 8002192:	0192      	lsls	r2, r2, #6
 8002194:	4293      	cmp	r3, r2
 8002196:	d040      	beq.n	800221a <HAL_TIM_ConfigClockSource+0xde>
 8002198:	2280      	movs	r2, #128	@ 0x80
 800219a:	0192      	lsls	r2, r2, #6
 800219c:	4293      	cmp	r3, r2
 800219e:	d900      	bls.n	80021a2 <HAL_TIM_ConfigClockSource+0x66>
 80021a0:	e088      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x178>
 80021a2:	2280      	movs	r2, #128	@ 0x80
 80021a4:	0152      	lsls	r2, r2, #5
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d100      	bne.n	80021ac <HAL_TIM_ConfigClockSource+0x70>
 80021aa:	e088      	b.n	80022be <HAL_TIM_ConfigClockSource+0x182>
 80021ac:	2280      	movs	r2, #128	@ 0x80
 80021ae:	0152      	lsls	r2, r2, #5
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d900      	bls.n	80021b6 <HAL_TIM_ConfigClockSource+0x7a>
 80021b4:	e07e      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x178>
 80021b6:	2b70      	cmp	r3, #112	@ 0x70
 80021b8:	d018      	beq.n	80021ec <HAL_TIM_ConfigClockSource+0xb0>
 80021ba:	d900      	bls.n	80021be <HAL_TIM_ConfigClockSource+0x82>
 80021bc:	e07a      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x178>
 80021be:	2b60      	cmp	r3, #96	@ 0x60
 80021c0:	d04f      	beq.n	8002262 <HAL_TIM_ConfigClockSource+0x126>
 80021c2:	d900      	bls.n	80021c6 <HAL_TIM_ConfigClockSource+0x8a>
 80021c4:	e076      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x178>
 80021c6:	2b50      	cmp	r3, #80	@ 0x50
 80021c8:	d03b      	beq.n	8002242 <HAL_TIM_ConfigClockSource+0x106>
 80021ca:	d900      	bls.n	80021ce <HAL_TIM_ConfigClockSource+0x92>
 80021cc:	e072      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x178>
 80021ce:	2b40      	cmp	r3, #64	@ 0x40
 80021d0:	d057      	beq.n	8002282 <HAL_TIM_ConfigClockSource+0x146>
 80021d2:	d900      	bls.n	80021d6 <HAL_TIM_ConfigClockSource+0x9a>
 80021d4:	e06e      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x178>
 80021d6:	2b30      	cmp	r3, #48	@ 0x30
 80021d8:	d063      	beq.n	80022a2 <HAL_TIM_ConfigClockSource+0x166>
 80021da:	d86b      	bhi.n	80022b4 <HAL_TIM_ConfigClockSource+0x178>
 80021dc:	2b20      	cmp	r3, #32
 80021de:	d060      	beq.n	80022a2 <HAL_TIM_ConfigClockSource+0x166>
 80021e0:	d868      	bhi.n	80022b4 <HAL_TIM_ConfigClockSource+0x178>
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d05d      	beq.n	80022a2 <HAL_TIM_ConfigClockSource+0x166>
 80021e6:	2b10      	cmp	r3, #16
 80021e8:	d05b      	beq.n	80022a2 <HAL_TIM_ConfigClockSource+0x166>
 80021ea:	e063      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021fc:	f000 f98a 	bl	8002514 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2277      	movs	r2, #119	@ 0x77
 800220c:	4313      	orrs	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	609a      	str	r2, [r3, #8]
      break;
 8002218:	e052      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800222a:	f000 f973 	bl	8002514 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2180      	movs	r1, #128	@ 0x80
 800223a:	01c9      	lsls	r1, r1, #7
 800223c:	430a      	orrs	r2, r1
 800223e:	609a      	str	r2, [r3, #8]
      break;
 8002240:	e03e      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800224e:	001a      	movs	r2, r3
 8002250:	f000 f8e4 	bl	800241c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2150      	movs	r1, #80	@ 0x50
 800225a:	0018      	movs	r0, r3
 800225c:	f000 f93e 	bl	80024dc <TIM_ITRx_SetConfig>
      break;
 8002260:	e02e      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800226e:	001a      	movs	r2, r3
 8002270:	f000 f902 	bl	8002478 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2160      	movs	r1, #96	@ 0x60
 800227a:	0018      	movs	r0, r3
 800227c:	f000 f92e 	bl	80024dc <TIM_ITRx_SetConfig>
      break;
 8002280:	e01e      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800228e:	001a      	movs	r2, r3
 8002290:	f000 f8c4 	bl	800241c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2140      	movs	r1, #64	@ 0x40
 800229a:	0018      	movs	r0, r3
 800229c:	f000 f91e 	bl	80024dc <TIM_ITRx_SetConfig>
      break;
 80022a0:	e00e      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	0019      	movs	r1, r3
 80022ac:	0010      	movs	r0, r2
 80022ae:	f000 f915 	bl	80024dc <TIM_ITRx_SetConfig>
      break;
 80022b2:	e005      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80022b4:	230f      	movs	r3, #15
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
      break;
 80022bc:	e000      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80022be:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	223d      	movs	r2, #61	@ 0x3d
 80022c4:	2101      	movs	r1, #1
 80022c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	223c      	movs	r2, #60	@ 0x3c
 80022cc:	2100      	movs	r1, #0
 80022ce:	5499      	strb	r1, [r3, r2]

  return status;
 80022d0:	230f      	movs	r3, #15
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	781b      	ldrb	r3, [r3, #0]
}
 80022d6:	0018      	movs	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	b004      	add	sp, #16
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	ffceff88 	.word	0xffceff88
 80022e4:	ffff00ff 	.word	0xffff00ff

080022e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022f0:	46c0      	nop			@ (mov r8, r8)
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b002      	add	sp, #8
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002300:	46c0      	nop			@ (mov r8, r8)
 8002302:	46bd      	mov	sp, r7
 8002304:	b002      	add	sp, #8
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002310:	46c0      	nop			@ (mov r8, r8)
 8002312:	46bd      	mov	sp, r7
 8002314:	b002      	add	sp, #8
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002320:	46c0      	nop			@ (mov r8, r8)
 8002322:	46bd      	mov	sp, r7
 8002324:	b002      	add	sp, #8
 8002326:	bd80      	pop	{r7, pc}

08002328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a32      	ldr	r2, [pc, #200]	@ (8002404 <TIM_Base_SetConfig+0xdc>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d003      	beq.n	8002348 <TIM_Base_SetConfig+0x20>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a31      	ldr	r2, [pc, #196]	@ (8002408 <TIM_Base_SetConfig+0xe0>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d108      	bne.n	800235a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2270      	movs	r2, #112	@ 0x70
 800234c:	4393      	bics	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	4313      	orrs	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a29      	ldr	r2, [pc, #164]	@ (8002404 <TIM_Base_SetConfig+0xdc>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00f      	beq.n	8002382 <TIM_Base_SetConfig+0x5a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a28      	ldr	r2, [pc, #160]	@ (8002408 <TIM_Base_SetConfig+0xe0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00b      	beq.n	8002382 <TIM_Base_SetConfig+0x5a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a27      	ldr	r2, [pc, #156]	@ (800240c <TIM_Base_SetConfig+0xe4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d007      	beq.n	8002382 <TIM_Base_SetConfig+0x5a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a26      	ldr	r2, [pc, #152]	@ (8002410 <TIM_Base_SetConfig+0xe8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d003      	beq.n	8002382 <TIM_Base_SetConfig+0x5a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a25      	ldr	r2, [pc, #148]	@ (8002414 <TIM_Base_SetConfig+0xec>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d108      	bne.n	8002394 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4a24      	ldr	r2, [pc, #144]	@ (8002418 <TIM_Base_SetConfig+0xf0>)
 8002386:	4013      	ands	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4313      	orrs	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2280      	movs	r2, #128	@ 0x80
 8002398:	4393      	bics	r3, r2
 800239a:	001a      	movs	r2, r3
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a11      	ldr	r2, [pc, #68]	@ (8002404 <TIM_Base_SetConfig+0xdc>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d007      	beq.n	80023d2 <TIM_Base_SetConfig+0xaa>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a12      	ldr	r2, [pc, #72]	@ (8002410 <TIM_Base_SetConfig+0xe8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d003      	beq.n	80023d2 <TIM_Base_SetConfig+0xaa>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a11      	ldr	r2, [pc, #68]	@ (8002414 <TIM_Base_SetConfig+0xec>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d103      	bne.n	80023da <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	691a      	ldr	r2, [r3, #16]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	2201      	movs	r2, #1
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d106      	bne.n	80023fa <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	2201      	movs	r2, #1
 80023f2:	4393      	bics	r3, r2
 80023f4:	001a      	movs	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	611a      	str	r2, [r3, #16]
  }
}
 80023fa:	46c0      	nop			@ (mov r8, r8)
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b004      	add	sp, #16
 8002400:	bd80      	pop	{r7, pc}
 8002402:	46c0      	nop			@ (mov r8, r8)
 8002404:	40012c00 	.word	0x40012c00
 8002408:	40000400 	.word	0x40000400
 800240c:	40002000 	.word	0x40002000
 8002410:	40014400 	.word	0x40014400
 8002414:	40014800 	.word	0x40014800
 8002418:	fffffcff 	.word	0xfffffcff

0800241c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	2201      	movs	r2, #1
 8002434:	4393      	bics	r3, r2
 8002436:	001a      	movs	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	22f0      	movs	r2, #240	@ 0xf0
 8002446:	4393      	bics	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	220a      	movs	r2, #10
 8002458:	4393      	bics	r3, r2
 800245a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	4313      	orrs	r3, r2
 8002462:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	621a      	str	r2, [r3, #32]
}
 8002470:	46c0      	nop			@ (mov r8, r8)
 8002472:	46bd      	mov	sp, r7
 8002474:	b006      	add	sp, #24
 8002476:	bd80      	pop	{r7, pc}

08002478 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	2210      	movs	r2, #16
 8002490:	4393      	bics	r3, r2
 8002492:	001a      	movs	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4a0d      	ldr	r2, [pc, #52]	@ (80024d8 <TIM_TI2_ConfigInputStage+0x60>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	031b      	lsls	r3, r3, #12
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	22a0      	movs	r2, #160	@ 0xa0
 80024b4:	4393      	bics	r3, r2
 80024b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	4313      	orrs	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	621a      	str	r2, [r3, #32]
}
 80024ce:	46c0      	nop			@ (mov r8, r8)
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b006      	add	sp, #24
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	46c0      	nop			@ (mov r8, r8)
 80024d8:	ffff0fff 	.word	0xffff0fff

080024dc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4a08      	ldr	r2, [pc, #32]	@ (8002510 <TIM_ITRx_SetConfig+0x34>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	2207      	movs	r2, #7
 80024fc:	4313      	orrs	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	609a      	str	r2, [r3, #8]
}
 8002506:	46c0      	nop			@ (mov r8, r8)
 8002508:	46bd      	mov	sp, r7
 800250a:	b004      	add	sp, #16
 800250c:	bd80      	pop	{r7, pc}
 800250e:	46c0      	nop			@ (mov r8, r8)
 8002510:	ffcfff8f 	.word	0xffcfff8f

08002514 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	4a09      	ldr	r2, [pc, #36]	@ (8002550 <TIM_ETR_SetConfig+0x3c>)
 800252c:	4013      	ands	r3, r2
 800252e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	021a      	lsls	r2, r3, #8
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	431a      	orrs	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	4313      	orrs	r3, r2
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	4313      	orrs	r3, r2
 8002540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	609a      	str	r2, [r3, #8]
}
 8002548:	46c0      	nop			@ (mov r8, r8)
 800254a:	46bd      	mov	sp, r7
 800254c:	b006      	add	sp, #24
 800254e:	bd80      	pop	{r7, pc}
 8002550:	ffff00ff 	.word	0xffff00ff

08002554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	223c      	movs	r2, #60	@ 0x3c
 8002562:	5c9b      	ldrb	r3, [r3, r2]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002568:	2302      	movs	r3, #2
 800256a:	e04a      	b.n	8002602 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	223c      	movs	r2, #60	@ 0x3c
 8002570:	2101      	movs	r1, #1
 8002572:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	223d      	movs	r2, #61	@ 0x3d
 8002578:	2102      	movs	r1, #2
 800257a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a1e      	ldr	r2, [pc, #120]	@ (800260c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d108      	bne.n	80025a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4a1d      	ldr	r2, [pc, #116]	@ (8002610 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800259a:	4013      	ands	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2270      	movs	r2, #112	@ 0x70
 80025ac:	4393      	bics	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a11      	ldr	r2, [pc, #68]	@ (800260c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d004      	beq.n	80025d6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a10      	ldr	r2, [pc, #64]	@ (8002614 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d10c      	bne.n	80025f0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2280      	movs	r2, #128	@ 0x80
 80025da:	4393      	bics	r3, r2
 80025dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	223d      	movs	r2, #61	@ 0x3d
 80025f4:	2101      	movs	r1, #1
 80025f6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	223c      	movs	r2, #60	@ 0x3c
 80025fc:	2100      	movs	r1, #0
 80025fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	0018      	movs	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	b004      	add	sp, #16
 8002608:	bd80      	pop	{r7, pc}
 800260a:	46c0      	nop			@ (mov r8, r8)
 800260c:	40012c00 	.word	0x40012c00
 8002610:	ff0fffff 	.word	0xff0fffff
 8002614:	40000400 	.word	0x40000400

08002618 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002620:	46c0      	nop			@ (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b002      	add	sp, #8
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002630:	46c0      	nop			@ (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b002      	add	sp, #8
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002640:	46c0      	nop			@ (mov r8, r8)
 8002642:	46bd      	mov	sp, r7
 8002644:	b002      	add	sp, #8
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e046      	b.n	80026e8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2288      	movs	r2, #136	@ 0x88
 800265e:	589b      	ldr	r3, [r3, r2]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d107      	bne.n	8002674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2284      	movs	r2, #132	@ 0x84
 8002668:	2100      	movs	r1, #0
 800266a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	0018      	movs	r0, r3
 8002670:	f7fe f84c 	bl	800070c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2288      	movs	r2, #136	@ 0x88
 8002678:	2124      	movs	r1, #36	@ 0x24
 800267a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2101      	movs	r1, #1
 8002688:	438a      	bics	r2, r1
 800268a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	0018      	movs	r0, r3
 8002698:	f000 fa10 	bl	8002abc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	0018      	movs	r0, r3
 80026a0:	f000 f8a2 	bl	80027e8 <UART_SetConfig>
 80026a4:	0003      	movs	r3, r0
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e01c      	b.n	80026e8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	490d      	ldr	r1, [pc, #52]	@ (80026f0 <HAL_UART_Init+0xa8>)
 80026ba:	400a      	ands	r2, r1
 80026bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	212a      	movs	r1, #42	@ 0x2a
 80026ca:	438a      	bics	r2, r1
 80026cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2101      	movs	r1, #1
 80026da:	430a      	orrs	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f000 fa9f 	bl	8002c24 <UART_CheckIdleState>
 80026e6:	0003      	movs	r3, r0
}
 80026e8:	0018      	movs	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b002      	add	sp, #8
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	ffffb7ff 	.word	0xffffb7ff

080026f4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	1dbb      	adds	r3, r7, #6
 8002700:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	228c      	movs	r2, #140	@ 0x8c
 8002706:	589b      	ldr	r3, [r3, r2]
 8002708:	2b20      	cmp	r3, #32
 800270a:	d145      	bne.n	8002798 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_UART_Receive_DMA+0x26>
 8002712:	1dbb      	adds	r3, r7, #6
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e03d      	b.n	800279a <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	2380      	movs	r3, #128	@ 0x80
 8002724:	015b      	lsls	r3, r3, #5
 8002726:	429a      	cmp	r2, r3
 8002728:	d109      	bne.n	800273e <HAL_UART_Receive_DMA+0x4a>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d105      	bne.n	800273e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2201      	movs	r2, #1
 8002736:	4013      	ands	r3, r2
 8002738:	d001      	beq.n	800273e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e02d      	b.n	800279a <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	2380      	movs	r3, #128	@ 0x80
 800274c:	041b      	lsls	r3, r3, #16
 800274e:	4013      	ands	r3, r2
 8002750:	d019      	beq.n	8002786 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002752:	f3ef 8310 	mrs	r3, PRIMASK
 8002756:	613b      	str	r3, [r7, #16]
  return(result);
 8002758:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800275a:	61fb      	str	r3, [r7, #28]
 800275c:	2301      	movs	r3, #1
 800275e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f383 8810 	msr	PRIMASK, r3
}
 8002766:	46c0      	nop			@ (mov r8, r8)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2180      	movs	r1, #128	@ 0x80
 8002774:	04c9      	lsls	r1, r1, #19
 8002776:	430a      	orrs	r2, r1
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	f383 8810 	msr	PRIMASK, r3
}
 8002784:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002786:	1dbb      	adds	r3, r7, #6
 8002788:	881a      	ldrh	r2, [r3, #0]
 800278a:	68b9      	ldr	r1, [r7, #8]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	0018      	movs	r0, r3
 8002790:	f000 fb62 	bl	8002e58 <UART_Start_Receive_DMA>
 8002794:	0003      	movs	r3, r0
 8002796:	e000      	b.n	800279a <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002798:	2302      	movs	r3, #2
  }
}
 800279a:	0018      	movs	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	b008      	add	sp, #32
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80027aa:	46c0      	nop			@ (mov r8, r8)
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b002      	add	sp, #8
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80027ba:	46c0      	nop			@ (mov r8, r8)
 80027bc:	46bd      	mov	sp, r7
 80027be:	b002      	add	sp, #8
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80027ca:	46c0      	nop			@ (mov r8, r8)
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b002      	add	sp, #8
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	000a      	movs	r2, r1
 80027dc:	1cbb      	adds	r3, r7, #2
 80027de:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027e0:	46c0      	nop			@ (mov r8, r8)
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b002      	add	sp, #8
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027f0:	231a      	movs	r3, #26
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	4313      	orrs	r3, r2
 800280e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4aa1      	ldr	r2, [pc, #644]	@ (8002a9c <UART_SetConfig+0x2b4>)
 8002818:	4013      	ands	r3, r2
 800281a:	0019      	movs	r1, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	430a      	orrs	r2, r1
 8002824:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4a9c      	ldr	r2, [pc, #624]	@ (8002aa0 <UART_SetConfig+0x2b8>)
 800282e:	4013      	ands	r3, r2
 8002830:	0019      	movs	r1, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	4313      	orrs	r3, r2
 800284c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4a93      	ldr	r2, [pc, #588]	@ (8002aa4 <UART_SetConfig+0x2bc>)
 8002856:	4013      	ands	r3, r2
 8002858:	0019      	movs	r1, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	69fa      	ldr	r2, [r7, #28]
 8002860:	430a      	orrs	r2, r1
 8002862:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800286a:	220f      	movs	r2, #15
 800286c:	4393      	bics	r3, r2
 800286e:	0019      	movs	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a89      	ldr	r2, [pc, #548]	@ (8002aa8 <UART_SetConfig+0x2c0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d127      	bne.n	80028d6 <UART_SetConfig+0xee>
 8002886:	4b89      	ldr	r3, [pc, #548]	@ (8002aac <UART_SetConfig+0x2c4>)
 8002888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288a:	2203      	movs	r2, #3
 800288c:	4013      	ands	r3, r2
 800288e:	2b03      	cmp	r3, #3
 8002890:	d017      	beq.n	80028c2 <UART_SetConfig+0xda>
 8002892:	d81b      	bhi.n	80028cc <UART_SetConfig+0xe4>
 8002894:	2b02      	cmp	r3, #2
 8002896:	d00a      	beq.n	80028ae <UART_SetConfig+0xc6>
 8002898:	d818      	bhi.n	80028cc <UART_SetConfig+0xe4>
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <UART_SetConfig+0xbc>
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d00a      	beq.n	80028b8 <UART_SetConfig+0xd0>
 80028a2:	e013      	b.n	80028cc <UART_SetConfig+0xe4>
 80028a4:	231b      	movs	r3, #27
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
 80028ac:	e021      	b.n	80028f2 <UART_SetConfig+0x10a>
 80028ae:	231b      	movs	r3, #27
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	2202      	movs	r2, #2
 80028b4:	701a      	strb	r2, [r3, #0]
 80028b6:	e01c      	b.n	80028f2 <UART_SetConfig+0x10a>
 80028b8:	231b      	movs	r3, #27
 80028ba:	18fb      	adds	r3, r7, r3
 80028bc:	2204      	movs	r2, #4
 80028be:	701a      	strb	r2, [r3, #0]
 80028c0:	e017      	b.n	80028f2 <UART_SetConfig+0x10a>
 80028c2:	231b      	movs	r3, #27
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	2208      	movs	r2, #8
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	e012      	b.n	80028f2 <UART_SetConfig+0x10a>
 80028cc:	231b      	movs	r3, #27
 80028ce:	18fb      	adds	r3, r7, r3
 80028d0:	2210      	movs	r2, #16
 80028d2:	701a      	strb	r2, [r3, #0]
 80028d4:	e00d      	b.n	80028f2 <UART_SetConfig+0x10a>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a75      	ldr	r2, [pc, #468]	@ (8002ab0 <UART_SetConfig+0x2c8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d104      	bne.n	80028ea <UART_SetConfig+0x102>
 80028e0:	231b      	movs	r3, #27
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
 80028e8:	e003      	b.n	80028f2 <UART_SetConfig+0x10a>
 80028ea:	231b      	movs	r3, #27
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	2210      	movs	r2, #16
 80028f0:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69da      	ldr	r2, [r3, #28]
 80028f6:	2380      	movs	r3, #128	@ 0x80
 80028f8:	021b      	lsls	r3, r3, #8
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d000      	beq.n	8002900 <UART_SetConfig+0x118>
 80028fe:	e065      	b.n	80029cc <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8002900:	231b      	movs	r3, #27
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b08      	cmp	r3, #8
 8002908:	d015      	beq.n	8002936 <UART_SetConfig+0x14e>
 800290a:	dc18      	bgt.n	800293e <UART_SetConfig+0x156>
 800290c:	2b04      	cmp	r3, #4
 800290e:	d00d      	beq.n	800292c <UART_SetConfig+0x144>
 8002910:	dc15      	bgt.n	800293e <UART_SetConfig+0x156>
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <UART_SetConfig+0x134>
 8002916:	2b02      	cmp	r3, #2
 8002918:	d005      	beq.n	8002926 <UART_SetConfig+0x13e>
 800291a:	e010      	b.n	800293e <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800291c:	f7ff fa4a 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8002920:	0003      	movs	r3, r0
 8002922:	617b      	str	r3, [r7, #20]
        break;
 8002924:	e012      	b.n	800294c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002926:	4b63      	ldr	r3, [pc, #396]	@ (8002ab4 <UART_SetConfig+0x2cc>)
 8002928:	617b      	str	r3, [r7, #20]
        break;
 800292a:	e00f      	b.n	800294c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800292c:	f7ff f9b6 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 8002930:	0003      	movs	r3, r0
 8002932:	617b      	str	r3, [r7, #20]
        break;
 8002934:	e00a      	b.n	800294c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002936:	2380      	movs	r3, #128	@ 0x80
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	617b      	str	r3, [r7, #20]
        break;
 800293c:	e006      	b.n	800294c <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002942:	231a      	movs	r3, #26
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
        break;
 800294a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d100      	bne.n	8002954 <UART_SetConfig+0x16c>
 8002952:	e08d      	b.n	8002a70 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002958:	4b57      	ldr	r3, [pc, #348]	@ (8002ab8 <UART_SetConfig+0x2d0>)
 800295a:	0052      	lsls	r2, r2, #1
 800295c:	5ad3      	ldrh	r3, [r2, r3]
 800295e:	0019      	movs	r1, r3
 8002960:	6978      	ldr	r0, [r7, #20]
 8002962:	f7fd fbdf 	bl	8000124 <__udivsi3>
 8002966:	0003      	movs	r3, r0
 8002968:	005a      	lsls	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	085b      	lsrs	r3, r3, #1
 8002970:	18d2      	adds	r2, r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	0019      	movs	r1, r3
 8002978:	0010      	movs	r0, r2
 800297a:	f7fd fbd3 	bl	8000124 <__udivsi3>
 800297e:	0003      	movs	r3, r0
 8002980:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	2b0f      	cmp	r3, #15
 8002986:	d91c      	bls.n	80029c2 <UART_SetConfig+0x1da>
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	2380      	movs	r3, #128	@ 0x80
 800298c:	025b      	lsls	r3, r3, #9
 800298e:	429a      	cmp	r2, r3
 8002990:	d217      	bcs.n	80029c2 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	b29a      	uxth	r2, r3
 8002996:	200e      	movs	r0, #14
 8002998:	183b      	adds	r3, r7, r0
 800299a:	210f      	movs	r1, #15
 800299c:	438a      	bics	r2, r1
 800299e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	085b      	lsrs	r3, r3, #1
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2207      	movs	r2, #7
 80029a8:	4013      	ands	r3, r2
 80029aa:	b299      	uxth	r1, r3
 80029ac:	183b      	adds	r3, r7, r0
 80029ae:	183a      	adds	r2, r7, r0
 80029b0:	8812      	ldrh	r2, [r2, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	183a      	adds	r2, r7, r0
 80029bc:	8812      	ldrh	r2, [r2, #0]
 80029be:	60da      	str	r2, [r3, #12]
 80029c0:	e056      	b.n	8002a70 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80029c2:	231a      	movs	r3, #26
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	2201      	movs	r2, #1
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	e051      	b.n	8002a70 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029cc:	231b      	movs	r3, #27
 80029ce:	18fb      	adds	r3, r7, r3
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d015      	beq.n	8002a02 <UART_SetConfig+0x21a>
 80029d6:	dc18      	bgt.n	8002a0a <UART_SetConfig+0x222>
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d00d      	beq.n	80029f8 <UART_SetConfig+0x210>
 80029dc:	dc15      	bgt.n	8002a0a <UART_SetConfig+0x222>
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d002      	beq.n	80029e8 <UART_SetConfig+0x200>
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d005      	beq.n	80029f2 <UART_SetConfig+0x20a>
 80029e6:	e010      	b.n	8002a0a <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029e8:	f7ff f9e4 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 80029ec:	0003      	movs	r3, r0
 80029ee:	617b      	str	r3, [r7, #20]
        break;
 80029f0:	e012      	b.n	8002a18 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029f2:	4b30      	ldr	r3, [pc, #192]	@ (8002ab4 <UART_SetConfig+0x2cc>)
 80029f4:	617b      	str	r3, [r7, #20]
        break;
 80029f6:	e00f      	b.n	8002a18 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029f8:	f7ff f950 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 80029fc:	0003      	movs	r3, r0
 80029fe:	617b      	str	r3, [r7, #20]
        break;
 8002a00:	e00a      	b.n	8002a18 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a02:	2380      	movs	r3, #128	@ 0x80
 8002a04:	021b      	lsls	r3, r3, #8
 8002a06:	617b      	str	r3, [r7, #20]
        break;
 8002a08:	e006      	b.n	8002a18 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002a0e:	231a      	movs	r3, #26
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	2201      	movs	r2, #1
 8002a14:	701a      	strb	r2, [r3, #0]
        break;
 8002a16:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d028      	beq.n	8002a70 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a22:	4b25      	ldr	r3, [pc, #148]	@ (8002ab8 <UART_SetConfig+0x2d0>)
 8002a24:	0052      	lsls	r2, r2, #1
 8002a26:	5ad3      	ldrh	r3, [r2, r3]
 8002a28:	0019      	movs	r1, r3
 8002a2a:	6978      	ldr	r0, [r7, #20]
 8002a2c:	f7fd fb7a 	bl	8000124 <__udivsi3>
 8002a30:	0003      	movs	r3, r0
 8002a32:	001a      	movs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	085b      	lsrs	r3, r3, #1
 8002a3a:	18d2      	adds	r2, r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	0019      	movs	r1, r3
 8002a42:	0010      	movs	r0, r2
 8002a44:	f7fd fb6e 	bl	8000124 <__udivsi3>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	2b0f      	cmp	r3, #15
 8002a50:	d90a      	bls.n	8002a68 <UART_SetConfig+0x280>
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	2380      	movs	r3, #128	@ 0x80
 8002a56:	025b      	lsls	r3, r3, #9
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d205      	bcs.n	8002a68 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	e003      	b.n	8002a70 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8002a68:	231a      	movs	r3, #26
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	226a      	movs	r2, #106	@ 0x6a
 8002a74:	2101      	movs	r1, #1
 8002a76:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2268      	movs	r2, #104	@ 0x68
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002a8c:	231a      	movs	r3, #26
 8002a8e:	18fb      	adds	r3, r7, r3
 8002a90:	781b      	ldrb	r3, [r3, #0]
}
 8002a92:	0018      	movs	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	b008      	add	sp, #32
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	46c0      	nop			@ (mov r8, r8)
 8002a9c:	cfff69f3 	.word	0xcfff69f3
 8002aa0:	ffffcfff 	.word	0xffffcfff
 8002aa4:	11fff4ff 	.word	0x11fff4ff
 8002aa8:	40013800 	.word	0x40013800
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40004400 	.word	0x40004400
 8002ab4:	00f42400 	.word	0x00f42400
 8002ab8:	08004758 	.word	0x08004758

08002abc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac8:	2208      	movs	r2, #8
 8002aca:	4013      	ands	r3, r2
 8002acc:	d00b      	beq.n	8002ae6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4a4a      	ldr	r2, [pc, #296]	@ (8002c00 <UART_AdvFeatureConfig+0x144>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	0019      	movs	r1, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aea:	2201      	movs	r2, #1
 8002aec:	4013      	ands	r3, r2
 8002aee:	d00b      	beq.n	8002b08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4a43      	ldr	r2, [pc, #268]	@ (8002c04 <UART_AdvFeatureConfig+0x148>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	0019      	movs	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d00b      	beq.n	8002b2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	4a3b      	ldr	r2, [pc, #236]	@ (8002c08 <UART_AdvFeatureConfig+0x14c>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2e:	2204      	movs	r2, #4
 8002b30:	4013      	ands	r3, r2
 8002b32:	d00b      	beq.n	8002b4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4a34      	ldr	r2, [pc, #208]	@ (8002c0c <UART_AdvFeatureConfig+0x150>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	0019      	movs	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b50:	2210      	movs	r2, #16
 8002b52:	4013      	ands	r3, r2
 8002b54:	d00b      	beq.n	8002b6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4a2c      	ldr	r2, [pc, #176]	@ (8002c10 <UART_AdvFeatureConfig+0x154>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	0019      	movs	r1, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b72:	2220      	movs	r2, #32
 8002b74:	4013      	ands	r3, r2
 8002b76:	d00b      	beq.n	8002b90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	4a25      	ldr	r2, [pc, #148]	@ (8002c14 <UART_AdvFeatureConfig+0x158>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	0019      	movs	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b94:	2240      	movs	r2, #64	@ 0x40
 8002b96:	4013      	ands	r3, r2
 8002b98:	d01d      	beq.n	8002bd6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c18 <UART_AdvFeatureConfig+0x15c>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	0019      	movs	r1, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bb6:	2380      	movs	r3, #128	@ 0x80
 8002bb8:	035b      	lsls	r3, r3, #13
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d10b      	bne.n	8002bd6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4a15      	ldr	r2, [pc, #84]	@ (8002c1c <UART_AdvFeatureConfig+0x160>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	0019      	movs	r1, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bda:	2280      	movs	r2, #128	@ 0x80
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d00b      	beq.n	8002bf8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4a0e      	ldr	r2, [pc, #56]	@ (8002c20 <UART_AdvFeatureConfig+0x164>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	0019      	movs	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	605a      	str	r2, [r3, #4]
  }
}
 8002bf8:	46c0      	nop			@ (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b002      	add	sp, #8
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	ffff7fff 	.word	0xffff7fff
 8002c04:	fffdffff 	.word	0xfffdffff
 8002c08:	fffeffff 	.word	0xfffeffff
 8002c0c:	fffbffff 	.word	0xfffbffff
 8002c10:	ffffefff 	.word	0xffffefff
 8002c14:	ffffdfff 	.word	0xffffdfff
 8002c18:	ffefffff 	.word	0xffefffff
 8002c1c:	ff9fffff 	.word	0xff9fffff
 8002c20:	fff7ffff 	.word	0xfff7ffff

08002c24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b092      	sub	sp, #72	@ 0x48
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2290      	movs	r2, #144	@ 0x90
 8002c30:	2100      	movs	r1, #0
 8002c32:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c34:	f7fd fef8 	bl	8000a28 <HAL_GetTick>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2208      	movs	r2, #8
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d12d      	bne.n	8002ca6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c4c:	2280      	movs	r2, #128	@ 0x80
 8002c4e:	0391      	lsls	r1, r2, #14
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	4a47      	ldr	r2, [pc, #284]	@ (8002d70 <UART_CheckIdleState+0x14c>)
 8002c54:	9200      	str	r2, [sp, #0]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f000 f88e 	bl	8002d78 <UART_WaitOnFlagUntilTimeout>
 8002c5c:	1e03      	subs	r3, r0, #0
 8002c5e:	d022      	beq.n	8002ca6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c60:	f3ef 8310 	mrs	r3, PRIMASK
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002c68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c70:	f383 8810 	msr	PRIMASK, r3
}
 8002c74:	46c0      	nop			@ (mov r8, r8)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2180      	movs	r1, #128	@ 0x80
 8002c82:	438a      	bics	r2, r1
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c8c:	f383 8810 	msr	PRIMASK, r3
}
 8002c90:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2288      	movs	r2, #136	@ 0x88
 8002c96:	2120      	movs	r1, #32
 8002c98:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2284      	movs	r2, #132	@ 0x84
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e060      	b.n	8002d68 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2204      	movs	r2, #4
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d146      	bne.n	8002d42 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cb6:	2280      	movs	r2, #128	@ 0x80
 8002cb8:	03d1      	lsls	r1, r2, #15
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	4a2c      	ldr	r2, [pc, #176]	@ (8002d70 <UART_CheckIdleState+0x14c>)
 8002cbe:	9200      	str	r2, [sp, #0]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f000 f859 	bl	8002d78 <UART_WaitOnFlagUntilTimeout>
 8002cc6:	1e03      	subs	r3, r0, #0
 8002cc8:	d03b      	beq.n	8002d42 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cca:	f3ef 8310 	mrs	r3, PRIMASK
 8002cce:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002cd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f383 8810 	msr	PRIMASK, r3
}
 8002cde:	46c0      	nop			@ (mov r8, r8)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4922      	ldr	r1, [pc, #136]	@ (8002d74 <UART_CheckIdleState+0x150>)
 8002cec:	400a      	ands	r2, r1
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cf2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f383 8810 	msr	PRIMASK, r3
}
 8002cfa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8002d00:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d02:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d04:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d06:	2301      	movs	r3, #1
 8002d08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f383 8810 	msr	PRIMASK, r3
}
 8002d10:	46c0      	nop			@ (mov r8, r8)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	438a      	bics	r2, r1
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d24:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	f383 8810 	msr	PRIMASK, r3
}
 8002d2c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	228c      	movs	r2, #140	@ 0x8c
 8002d32:	2120      	movs	r1, #32
 8002d34:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2284      	movs	r2, #132	@ 0x84
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e012      	b.n	8002d68 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2288      	movs	r2, #136	@ 0x88
 8002d46:	2120      	movs	r1, #32
 8002d48:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	228c      	movs	r2, #140	@ 0x8c
 8002d4e:	2120      	movs	r1, #32
 8002d50:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2284      	movs	r2, #132	@ 0x84
 8002d62:	2100      	movs	r1, #0
 8002d64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	0018      	movs	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b010      	add	sp, #64	@ 0x40
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	01ffffff 	.word	0x01ffffff
 8002d74:	fffffedf 	.word	0xfffffedf

08002d78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	1dfb      	adds	r3, r7, #7
 8002d86:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d88:	e051      	b.n	8002e2e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	d04e      	beq.n	8002e2e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d90:	f7fd fe4a 	bl	8000a28 <HAL_GetTick>
 8002d94:	0002      	movs	r2, r0
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d302      	bcc.n	8002da6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e051      	b.n	8002e4e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2204      	movs	r2, #4
 8002db2:	4013      	ands	r3, r2
 8002db4:	d03b      	beq.n	8002e2e <UART_WaitOnFlagUntilTimeout+0xb6>
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b80      	cmp	r3, #128	@ 0x80
 8002dba:	d038      	beq.n	8002e2e <UART_WaitOnFlagUntilTimeout+0xb6>
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b40      	cmp	r3, #64	@ 0x40
 8002dc0:	d035      	beq.n	8002e2e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	2208      	movs	r2, #8
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d111      	bne.n	8002df4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2208      	movs	r2, #8
 8002dd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f000 f922 	bl	8003024 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2290      	movs	r2, #144	@ 0x90
 8002de4:	2108      	movs	r1, #8
 8002de6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2284      	movs	r2, #132	@ 0x84
 8002dec:	2100      	movs	r1, #0
 8002dee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e02c      	b.n	8002e4e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	69da      	ldr	r2, [r3, #28]
 8002dfa:	2380      	movs	r3, #128	@ 0x80
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	401a      	ands	r2, r3
 8002e00:	2380      	movs	r3, #128	@ 0x80
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d112      	bne.n	8002e2e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2280      	movs	r2, #128	@ 0x80
 8002e0e:	0112      	lsls	r2, r2, #4
 8002e10:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	0018      	movs	r0, r3
 8002e16:	f000 f905 	bl	8003024 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2290      	movs	r2, #144	@ 0x90
 8002e1e:	2120      	movs	r1, #32
 8002e20:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2284      	movs	r2, #132	@ 0x84
 8002e26:	2100      	movs	r1, #0
 8002e28:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e00f      	b.n	8002e4e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	4013      	ands	r3, r2
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	425a      	negs	r2, r3
 8002e3e:	4153      	adcs	r3, r2
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	001a      	movs	r2, r3
 8002e44:	1dfb      	adds	r3, r7, #7
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d09e      	beq.n	8002d8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	0018      	movs	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	b004      	add	sp, #16
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b090      	sub	sp, #64	@ 0x40
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	1dbb      	adds	r3, r7, #6
 8002e64:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1dba      	adds	r2, r7, #6
 8002e70:	215c      	movs	r1, #92	@ 0x5c
 8002e72:	8812      	ldrh	r2, [r2, #0]
 8002e74:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2290      	movs	r2, #144	@ 0x90
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	228c      	movs	r2, #140	@ 0x8c
 8002e82:	2122      	movs	r1, #34	@ 0x22
 8002e84:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2280      	movs	r2, #128	@ 0x80
 8002e8a:	589b      	ldr	r3, [r3, r2]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d02d      	beq.n	8002eec <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2280      	movs	r2, #128	@ 0x80
 8002e94:	589b      	ldr	r3, [r3, r2]
 8002e96:	4a40      	ldr	r2, [pc, #256]	@ (8002f98 <UART_Start_Receive_DMA+0x140>)
 8002e98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2280      	movs	r2, #128	@ 0x80
 8002e9e:	589b      	ldr	r3, [r3, r2]
 8002ea0:	4a3e      	ldr	r2, [pc, #248]	@ (8002f9c <UART_Start_Receive_DMA+0x144>)
 8002ea2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2280      	movs	r2, #128	@ 0x80
 8002ea8:	589b      	ldr	r3, [r3, r2]
 8002eaa:	4a3d      	ldr	r2, [pc, #244]	@ (8002fa0 <UART_Start_Receive_DMA+0x148>)
 8002eac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2280      	movs	r2, #128	@ 0x80
 8002eb2:	589b      	ldr	r3, [r3, r2]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2280      	movs	r2, #128	@ 0x80
 8002ebc:	5898      	ldr	r0, [r3, r2]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3324      	adds	r3, #36	@ 0x24
 8002ec4:	0019      	movs	r1, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eca:	001a      	movs	r2, r3
 8002ecc:	1dbb      	adds	r3, r7, #6
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	f7fd ff1c 	bl	8000d0c <HAL_DMA_Start_IT>
 8002ed4:	1e03      	subs	r3, r0, #0
 8002ed6:	d009      	beq.n	8002eec <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2290      	movs	r2, #144	@ 0x90
 8002edc:	2110      	movs	r1, #16
 8002ede:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	228c      	movs	r2, #140	@ 0x8c
 8002ee4:	2120      	movs	r1, #32
 8002ee6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e050      	b.n	8002f8e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d019      	beq.n	8002f28 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002efe:	2301      	movs	r3, #1
 8002f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f04:	f383 8810 	msr	PRIMASK, r3
}
 8002f08:	46c0      	nop			@ (mov r8, r8)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2180      	movs	r1, #128	@ 0x80
 8002f16:	0049      	lsls	r1, r1, #1
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f1e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f22:	f383 8810 	msr	PRIMASK, r3
}
 8002f26:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f28:	f3ef 8310 	mrs	r3, PRIMASK
 8002f2c:	613b      	str	r3, [r7, #16]
  return(result);
 8002f2e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f32:	2301      	movs	r3, #1
 8002f34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f383 8810 	msr	PRIMASK, r3
}
 8002f3c:	46c0      	nop			@ (mov r8, r8)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2101      	movs	r1, #1
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	609a      	str	r2, [r3, #8]
 8002f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	f383 8810 	msr	PRIMASK, r3
}
 8002f58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f5e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f60:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f64:	2301      	movs	r3, #1
 8002f66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	f383 8810 	msr	PRIMASK, r3
}
 8002f6e:	46c0      	nop			@ (mov r8, r8)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2140      	movs	r1, #64	@ 0x40
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f82:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	f383 8810 	msr	PRIMASK, r3
}
 8002f8a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	0018      	movs	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b010      	add	sp, #64	@ 0x40
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	46c0      	nop			@ (mov r8, r8)
 8002f98:	080030f1 	.word	0x080030f1
 8002f9c:	08003221 	.word	0x08003221
 8002fa0:	08003263 	.word	0x08003263

08002fa4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	@ 0x28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fac:	f3ef 8310 	mrs	r3, PRIMASK
 8002fb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fb2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8002fb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f383 8810 	msr	PRIMASK, r3
}
 8002fc0:	46c0      	nop			@ (mov r8, r8)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	21c0      	movs	r1, #192	@ 0xc0
 8002fce:	438a      	bics	r2, r1
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f383 8810 	msr	PRIMASK, r3
}
 8002fdc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fde:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe2:	617b      	str	r3, [r7, #20]
  return(result);
 8002fe4:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8002fe6:	623b      	str	r3, [r7, #32]
 8002fe8:	2301      	movs	r3, #1
 8002fea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	f383 8810 	msr	PRIMASK, r3
}
 8002ff2:	46c0      	nop			@ (mov r8, r8)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4908      	ldr	r1, [pc, #32]	@ (8003020 <UART_EndTxTransfer+0x7c>)
 8003000:	400a      	ands	r2, r1
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f383 8810 	msr	PRIMASK, r3
}
 800300e:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2288      	movs	r2, #136	@ 0x88
 8003014:	2120      	movs	r1, #32
 8003016:	5099      	str	r1, [r3, r2]
}
 8003018:	46c0      	nop			@ (mov r8, r8)
 800301a:	46bd      	mov	sp, r7
 800301c:	b00a      	add	sp, #40	@ 0x28
 800301e:	bd80      	pop	{r7, pc}
 8003020:	ff7fffff 	.word	0xff7fffff

08003024 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08e      	sub	sp, #56	@ 0x38
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800302c:	f3ef 8310 	mrs	r3, PRIMASK
 8003030:	617b      	str	r3, [r7, #20]
  return(result);
 8003032:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003034:	637b      	str	r3, [r7, #52]	@ 0x34
 8003036:	2301      	movs	r3, #1
 8003038:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	f383 8810 	msr	PRIMASK, r3
}
 8003040:	46c0      	nop			@ (mov r8, r8)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4926      	ldr	r1, [pc, #152]	@ (80030e8 <UART_EndRxTransfer+0xc4>)
 800304e:	400a      	ands	r2, r1
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003054:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f383 8810 	msr	PRIMASK, r3
}
 800305c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800305e:	f3ef 8310 	mrs	r3, PRIMASK
 8003062:	623b      	str	r3, [r7, #32]
  return(result);
 8003064:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003066:	633b      	str	r3, [r7, #48]	@ 0x30
 8003068:	2301      	movs	r3, #1
 800306a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306e:	f383 8810 	msr	PRIMASK, r3
}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	491b      	ldr	r1, [pc, #108]	@ (80030ec <UART_EndRxTransfer+0xc8>)
 8003080:	400a      	ands	r2, r1
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003086:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308a:	f383 8810 	msr	PRIMASK, r3
}
 800308e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003094:	2b01      	cmp	r3, #1
 8003096:	d118      	bne.n	80030ca <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003098:	f3ef 8310 	mrs	r3, PRIMASK
 800309c:	60bb      	str	r3, [r7, #8]
  return(result);
 800309e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030a2:	2301      	movs	r3, #1
 80030a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f383 8810 	msr	PRIMASK, r3
}
 80030ac:	46c0      	nop			@ (mov r8, r8)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2110      	movs	r1, #16
 80030ba:	438a      	bics	r2, r1
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f383 8810 	msr	PRIMASK, r3
}
 80030c8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	228c      	movs	r2, #140	@ 0x8c
 80030ce:	2120      	movs	r1, #32
 80030d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80030de:	46c0      	nop			@ (mov r8, r8)
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b00e      	add	sp, #56	@ 0x38
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	46c0      	nop			@ (mov r8, r8)
 80030e8:	fffffedf 	.word	0xfffffedf
 80030ec:	effffffe 	.word	0xeffffffe

080030f0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b094      	sub	sp, #80	@ 0x50
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2220      	movs	r2, #32
 8003106:	4013      	ands	r3, r2
 8003108:	d16f      	bne.n	80031ea <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800310a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800310c:	225e      	movs	r2, #94	@ 0x5e
 800310e:	2100      	movs	r1, #0
 8003110:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003112:	f3ef 8310 	mrs	r3, PRIMASK
 8003116:	61bb      	str	r3, [r7, #24]
  return(result);
 8003118:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800311a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800311c:	2301      	movs	r3, #1
 800311e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f383 8810 	msr	PRIMASK, r3
}
 8003126:	46c0      	nop			@ (mov r8, r8)
 8003128:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	493a      	ldr	r1, [pc, #232]	@ (800321c <UART_DMAReceiveCplt+0x12c>)
 8003134:	400a      	ands	r2, r1
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800313a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	f383 8810 	msr	PRIMASK, r3
}
 8003142:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003144:	f3ef 8310 	mrs	r3, PRIMASK
 8003148:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800314c:	647b      	str	r3, [r7, #68]	@ 0x44
 800314e:	2301      	movs	r3, #1
 8003150:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003154:	f383 8810 	msr	PRIMASK, r3
}
 8003158:	46c0      	nop			@ (mov r8, r8)
 800315a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2101      	movs	r1, #1
 8003166:	438a      	bics	r2, r1
 8003168:	609a      	str	r2, [r3, #8]
 800316a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800316c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800316e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003170:	f383 8810 	msr	PRIMASK, r3
}
 8003174:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003176:	f3ef 8310 	mrs	r3, PRIMASK
 800317a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800317c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800317e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003180:	2301      	movs	r3, #1
 8003182:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003186:	f383 8810 	msr	PRIMASK, r3
}
 800318a:	46c0      	nop			@ (mov r8, r8)
 800318c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2140      	movs	r1, #64	@ 0x40
 8003198:	438a      	bics	r2, r1
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800319e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a2:	f383 8810 	msr	PRIMASK, r3
}
 80031a6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80031a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031aa:	228c      	movs	r2, #140	@ 0x8c
 80031ac:	2120      	movs	r1, #32
 80031ae:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d118      	bne.n	80031ea <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b8:	f3ef 8310 	mrs	r3, PRIMASK
 80031bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80031be:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031c2:	2301      	movs	r3, #1
 80031c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f383 8810 	msr	PRIMASK, r3
}
 80031cc:	46c0      	nop			@ (mov r8, r8)
 80031ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2110      	movs	r1, #16
 80031da:	438a      	bics	r2, r1
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f383 8810 	msr	PRIMASK, r3
}
 80031e8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031ec:	2200      	movs	r2, #0
 80031ee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d108      	bne.n	800320a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031fa:	225c      	movs	r2, #92	@ 0x5c
 80031fc:	5a9a      	ldrh	r2, [r3, r2]
 80031fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003200:	0011      	movs	r1, r2
 8003202:	0018      	movs	r0, r3
 8003204:	f7ff fae5 	bl	80027d2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003208:	e003      	b.n	8003212 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800320a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800320c:	0018      	movs	r0, r3
 800320e:	f7ff fac8 	bl	80027a2 <HAL_UART_RxCpltCallback>
}
 8003212:	46c0      	nop			@ (mov r8, r8)
 8003214:	46bd      	mov	sp, r7
 8003216:	b014      	add	sp, #80	@ 0x50
 8003218:	bd80      	pop	{r7, pc}
 800321a:	46c0      	nop			@ (mov r8, r8)
 800321c:	fffffeff 	.word	0xfffffeff

08003220 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003238:	2b01      	cmp	r3, #1
 800323a:	d10a      	bne.n	8003252 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	225c      	movs	r2, #92	@ 0x5c
 8003240:	5a9b      	ldrh	r3, [r3, r2]
 8003242:	085b      	lsrs	r3, r3, #1
 8003244:	b29a      	uxth	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	0011      	movs	r1, r2
 800324a:	0018      	movs	r0, r3
 800324c:	f7ff fac1 	bl	80027d2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003250:	e003      	b.n	800325a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	0018      	movs	r0, r3
 8003256:	f7ff faac 	bl	80027b2 <HAL_UART_RxHalfCpltCallback>
}
 800325a:	46c0      	nop			@ (mov r8, r8)
 800325c:	46bd      	mov	sp, r7
 800325e:	b004      	add	sp, #16
 8003260:	bd80      	pop	{r7, pc}

08003262 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b086      	sub	sp, #24
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2288      	movs	r2, #136	@ 0x88
 8003274:	589b      	ldr	r3, [r3, r2]
 8003276:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	228c      	movs	r2, #140	@ 0x8c
 800327c:	589b      	ldr	r3, [r3, r2]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2280      	movs	r2, #128	@ 0x80
 8003288:	4013      	ands	r3, r2
 800328a:	2b80      	cmp	r3, #128	@ 0x80
 800328c:	d10a      	bne.n	80032a4 <UART_DMAError+0x42>
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	2b21      	cmp	r3, #33	@ 0x21
 8003292:	d107      	bne.n	80032a4 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2256      	movs	r2, #86	@ 0x56
 8003298:	2100      	movs	r1, #0
 800329a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	0018      	movs	r0, r3
 80032a0:	f7ff fe80 	bl	8002fa4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2240      	movs	r2, #64	@ 0x40
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b40      	cmp	r3, #64	@ 0x40
 80032b0:	d10a      	bne.n	80032c8 <UART_DMAError+0x66>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2b22      	cmp	r3, #34	@ 0x22
 80032b6:	d107      	bne.n	80032c8 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	225e      	movs	r2, #94	@ 0x5e
 80032bc:	2100      	movs	r1, #0
 80032be:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	0018      	movs	r0, r3
 80032c4:	f7ff feae 	bl	8003024 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	2290      	movs	r2, #144	@ 0x90
 80032cc:	589b      	ldr	r3, [r3, r2]
 80032ce:	2210      	movs	r2, #16
 80032d0:	431a      	orrs	r2, r3
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2190      	movs	r1, #144	@ 0x90
 80032d6:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	0018      	movs	r0, r3
 80032dc:	f7ff fa71 	bl	80027c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032e0:	46c0      	nop			@ (mov r8, r8)
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b006      	add	sp, #24
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <findslot>:
 80032e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003314 <findslot+0x2c>)
 80032ea:	b510      	push	{r4, lr}
 80032ec:	0004      	movs	r4, r0
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	2800      	cmp	r0, #0
 80032f2:	d004      	beq.n	80032fe <findslot+0x16>
 80032f4:	6a03      	ldr	r3, [r0, #32]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <findslot+0x16>
 80032fa:	f000 fb17 	bl	800392c <__sinit>
 80032fe:	2000      	movs	r0, #0
 8003300:	2c13      	cmp	r4, #19
 8003302:	d805      	bhi.n	8003310 <findslot+0x28>
 8003304:	4b04      	ldr	r3, [pc, #16]	@ (8003318 <findslot+0x30>)
 8003306:	00e4      	lsls	r4, r4, #3
 8003308:	58e2      	ldr	r2, [r4, r3]
 800330a:	3201      	adds	r2, #1
 800330c:	d000      	beq.n	8003310 <findslot+0x28>
 800330e:	18e0      	adds	r0, r4, r3
 8003310:	bd10      	pop	{r4, pc}
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	20000020 	.word	0x20000020
 8003318:	200001e0 	.word	0x200001e0

0800331c <error>:
 800331c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331e:	0004      	movs	r4, r0
 8003320:	f000 fbea 	bl	8003af8 <__errno>
 8003324:	2613      	movs	r6, #19
 8003326:	0005      	movs	r5, r0
 8003328:	2700      	movs	r7, #0
 800332a:	1c30      	adds	r0, r6, #0
 800332c:	1c39      	adds	r1, r7, #0
 800332e:	beab      	bkpt	0x00ab
 8003330:	1c06      	adds	r6, r0, #0
 8003332:	602e      	str	r6, [r5, #0]
 8003334:	0020      	movs	r0, r4
 8003336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003338 <checkerror>:
 8003338:	b510      	push	{r4, lr}
 800333a:	1c43      	adds	r3, r0, #1
 800333c:	d101      	bne.n	8003342 <checkerror+0xa>
 800333e:	f7ff ffed 	bl	800331c <error>
 8003342:	bd10      	pop	{r4, pc}

08003344 <_swiread>:
 8003344:	b530      	push	{r4, r5, lr}
 8003346:	b085      	sub	sp, #20
 8003348:	ad01      	add	r5, sp, #4
 800334a:	9001      	str	r0, [sp, #4]
 800334c:	9102      	str	r1, [sp, #8]
 800334e:	9203      	str	r2, [sp, #12]
 8003350:	2406      	movs	r4, #6
 8003352:	1c20      	adds	r0, r4, #0
 8003354:	1c29      	adds	r1, r5, #0
 8003356:	beab      	bkpt	0x00ab
 8003358:	1c04      	adds	r4, r0, #0
 800335a:	0020      	movs	r0, r4
 800335c:	f7ff ffec 	bl	8003338 <checkerror>
 8003360:	b005      	add	sp, #20
 8003362:	bd30      	pop	{r4, r5, pc}

08003364 <_read>:
 8003364:	b570      	push	{r4, r5, r6, lr}
 8003366:	000e      	movs	r6, r1
 8003368:	0014      	movs	r4, r2
 800336a:	f7ff ffbd 	bl	80032e8 <findslot>
 800336e:	1e05      	subs	r5, r0, #0
 8003370:	d106      	bne.n	8003380 <_read+0x1c>
 8003372:	f000 fbc1 	bl	8003af8 <__errno>
 8003376:	2309      	movs	r3, #9
 8003378:	6003      	str	r3, [r0, #0]
 800337a:	2001      	movs	r0, #1
 800337c:	4240      	negs	r0, r0
 800337e:	bd70      	pop	{r4, r5, r6, pc}
 8003380:	0022      	movs	r2, r4
 8003382:	0031      	movs	r1, r6
 8003384:	6800      	ldr	r0, [r0, #0]
 8003386:	f7ff ffdd 	bl	8003344 <_swiread>
 800338a:	1c43      	adds	r3, r0, #1
 800338c:	d0f5      	beq.n	800337a <_read+0x16>
 800338e:	686b      	ldr	r3, [r5, #4]
 8003390:	1a20      	subs	r0, r4, r0
 8003392:	181b      	adds	r3, r3, r0
 8003394:	606b      	str	r3, [r5, #4]
 8003396:	e7f2      	b.n	800337e <_read+0x1a>

08003398 <_swilseek>:
 8003398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800339a:	000c      	movs	r4, r1
 800339c:	0016      	movs	r6, r2
 800339e:	f7ff ffa3 	bl	80032e8 <findslot>
 80033a2:	1e05      	subs	r5, r0, #0
 80033a4:	d107      	bne.n	80033b6 <_swilseek+0x1e>
 80033a6:	f000 fba7 	bl	8003af8 <__errno>
 80033aa:	2309      	movs	r3, #9
 80033ac:	6003      	str	r3, [r0, #0]
 80033ae:	2401      	movs	r4, #1
 80033b0:	4264      	negs	r4, r4
 80033b2:	0020      	movs	r0, r4
 80033b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80033b6:	2e02      	cmp	r6, #2
 80033b8:	d903      	bls.n	80033c2 <_swilseek+0x2a>
 80033ba:	f000 fb9d 	bl	8003af8 <__errno>
 80033be:	2316      	movs	r3, #22
 80033c0:	e7f4      	b.n	80033ac <_swilseek+0x14>
 80033c2:	2e01      	cmp	r6, #1
 80033c4:	d112      	bne.n	80033ec <_swilseek+0x54>
 80033c6:	6843      	ldr	r3, [r0, #4]
 80033c8:	18e4      	adds	r4, r4, r3
 80033ca:	d4f6      	bmi.n	80033ba <_swilseek+0x22>
 80033cc:	466f      	mov	r7, sp
 80033ce:	682b      	ldr	r3, [r5, #0]
 80033d0:	260a      	movs	r6, #10
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	607c      	str	r4, [r7, #4]
 80033d6:	1c30      	adds	r0, r6, #0
 80033d8:	1c39      	adds	r1, r7, #0
 80033da:	beab      	bkpt	0x00ab
 80033dc:	1c06      	adds	r6, r0, #0
 80033de:	0030      	movs	r0, r6
 80033e0:	f7ff ffaa 	bl	8003338 <checkerror>
 80033e4:	2800      	cmp	r0, #0
 80033e6:	dbe2      	blt.n	80033ae <_swilseek+0x16>
 80033e8:	606c      	str	r4, [r5, #4]
 80033ea:	e7e2      	b.n	80033b2 <_swilseek+0x1a>
 80033ec:	6803      	ldr	r3, [r0, #0]
 80033ee:	2e02      	cmp	r6, #2
 80033f0:	d1ec      	bne.n	80033cc <_swilseek+0x34>
 80033f2:	466f      	mov	r7, sp
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	360a      	adds	r6, #10
 80033f8:	1c30      	adds	r0, r6, #0
 80033fa:	1c39      	adds	r1, r7, #0
 80033fc:	beab      	bkpt	0x00ab
 80033fe:	1c06      	adds	r6, r0, #0
 8003400:	0030      	movs	r0, r6
 8003402:	f7ff ff99 	bl	8003338 <checkerror>
 8003406:	1824      	adds	r4, r4, r0
 8003408:	3001      	adds	r0, #1
 800340a:	d1df      	bne.n	80033cc <_swilseek+0x34>
 800340c:	e7cf      	b.n	80033ae <_swilseek+0x16>

0800340e <_lseek>:
 800340e:	b510      	push	{r4, lr}
 8003410:	f7ff ffc2 	bl	8003398 <_swilseek>
 8003414:	bd10      	pop	{r4, pc}

08003416 <_swiwrite>:
 8003416:	b530      	push	{r4, r5, lr}
 8003418:	b085      	sub	sp, #20
 800341a:	ad01      	add	r5, sp, #4
 800341c:	9001      	str	r0, [sp, #4]
 800341e:	9102      	str	r1, [sp, #8]
 8003420:	9203      	str	r2, [sp, #12]
 8003422:	2405      	movs	r4, #5
 8003424:	1c20      	adds	r0, r4, #0
 8003426:	1c29      	adds	r1, r5, #0
 8003428:	beab      	bkpt	0x00ab
 800342a:	1c04      	adds	r4, r0, #0
 800342c:	0020      	movs	r0, r4
 800342e:	f7ff ff83 	bl	8003338 <checkerror>
 8003432:	b005      	add	sp, #20
 8003434:	bd30      	pop	{r4, r5, pc}

08003436 <_write>:
 8003436:	b570      	push	{r4, r5, r6, lr}
 8003438:	000e      	movs	r6, r1
 800343a:	0015      	movs	r5, r2
 800343c:	f7ff ff54 	bl	80032e8 <findslot>
 8003440:	1e04      	subs	r4, r0, #0
 8003442:	d106      	bne.n	8003452 <_write+0x1c>
 8003444:	f000 fb58 	bl	8003af8 <__errno>
 8003448:	2309      	movs	r3, #9
 800344a:	6003      	str	r3, [r0, #0]
 800344c:	2001      	movs	r0, #1
 800344e:	4240      	negs	r0, r0
 8003450:	bd70      	pop	{r4, r5, r6, pc}
 8003452:	002a      	movs	r2, r5
 8003454:	0031      	movs	r1, r6
 8003456:	6800      	ldr	r0, [r0, #0]
 8003458:	f7ff ffdd 	bl	8003416 <_swiwrite>
 800345c:	1e03      	subs	r3, r0, #0
 800345e:	dbf5      	blt.n	800344c <_write+0x16>
 8003460:	6862      	ldr	r2, [r4, #4]
 8003462:	1a28      	subs	r0, r5, r0
 8003464:	1812      	adds	r2, r2, r0
 8003466:	6062      	str	r2, [r4, #4]
 8003468:	42ab      	cmp	r3, r5
 800346a:	d1f1      	bne.n	8003450 <_write+0x1a>
 800346c:	2000      	movs	r0, #0
 800346e:	f7ff ff55 	bl	800331c <error>
 8003472:	e7ed      	b.n	8003450 <_write+0x1a>

08003474 <_swiclose>:
 8003474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003476:	2402      	movs	r4, #2
 8003478:	9001      	str	r0, [sp, #4]
 800347a:	ad01      	add	r5, sp, #4
 800347c:	1c20      	adds	r0, r4, #0
 800347e:	1c29      	adds	r1, r5, #0
 8003480:	beab      	bkpt	0x00ab
 8003482:	1c04      	adds	r4, r0, #0
 8003484:	0020      	movs	r0, r4
 8003486:	f7ff ff57 	bl	8003338 <checkerror>
 800348a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800348c <_close>:
 800348c:	b570      	push	{r4, r5, r6, lr}
 800348e:	0004      	movs	r4, r0
 8003490:	f7ff ff2a 	bl	80032e8 <findslot>
 8003494:	1e05      	subs	r5, r0, #0
 8003496:	d106      	bne.n	80034a6 <_close+0x1a>
 8003498:	f000 fb2e 	bl	8003af8 <__errno>
 800349c:	2309      	movs	r3, #9
 800349e:	6003      	str	r3, [r0, #0]
 80034a0:	2001      	movs	r0, #1
 80034a2:	4240      	negs	r0, r0
 80034a4:	bd70      	pop	{r4, r5, r6, pc}
 80034a6:	3c01      	subs	r4, #1
 80034a8:	2c01      	cmp	r4, #1
 80034aa:	d809      	bhi.n	80034c0 <_close+0x34>
 80034ac:	4b07      	ldr	r3, [pc, #28]	@ (80034cc <_close+0x40>)
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d104      	bne.n	80034c0 <_close+0x34>
 80034b6:	2301      	movs	r3, #1
 80034b8:	425b      	negs	r3, r3
 80034ba:	2000      	movs	r0, #0
 80034bc:	602b      	str	r3, [r5, #0]
 80034be:	e7f1      	b.n	80034a4 <_close+0x18>
 80034c0:	6828      	ldr	r0, [r5, #0]
 80034c2:	f7ff ffd7 	bl	8003474 <_swiclose>
 80034c6:	2800      	cmp	r0, #0
 80034c8:	d0f5      	beq.n	80034b6 <_close+0x2a>
 80034ca:	e7eb      	b.n	80034a4 <_close+0x18>
 80034cc:	200001e0 	.word	0x200001e0

080034d0 <_swistat>:
 80034d0:	b570      	push	{r4, r5, r6, lr}
 80034d2:	000c      	movs	r4, r1
 80034d4:	f7ff ff08 	bl	80032e8 <findslot>
 80034d8:	1e05      	subs	r5, r0, #0
 80034da:	d106      	bne.n	80034ea <_swistat+0x1a>
 80034dc:	f000 fb0c 	bl	8003af8 <__errno>
 80034e0:	2309      	movs	r3, #9
 80034e2:	6003      	str	r3, [r0, #0]
 80034e4:	2001      	movs	r0, #1
 80034e6:	4240      	negs	r0, r0
 80034e8:	bd70      	pop	{r4, r5, r6, pc}
 80034ea:	2380      	movs	r3, #128	@ 0x80
 80034ec:	6862      	ldr	r2, [r4, #4]
 80034ee:	019b      	lsls	r3, r3, #6
 80034f0:	4313      	orrs	r3, r2
 80034f2:	6063      	str	r3, [r4, #4]
 80034f4:	2380      	movs	r3, #128	@ 0x80
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	260c      	movs	r6, #12
 80034fa:	64a3      	str	r3, [r4, #72]	@ 0x48
 80034fc:	1c30      	adds	r0, r6, #0
 80034fe:	1c29      	adds	r1, r5, #0
 8003500:	beab      	bkpt	0x00ab
 8003502:	1c05      	adds	r5, r0, #0
 8003504:	0028      	movs	r0, r5
 8003506:	f7ff ff17 	bl	8003338 <checkerror>
 800350a:	1c43      	adds	r3, r0, #1
 800350c:	d0ea      	beq.n	80034e4 <_swistat+0x14>
 800350e:	6120      	str	r0, [r4, #16]
 8003510:	2000      	movs	r0, #0
 8003512:	e7e9      	b.n	80034e8 <_swistat+0x18>

08003514 <_fstat>:
 8003514:	b570      	push	{r4, r5, r6, lr}
 8003516:	000c      	movs	r4, r1
 8003518:	0005      	movs	r5, r0
 800351a:	2258      	movs	r2, #88	@ 0x58
 800351c:	2100      	movs	r1, #0
 800351e:	0020      	movs	r0, r4
 8003520:	f000 fa94 	bl	8003a4c <memset>
 8003524:	0028      	movs	r0, r5
 8003526:	0021      	movs	r1, r4
 8003528:	f7ff ffd2 	bl	80034d0 <_swistat>
 800352c:	bd70      	pop	{r4, r5, r6, pc}

0800352e <_stat>:
 800352e:	b570      	push	{r4, r5, r6, lr}
 8003530:	000d      	movs	r5, r1
 8003532:	0004      	movs	r4, r0
 8003534:	2258      	movs	r2, #88	@ 0x58
 8003536:	2100      	movs	r1, #0
 8003538:	0028      	movs	r0, r5
 800353a:	f000 fa87 	bl	8003a4c <memset>
 800353e:	0020      	movs	r0, r4
 8003540:	2100      	movs	r1, #0
 8003542:	f000 f813 	bl	800356c <_swiopen>
 8003546:	0004      	movs	r4, r0
 8003548:	1c43      	adds	r3, r0, #1
 800354a:	d00c      	beq.n	8003566 <_stat+0x38>
 800354c:	2381      	movs	r3, #129	@ 0x81
 800354e:	686a      	ldr	r2, [r5, #4]
 8003550:	021b      	lsls	r3, r3, #8
 8003552:	4313      	orrs	r3, r2
 8003554:	0029      	movs	r1, r5
 8003556:	606b      	str	r3, [r5, #4]
 8003558:	f7ff ffba 	bl	80034d0 <_swistat>
 800355c:	0005      	movs	r5, r0
 800355e:	0020      	movs	r0, r4
 8003560:	f7ff ff94 	bl	800348c <_close>
 8003564:	002c      	movs	r4, r5
 8003566:	0020      	movs	r0, r4
 8003568:	bd70      	pop	{r4, r5, r6, pc}
	...

0800356c <_swiopen>:
 800356c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800356e:	000e      	movs	r6, r1
 8003570:	2500      	movs	r5, #0
 8003572:	4b2a      	ldr	r3, [pc, #168]	@ (800361c <_swiopen+0xb0>)
 8003574:	b09b      	sub	sp, #108	@ 0x6c
 8003576:	9001      	str	r0, [sp, #4]
 8003578:	9302      	str	r3, [sp, #8]
 800357a:	00eb      	lsls	r3, r5, #3
 800357c:	9303      	str	r3, [sp, #12]
 800357e:	9b02      	ldr	r3, [sp, #8]
 8003580:	00ea      	lsls	r2, r5, #3
 8003582:	589b      	ldr	r3, [r3, r2]
 8003584:	3301      	adds	r3, #1
 8003586:	d00b      	beq.n	80035a0 <_swiopen+0x34>
 8003588:	3501      	adds	r5, #1
 800358a:	2d14      	cmp	r5, #20
 800358c:	d1f5      	bne.n	800357a <_swiopen+0xe>
 800358e:	f000 fab3 	bl	8003af8 <__errno>
 8003592:	2318      	movs	r3, #24
 8003594:	2501      	movs	r5, #1
 8003596:	6003      	str	r3, [r0, #0]
 8003598:	426d      	negs	r5, r5
 800359a:	0028      	movs	r0, r5
 800359c:	b01b      	add	sp, #108	@ 0x6c
 800359e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035a0:	23a0      	movs	r3, #160	@ 0xa0
 80035a2:	0032      	movs	r2, r6
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	401a      	ands	r2, r3
 80035a8:	af04      	add	r7, sp, #16
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d109      	bne.n	80035c2 <_swiopen+0x56>
 80035ae:	0039      	movs	r1, r7
 80035b0:	9801      	ldr	r0, [sp, #4]
 80035b2:	f7ff ffbc 	bl	800352e <_stat>
 80035b6:	3001      	adds	r0, #1
 80035b8:	d003      	beq.n	80035c2 <_swiopen+0x56>
 80035ba:	f000 fa9d 	bl	8003af8 <__errno>
 80035be:	2311      	movs	r3, #17
 80035c0:	e7e8      	b.n	8003594 <_swiopen+0x28>
 80035c2:	2302      	movs	r3, #2
 80035c4:	03f4      	lsls	r4, r6, #15
 80035c6:	0fe4      	lsrs	r4, r4, #31
 80035c8:	421e      	tst	r6, r3
 80035ca:	d000      	beq.n	80035ce <_swiopen+0x62>
 80035cc:	431c      	orrs	r4, r3
 80035ce:	4b14      	ldr	r3, [pc, #80]	@ (8003620 <_swiopen+0xb4>)
 80035d0:	421e      	tst	r6, r3
 80035d2:	d001      	beq.n	80035d8 <_swiopen+0x6c>
 80035d4:	2304      	movs	r3, #4
 80035d6:	431c      	orrs	r4, r3
 80035d8:	2308      	movs	r3, #8
 80035da:	421e      	tst	r6, r3
 80035dc:	d002      	beq.n	80035e4 <_swiopen+0x78>
 80035de:	2204      	movs	r2, #4
 80035e0:	4394      	bics	r4, r2
 80035e2:	431c      	orrs	r4, r3
 80035e4:	9b01      	ldr	r3, [sp, #4]
 80035e6:	0018      	movs	r0, r3
 80035e8:	9304      	str	r3, [sp, #16]
 80035ea:	f7fc fd89 	bl	8000100 <strlen>
 80035ee:	607c      	str	r4, [r7, #4]
 80035f0:	60b8      	str	r0, [r7, #8]
 80035f2:	2401      	movs	r4, #1
 80035f4:	1c20      	adds	r0, r4, #0
 80035f6:	1c39      	adds	r1, r7, #0
 80035f8:	beab      	bkpt	0x00ab
 80035fa:	1c04      	adds	r4, r0, #0
 80035fc:	2c00      	cmp	r4, #0
 80035fe:	db07      	blt.n	8003610 <_swiopen+0xa4>
 8003600:	00ea      	lsls	r2, r5, #3
 8003602:	9b02      	ldr	r3, [sp, #8]
 8003604:	4694      	mov	ip, r2
 8003606:	509c      	str	r4, [r3, r2]
 8003608:	2200      	movs	r2, #0
 800360a:	4463      	add	r3, ip
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	e7c4      	b.n	800359a <_swiopen+0x2e>
 8003610:	0020      	movs	r0, r4
 8003612:	f7ff fe83 	bl	800331c <error>
 8003616:	0005      	movs	r5, r0
 8003618:	e7bf      	b.n	800359a <_swiopen+0x2e>
 800361a:	46c0      	nop			@ (mov r8, r8)
 800361c:	200001e0 	.word	0x200001e0
 8003620:	00000601 	.word	0x00000601

08003624 <_get_semihosting_exts>:
 8003624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003626:	b085      	sub	sp, #20
 8003628:	9000      	str	r0, [sp, #0]
 800362a:	9101      	str	r1, [sp, #4]
 800362c:	4826      	ldr	r0, [pc, #152]	@ (80036c8 <_get_semihosting_exts+0xa4>)
 800362e:	2100      	movs	r1, #0
 8003630:	0015      	movs	r5, r2
 8003632:	f7ff ff9b 	bl	800356c <_swiopen>
 8003636:	0004      	movs	r4, r0
 8003638:	002a      	movs	r2, r5
 800363a:	2100      	movs	r1, #0
 800363c:	9800      	ldr	r0, [sp, #0]
 800363e:	f000 fa05 	bl	8003a4c <memset>
 8003642:	1c63      	adds	r3, r4, #1
 8003644:	d013      	beq.n	800366e <_get_semihosting_exts+0x4a>
 8003646:	0020      	movs	r0, r4
 8003648:	f7ff fe4e 	bl	80032e8 <findslot>
 800364c:	260c      	movs	r6, #12
 800364e:	0007      	movs	r7, r0
 8003650:	1c30      	adds	r0, r6, #0
 8003652:	1c39      	adds	r1, r7, #0
 8003654:	beab      	bkpt	0x00ab
 8003656:	1c06      	adds	r6, r0, #0
 8003658:	0030      	movs	r0, r6
 800365a:	f7ff fe6d 	bl	8003338 <checkerror>
 800365e:	2803      	cmp	r0, #3
 8003660:	dd02      	ble.n	8003668 <_get_semihosting_exts+0x44>
 8003662:	3803      	subs	r0, #3
 8003664:	42a8      	cmp	r0, r5
 8003666:	dc06      	bgt.n	8003676 <_get_semihosting_exts+0x52>
 8003668:	0020      	movs	r0, r4
 800366a:	f7ff ff0f 	bl	800348c <_close>
 800366e:	2001      	movs	r0, #1
 8003670:	4240      	negs	r0, r0
 8003672:	b005      	add	sp, #20
 8003674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003676:	ae03      	add	r6, sp, #12
 8003678:	2204      	movs	r2, #4
 800367a:	0031      	movs	r1, r6
 800367c:	0020      	movs	r0, r4
 800367e:	f7ff fe71 	bl	8003364 <_read>
 8003682:	2803      	cmp	r0, #3
 8003684:	ddf0      	ble.n	8003668 <_get_semihosting_exts+0x44>
 8003686:	7833      	ldrb	r3, [r6, #0]
 8003688:	2b53      	cmp	r3, #83	@ 0x53
 800368a:	d1ed      	bne.n	8003668 <_get_semihosting_exts+0x44>
 800368c:	7873      	ldrb	r3, [r6, #1]
 800368e:	2b48      	cmp	r3, #72	@ 0x48
 8003690:	d1ea      	bne.n	8003668 <_get_semihosting_exts+0x44>
 8003692:	78b3      	ldrb	r3, [r6, #2]
 8003694:	2b46      	cmp	r3, #70	@ 0x46
 8003696:	d1e7      	bne.n	8003668 <_get_semihosting_exts+0x44>
 8003698:	78f3      	ldrb	r3, [r6, #3]
 800369a:	2b42      	cmp	r3, #66	@ 0x42
 800369c:	d1e4      	bne.n	8003668 <_get_semihosting_exts+0x44>
 800369e:	2201      	movs	r2, #1
 80036a0:	0020      	movs	r0, r4
 80036a2:	9901      	ldr	r1, [sp, #4]
 80036a4:	f7ff fe78 	bl	8003398 <_swilseek>
 80036a8:	2800      	cmp	r0, #0
 80036aa:	dbdd      	blt.n	8003668 <_get_semihosting_exts+0x44>
 80036ac:	002a      	movs	r2, r5
 80036ae:	9900      	ldr	r1, [sp, #0]
 80036b0:	0020      	movs	r0, r4
 80036b2:	f7ff fe57 	bl	8003364 <_read>
 80036b6:	0005      	movs	r5, r0
 80036b8:	0020      	movs	r0, r4
 80036ba:	f7ff fee7 	bl	800348c <_close>
 80036be:	0028      	movs	r0, r5
 80036c0:	f7ff fe3a 	bl	8003338 <checkerror>
 80036c4:	e7d5      	b.n	8003672 <_get_semihosting_exts+0x4e>
 80036c6:	46c0      	nop			@ (mov r8, r8)
 80036c8:	08004770 	.word	0x08004770

080036cc <initialise_semihosting_exts>:
 80036cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036ce:	2401      	movs	r4, #1
 80036d0:	2100      	movs	r1, #0
 80036d2:	4e09      	ldr	r6, [pc, #36]	@ (80036f8 <initialise_semihosting_exts+0x2c>)
 80036d4:	4d09      	ldr	r5, [pc, #36]	@ (80036fc <initialise_semihosting_exts+0x30>)
 80036d6:	af01      	add	r7, sp, #4
 80036d8:	0022      	movs	r2, r4
 80036da:	0038      	movs	r0, r7
 80036dc:	6031      	str	r1, [r6, #0]
 80036de:	602c      	str	r4, [r5, #0]
 80036e0:	f7ff ffa0 	bl	8003624 <_get_semihosting_exts>
 80036e4:	2800      	cmp	r0, #0
 80036e6:	dd05      	ble.n	80036f4 <initialise_semihosting_exts+0x28>
 80036e8:	2202      	movs	r2, #2
 80036ea:	783b      	ldrb	r3, [r7, #0]
 80036ec:	401c      	ands	r4, r3
 80036ee:	4013      	ands	r3, r2
 80036f0:	6034      	str	r4, [r6, #0]
 80036f2:	602b      	str	r3, [r5, #0]
 80036f4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	20000010 	.word	0x20000010
 80036fc:	2000000c 	.word	0x2000000c

08003700 <_has_ext_stdout_stderr>:
 8003700:	b510      	push	{r4, lr}
 8003702:	4c04      	ldr	r4, [pc, #16]	@ (8003714 <_has_ext_stdout_stderr+0x14>)
 8003704:	6823      	ldr	r3, [r4, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	da01      	bge.n	800370e <_has_ext_stdout_stderr+0xe>
 800370a:	f7ff ffdf 	bl	80036cc <initialise_semihosting_exts>
 800370e:	6820      	ldr	r0, [r4, #0]
 8003710:	bd10      	pop	{r4, pc}
 8003712:	46c0      	nop			@ (mov r8, r8)
 8003714:	2000000c 	.word	0x2000000c

08003718 <initialise_monitor_handles>:
 8003718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800371a:	4b28      	ldr	r3, [pc, #160]	@ (80037bc <initialise_monitor_handles+0xa4>)
 800371c:	b087      	sub	sp, #28
 800371e:	9303      	str	r3, [sp, #12]
 8003720:	2500      	movs	r5, #0
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	2303      	movs	r3, #3
 8003726:	ac03      	add	r4, sp, #12
 8003728:	60a3      	str	r3, [r4, #8]
 800372a:	2601      	movs	r6, #1
 800372c:	6065      	str	r5, [r4, #4]
 800372e:	1c30      	adds	r0, r6, #0
 8003730:	1c21      	adds	r1, r4, #0
 8003732:	beab      	bkpt	0x00ab
 8003734:	1c06      	adds	r6, r0, #0
 8003736:	2101      	movs	r1, #1
 8003738:	4b21      	ldr	r3, [pc, #132]	@ (80037c0 <initialise_monitor_handles+0xa8>)
 800373a:	4249      	negs	r1, r1
 800373c:	9301      	str	r3, [sp, #4]
 800373e:	601e      	str	r6, [r3, #0]
 8003740:	002b      	movs	r3, r5
 8003742:	4d20      	ldr	r5, [pc, #128]	@ (80037c4 <initialise_monitor_handles+0xac>)
 8003744:	00da      	lsls	r2, r3, #3
 8003746:	3301      	adds	r3, #1
 8003748:	50a9      	str	r1, [r5, r2]
 800374a:	2b14      	cmp	r3, #20
 800374c:	d1fa      	bne.n	8003744 <initialise_monitor_handles+0x2c>
 800374e:	f7ff ffd7 	bl	8003700 <_has_ext_stdout_stderr>
 8003752:	2800      	cmp	r0, #0
 8003754:	d018      	beq.n	8003788 <initialise_monitor_handles+0x70>
 8003756:	9b00      	ldr	r3, [sp, #0]
 8003758:	2601      	movs	r6, #1
 800375a:	9303      	str	r3, [sp, #12]
 800375c:	2303      	movs	r3, #3
 800375e:	60a3      	str	r3, [r4, #8]
 8003760:	3301      	adds	r3, #1
 8003762:	6063      	str	r3, [r4, #4]
 8003764:	1c30      	adds	r0, r6, #0
 8003766:	1c21      	adds	r1, r4, #0
 8003768:	beab      	bkpt	0x00ab
 800376a:	1c07      	adds	r7, r0, #0
 800376c:	4b16      	ldr	r3, [pc, #88]	@ (80037c8 <initialise_monitor_handles+0xb0>)
 800376e:	9a00      	ldr	r2, [sp, #0]
 8003770:	601f      	str	r7, [r3, #0]
 8003772:	2303      	movs	r3, #3
 8003774:	9203      	str	r2, [sp, #12]
 8003776:	60a3      	str	r3, [r4, #8]
 8003778:	3305      	adds	r3, #5
 800377a:	6063      	str	r3, [r4, #4]
 800377c:	1c30      	adds	r0, r6, #0
 800377e:	1c21      	adds	r1, r4, #0
 8003780:	beab      	bkpt	0x00ab
 8003782:	1c06      	adds	r6, r0, #0
 8003784:	4b11      	ldr	r3, [pc, #68]	@ (80037cc <initialise_monitor_handles+0xb4>)
 8003786:	601e      	str	r6, [r3, #0]
 8003788:	4e10      	ldr	r6, [pc, #64]	@ (80037cc <initialise_monitor_handles+0xb4>)
 800378a:	6833      	ldr	r3, [r6, #0]
 800378c:	3301      	adds	r3, #1
 800378e:	d102      	bne.n	8003796 <initialise_monitor_handles+0x7e>
 8003790:	4b0d      	ldr	r3, [pc, #52]	@ (80037c8 <initialise_monitor_handles+0xb0>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6033      	str	r3, [r6, #0]
 8003796:	2400      	movs	r4, #0
 8003798:	9b01      	ldr	r3, [sp, #4]
 800379a:	606c      	str	r4, [r5, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	602b      	str	r3, [r5, #0]
 80037a0:	f7ff ffae 	bl	8003700 <_has_ext_stdout_stderr>
 80037a4:	42a0      	cmp	r0, r4
 80037a6:	d006      	beq.n	80037b6 <initialise_monitor_handles+0x9e>
 80037a8:	4b07      	ldr	r3, [pc, #28]	@ (80037c8 <initialise_monitor_handles+0xb0>)
 80037aa:	60ec      	str	r4, [r5, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	616c      	str	r4, [r5, #20]
 80037b0:	60ab      	str	r3, [r5, #8]
 80037b2:	6833      	ldr	r3, [r6, #0]
 80037b4:	612b      	str	r3, [r5, #16]
 80037b6:	b007      	add	sp, #28
 80037b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037ba:	46c0      	nop			@ (mov r8, r8)
 80037bc:	08004786 	.word	0x08004786
 80037c0:	200001dc 	.word	0x200001dc
 80037c4:	200001e0 	.word	0x200001e0
 80037c8:	200001d8 	.word	0x200001d8
 80037cc:	200001d4 	.word	0x200001d4

080037d0 <_isatty>:
 80037d0:	b570      	push	{r4, r5, r6, lr}
 80037d2:	f7ff fd89 	bl	80032e8 <findslot>
 80037d6:	2409      	movs	r4, #9
 80037d8:	1e05      	subs	r5, r0, #0
 80037da:	d104      	bne.n	80037e6 <_isatty+0x16>
 80037dc:	f000 f98c 	bl	8003af8 <__errno>
 80037e0:	6004      	str	r4, [r0, #0]
 80037e2:	2000      	movs	r0, #0
 80037e4:	bd70      	pop	{r4, r5, r6, pc}
 80037e6:	1c20      	adds	r0, r4, #0
 80037e8:	1c29      	adds	r1, r5, #0
 80037ea:	beab      	bkpt	0x00ab
 80037ec:	1c04      	adds	r4, r0, #0
 80037ee:	0020      	movs	r0, r4
 80037f0:	2c01      	cmp	r4, #1
 80037f2:	d0f7      	beq.n	80037e4 <_isatty+0x14>
 80037f4:	f000 f980 	bl	8003af8 <__errno>
 80037f8:	2513      	movs	r5, #19
 80037fa:	0004      	movs	r4, r0
 80037fc:	2600      	movs	r6, #0
 80037fe:	1c28      	adds	r0, r5, #0
 8003800:	1c31      	adds	r1, r6, #0
 8003802:	beab      	bkpt	0x00ab
 8003804:	1c05      	adds	r5, r0, #0
 8003806:	6025      	str	r5, [r4, #0]
 8003808:	e7eb      	b.n	80037e2 <_isatty+0x12>
	...

0800380c <std>:
 800380c:	2300      	movs	r3, #0
 800380e:	b510      	push	{r4, lr}
 8003810:	0004      	movs	r4, r0
 8003812:	6003      	str	r3, [r0, #0]
 8003814:	6043      	str	r3, [r0, #4]
 8003816:	6083      	str	r3, [r0, #8]
 8003818:	8181      	strh	r1, [r0, #12]
 800381a:	6643      	str	r3, [r0, #100]	@ 0x64
 800381c:	81c2      	strh	r2, [r0, #14]
 800381e:	6103      	str	r3, [r0, #16]
 8003820:	6143      	str	r3, [r0, #20]
 8003822:	6183      	str	r3, [r0, #24]
 8003824:	0019      	movs	r1, r3
 8003826:	2208      	movs	r2, #8
 8003828:	305c      	adds	r0, #92	@ 0x5c
 800382a:	f000 f90f 	bl	8003a4c <memset>
 800382e:	4b0b      	ldr	r3, [pc, #44]	@ (800385c <std+0x50>)
 8003830:	6224      	str	r4, [r4, #32]
 8003832:	6263      	str	r3, [r4, #36]	@ 0x24
 8003834:	4b0a      	ldr	r3, [pc, #40]	@ (8003860 <std+0x54>)
 8003836:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003838:	4b0a      	ldr	r3, [pc, #40]	@ (8003864 <std+0x58>)
 800383a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800383c:	4b0a      	ldr	r3, [pc, #40]	@ (8003868 <std+0x5c>)
 800383e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003840:	4b0a      	ldr	r3, [pc, #40]	@ (800386c <std+0x60>)
 8003842:	429c      	cmp	r4, r3
 8003844:	d005      	beq.n	8003852 <std+0x46>
 8003846:	4b0a      	ldr	r3, [pc, #40]	@ (8003870 <std+0x64>)
 8003848:	429c      	cmp	r4, r3
 800384a:	d002      	beq.n	8003852 <std+0x46>
 800384c:	4b09      	ldr	r3, [pc, #36]	@ (8003874 <std+0x68>)
 800384e:	429c      	cmp	r4, r3
 8003850:	d103      	bne.n	800385a <std+0x4e>
 8003852:	0020      	movs	r0, r4
 8003854:	3058      	adds	r0, #88	@ 0x58
 8003856:	f000 f979 	bl	8003b4c <__retarget_lock_init_recursive>
 800385a:	bd10      	pop	{r4, pc}
 800385c:	080039b5 	.word	0x080039b5
 8003860:	080039dd 	.word	0x080039dd
 8003864:	08003a15 	.word	0x08003a15
 8003868:	08003a41 	.word	0x08003a41
 800386c:	20000280 	.word	0x20000280
 8003870:	200002e8 	.word	0x200002e8
 8003874:	20000350 	.word	0x20000350

08003878 <stdio_exit_handler>:
 8003878:	b510      	push	{r4, lr}
 800387a:	4a03      	ldr	r2, [pc, #12]	@ (8003888 <stdio_exit_handler+0x10>)
 800387c:	4903      	ldr	r1, [pc, #12]	@ (800388c <stdio_exit_handler+0x14>)
 800387e:	4804      	ldr	r0, [pc, #16]	@ (8003890 <stdio_exit_handler+0x18>)
 8003880:	f000 f86c 	bl	800395c <_fwalk_sglue>
 8003884:	bd10      	pop	{r4, pc}
 8003886:	46c0      	nop			@ (mov r8, r8)
 8003888:	20000014 	.word	0x20000014
 800388c:	080043dd 	.word	0x080043dd
 8003890:	20000024 	.word	0x20000024

08003894 <cleanup_stdio>:
 8003894:	6841      	ldr	r1, [r0, #4]
 8003896:	4b0b      	ldr	r3, [pc, #44]	@ (80038c4 <cleanup_stdio+0x30>)
 8003898:	b510      	push	{r4, lr}
 800389a:	0004      	movs	r4, r0
 800389c:	4299      	cmp	r1, r3
 800389e:	d001      	beq.n	80038a4 <cleanup_stdio+0x10>
 80038a0:	f000 fd9c 	bl	80043dc <_fflush_r>
 80038a4:	68a1      	ldr	r1, [r4, #8]
 80038a6:	4b08      	ldr	r3, [pc, #32]	@ (80038c8 <cleanup_stdio+0x34>)
 80038a8:	4299      	cmp	r1, r3
 80038aa:	d002      	beq.n	80038b2 <cleanup_stdio+0x1e>
 80038ac:	0020      	movs	r0, r4
 80038ae:	f000 fd95 	bl	80043dc <_fflush_r>
 80038b2:	68e1      	ldr	r1, [r4, #12]
 80038b4:	4b05      	ldr	r3, [pc, #20]	@ (80038cc <cleanup_stdio+0x38>)
 80038b6:	4299      	cmp	r1, r3
 80038b8:	d002      	beq.n	80038c0 <cleanup_stdio+0x2c>
 80038ba:	0020      	movs	r0, r4
 80038bc:	f000 fd8e 	bl	80043dc <_fflush_r>
 80038c0:	bd10      	pop	{r4, pc}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	20000280 	.word	0x20000280
 80038c8:	200002e8 	.word	0x200002e8
 80038cc:	20000350 	.word	0x20000350

080038d0 <global_stdio_init.part.0>:
 80038d0:	b510      	push	{r4, lr}
 80038d2:	4b09      	ldr	r3, [pc, #36]	@ (80038f8 <global_stdio_init.part.0+0x28>)
 80038d4:	4a09      	ldr	r2, [pc, #36]	@ (80038fc <global_stdio_init.part.0+0x2c>)
 80038d6:	2104      	movs	r1, #4
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	4809      	ldr	r0, [pc, #36]	@ (8003900 <global_stdio_init.part.0+0x30>)
 80038dc:	2200      	movs	r2, #0
 80038de:	f7ff ff95 	bl	800380c <std>
 80038e2:	2201      	movs	r2, #1
 80038e4:	2109      	movs	r1, #9
 80038e6:	4807      	ldr	r0, [pc, #28]	@ (8003904 <global_stdio_init.part.0+0x34>)
 80038e8:	f7ff ff90 	bl	800380c <std>
 80038ec:	2202      	movs	r2, #2
 80038ee:	2112      	movs	r1, #18
 80038f0:	4805      	ldr	r0, [pc, #20]	@ (8003908 <global_stdio_init.part.0+0x38>)
 80038f2:	f7ff ff8b 	bl	800380c <std>
 80038f6:	bd10      	pop	{r4, pc}
 80038f8:	200003b8 	.word	0x200003b8
 80038fc:	08003879 	.word	0x08003879
 8003900:	20000280 	.word	0x20000280
 8003904:	200002e8 	.word	0x200002e8
 8003908:	20000350 	.word	0x20000350

0800390c <__sfp_lock_acquire>:
 800390c:	b510      	push	{r4, lr}
 800390e:	4802      	ldr	r0, [pc, #8]	@ (8003918 <__sfp_lock_acquire+0xc>)
 8003910:	f000 f91d 	bl	8003b4e <__retarget_lock_acquire_recursive>
 8003914:	bd10      	pop	{r4, pc}
 8003916:	46c0      	nop			@ (mov r8, r8)
 8003918:	200003c1 	.word	0x200003c1

0800391c <__sfp_lock_release>:
 800391c:	b510      	push	{r4, lr}
 800391e:	4802      	ldr	r0, [pc, #8]	@ (8003928 <__sfp_lock_release+0xc>)
 8003920:	f000 f916 	bl	8003b50 <__retarget_lock_release_recursive>
 8003924:	bd10      	pop	{r4, pc}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	200003c1 	.word	0x200003c1

0800392c <__sinit>:
 800392c:	b510      	push	{r4, lr}
 800392e:	0004      	movs	r4, r0
 8003930:	f7ff ffec 	bl	800390c <__sfp_lock_acquire>
 8003934:	6a23      	ldr	r3, [r4, #32]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <__sinit+0x14>
 800393a:	f7ff ffef 	bl	800391c <__sfp_lock_release>
 800393e:	bd10      	pop	{r4, pc}
 8003940:	4b04      	ldr	r3, [pc, #16]	@ (8003954 <__sinit+0x28>)
 8003942:	6223      	str	r3, [r4, #32]
 8003944:	4b04      	ldr	r3, [pc, #16]	@ (8003958 <__sinit+0x2c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f6      	bne.n	800393a <__sinit+0xe>
 800394c:	f7ff ffc0 	bl	80038d0 <global_stdio_init.part.0>
 8003950:	e7f3      	b.n	800393a <__sinit+0xe>
 8003952:	46c0      	nop			@ (mov r8, r8)
 8003954:	08003895 	.word	0x08003895
 8003958:	200003b8 	.word	0x200003b8

0800395c <_fwalk_sglue>:
 800395c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800395e:	0014      	movs	r4, r2
 8003960:	2600      	movs	r6, #0
 8003962:	9000      	str	r0, [sp, #0]
 8003964:	9101      	str	r1, [sp, #4]
 8003966:	68a5      	ldr	r5, [r4, #8]
 8003968:	6867      	ldr	r7, [r4, #4]
 800396a:	3f01      	subs	r7, #1
 800396c:	d504      	bpl.n	8003978 <_fwalk_sglue+0x1c>
 800396e:	6824      	ldr	r4, [r4, #0]
 8003970:	2c00      	cmp	r4, #0
 8003972:	d1f8      	bne.n	8003966 <_fwalk_sglue+0xa>
 8003974:	0030      	movs	r0, r6
 8003976:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003978:	89ab      	ldrh	r3, [r5, #12]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d908      	bls.n	8003990 <_fwalk_sglue+0x34>
 800397e:	220e      	movs	r2, #14
 8003980:	5eab      	ldrsh	r3, [r5, r2]
 8003982:	3301      	adds	r3, #1
 8003984:	d004      	beq.n	8003990 <_fwalk_sglue+0x34>
 8003986:	0029      	movs	r1, r5
 8003988:	9800      	ldr	r0, [sp, #0]
 800398a:	9b01      	ldr	r3, [sp, #4]
 800398c:	4798      	blx	r3
 800398e:	4306      	orrs	r6, r0
 8003990:	3568      	adds	r5, #104	@ 0x68
 8003992:	e7ea      	b.n	800396a <_fwalk_sglue+0xe>

08003994 <iprintf>:
 8003994:	b40f      	push	{r0, r1, r2, r3}
 8003996:	b507      	push	{r0, r1, r2, lr}
 8003998:	4905      	ldr	r1, [pc, #20]	@ (80039b0 <iprintf+0x1c>)
 800399a:	ab04      	add	r3, sp, #16
 800399c:	6808      	ldr	r0, [r1, #0]
 800399e:	cb04      	ldmia	r3!, {r2}
 80039a0:	6881      	ldr	r1, [r0, #8]
 80039a2:	9301      	str	r3, [sp, #4]
 80039a4:	f000 f9fa 	bl	8003d9c <_vfiprintf_r>
 80039a8:	b003      	add	sp, #12
 80039aa:	bc08      	pop	{r3}
 80039ac:	b004      	add	sp, #16
 80039ae:	4718      	bx	r3
 80039b0:	20000020 	.word	0x20000020

080039b4 <__sread>:
 80039b4:	b570      	push	{r4, r5, r6, lr}
 80039b6:	000c      	movs	r4, r1
 80039b8:	250e      	movs	r5, #14
 80039ba:	5f49      	ldrsh	r1, [r1, r5]
 80039bc:	f000 f874 	bl	8003aa8 <_read_r>
 80039c0:	2800      	cmp	r0, #0
 80039c2:	db03      	blt.n	80039cc <__sread+0x18>
 80039c4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80039c6:	181b      	adds	r3, r3, r0
 80039c8:	6563      	str	r3, [r4, #84]	@ 0x54
 80039ca:	bd70      	pop	{r4, r5, r6, pc}
 80039cc:	89a3      	ldrh	r3, [r4, #12]
 80039ce:	4a02      	ldr	r2, [pc, #8]	@ (80039d8 <__sread+0x24>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	81a3      	strh	r3, [r4, #12]
 80039d4:	e7f9      	b.n	80039ca <__sread+0x16>
 80039d6:	46c0      	nop			@ (mov r8, r8)
 80039d8:	ffffefff 	.word	0xffffefff

080039dc <__swrite>:
 80039dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039de:	001f      	movs	r7, r3
 80039e0:	898b      	ldrh	r3, [r1, #12]
 80039e2:	0005      	movs	r5, r0
 80039e4:	000c      	movs	r4, r1
 80039e6:	0016      	movs	r6, r2
 80039e8:	05db      	lsls	r3, r3, #23
 80039ea:	d505      	bpl.n	80039f8 <__swrite+0x1c>
 80039ec:	230e      	movs	r3, #14
 80039ee:	5ec9      	ldrsh	r1, [r1, r3]
 80039f0:	2200      	movs	r2, #0
 80039f2:	2302      	movs	r3, #2
 80039f4:	f000 f844 	bl	8003a80 <_lseek_r>
 80039f8:	89a3      	ldrh	r3, [r4, #12]
 80039fa:	4a05      	ldr	r2, [pc, #20]	@ (8003a10 <__swrite+0x34>)
 80039fc:	0028      	movs	r0, r5
 80039fe:	4013      	ands	r3, r2
 8003a00:	81a3      	strh	r3, [r4, #12]
 8003a02:	0032      	movs	r2, r6
 8003a04:	230e      	movs	r3, #14
 8003a06:	5ee1      	ldrsh	r1, [r4, r3]
 8003a08:	003b      	movs	r3, r7
 8003a0a:	f000 f861 	bl	8003ad0 <_write_r>
 8003a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a10:	ffffefff 	.word	0xffffefff

08003a14 <__sseek>:
 8003a14:	b570      	push	{r4, r5, r6, lr}
 8003a16:	000c      	movs	r4, r1
 8003a18:	250e      	movs	r5, #14
 8003a1a:	5f49      	ldrsh	r1, [r1, r5]
 8003a1c:	f000 f830 	bl	8003a80 <_lseek_r>
 8003a20:	89a3      	ldrh	r3, [r4, #12]
 8003a22:	1c42      	adds	r2, r0, #1
 8003a24:	d103      	bne.n	8003a2e <__sseek+0x1a>
 8003a26:	4a05      	ldr	r2, [pc, #20]	@ (8003a3c <__sseek+0x28>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	81a3      	strh	r3, [r4, #12]
 8003a2c:	bd70      	pop	{r4, r5, r6, pc}
 8003a2e:	2280      	movs	r2, #128	@ 0x80
 8003a30:	0152      	lsls	r2, r2, #5
 8003a32:	4313      	orrs	r3, r2
 8003a34:	81a3      	strh	r3, [r4, #12]
 8003a36:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a38:	e7f8      	b.n	8003a2c <__sseek+0x18>
 8003a3a:	46c0      	nop			@ (mov r8, r8)
 8003a3c:	ffffefff 	.word	0xffffefff

08003a40 <__sclose>:
 8003a40:	b510      	push	{r4, lr}
 8003a42:	230e      	movs	r3, #14
 8003a44:	5ec9      	ldrsh	r1, [r1, r3]
 8003a46:	f000 f809 	bl	8003a5c <_close_r>
 8003a4a:	bd10      	pop	{r4, pc}

08003a4c <memset>:
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	1882      	adds	r2, r0, r2
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d100      	bne.n	8003a56 <memset+0xa>
 8003a54:	4770      	bx	lr
 8003a56:	7019      	strb	r1, [r3, #0]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	e7f9      	b.n	8003a50 <memset+0x4>

08003a5c <_close_r>:
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	b570      	push	{r4, r5, r6, lr}
 8003a60:	4d06      	ldr	r5, [pc, #24]	@ (8003a7c <_close_r+0x20>)
 8003a62:	0004      	movs	r4, r0
 8003a64:	0008      	movs	r0, r1
 8003a66:	602b      	str	r3, [r5, #0]
 8003a68:	f7ff fd10 	bl	800348c <_close>
 8003a6c:	1c43      	adds	r3, r0, #1
 8003a6e:	d103      	bne.n	8003a78 <_close_r+0x1c>
 8003a70:	682b      	ldr	r3, [r5, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d000      	beq.n	8003a78 <_close_r+0x1c>
 8003a76:	6023      	str	r3, [r4, #0]
 8003a78:	bd70      	pop	{r4, r5, r6, pc}
 8003a7a:	46c0      	nop			@ (mov r8, r8)
 8003a7c:	200003bc 	.word	0x200003bc

08003a80 <_lseek_r>:
 8003a80:	b570      	push	{r4, r5, r6, lr}
 8003a82:	0004      	movs	r4, r0
 8003a84:	0008      	movs	r0, r1
 8003a86:	0011      	movs	r1, r2
 8003a88:	001a      	movs	r2, r3
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	4d05      	ldr	r5, [pc, #20]	@ (8003aa4 <_lseek_r+0x24>)
 8003a8e:	602b      	str	r3, [r5, #0]
 8003a90:	f7ff fcbd 	bl	800340e <_lseek>
 8003a94:	1c43      	adds	r3, r0, #1
 8003a96:	d103      	bne.n	8003aa0 <_lseek_r+0x20>
 8003a98:	682b      	ldr	r3, [r5, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d000      	beq.n	8003aa0 <_lseek_r+0x20>
 8003a9e:	6023      	str	r3, [r4, #0]
 8003aa0:	bd70      	pop	{r4, r5, r6, pc}
 8003aa2:	46c0      	nop			@ (mov r8, r8)
 8003aa4:	200003bc 	.word	0x200003bc

08003aa8 <_read_r>:
 8003aa8:	b570      	push	{r4, r5, r6, lr}
 8003aaa:	0004      	movs	r4, r0
 8003aac:	0008      	movs	r0, r1
 8003aae:	0011      	movs	r1, r2
 8003ab0:	001a      	movs	r2, r3
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	4d05      	ldr	r5, [pc, #20]	@ (8003acc <_read_r+0x24>)
 8003ab6:	602b      	str	r3, [r5, #0]
 8003ab8:	f7ff fc54 	bl	8003364 <_read>
 8003abc:	1c43      	adds	r3, r0, #1
 8003abe:	d103      	bne.n	8003ac8 <_read_r+0x20>
 8003ac0:	682b      	ldr	r3, [r5, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d000      	beq.n	8003ac8 <_read_r+0x20>
 8003ac6:	6023      	str	r3, [r4, #0]
 8003ac8:	bd70      	pop	{r4, r5, r6, pc}
 8003aca:	46c0      	nop			@ (mov r8, r8)
 8003acc:	200003bc 	.word	0x200003bc

08003ad0 <_write_r>:
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	0004      	movs	r4, r0
 8003ad4:	0008      	movs	r0, r1
 8003ad6:	0011      	movs	r1, r2
 8003ad8:	001a      	movs	r2, r3
 8003ada:	2300      	movs	r3, #0
 8003adc:	4d05      	ldr	r5, [pc, #20]	@ (8003af4 <_write_r+0x24>)
 8003ade:	602b      	str	r3, [r5, #0]
 8003ae0:	f7ff fca9 	bl	8003436 <_write>
 8003ae4:	1c43      	adds	r3, r0, #1
 8003ae6:	d103      	bne.n	8003af0 <_write_r+0x20>
 8003ae8:	682b      	ldr	r3, [r5, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d000      	beq.n	8003af0 <_write_r+0x20>
 8003aee:	6023      	str	r3, [r4, #0]
 8003af0:	bd70      	pop	{r4, r5, r6, pc}
 8003af2:	46c0      	nop			@ (mov r8, r8)
 8003af4:	200003bc 	.word	0x200003bc

08003af8 <__errno>:
 8003af8:	4b01      	ldr	r3, [pc, #4]	@ (8003b00 <__errno+0x8>)
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	4770      	bx	lr
 8003afe:	46c0      	nop			@ (mov r8, r8)
 8003b00:	20000020 	.word	0x20000020

08003b04 <__libc_init_array>:
 8003b04:	b570      	push	{r4, r5, r6, lr}
 8003b06:	2600      	movs	r6, #0
 8003b08:	4c0c      	ldr	r4, [pc, #48]	@ (8003b3c <__libc_init_array+0x38>)
 8003b0a:	4d0d      	ldr	r5, [pc, #52]	@ (8003b40 <__libc_init_array+0x3c>)
 8003b0c:	1b64      	subs	r4, r4, r5
 8003b0e:	10a4      	asrs	r4, r4, #2
 8003b10:	42a6      	cmp	r6, r4
 8003b12:	d109      	bne.n	8003b28 <__libc_init_array+0x24>
 8003b14:	2600      	movs	r6, #0
 8003b16:	f000 fddb 	bl	80046d0 <_init>
 8003b1a:	4c0a      	ldr	r4, [pc, #40]	@ (8003b44 <__libc_init_array+0x40>)
 8003b1c:	4d0a      	ldr	r5, [pc, #40]	@ (8003b48 <__libc_init_array+0x44>)
 8003b1e:	1b64      	subs	r4, r4, r5
 8003b20:	10a4      	asrs	r4, r4, #2
 8003b22:	42a6      	cmp	r6, r4
 8003b24:	d105      	bne.n	8003b32 <__libc_init_array+0x2e>
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
 8003b28:	00b3      	lsls	r3, r6, #2
 8003b2a:	58eb      	ldr	r3, [r5, r3]
 8003b2c:	4798      	blx	r3
 8003b2e:	3601      	adds	r6, #1
 8003b30:	e7ee      	b.n	8003b10 <__libc_init_array+0xc>
 8003b32:	00b3      	lsls	r3, r6, #2
 8003b34:	58eb      	ldr	r3, [r5, r3]
 8003b36:	4798      	blx	r3
 8003b38:	3601      	adds	r6, #1
 8003b3a:	e7f2      	b.n	8003b22 <__libc_init_array+0x1e>
 8003b3c:	080047c0 	.word	0x080047c0
 8003b40:	080047c0 	.word	0x080047c0
 8003b44:	080047c4 	.word	0x080047c4
 8003b48:	080047c0 	.word	0x080047c0

08003b4c <__retarget_lock_init_recursive>:
 8003b4c:	4770      	bx	lr

08003b4e <__retarget_lock_acquire_recursive>:
 8003b4e:	4770      	bx	lr

08003b50 <__retarget_lock_release_recursive>:
 8003b50:	4770      	bx	lr
	...

08003b54 <_free_r>:
 8003b54:	b570      	push	{r4, r5, r6, lr}
 8003b56:	0005      	movs	r5, r0
 8003b58:	1e0c      	subs	r4, r1, #0
 8003b5a:	d010      	beq.n	8003b7e <_free_r+0x2a>
 8003b5c:	3c04      	subs	r4, #4
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	da00      	bge.n	8003b66 <_free_r+0x12>
 8003b64:	18e4      	adds	r4, r4, r3
 8003b66:	0028      	movs	r0, r5
 8003b68:	f000 f8e0 	bl	8003d2c <__malloc_lock>
 8003b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8003be4 <_free_r+0x90>)
 8003b6e:	6813      	ldr	r3, [r2, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d105      	bne.n	8003b80 <_free_r+0x2c>
 8003b74:	6063      	str	r3, [r4, #4]
 8003b76:	6014      	str	r4, [r2, #0]
 8003b78:	0028      	movs	r0, r5
 8003b7a:	f000 f8df 	bl	8003d3c <__malloc_unlock>
 8003b7e:	bd70      	pop	{r4, r5, r6, pc}
 8003b80:	42a3      	cmp	r3, r4
 8003b82:	d908      	bls.n	8003b96 <_free_r+0x42>
 8003b84:	6820      	ldr	r0, [r4, #0]
 8003b86:	1821      	adds	r1, r4, r0
 8003b88:	428b      	cmp	r3, r1
 8003b8a:	d1f3      	bne.n	8003b74 <_free_r+0x20>
 8003b8c:	6819      	ldr	r1, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	1809      	adds	r1, r1, r0
 8003b92:	6021      	str	r1, [r4, #0]
 8003b94:	e7ee      	b.n	8003b74 <_free_r+0x20>
 8003b96:	001a      	movs	r2, r3
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <_free_r+0x4e>
 8003b9e:	42a3      	cmp	r3, r4
 8003ba0:	d9f9      	bls.n	8003b96 <_free_r+0x42>
 8003ba2:	6811      	ldr	r1, [r2, #0]
 8003ba4:	1850      	adds	r0, r2, r1
 8003ba6:	42a0      	cmp	r0, r4
 8003ba8:	d10b      	bne.n	8003bc2 <_free_r+0x6e>
 8003baa:	6820      	ldr	r0, [r4, #0]
 8003bac:	1809      	adds	r1, r1, r0
 8003bae:	1850      	adds	r0, r2, r1
 8003bb0:	6011      	str	r1, [r2, #0]
 8003bb2:	4283      	cmp	r3, r0
 8003bb4:	d1e0      	bne.n	8003b78 <_free_r+0x24>
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	1841      	adds	r1, r0, r1
 8003bbc:	6011      	str	r1, [r2, #0]
 8003bbe:	6053      	str	r3, [r2, #4]
 8003bc0:	e7da      	b.n	8003b78 <_free_r+0x24>
 8003bc2:	42a0      	cmp	r0, r4
 8003bc4:	d902      	bls.n	8003bcc <_free_r+0x78>
 8003bc6:	230c      	movs	r3, #12
 8003bc8:	602b      	str	r3, [r5, #0]
 8003bca:	e7d5      	b.n	8003b78 <_free_r+0x24>
 8003bcc:	6820      	ldr	r0, [r4, #0]
 8003bce:	1821      	adds	r1, r4, r0
 8003bd0:	428b      	cmp	r3, r1
 8003bd2:	d103      	bne.n	8003bdc <_free_r+0x88>
 8003bd4:	6819      	ldr	r1, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	1809      	adds	r1, r1, r0
 8003bda:	6021      	str	r1, [r4, #0]
 8003bdc:	6063      	str	r3, [r4, #4]
 8003bde:	6054      	str	r4, [r2, #4]
 8003be0:	e7ca      	b.n	8003b78 <_free_r+0x24>
 8003be2:	46c0      	nop			@ (mov r8, r8)
 8003be4:	200003c8 	.word	0x200003c8

08003be8 <sbrk_aligned>:
 8003be8:	b570      	push	{r4, r5, r6, lr}
 8003bea:	4e0f      	ldr	r6, [pc, #60]	@ (8003c28 <sbrk_aligned+0x40>)
 8003bec:	000d      	movs	r5, r1
 8003bee:	6831      	ldr	r1, [r6, #0]
 8003bf0:	0004      	movs	r4, r0
 8003bf2:	2900      	cmp	r1, #0
 8003bf4:	d102      	bne.n	8003bfc <sbrk_aligned+0x14>
 8003bf6:	f000 fcbd 	bl	8004574 <_sbrk_r>
 8003bfa:	6030      	str	r0, [r6, #0]
 8003bfc:	0029      	movs	r1, r5
 8003bfe:	0020      	movs	r0, r4
 8003c00:	f000 fcb8 	bl	8004574 <_sbrk_r>
 8003c04:	1c43      	adds	r3, r0, #1
 8003c06:	d103      	bne.n	8003c10 <sbrk_aligned+0x28>
 8003c08:	2501      	movs	r5, #1
 8003c0a:	426d      	negs	r5, r5
 8003c0c:	0028      	movs	r0, r5
 8003c0e:	bd70      	pop	{r4, r5, r6, pc}
 8003c10:	2303      	movs	r3, #3
 8003c12:	1cc5      	adds	r5, r0, #3
 8003c14:	439d      	bics	r5, r3
 8003c16:	42a8      	cmp	r0, r5
 8003c18:	d0f8      	beq.n	8003c0c <sbrk_aligned+0x24>
 8003c1a:	1a29      	subs	r1, r5, r0
 8003c1c:	0020      	movs	r0, r4
 8003c1e:	f000 fca9 	bl	8004574 <_sbrk_r>
 8003c22:	3001      	adds	r0, #1
 8003c24:	d1f2      	bne.n	8003c0c <sbrk_aligned+0x24>
 8003c26:	e7ef      	b.n	8003c08 <sbrk_aligned+0x20>
 8003c28:	200003c4 	.word	0x200003c4

08003c2c <_malloc_r>:
 8003c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c2e:	2203      	movs	r2, #3
 8003c30:	1ccb      	adds	r3, r1, #3
 8003c32:	4393      	bics	r3, r2
 8003c34:	3308      	adds	r3, #8
 8003c36:	0005      	movs	r5, r0
 8003c38:	001f      	movs	r7, r3
 8003c3a:	2b0c      	cmp	r3, #12
 8003c3c:	d234      	bcs.n	8003ca8 <_malloc_r+0x7c>
 8003c3e:	270c      	movs	r7, #12
 8003c40:	42b9      	cmp	r1, r7
 8003c42:	d833      	bhi.n	8003cac <_malloc_r+0x80>
 8003c44:	0028      	movs	r0, r5
 8003c46:	f000 f871 	bl	8003d2c <__malloc_lock>
 8003c4a:	4e37      	ldr	r6, [pc, #220]	@ (8003d28 <_malloc_r+0xfc>)
 8003c4c:	6833      	ldr	r3, [r6, #0]
 8003c4e:	001c      	movs	r4, r3
 8003c50:	2c00      	cmp	r4, #0
 8003c52:	d12f      	bne.n	8003cb4 <_malloc_r+0x88>
 8003c54:	0039      	movs	r1, r7
 8003c56:	0028      	movs	r0, r5
 8003c58:	f7ff ffc6 	bl	8003be8 <sbrk_aligned>
 8003c5c:	0004      	movs	r4, r0
 8003c5e:	1c43      	adds	r3, r0, #1
 8003c60:	d15f      	bne.n	8003d22 <_malloc_r+0xf6>
 8003c62:	6834      	ldr	r4, [r6, #0]
 8003c64:	9400      	str	r4, [sp, #0]
 8003c66:	9b00      	ldr	r3, [sp, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d14a      	bne.n	8003d02 <_malloc_r+0xd6>
 8003c6c:	2c00      	cmp	r4, #0
 8003c6e:	d052      	beq.n	8003d16 <_malloc_r+0xea>
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	0028      	movs	r0, r5
 8003c74:	18e3      	adds	r3, r4, r3
 8003c76:	9900      	ldr	r1, [sp, #0]
 8003c78:	9301      	str	r3, [sp, #4]
 8003c7a:	f000 fc7b 	bl	8004574 <_sbrk_r>
 8003c7e:	9b01      	ldr	r3, [sp, #4]
 8003c80:	4283      	cmp	r3, r0
 8003c82:	d148      	bne.n	8003d16 <_malloc_r+0xea>
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	0028      	movs	r0, r5
 8003c88:	1aff      	subs	r7, r7, r3
 8003c8a:	0039      	movs	r1, r7
 8003c8c:	f7ff ffac 	bl	8003be8 <sbrk_aligned>
 8003c90:	3001      	adds	r0, #1
 8003c92:	d040      	beq.n	8003d16 <_malloc_r+0xea>
 8003c94:	6823      	ldr	r3, [r4, #0]
 8003c96:	19db      	adds	r3, r3, r7
 8003c98:	6023      	str	r3, [r4, #0]
 8003c9a:	6833      	ldr	r3, [r6, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	2a00      	cmp	r2, #0
 8003ca0:	d133      	bne.n	8003d0a <_malloc_r+0xde>
 8003ca2:	9b00      	ldr	r3, [sp, #0]
 8003ca4:	6033      	str	r3, [r6, #0]
 8003ca6:	e019      	b.n	8003cdc <_malloc_r+0xb0>
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	dac9      	bge.n	8003c40 <_malloc_r+0x14>
 8003cac:	230c      	movs	r3, #12
 8003cae:	602b      	str	r3, [r5, #0]
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003cb4:	6821      	ldr	r1, [r4, #0]
 8003cb6:	1bc9      	subs	r1, r1, r7
 8003cb8:	d420      	bmi.n	8003cfc <_malloc_r+0xd0>
 8003cba:	290b      	cmp	r1, #11
 8003cbc:	d90a      	bls.n	8003cd4 <_malloc_r+0xa8>
 8003cbe:	19e2      	adds	r2, r4, r7
 8003cc0:	6027      	str	r7, [r4, #0]
 8003cc2:	42a3      	cmp	r3, r4
 8003cc4:	d104      	bne.n	8003cd0 <_malloc_r+0xa4>
 8003cc6:	6032      	str	r2, [r6, #0]
 8003cc8:	6863      	ldr	r3, [r4, #4]
 8003cca:	6011      	str	r1, [r2, #0]
 8003ccc:	6053      	str	r3, [r2, #4]
 8003cce:	e005      	b.n	8003cdc <_malloc_r+0xb0>
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	e7f9      	b.n	8003cc8 <_malloc_r+0x9c>
 8003cd4:	6862      	ldr	r2, [r4, #4]
 8003cd6:	42a3      	cmp	r3, r4
 8003cd8:	d10e      	bne.n	8003cf8 <_malloc_r+0xcc>
 8003cda:	6032      	str	r2, [r6, #0]
 8003cdc:	0028      	movs	r0, r5
 8003cde:	f000 f82d 	bl	8003d3c <__malloc_unlock>
 8003ce2:	0020      	movs	r0, r4
 8003ce4:	2207      	movs	r2, #7
 8003ce6:	300b      	adds	r0, #11
 8003ce8:	1d23      	adds	r3, r4, #4
 8003cea:	4390      	bics	r0, r2
 8003cec:	1ac2      	subs	r2, r0, r3
 8003cee:	4298      	cmp	r0, r3
 8003cf0:	d0df      	beq.n	8003cb2 <_malloc_r+0x86>
 8003cf2:	1a1b      	subs	r3, r3, r0
 8003cf4:	50a3      	str	r3, [r4, r2]
 8003cf6:	e7dc      	b.n	8003cb2 <_malloc_r+0x86>
 8003cf8:	605a      	str	r2, [r3, #4]
 8003cfa:	e7ef      	b.n	8003cdc <_malloc_r+0xb0>
 8003cfc:	0023      	movs	r3, r4
 8003cfe:	6864      	ldr	r4, [r4, #4]
 8003d00:	e7a6      	b.n	8003c50 <_malloc_r+0x24>
 8003d02:	9c00      	ldr	r4, [sp, #0]
 8003d04:	6863      	ldr	r3, [r4, #4]
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	e7ad      	b.n	8003c66 <_malloc_r+0x3a>
 8003d0a:	001a      	movs	r2, r3
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	42a3      	cmp	r3, r4
 8003d10:	d1fb      	bne.n	8003d0a <_malloc_r+0xde>
 8003d12:	2300      	movs	r3, #0
 8003d14:	e7da      	b.n	8003ccc <_malloc_r+0xa0>
 8003d16:	230c      	movs	r3, #12
 8003d18:	0028      	movs	r0, r5
 8003d1a:	602b      	str	r3, [r5, #0]
 8003d1c:	f000 f80e 	bl	8003d3c <__malloc_unlock>
 8003d20:	e7c6      	b.n	8003cb0 <_malloc_r+0x84>
 8003d22:	6007      	str	r7, [r0, #0]
 8003d24:	e7da      	b.n	8003cdc <_malloc_r+0xb0>
 8003d26:	46c0      	nop			@ (mov r8, r8)
 8003d28:	200003c8 	.word	0x200003c8

08003d2c <__malloc_lock>:
 8003d2c:	b510      	push	{r4, lr}
 8003d2e:	4802      	ldr	r0, [pc, #8]	@ (8003d38 <__malloc_lock+0xc>)
 8003d30:	f7ff ff0d 	bl	8003b4e <__retarget_lock_acquire_recursive>
 8003d34:	bd10      	pop	{r4, pc}
 8003d36:	46c0      	nop			@ (mov r8, r8)
 8003d38:	200003c0 	.word	0x200003c0

08003d3c <__malloc_unlock>:
 8003d3c:	b510      	push	{r4, lr}
 8003d3e:	4802      	ldr	r0, [pc, #8]	@ (8003d48 <__malloc_unlock+0xc>)
 8003d40:	f7ff ff06 	bl	8003b50 <__retarget_lock_release_recursive>
 8003d44:	bd10      	pop	{r4, pc}
 8003d46:	46c0      	nop			@ (mov r8, r8)
 8003d48:	200003c0 	.word	0x200003c0

08003d4c <__sfputc_r>:
 8003d4c:	6893      	ldr	r3, [r2, #8]
 8003d4e:	b510      	push	{r4, lr}
 8003d50:	3b01      	subs	r3, #1
 8003d52:	6093      	str	r3, [r2, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	da04      	bge.n	8003d62 <__sfputc_r+0x16>
 8003d58:	6994      	ldr	r4, [r2, #24]
 8003d5a:	42a3      	cmp	r3, r4
 8003d5c:	db07      	blt.n	8003d6e <__sfputc_r+0x22>
 8003d5e:	290a      	cmp	r1, #10
 8003d60:	d005      	beq.n	8003d6e <__sfputc_r+0x22>
 8003d62:	6813      	ldr	r3, [r2, #0]
 8003d64:	1c58      	adds	r0, r3, #1
 8003d66:	6010      	str	r0, [r2, #0]
 8003d68:	7019      	strb	r1, [r3, #0]
 8003d6a:	0008      	movs	r0, r1
 8003d6c:	bd10      	pop	{r4, pc}
 8003d6e:	f000 fb60 	bl	8004432 <__swbuf_r>
 8003d72:	0001      	movs	r1, r0
 8003d74:	e7f9      	b.n	8003d6a <__sfputc_r+0x1e>

08003d76 <__sfputs_r>:
 8003d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d78:	0006      	movs	r6, r0
 8003d7a:	000f      	movs	r7, r1
 8003d7c:	0014      	movs	r4, r2
 8003d7e:	18d5      	adds	r5, r2, r3
 8003d80:	42ac      	cmp	r4, r5
 8003d82:	d101      	bne.n	8003d88 <__sfputs_r+0x12>
 8003d84:	2000      	movs	r0, #0
 8003d86:	e007      	b.n	8003d98 <__sfputs_r+0x22>
 8003d88:	7821      	ldrb	r1, [r4, #0]
 8003d8a:	003a      	movs	r2, r7
 8003d8c:	0030      	movs	r0, r6
 8003d8e:	f7ff ffdd 	bl	8003d4c <__sfputc_r>
 8003d92:	3401      	adds	r4, #1
 8003d94:	1c43      	adds	r3, r0, #1
 8003d96:	d1f3      	bne.n	8003d80 <__sfputs_r+0xa>
 8003d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d9c <_vfiprintf_r>:
 8003d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d9e:	b0a1      	sub	sp, #132	@ 0x84
 8003da0:	000f      	movs	r7, r1
 8003da2:	0015      	movs	r5, r2
 8003da4:	001e      	movs	r6, r3
 8003da6:	9003      	str	r0, [sp, #12]
 8003da8:	2800      	cmp	r0, #0
 8003daa:	d004      	beq.n	8003db6 <_vfiprintf_r+0x1a>
 8003dac:	6a03      	ldr	r3, [r0, #32]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <_vfiprintf_r+0x1a>
 8003db2:	f7ff fdbb 	bl	800392c <__sinit>
 8003db6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003db8:	07db      	lsls	r3, r3, #31
 8003dba:	d405      	bmi.n	8003dc8 <_vfiprintf_r+0x2c>
 8003dbc:	89bb      	ldrh	r3, [r7, #12]
 8003dbe:	059b      	lsls	r3, r3, #22
 8003dc0:	d402      	bmi.n	8003dc8 <_vfiprintf_r+0x2c>
 8003dc2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003dc4:	f7ff fec3 	bl	8003b4e <__retarget_lock_acquire_recursive>
 8003dc8:	89bb      	ldrh	r3, [r7, #12]
 8003dca:	071b      	lsls	r3, r3, #28
 8003dcc:	d502      	bpl.n	8003dd4 <_vfiprintf_r+0x38>
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d113      	bne.n	8003dfc <_vfiprintf_r+0x60>
 8003dd4:	0039      	movs	r1, r7
 8003dd6:	9803      	ldr	r0, [sp, #12]
 8003dd8:	f000 fb6e 	bl	80044b8 <__swsetup_r>
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	d00d      	beq.n	8003dfc <_vfiprintf_r+0x60>
 8003de0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003de2:	07db      	lsls	r3, r3, #31
 8003de4:	d503      	bpl.n	8003dee <_vfiprintf_r+0x52>
 8003de6:	2001      	movs	r0, #1
 8003de8:	4240      	negs	r0, r0
 8003dea:	b021      	add	sp, #132	@ 0x84
 8003dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dee:	89bb      	ldrh	r3, [r7, #12]
 8003df0:	059b      	lsls	r3, r3, #22
 8003df2:	d4f8      	bmi.n	8003de6 <_vfiprintf_r+0x4a>
 8003df4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003df6:	f7ff feab 	bl	8003b50 <__retarget_lock_release_recursive>
 8003dfa:	e7f4      	b.n	8003de6 <_vfiprintf_r+0x4a>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	ac08      	add	r4, sp, #32
 8003e00:	6163      	str	r3, [r4, #20]
 8003e02:	3320      	adds	r3, #32
 8003e04:	7663      	strb	r3, [r4, #25]
 8003e06:	3310      	adds	r3, #16
 8003e08:	76a3      	strb	r3, [r4, #26]
 8003e0a:	9607      	str	r6, [sp, #28]
 8003e0c:	002e      	movs	r6, r5
 8003e0e:	7833      	ldrb	r3, [r6, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <_vfiprintf_r+0x7c>
 8003e14:	2b25      	cmp	r3, #37	@ 0x25
 8003e16:	d148      	bne.n	8003eaa <_vfiprintf_r+0x10e>
 8003e18:	1b73      	subs	r3, r6, r5
 8003e1a:	9305      	str	r3, [sp, #20]
 8003e1c:	42ae      	cmp	r6, r5
 8003e1e:	d00b      	beq.n	8003e38 <_vfiprintf_r+0x9c>
 8003e20:	002a      	movs	r2, r5
 8003e22:	0039      	movs	r1, r7
 8003e24:	9803      	ldr	r0, [sp, #12]
 8003e26:	f7ff ffa6 	bl	8003d76 <__sfputs_r>
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	d100      	bne.n	8003e30 <_vfiprintf_r+0x94>
 8003e2e:	e0ae      	b.n	8003f8e <_vfiprintf_r+0x1f2>
 8003e30:	6963      	ldr	r3, [r4, #20]
 8003e32:	9a05      	ldr	r2, [sp, #20]
 8003e34:	189b      	adds	r3, r3, r2
 8003e36:	6163      	str	r3, [r4, #20]
 8003e38:	7833      	ldrb	r3, [r6, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d100      	bne.n	8003e40 <_vfiprintf_r+0xa4>
 8003e3e:	e0a6      	b.n	8003f8e <_vfiprintf_r+0x1f2>
 8003e40:	2201      	movs	r2, #1
 8003e42:	2300      	movs	r3, #0
 8003e44:	4252      	negs	r2, r2
 8003e46:	6062      	str	r2, [r4, #4]
 8003e48:	a904      	add	r1, sp, #16
 8003e4a:	3254      	adds	r2, #84	@ 0x54
 8003e4c:	1852      	adds	r2, r2, r1
 8003e4e:	1c75      	adds	r5, r6, #1
 8003e50:	6023      	str	r3, [r4, #0]
 8003e52:	60e3      	str	r3, [r4, #12]
 8003e54:	60a3      	str	r3, [r4, #8]
 8003e56:	7013      	strb	r3, [r2, #0]
 8003e58:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003e5a:	4b59      	ldr	r3, [pc, #356]	@ (8003fc0 <_vfiprintf_r+0x224>)
 8003e5c:	2205      	movs	r2, #5
 8003e5e:	0018      	movs	r0, r3
 8003e60:	7829      	ldrb	r1, [r5, #0]
 8003e62:	9305      	str	r3, [sp, #20]
 8003e64:	f000 fb98 	bl	8004598 <memchr>
 8003e68:	1c6e      	adds	r6, r5, #1
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	d11f      	bne.n	8003eae <_vfiprintf_r+0x112>
 8003e6e:	6822      	ldr	r2, [r4, #0]
 8003e70:	06d3      	lsls	r3, r2, #27
 8003e72:	d504      	bpl.n	8003e7e <_vfiprintf_r+0xe2>
 8003e74:	2353      	movs	r3, #83	@ 0x53
 8003e76:	a904      	add	r1, sp, #16
 8003e78:	185b      	adds	r3, r3, r1
 8003e7a:	2120      	movs	r1, #32
 8003e7c:	7019      	strb	r1, [r3, #0]
 8003e7e:	0713      	lsls	r3, r2, #28
 8003e80:	d504      	bpl.n	8003e8c <_vfiprintf_r+0xf0>
 8003e82:	2353      	movs	r3, #83	@ 0x53
 8003e84:	a904      	add	r1, sp, #16
 8003e86:	185b      	adds	r3, r3, r1
 8003e88:	212b      	movs	r1, #43	@ 0x2b
 8003e8a:	7019      	strb	r1, [r3, #0]
 8003e8c:	782b      	ldrb	r3, [r5, #0]
 8003e8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e90:	d016      	beq.n	8003ec0 <_vfiprintf_r+0x124>
 8003e92:	002e      	movs	r6, r5
 8003e94:	2100      	movs	r1, #0
 8003e96:	200a      	movs	r0, #10
 8003e98:	68e3      	ldr	r3, [r4, #12]
 8003e9a:	7832      	ldrb	r2, [r6, #0]
 8003e9c:	1c75      	adds	r5, r6, #1
 8003e9e:	3a30      	subs	r2, #48	@ 0x30
 8003ea0:	2a09      	cmp	r2, #9
 8003ea2:	d950      	bls.n	8003f46 <_vfiprintf_r+0x1aa>
 8003ea4:	2900      	cmp	r1, #0
 8003ea6:	d111      	bne.n	8003ecc <_vfiprintf_r+0x130>
 8003ea8:	e017      	b.n	8003eda <_vfiprintf_r+0x13e>
 8003eaa:	3601      	adds	r6, #1
 8003eac:	e7af      	b.n	8003e0e <_vfiprintf_r+0x72>
 8003eae:	9b05      	ldr	r3, [sp, #20]
 8003eb0:	6822      	ldr	r2, [r4, #0]
 8003eb2:	1ac0      	subs	r0, r0, r3
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	4083      	lsls	r3, r0
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	0035      	movs	r5, r6
 8003ebc:	6023      	str	r3, [r4, #0]
 8003ebe:	e7cc      	b.n	8003e5a <_vfiprintf_r+0xbe>
 8003ec0:	9b07      	ldr	r3, [sp, #28]
 8003ec2:	1d19      	adds	r1, r3, #4
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	9107      	str	r1, [sp, #28]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	db01      	blt.n	8003ed0 <_vfiprintf_r+0x134>
 8003ecc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ece:	e004      	b.n	8003eda <_vfiprintf_r+0x13e>
 8003ed0:	425b      	negs	r3, r3
 8003ed2:	60e3      	str	r3, [r4, #12]
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	6023      	str	r3, [r4, #0]
 8003eda:	7833      	ldrb	r3, [r6, #0]
 8003edc:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ede:	d10c      	bne.n	8003efa <_vfiprintf_r+0x15e>
 8003ee0:	7873      	ldrb	r3, [r6, #1]
 8003ee2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ee4:	d134      	bne.n	8003f50 <_vfiprintf_r+0x1b4>
 8003ee6:	9b07      	ldr	r3, [sp, #28]
 8003ee8:	3602      	adds	r6, #2
 8003eea:	1d1a      	adds	r2, r3, #4
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	9207      	str	r2, [sp, #28]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	da01      	bge.n	8003ef8 <_vfiprintf_r+0x15c>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	425b      	negs	r3, r3
 8003ef8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003efa:	4d32      	ldr	r5, [pc, #200]	@ (8003fc4 <_vfiprintf_r+0x228>)
 8003efc:	2203      	movs	r2, #3
 8003efe:	0028      	movs	r0, r5
 8003f00:	7831      	ldrb	r1, [r6, #0]
 8003f02:	f000 fb49 	bl	8004598 <memchr>
 8003f06:	2800      	cmp	r0, #0
 8003f08:	d006      	beq.n	8003f18 <_vfiprintf_r+0x17c>
 8003f0a:	2340      	movs	r3, #64	@ 0x40
 8003f0c:	1b40      	subs	r0, r0, r5
 8003f0e:	4083      	lsls	r3, r0
 8003f10:	6822      	ldr	r2, [r4, #0]
 8003f12:	3601      	adds	r6, #1
 8003f14:	4313      	orrs	r3, r2
 8003f16:	6023      	str	r3, [r4, #0]
 8003f18:	7831      	ldrb	r1, [r6, #0]
 8003f1a:	2206      	movs	r2, #6
 8003f1c:	482a      	ldr	r0, [pc, #168]	@ (8003fc8 <_vfiprintf_r+0x22c>)
 8003f1e:	1c75      	adds	r5, r6, #1
 8003f20:	7621      	strb	r1, [r4, #24]
 8003f22:	f000 fb39 	bl	8004598 <memchr>
 8003f26:	2800      	cmp	r0, #0
 8003f28:	d040      	beq.n	8003fac <_vfiprintf_r+0x210>
 8003f2a:	4b28      	ldr	r3, [pc, #160]	@ (8003fcc <_vfiprintf_r+0x230>)
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d122      	bne.n	8003f76 <_vfiprintf_r+0x1da>
 8003f30:	2207      	movs	r2, #7
 8003f32:	9b07      	ldr	r3, [sp, #28]
 8003f34:	3307      	adds	r3, #7
 8003f36:	4393      	bics	r3, r2
 8003f38:	3308      	adds	r3, #8
 8003f3a:	9307      	str	r3, [sp, #28]
 8003f3c:	6963      	ldr	r3, [r4, #20]
 8003f3e:	9a04      	ldr	r2, [sp, #16]
 8003f40:	189b      	adds	r3, r3, r2
 8003f42:	6163      	str	r3, [r4, #20]
 8003f44:	e762      	b.n	8003e0c <_vfiprintf_r+0x70>
 8003f46:	4343      	muls	r3, r0
 8003f48:	002e      	movs	r6, r5
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	189b      	adds	r3, r3, r2
 8003f4e:	e7a4      	b.n	8003e9a <_vfiprintf_r+0xfe>
 8003f50:	2300      	movs	r3, #0
 8003f52:	200a      	movs	r0, #10
 8003f54:	0019      	movs	r1, r3
 8003f56:	3601      	adds	r6, #1
 8003f58:	6063      	str	r3, [r4, #4]
 8003f5a:	7832      	ldrb	r2, [r6, #0]
 8003f5c:	1c75      	adds	r5, r6, #1
 8003f5e:	3a30      	subs	r2, #48	@ 0x30
 8003f60:	2a09      	cmp	r2, #9
 8003f62:	d903      	bls.n	8003f6c <_vfiprintf_r+0x1d0>
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0c8      	beq.n	8003efa <_vfiprintf_r+0x15e>
 8003f68:	9109      	str	r1, [sp, #36]	@ 0x24
 8003f6a:	e7c6      	b.n	8003efa <_vfiprintf_r+0x15e>
 8003f6c:	4341      	muls	r1, r0
 8003f6e:	002e      	movs	r6, r5
 8003f70:	2301      	movs	r3, #1
 8003f72:	1889      	adds	r1, r1, r2
 8003f74:	e7f1      	b.n	8003f5a <_vfiprintf_r+0x1be>
 8003f76:	aa07      	add	r2, sp, #28
 8003f78:	9200      	str	r2, [sp, #0]
 8003f7a:	0021      	movs	r1, r4
 8003f7c:	003a      	movs	r2, r7
 8003f7e:	4b14      	ldr	r3, [pc, #80]	@ (8003fd0 <_vfiprintf_r+0x234>)
 8003f80:	9803      	ldr	r0, [sp, #12]
 8003f82:	e000      	b.n	8003f86 <_vfiprintf_r+0x1ea>
 8003f84:	bf00      	nop
 8003f86:	9004      	str	r0, [sp, #16]
 8003f88:	9b04      	ldr	r3, [sp, #16]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	d1d6      	bne.n	8003f3c <_vfiprintf_r+0x1a0>
 8003f8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f90:	07db      	lsls	r3, r3, #31
 8003f92:	d405      	bmi.n	8003fa0 <_vfiprintf_r+0x204>
 8003f94:	89bb      	ldrh	r3, [r7, #12]
 8003f96:	059b      	lsls	r3, r3, #22
 8003f98:	d402      	bmi.n	8003fa0 <_vfiprintf_r+0x204>
 8003f9a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003f9c:	f7ff fdd8 	bl	8003b50 <__retarget_lock_release_recursive>
 8003fa0:	89bb      	ldrh	r3, [r7, #12]
 8003fa2:	065b      	lsls	r3, r3, #25
 8003fa4:	d500      	bpl.n	8003fa8 <_vfiprintf_r+0x20c>
 8003fa6:	e71e      	b.n	8003de6 <_vfiprintf_r+0x4a>
 8003fa8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003faa:	e71e      	b.n	8003dea <_vfiprintf_r+0x4e>
 8003fac:	aa07      	add	r2, sp, #28
 8003fae:	9200      	str	r2, [sp, #0]
 8003fb0:	0021      	movs	r1, r4
 8003fb2:	003a      	movs	r2, r7
 8003fb4:	4b06      	ldr	r3, [pc, #24]	@ (8003fd0 <_vfiprintf_r+0x234>)
 8003fb6:	9803      	ldr	r0, [sp, #12]
 8003fb8:	f000 f87c 	bl	80040b4 <_printf_i>
 8003fbc:	e7e3      	b.n	8003f86 <_vfiprintf_r+0x1ea>
 8003fbe:	46c0      	nop			@ (mov r8, r8)
 8003fc0:	0800478a 	.word	0x0800478a
 8003fc4:	08004790 	.word	0x08004790
 8003fc8:	08004794 	.word	0x08004794
 8003fcc:	00000000 	.word	0x00000000
 8003fd0:	08003d77 	.word	0x08003d77

08003fd4 <_printf_common>:
 8003fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fd6:	0016      	movs	r6, r2
 8003fd8:	9301      	str	r3, [sp, #4]
 8003fda:	688a      	ldr	r2, [r1, #8]
 8003fdc:	690b      	ldr	r3, [r1, #16]
 8003fde:	000c      	movs	r4, r1
 8003fe0:	9000      	str	r0, [sp, #0]
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	da00      	bge.n	8003fe8 <_printf_common+0x14>
 8003fe6:	0013      	movs	r3, r2
 8003fe8:	0022      	movs	r2, r4
 8003fea:	6033      	str	r3, [r6, #0]
 8003fec:	3243      	adds	r2, #67	@ 0x43
 8003fee:	7812      	ldrb	r2, [r2, #0]
 8003ff0:	2a00      	cmp	r2, #0
 8003ff2:	d001      	beq.n	8003ff8 <_printf_common+0x24>
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	6033      	str	r3, [r6, #0]
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	069b      	lsls	r3, r3, #26
 8003ffc:	d502      	bpl.n	8004004 <_printf_common+0x30>
 8003ffe:	6833      	ldr	r3, [r6, #0]
 8004000:	3302      	adds	r3, #2
 8004002:	6033      	str	r3, [r6, #0]
 8004004:	6822      	ldr	r2, [r4, #0]
 8004006:	2306      	movs	r3, #6
 8004008:	0015      	movs	r5, r2
 800400a:	401d      	ands	r5, r3
 800400c:	421a      	tst	r2, r3
 800400e:	d027      	beq.n	8004060 <_printf_common+0x8c>
 8004010:	0023      	movs	r3, r4
 8004012:	3343      	adds	r3, #67	@ 0x43
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	1e5a      	subs	r2, r3, #1
 8004018:	4193      	sbcs	r3, r2
 800401a:	6822      	ldr	r2, [r4, #0]
 800401c:	0692      	lsls	r2, r2, #26
 800401e:	d430      	bmi.n	8004082 <_printf_common+0xae>
 8004020:	0022      	movs	r2, r4
 8004022:	9901      	ldr	r1, [sp, #4]
 8004024:	9800      	ldr	r0, [sp, #0]
 8004026:	9d08      	ldr	r5, [sp, #32]
 8004028:	3243      	adds	r2, #67	@ 0x43
 800402a:	47a8      	blx	r5
 800402c:	3001      	adds	r0, #1
 800402e:	d025      	beq.n	800407c <_printf_common+0xa8>
 8004030:	2206      	movs	r2, #6
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	2500      	movs	r5, #0
 8004036:	4013      	ands	r3, r2
 8004038:	2b04      	cmp	r3, #4
 800403a:	d105      	bne.n	8004048 <_printf_common+0x74>
 800403c:	6833      	ldr	r3, [r6, #0]
 800403e:	68e5      	ldr	r5, [r4, #12]
 8004040:	1aed      	subs	r5, r5, r3
 8004042:	43eb      	mvns	r3, r5
 8004044:	17db      	asrs	r3, r3, #31
 8004046:	401d      	ands	r5, r3
 8004048:	68a3      	ldr	r3, [r4, #8]
 800404a:	6922      	ldr	r2, [r4, #16]
 800404c:	4293      	cmp	r3, r2
 800404e:	dd01      	ble.n	8004054 <_printf_common+0x80>
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	18ed      	adds	r5, r5, r3
 8004054:	2600      	movs	r6, #0
 8004056:	42b5      	cmp	r5, r6
 8004058:	d120      	bne.n	800409c <_printf_common+0xc8>
 800405a:	2000      	movs	r0, #0
 800405c:	e010      	b.n	8004080 <_printf_common+0xac>
 800405e:	3501      	adds	r5, #1
 8004060:	68e3      	ldr	r3, [r4, #12]
 8004062:	6832      	ldr	r2, [r6, #0]
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	42ab      	cmp	r3, r5
 8004068:	ddd2      	ble.n	8004010 <_printf_common+0x3c>
 800406a:	0022      	movs	r2, r4
 800406c:	2301      	movs	r3, #1
 800406e:	9901      	ldr	r1, [sp, #4]
 8004070:	9800      	ldr	r0, [sp, #0]
 8004072:	9f08      	ldr	r7, [sp, #32]
 8004074:	3219      	adds	r2, #25
 8004076:	47b8      	blx	r7
 8004078:	3001      	adds	r0, #1
 800407a:	d1f0      	bne.n	800405e <_printf_common+0x8a>
 800407c:	2001      	movs	r0, #1
 800407e:	4240      	negs	r0, r0
 8004080:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004082:	2030      	movs	r0, #48	@ 0x30
 8004084:	18e1      	adds	r1, r4, r3
 8004086:	3143      	adds	r1, #67	@ 0x43
 8004088:	7008      	strb	r0, [r1, #0]
 800408a:	0021      	movs	r1, r4
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	3145      	adds	r1, #69	@ 0x45
 8004090:	7809      	ldrb	r1, [r1, #0]
 8004092:	18a2      	adds	r2, r4, r2
 8004094:	3243      	adds	r2, #67	@ 0x43
 8004096:	3302      	adds	r3, #2
 8004098:	7011      	strb	r1, [r2, #0]
 800409a:	e7c1      	b.n	8004020 <_printf_common+0x4c>
 800409c:	0022      	movs	r2, r4
 800409e:	2301      	movs	r3, #1
 80040a0:	9901      	ldr	r1, [sp, #4]
 80040a2:	9800      	ldr	r0, [sp, #0]
 80040a4:	9f08      	ldr	r7, [sp, #32]
 80040a6:	321a      	adds	r2, #26
 80040a8:	47b8      	blx	r7
 80040aa:	3001      	adds	r0, #1
 80040ac:	d0e6      	beq.n	800407c <_printf_common+0xa8>
 80040ae:	3601      	adds	r6, #1
 80040b0:	e7d1      	b.n	8004056 <_printf_common+0x82>
	...

080040b4 <_printf_i>:
 80040b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040b6:	b08b      	sub	sp, #44	@ 0x2c
 80040b8:	9206      	str	r2, [sp, #24]
 80040ba:	000a      	movs	r2, r1
 80040bc:	3243      	adds	r2, #67	@ 0x43
 80040be:	9307      	str	r3, [sp, #28]
 80040c0:	9005      	str	r0, [sp, #20]
 80040c2:	9203      	str	r2, [sp, #12]
 80040c4:	7e0a      	ldrb	r2, [r1, #24]
 80040c6:	000c      	movs	r4, r1
 80040c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80040ca:	2a78      	cmp	r2, #120	@ 0x78
 80040cc:	d809      	bhi.n	80040e2 <_printf_i+0x2e>
 80040ce:	2a62      	cmp	r2, #98	@ 0x62
 80040d0:	d80b      	bhi.n	80040ea <_printf_i+0x36>
 80040d2:	2a00      	cmp	r2, #0
 80040d4:	d100      	bne.n	80040d8 <_printf_i+0x24>
 80040d6:	e0bc      	b.n	8004252 <_printf_i+0x19e>
 80040d8:	497b      	ldr	r1, [pc, #492]	@ (80042c8 <_printf_i+0x214>)
 80040da:	9104      	str	r1, [sp, #16]
 80040dc:	2a58      	cmp	r2, #88	@ 0x58
 80040de:	d100      	bne.n	80040e2 <_printf_i+0x2e>
 80040e0:	e090      	b.n	8004204 <_printf_i+0x150>
 80040e2:	0025      	movs	r5, r4
 80040e4:	3542      	adds	r5, #66	@ 0x42
 80040e6:	702a      	strb	r2, [r5, #0]
 80040e8:	e022      	b.n	8004130 <_printf_i+0x7c>
 80040ea:	0010      	movs	r0, r2
 80040ec:	3863      	subs	r0, #99	@ 0x63
 80040ee:	2815      	cmp	r0, #21
 80040f0:	d8f7      	bhi.n	80040e2 <_printf_i+0x2e>
 80040f2:	f7fc f80d 	bl	8000110 <__gnu_thumb1_case_shi>
 80040f6:	0016      	.short	0x0016
 80040f8:	fff6001f 	.word	0xfff6001f
 80040fc:	fff6fff6 	.word	0xfff6fff6
 8004100:	001ffff6 	.word	0x001ffff6
 8004104:	fff6fff6 	.word	0xfff6fff6
 8004108:	fff6fff6 	.word	0xfff6fff6
 800410c:	003600a1 	.word	0x003600a1
 8004110:	fff60080 	.word	0xfff60080
 8004114:	00b2fff6 	.word	0x00b2fff6
 8004118:	0036fff6 	.word	0x0036fff6
 800411c:	fff6fff6 	.word	0xfff6fff6
 8004120:	0084      	.short	0x0084
 8004122:	0025      	movs	r5, r4
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	3542      	adds	r5, #66	@ 0x42
 8004128:	1d11      	adds	r1, r2, #4
 800412a:	6019      	str	r1, [r3, #0]
 800412c:	6813      	ldr	r3, [r2, #0]
 800412e:	702b      	strb	r3, [r5, #0]
 8004130:	2301      	movs	r3, #1
 8004132:	e0a0      	b.n	8004276 <_printf_i+0x1c2>
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	6809      	ldr	r1, [r1, #0]
 8004138:	1d02      	adds	r2, r0, #4
 800413a:	060d      	lsls	r5, r1, #24
 800413c:	d50b      	bpl.n	8004156 <_printf_i+0xa2>
 800413e:	6806      	ldr	r6, [r0, #0]
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	2e00      	cmp	r6, #0
 8004144:	da03      	bge.n	800414e <_printf_i+0x9a>
 8004146:	232d      	movs	r3, #45	@ 0x2d
 8004148:	9a03      	ldr	r2, [sp, #12]
 800414a:	4276      	negs	r6, r6
 800414c:	7013      	strb	r3, [r2, #0]
 800414e:	4b5e      	ldr	r3, [pc, #376]	@ (80042c8 <_printf_i+0x214>)
 8004150:	270a      	movs	r7, #10
 8004152:	9304      	str	r3, [sp, #16]
 8004154:	e018      	b.n	8004188 <_printf_i+0xd4>
 8004156:	6806      	ldr	r6, [r0, #0]
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	0649      	lsls	r1, r1, #25
 800415c:	d5f1      	bpl.n	8004142 <_printf_i+0x8e>
 800415e:	b236      	sxth	r6, r6
 8004160:	e7ef      	b.n	8004142 <_printf_i+0x8e>
 8004162:	6808      	ldr	r0, [r1, #0]
 8004164:	6819      	ldr	r1, [r3, #0]
 8004166:	c940      	ldmia	r1!, {r6}
 8004168:	0605      	lsls	r5, r0, #24
 800416a:	d402      	bmi.n	8004172 <_printf_i+0xbe>
 800416c:	0640      	lsls	r0, r0, #25
 800416e:	d500      	bpl.n	8004172 <_printf_i+0xbe>
 8004170:	b2b6      	uxth	r6, r6
 8004172:	6019      	str	r1, [r3, #0]
 8004174:	4b54      	ldr	r3, [pc, #336]	@ (80042c8 <_printf_i+0x214>)
 8004176:	270a      	movs	r7, #10
 8004178:	9304      	str	r3, [sp, #16]
 800417a:	2a6f      	cmp	r2, #111	@ 0x6f
 800417c:	d100      	bne.n	8004180 <_printf_i+0xcc>
 800417e:	3f02      	subs	r7, #2
 8004180:	0023      	movs	r3, r4
 8004182:	2200      	movs	r2, #0
 8004184:	3343      	adds	r3, #67	@ 0x43
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	6863      	ldr	r3, [r4, #4]
 800418a:	60a3      	str	r3, [r4, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	db03      	blt.n	8004198 <_printf_i+0xe4>
 8004190:	2104      	movs	r1, #4
 8004192:	6822      	ldr	r2, [r4, #0]
 8004194:	438a      	bics	r2, r1
 8004196:	6022      	str	r2, [r4, #0]
 8004198:	2e00      	cmp	r6, #0
 800419a:	d102      	bne.n	80041a2 <_printf_i+0xee>
 800419c:	9d03      	ldr	r5, [sp, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00c      	beq.n	80041bc <_printf_i+0x108>
 80041a2:	9d03      	ldr	r5, [sp, #12]
 80041a4:	0030      	movs	r0, r6
 80041a6:	0039      	movs	r1, r7
 80041a8:	f7fc f842 	bl	8000230 <__aeabi_uidivmod>
 80041ac:	9b04      	ldr	r3, [sp, #16]
 80041ae:	3d01      	subs	r5, #1
 80041b0:	5c5b      	ldrb	r3, [r3, r1]
 80041b2:	702b      	strb	r3, [r5, #0]
 80041b4:	0033      	movs	r3, r6
 80041b6:	0006      	movs	r6, r0
 80041b8:	429f      	cmp	r7, r3
 80041ba:	d9f3      	bls.n	80041a4 <_printf_i+0xf0>
 80041bc:	2f08      	cmp	r7, #8
 80041be:	d109      	bne.n	80041d4 <_printf_i+0x120>
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	07db      	lsls	r3, r3, #31
 80041c4:	d506      	bpl.n	80041d4 <_printf_i+0x120>
 80041c6:	6862      	ldr	r2, [r4, #4]
 80041c8:	6923      	ldr	r3, [r4, #16]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	dc02      	bgt.n	80041d4 <_printf_i+0x120>
 80041ce:	2330      	movs	r3, #48	@ 0x30
 80041d0:	3d01      	subs	r5, #1
 80041d2:	702b      	strb	r3, [r5, #0]
 80041d4:	9b03      	ldr	r3, [sp, #12]
 80041d6:	1b5b      	subs	r3, r3, r5
 80041d8:	6123      	str	r3, [r4, #16]
 80041da:	9b07      	ldr	r3, [sp, #28]
 80041dc:	0021      	movs	r1, r4
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	9805      	ldr	r0, [sp, #20]
 80041e2:	9b06      	ldr	r3, [sp, #24]
 80041e4:	aa09      	add	r2, sp, #36	@ 0x24
 80041e6:	f7ff fef5 	bl	8003fd4 <_printf_common>
 80041ea:	3001      	adds	r0, #1
 80041ec:	d148      	bne.n	8004280 <_printf_i+0x1cc>
 80041ee:	2001      	movs	r0, #1
 80041f0:	4240      	negs	r0, r0
 80041f2:	b00b      	add	sp, #44	@ 0x2c
 80041f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041f6:	2220      	movs	r2, #32
 80041f8:	6809      	ldr	r1, [r1, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	6022      	str	r2, [r4, #0]
 80041fe:	2278      	movs	r2, #120	@ 0x78
 8004200:	4932      	ldr	r1, [pc, #200]	@ (80042cc <_printf_i+0x218>)
 8004202:	9104      	str	r1, [sp, #16]
 8004204:	0021      	movs	r1, r4
 8004206:	3145      	adds	r1, #69	@ 0x45
 8004208:	700a      	strb	r2, [r1, #0]
 800420a:	6819      	ldr	r1, [r3, #0]
 800420c:	6822      	ldr	r2, [r4, #0]
 800420e:	c940      	ldmia	r1!, {r6}
 8004210:	0610      	lsls	r0, r2, #24
 8004212:	d402      	bmi.n	800421a <_printf_i+0x166>
 8004214:	0650      	lsls	r0, r2, #25
 8004216:	d500      	bpl.n	800421a <_printf_i+0x166>
 8004218:	b2b6      	uxth	r6, r6
 800421a:	6019      	str	r1, [r3, #0]
 800421c:	07d3      	lsls	r3, r2, #31
 800421e:	d502      	bpl.n	8004226 <_printf_i+0x172>
 8004220:	2320      	movs	r3, #32
 8004222:	4313      	orrs	r3, r2
 8004224:	6023      	str	r3, [r4, #0]
 8004226:	2e00      	cmp	r6, #0
 8004228:	d001      	beq.n	800422e <_printf_i+0x17a>
 800422a:	2710      	movs	r7, #16
 800422c:	e7a8      	b.n	8004180 <_printf_i+0xcc>
 800422e:	2220      	movs	r2, #32
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	4393      	bics	r3, r2
 8004234:	6023      	str	r3, [r4, #0]
 8004236:	e7f8      	b.n	800422a <_printf_i+0x176>
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	680d      	ldr	r5, [r1, #0]
 800423c:	1d10      	adds	r0, r2, #4
 800423e:	6949      	ldr	r1, [r1, #20]
 8004240:	6018      	str	r0, [r3, #0]
 8004242:	6813      	ldr	r3, [r2, #0]
 8004244:	062e      	lsls	r6, r5, #24
 8004246:	d501      	bpl.n	800424c <_printf_i+0x198>
 8004248:	6019      	str	r1, [r3, #0]
 800424a:	e002      	b.n	8004252 <_printf_i+0x19e>
 800424c:	066d      	lsls	r5, r5, #25
 800424e:	d5fb      	bpl.n	8004248 <_printf_i+0x194>
 8004250:	8019      	strh	r1, [r3, #0]
 8004252:	2300      	movs	r3, #0
 8004254:	9d03      	ldr	r5, [sp, #12]
 8004256:	6123      	str	r3, [r4, #16]
 8004258:	e7bf      	b.n	80041da <_printf_i+0x126>
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	1d11      	adds	r1, r2, #4
 800425e:	6019      	str	r1, [r3, #0]
 8004260:	6815      	ldr	r5, [r2, #0]
 8004262:	2100      	movs	r1, #0
 8004264:	0028      	movs	r0, r5
 8004266:	6862      	ldr	r2, [r4, #4]
 8004268:	f000 f996 	bl	8004598 <memchr>
 800426c:	2800      	cmp	r0, #0
 800426e:	d001      	beq.n	8004274 <_printf_i+0x1c0>
 8004270:	1b40      	subs	r0, r0, r5
 8004272:	6060      	str	r0, [r4, #4]
 8004274:	6863      	ldr	r3, [r4, #4]
 8004276:	6123      	str	r3, [r4, #16]
 8004278:	2300      	movs	r3, #0
 800427a:	9a03      	ldr	r2, [sp, #12]
 800427c:	7013      	strb	r3, [r2, #0]
 800427e:	e7ac      	b.n	80041da <_printf_i+0x126>
 8004280:	002a      	movs	r2, r5
 8004282:	6923      	ldr	r3, [r4, #16]
 8004284:	9906      	ldr	r1, [sp, #24]
 8004286:	9805      	ldr	r0, [sp, #20]
 8004288:	9d07      	ldr	r5, [sp, #28]
 800428a:	47a8      	blx	r5
 800428c:	3001      	adds	r0, #1
 800428e:	d0ae      	beq.n	80041ee <_printf_i+0x13a>
 8004290:	6823      	ldr	r3, [r4, #0]
 8004292:	079b      	lsls	r3, r3, #30
 8004294:	d415      	bmi.n	80042c2 <_printf_i+0x20e>
 8004296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004298:	68e0      	ldr	r0, [r4, #12]
 800429a:	4298      	cmp	r0, r3
 800429c:	daa9      	bge.n	80041f2 <_printf_i+0x13e>
 800429e:	0018      	movs	r0, r3
 80042a0:	e7a7      	b.n	80041f2 <_printf_i+0x13e>
 80042a2:	0022      	movs	r2, r4
 80042a4:	2301      	movs	r3, #1
 80042a6:	9906      	ldr	r1, [sp, #24]
 80042a8:	9805      	ldr	r0, [sp, #20]
 80042aa:	9e07      	ldr	r6, [sp, #28]
 80042ac:	3219      	adds	r2, #25
 80042ae:	47b0      	blx	r6
 80042b0:	3001      	adds	r0, #1
 80042b2:	d09c      	beq.n	80041ee <_printf_i+0x13a>
 80042b4:	3501      	adds	r5, #1
 80042b6:	68e3      	ldr	r3, [r4, #12]
 80042b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042ba:	1a9b      	subs	r3, r3, r2
 80042bc:	42ab      	cmp	r3, r5
 80042be:	dcf0      	bgt.n	80042a2 <_printf_i+0x1ee>
 80042c0:	e7e9      	b.n	8004296 <_printf_i+0x1e2>
 80042c2:	2500      	movs	r5, #0
 80042c4:	e7f7      	b.n	80042b6 <_printf_i+0x202>
 80042c6:	46c0      	nop			@ (mov r8, r8)
 80042c8:	0800479b 	.word	0x0800479b
 80042cc:	080047ac 	.word	0x080047ac

080042d0 <__sflush_r>:
 80042d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042d2:	220c      	movs	r2, #12
 80042d4:	5e8b      	ldrsh	r3, [r1, r2]
 80042d6:	0005      	movs	r5, r0
 80042d8:	000c      	movs	r4, r1
 80042da:	071a      	lsls	r2, r3, #28
 80042dc:	d456      	bmi.n	800438c <__sflush_r+0xbc>
 80042de:	684a      	ldr	r2, [r1, #4]
 80042e0:	2a00      	cmp	r2, #0
 80042e2:	dc02      	bgt.n	80042ea <__sflush_r+0x1a>
 80042e4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80042e6:	2a00      	cmp	r2, #0
 80042e8:	dd4e      	ble.n	8004388 <__sflush_r+0xb8>
 80042ea:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80042ec:	2f00      	cmp	r7, #0
 80042ee:	d04b      	beq.n	8004388 <__sflush_r+0xb8>
 80042f0:	2200      	movs	r2, #0
 80042f2:	2080      	movs	r0, #128	@ 0x80
 80042f4:	682e      	ldr	r6, [r5, #0]
 80042f6:	602a      	str	r2, [r5, #0]
 80042f8:	001a      	movs	r2, r3
 80042fa:	0140      	lsls	r0, r0, #5
 80042fc:	6a21      	ldr	r1, [r4, #32]
 80042fe:	4002      	ands	r2, r0
 8004300:	4203      	tst	r3, r0
 8004302:	d033      	beq.n	800436c <__sflush_r+0x9c>
 8004304:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004306:	89a3      	ldrh	r3, [r4, #12]
 8004308:	075b      	lsls	r3, r3, #29
 800430a:	d506      	bpl.n	800431a <__sflush_r+0x4a>
 800430c:	6863      	ldr	r3, [r4, #4]
 800430e:	1ad2      	subs	r2, r2, r3
 8004310:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <__sflush_r+0x4a>
 8004316:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004318:	1ad2      	subs	r2, r2, r3
 800431a:	2300      	movs	r3, #0
 800431c:	0028      	movs	r0, r5
 800431e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004320:	6a21      	ldr	r1, [r4, #32]
 8004322:	47b8      	blx	r7
 8004324:	89a2      	ldrh	r2, [r4, #12]
 8004326:	1c43      	adds	r3, r0, #1
 8004328:	d106      	bne.n	8004338 <__sflush_r+0x68>
 800432a:	6829      	ldr	r1, [r5, #0]
 800432c:	291d      	cmp	r1, #29
 800432e:	d846      	bhi.n	80043be <__sflush_r+0xee>
 8004330:	4b29      	ldr	r3, [pc, #164]	@ (80043d8 <__sflush_r+0x108>)
 8004332:	410b      	asrs	r3, r1
 8004334:	07db      	lsls	r3, r3, #31
 8004336:	d442      	bmi.n	80043be <__sflush_r+0xee>
 8004338:	2300      	movs	r3, #0
 800433a:	6063      	str	r3, [r4, #4]
 800433c:	6923      	ldr	r3, [r4, #16]
 800433e:	6023      	str	r3, [r4, #0]
 8004340:	04d2      	lsls	r2, r2, #19
 8004342:	d505      	bpl.n	8004350 <__sflush_r+0x80>
 8004344:	1c43      	adds	r3, r0, #1
 8004346:	d102      	bne.n	800434e <__sflush_r+0x7e>
 8004348:	682b      	ldr	r3, [r5, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d100      	bne.n	8004350 <__sflush_r+0x80>
 800434e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004350:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004352:	602e      	str	r6, [r5, #0]
 8004354:	2900      	cmp	r1, #0
 8004356:	d017      	beq.n	8004388 <__sflush_r+0xb8>
 8004358:	0023      	movs	r3, r4
 800435a:	3344      	adds	r3, #68	@ 0x44
 800435c:	4299      	cmp	r1, r3
 800435e:	d002      	beq.n	8004366 <__sflush_r+0x96>
 8004360:	0028      	movs	r0, r5
 8004362:	f7ff fbf7 	bl	8003b54 <_free_r>
 8004366:	2300      	movs	r3, #0
 8004368:	6363      	str	r3, [r4, #52]	@ 0x34
 800436a:	e00d      	b.n	8004388 <__sflush_r+0xb8>
 800436c:	2301      	movs	r3, #1
 800436e:	0028      	movs	r0, r5
 8004370:	47b8      	blx	r7
 8004372:	0002      	movs	r2, r0
 8004374:	1c43      	adds	r3, r0, #1
 8004376:	d1c6      	bne.n	8004306 <__sflush_r+0x36>
 8004378:	682b      	ldr	r3, [r5, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0c3      	beq.n	8004306 <__sflush_r+0x36>
 800437e:	2b1d      	cmp	r3, #29
 8004380:	d001      	beq.n	8004386 <__sflush_r+0xb6>
 8004382:	2b16      	cmp	r3, #22
 8004384:	d11a      	bne.n	80043bc <__sflush_r+0xec>
 8004386:	602e      	str	r6, [r5, #0]
 8004388:	2000      	movs	r0, #0
 800438a:	e01e      	b.n	80043ca <__sflush_r+0xfa>
 800438c:	690e      	ldr	r6, [r1, #16]
 800438e:	2e00      	cmp	r6, #0
 8004390:	d0fa      	beq.n	8004388 <__sflush_r+0xb8>
 8004392:	680f      	ldr	r7, [r1, #0]
 8004394:	600e      	str	r6, [r1, #0]
 8004396:	1bba      	subs	r2, r7, r6
 8004398:	9201      	str	r2, [sp, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	079b      	lsls	r3, r3, #30
 800439e:	d100      	bne.n	80043a2 <__sflush_r+0xd2>
 80043a0:	694a      	ldr	r2, [r1, #20]
 80043a2:	60a2      	str	r2, [r4, #8]
 80043a4:	9b01      	ldr	r3, [sp, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	ddee      	ble.n	8004388 <__sflush_r+0xb8>
 80043aa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80043ac:	0032      	movs	r2, r6
 80043ae:	001f      	movs	r7, r3
 80043b0:	0028      	movs	r0, r5
 80043b2:	9b01      	ldr	r3, [sp, #4]
 80043b4:	6a21      	ldr	r1, [r4, #32]
 80043b6:	47b8      	blx	r7
 80043b8:	2800      	cmp	r0, #0
 80043ba:	dc07      	bgt.n	80043cc <__sflush_r+0xfc>
 80043bc:	89a2      	ldrh	r2, [r4, #12]
 80043be:	2340      	movs	r3, #64	@ 0x40
 80043c0:	2001      	movs	r0, #1
 80043c2:	4313      	orrs	r3, r2
 80043c4:	b21b      	sxth	r3, r3
 80043c6:	81a3      	strh	r3, [r4, #12]
 80043c8:	4240      	negs	r0, r0
 80043ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043cc:	9b01      	ldr	r3, [sp, #4]
 80043ce:	1836      	adds	r6, r6, r0
 80043d0:	1a1b      	subs	r3, r3, r0
 80043d2:	9301      	str	r3, [sp, #4]
 80043d4:	e7e6      	b.n	80043a4 <__sflush_r+0xd4>
 80043d6:	46c0      	nop			@ (mov r8, r8)
 80043d8:	dfbffffe 	.word	0xdfbffffe

080043dc <_fflush_r>:
 80043dc:	690b      	ldr	r3, [r1, #16]
 80043de:	b570      	push	{r4, r5, r6, lr}
 80043e0:	0005      	movs	r5, r0
 80043e2:	000c      	movs	r4, r1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d102      	bne.n	80043ee <_fflush_r+0x12>
 80043e8:	2500      	movs	r5, #0
 80043ea:	0028      	movs	r0, r5
 80043ec:	bd70      	pop	{r4, r5, r6, pc}
 80043ee:	2800      	cmp	r0, #0
 80043f0:	d004      	beq.n	80043fc <_fflush_r+0x20>
 80043f2:	6a03      	ldr	r3, [r0, #32]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <_fflush_r+0x20>
 80043f8:	f7ff fa98 	bl	800392c <__sinit>
 80043fc:	220c      	movs	r2, #12
 80043fe:	5ea3      	ldrsh	r3, [r4, r2]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0f1      	beq.n	80043e8 <_fflush_r+0xc>
 8004404:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004406:	07d2      	lsls	r2, r2, #31
 8004408:	d404      	bmi.n	8004414 <_fflush_r+0x38>
 800440a:	059b      	lsls	r3, r3, #22
 800440c:	d402      	bmi.n	8004414 <_fflush_r+0x38>
 800440e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004410:	f7ff fb9d 	bl	8003b4e <__retarget_lock_acquire_recursive>
 8004414:	0028      	movs	r0, r5
 8004416:	0021      	movs	r1, r4
 8004418:	f7ff ff5a 	bl	80042d0 <__sflush_r>
 800441c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800441e:	0005      	movs	r5, r0
 8004420:	07db      	lsls	r3, r3, #31
 8004422:	d4e2      	bmi.n	80043ea <_fflush_r+0xe>
 8004424:	89a3      	ldrh	r3, [r4, #12]
 8004426:	059b      	lsls	r3, r3, #22
 8004428:	d4df      	bmi.n	80043ea <_fflush_r+0xe>
 800442a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800442c:	f7ff fb90 	bl	8003b50 <__retarget_lock_release_recursive>
 8004430:	e7db      	b.n	80043ea <_fflush_r+0xe>

08004432 <__swbuf_r>:
 8004432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004434:	0006      	movs	r6, r0
 8004436:	000d      	movs	r5, r1
 8004438:	0014      	movs	r4, r2
 800443a:	2800      	cmp	r0, #0
 800443c:	d004      	beq.n	8004448 <__swbuf_r+0x16>
 800443e:	6a03      	ldr	r3, [r0, #32]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <__swbuf_r+0x16>
 8004444:	f7ff fa72 	bl	800392c <__sinit>
 8004448:	69a3      	ldr	r3, [r4, #24]
 800444a:	60a3      	str	r3, [r4, #8]
 800444c:	89a3      	ldrh	r3, [r4, #12]
 800444e:	071b      	lsls	r3, r3, #28
 8004450:	d502      	bpl.n	8004458 <__swbuf_r+0x26>
 8004452:	6923      	ldr	r3, [r4, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d109      	bne.n	800446c <__swbuf_r+0x3a>
 8004458:	0021      	movs	r1, r4
 800445a:	0030      	movs	r0, r6
 800445c:	f000 f82c 	bl	80044b8 <__swsetup_r>
 8004460:	2800      	cmp	r0, #0
 8004462:	d003      	beq.n	800446c <__swbuf_r+0x3a>
 8004464:	2501      	movs	r5, #1
 8004466:	426d      	negs	r5, r5
 8004468:	0028      	movs	r0, r5
 800446a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800446c:	6923      	ldr	r3, [r4, #16]
 800446e:	6820      	ldr	r0, [r4, #0]
 8004470:	b2ef      	uxtb	r7, r5
 8004472:	1ac0      	subs	r0, r0, r3
 8004474:	6963      	ldr	r3, [r4, #20]
 8004476:	b2ed      	uxtb	r5, r5
 8004478:	4283      	cmp	r3, r0
 800447a:	dc05      	bgt.n	8004488 <__swbuf_r+0x56>
 800447c:	0021      	movs	r1, r4
 800447e:	0030      	movs	r0, r6
 8004480:	f7ff ffac 	bl	80043dc <_fflush_r>
 8004484:	2800      	cmp	r0, #0
 8004486:	d1ed      	bne.n	8004464 <__swbuf_r+0x32>
 8004488:	68a3      	ldr	r3, [r4, #8]
 800448a:	3001      	adds	r0, #1
 800448c:	3b01      	subs	r3, #1
 800448e:	60a3      	str	r3, [r4, #8]
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	6022      	str	r2, [r4, #0]
 8004496:	701f      	strb	r7, [r3, #0]
 8004498:	6963      	ldr	r3, [r4, #20]
 800449a:	4283      	cmp	r3, r0
 800449c:	d004      	beq.n	80044a8 <__swbuf_r+0x76>
 800449e:	89a3      	ldrh	r3, [r4, #12]
 80044a0:	07db      	lsls	r3, r3, #31
 80044a2:	d5e1      	bpl.n	8004468 <__swbuf_r+0x36>
 80044a4:	2d0a      	cmp	r5, #10
 80044a6:	d1df      	bne.n	8004468 <__swbuf_r+0x36>
 80044a8:	0021      	movs	r1, r4
 80044aa:	0030      	movs	r0, r6
 80044ac:	f7ff ff96 	bl	80043dc <_fflush_r>
 80044b0:	2800      	cmp	r0, #0
 80044b2:	d0d9      	beq.n	8004468 <__swbuf_r+0x36>
 80044b4:	e7d6      	b.n	8004464 <__swbuf_r+0x32>
	...

080044b8 <__swsetup_r>:
 80044b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004570 <__swsetup_r+0xb8>)
 80044ba:	b570      	push	{r4, r5, r6, lr}
 80044bc:	0005      	movs	r5, r0
 80044be:	6818      	ldr	r0, [r3, #0]
 80044c0:	000c      	movs	r4, r1
 80044c2:	2800      	cmp	r0, #0
 80044c4:	d004      	beq.n	80044d0 <__swsetup_r+0x18>
 80044c6:	6a03      	ldr	r3, [r0, #32]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <__swsetup_r+0x18>
 80044cc:	f7ff fa2e 	bl	800392c <__sinit>
 80044d0:	230c      	movs	r3, #12
 80044d2:	5ee2      	ldrsh	r2, [r4, r3]
 80044d4:	0713      	lsls	r3, r2, #28
 80044d6:	d423      	bmi.n	8004520 <__swsetup_r+0x68>
 80044d8:	06d3      	lsls	r3, r2, #27
 80044da:	d407      	bmi.n	80044ec <__swsetup_r+0x34>
 80044dc:	2309      	movs	r3, #9
 80044de:	602b      	str	r3, [r5, #0]
 80044e0:	2340      	movs	r3, #64	@ 0x40
 80044e2:	2001      	movs	r0, #1
 80044e4:	4313      	orrs	r3, r2
 80044e6:	81a3      	strh	r3, [r4, #12]
 80044e8:	4240      	negs	r0, r0
 80044ea:	e03a      	b.n	8004562 <__swsetup_r+0xaa>
 80044ec:	0752      	lsls	r2, r2, #29
 80044ee:	d513      	bpl.n	8004518 <__swsetup_r+0x60>
 80044f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044f2:	2900      	cmp	r1, #0
 80044f4:	d008      	beq.n	8004508 <__swsetup_r+0x50>
 80044f6:	0023      	movs	r3, r4
 80044f8:	3344      	adds	r3, #68	@ 0x44
 80044fa:	4299      	cmp	r1, r3
 80044fc:	d002      	beq.n	8004504 <__swsetup_r+0x4c>
 80044fe:	0028      	movs	r0, r5
 8004500:	f7ff fb28 	bl	8003b54 <_free_r>
 8004504:	2300      	movs	r3, #0
 8004506:	6363      	str	r3, [r4, #52]	@ 0x34
 8004508:	2224      	movs	r2, #36	@ 0x24
 800450a:	89a3      	ldrh	r3, [r4, #12]
 800450c:	4393      	bics	r3, r2
 800450e:	81a3      	strh	r3, [r4, #12]
 8004510:	2300      	movs	r3, #0
 8004512:	6063      	str	r3, [r4, #4]
 8004514:	6923      	ldr	r3, [r4, #16]
 8004516:	6023      	str	r3, [r4, #0]
 8004518:	2308      	movs	r3, #8
 800451a:	89a2      	ldrh	r2, [r4, #12]
 800451c:	4313      	orrs	r3, r2
 800451e:	81a3      	strh	r3, [r4, #12]
 8004520:	6923      	ldr	r3, [r4, #16]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10b      	bne.n	800453e <__swsetup_r+0x86>
 8004526:	21a0      	movs	r1, #160	@ 0xa0
 8004528:	2280      	movs	r2, #128	@ 0x80
 800452a:	89a3      	ldrh	r3, [r4, #12]
 800452c:	0089      	lsls	r1, r1, #2
 800452e:	0092      	lsls	r2, r2, #2
 8004530:	400b      	ands	r3, r1
 8004532:	4293      	cmp	r3, r2
 8004534:	d003      	beq.n	800453e <__swsetup_r+0x86>
 8004536:	0021      	movs	r1, r4
 8004538:	0028      	movs	r0, r5
 800453a:	f000 f863 	bl	8004604 <__smakebuf_r>
 800453e:	230c      	movs	r3, #12
 8004540:	5ee2      	ldrsh	r2, [r4, r3]
 8004542:	2101      	movs	r1, #1
 8004544:	0013      	movs	r3, r2
 8004546:	400b      	ands	r3, r1
 8004548:	420a      	tst	r2, r1
 800454a:	d00b      	beq.n	8004564 <__swsetup_r+0xac>
 800454c:	2300      	movs	r3, #0
 800454e:	60a3      	str	r3, [r4, #8]
 8004550:	6963      	ldr	r3, [r4, #20]
 8004552:	425b      	negs	r3, r3
 8004554:	61a3      	str	r3, [r4, #24]
 8004556:	2000      	movs	r0, #0
 8004558:	6923      	ldr	r3, [r4, #16]
 800455a:	4283      	cmp	r3, r0
 800455c:	d101      	bne.n	8004562 <__swsetup_r+0xaa>
 800455e:	0613      	lsls	r3, r2, #24
 8004560:	d4be      	bmi.n	80044e0 <__swsetup_r+0x28>
 8004562:	bd70      	pop	{r4, r5, r6, pc}
 8004564:	0791      	lsls	r1, r2, #30
 8004566:	d400      	bmi.n	800456a <__swsetup_r+0xb2>
 8004568:	6963      	ldr	r3, [r4, #20]
 800456a:	60a3      	str	r3, [r4, #8]
 800456c:	e7f3      	b.n	8004556 <__swsetup_r+0x9e>
 800456e:	46c0      	nop			@ (mov r8, r8)
 8004570:	20000020 	.word	0x20000020

08004574 <_sbrk_r>:
 8004574:	2300      	movs	r3, #0
 8004576:	b570      	push	{r4, r5, r6, lr}
 8004578:	4d06      	ldr	r5, [pc, #24]	@ (8004594 <_sbrk_r+0x20>)
 800457a:	0004      	movs	r4, r0
 800457c:	0008      	movs	r0, r1
 800457e:	602b      	str	r3, [r5, #0]
 8004580:	f7fc f970 	bl	8000864 <_sbrk>
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	d103      	bne.n	8004590 <_sbrk_r+0x1c>
 8004588:	682b      	ldr	r3, [r5, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d000      	beq.n	8004590 <_sbrk_r+0x1c>
 800458e:	6023      	str	r3, [r4, #0]
 8004590:	bd70      	pop	{r4, r5, r6, pc}
 8004592:	46c0      	nop			@ (mov r8, r8)
 8004594:	200003bc 	.word	0x200003bc

08004598 <memchr>:
 8004598:	b2c9      	uxtb	r1, r1
 800459a:	1882      	adds	r2, r0, r2
 800459c:	4290      	cmp	r0, r2
 800459e:	d101      	bne.n	80045a4 <memchr+0xc>
 80045a0:	2000      	movs	r0, #0
 80045a2:	4770      	bx	lr
 80045a4:	7803      	ldrb	r3, [r0, #0]
 80045a6:	428b      	cmp	r3, r1
 80045a8:	d0fb      	beq.n	80045a2 <memchr+0xa>
 80045aa:	3001      	adds	r0, #1
 80045ac:	e7f6      	b.n	800459c <memchr+0x4>
	...

080045b0 <__swhatbuf_r>:
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	000e      	movs	r6, r1
 80045b4:	001d      	movs	r5, r3
 80045b6:	230e      	movs	r3, #14
 80045b8:	5ec9      	ldrsh	r1, [r1, r3]
 80045ba:	0014      	movs	r4, r2
 80045bc:	b096      	sub	sp, #88	@ 0x58
 80045be:	2900      	cmp	r1, #0
 80045c0:	da0c      	bge.n	80045dc <__swhatbuf_r+0x2c>
 80045c2:	89b2      	ldrh	r2, [r6, #12]
 80045c4:	2380      	movs	r3, #128	@ 0x80
 80045c6:	0011      	movs	r1, r2
 80045c8:	4019      	ands	r1, r3
 80045ca:	421a      	tst	r2, r3
 80045cc:	d114      	bne.n	80045f8 <__swhatbuf_r+0x48>
 80045ce:	2380      	movs	r3, #128	@ 0x80
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	2000      	movs	r0, #0
 80045d4:	6029      	str	r1, [r5, #0]
 80045d6:	6023      	str	r3, [r4, #0]
 80045d8:	b016      	add	sp, #88	@ 0x58
 80045da:	bd70      	pop	{r4, r5, r6, pc}
 80045dc:	466a      	mov	r2, sp
 80045de:	f000 f853 	bl	8004688 <_fstat_r>
 80045e2:	2800      	cmp	r0, #0
 80045e4:	dbed      	blt.n	80045c2 <__swhatbuf_r+0x12>
 80045e6:	23f0      	movs	r3, #240	@ 0xf0
 80045e8:	9901      	ldr	r1, [sp, #4]
 80045ea:	021b      	lsls	r3, r3, #8
 80045ec:	4019      	ands	r1, r3
 80045ee:	4b04      	ldr	r3, [pc, #16]	@ (8004600 <__swhatbuf_r+0x50>)
 80045f0:	18c9      	adds	r1, r1, r3
 80045f2:	424b      	negs	r3, r1
 80045f4:	4159      	adcs	r1, r3
 80045f6:	e7ea      	b.n	80045ce <__swhatbuf_r+0x1e>
 80045f8:	2100      	movs	r1, #0
 80045fa:	2340      	movs	r3, #64	@ 0x40
 80045fc:	e7e9      	b.n	80045d2 <__swhatbuf_r+0x22>
 80045fe:	46c0      	nop			@ (mov r8, r8)
 8004600:	ffffe000 	.word	0xffffe000

08004604 <__smakebuf_r>:
 8004604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004606:	2602      	movs	r6, #2
 8004608:	898b      	ldrh	r3, [r1, #12]
 800460a:	0005      	movs	r5, r0
 800460c:	000c      	movs	r4, r1
 800460e:	b085      	sub	sp, #20
 8004610:	4233      	tst	r3, r6
 8004612:	d007      	beq.n	8004624 <__smakebuf_r+0x20>
 8004614:	0023      	movs	r3, r4
 8004616:	3347      	adds	r3, #71	@ 0x47
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	6123      	str	r3, [r4, #16]
 800461c:	2301      	movs	r3, #1
 800461e:	6163      	str	r3, [r4, #20]
 8004620:	b005      	add	sp, #20
 8004622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004624:	ab03      	add	r3, sp, #12
 8004626:	aa02      	add	r2, sp, #8
 8004628:	f7ff ffc2 	bl	80045b0 <__swhatbuf_r>
 800462c:	9f02      	ldr	r7, [sp, #8]
 800462e:	9001      	str	r0, [sp, #4]
 8004630:	0039      	movs	r1, r7
 8004632:	0028      	movs	r0, r5
 8004634:	f7ff fafa 	bl	8003c2c <_malloc_r>
 8004638:	2800      	cmp	r0, #0
 800463a:	d108      	bne.n	800464e <__smakebuf_r+0x4a>
 800463c:	220c      	movs	r2, #12
 800463e:	5ea3      	ldrsh	r3, [r4, r2]
 8004640:	059a      	lsls	r2, r3, #22
 8004642:	d4ed      	bmi.n	8004620 <__smakebuf_r+0x1c>
 8004644:	2203      	movs	r2, #3
 8004646:	4393      	bics	r3, r2
 8004648:	431e      	orrs	r6, r3
 800464a:	81a6      	strh	r6, [r4, #12]
 800464c:	e7e2      	b.n	8004614 <__smakebuf_r+0x10>
 800464e:	2380      	movs	r3, #128	@ 0x80
 8004650:	89a2      	ldrh	r2, [r4, #12]
 8004652:	6020      	str	r0, [r4, #0]
 8004654:	4313      	orrs	r3, r2
 8004656:	81a3      	strh	r3, [r4, #12]
 8004658:	9b03      	ldr	r3, [sp, #12]
 800465a:	6120      	str	r0, [r4, #16]
 800465c:	6167      	str	r7, [r4, #20]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00c      	beq.n	800467c <__smakebuf_r+0x78>
 8004662:	0028      	movs	r0, r5
 8004664:	230e      	movs	r3, #14
 8004666:	5ee1      	ldrsh	r1, [r4, r3]
 8004668:	f000 f820 	bl	80046ac <_isatty_r>
 800466c:	2800      	cmp	r0, #0
 800466e:	d005      	beq.n	800467c <__smakebuf_r+0x78>
 8004670:	2303      	movs	r3, #3
 8004672:	89a2      	ldrh	r2, [r4, #12]
 8004674:	439a      	bics	r2, r3
 8004676:	3b02      	subs	r3, #2
 8004678:	4313      	orrs	r3, r2
 800467a:	81a3      	strh	r3, [r4, #12]
 800467c:	89a3      	ldrh	r3, [r4, #12]
 800467e:	9a01      	ldr	r2, [sp, #4]
 8004680:	4313      	orrs	r3, r2
 8004682:	81a3      	strh	r3, [r4, #12]
 8004684:	e7cc      	b.n	8004620 <__smakebuf_r+0x1c>
	...

08004688 <_fstat_r>:
 8004688:	2300      	movs	r3, #0
 800468a:	b570      	push	{r4, r5, r6, lr}
 800468c:	4d06      	ldr	r5, [pc, #24]	@ (80046a8 <_fstat_r+0x20>)
 800468e:	0004      	movs	r4, r0
 8004690:	0008      	movs	r0, r1
 8004692:	0011      	movs	r1, r2
 8004694:	602b      	str	r3, [r5, #0]
 8004696:	f7fe ff3d 	bl	8003514 <_fstat>
 800469a:	1c43      	adds	r3, r0, #1
 800469c:	d103      	bne.n	80046a6 <_fstat_r+0x1e>
 800469e:	682b      	ldr	r3, [r5, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d000      	beq.n	80046a6 <_fstat_r+0x1e>
 80046a4:	6023      	str	r3, [r4, #0]
 80046a6:	bd70      	pop	{r4, r5, r6, pc}
 80046a8:	200003bc 	.word	0x200003bc

080046ac <_isatty_r>:
 80046ac:	2300      	movs	r3, #0
 80046ae:	b570      	push	{r4, r5, r6, lr}
 80046b0:	4d06      	ldr	r5, [pc, #24]	@ (80046cc <_isatty_r+0x20>)
 80046b2:	0004      	movs	r4, r0
 80046b4:	0008      	movs	r0, r1
 80046b6:	602b      	str	r3, [r5, #0]
 80046b8:	f7ff f88a 	bl	80037d0 <_isatty>
 80046bc:	1c43      	adds	r3, r0, #1
 80046be:	d103      	bne.n	80046c8 <_isatty_r+0x1c>
 80046c0:	682b      	ldr	r3, [r5, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d000      	beq.n	80046c8 <_isatty_r+0x1c>
 80046c6:	6023      	str	r3, [r4, #0]
 80046c8:	bd70      	pop	{r4, r5, r6, pc}
 80046ca:	46c0      	nop			@ (mov r8, r8)
 80046cc:	200003bc 	.word	0x200003bc

080046d0 <_init>:
 80046d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d2:	46c0      	nop			@ (mov r8, r8)
 80046d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d6:	bc08      	pop	{r3}
 80046d8:	469e      	mov	lr, r3
 80046da:	4770      	bx	lr

080046dc <_fini>:
 80046dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046de:	46c0      	nop			@ (mov r8, r8)
 80046e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046e2:	bc08      	pop	{r3}
 80046e4:	469e      	mov	lr, r3
 80046e6:	4770      	bx	lr
