
MD-test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000442c  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080044e4  080044e4  000054e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045b0  080045b0  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  080045b0  080045b0  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045b0  080045b0  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045b0  080045b0  000055b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045b4  080045b4  000055b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080045b8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000010  080045c8  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  080045c8  00006248  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef29  00000000  00000000  00006038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e2d  00000000  00000000  00014f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00016d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a73  00000000  00000000  00017ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000155f2  00000000  00000000  00018523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc1d  00000000  00000000  0002db15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a321  00000000  00000000  0003d732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7a53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fbc  00000000  00000000  000c7a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000caa54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080044cc 	.word	0x080044cc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	080044cc 	.word	0x080044cc

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
    if (htim == &htim3){
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d104      	bne.n	8000406 <HAL_TIM_PeriodElapsedCallback+0x1a>
        u10_counter++;
 80003fc:	4b05      	ldr	r3, [pc, #20]	@ (8000414 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	1c5a      	adds	r2, r3, #1
 8000402:	4b04      	ldr	r3, [pc, #16]	@ (8000414 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000404:	601a      	str	r2, [r3, #0]
    }
}
 8000406:	46c0      	nop			@ (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	b002      	add	sp, #8
 800040c:	bd80      	pop	{r7, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)
 8000410:	2000002c 	.word	0x2000002c
 8000414:	200001b4 	.word	0x200001b4

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041e:	f000 fce1 	bl	8000de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000422:	f000 f8e3 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000426:	f000 fa63 	bl	80008f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800042a:	f000 fa43 	bl	80008b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800042e:	f000 fa0d 	bl	800084c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000432:	f000 f92f 	bl	8000694 <MX_TIM3_Init>
  MX_TIM16_Init();
 8000436:	f000 f981 	bl	800073c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800043a:	4b5e      	ldr	r3, [pc, #376]	@ (80005b4 <main+0x19c>)
 800043c:	0018      	movs	r0, r3
 800043e:	f001 ff9d 	bl	800237c <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000442:	4b5d      	ldr	r3, [pc, #372]	@ (80005b8 <main+0x1a0>)
 8000444:	2100      	movs	r1, #0
 8000446:	0018      	movs	r0, r3
 8000448:	f002 f846 	bl	80024d8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim16, TIM_CHANNEL_1);
 800044c:	4b5a      	ldr	r3, [pc, #360]	@ (80005b8 <main+0x1a0>)
 800044e:	2100      	movs	r1, #0
 8000450:	0018      	movs	r0, r3
 8000452:	f002 ffed 	bl	8003430 <HAL_TIMEx_PWMN_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t Ltika_pcounter;
  Ltika_pcounter = u10_counter;
 8000456:	4b59      	ldr	r3, [pc, #356]	@ (80005bc <main+0x1a4>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	607b      	str	r3, [r7, #4]

  uint32_t duty_pcounter;
  duty_pcounter = u10_counter;
 800045c:	4b57      	ldr	r3, [pc, #348]	@ (80005bc <main+0x1a4>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	603b      	str	r3, [r7, #0]

  HAL_UART_Receive_DMA(&huart2,rxBuf,sizeof(rxBuf));
 8000462:	4957      	ldr	r1, [pc, #348]	@ (80005c0 <main+0x1a8>)
 8000464:	4b57      	ldr	r3, [pc, #348]	@ (80005c4 <main+0x1ac>)
 8000466:	2280      	movs	r2, #128	@ 0x80
 8000468:	0018      	movs	r0, r3
 800046a:	f003 fa09 	bl	8003880 <HAL_UART_Receive_DMA>

  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, 1);
 800046e:	23a0      	movs	r3, #160	@ 0xa0
 8000470:	05db      	lsls	r3, r3, #23
 8000472:	2201      	movs	r2, #1
 8000474:	2120      	movs	r1, #32
 8000476:	0018      	movs	r0, r3
 8000478:	f001 f9eb 	bl	8001852 <HAL_GPIO_WritePin>
  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, duty);
 800047c:	4b52      	ldr	r3, [pc, #328]	@ (80005c8 <main+0x1b0>)
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	4b4d      	ldr	r3, [pc, #308]	@ (80005b8 <main+0x1a0>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	635a      	str	r2, [r3, #52]	@ 0x34
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  readBuf(&huart2, rxBuf, 128, rxData, 2, ID);
 8000486:	4b51      	ldr	r3, [pc, #324]	@ (80005cc <main+0x1b4>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	001a      	movs	r2, r3
 800048c:	4b50      	ldr	r3, [pc, #320]	@ (80005d0 <main+0x1b8>)
 800048e:	494c      	ldr	r1, [pc, #304]	@ (80005c0 <main+0x1a8>)
 8000490:	484c      	ldr	r0, [pc, #304]	@ (80005c4 <main+0x1ac>)
 8000492:	9201      	str	r2, [sp, #4]
 8000494:	2202      	movs	r2, #2
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	2280      	movs	r2, #128	@ 0x80
 800049a:	f000 faa3 	bl	80009e4 <readBuf>


	  goalSpeed = rxData[0] + rxData[1]*100;
 800049e:	4b4c      	ldr	r3, [pc, #304]	@ (80005d0 <main+0x1b8>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	001a      	movs	r2, r3
 80004a4:	4b4a      	ldr	r3, [pc, #296]	@ (80005d0 <main+0x1b8>)
 80004a6:	785b      	ldrb	r3, [r3, #1]
 80004a8:	0019      	movs	r1, r3
 80004aa:	2364      	movs	r3, #100	@ 0x64
 80004ac:	434b      	muls	r3, r1
 80004ae:	18d2      	adds	r2, r2, r3
 80004b0:	4b48      	ldr	r3, [pc, #288]	@ (80005d4 <main+0x1bc>)
 80004b2:	601a      	str	r2, [r3, #0]

	  //nowSpeed取�?
	  nowSpeed = duty*10000/1280;
 80004b4:	4b44      	ldr	r3, [pc, #272]	@ (80005c8 <main+0x1b0>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a47      	ldr	r2, [pc, #284]	@ (80005d8 <main+0x1c0>)
 80004ba:	4353      	muls	r3, r2
 80004bc:	22a0      	movs	r2, #160	@ 0xa0
 80004be:	00d1      	lsls	r1, r2, #3
 80004c0:	0018      	movs	r0, r3
 80004c2:	f7ff fea7 	bl	8000214 <__divsi3>
 80004c6:	0003      	movs	r3, r0
 80004c8:	001a      	movs	r2, r3
 80004ca:	4b44      	ldr	r3, [pc, #272]	@ (80005dc <main+0x1c4>)
 80004cc:	601a      	str	r2, [r3, #0]

	  if(goalSpeed < nowSpeed){
 80004ce:	4b41      	ldr	r3, [pc, #260]	@ (80005d4 <main+0x1bc>)
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	4b42      	ldr	r3, [pc, #264]	@ (80005dc <main+0x1c4>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	429a      	cmp	r2, r3
 80004d8:	da0e      	bge.n	80004f8 <main+0xe0>
		  if((u10_counter - duty_pcounter) > 50){
 80004da:	4b38      	ldr	r3, [pc, #224]	@ (80005bc <main+0x1a4>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	1ad3      	subs	r3, r2, r3
 80004e2:	2b32      	cmp	r3, #50	@ 0x32
 80004e4:	d921      	bls.n	800052a <main+0x112>
			  duty--;
 80004e6:	4b38      	ldr	r3, [pc, #224]	@ (80005c8 <main+0x1b0>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	1e5a      	subs	r2, r3, #1
 80004ec:	4b36      	ldr	r3, [pc, #216]	@ (80005c8 <main+0x1b0>)
 80004ee:	601a      	str	r2, [r3, #0]
			  duty_pcounter = u10_counter;
 80004f0:	4b32      	ldr	r3, [pc, #200]	@ (80005bc <main+0x1a4>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	603b      	str	r3, [r7, #0]
 80004f6:	e018      	b.n	800052a <main+0x112>
		  }
	  }else if(goalSpeed > nowSpeed){
 80004f8:	4b36      	ldr	r3, [pc, #216]	@ (80005d4 <main+0x1bc>)
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	4b37      	ldr	r3, [pc, #220]	@ (80005dc <main+0x1c4>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	429a      	cmp	r2, r3
 8000502:	dd0e      	ble.n	8000522 <main+0x10a>
		  if((u10_counter - duty_pcounter) > 50){
 8000504:	4b2d      	ldr	r3, [pc, #180]	@ (80005bc <main+0x1a4>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	1ad3      	subs	r3, r2, r3
 800050c:	2b32      	cmp	r3, #50	@ 0x32
 800050e:	d90c      	bls.n	800052a <main+0x112>
			  duty++;
 8000510:	4b2d      	ldr	r3, [pc, #180]	@ (80005c8 <main+0x1b0>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	1c5a      	adds	r2, r3, #1
 8000516:	4b2c      	ldr	r3, [pc, #176]	@ (80005c8 <main+0x1b0>)
 8000518:	601a      	str	r2, [r3, #0]
			  duty_pcounter = u10_counter;
 800051a:	4b28      	ldr	r3, [pc, #160]	@ (80005bc <main+0x1a4>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	e003      	b.n	800052a <main+0x112>
		  }
	  }else{
		  duty = duty;
 8000522:	4b29      	ldr	r3, [pc, #164]	@ (80005c8 <main+0x1b0>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	4b28      	ldr	r3, [pc, #160]	@ (80005c8 <main+0x1b0>)
 8000528:	601a      	str	r2, [r3, #0]
	  }

	  if(duty > 1260){duty = 1260;}//duty制�?
 800052a:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <main+0x1b0>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a2c      	ldr	r2, [pc, #176]	@ (80005e0 <main+0x1c8>)
 8000530:	4293      	cmp	r3, r2
 8000532:	dd03      	ble.n	800053c <main+0x124>
 8000534:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <main+0x1b0>)
 8000536:	4a2a      	ldr	r2, [pc, #168]	@ (80005e0 <main+0x1c8>)
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	e00b      	b.n	8000554 <main+0x13c>
	  else if(duty < 20){duty = 20;}
 800053c:	4b22      	ldr	r3, [pc, #136]	@ (80005c8 <main+0x1b0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b13      	cmp	r3, #19
 8000542:	dc03      	bgt.n	800054c <main+0x134>
 8000544:	4b20      	ldr	r3, [pc, #128]	@ (80005c8 <main+0x1b0>)
 8000546:	2214      	movs	r2, #20
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	e003      	b.n	8000554 <main+0x13c>
	  else{duty = duty;}
 800054c:	4b1e      	ldr	r3, [pc, #120]	@ (80005c8 <main+0x1b0>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <main+0x1b0>)
 8000552:	601a      	str	r2, [r3, #0]

	  if(HAL_GPIO_ReadPin(SLSW_GPIO_Port, SLSW_Pin) == 1){//スタートスイ�?チ読み込み
 8000554:	23a0      	movs	r3, #160	@ 0xa0
 8000556:	05db      	lsls	r3, r3, #23
 8000558:	2102      	movs	r1, #2
 800055a:	0018      	movs	r0, r3
 800055c:	f001 f95c 	bl	8001818 <HAL_GPIO_ReadPin>
 8000560:	0003      	movs	r3, r0
 8000562:	2b01      	cmp	r3, #1
 8000564:	d10c      	bne.n	8000580 <main+0x168>
		  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, 1);//シャ�?トダウン解除
 8000566:	23a0      	movs	r3, #160	@ 0xa0
 8000568:	05db      	lsls	r3, r3, #23
 800056a:	2201      	movs	r2, #1
 800056c:	2120      	movs	r1, #32
 800056e:	0018      	movs	r0, r3
 8000570:	f001 f96f 	bl	8001852 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, duty);//duty代入
 8000574:	4b14      	ldr	r3, [pc, #80]	@ (80005c8 <main+0x1b0>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b0f      	ldr	r3, [pc, #60]	@ (80005b8 <main+0x1a0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	635a      	str	r2, [r3, #52]	@ 0x34
 800057e:	e008      	b.n	8000592 <main+0x17a>
	  }else{
		  duty = 640;//速度0に設�?
 8000580:	4b11      	ldr	r3, [pc, #68]	@ (80005c8 <main+0x1b0>)
 8000582:	22a0      	movs	r2, #160	@ 0xa0
 8000584:	0092      	lsls	r2, r2, #2
 8000586:	601a      	str	r2, [r3, #0]
//		  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, 0);
		  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, duty);
 8000588:	4b0f      	ldr	r3, [pc, #60]	@ (80005c8 <main+0x1b0>)
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	4b0a      	ldr	r3, [pc, #40]	@ (80005b8 <main+0x1a0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	635a      	str	r2, [r3, #52]	@ 0x34
	  }

	  if(u10_counter - Ltika_pcounter > 100000){
 8000592:	4b0a      	ldr	r3, [pc, #40]	@ (80005bc <main+0x1a4>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	4a12      	ldr	r2, [pc, #72]	@ (80005e4 <main+0x1cc>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d800      	bhi.n	80005a2 <main+0x18a>
 80005a0:	e771      	b.n	8000486 <main+0x6e>
	  	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005a2:	4b11      	ldr	r3, [pc, #68]	@ (80005e8 <main+0x1d0>)
 80005a4:	2180      	movs	r1, #128	@ 0x80
 80005a6:	0018      	movs	r0, r3
 80005a8:	f001 f970 	bl	800188c <HAL_GPIO_TogglePin>
    	Ltika_pcounter = u10_counter;
 80005ac:	4b03      	ldr	r3, [pc, #12]	@ (80005bc <main+0x1a4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	607b      	str	r3, [r7, #4]
	  readBuf(&huart2, rxBuf, 128, rxData, 2, ID);
 80005b2:	e768      	b.n	8000486 <main+0x6e>
 80005b4:	2000002c 	.word	0x2000002c
 80005b8:	20000078 	.word	0x20000078
 80005bc:	200001b4 	.word	0x200001b4
 80005c0:	200001b8 	.word	0x200001b8
 80005c4:	200000c4 	.word	0x200000c4
 80005c8:	20000000 	.word	0x20000000
 80005cc:	2000023a 	.word	0x2000023a
 80005d0:	20000238 	.word	0x20000238
 80005d4:	2000023c 	.word	0x2000023c
 80005d8:	00002710 	.word	0x00002710
 80005dc:	20000240 	.word	0x20000240
 80005e0:	000004ec 	.word	0x000004ec
 80005e4:	000186a0 	.word	0x000186a0
 80005e8:	50000400 	.word	0x50000400

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b093      	sub	sp, #76	@ 0x4c
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	2414      	movs	r4, #20
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	0018      	movs	r0, r3
 80005f8:	2334      	movs	r3, #52	@ 0x34
 80005fa:	001a      	movs	r2, r3
 80005fc:	2100      	movs	r1, #0
 80005fe:	f003 ff39 	bl	8004474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	0018      	movs	r0, r3
 8000606:	2310      	movs	r3, #16
 8000608:	001a      	movs	r2, r3
 800060a:	2100      	movs	r1, #0
 800060c:	f003 ff32 	bl	8004474 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000610:	2380      	movs	r3, #128	@ 0x80
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	0018      	movs	r0, r3
 8000616:	f001 f955 	bl	80018c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061a:	193b      	adds	r3, r7, r4
 800061c:	2201      	movs	r2, #1
 800061e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000620:	193b      	adds	r3, r7, r4
 8000622:	22a0      	movs	r2, #160	@ 0xa0
 8000624:	02d2      	lsls	r2, r2, #11
 8000626:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	0021      	movs	r1, r4
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2202      	movs	r2, #2
 800062e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2203      	movs	r2, #3
 8000634:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2200      	movs	r2, #0
 800063a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2208      	movs	r2, #8
 8000640:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2280      	movs	r2, #128	@ 0x80
 8000646:	0292      	lsls	r2, r2, #10
 8000648:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2280      	movs	r2, #128	@ 0x80
 800064e:	0592      	lsls	r2, r2, #22
 8000650:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	187b      	adds	r3, r7, r1
 8000654:	0018      	movs	r0, r3
 8000656:	f001 f981 	bl	800195c <HAL_RCC_OscConfig>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800065e:	f000 fa1e 	bl	8000a9e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2207      	movs	r2, #7
 8000666:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2202      	movs	r2, #2
 800066c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2102      	movs	r1, #2
 800067e:	0018      	movs	r0, r3
 8000680:	f001 fc7c 	bl	8001f7c <HAL_RCC_ClockConfig>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000688:	f000 fa09 	bl	8000a9e <Error_Handler>
  }
}
 800068c:	46c0      	nop			@ (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	b013      	add	sp, #76	@ 0x4c
 8000692:	bd90      	pop	{r4, r7, pc}

08000694 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800069a:	2310      	movs	r3, #16
 800069c:	18fb      	adds	r3, r7, r3
 800069e:	0018      	movs	r0, r3
 80006a0:	2310      	movs	r3, #16
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f003 fee5 	bl	8004474 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	0018      	movs	r0, r3
 80006ae:	230c      	movs	r3, #12
 80006b0:	001a      	movs	r2, r3
 80006b2:	2100      	movs	r1, #0
 80006b4:	f003 fede 	bl	8004474 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000734 <MX_TIM3_Init+0xa0>)
 80006ba:	4a1f      	ldr	r2, [pc, #124]	@ (8000738 <MX_TIM3_Init+0xa4>)
 80006bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80006be:	4b1d      	ldr	r3, [pc, #116]	@ (8000734 <MX_TIM3_Init+0xa0>)
 80006c0:	223f      	movs	r2, #63	@ 0x3f
 80006c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <MX_TIM3_Init+0xa0>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 80006ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000734 <MX_TIM3_Init+0xa0>)
 80006cc:	2209      	movs	r2, #9
 80006ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d0:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <MX_TIM3_Init+0xa0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d6:	4b17      	ldr	r3, [pc, #92]	@ (8000734 <MX_TIM3_Init+0xa0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006dc:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <MX_TIM3_Init+0xa0>)
 80006de:	0018      	movs	r0, r3
 80006e0:	f001 fdf4 	bl	80022cc <HAL_TIM_Base_Init>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80006e8:	f000 f9d9 	bl	8000a9e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ec:	2110      	movs	r1, #16
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2280      	movs	r2, #128	@ 0x80
 80006f2:	0152      	lsls	r2, r2, #5
 80006f4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006f6:	187a      	adds	r2, r7, r1
 80006f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <MX_TIM3_Init+0xa0>)
 80006fa:	0011      	movs	r1, r2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f002 f9cb 	bl	8002a98 <HAL_TIM_ConfigClockSource>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000706:	f000 f9ca 	bl	8000a9e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000716:	1d3a      	adds	r2, r7, #4
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <MX_TIM3_Init+0xa0>)
 800071a:	0011      	movs	r1, r2
 800071c:	0018      	movs	r0, r3
 800071e:	f002 ff1f 	bl	8003560 <HAL_TIMEx_MasterConfigSynchronization>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d001      	beq.n	800072a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000726:	f000 f9ba 	bl	8000a9e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b008      	add	sp, #32
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	2000002c 	.word	0x2000002c
 8000738:	40000400 	.word	0x40000400

0800073c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	@ 0x50
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000742:	2334      	movs	r3, #52	@ 0x34
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	0018      	movs	r0, r3
 8000748:	231c      	movs	r3, #28
 800074a:	001a      	movs	r2, r3
 800074c:	2100      	movs	r1, #0
 800074e:	f003 fe91 	bl	8004474 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000752:	003b      	movs	r3, r7
 8000754:	0018      	movs	r0, r3
 8000756:	2334      	movs	r3, #52	@ 0x34
 8000758:	001a      	movs	r2, r3
 800075a:	2100      	movs	r1, #0
 800075c:	f003 fe8a 	bl	8004474 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000760:	4b37      	ldr	r3, [pc, #220]	@ (8000840 <MX_TIM16_Init+0x104>)
 8000762:	4a38      	ldr	r2, [pc, #224]	@ (8000844 <MX_TIM16_Init+0x108>)
 8000764:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000766:	4b36      	ldr	r3, [pc, #216]	@ (8000840 <MX_TIM16_Init+0x104>)
 8000768:	2200      	movs	r2, #0
 800076a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076c:	4b34      	ldr	r3, [pc, #208]	@ (8000840 <MX_TIM16_Init+0x104>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1280-1;
 8000772:	4b33      	ldr	r3, [pc, #204]	@ (8000840 <MX_TIM16_Init+0x104>)
 8000774:	4a34      	ldr	r2, [pc, #208]	@ (8000848 <MX_TIM16_Init+0x10c>)
 8000776:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000778:	4b31      	ldr	r3, [pc, #196]	@ (8000840 <MX_TIM16_Init+0x104>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800077e:	4b30      	ldr	r3, [pc, #192]	@ (8000840 <MX_TIM16_Init+0x104>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000784:	4b2e      	ldr	r3, [pc, #184]	@ (8000840 <MX_TIM16_Init+0x104>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800078a:	4b2d      	ldr	r3, [pc, #180]	@ (8000840 <MX_TIM16_Init+0x104>)
 800078c:	0018      	movs	r0, r3
 800078e:	f001 fd9d 	bl	80022cc <HAL_TIM_Base_Init>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000796:	f000 f982 	bl	8000a9e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800079a:	4b29      	ldr	r3, [pc, #164]	@ (8000840 <MX_TIM16_Init+0x104>)
 800079c:	0018      	movs	r0, r3
 800079e:	f001 fe3b 	bl	8002418 <HAL_TIM_PWM_Init>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 80007a6:	f000 f97a 	bl	8000a9e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007aa:	2134      	movs	r1, #52	@ 0x34
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2260      	movs	r2, #96	@ 0x60
 80007b0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d6:	1879      	adds	r1, r7, r1
 80007d8:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <MX_TIM16_Init+0x104>)
 80007da:	2200      	movs	r2, #0
 80007dc:	0018      	movs	r0, r3
 80007de:	f002 f85b 	bl	8002898 <HAL_TIM_PWM_ConfigChannel>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 80007e6:	f000 f95a 	bl	8000a9e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007ea:	003b      	movs	r3, r7
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007f0:	003b      	movs	r3, r7
 80007f2:	2200      	movs	r2, #0
 80007f4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007f6:	003b      	movs	r3, r7
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007fc:	003b      	movs	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000802:	003b      	movs	r3, r7
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000808:	003b      	movs	r3, r7
 800080a:	2280      	movs	r2, #128	@ 0x80
 800080c:	0192      	lsls	r2, r2, #6
 800080e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000810:	003b      	movs	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000816:	003b      	movs	r3, r7
 8000818:	2200      	movs	r2, #0
 800081a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800081c:	003a      	movs	r2, r7
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <MX_TIM16_Init+0x104>)
 8000820:	0011      	movs	r1, r2
 8000822:	0018      	movs	r0, r3
 8000824:	f002 fefe 	bl	8003624 <HAL_TIMEx_ConfigBreakDeadTime>
 8000828:	1e03      	subs	r3, r0, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 800082c:	f000 f937 	bl	8000a9e <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000830:	4b03      	ldr	r3, [pc, #12]	@ (8000840 <MX_TIM16_Init+0x104>)
 8000832:	0018      	movs	r0, r3
 8000834:	f000 f99a 	bl	8000b6c <HAL_TIM_MspPostInit>

}
 8000838:	46c0      	nop			@ (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	b014      	add	sp, #80	@ 0x50
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000078 	.word	0x20000078
 8000844:	40014400 	.word	0x40014400
 8000848:	000004ff 	.word	0x000004ff

0800084c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000850:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <MX_USART2_UART_Init+0x60>)
 8000852:	4a17      	ldr	r2, [pc, #92]	@ (80008b0 <MX_USART2_UART_Init+0x64>)
 8000854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000856:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <MX_USART2_UART_Init+0x60>)
 8000858:	22e1      	movs	r2, #225	@ 0xe1
 800085a:	0252      	lsls	r2, r2, #9
 800085c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <MX_USART2_UART_Init+0x60>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_USART2_UART_Init+0x60>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086a:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <MX_USART2_UART_Init+0x60>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_USART2_UART_Init+0x60>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b0d      	ldr	r3, [pc, #52]	@ (80008ac <MX_USART2_UART_Init+0x60>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <MX_USART2_UART_Init+0x60>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000882:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <MX_USART2_UART_Init+0x60>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000888:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <MX_USART2_UART_Init+0x60>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088e:	4b07      	ldr	r3, [pc, #28]	@ (80008ac <MX_USART2_UART_Init+0x60>)
 8000890:	2200      	movs	r2, #0
 8000892:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000894:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <MX_USART2_UART_Init+0x60>)
 8000896:	0018      	movs	r0, r3
 8000898:	f002 ff9c 	bl	80037d4 <HAL_UART_Init>
 800089c:	1e03      	subs	r3, r0, #0
 800089e:	d001      	beq.n	80008a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008a0:	f000 f8fd 	bl	8000a9e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008a4:	46c0      	nop			@ (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	200000c4 	.word	0x200000c4
 80008b0:	40004400 	.word	0x40004400

080008b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_DMA_Init+0x38>)
 80008bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <MX_DMA_Init+0x38>)
 80008c0:	2101      	movs	r1, #1
 80008c2:	430a      	orrs	r2, r1
 80008c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80008c6:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_DMA_Init+0x38>)
 80008c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008ca:	2201      	movs	r2, #1
 80008cc:	4013      	ands	r3, r2
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2100      	movs	r1, #0
 80008d6:	2009      	movs	r0, #9
 80008d8:	f000 fbb6 	bl	8001048 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008dc:	2009      	movs	r0, #9
 80008de:	f000 fbc8 	bl	8001072 <HAL_NVIC_EnableIRQ>

}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b002      	add	sp, #8
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	40021000 	.word	0x40021000

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b590      	push	{r4, r7, lr}
 80008f2:	b089      	sub	sp, #36	@ 0x24
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	240c      	movs	r4, #12
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	0018      	movs	r0, r3
 80008fc:	2314      	movs	r3, #20
 80008fe:	001a      	movs	r2, r3
 8000900:	2100      	movs	r1, #0
 8000902:	f003 fdb7 	bl	8004474 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	4b35      	ldr	r3, [pc, #212]	@ (80009dc <MX_GPIO_Init+0xec>)
 8000908:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800090a:	4b34      	ldr	r3, [pc, #208]	@ (80009dc <MX_GPIO_Init+0xec>)
 800090c:	2104      	movs	r1, #4
 800090e:	430a      	orrs	r2, r1
 8000910:	635a      	str	r2, [r3, #52]	@ 0x34
 8000912:	4b32      	ldr	r3, [pc, #200]	@ (80009dc <MX_GPIO_Init+0xec>)
 8000914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000916:	2204      	movs	r2, #4
 8000918:	4013      	ands	r3, r2
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b2f      	ldr	r3, [pc, #188]	@ (80009dc <MX_GPIO_Init+0xec>)
 8000920:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000922:	4b2e      	ldr	r3, [pc, #184]	@ (80009dc <MX_GPIO_Init+0xec>)
 8000924:	2101      	movs	r1, #1
 8000926:	430a      	orrs	r2, r1
 8000928:	635a      	str	r2, [r3, #52]	@ 0x34
 800092a:	4b2c      	ldr	r3, [pc, #176]	@ (80009dc <MX_GPIO_Init+0xec>)
 800092c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800092e:	2201      	movs	r2, #1
 8000930:	4013      	ands	r3, r2
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	4b29      	ldr	r3, [pc, #164]	@ (80009dc <MX_GPIO_Init+0xec>)
 8000938:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800093a:	4b28      	ldr	r3, [pc, #160]	@ (80009dc <MX_GPIO_Init+0xec>)
 800093c:	2102      	movs	r1, #2
 800093e:	430a      	orrs	r2, r1
 8000940:	635a      	str	r2, [r3, #52]	@ 0x34
 8000942:	4b26      	ldr	r3, [pc, #152]	@ (80009dc <MX_GPIO_Init+0xec>)
 8000944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000946:	2202      	movs	r2, #2
 8000948:	4013      	ands	r3, r2
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_RESET);
 800094e:	23a0      	movs	r3, #160	@ 0xa0
 8000950:	05db      	lsls	r3, r3, #23
 8000952:	2200      	movs	r2, #0
 8000954:	2120      	movs	r1, #32
 8000956:	0018      	movs	r0, r3
 8000958:	f000 ff7b 	bl	8001852 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800095c:	4b20      	ldr	r3, [pc, #128]	@ (80009e0 <MX_GPIO_Init+0xf0>)
 800095e:	2200      	movs	r2, #0
 8000960:	2180      	movs	r1, #128	@ 0x80
 8000962:	0018      	movs	r0, r3
 8000964:	f000 ff75 	bl	8001852 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SLSW_Pin */
  GPIO_InitStruct.Pin = SLSW_Pin;
 8000968:	193b      	adds	r3, r7, r4
 800096a:	2202      	movs	r2, #2
 800096c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	193b      	adds	r3, r7, r4
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SLSW_GPIO_Port, &GPIO_InitStruct);
 800097a:	193a      	adds	r2, r7, r4
 800097c:	23a0      	movs	r3, #160	@ 0xa0
 800097e:	05db      	lsls	r3, r3, #23
 8000980:	0011      	movs	r1, r2
 8000982:	0018      	movs	r0, r3
 8000984:	f000 fde4 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8000988:	193b      	adds	r3, r7, r4
 800098a:	2220      	movs	r2, #32
 800098c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	193b      	adds	r3, r7, r4
 8000990:	2201      	movs	r2, #1
 8000992:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	193b      	adds	r3, r7, r4
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	193b      	adds	r3, r7, r4
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 80009a0:	193a      	adds	r2, r7, r4
 80009a2:	23a0      	movs	r3, #160	@ 0xa0
 80009a4:	05db      	lsls	r3, r3, #23
 80009a6:	0011      	movs	r1, r2
 80009a8:	0018      	movs	r0, r3
 80009aa:	f000 fdd1 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80009ae:	0021      	movs	r1, r4
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2280      	movs	r2, #128	@ 0x80
 80009b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2201      	movs	r2, #1
 80009ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	4a05      	ldr	r2, [pc, #20]	@ (80009e0 <MX_GPIO_Init+0xf0>)
 80009cc:	0019      	movs	r1, r3
 80009ce:	0010      	movs	r0, r2
 80009d0:	f000 fdbe 	bl	8001550 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d4:	46c0      	nop			@ (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b009      	add	sp, #36	@ 0x24
 80009da:	bd90      	pop	{r4, r7, pc}
 80009dc:	40021000 	.word	0x40021000
 80009e0:	50000400 	.word	0x50000400

080009e4 <readBuf>:

/* USER CODE BEGIN 4 */

void readBuf(UART_HandleTypeDef* uart, uint8_t* buf, int buf_size, uint8_t* data, int data_size, int id){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	@ 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
 80009f0:	603b      	str	r3, [r7, #0]
	int index = uart->hdmarx->Instance->CNDTR;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2280      	movs	r2, #128	@ 0x80
 80009f6:	589b      	ldr	r3, [r3, r2]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	61bb      	str	r3, [r7, #24]
	index = buf_size - index;
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	1ad3      	subs	r3, r2, r3
 8000a04:	61bb      	str	r3, [r7, #24]
	int indexRead = index - 25;
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	3b19      	subs	r3, #25
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
	if(indexRead < 0){indexRead = indexRead + buf_size;}
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	da03      	bge.n	8000a1a <readBuf+0x36>
 8000a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	18d3      	adds	r3, r2, r3
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24

	while(1){
		uint8_t readData = buf[indexRead];
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a1c:	68ba      	ldr	r2, [r7, #8]
 8000a1e:	18d2      	adds	r2, r2, r3
 8000a20:	2117      	movs	r1, #23
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	7812      	ldrb	r2, [r2, #0]
 8000a26:	701a      	strb	r2, [r3, #0]
		if(readData == 250+id){
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	781a      	ldrb	r2, [r3, #0]
 8000a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a2e:	33fa      	adds	r3, #250	@ 0xfa
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d11f      	bne.n	8000a74 <readBuf+0x90>
			for(int i=1; i<=data_size; i++){
 8000a34:	2301      	movs	r3, #1
 8000a36:	623b      	str	r3, [r7, #32]
 8000a38:	e017      	b.n	8000a6a <readBuf+0x86>
				int readPoint = indexRead + i;
 8000a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a3c:	6a3b      	ldr	r3, [r7, #32]
 8000a3e:	18d3      	adds	r3, r2, r3
 8000a40:	61fb      	str	r3, [r7, #28]
				if(readPoint>buf_size-1){readPoint = readPoint - buf_size;}
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	dc03      	bgt.n	8000a52 <readBuf+0x6e>
 8000a4a:	69fa      	ldr	r2, [r7, #28]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	61fb      	str	r3, [r7, #28]
				data[i-1] = buf[readPoint];
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	68ba      	ldr	r2, [r7, #8]
 8000a56:	18d2      	adds	r2, r2, r3
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	6839      	ldr	r1, [r7, #0]
 8000a5e:	18cb      	adds	r3, r1, r3
 8000a60:	7812      	ldrb	r2, [r2, #0]
 8000a62:	701a      	strb	r2, [r3, #0]
			for(int i=1; i<=data_size; i++){
 8000a64:	6a3b      	ldr	r3, [r7, #32]
 8000a66:	3301      	adds	r3, #1
 8000a68:	623b      	str	r3, [r7, #32]
 8000a6a:	6a3a      	ldr	r2, [r7, #32]
 8000a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	dde3      	ble.n	8000a3a <readBuf+0x56>
			}
			break;
 8000a72:	e010      	b.n	8000a96 <readBuf+0xb2>
		}
		indexRead++;
 8000a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a76:	3301      	adds	r3, #1
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
		if(indexRead>buf_size-1){indexRead = indexRead - buf_size;}
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	dc03      	bgt.n	8000a8a <readBuf+0xa6>
 8000a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	627b      	str	r3, [r7, #36]	@ 0x24
		if(indexRead == index){break;}
 8000a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d000      	beq.n	8000a94 <readBuf+0xb0>
	while(1){
 8000a92:	e7c2      	b.n	8000a1a <readBuf+0x36>
		if(indexRead == index){break;}
 8000a94:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b00a      	add	sp, #40	@ 0x28
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa2:	b672      	cpsid	i
}
 8000aa4:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	e7fd      	b.n	8000aa6 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ab4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ab8:	2101      	movs	r1, #1
 8000aba:	430a      	orrs	r2, r1
 8000abc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000abe:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <HAL_MspInit+0x44>)
 8000acc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ace:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ad0:	2180      	movs	r1, #128	@ 0x80
 8000ad2:	0549      	lsls	r1, r1, #21
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ada:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000adc:	2380      	movs	r3, #128	@ 0x80
 8000ade:	055b      	lsls	r3, r3, #21
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	46c0      	nop			@ (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b002      	add	sp, #8
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	40021000 	.word	0x40021000

08000af4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a17      	ldr	r2, [pc, #92]	@ (8000b60 <HAL_TIM_Base_MspInit+0x6c>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d114      	bne.n	8000b30 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b06:	4b17      	ldr	r3, [pc, #92]	@ (8000b64 <HAL_TIM_Base_MspInit+0x70>)
 8000b08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b0a:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <HAL_TIM_Base_MspInit+0x70>)
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b12:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <HAL_TIM_Base_MspInit+0x70>)
 8000b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b16:	2202      	movs	r2, #2
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	2010      	movs	r0, #16
 8000b24:	f000 fa90 	bl	8001048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b28:	2010      	movs	r0, #16
 8000b2a:	f000 faa2 	bl	8001072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000b2e:	e012      	b.n	8000b56 <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM16)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0c      	ldr	r2, [pc, #48]	@ (8000b68 <HAL_TIM_Base_MspInit+0x74>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d10d      	bne.n	8000b56 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b64 <HAL_TIM_Base_MspInit+0x70>)
 8000b3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b3e:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <HAL_TIM_Base_MspInit+0x70>)
 8000b40:	2180      	movs	r1, #128	@ 0x80
 8000b42:	0289      	lsls	r1, r1, #10
 8000b44:	430a      	orrs	r2, r1
 8000b46:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <HAL_TIM_Base_MspInit+0x70>)
 8000b4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b4c:	2380      	movs	r3, #128	@ 0x80
 8000b4e:	029b      	lsls	r3, r3, #10
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
}
 8000b56:	46c0      	nop			@ (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b004      	add	sp, #16
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	40000400 	.word	0x40000400
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40014400 	.word	0x40014400

08000b6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b08b      	sub	sp, #44	@ 0x2c
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	2414      	movs	r4, #20
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	0018      	movs	r0, r3
 8000b7a:	2314      	movs	r3, #20
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f003 fc78 	bl	8004474 <memset>
  if(htim->Instance==TIM16)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a25      	ldr	r2, [pc, #148]	@ (8000c20 <HAL_TIM_MspPostInit+0xb4>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d143      	bne.n	8000c16 <HAL_TIM_MspPostInit+0xaa>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b25      	ldr	r3, [pc, #148]	@ (8000c24 <HAL_TIM_MspPostInit+0xb8>)
 8000b90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b92:	4b24      	ldr	r3, [pc, #144]	@ (8000c24 <HAL_TIM_MspPostInit+0xb8>)
 8000b94:	2101      	movs	r1, #1
 8000b96:	430a      	orrs	r2, r1
 8000b98:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b9a:	4b22      	ldr	r3, [pc, #136]	@ (8000c24 <HAL_TIM_MspPostInit+0xb8>)
 8000b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c24 <HAL_TIM_MspPostInit+0xb8>)
 8000ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000baa:	4b1e      	ldr	r3, [pc, #120]	@ (8000c24 <HAL_TIM_MspPostInit+0xb8>)
 8000bac:	2102      	movs	r1, #2
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c24 <HAL_TIM_MspPostInit+0xb8>)
 8000bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    PB6     ------> TIM16_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	2240      	movs	r2, #64	@ 0x40
 8000bc2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	193b      	adds	r3, r7, r4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8000bd6:	193b      	adds	r3, r7, r4
 8000bd8:	2205      	movs	r2, #5
 8000bda:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	193a      	adds	r2, r7, r4
 8000bde:	23a0      	movs	r3, #160	@ 0xa0
 8000be0:	05db      	lsls	r3, r3, #23
 8000be2:	0011      	movs	r1, r2
 8000be4:	0018      	movs	r0, r3
 8000be6:	f000 fcb3 	bl	8001550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bea:	0021      	movs	r1, r4
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2240      	movs	r2, #64	@ 0x40
 8000bf0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2200      	movs	r2, #0
 8000c02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2202      	movs	r2, #2
 8000c08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	4a06      	ldr	r2, [pc, #24]	@ (8000c28 <HAL_TIM_MspPostInit+0xbc>)
 8000c0e:	0019      	movs	r1, r3
 8000c10:	0010      	movs	r0, r2
 8000c12:	f000 fc9d 	bl	8001550 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b00b      	add	sp, #44	@ 0x2c
 8000c1c:	bd90      	pop	{r4, r7, pc}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	40014400 	.word	0x40014400
 8000c24:	40021000 	.word	0x40021000
 8000c28:	50000400 	.word	0x50000400

08000c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b08b      	sub	sp, #44	@ 0x2c
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	2414      	movs	r4, #20
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	0018      	movs	r0, r3
 8000c3a:	2314      	movs	r3, #20
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f003 fc18 	bl	8004474 <memset>
  if(huart->Instance==USART2)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a30      	ldr	r2, [pc, #192]	@ (8000d0c <HAL_UART_MspInit+0xe0>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d15a      	bne.n	8000d04 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c4e:	4b30      	ldr	r3, [pc, #192]	@ (8000d10 <HAL_UART_MspInit+0xe4>)
 8000c50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c52:	4b2f      	ldr	r3, [pc, #188]	@ (8000d10 <HAL_UART_MspInit+0xe4>)
 8000c54:	2180      	movs	r1, #128	@ 0x80
 8000c56:	0289      	lsls	r1, r1, #10
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d10 <HAL_UART_MspInit+0xe4>)
 8000c5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c60:	2380      	movs	r3, #128	@ 0x80
 8000c62:	029b      	lsls	r3, r3, #10
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b29      	ldr	r3, [pc, #164]	@ (8000d10 <HAL_UART_MspInit+0xe4>)
 8000c6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c6e:	4b28      	ldr	r3, [pc, #160]	@ (8000d10 <HAL_UART_MspInit+0xe4>)
 8000c70:	2101      	movs	r1, #1
 8000c72:	430a      	orrs	r2, r1
 8000c74:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c76:	4b26      	ldr	r3, [pc, #152]	@ (8000d10 <HAL_UART_MspInit+0xe4>)
 8000c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000c82:	0021      	movs	r1, r4
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	4a23      	ldr	r2, [pc, #140]	@ (8000d14 <HAL_UART_MspInit+0xe8>)
 8000c88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	2200      	movs	r2, #0
 8000c9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	187a      	adds	r2, r7, r1
 8000ca4:	23a0      	movs	r3, #160	@ 0xa0
 8000ca6:	05db      	lsls	r3, r3, #23
 8000ca8:	0011      	movs	r1, r2
 8000caa:	0018      	movs	r0, r3
 8000cac:	f000 fc50 	bl	8001550 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000cb0:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <HAL_UART_MspInit+0xec>)
 8000cb2:	4a1a      	ldr	r2, [pc, #104]	@ (8000d1c <HAL_UART_MspInit+0xf0>)
 8000cb4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000cb6:	4b18      	ldr	r3, [pc, #96]	@ (8000d18 <HAL_UART_MspInit+0xec>)
 8000cb8:	2234      	movs	r2, #52	@ 0x34
 8000cba:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cbc:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <HAL_UART_MspInit+0xec>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc2:	4b15      	ldr	r3, [pc, #84]	@ (8000d18 <HAL_UART_MspInit+0xec>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cc8:	4b13      	ldr	r3, [pc, #76]	@ (8000d18 <HAL_UART_MspInit+0xec>)
 8000cca:	2280      	movs	r2, #128	@ 0x80
 8000ccc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cce:	4b12      	ldr	r3, [pc, #72]	@ (8000d18 <HAL_UART_MspInit+0xec>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cd4:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <HAL_UART_MspInit+0xec>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000cda:	4b0f      	ldr	r3, [pc, #60]	@ (8000d18 <HAL_UART_MspInit+0xec>)
 8000cdc:	2220      	movs	r2, #32
 8000cde:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8000d18 <HAL_UART_MspInit+0xec>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <HAL_UART_MspInit+0xec>)
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f000 f9df 	bl	80010ac <HAL_DMA_Init>
 8000cee:	1e03      	subs	r3, r0, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000cf2:	f7ff fed4 	bl	8000a9e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2180      	movs	r1, #128	@ 0x80
 8000cfa:	4a07      	ldr	r2, [pc, #28]	@ (8000d18 <HAL_UART_MspInit+0xec>)
 8000cfc:	505a      	str	r2, [r3, r1]
 8000cfe:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <HAL_UART_MspInit+0xec>)
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d04:	46c0      	nop			@ (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b00b      	add	sp, #44	@ 0x2c
 8000d0a:	bd90      	pop	{r4, r7, pc}
 8000d0c:	40004400 	.word	0x40004400
 8000d10:	40021000 	.word	0x40021000
 8000d14:	00008004 	.word	0x00008004
 8000d18:	20000158 	.word	0x20000158
 8000d1c:	40020008 	.word	0x40020008

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d24:	46c0      	nop			@ (mov r8, r8)
 8000d26:	e7fd      	b.n	8000d24 <NMI_Handler+0x4>

08000d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2c:	46c0      	nop			@ (mov r8, r8)
 8000d2e:	e7fd      	b.n	8000d2c <HardFault_Handler+0x4>

08000d30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d34:	46c0      	nop			@ (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3e:	46c0      	nop			@ (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d48:	f000 f8b6 	bl	8000eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4c:	46c0      	nop			@ (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d58:	4b03      	ldr	r3, [pc, #12]	@ (8000d68 <DMA1_Channel1_IRQHandler+0x14>)
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f000 fab6 	bl	80012cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d60:	46c0      	nop			@ (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	20000158 	.word	0x20000158

08000d6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d70:	4b03      	ldr	r3, [pc, #12]	@ (8000d80 <TIM3_IRQHandler+0x14>)
 8000d72:	0018      	movs	r0, r3
 8000d74:	f001 fc88 	bl	8002688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d78:	46c0      	nop			@ (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	2000002c 	.word	0x2000002c

08000d84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d88:	46c0      	nop			@ (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d90:	480d      	ldr	r0, [pc, #52]	@ (8000dc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d94:	f7ff fff6 	bl	8000d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d98:	480c      	ldr	r0, [pc, #48]	@ (8000dcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000d9a:	490d      	ldr	r1, [pc, #52]	@ (8000dd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd4 <LoopForever+0xe>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000db0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ddc <LoopForever+0x16>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dbe:	f003 fb61 	bl	8004484 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000dc2:	f7ff fb29 	bl	8000418 <main>

08000dc6 <LoopForever>:

LoopForever:
  b LoopForever
 8000dc6:	e7fe      	b.n	8000dc6 <LoopForever>
  ldr   r0, =_estack
 8000dc8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000dd4:	080045b8 	.word	0x080045b8
  ldr r2, =_sbss
 8000dd8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ddc:	20000248 	.word	0x20000248

08000de0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC1_IRQHandler>
	...

08000de4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <HAL_Init+0x3c>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e20 <HAL_Init+0x3c>)
 8000df6:	2180      	movs	r1, #128	@ 0x80
 8000df8:	0049      	lsls	r1, r1, #1
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dfe:	2003      	movs	r0, #3
 8000e00:	f000 f810 	bl	8000e24 <HAL_InitTick>
 8000e04:	1e03      	subs	r3, r0, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e08:	1dfb      	adds	r3, r7, #7
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]
 8000e0e:	e001      	b.n	8000e14 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fe4c 	bl	8000aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e14:	1dfb      	adds	r3, r7, #7
 8000e16:	781b      	ldrb	r3, [r3, #0]
}
 8000e18:	0018      	movs	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b002      	add	sp, #8
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40022000 	.word	0x40022000

08000e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	18fb      	adds	r3, r7, r3
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000e34:	4b1d      	ldr	r3, [pc, #116]	@ (8000eac <HAL_InitTick+0x88>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d02b      	beq.n	8000e94 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <HAL_InitTick+0x8c>)
 8000e3e:	681c      	ldr	r4, [r3, #0]
 8000e40:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <HAL_InitTick+0x88>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	0019      	movs	r1, r3
 8000e46:	23fa      	movs	r3, #250	@ 0xfa
 8000e48:	0098      	lsls	r0, r3, #2
 8000e4a:	f7ff f959 	bl	8000100 <__udivsi3>
 8000e4e:	0003      	movs	r3, r0
 8000e50:	0019      	movs	r1, r3
 8000e52:	0020      	movs	r0, r4
 8000e54:	f7ff f954 	bl	8000100 <__udivsi3>
 8000e58:	0003      	movs	r3, r0
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f000 f919 	bl	8001092 <HAL_SYSTICK_Config>
 8000e60:	1e03      	subs	r3, r0, #0
 8000e62:	d112      	bne.n	8000e8a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b03      	cmp	r3, #3
 8000e68:	d80a      	bhi.n	8000e80 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	425b      	negs	r3, r3
 8000e70:	2200      	movs	r2, #0
 8000e72:	0018      	movs	r0, r3
 8000e74:	f000 f8e8 	bl	8001048 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e78:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb4 <HAL_InitTick+0x90>)
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	e00d      	b.n	8000e9c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e80:	230f      	movs	r3, #15
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	2201      	movs	r2, #1
 8000e86:	701a      	strb	r2, [r3, #0]
 8000e88:	e008      	b.n	8000e9c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e8a:	230f      	movs	r3, #15
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
 8000e92:	e003      	b.n	8000e9c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e94:	230f      	movs	r3, #15
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	18fb      	adds	r3, r7, r3
 8000ea0:	781b      	ldrb	r3, [r3, #0]
}
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b005      	add	sp, #20
 8000ea8:	bd90      	pop	{r4, r7, pc}
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	2000000c 	.word	0x2000000c
 8000eb0:	20000004 	.word	0x20000004
 8000eb4:	20000008 	.word	0x20000008

08000eb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ebc:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <HAL_IncTick+0x1c>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <HAL_IncTick+0x20>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	18d2      	adds	r2, r2, r3
 8000ec8:	4b03      	ldr	r3, [pc, #12]	@ (8000ed8 <HAL_IncTick+0x20>)
 8000eca:	601a      	str	r2, [r3, #0]
}
 8000ecc:	46c0      	nop			@ (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			@ (mov r8, r8)
 8000ed4:	2000000c 	.word	0x2000000c
 8000ed8:	20000244 	.word	0x20000244

08000edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b02      	ldr	r3, [pc, #8]	@ (8000eec <HAL_GetTick+0x10>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			@ (mov r8, r8)
 8000eec:	20000244 	.word	0x20000244

08000ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	1dfb      	adds	r3, r7, #7
 8000efa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f02:	d809      	bhi.n	8000f18 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f04:	1dfb      	adds	r3, r7, #7
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	001a      	movs	r2, r3
 8000f0a:	231f      	movs	r3, #31
 8000f0c:	401a      	ands	r2, r3
 8000f0e:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <__NVIC_EnableIRQ+0x30>)
 8000f10:	2101      	movs	r1, #1
 8000f12:	4091      	lsls	r1, r2
 8000f14:	000a      	movs	r2, r1
 8000f16:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000f18:	46c0      	nop			@ (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b002      	add	sp, #8
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	e000e100 	.word	0xe000e100

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f38:	d828      	bhi.n	8000f8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff8 <__NVIC_SetPriority+0xd4>)
 8000f3c:	1dfb      	adds	r3, r7, #7
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	33c0      	adds	r3, #192	@ 0xc0
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	589b      	ldr	r3, [r3, r2]
 8000f4a:	1dfa      	adds	r2, r7, #7
 8000f4c:	7812      	ldrb	r2, [r2, #0]
 8000f4e:	0011      	movs	r1, r2
 8000f50:	2203      	movs	r2, #3
 8000f52:	400a      	ands	r2, r1
 8000f54:	00d2      	lsls	r2, r2, #3
 8000f56:	21ff      	movs	r1, #255	@ 0xff
 8000f58:	4091      	lsls	r1, r2
 8000f5a:	000a      	movs	r2, r1
 8000f5c:	43d2      	mvns	r2, r2
 8000f5e:	401a      	ands	r2, r3
 8000f60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	019b      	lsls	r3, r3, #6
 8000f66:	22ff      	movs	r2, #255	@ 0xff
 8000f68:	401a      	ands	r2, r3
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	0018      	movs	r0, r3
 8000f70:	2303      	movs	r3, #3
 8000f72:	4003      	ands	r3, r0
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f78:	481f      	ldr	r0, [pc, #124]	@ (8000ff8 <__NVIC_SetPriority+0xd4>)
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	430a      	orrs	r2, r1
 8000f84:	33c0      	adds	r3, #192	@ 0xc0
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f8a:	e031      	b.n	8000ff0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ffc <__NVIC_SetPriority+0xd8>)
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	0019      	movs	r1, r3
 8000f94:	230f      	movs	r3, #15
 8000f96:	400b      	ands	r3, r1
 8000f98:	3b08      	subs	r3, #8
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3306      	adds	r3, #6
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	18d3      	adds	r3, r2, r3
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	1dfa      	adds	r2, r7, #7
 8000fa8:	7812      	ldrb	r2, [r2, #0]
 8000faa:	0011      	movs	r1, r2
 8000fac:	2203      	movs	r2, #3
 8000fae:	400a      	ands	r2, r1
 8000fb0:	00d2      	lsls	r2, r2, #3
 8000fb2:	21ff      	movs	r1, #255	@ 0xff
 8000fb4:	4091      	lsls	r1, r2
 8000fb6:	000a      	movs	r2, r1
 8000fb8:	43d2      	mvns	r2, r2
 8000fba:	401a      	ands	r2, r3
 8000fbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	019b      	lsls	r3, r3, #6
 8000fc2:	22ff      	movs	r2, #255	@ 0xff
 8000fc4:	401a      	ands	r2, r3
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	0018      	movs	r0, r3
 8000fcc:	2303      	movs	r3, #3
 8000fce:	4003      	ands	r3, r0
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fd4:	4809      	ldr	r0, [pc, #36]	@ (8000ffc <__NVIC_SetPriority+0xd8>)
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	001c      	movs	r4, r3
 8000fdc:	230f      	movs	r3, #15
 8000fde:	4023      	ands	r3, r4
 8000fe0:	3b08      	subs	r3, #8
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	3306      	adds	r3, #6
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	18c3      	adds	r3, r0, r3
 8000fec:	3304      	adds	r3, #4
 8000fee:	601a      	str	r2, [r3, #0]
}
 8000ff0:	46c0      	nop			@ (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b003      	add	sp, #12
 8000ff6:	bd90      	pop	{r4, r7, pc}
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	1e5a      	subs	r2, r3, #1
 800100c:	2380      	movs	r3, #128	@ 0x80
 800100e:	045b      	lsls	r3, r3, #17
 8001010:	429a      	cmp	r2, r3
 8001012:	d301      	bcc.n	8001018 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001014:	2301      	movs	r3, #1
 8001016:	e010      	b.n	800103a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001018:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <SysTick_Config+0x44>)
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	3a01      	subs	r2, #1
 800101e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001020:	2301      	movs	r3, #1
 8001022:	425b      	negs	r3, r3
 8001024:	2103      	movs	r1, #3
 8001026:	0018      	movs	r0, r3
 8001028:	f7ff ff7c 	bl	8000f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102c:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <SysTick_Config+0x44>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <SysTick_Config+0x44>)
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001038:	2300      	movs	r3, #0
}
 800103a:	0018      	movs	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	b002      	add	sp, #8
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			@ (mov r8, r8)
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	210f      	movs	r1, #15
 8001054:	187b      	adds	r3, r7, r1
 8001056:	1c02      	adds	r2, r0, #0
 8001058:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	187b      	adds	r3, r7, r1
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b25b      	sxtb	r3, r3
 8001062:	0011      	movs	r1, r2
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff ff5d 	bl	8000f24 <__NVIC_SetPriority>
}
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b004      	add	sp, #16
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	0002      	movs	r2, r0
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b25b      	sxtb	r3, r3
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff ff33 	bl	8000ef0 <__NVIC_EnableIRQ>
}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b002      	add	sp, #8
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	0018      	movs	r0, r3
 800109e:	f7ff ffaf 	bl	8001000 <SysTick_Config>
 80010a2:	0003      	movs	r3, r0
}
 80010a4:	0018      	movs	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b002      	add	sp, #8
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e077      	b.n	80011ae <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a3d      	ldr	r2, [pc, #244]	@ (80011b8 <HAL_DMA_Init+0x10c>)
 80010c4:	4694      	mov	ip, r2
 80010c6:	4463      	add	r3, ip
 80010c8:	2114      	movs	r1, #20
 80010ca:	0018      	movs	r0, r3
 80010cc:	f7ff f818 	bl	8000100 <__udivsi3>
 80010d0:	0003      	movs	r3, r0
 80010d2:	009a      	lsls	r2, r3, #2
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2225      	movs	r2, #37	@ 0x25
 80010dc:	2102      	movs	r1, #2
 80010de:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4934      	ldr	r1, [pc, #208]	@ (80011bc <HAL_DMA_Init+0x110>)
 80010ec:	400a      	ands	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6819      	ldr	r1, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	431a      	orrs	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	431a      	orrs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	431a      	orrs	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	431a      	orrs	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	431a      	orrs	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	430a      	orrs	r2, r1
 8001124:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	0018      	movs	r0, r3
 800112a:	f000 f9c1 	bl	80014b0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	2380      	movs	r3, #128	@ 0x80
 8001134:	01db      	lsls	r3, r3, #7
 8001136:	429a      	cmp	r2, r3
 8001138:	d102      	bne.n	8001140 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001148:	213f      	movs	r1, #63	@ 0x3f
 800114a:	400a      	ands	r2, r1
 800114c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001156:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d011      	beq.n	8001184 <HAL_DMA_Init+0xd8>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b04      	cmp	r3, #4
 8001166:	d80d      	bhi.n	8001184 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	0018      	movs	r0, r3
 800116c:	f000 f9cc 	bl	8001508 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	e008      	b.n	8001196 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2225      	movs	r2, #37	@ 0x25
 80011a0:	2101      	movs	r1, #1
 80011a2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2224      	movs	r2, #36	@ 0x24
 80011a8:	2100      	movs	r1, #0
 80011aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	0018      	movs	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b002      	add	sp, #8
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			@ (mov r8, r8)
 80011b8:	bffdfff8 	.word	0xbffdfff8
 80011bc:	ffff800f 	.word	0xffff800f

080011c0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
 80011cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011ce:	2317      	movs	r3, #23
 80011d0:	18fb      	adds	r3, r7, r3
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2224      	movs	r2, #36	@ 0x24
 80011da:	5c9b      	ldrb	r3, [r3, r2]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d101      	bne.n	80011e4 <HAL_DMA_Start_IT+0x24>
 80011e0:	2302      	movs	r3, #2
 80011e2:	e06f      	b.n	80012c4 <HAL_DMA_Start_IT+0x104>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2224      	movs	r2, #36	@ 0x24
 80011e8:	2101      	movs	r1, #1
 80011ea:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2225      	movs	r2, #37	@ 0x25
 80011f0:	5c9b      	ldrb	r3, [r3, r2]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d157      	bne.n	80012a8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2225      	movs	r2, #37	@ 0x25
 80011fc:	2102      	movs	r1, #2
 80011fe:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2200      	movs	r2, #0
 8001204:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2101      	movs	r1, #1
 8001212:	438a      	bics	r2, r1
 8001214:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	68b9      	ldr	r1, [r7, #8]
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f000 f907 	bl	8001430 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	2b00      	cmp	r3, #0
 8001228:	d008      	beq.n	800123c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	210e      	movs	r1, #14
 8001236:	430a      	orrs	r2, r1
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	e00f      	b.n	800125c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2104      	movs	r1, #4
 8001248:	438a      	bics	r2, r1
 800124a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	210a      	movs	r1, #10
 8001258:	430a      	orrs	r2, r1
 800125a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	2380      	movs	r3, #128	@ 0x80
 8001264:	025b      	lsls	r3, r3, #9
 8001266:	4013      	ands	r3, r2
 8001268:	d008      	beq.n	800127c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001274:	2180      	movs	r1, #128	@ 0x80
 8001276:	0049      	lsls	r1, r1, #1
 8001278:	430a      	orrs	r2, r1
 800127a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001280:	2b00      	cmp	r3, #0
 8001282:	d008      	beq.n	8001296 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800128e:	2180      	movs	r1, #128	@ 0x80
 8001290:	0049      	lsls	r1, r1, #1
 8001292:	430a      	orrs	r2, r1
 8001294:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2101      	movs	r1, #1
 80012a2:	430a      	orrs	r2, r1
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	e00a      	b.n	80012be <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2280      	movs	r2, #128	@ 0x80
 80012ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2224      	movs	r2, #36	@ 0x24
 80012b2:	2100      	movs	r1, #0
 80012b4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80012b6:	2317      	movs	r3, #23
 80012b8:	18fb      	adds	r3, r7, r3
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80012be:	2317      	movs	r3, #23
 80012c0:	18fb      	adds	r3, r7, r3
 80012c2:	781b      	ldrb	r3, [r3, #0]
}
 80012c4:	0018      	movs	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b006      	add	sp, #24
 80012ca:	bd80      	pop	{r7, pc}

080012cc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80012d4:	4b55      	ldr	r3, [pc, #340]	@ (800142c <HAL_DMA_IRQHandler+0x160>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	221c      	movs	r2, #28
 80012e8:	4013      	ands	r3, r2
 80012ea:	2204      	movs	r2, #4
 80012ec:	409a      	lsls	r2, r3
 80012ee:	0013      	movs	r3, r2
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	4013      	ands	r3, r2
 80012f4:	d027      	beq.n	8001346 <HAL_DMA_IRQHandler+0x7a>
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	2204      	movs	r2, #4
 80012fa:	4013      	ands	r3, r2
 80012fc:	d023      	beq.n	8001346 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2220      	movs	r2, #32
 8001306:	4013      	ands	r3, r2
 8001308:	d107      	bne.n	800131a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2104      	movs	r1, #4
 8001316:	438a      	bics	r2, r1
 8001318:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800131a:	4b44      	ldr	r3, [pc, #272]	@ (800142c <HAL_DMA_IRQHandler+0x160>)
 800131c:	6859      	ldr	r1, [r3, #4]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	221c      	movs	r2, #28
 8001324:	4013      	ands	r3, r2
 8001326:	2204      	movs	r2, #4
 8001328:	409a      	lsls	r2, r3
 800132a:	4b40      	ldr	r3, [pc, #256]	@ (800142c <HAL_DMA_IRQHandler+0x160>)
 800132c:	430a      	orrs	r2, r1
 800132e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001334:	2b00      	cmp	r3, #0
 8001336:	d100      	bne.n	800133a <HAL_DMA_IRQHandler+0x6e>
 8001338:	e073      	b.n	8001422 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	0010      	movs	r0, r2
 8001342:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001344:	e06d      	b.n	8001422 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	221c      	movs	r2, #28
 800134c:	4013      	ands	r3, r2
 800134e:	2202      	movs	r2, #2
 8001350:	409a      	lsls	r2, r3
 8001352:	0013      	movs	r3, r2
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	4013      	ands	r3, r2
 8001358:	d02e      	beq.n	80013b8 <HAL_DMA_IRQHandler+0xec>
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	2202      	movs	r2, #2
 800135e:	4013      	ands	r3, r2
 8001360:	d02a      	beq.n	80013b8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2220      	movs	r2, #32
 800136a:	4013      	ands	r3, r2
 800136c:	d10b      	bne.n	8001386 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	210a      	movs	r1, #10
 800137a:	438a      	bics	r2, r1
 800137c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2225      	movs	r2, #37	@ 0x25
 8001382:	2101      	movs	r1, #1
 8001384:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001386:	4b29      	ldr	r3, [pc, #164]	@ (800142c <HAL_DMA_IRQHandler+0x160>)
 8001388:	6859      	ldr	r1, [r3, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138e:	221c      	movs	r2, #28
 8001390:	4013      	ands	r3, r2
 8001392:	2202      	movs	r2, #2
 8001394:	409a      	lsls	r2, r3
 8001396:	4b25      	ldr	r3, [pc, #148]	@ (800142c <HAL_DMA_IRQHandler+0x160>)
 8001398:	430a      	orrs	r2, r1
 800139a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2224      	movs	r2, #36	@ 0x24
 80013a0:	2100      	movs	r1, #0
 80013a2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d03a      	beq.n	8001422 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	0010      	movs	r0, r2
 80013b4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80013b6:	e034      	b.n	8001422 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013bc:	221c      	movs	r2, #28
 80013be:	4013      	ands	r3, r2
 80013c0:	2208      	movs	r2, #8
 80013c2:	409a      	lsls	r2, r3
 80013c4:	0013      	movs	r3, r2
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	4013      	ands	r3, r2
 80013ca:	d02b      	beq.n	8001424 <HAL_DMA_IRQHandler+0x158>
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	2208      	movs	r2, #8
 80013d0:	4013      	ands	r3, r2
 80013d2:	d027      	beq.n	8001424 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	210e      	movs	r1, #14
 80013e0:	438a      	bics	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80013e4:	4b11      	ldr	r3, [pc, #68]	@ (800142c <HAL_DMA_IRQHandler+0x160>)
 80013e6:	6859      	ldr	r1, [r3, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ec:	221c      	movs	r2, #28
 80013ee:	4013      	ands	r3, r2
 80013f0:	2201      	movs	r2, #1
 80013f2:	409a      	lsls	r2, r3
 80013f4:	4b0d      	ldr	r3, [pc, #52]	@ (800142c <HAL_DMA_IRQHandler+0x160>)
 80013f6:	430a      	orrs	r2, r1
 80013f8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2201      	movs	r2, #1
 80013fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2225      	movs	r2, #37	@ 0x25
 8001404:	2101      	movs	r1, #1
 8001406:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2224      	movs	r2, #36	@ 0x24
 800140c:	2100      	movs	r1, #0
 800140e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	0010      	movs	r0, r2
 8001420:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001422:	46c0      	nop			@ (mov r8, r8)
 8001424:	46c0      	nop			@ (mov r8, r8)
}
 8001426:	46bd      	mov	sp, r7
 8001428:	b004      	add	sp, #16
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40020000 	.word	0x40020000

08001430 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001446:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800144c:	2b00      	cmp	r3, #0
 800144e:	d004      	beq.n	800145a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001458:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800145a:	4b14      	ldr	r3, [pc, #80]	@ (80014ac <DMA_SetConfig+0x7c>)
 800145c:	6859      	ldr	r1, [r3, #4]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	221c      	movs	r2, #28
 8001464:	4013      	ands	r3, r2
 8001466:	2201      	movs	r2, #1
 8001468:	409a      	lsls	r2, r3
 800146a:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <DMA_SetConfig+0x7c>)
 800146c:	430a      	orrs	r2, r1
 800146e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b10      	cmp	r3, #16
 800147e:	d108      	bne.n	8001492 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001490:	e007      	b.n	80014a2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	60da      	str	r2, [r3, #12]
}
 80014a2:	46c0      	nop			@ (mov r8, r8)
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b004      	add	sp, #16
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			@ (mov r8, r8)
 80014ac:	40020000 	.word	0x40020000

080014b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	4a10      	ldr	r2, [pc, #64]	@ (8001500 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80014c0:	4694      	mov	ip, r2
 80014c2:	4463      	add	r3, ip
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	001a      	movs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	001a      	movs	r2, r3
 80014d2:	23ff      	movs	r3, #255	@ 0xff
 80014d4:	4013      	ands	r3, r2
 80014d6:	3b08      	subs	r3, #8
 80014d8:	2114      	movs	r1, #20
 80014da:	0018      	movs	r0, r3
 80014dc:	f7fe fe10 	bl	8000100 <__udivsi3>
 80014e0:	0003      	movs	r3, r0
 80014e2:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a07      	ldr	r2, [pc, #28]	@ (8001504 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80014e8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	221f      	movs	r2, #31
 80014ee:	4013      	ands	r3, r2
 80014f0:	2201      	movs	r2, #1
 80014f2:	409a      	lsls	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80014f8:	46c0      	nop			@ (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b004      	add	sp, #16
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	10008200 	.word	0x10008200
 8001504:	40020880 	.word	0x40020880

08001508 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	223f      	movs	r2, #63	@ 0x3f
 8001516:	4013      	ands	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800151e:	4694      	mov	ip, r2
 8001520:	4463      	add	r3, ip
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	001a      	movs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a07      	ldr	r2, [pc, #28]	@ (800154c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800152e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	3b01      	subs	r3, #1
 8001534:	2203      	movs	r2, #3
 8001536:	4013      	ands	r3, r2
 8001538:	2201      	movs	r2, #1
 800153a:	409a      	lsls	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001540:	46c0      	nop			@ (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	b004      	add	sp, #16
 8001546:	bd80      	pop	{r7, pc}
 8001548:	1000823f 	.word	0x1000823f
 800154c:	40020940 	.word	0x40020940

08001550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155e:	e147      	b.n	80017f0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2101      	movs	r1, #1
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	4091      	lsls	r1, r2
 800156a:	000a      	movs	r2, r1
 800156c:	4013      	ands	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d100      	bne.n	8001578 <HAL_GPIO_Init+0x28>
 8001576:	e138      	b.n	80017ea <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2203      	movs	r2, #3
 800157e:	4013      	ands	r3, r2
 8001580:	2b01      	cmp	r3, #1
 8001582:	d005      	beq.n	8001590 <HAL_GPIO_Init+0x40>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2203      	movs	r2, #3
 800158a:	4013      	ands	r3, r2
 800158c:	2b02      	cmp	r3, #2
 800158e:	d130      	bne.n	80015f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	409a      	lsls	r2, r3
 800159e:	0013      	movs	r3, r2
 80015a0:	43da      	mvns	r2, r3
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	409a      	lsls	r2, r3
 80015b2:	0013      	movs	r3, r2
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015c6:	2201      	movs	r2, #1
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	409a      	lsls	r2, r3
 80015cc:	0013      	movs	r3, r2
 80015ce:	43da      	mvns	r2, r3
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	091b      	lsrs	r3, r3, #4
 80015dc:	2201      	movs	r2, #1
 80015de:	401a      	ands	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	409a      	lsls	r2, r3
 80015e4:	0013      	movs	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2203      	movs	r2, #3
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d017      	beq.n	800162e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	2203      	movs	r2, #3
 800160a:	409a      	lsls	r2, r3
 800160c:	0013      	movs	r3, r2
 800160e:	43da      	mvns	r2, r3
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	409a      	lsls	r2, r3
 8001620:	0013      	movs	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2203      	movs	r2, #3
 8001634:	4013      	ands	r3, r2
 8001636:	2b02      	cmp	r3, #2
 8001638:	d123      	bne.n	8001682 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	08da      	lsrs	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3208      	adds	r2, #8
 8001642:	0092      	lsls	r2, r2, #2
 8001644:	58d3      	ldr	r3, [r2, r3]
 8001646:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	2207      	movs	r2, #7
 800164c:	4013      	ands	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	220f      	movs	r2, #15
 8001652:	409a      	lsls	r2, r3
 8001654:	0013      	movs	r3, r2
 8001656:	43da      	mvns	r2, r3
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	691a      	ldr	r2, [r3, #16]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2107      	movs	r1, #7
 8001666:	400b      	ands	r3, r1
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	409a      	lsls	r2, r3
 800166c:	0013      	movs	r3, r2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	08da      	lsrs	r2, r3, #3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3208      	adds	r2, #8
 800167c:	0092      	lsls	r2, r2, #2
 800167e:	6939      	ldr	r1, [r7, #16]
 8001680:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	2203      	movs	r2, #3
 800168e:	409a      	lsls	r2, r3
 8001690:	0013      	movs	r3, r2
 8001692:	43da      	mvns	r2, r3
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2203      	movs	r2, #3
 80016a0:	401a      	ands	r2, r3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	409a      	lsls	r2, r3
 80016a8:	0013      	movs	r3, r2
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	23c0      	movs	r3, #192	@ 0xc0
 80016bc:	029b      	lsls	r3, r3, #10
 80016be:	4013      	ands	r3, r2
 80016c0:	d100      	bne.n	80016c4 <HAL_GPIO_Init+0x174>
 80016c2:	e092      	b.n	80017ea <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80016c4:	4a50      	ldr	r2, [pc, #320]	@ (8001808 <HAL_GPIO_Init+0x2b8>)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	3318      	adds	r3, #24
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	589b      	ldr	r3, [r3, r2]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	2203      	movs	r2, #3
 80016d6:	4013      	ands	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	220f      	movs	r2, #15
 80016dc:	409a      	lsls	r2, r3
 80016de:	0013      	movs	r3, r2
 80016e0:	43da      	mvns	r2, r3
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	23a0      	movs	r3, #160	@ 0xa0
 80016ec:	05db      	lsls	r3, r3, #23
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d013      	beq.n	800171a <HAL_GPIO_Init+0x1ca>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a45      	ldr	r2, [pc, #276]	@ (800180c <HAL_GPIO_Init+0x2bc>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d00d      	beq.n	8001716 <HAL_GPIO_Init+0x1c6>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a44      	ldr	r2, [pc, #272]	@ (8001810 <HAL_GPIO_Init+0x2c0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d007      	beq.n	8001712 <HAL_GPIO_Init+0x1c2>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a43      	ldr	r2, [pc, #268]	@ (8001814 <HAL_GPIO_Init+0x2c4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d101      	bne.n	800170e <HAL_GPIO_Init+0x1be>
 800170a:	2303      	movs	r3, #3
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x1cc>
 800170e:	2305      	movs	r3, #5
 8001710:	e004      	b.n	800171c <HAL_GPIO_Init+0x1cc>
 8001712:	2302      	movs	r3, #2
 8001714:	e002      	b.n	800171c <HAL_GPIO_Init+0x1cc>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <HAL_GPIO_Init+0x1cc>
 800171a:	2300      	movs	r3, #0
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	2103      	movs	r1, #3
 8001720:	400a      	ands	r2, r1
 8001722:	00d2      	lsls	r2, r2, #3
 8001724:	4093      	lsls	r3, r2
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800172c:	4936      	ldr	r1, [pc, #216]	@ (8001808 <HAL_GPIO_Init+0x2b8>)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	3318      	adds	r3, #24
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800173a:	4b33      	ldr	r3, [pc, #204]	@ (8001808 <HAL_GPIO_Init+0x2b8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	43da      	mvns	r2, r3
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	2380      	movs	r3, #128	@ 0x80
 8001750:	035b      	lsls	r3, r3, #13
 8001752:	4013      	ands	r3, r2
 8001754:	d003      	beq.n	800175e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4313      	orrs	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800175e:	4b2a      	ldr	r3, [pc, #168]	@ (8001808 <HAL_GPIO_Init+0x2b8>)
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001764:	4b28      	ldr	r3, [pc, #160]	@ (8001808 <HAL_GPIO_Init+0x2b8>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	43da      	mvns	r2, r3
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	2380      	movs	r3, #128	@ 0x80
 800177a:	039b      	lsls	r3, r3, #14
 800177c:	4013      	ands	r3, r2
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001788:	4b1f      	ldr	r3, [pc, #124]	@ (8001808 <HAL_GPIO_Init+0x2b8>)
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800178e:	4a1e      	ldr	r2, [pc, #120]	@ (8001808 <HAL_GPIO_Init+0x2b8>)
 8001790:	2384      	movs	r3, #132	@ 0x84
 8001792:	58d3      	ldr	r3, [r2, r3]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	43da      	mvns	r2, r3
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	2380      	movs	r3, #128	@ 0x80
 80017a6:	029b      	lsls	r3, r3, #10
 80017a8:	4013      	ands	r3, r2
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017b4:	4914      	ldr	r1, [pc, #80]	@ (8001808 <HAL_GPIO_Init+0x2b8>)
 80017b6:	2284      	movs	r2, #132	@ 0x84
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80017bc:	4a12      	ldr	r2, [pc, #72]	@ (8001808 <HAL_GPIO_Init+0x2b8>)
 80017be:	2380      	movs	r3, #128	@ 0x80
 80017c0:	58d3      	ldr	r3, [r2, r3]
 80017c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	43da      	mvns	r2, r3
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	2380      	movs	r3, #128	@ 0x80
 80017d4:	025b      	lsls	r3, r3, #9
 80017d6:	4013      	ands	r3, r2
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4313      	orrs	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017e2:	4909      	ldr	r1, [pc, #36]	@ (8001808 <HAL_GPIO_Init+0x2b8>)
 80017e4:	2280      	movs	r2, #128	@ 0x80
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	3301      	adds	r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	40da      	lsrs	r2, r3
 80017f8:	1e13      	subs	r3, r2, #0
 80017fa:	d000      	beq.n	80017fe <HAL_GPIO_Init+0x2ae>
 80017fc:	e6b0      	b.n	8001560 <HAL_GPIO_Init+0x10>
  }
}
 80017fe:	46c0      	nop			@ (mov r8, r8)
 8001800:	46c0      	nop			@ (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	b006      	add	sp, #24
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40021800 	.word	0x40021800
 800180c:	50000400 	.word	0x50000400
 8001810:	50000800 	.word	0x50000800
 8001814:	50000c00 	.word	0x50000c00

08001818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	000a      	movs	r2, r1
 8001822:	1cbb      	adds	r3, r7, #2
 8001824:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	1cba      	adds	r2, r7, #2
 800182c:	8812      	ldrh	r2, [r2, #0]
 800182e:	4013      	ands	r3, r2
 8001830:	d004      	beq.n	800183c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001832:	230f      	movs	r3, #15
 8001834:	18fb      	adds	r3, r7, r3
 8001836:	2201      	movs	r2, #1
 8001838:	701a      	strb	r2, [r3, #0]
 800183a:	e003      	b.n	8001844 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800183c:	230f      	movs	r3, #15
 800183e:	18fb      	adds	r3, r7, r3
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001844:	230f      	movs	r3, #15
 8001846:	18fb      	adds	r3, r7, r3
 8001848:	781b      	ldrb	r3, [r3, #0]
}
 800184a:	0018      	movs	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	b004      	add	sp, #16
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	0008      	movs	r0, r1
 800185c:	0011      	movs	r1, r2
 800185e:	1cbb      	adds	r3, r7, #2
 8001860:	1c02      	adds	r2, r0, #0
 8001862:	801a      	strh	r2, [r3, #0]
 8001864:	1c7b      	adds	r3, r7, #1
 8001866:	1c0a      	adds	r2, r1, #0
 8001868:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800186a:	1c7b      	adds	r3, r7, #1
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d004      	beq.n	800187c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001872:	1cbb      	adds	r3, r7, #2
 8001874:	881a      	ldrh	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800187a:	e003      	b.n	8001884 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800187c:	1cbb      	adds	r3, r7, #2
 800187e:	881a      	ldrh	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001884:	46c0      	nop			@ (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	b002      	add	sp, #8
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	000a      	movs	r2, r1
 8001896:	1cbb      	adds	r3, r7, #2
 8001898:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018a0:	1cbb      	adds	r3, r7, #2
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	4013      	ands	r3, r2
 80018a8:	041a      	lsls	r2, r3, #16
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	1cb9      	adds	r1, r7, #2
 80018b0:	8809      	ldrh	r1, [r1, #0]
 80018b2:	400b      	ands	r3, r1
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	619a      	str	r2, [r3, #24]
}
 80018ba:	46c0      	nop			@ (mov r8, r8)
 80018bc:	46bd      	mov	sp, r7
 80018be:	b004      	add	sp, #16
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80018cc:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a19      	ldr	r2, [pc, #100]	@ (8001938 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	0019      	movs	r1, r3
 80018d6:	4b17      	ldr	r3, [pc, #92]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	430a      	orrs	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	2380      	movs	r3, #128	@ 0x80
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d11f      	bne.n	8001928 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80018e8:	4b14      	ldr	r3, [pc, #80]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	0013      	movs	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	189b      	adds	r3, r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4912      	ldr	r1, [pc, #72]	@ (8001940 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80018f6:	0018      	movs	r0, r3
 80018f8:	f7fe fc02 	bl	8000100 <__udivsi3>
 80018fc:	0003      	movs	r3, r0
 80018fe:	3301      	adds	r3, #1
 8001900:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001902:	e008      	b.n	8001916 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3b01      	subs	r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	e001      	b.n	8001916 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e009      	b.n	800192a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001916:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001918:	695a      	ldr	r2, [r3, #20]
 800191a:	2380      	movs	r3, #128	@ 0x80
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	401a      	ands	r2, r3
 8001920:	2380      	movs	r3, #128	@ 0x80
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	429a      	cmp	r2, r3
 8001926:	d0ed      	beq.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	0018      	movs	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	b004      	add	sp, #16
 8001930:	bd80      	pop	{r7, pc}
 8001932:	46c0      	nop			@ (mov r8, r8)
 8001934:	40007000 	.word	0x40007000
 8001938:	fffff9ff 	.word	0xfffff9ff
 800193c:	20000004 	.word	0x20000004
 8001940:	000f4240 	.word	0x000f4240

08001944 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001948:	4b03      	ldr	r3, [pc, #12]	@ (8001958 <LL_RCC_GetAPB1Prescaler+0x14>)
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	23e0      	movs	r3, #224	@ 0xe0
 800194e:	01db      	lsls	r3, r3, #7
 8001950:	4013      	ands	r3, r2
}
 8001952:	0018      	movs	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40021000 	.word	0x40021000

0800195c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e2f3      	b.n	8001f56 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2201      	movs	r2, #1
 8001974:	4013      	ands	r3, r2
 8001976:	d100      	bne.n	800197a <HAL_RCC_OscConfig+0x1e>
 8001978:	e07c      	b.n	8001a74 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800197a:	4bc3      	ldr	r3, [pc, #780]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2238      	movs	r2, #56	@ 0x38
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001984:	4bc0      	ldr	r3, [pc, #768]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	2203      	movs	r2, #3
 800198a:	4013      	ands	r3, r2
 800198c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	2b10      	cmp	r3, #16
 8001992:	d102      	bne.n	800199a <HAL_RCC_OscConfig+0x3e>
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	2b03      	cmp	r3, #3
 8001998:	d002      	beq.n	80019a0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	2b08      	cmp	r3, #8
 800199e:	d10b      	bne.n	80019b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a0:	4bb9      	ldr	r3, [pc, #740]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	2380      	movs	r3, #128	@ 0x80
 80019a6:	029b      	lsls	r3, r3, #10
 80019a8:	4013      	ands	r3, r2
 80019aa:	d062      	beq.n	8001a72 <HAL_RCC_OscConfig+0x116>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d15e      	bne.n	8001a72 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e2ce      	b.n	8001f56 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	2380      	movs	r3, #128	@ 0x80
 80019be:	025b      	lsls	r3, r3, #9
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d107      	bne.n	80019d4 <HAL_RCC_OscConfig+0x78>
 80019c4:	4bb0      	ldr	r3, [pc, #704]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4baf      	ldr	r3, [pc, #700]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 80019ca:	2180      	movs	r1, #128	@ 0x80
 80019cc:	0249      	lsls	r1, r1, #9
 80019ce:	430a      	orrs	r2, r1
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	e020      	b.n	8001a16 <HAL_RCC_OscConfig+0xba>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	23a0      	movs	r3, #160	@ 0xa0
 80019da:	02db      	lsls	r3, r3, #11
 80019dc:	429a      	cmp	r2, r3
 80019de:	d10e      	bne.n	80019fe <HAL_RCC_OscConfig+0xa2>
 80019e0:	4ba9      	ldr	r3, [pc, #676]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4ba8      	ldr	r3, [pc, #672]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 80019e6:	2180      	movs	r1, #128	@ 0x80
 80019e8:	02c9      	lsls	r1, r1, #11
 80019ea:	430a      	orrs	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	4ba6      	ldr	r3, [pc, #664]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	4ba5      	ldr	r3, [pc, #660]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 80019f4:	2180      	movs	r1, #128	@ 0x80
 80019f6:	0249      	lsls	r1, r1, #9
 80019f8:	430a      	orrs	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	e00b      	b.n	8001a16 <HAL_RCC_OscConfig+0xba>
 80019fe:	4ba2      	ldr	r3, [pc, #648]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	4ba1      	ldr	r3, [pc, #644]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001a04:	49a1      	ldr	r1, [pc, #644]	@ (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001a06:	400a      	ands	r2, r1
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	4b9f      	ldr	r3, [pc, #636]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4b9e      	ldr	r3, [pc, #632]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001a10:	499f      	ldr	r1, [pc, #636]	@ (8001c90 <HAL_RCC_OscConfig+0x334>)
 8001a12:	400a      	ands	r2, r1
 8001a14:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d014      	beq.n	8001a48 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1e:	f7ff fa5d 	bl	8000edc <HAL_GetTick>
 8001a22:	0003      	movs	r3, r0
 8001a24:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a28:	f7ff fa58 	bl	8000edc <HAL_GetTick>
 8001a2c:	0002      	movs	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	@ 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e28d      	b.n	8001f56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a3a:	4b93      	ldr	r3, [pc, #588]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	2380      	movs	r3, #128	@ 0x80
 8001a40:	029b      	lsls	r3, r3, #10
 8001a42:	4013      	ands	r3, r2
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0xcc>
 8001a46:	e015      	b.n	8001a74 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff fa48 	bl	8000edc <HAL_GetTick>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a52:	f7ff fa43 	bl	8000edc <HAL_GetTick>
 8001a56:	0002      	movs	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b64      	cmp	r3, #100	@ 0x64
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e278      	b.n	8001f56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a64:	4b88      	ldr	r3, [pc, #544]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	2380      	movs	r3, #128	@ 0x80
 8001a6a:	029b      	lsls	r3, r3, #10
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d1f0      	bne.n	8001a52 <HAL_RCC_OscConfig+0xf6>
 8001a70:	e000      	b.n	8001a74 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a72:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2202      	movs	r2, #2
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d100      	bne.n	8001a80 <HAL_RCC_OscConfig+0x124>
 8001a7e:	e099      	b.n	8001bb4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a80:	4b81      	ldr	r3, [pc, #516]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2238      	movs	r2, #56	@ 0x38
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a8a:	4b7f      	ldr	r3, [pc, #508]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2203      	movs	r2, #3
 8001a90:	4013      	ands	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2b10      	cmp	r3, #16
 8001a98:	d102      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x144>
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d002      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d135      	bne.n	8001b12 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa6:	4b78      	ldr	r3, [pc, #480]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	2380      	movs	r3, #128	@ 0x80
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d005      	beq.n	8001abe <HAL_RCC_OscConfig+0x162>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e24b      	b.n	8001f56 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abe:	4b72      	ldr	r3, [pc, #456]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	4a74      	ldr	r2, [pc, #464]	@ (8001c94 <HAL_RCC_OscConfig+0x338>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	0019      	movs	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	021a      	lsls	r2, r3, #8
 8001ace:	4b6e      	ldr	r3, [pc, #440]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d112      	bne.n	8001b00 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ada:	4b6b      	ldr	r3, [pc, #428]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a6e      	ldr	r2, [pc, #440]	@ (8001c98 <HAL_RCC_OscConfig+0x33c>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691a      	ldr	r2, [r3, #16]
 8001ae8:	4b67      	ldr	r3, [pc, #412]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001aea:	430a      	orrs	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001aee:	4b66      	ldr	r3, [pc, #408]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	0adb      	lsrs	r3, r3, #11
 8001af4:	2207      	movs	r2, #7
 8001af6:	4013      	ands	r3, r2
 8001af8:	4a68      	ldr	r2, [pc, #416]	@ (8001c9c <HAL_RCC_OscConfig+0x340>)
 8001afa:	40da      	lsrs	r2, r3
 8001afc:	4b68      	ldr	r3, [pc, #416]	@ (8001ca0 <HAL_RCC_OscConfig+0x344>)
 8001afe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b00:	4b68      	ldr	r3, [pc, #416]	@ (8001ca4 <HAL_RCC_OscConfig+0x348>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	0018      	movs	r0, r3
 8001b06:	f7ff f98d 	bl	8000e24 <HAL_InitTick>
 8001b0a:	1e03      	subs	r3, r0, #0
 8001b0c:	d051      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e221      	b.n	8001f56 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d030      	beq.n	8001b7c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b1a:	4b5b      	ldr	r3, [pc, #364]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a5e      	ldr	r2, [pc, #376]	@ (8001c98 <HAL_RCC_OscConfig+0x33c>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	0019      	movs	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691a      	ldr	r2, [r3, #16]
 8001b28:	4b57      	ldr	r3, [pc, #348]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001b2e:	4b56      	ldr	r3, [pc, #344]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4b55      	ldr	r3, [pc, #340]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001b34:	2180      	movs	r1, #128	@ 0x80
 8001b36:	0049      	lsls	r1, r1, #1
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7ff f9ce 	bl	8000edc <HAL_GetTick>
 8001b40:	0003      	movs	r3, r0
 8001b42:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b46:	f7ff f9c9 	bl	8000edc <HAL_GetTick>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e1fe      	b.n	8001f56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b58:	4b4b      	ldr	r3, [pc, #300]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2380      	movs	r3, #128	@ 0x80
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	4013      	ands	r3, r2
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b64:	4b48      	ldr	r3, [pc, #288]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	4a4a      	ldr	r2, [pc, #296]	@ (8001c94 <HAL_RCC_OscConfig+0x338>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	021a      	lsls	r2, r3, #8
 8001b74:	4b44      	ldr	r3, [pc, #272]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001b76:	430a      	orrs	r2, r1
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	e01b      	b.n	8001bb4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001b7c:	4b42      	ldr	r3, [pc, #264]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b41      	ldr	r3, [pc, #260]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001b82:	4949      	ldr	r1, [pc, #292]	@ (8001ca8 <HAL_RCC_OscConfig+0x34c>)
 8001b84:	400a      	ands	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b88:	f7ff f9a8 	bl	8000edc <HAL_GetTick>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b92:	f7ff f9a3 	bl	8000edc <HAL_GetTick>
 8001b96:	0002      	movs	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e1d8      	b.n	8001f56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ba4:	4b38      	ldr	r3, [pc, #224]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	2380      	movs	r3, #128	@ 0x80
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4013      	ands	r3, r2
 8001bae:	d1f0      	bne.n	8001b92 <HAL_RCC_OscConfig+0x236>
 8001bb0:	e000      	b.n	8001bb4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bb2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2208      	movs	r2, #8
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d047      	beq.n	8001c4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001bbe:	4b32      	ldr	r3, [pc, #200]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2238      	movs	r2, #56	@ 0x38
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b18      	cmp	r3, #24
 8001bc8:	d10a      	bne.n	8001be0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001bca:	4b2f      	ldr	r3, [pc, #188]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bce:	2202      	movs	r2, #2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d03c      	beq.n	8001c4e <HAL_RCC_OscConfig+0x2f2>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d138      	bne.n	8001c4e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e1ba      	b.n	8001f56 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d019      	beq.n	8001c1c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001be8:	4b27      	ldr	r3, [pc, #156]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001bea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001bec:	4b26      	ldr	r3, [pc, #152]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001bee:	2101      	movs	r1, #1
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff f972 	bl	8000edc <HAL_GetTick>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfe:	f7ff f96d 	bl	8000edc <HAL_GetTick>
 8001c02:	0002      	movs	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e1a2      	b.n	8001f56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c10:	4b1d      	ldr	r3, [pc, #116]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001c12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c14:	2202      	movs	r2, #2
 8001c16:	4013      	ands	r3, r2
 8001c18:	d0f1      	beq.n	8001bfe <HAL_RCC_OscConfig+0x2a2>
 8001c1a:	e018      	b.n	8001c4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001c1e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c20:	4b19      	ldr	r3, [pc, #100]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001c22:	2101      	movs	r1, #1
 8001c24:	438a      	bics	r2, r1
 8001c26:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff f958 	bl	8000edc <HAL_GetTick>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c32:	f7ff f953 	bl	8000edc <HAL_GetTick>
 8001c36:	0002      	movs	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e188      	b.n	8001f56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c44:	4b10      	ldr	r3, [pc, #64]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c48:	2202      	movs	r2, #2
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d1f1      	bne.n	8001c32 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2204      	movs	r2, #4
 8001c54:	4013      	ands	r3, r2
 8001c56:	d100      	bne.n	8001c5a <HAL_RCC_OscConfig+0x2fe>
 8001c58:	e0c6      	b.n	8001de8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c5a:	231f      	movs	r3, #31
 8001c5c:	18fb      	adds	r3, r7, r3
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c62:	4b09      	ldr	r3, [pc, #36]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2238      	movs	r2, #56	@ 0x38
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b20      	cmp	r3, #32
 8001c6c:	d11e      	bne.n	8001cac <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <HAL_RCC_OscConfig+0x32c>)
 8001c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c72:	2202      	movs	r2, #2
 8001c74:	4013      	ands	r3, r2
 8001c76:	d100      	bne.n	8001c7a <HAL_RCC_OscConfig+0x31e>
 8001c78:	e0b6      	b.n	8001de8 <HAL_RCC_OscConfig+0x48c>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d000      	beq.n	8001c84 <HAL_RCC_OscConfig+0x328>
 8001c82:	e0b1      	b.n	8001de8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e166      	b.n	8001f56 <HAL_RCC_OscConfig+0x5fa>
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	fffeffff 	.word	0xfffeffff
 8001c90:	fffbffff 	.word	0xfffbffff
 8001c94:	ffff80ff 	.word	0xffff80ff
 8001c98:	ffffc7ff 	.word	0xffffc7ff
 8001c9c:	00f42400 	.word	0x00f42400
 8001ca0:	20000004 	.word	0x20000004
 8001ca4:	20000008 	.word	0x20000008
 8001ca8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cac:	4bac      	ldr	r3, [pc, #688]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001cae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cb0:	2380      	movs	r3, #128	@ 0x80
 8001cb2:	055b      	lsls	r3, r3, #21
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d101      	bne.n	8001cbc <HAL_RCC_OscConfig+0x360>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <HAL_RCC_OscConfig+0x362>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d011      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	4ba7      	ldr	r3, [pc, #668]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001cc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cc6:	4ba6      	ldr	r3, [pc, #664]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001cc8:	2180      	movs	r1, #128	@ 0x80
 8001cca:	0549      	lsls	r1, r1, #21
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001cd0:	4ba3      	ldr	r3, [pc, #652]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001cd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cd4:	2380      	movs	r3, #128	@ 0x80
 8001cd6:	055b      	lsls	r3, r3, #21
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001cde:	231f      	movs	r3, #31
 8001ce0:	18fb      	adds	r3, r7, r3
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ce6:	4b9f      	ldr	r3, [pc, #636]	@ (8001f64 <HAL_RCC_OscConfig+0x608>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	2380      	movs	r3, #128	@ 0x80
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d11a      	bne.n	8001d28 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cf2:	4b9c      	ldr	r3, [pc, #624]	@ (8001f64 <HAL_RCC_OscConfig+0x608>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	4b9b      	ldr	r3, [pc, #620]	@ (8001f64 <HAL_RCC_OscConfig+0x608>)
 8001cf8:	2180      	movs	r1, #128	@ 0x80
 8001cfa:	0049      	lsls	r1, r1, #1
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001d00:	f7ff f8ec 	bl	8000edc <HAL_GetTick>
 8001d04:	0003      	movs	r3, r0
 8001d06:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d0a:	f7ff f8e7 	bl	8000edc <HAL_GetTick>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e11c      	b.n	8001f56 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d1c:	4b91      	ldr	r3, [pc, #580]	@ (8001f64 <HAL_RCC_OscConfig+0x608>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	2380      	movs	r3, #128	@ 0x80
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4013      	ands	r3, r2
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d106      	bne.n	8001d3e <HAL_RCC_OscConfig+0x3e2>
 8001d30:	4b8b      	ldr	r3, [pc, #556]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001d32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d34:	4b8a      	ldr	r3, [pc, #552]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001d36:	2101      	movs	r1, #1
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d3c:	e01c      	b.n	8001d78 <HAL_RCC_OscConfig+0x41c>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b05      	cmp	r3, #5
 8001d44:	d10c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x404>
 8001d46:	4b86      	ldr	r3, [pc, #536]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001d48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d4a:	4b85      	ldr	r3, [pc, #532]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001d4c:	2104      	movs	r1, #4
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d52:	4b83      	ldr	r3, [pc, #524]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001d54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d56:	4b82      	ldr	r3, [pc, #520]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001d58:	2101      	movs	r1, #1
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d5e:	e00b      	b.n	8001d78 <HAL_RCC_OscConfig+0x41c>
 8001d60:	4b7f      	ldr	r3, [pc, #508]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001d62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d64:	4b7e      	ldr	r3, [pc, #504]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001d66:	2101      	movs	r1, #1
 8001d68:	438a      	bics	r2, r1
 8001d6a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d6c:	4b7c      	ldr	r3, [pc, #496]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001d6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d70:	4b7b      	ldr	r3, [pc, #492]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001d72:	2104      	movs	r1, #4
 8001d74:	438a      	bics	r2, r1
 8001d76:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d014      	beq.n	8001daa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d80:	f7ff f8ac 	bl	8000edc <HAL_GetTick>
 8001d84:	0003      	movs	r3, r0
 8001d86:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d88:	e009      	b.n	8001d9e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8a:	f7ff f8a7 	bl	8000edc <HAL_GetTick>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	4a74      	ldr	r2, [pc, #464]	@ (8001f68 <HAL_RCC_OscConfig+0x60c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e0db      	b.n	8001f56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d9e:	4b70      	ldr	r3, [pc, #448]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da2:	2202      	movs	r2, #2
 8001da4:	4013      	ands	r3, r2
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0x42e>
 8001da8:	e013      	b.n	8001dd2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001daa:	f7ff f897 	bl	8000edc <HAL_GetTick>
 8001dae:	0003      	movs	r3, r0
 8001db0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001db2:	e009      	b.n	8001dc8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db4:	f7ff f892 	bl	8000edc <HAL_GetTick>
 8001db8:	0002      	movs	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	4a6a      	ldr	r2, [pc, #424]	@ (8001f68 <HAL_RCC_OscConfig+0x60c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e0c6      	b.n	8001f56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dc8:	4b65      	ldr	r3, [pc, #404]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dcc:	2202      	movs	r2, #2
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001dd2:	231f      	movs	r3, #31
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d105      	bne.n	8001de8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001ddc:	4b60      	ldr	r3, [pc, #384]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001dde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001de0:	4b5f      	ldr	r3, [pc, #380]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001de2:	4962      	ldr	r1, [pc, #392]	@ (8001f6c <HAL_RCC_OscConfig+0x610>)
 8001de4:	400a      	ands	r2, r1
 8001de6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d100      	bne.n	8001df2 <HAL_RCC_OscConfig+0x496>
 8001df0:	e0b0      	b.n	8001f54 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001df2:	4b5b      	ldr	r3, [pc, #364]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2238      	movs	r2, #56	@ 0x38
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b10      	cmp	r3, #16
 8001dfc:	d100      	bne.n	8001e00 <HAL_RCC_OscConfig+0x4a4>
 8001dfe:	e078      	b.n	8001ef2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d153      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e08:	4b55      	ldr	r3, [pc, #340]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b54      	ldr	r3, [pc, #336]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001e0e:	4958      	ldr	r1, [pc, #352]	@ (8001f70 <HAL_RCC_OscConfig+0x614>)
 8001e10:	400a      	ands	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7ff f862 	bl	8000edc <HAL_GetTick>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1e:	f7ff f85d 	bl	8000edc <HAL_GetTick>
 8001e22:	0002      	movs	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e092      	b.n	8001f56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e30:	4b4b      	ldr	r3, [pc, #300]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2380      	movs	r3, #128	@ 0x80
 8001e36:	049b      	lsls	r3, r3, #18
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d1f0      	bne.n	8001e1e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e3c:	4b48      	ldr	r3, [pc, #288]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4a4c      	ldr	r2, [pc, #304]	@ (8001f74 <HAL_RCC_OscConfig+0x618>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	0019      	movs	r1, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a1a      	ldr	r2, [r3, #32]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	431a      	orrs	r2, r3
 8001e64:	4b3e      	ldr	r3, [pc, #248]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001e66:	430a      	orrs	r2, r1
 8001e68:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001e70:	2180      	movs	r1, #128	@ 0x80
 8001e72:	0449      	lsls	r1, r1, #17
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001e78:	4b39      	ldr	r3, [pc, #228]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	4b38      	ldr	r3, [pc, #224]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001e7e:	2180      	movs	r1, #128	@ 0x80
 8001e80:	0549      	lsls	r1, r1, #21
 8001e82:	430a      	orrs	r2, r1
 8001e84:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e86:	f7ff f829 	bl	8000edc <HAL_GetTick>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e90:	f7ff f824 	bl	8000edc <HAL_GetTick>
 8001e94:	0002      	movs	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e059      	b.n	8001f56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	2380      	movs	r3, #128	@ 0x80
 8001ea8:	049b      	lsls	r3, r3, #18
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x534>
 8001eae:	e051      	b.n	8001f54 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001eb6:	492e      	ldr	r1, [pc, #184]	@ (8001f70 <HAL_RCC_OscConfig+0x614>)
 8001eb8:	400a      	ands	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f80e 	bl	8000edc <HAL_GetTick>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec6:	f7ff f809 	bl	8000edc <HAL_GetTick>
 8001eca:	0002      	movs	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e03e      	b.n	8001f56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed8:	4b21      	ldr	r3, [pc, #132]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	2380      	movs	r3, #128	@ 0x80
 8001ede:	049b      	lsls	r3, r3, #18
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d1f0      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001eea:	4923      	ldr	r1, [pc, #140]	@ (8001f78 <HAL_RCC_OscConfig+0x61c>)
 8001eec:	400a      	ands	r2, r1
 8001eee:	60da      	str	r2, [r3, #12]
 8001ef0:	e030      	b.n	8001f54 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e02b      	b.n	8001f56 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001efe:	4b18      	ldr	r3, [pc, #96]	@ (8001f60 <HAL_RCC_OscConfig+0x604>)
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	2203      	movs	r2, #3
 8001f08:	401a      	ands	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d11e      	bne.n	8001f50 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2270      	movs	r2, #112	@ 0x70
 8001f16:	401a      	ands	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d117      	bne.n	8001f50 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	23fe      	movs	r3, #254	@ 0xfe
 8001f24:	01db      	lsls	r3, r3, #7
 8001f26:	401a      	ands	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d10e      	bne.n	8001f50 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	23f8      	movs	r3, #248	@ 0xf8
 8001f36:	039b      	lsls	r3, r3, #14
 8001f38:	401a      	ands	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d106      	bne.n	8001f50 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	0f5b      	lsrs	r3, r3, #29
 8001f46:	075a      	lsls	r2, r3, #29
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d001      	beq.n	8001f54 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	0018      	movs	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	b008      	add	sp, #32
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	46c0      	nop			@ (mov r8, r8)
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40007000 	.word	0x40007000
 8001f68:	00001388 	.word	0x00001388
 8001f6c:	efffffff 	.word	0xefffffff
 8001f70:	feffffff 	.word	0xfeffffff
 8001f74:	1fc1808c 	.word	0x1fc1808c
 8001f78:	effefffc 	.word	0xeffefffc

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0e9      	b.n	8002164 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f90:	4b76      	ldr	r3, [pc, #472]	@ (800216c <HAL_RCC_ClockConfig+0x1f0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2207      	movs	r2, #7
 8001f96:	4013      	ands	r3, r2
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d91e      	bls.n	8001fdc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b73      	ldr	r3, [pc, #460]	@ (800216c <HAL_RCC_ClockConfig+0x1f0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2207      	movs	r2, #7
 8001fa4:	4393      	bics	r3, r2
 8001fa6:	0019      	movs	r1, r3
 8001fa8:	4b70      	ldr	r3, [pc, #448]	@ (800216c <HAL_RCC_ClockConfig+0x1f0>)
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fb0:	f7fe ff94 	bl	8000edc <HAL_GetTick>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fb8:	e009      	b.n	8001fce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fba:	f7fe ff8f 	bl	8000edc <HAL_GetTick>
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	4a6a      	ldr	r2, [pc, #424]	@ (8002170 <HAL_RCC_ClockConfig+0x1f4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e0ca      	b.n	8002164 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fce:	4b67      	ldr	r3, [pc, #412]	@ (800216c <HAL_RCC_ClockConfig+0x1f0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2207      	movs	r2, #7
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d1ee      	bne.n	8001fba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d015      	beq.n	8002012 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2204      	movs	r2, #4
 8001fec:	4013      	ands	r3, r2
 8001fee:	d006      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ff0:	4b60      	ldr	r3, [pc, #384]	@ (8002174 <HAL_RCC_ClockConfig+0x1f8>)
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	4b5f      	ldr	r3, [pc, #380]	@ (8002174 <HAL_RCC_ClockConfig+0x1f8>)
 8001ff6:	21e0      	movs	r1, #224	@ 0xe0
 8001ff8:	01c9      	lsls	r1, r1, #7
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ffe:	4b5d      	ldr	r3, [pc, #372]	@ (8002174 <HAL_RCC_ClockConfig+0x1f8>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	4a5d      	ldr	r2, [pc, #372]	@ (8002178 <HAL_RCC_ClockConfig+0x1fc>)
 8002004:	4013      	ands	r3, r2
 8002006:	0019      	movs	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	4b59      	ldr	r3, [pc, #356]	@ (8002174 <HAL_RCC_ClockConfig+0x1f8>)
 800200e:	430a      	orrs	r2, r1
 8002010:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2201      	movs	r2, #1
 8002018:	4013      	ands	r3, r2
 800201a:	d057      	beq.n	80020cc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d107      	bne.n	8002034 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002024:	4b53      	ldr	r3, [pc, #332]	@ (8002174 <HAL_RCC_ClockConfig+0x1f8>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2380      	movs	r3, #128	@ 0x80
 800202a:	029b      	lsls	r3, r3, #10
 800202c:	4013      	ands	r3, r2
 800202e:	d12b      	bne.n	8002088 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e097      	b.n	8002164 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d107      	bne.n	800204c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800203c:	4b4d      	ldr	r3, [pc, #308]	@ (8002174 <HAL_RCC_ClockConfig+0x1f8>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	2380      	movs	r3, #128	@ 0x80
 8002042:	049b      	lsls	r3, r3, #18
 8002044:	4013      	ands	r3, r2
 8002046:	d11f      	bne.n	8002088 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e08b      	b.n	8002164 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d107      	bne.n	8002064 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002054:	4b47      	ldr	r3, [pc, #284]	@ (8002174 <HAL_RCC_ClockConfig+0x1f8>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	2380      	movs	r3, #128	@ 0x80
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4013      	ands	r3, r2
 800205e:	d113      	bne.n	8002088 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e07f      	b.n	8002164 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d106      	bne.n	800207a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800206c:	4b41      	ldr	r3, [pc, #260]	@ (8002174 <HAL_RCC_ClockConfig+0x1f8>)
 800206e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002070:	2202      	movs	r2, #2
 8002072:	4013      	ands	r3, r2
 8002074:	d108      	bne.n	8002088 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e074      	b.n	8002164 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207a:	4b3e      	ldr	r3, [pc, #248]	@ (8002174 <HAL_RCC_ClockConfig+0x1f8>)
 800207c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800207e:	2202      	movs	r2, #2
 8002080:	4013      	ands	r3, r2
 8002082:	d101      	bne.n	8002088 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e06d      	b.n	8002164 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002088:	4b3a      	ldr	r3, [pc, #232]	@ (8002174 <HAL_RCC_ClockConfig+0x1f8>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2207      	movs	r2, #7
 800208e:	4393      	bics	r3, r2
 8002090:	0019      	movs	r1, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	4b37      	ldr	r3, [pc, #220]	@ (8002174 <HAL_RCC_ClockConfig+0x1f8>)
 8002098:	430a      	orrs	r2, r1
 800209a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800209c:	f7fe ff1e 	bl	8000edc <HAL_GetTick>
 80020a0:	0003      	movs	r3, r0
 80020a2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a4:	e009      	b.n	80020ba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a6:	f7fe ff19 	bl	8000edc <HAL_GetTick>
 80020aa:	0002      	movs	r2, r0
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	4a2f      	ldr	r2, [pc, #188]	@ (8002170 <HAL_RCC_ClockConfig+0x1f4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e054      	b.n	8002164 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002174 <HAL_RCC_ClockConfig+0x1f8>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2238      	movs	r2, #56	@ 0x38
 80020c0:	401a      	ands	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d1ec      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020cc:	4b27      	ldr	r3, [pc, #156]	@ (800216c <HAL_RCC_ClockConfig+0x1f0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2207      	movs	r2, #7
 80020d2:	4013      	ands	r3, r2
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d21e      	bcs.n	8002118 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020da:	4b24      	ldr	r3, [pc, #144]	@ (800216c <HAL_RCC_ClockConfig+0x1f0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2207      	movs	r2, #7
 80020e0:	4393      	bics	r3, r2
 80020e2:	0019      	movs	r1, r3
 80020e4:	4b21      	ldr	r3, [pc, #132]	@ (800216c <HAL_RCC_ClockConfig+0x1f0>)
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020ec:	f7fe fef6 	bl	8000edc <HAL_GetTick>
 80020f0:	0003      	movs	r3, r0
 80020f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020f4:	e009      	b.n	800210a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f6:	f7fe fef1 	bl	8000edc <HAL_GetTick>
 80020fa:	0002      	movs	r2, r0
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	4a1b      	ldr	r2, [pc, #108]	@ (8002170 <HAL_RCC_ClockConfig+0x1f4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d901      	bls.n	800210a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e02c      	b.n	8002164 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800210a:	4b18      	ldr	r3, [pc, #96]	@ (800216c <HAL_RCC_ClockConfig+0x1f0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2207      	movs	r2, #7
 8002110:	4013      	ands	r3, r2
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d1ee      	bne.n	80020f6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2204      	movs	r2, #4
 800211e:	4013      	ands	r3, r2
 8002120:	d009      	beq.n	8002136 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002122:	4b14      	ldr	r3, [pc, #80]	@ (8002174 <HAL_RCC_ClockConfig+0x1f8>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	4a15      	ldr	r2, [pc, #84]	@ (800217c <HAL_RCC_ClockConfig+0x200>)
 8002128:	4013      	ands	r3, r2
 800212a:	0019      	movs	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	4b10      	ldr	r3, [pc, #64]	@ (8002174 <HAL_RCC_ClockConfig+0x1f8>)
 8002132:	430a      	orrs	r2, r1
 8002134:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002136:	f000 f829 	bl	800218c <HAL_RCC_GetSysClockFreq>
 800213a:	0001      	movs	r1, r0
 800213c:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <HAL_RCC_ClockConfig+0x1f8>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	0a1b      	lsrs	r3, r3, #8
 8002142:	220f      	movs	r2, #15
 8002144:	401a      	ands	r2, r3
 8002146:	4b0e      	ldr	r3, [pc, #56]	@ (8002180 <HAL_RCC_ClockConfig+0x204>)
 8002148:	0092      	lsls	r2, r2, #2
 800214a:	58d3      	ldr	r3, [r2, r3]
 800214c:	221f      	movs	r2, #31
 800214e:	4013      	ands	r3, r2
 8002150:	000a      	movs	r2, r1
 8002152:	40da      	lsrs	r2, r3
 8002154:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <HAL_RCC_ClockConfig+0x208>)
 8002156:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002158:	4b0b      	ldr	r3, [pc, #44]	@ (8002188 <HAL_RCC_ClockConfig+0x20c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0018      	movs	r0, r3
 800215e:	f7fe fe61 	bl	8000e24 <HAL_InitTick>
 8002162:	0003      	movs	r3, r0
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	b004      	add	sp, #16
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40022000 	.word	0x40022000
 8002170:	00001388 	.word	0x00001388
 8002174:	40021000 	.word	0x40021000
 8002178:	fffff0ff 	.word	0xfffff0ff
 800217c:	ffff8fff 	.word	0xffff8fff
 8002180:	080044e4 	.word	0x080044e4
 8002184:	20000004 	.word	0x20000004
 8002188:	20000008 	.word	0x20000008

0800218c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002192:	4b3c      	ldr	r3, [pc, #240]	@ (8002284 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2238      	movs	r2, #56	@ 0x38
 8002198:	4013      	ands	r3, r2
 800219a:	d10f      	bne.n	80021bc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800219c:	4b39      	ldr	r3, [pc, #228]	@ (8002284 <HAL_RCC_GetSysClockFreq+0xf8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	0adb      	lsrs	r3, r3, #11
 80021a2:	2207      	movs	r2, #7
 80021a4:	4013      	ands	r3, r2
 80021a6:	2201      	movs	r2, #1
 80021a8:	409a      	lsls	r2, r3
 80021aa:	0013      	movs	r3, r2
 80021ac:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80021ae:	6839      	ldr	r1, [r7, #0]
 80021b0:	4835      	ldr	r0, [pc, #212]	@ (8002288 <HAL_RCC_GetSysClockFreq+0xfc>)
 80021b2:	f7fd ffa5 	bl	8000100 <__udivsi3>
 80021b6:	0003      	movs	r3, r0
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	e05d      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021bc:	4b31      	ldr	r3, [pc, #196]	@ (8002284 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2238      	movs	r2, #56	@ 0x38
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d102      	bne.n	80021ce <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002288 <HAL_RCC_GetSysClockFreq+0xfc>)
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	e054      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002284 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2238      	movs	r2, #56	@ 0x38
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b10      	cmp	r3, #16
 80021d8:	d138      	bne.n	800224c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80021da:	4b2a      	ldr	r3, [pc, #168]	@ (8002284 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2203      	movs	r2, #3
 80021e0:	4013      	ands	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021e4:	4b27      	ldr	r3, [pc, #156]	@ (8002284 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	2207      	movs	r2, #7
 80021ec:	4013      	ands	r3, r2
 80021ee:	3301      	adds	r3, #1
 80021f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d10d      	bne.n	8002214 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	4823      	ldr	r0, [pc, #140]	@ (8002288 <HAL_RCC_GetSysClockFreq+0xfc>)
 80021fc:	f7fd ff80 	bl	8000100 <__udivsi3>
 8002200:	0003      	movs	r3, r0
 8002202:	0019      	movs	r1, r3
 8002204:	4b1f      	ldr	r3, [pc, #124]	@ (8002284 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	227f      	movs	r2, #127	@ 0x7f
 800220c:	4013      	ands	r3, r2
 800220e:	434b      	muls	r3, r1
 8002210:	617b      	str	r3, [r7, #20]
        break;
 8002212:	e00d      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	481c      	ldr	r0, [pc, #112]	@ (8002288 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002218:	f7fd ff72 	bl	8000100 <__udivsi3>
 800221c:	0003      	movs	r3, r0
 800221e:	0019      	movs	r1, r3
 8002220:	4b18      	ldr	r3, [pc, #96]	@ (8002284 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	0a1b      	lsrs	r3, r3, #8
 8002226:	227f      	movs	r2, #127	@ 0x7f
 8002228:	4013      	ands	r3, r2
 800222a:	434b      	muls	r3, r1
 800222c:	617b      	str	r3, [r7, #20]
        break;
 800222e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002230:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	0f5b      	lsrs	r3, r3, #29
 8002236:	2207      	movs	r2, #7
 8002238:	4013      	ands	r3, r2
 800223a:	3301      	adds	r3, #1
 800223c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	6978      	ldr	r0, [r7, #20]
 8002242:	f7fd ff5d 	bl	8000100 <__udivsi3>
 8002246:	0003      	movs	r3, r0
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	e015      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800224c:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <HAL_RCC_GetSysClockFreq+0xf8>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2238      	movs	r2, #56	@ 0x38
 8002252:	4013      	ands	r3, r2
 8002254:	2b20      	cmp	r3, #32
 8002256:	d103      	bne.n	8002260 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002258:	2380      	movs	r3, #128	@ 0x80
 800225a:	021b      	lsls	r3, r3, #8
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	e00b      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002260:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2238      	movs	r2, #56	@ 0x38
 8002266:	4013      	ands	r3, r2
 8002268:	2b18      	cmp	r3, #24
 800226a:	d103      	bne.n	8002274 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800226c:	23fa      	movs	r3, #250	@ 0xfa
 800226e:	01db      	lsls	r3, r3, #7
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	e001      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002278:	693b      	ldr	r3, [r7, #16]
}
 800227a:	0018      	movs	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	b006      	add	sp, #24
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			@ (mov r8, r8)
 8002284:	40021000 	.word	0x40021000
 8002288:	00f42400 	.word	0x00f42400

0800228c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002290:	4b02      	ldr	r3, [pc, #8]	@ (800229c <HAL_RCC_GetHCLKFreq+0x10>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	0018      	movs	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	46c0      	nop			@ (mov r8, r8)
 800229c:	20000004 	.word	0x20000004

080022a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022a0:	b5b0      	push	{r4, r5, r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80022a4:	f7ff fff2 	bl	800228c <HAL_RCC_GetHCLKFreq>
 80022a8:	0004      	movs	r4, r0
 80022aa:	f7ff fb4b 	bl	8001944 <LL_RCC_GetAPB1Prescaler>
 80022ae:	0003      	movs	r3, r0
 80022b0:	0b1a      	lsrs	r2, r3, #12
 80022b2:	4b05      	ldr	r3, [pc, #20]	@ (80022c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022b4:	0092      	lsls	r2, r2, #2
 80022b6:	58d3      	ldr	r3, [r2, r3]
 80022b8:	221f      	movs	r2, #31
 80022ba:	4013      	ands	r3, r2
 80022bc:	40dc      	lsrs	r4, r3
 80022be:	0023      	movs	r3, r4
}
 80022c0:	0018      	movs	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bdb0      	pop	{r4, r5, r7, pc}
 80022c6:	46c0      	nop			@ (mov r8, r8)
 80022c8:	08004524 	.word	0x08004524

080022cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e04a      	b.n	8002374 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	223d      	movs	r2, #61	@ 0x3d
 80022e2:	5c9b      	ldrb	r3, [r3, r2]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d107      	bne.n	80022fa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	223c      	movs	r2, #60	@ 0x3c
 80022ee:	2100      	movs	r1, #0
 80022f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	0018      	movs	r0, r3
 80022f6:	f7fe fbfd 	bl	8000af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	223d      	movs	r2, #61	@ 0x3d
 80022fe:	2102      	movs	r1, #2
 8002300:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3304      	adds	r3, #4
 800230a:	0019      	movs	r1, r3
 800230c:	0010      	movs	r0, r2
 800230e:	f000 fcb9 	bl	8002c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2248      	movs	r2, #72	@ 0x48
 8002316:	2101      	movs	r1, #1
 8002318:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	223e      	movs	r2, #62	@ 0x3e
 800231e:	2101      	movs	r1, #1
 8002320:	5499      	strb	r1, [r3, r2]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	223f      	movs	r2, #63	@ 0x3f
 8002326:	2101      	movs	r1, #1
 8002328:	5499      	strb	r1, [r3, r2]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2240      	movs	r2, #64	@ 0x40
 800232e:	2101      	movs	r1, #1
 8002330:	5499      	strb	r1, [r3, r2]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2241      	movs	r2, #65	@ 0x41
 8002336:	2101      	movs	r1, #1
 8002338:	5499      	strb	r1, [r3, r2]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2242      	movs	r2, #66	@ 0x42
 800233e:	2101      	movs	r1, #1
 8002340:	5499      	strb	r1, [r3, r2]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2243      	movs	r2, #67	@ 0x43
 8002346:	2101      	movs	r1, #1
 8002348:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2244      	movs	r2, #68	@ 0x44
 800234e:	2101      	movs	r1, #1
 8002350:	5499      	strb	r1, [r3, r2]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2245      	movs	r2, #69	@ 0x45
 8002356:	2101      	movs	r1, #1
 8002358:	5499      	strb	r1, [r3, r2]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2246      	movs	r2, #70	@ 0x46
 800235e:	2101      	movs	r1, #1
 8002360:	5499      	strb	r1, [r3, r2]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2247      	movs	r2, #71	@ 0x47
 8002366:	2101      	movs	r1, #1
 8002368:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	223d      	movs	r2, #61	@ 0x3d
 800236e:	2101      	movs	r1, #1
 8002370:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	0018      	movs	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	b002      	add	sp, #8
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	223d      	movs	r2, #61	@ 0x3d
 8002388:	5c9b      	ldrb	r3, [r3, r2]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b01      	cmp	r3, #1
 800238e:	d001      	beq.n	8002394 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e037      	b.n	8002404 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	223d      	movs	r2, #61	@ 0x3d
 8002398:	2102      	movs	r1, #2
 800239a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2101      	movs	r1, #1
 80023a8:	430a      	orrs	r2, r1
 80023aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a16      	ldr	r2, [pc, #88]	@ (800240c <HAL_TIM_Base_Start_IT+0x90>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d004      	beq.n	80023c0 <HAL_TIM_Base_Start_IT+0x44>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a15      	ldr	r2, [pc, #84]	@ (8002410 <HAL_TIM_Base_Start_IT+0x94>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d116      	bne.n	80023ee <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	4a13      	ldr	r2, [pc, #76]	@ (8002414 <HAL_TIM_Base_Start_IT+0x98>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b06      	cmp	r3, #6
 80023d0:	d016      	beq.n	8002400 <HAL_TIM_Base_Start_IT+0x84>
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	2380      	movs	r3, #128	@ 0x80
 80023d6:	025b      	lsls	r3, r3, #9
 80023d8:	429a      	cmp	r2, r3
 80023da:	d011      	beq.n	8002400 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2101      	movs	r1, #1
 80023e8:	430a      	orrs	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ec:	e008      	b.n	8002400 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2101      	movs	r1, #1
 80023fa:	430a      	orrs	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	e000      	b.n	8002402 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002400:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	b004      	add	sp, #16
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40012c00 	.word	0x40012c00
 8002410:	40000400 	.word	0x40000400
 8002414:	00010007 	.word	0x00010007

08002418 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e04a      	b.n	80024c0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	223d      	movs	r2, #61	@ 0x3d
 800242e:	5c9b      	ldrb	r3, [r3, r2]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d107      	bne.n	8002446 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	223c      	movs	r2, #60	@ 0x3c
 800243a:	2100      	movs	r1, #0
 800243c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	0018      	movs	r0, r3
 8002442:	f000 f841 	bl	80024c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	223d      	movs	r2, #61	@ 0x3d
 800244a:	2102      	movs	r1, #2
 800244c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3304      	adds	r3, #4
 8002456:	0019      	movs	r1, r3
 8002458:	0010      	movs	r0, r2
 800245a:	f000 fc13 	bl	8002c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2248      	movs	r2, #72	@ 0x48
 8002462:	2101      	movs	r1, #1
 8002464:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	223e      	movs	r2, #62	@ 0x3e
 800246a:	2101      	movs	r1, #1
 800246c:	5499      	strb	r1, [r3, r2]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	223f      	movs	r2, #63	@ 0x3f
 8002472:	2101      	movs	r1, #1
 8002474:	5499      	strb	r1, [r3, r2]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2240      	movs	r2, #64	@ 0x40
 800247a:	2101      	movs	r1, #1
 800247c:	5499      	strb	r1, [r3, r2]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2241      	movs	r2, #65	@ 0x41
 8002482:	2101      	movs	r1, #1
 8002484:	5499      	strb	r1, [r3, r2]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2242      	movs	r2, #66	@ 0x42
 800248a:	2101      	movs	r1, #1
 800248c:	5499      	strb	r1, [r3, r2]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2243      	movs	r2, #67	@ 0x43
 8002492:	2101      	movs	r1, #1
 8002494:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2244      	movs	r2, #68	@ 0x44
 800249a:	2101      	movs	r1, #1
 800249c:	5499      	strb	r1, [r3, r2]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2245      	movs	r2, #69	@ 0x45
 80024a2:	2101      	movs	r1, #1
 80024a4:	5499      	strb	r1, [r3, r2]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2246      	movs	r2, #70	@ 0x46
 80024aa:	2101      	movs	r1, #1
 80024ac:	5499      	strb	r1, [r3, r2]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2247      	movs	r2, #71	@ 0x47
 80024b2:	2101      	movs	r1, #1
 80024b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	223d      	movs	r2, #61	@ 0x3d
 80024ba:	2101      	movs	r1, #1
 80024bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	0018      	movs	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b002      	add	sp, #8
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024d0:	46c0      	nop			@ (mov r8, r8)
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b002      	add	sp, #8
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d108      	bne.n	80024fa <HAL_TIM_PWM_Start+0x22>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	223e      	movs	r2, #62	@ 0x3e
 80024ec:	5c9b      	ldrb	r3, [r3, r2]
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	1e5a      	subs	r2, r3, #1
 80024f4:	4193      	sbcs	r3, r2
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	e037      	b.n	800256a <HAL_TIM_PWM_Start+0x92>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d108      	bne.n	8002512 <HAL_TIM_PWM_Start+0x3a>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	223f      	movs	r2, #63	@ 0x3f
 8002504:	5c9b      	ldrb	r3, [r3, r2]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	3b01      	subs	r3, #1
 800250a:	1e5a      	subs	r2, r3, #1
 800250c:	4193      	sbcs	r3, r2
 800250e:	b2db      	uxtb	r3, r3
 8002510:	e02b      	b.n	800256a <HAL_TIM_PWM_Start+0x92>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b08      	cmp	r3, #8
 8002516:	d108      	bne.n	800252a <HAL_TIM_PWM_Start+0x52>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2240      	movs	r2, #64	@ 0x40
 800251c:	5c9b      	ldrb	r3, [r3, r2]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	1e5a      	subs	r2, r3, #1
 8002524:	4193      	sbcs	r3, r2
 8002526:	b2db      	uxtb	r3, r3
 8002528:	e01f      	b.n	800256a <HAL_TIM_PWM_Start+0x92>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b0c      	cmp	r3, #12
 800252e:	d108      	bne.n	8002542 <HAL_TIM_PWM_Start+0x6a>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2241      	movs	r2, #65	@ 0x41
 8002534:	5c9b      	ldrb	r3, [r3, r2]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	1e5a      	subs	r2, r3, #1
 800253c:	4193      	sbcs	r3, r2
 800253e:	b2db      	uxtb	r3, r3
 8002540:	e013      	b.n	800256a <HAL_TIM_PWM_Start+0x92>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2b10      	cmp	r3, #16
 8002546:	d108      	bne.n	800255a <HAL_TIM_PWM_Start+0x82>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2242      	movs	r2, #66	@ 0x42
 800254c:	5c9b      	ldrb	r3, [r3, r2]
 800254e:	b2db      	uxtb	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	1e5a      	subs	r2, r3, #1
 8002554:	4193      	sbcs	r3, r2
 8002556:	b2db      	uxtb	r3, r3
 8002558:	e007      	b.n	800256a <HAL_TIM_PWM_Start+0x92>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2243      	movs	r2, #67	@ 0x43
 800255e:	5c9b      	ldrb	r3, [r3, r2]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	3b01      	subs	r3, #1
 8002564:	1e5a      	subs	r2, r3, #1
 8002566:	4193      	sbcs	r3, r2
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e07b      	b.n	800266a <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d104      	bne.n	8002582 <HAL_TIM_PWM_Start+0xaa>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	223e      	movs	r2, #62	@ 0x3e
 800257c:	2102      	movs	r1, #2
 800257e:	5499      	strb	r1, [r3, r2]
 8002580:	e023      	b.n	80025ca <HAL_TIM_PWM_Start+0xf2>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b04      	cmp	r3, #4
 8002586:	d104      	bne.n	8002592 <HAL_TIM_PWM_Start+0xba>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	223f      	movs	r2, #63	@ 0x3f
 800258c:	2102      	movs	r1, #2
 800258e:	5499      	strb	r1, [r3, r2]
 8002590:	e01b      	b.n	80025ca <HAL_TIM_PWM_Start+0xf2>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b08      	cmp	r3, #8
 8002596:	d104      	bne.n	80025a2 <HAL_TIM_PWM_Start+0xca>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2240      	movs	r2, #64	@ 0x40
 800259c:	2102      	movs	r1, #2
 800259e:	5499      	strb	r1, [r3, r2]
 80025a0:	e013      	b.n	80025ca <HAL_TIM_PWM_Start+0xf2>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b0c      	cmp	r3, #12
 80025a6:	d104      	bne.n	80025b2 <HAL_TIM_PWM_Start+0xda>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2241      	movs	r2, #65	@ 0x41
 80025ac:	2102      	movs	r1, #2
 80025ae:	5499      	strb	r1, [r3, r2]
 80025b0:	e00b      	b.n	80025ca <HAL_TIM_PWM_Start+0xf2>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b10      	cmp	r3, #16
 80025b6:	d104      	bne.n	80025c2 <HAL_TIM_PWM_Start+0xea>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2242      	movs	r2, #66	@ 0x42
 80025bc:	2102      	movs	r1, #2
 80025be:	5499      	strb	r1, [r3, r2]
 80025c0:	e003      	b.n	80025ca <HAL_TIM_PWM_Start+0xf2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2243      	movs	r2, #67	@ 0x43
 80025c6:	2102      	movs	r1, #2
 80025c8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6839      	ldr	r1, [r7, #0]
 80025d0:	2201      	movs	r2, #1
 80025d2:	0018      	movs	r0, r3
 80025d4:	f000 ff08 	bl	80033e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a25      	ldr	r2, [pc, #148]	@ (8002674 <HAL_TIM_PWM_Start+0x19c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d009      	beq.n	80025f6 <HAL_TIM_PWM_Start+0x11e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a24      	ldr	r2, [pc, #144]	@ (8002678 <HAL_TIM_PWM_Start+0x1a0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d004      	beq.n	80025f6 <HAL_TIM_PWM_Start+0x11e>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a22      	ldr	r2, [pc, #136]	@ (800267c <HAL_TIM_PWM_Start+0x1a4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d101      	bne.n	80025fa <HAL_TIM_PWM_Start+0x122>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <HAL_TIM_PWM_Start+0x124>
 80025fa:	2300      	movs	r3, #0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2180      	movs	r1, #128	@ 0x80
 800260c:	0209      	lsls	r1, r1, #8
 800260e:	430a      	orrs	r2, r1
 8002610:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a17      	ldr	r2, [pc, #92]	@ (8002674 <HAL_TIM_PWM_Start+0x19c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d004      	beq.n	8002626 <HAL_TIM_PWM_Start+0x14e>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a17      	ldr	r2, [pc, #92]	@ (8002680 <HAL_TIM_PWM_Start+0x1a8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d116      	bne.n	8002654 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	4a15      	ldr	r2, [pc, #84]	@ (8002684 <HAL_TIM_PWM_Start+0x1ac>)
 800262e:	4013      	ands	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2b06      	cmp	r3, #6
 8002636:	d016      	beq.n	8002666 <HAL_TIM_PWM_Start+0x18e>
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	2380      	movs	r3, #128	@ 0x80
 800263c:	025b      	lsls	r3, r3, #9
 800263e:	429a      	cmp	r2, r3
 8002640:	d011      	beq.n	8002666 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2101      	movs	r1, #1
 800264e:	430a      	orrs	r2, r1
 8002650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002652:	e008      	b.n	8002666 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2101      	movs	r1, #1
 8002660:	430a      	orrs	r2, r1
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	e000      	b.n	8002668 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002666:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	0018      	movs	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	b004      	add	sp, #16
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			@ (mov r8, r8)
 8002674:	40012c00 	.word	0x40012c00
 8002678:	40014400 	.word	0x40014400
 800267c:	40014800 	.word	0x40014800
 8002680:	40000400 	.word	0x40000400
 8002684:	00010007 	.word	0x00010007

08002688 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2202      	movs	r2, #2
 80026a4:	4013      	ands	r3, r2
 80026a6:	d021      	beq.n	80026ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2202      	movs	r2, #2
 80026ac:	4013      	ands	r3, r2
 80026ae:	d01d      	beq.n	80026ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2203      	movs	r2, #3
 80026b6:	4252      	negs	r2, r2
 80026b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	2203      	movs	r2, #3
 80026c8:	4013      	ands	r3, r2
 80026ca:	d004      	beq.n	80026d6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	0018      	movs	r0, r3
 80026d0:	f000 fac0 	bl	8002c54 <HAL_TIM_IC_CaptureCallback>
 80026d4:	e007      	b.n	80026e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 fab3 	bl	8002c44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f000 fabf 	bl	8002c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2204      	movs	r2, #4
 80026f0:	4013      	ands	r3, r2
 80026f2:	d022      	beq.n	800273a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2204      	movs	r2, #4
 80026f8:	4013      	ands	r3, r2
 80026fa:	d01e      	beq.n	800273a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2205      	movs	r2, #5
 8002702:	4252      	negs	r2, r2
 8002704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2202      	movs	r2, #2
 800270a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699a      	ldr	r2, [r3, #24]
 8002712:	23c0      	movs	r3, #192	@ 0xc0
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4013      	ands	r3, r2
 8002718:	d004      	beq.n	8002724 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	0018      	movs	r0, r3
 800271e:	f000 fa99 	bl	8002c54 <HAL_TIM_IC_CaptureCallback>
 8002722:	e007      	b.n	8002734 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	0018      	movs	r0, r3
 8002728:	f000 fa8c 	bl	8002c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	0018      	movs	r0, r3
 8002730:	f000 fa98 	bl	8002c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2208      	movs	r2, #8
 800273e:	4013      	ands	r3, r2
 8002740:	d021      	beq.n	8002786 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2208      	movs	r2, #8
 8002746:	4013      	ands	r3, r2
 8002748:	d01d      	beq.n	8002786 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2209      	movs	r2, #9
 8002750:	4252      	negs	r2, r2
 8002752:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2204      	movs	r2, #4
 8002758:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	2203      	movs	r2, #3
 8002762:	4013      	ands	r3, r2
 8002764:	d004      	beq.n	8002770 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	0018      	movs	r0, r3
 800276a:	f000 fa73 	bl	8002c54 <HAL_TIM_IC_CaptureCallback>
 800276e:	e007      	b.n	8002780 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	0018      	movs	r0, r3
 8002774:	f000 fa66 	bl	8002c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	0018      	movs	r0, r3
 800277c:	f000 fa72 	bl	8002c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2210      	movs	r2, #16
 800278a:	4013      	ands	r3, r2
 800278c:	d022      	beq.n	80027d4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2210      	movs	r2, #16
 8002792:	4013      	ands	r3, r2
 8002794:	d01e      	beq.n	80027d4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2211      	movs	r2, #17
 800279c:	4252      	negs	r2, r2
 800279e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2208      	movs	r2, #8
 80027a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	69da      	ldr	r2, [r3, #28]
 80027ac:	23c0      	movs	r3, #192	@ 0xc0
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4013      	ands	r3, r2
 80027b2:	d004      	beq.n	80027be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	0018      	movs	r0, r3
 80027b8:	f000 fa4c 	bl	8002c54 <HAL_TIM_IC_CaptureCallback>
 80027bc:	e007      	b.n	80027ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	0018      	movs	r0, r3
 80027c2:	f000 fa3f 	bl	8002c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	0018      	movs	r0, r3
 80027ca:	f000 fa4b 	bl	8002c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2201      	movs	r2, #1
 80027d8:	4013      	ands	r3, r2
 80027da:	d00c      	beq.n	80027f6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	4013      	ands	r3, r2
 80027e2:	d008      	beq.n	80027f6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2202      	movs	r2, #2
 80027ea:	4252      	negs	r2, r2
 80027ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	0018      	movs	r0, r3
 80027f2:	f7fd fdfb 	bl	80003ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2280      	movs	r2, #128	@ 0x80
 80027fa:	4013      	ands	r3, r2
 80027fc:	d104      	bne.n	8002808 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	2380      	movs	r3, #128	@ 0x80
 8002802:	019b      	lsls	r3, r3, #6
 8002804:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002806:	d00b      	beq.n	8002820 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2280      	movs	r2, #128	@ 0x80
 800280c:	4013      	ands	r3, r2
 800280e:	d007      	beq.n	8002820 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1e      	ldr	r2, [pc, #120]	@ (8002890 <HAL_TIM_IRQHandler+0x208>)
 8002816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	0018      	movs	r0, r3
 800281c:	f000 ffa6 	bl	800376c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	2380      	movs	r3, #128	@ 0x80
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4013      	ands	r3, r2
 8002828:	d00b      	beq.n	8002842 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2280      	movs	r2, #128	@ 0x80
 800282e:	4013      	ands	r3, r2
 8002830:	d007      	beq.n	8002842 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a17      	ldr	r2, [pc, #92]	@ (8002894 <HAL_TIM_IRQHandler+0x20c>)
 8002838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	0018      	movs	r0, r3
 800283e:	f000 ff9d 	bl	800377c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2240      	movs	r2, #64	@ 0x40
 8002846:	4013      	ands	r3, r2
 8002848:	d00c      	beq.n	8002864 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2240      	movs	r2, #64	@ 0x40
 800284e:	4013      	ands	r3, r2
 8002850:	d008      	beq.n	8002864 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2241      	movs	r2, #65	@ 0x41
 8002858:	4252      	negs	r2, r2
 800285a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	0018      	movs	r0, r3
 8002860:	f000 fa08 	bl	8002c74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2220      	movs	r2, #32
 8002868:	4013      	ands	r3, r2
 800286a:	d00c      	beq.n	8002886 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2220      	movs	r2, #32
 8002870:	4013      	ands	r3, r2
 8002872:	d008      	beq.n	8002886 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2221      	movs	r2, #33	@ 0x21
 800287a:	4252      	negs	r2, r2
 800287c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	0018      	movs	r0, r3
 8002882:	f000 ff6b 	bl	800375c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002886:	46c0      	nop			@ (mov r8, r8)
 8002888:	46bd      	mov	sp, r7
 800288a:	b004      	add	sp, #16
 800288c:	bd80      	pop	{r7, pc}
 800288e:	46c0      	nop			@ (mov r8, r8)
 8002890:	ffffdf7f 	.word	0xffffdf7f
 8002894:	fffffeff 	.word	0xfffffeff

08002898 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028a4:	2317      	movs	r3, #23
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	223c      	movs	r2, #60	@ 0x3c
 80028b0:	5c9b      	ldrb	r3, [r3, r2]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_TIM_PWM_ConfigChannel+0x22>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e0e5      	b.n	8002a86 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	223c      	movs	r2, #60	@ 0x3c
 80028be:	2101      	movs	r1, #1
 80028c0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b14      	cmp	r3, #20
 80028c6:	d900      	bls.n	80028ca <HAL_TIM_PWM_ConfigChannel+0x32>
 80028c8:	e0d1      	b.n	8002a6e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	009a      	lsls	r2, r3, #2
 80028ce:	4b70      	ldr	r3, [pc, #448]	@ (8002a90 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80028d0:	18d3      	adds	r3, r2, r3
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	0011      	movs	r1, r2
 80028de:	0018      	movs	r0, r3
 80028e0:	f000 fa4a 	bl	8002d78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699a      	ldr	r2, [r3, #24]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2108      	movs	r1, #8
 80028f0:	430a      	orrs	r2, r1
 80028f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2104      	movs	r1, #4
 8002900:	438a      	bics	r2, r1
 8002902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6999      	ldr	r1, [r3, #24]
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	619a      	str	r2, [r3, #24]
      break;
 8002916:	e0af      	b.n	8002a78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	0011      	movs	r1, r2
 8002920:	0018      	movs	r0, r3
 8002922:	f000 faa9 	bl	8002e78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699a      	ldr	r2, [r3, #24]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2180      	movs	r1, #128	@ 0x80
 8002932:	0109      	lsls	r1, r1, #4
 8002934:	430a      	orrs	r2, r1
 8002936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699a      	ldr	r2, [r3, #24]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4954      	ldr	r1, [pc, #336]	@ (8002a94 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002944:	400a      	ands	r2, r1
 8002946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6999      	ldr	r1, [r3, #24]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	021a      	lsls	r2, r3, #8
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	619a      	str	r2, [r3, #24]
      break;
 800295c:	e08c      	b.n	8002a78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	0011      	movs	r1, r2
 8002966:	0018      	movs	r0, r3
 8002968:	f000 fb04 	bl	8002f74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	69da      	ldr	r2, [r3, #28]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2108      	movs	r1, #8
 8002978:	430a      	orrs	r2, r1
 800297a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	69da      	ldr	r2, [r3, #28]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2104      	movs	r1, #4
 8002988:	438a      	bics	r2, r1
 800298a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	69d9      	ldr	r1, [r3, #28]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	691a      	ldr	r2, [r3, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	61da      	str	r2, [r3, #28]
      break;
 800299e:	e06b      	b.n	8002a78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	0011      	movs	r1, r2
 80029a8:	0018      	movs	r0, r3
 80029aa:	f000 fb65 	bl	8003078 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	69da      	ldr	r2, [r3, #28]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2180      	movs	r1, #128	@ 0x80
 80029ba:	0109      	lsls	r1, r1, #4
 80029bc:	430a      	orrs	r2, r1
 80029be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	69da      	ldr	r2, [r3, #28]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4932      	ldr	r1, [pc, #200]	@ (8002a94 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80029cc:	400a      	ands	r2, r1
 80029ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	69d9      	ldr	r1, [r3, #28]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	021a      	lsls	r2, r3, #8
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	61da      	str	r2, [r3, #28]
      break;
 80029e4:	e048      	b.n	8002a78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	0011      	movs	r1, r2
 80029ee:	0018      	movs	r0, r3
 80029f0:	f000 fba6 	bl	8003140 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2108      	movs	r1, #8
 8002a00:	430a      	orrs	r2, r1
 8002a02:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2104      	movs	r1, #4
 8002a10:	438a      	bics	r2, r1
 8002a12:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002a26:	e027      	b.n	8002a78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	0011      	movs	r1, r2
 8002a30:	0018      	movs	r0, r3
 8002a32:	f000 fbdf 	bl	80031f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2180      	movs	r1, #128	@ 0x80
 8002a42:	0109      	lsls	r1, r1, #4
 8002a44:	430a      	orrs	r2, r1
 8002a46:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4910      	ldr	r1, [pc, #64]	@ (8002a94 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002a54:	400a      	ands	r2, r1
 8002a56:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	021a      	lsls	r2, r3, #8
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002a6c:	e004      	b.n	8002a78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002a6e:	2317      	movs	r3, #23
 8002a70:	18fb      	adds	r3, r7, r3
 8002a72:	2201      	movs	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]
      break;
 8002a76:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	223c      	movs	r2, #60	@ 0x3c
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	5499      	strb	r1, [r3, r2]

  return status;
 8002a80:	2317      	movs	r3, #23
 8002a82:	18fb      	adds	r3, r7, r3
 8002a84:	781b      	ldrb	r3, [r3, #0]
}
 8002a86:	0018      	movs	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b006      	add	sp, #24
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	46c0      	nop			@ (mov r8, r8)
 8002a90:	08004544 	.word	0x08004544
 8002a94:	fffffbff 	.word	0xfffffbff

08002a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa2:	230f      	movs	r3, #15
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	223c      	movs	r2, #60	@ 0x3c
 8002aae:	5c9b      	ldrb	r3, [r3, r2]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_TIM_ConfigClockSource+0x20>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e0bc      	b.n	8002c32 <HAL_TIM_ConfigClockSource+0x19a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	223c      	movs	r2, #60	@ 0x3c
 8002abc:	2101      	movs	r1, #1
 8002abe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	223d      	movs	r2, #61	@ 0x3d
 8002ac4:	2102      	movs	r1, #2
 8002ac6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4a5a      	ldr	r2, [pc, #360]	@ (8002c3c <HAL_TIM_ConfigClockSource+0x1a4>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4a59      	ldr	r2, [pc, #356]	@ (8002c40 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2280      	movs	r2, #128	@ 0x80
 8002aee:	0192      	lsls	r2, r2, #6
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d040      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0xde>
 8002af4:	2280      	movs	r2, #128	@ 0x80
 8002af6:	0192      	lsls	r2, r2, #6
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d900      	bls.n	8002afe <HAL_TIM_ConfigClockSource+0x66>
 8002afc:	e088      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x178>
 8002afe:	2280      	movs	r2, #128	@ 0x80
 8002b00:	0152      	lsls	r2, r2, #5
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d100      	bne.n	8002b08 <HAL_TIM_ConfigClockSource+0x70>
 8002b06:	e088      	b.n	8002c1a <HAL_TIM_ConfigClockSource+0x182>
 8002b08:	2280      	movs	r2, #128	@ 0x80
 8002b0a:	0152      	lsls	r2, r2, #5
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d900      	bls.n	8002b12 <HAL_TIM_ConfigClockSource+0x7a>
 8002b10:	e07e      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x178>
 8002b12:	2b70      	cmp	r3, #112	@ 0x70
 8002b14:	d018      	beq.n	8002b48 <HAL_TIM_ConfigClockSource+0xb0>
 8002b16:	d900      	bls.n	8002b1a <HAL_TIM_ConfigClockSource+0x82>
 8002b18:	e07a      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x178>
 8002b1a:	2b60      	cmp	r3, #96	@ 0x60
 8002b1c:	d04f      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0x126>
 8002b1e:	d900      	bls.n	8002b22 <HAL_TIM_ConfigClockSource+0x8a>
 8002b20:	e076      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x178>
 8002b22:	2b50      	cmp	r3, #80	@ 0x50
 8002b24:	d03b      	beq.n	8002b9e <HAL_TIM_ConfigClockSource+0x106>
 8002b26:	d900      	bls.n	8002b2a <HAL_TIM_ConfigClockSource+0x92>
 8002b28:	e072      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x178>
 8002b2a:	2b40      	cmp	r3, #64	@ 0x40
 8002b2c:	d057      	beq.n	8002bde <HAL_TIM_ConfigClockSource+0x146>
 8002b2e:	d900      	bls.n	8002b32 <HAL_TIM_ConfigClockSource+0x9a>
 8002b30:	e06e      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x178>
 8002b32:	2b30      	cmp	r3, #48	@ 0x30
 8002b34:	d063      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x166>
 8002b36:	d86b      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x178>
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d060      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x166>
 8002b3c:	d868      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x178>
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d05d      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x166>
 8002b42:	2b10      	cmp	r3, #16
 8002b44:	d05b      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x166>
 8002b46:	e063      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b58:	f000 fc26 	bl	80033a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2277      	movs	r2, #119	@ 0x77
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	609a      	str	r2, [r3, #8]
      break;
 8002b74:	e052      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b86:	f000 fc0f 	bl	80033a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2180      	movs	r1, #128	@ 0x80
 8002b96:	01c9      	lsls	r1, r1, #7
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	609a      	str	r2, [r3, #8]
      break;
 8002b9c:	e03e      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002baa:	001a      	movs	r2, r3
 8002bac:	f000 fb80 	bl	80032b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2150      	movs	r1, #80	@ 0x50
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f000 fbda 	bl	8003370 <TIM_ITRx_SetConfig>
      break;
 8002bbc:	e02e      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bca:	001a      	movs	r2, r3
 8002bcc:	f000 fb9e 	bl	800330c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2160      	movs	r1, #96	@ 0x60
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f000 fbca 	bl	8003370 <TIM_ITRx_SetConfig>
      break;
 8002bdc:	e01e      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bea:	001a      	movs	r2, r3
 8002bec:	f000 fb60 	bl	80032b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2140      	movs	r1, #64	@ 0x40
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f000 fbba 	bl	8003370 <TIM_ITRx_SetConfig>
      break;
 8002bfc:	e00e      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	0019      	movs	r1, r3
 8002c08:	0010      	movs	r0, r2
 8002c0a:	f000 fbb1 	bl	8003370 <TIM_ITRx_SetConfig>
      break;
 8002c0e:	e005      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002c10:	230f      	movs	r3, #15
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	2201      	movs	r2, #1
 8002c16:	701a      	strb	r2, [r3, #0]
      break;
 8002c18:	e000      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002c1a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	223d      	movs	r2, #61	@ 0x3d
 8002c20:	2101      	movs	r1, #1
 8002c22:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	223c      	movs	r2, #60	@ 0x3c
 8002c28:	2100      	movs	r1, #0
 8002c2a:	5499      	strb	r1, [r3, r2]

  return status;
 8002c2c:	230f      	movs	r3, #15
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	781b      	ldrb	r3, [r3, #0]
}
 8002c32:	0018      	movs	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	b004      	add	sp, #16
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	46c0      	nop			@ (mov r8, r8)
 8002c3c:	ffceff88 	.word	0xffceff88
 8002c40:	ffff00ff 	.word	0xffff00ff

08002c44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c4c:	46c0      	nop			@ (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b002      	add	sp, #8
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c5c:	46c0      	nop			@ (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b002      	add	sp, #8
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c6c:	46c0      	nop			@ (mov r8, r8)
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	b002      	add	sp, #8
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c7c:	46c0      	nop			@ (mov r8, r8)
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b002      	add	sp, #8
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a32      	ldr	r2, [pc, #200]	@ (8002d60 <TIM_Base_SetConfig+0xdc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d003      	beq.n	8002ca4 <TIM_Base_SetConfig+0x20>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a31      	ldr	r2, [pc, #196]	@ (8002d64 <TIM_Base_SetConfig+0xe0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d108      	bne.n	8002cb6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2270      	movs	r2, #112	@ 0x70
 8002ca8:	4393      	bics	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a29      	ldr	r2, [pc, #164]	@ (8002d60 <TIM_Base_SetConfig+0xdc>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00f      	beq.n	8002cde <TIM_Base_SetConfig+0x5a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a28      	ldr	r2, [pc, #160]	@ (8002d64 <TIM_Base_SetConfig+0xe0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00b      	beq.n	8002cde <TIM_Base_SetConfig+0x5a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a27      	ldr	r2, [pc, #156]	@ (8002d68 <TIM_Base_SetConfig+0xe4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d007      	beq.n	8002cde <TIM_Base_SetConfig+0x5a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a26      	ldr	r2, [pc, #152]	@ (8002d6c <TIM_Base_SetConfig+0xe8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d003      	beq.n	8002cde <TIM_Base_SetConfig+0x5a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a25      	ldr	r2, [pc, #148]	@ (8002d70 <TIM_Base_SetConfig+0xec>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d108      	bne.n	8002cf0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4a24      	ldr	r2, [pc, #144]	@ (8002d74 <TIM_Base_SetConfig+0xf0>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2280      	movs	r2, #128	@ 0x80
 8002cf4:	4393      	bics	r3, r2
 8002cf6:	001a      	movs	r2, r3
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a11      	ldr	r2, [pc, #68]	@ (8002d60 <TIM_Base_SetConfig+0xdc>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d007      	beq.n	8002d2e <TIM_Base_SetConfig+0xaa>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a12      	ldr	r2, [pc, #72]	@ (8002d6c <TIM_Base_SetConfig+0xe8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d003      	beq.n	8002d2e <TIM_Base_SetConfig+0xaa>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a11      	ldr	r2, [pc, #68]	@ (8002d70 <TIM_Base_SetConfig+0xec>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d103      	bne.n	8002d36 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	2201      	movs	r2, #1
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d106      	bne.n	8002d56 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	4393      	bics	r3, r2
 8002d50:	001a      	movs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	611a      	str	r2, [r3, #16]
  }
}
 8002d56:	46c0      	nop			@ (mov r8, r8)
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b004      	add	sp, #16
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	46c0      	nop			@ (mov r8, r8)
 8002d60:	40012c00 	.word	0x40012c00
 8002d64:	40000400 	.word	0x40000400
 8002d68:	40002000 	.word	0x40002000
 8002d6c:	40014400 	.word	0x40014400
 8002d70:	40014800 	.word	0x40014800
 8002d74:	fffffcff 	.word	0xfffffcff

08002d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	4393      	bics	r3, r2
 8002d90:	001a      	movs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4a2e      	ldr	r2, [pc, #184]	@ (8002e60 <TIM_OC1_SetConfig+0xe8>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2203      	movs	r2, #3
 8002dae:	4393      	bics	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	4393      	bics	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a24      	ldr	r2, [pc, #144]	@ (8002e64 <TIM_OC1_SetConfig+0xec>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d007      	beq.n	8002de6 <TIM_OC1_SetConfig+0x6e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a23      	ldr	r2, [pc, #140]	@ (8002e68 <TIM_OC1_SetConfig+0xf0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d003      	beq.n	8002de6 <TIM_OC1_SetConfig+0x6e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a22      	ldr	r2, [pc, #136]	@ (8002e6c <TIM_OC1_SetConfig+0xf4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d10c      	bne.n	8002e00 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2208      	movs	r2, #8
 8002dea:	4393      	bics	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	4393      	bics	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a18      	ldr	r2, [pc, #96]	@ (8002e64 <TIM_OC1_SetConfig+0xec>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d007      	beq.n	8002e18 <TIM_OC1_SetConfig+0xa0>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a17      	ldr	r2, [pc, #92]	@ (8002e68 <TIM_OC1_SetConfig+0xf0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d003      	beq.n	8002e18 <TIM_OC1_SetConfig+0xa0>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a16      	ldr	r2, [pc, #88]	@ (8002e6c <TIM_OC1_SetConfig+0xf4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d111      	bne.n	8002e3c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4a15      	ldr	r2, [pc, #84]	@ (8002e70 <TIM_OC1_SetConfig+0xf8>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4a14      	ldr	r2, [pc, #80]	@ (8002e74 <TIM_OC1_SetConfig+0xfc>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	621a      	str	r2, [r3, #32]
}
 8002e56:	46c0      	nop			@ (mov r8, r8)
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b006      	add	sp, #24
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	fffeff8f 	.word	0xfffeff8f
 8002e64:	40012c00 	.word	0x40012c00
 8002e68:	40014400 	.word	0x40014400
 8002e6c:	40014800 	.word	0x40014800
 8002e70:	fffffeff 	.word	0xfffffeff
 8002e74:	fffffdff 	.word	0xfffffdff

08002e78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	2210      	movs	r2, #16
 8002e8e:	4393      	bics	r3, r2
 8002e90:	001a      	movs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4a2c      	ldr	r2, [pc, #176]	@ (8002f58 <TIM_OC2_SetConfig+0xe0>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4a2b      	ldr	r2, [pc, #172]	@ (8002f5c <TIM_OC2_SetConfig+0xe4>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	4393      	bics	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a22      	ldr	r2, [pc, #136]	@ (8002f60 <TIM_OC2_SetConfig+0xe8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d10d      	bne.n	8002ef6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2280      	movs	r2, #128	@ 0x80
 8002ede:	4393      	bics	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2240      	movs	r2, #64	@ 0x40
 8002ef2:	4393      	bics	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a19      	ldr	r2, [pc, #100]	@ (8002f60 <TIM_OC2_SetConfig+0xe8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d007      	beq.n	8002f0e <TIM_OC2_SetConfig+0x96>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a18      	ldr	r2, [pc, #96]	@ (8002f64 <TIM_OC2_SetConfig+0xec>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d003      	beq.n	8002f0e <TIM_OC2_SetConfig+0x96>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a17      	ldr	r2, [pc, #92]	@ (8002f68 <TIM_OC2_SetConfig+0xf0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d113      	bne.n	8002f36 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4a16      	ldr	r2, [pc, #88]	@ (8002f6c <TIM_OC2_SetConfig+0xf4>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4a15      	ldr	r2, [pc, #84]	@ (8002f70 <TIM_OC2_SetConfig+0xf8>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	621a      	str	r2, [r3, #32]
}
 8002f50:	46c0      	nop			@ (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b006      	add	sp, #24
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	feff8fff 	.word	0xfeff8fff
 8002f5c:	fffffcff 	.word	0xfffffcff
 8002f60:	40012c00 	.word	0x40012c00
 8002f64:	40014400 	.word	0x40014400
 8002f68:	40014800 	.word	0x40014800
 8002f6c:	fffffbff 	.word	0xfffffbff
 8002f70:	fffff7ff 	.word	0xfffff7ff

08002f74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	4a31      	ldr	r2, [pc, #196]	@ (8003050 <TIM_OC3_SetConfig+0xdc>)
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4a2d      	ldr	r2, [pc, #180]	@ (8003054 <TIM_OC3_SetConfig+0xe0>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	4393      	bics	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	4a27      	ldr	r2, [pc, #156]	@ (8003058 <TIM_OC3_SetConfig+0xe4>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a23      	ldr	r2, [pc, #140]	@ (800305c <TIM_OC3_SetConfig+0xe8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d10d      	bne.n	8002fee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	4a22      	ldr	r2, [pc, #136]	@ (8003060 <TIM_OC3_SetConfig+0xec>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	021b      	lsls	r3, r3, #8
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8003064 <TIM_OC3_SetConfig+0xf0>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a1a      	ldr	r2, [pc, #104]	@ (800305c <TIM_OC3_SetConfig+0xe8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d007      	beq.n	8003006 <TIM_OC3_SetConfig+0x92>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8003068 <TIM_OC3_SetConfig+0xf4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d003      	beq.n	8003006 <TIM_OC3_SetConfig+0x92>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a1a      	ldr	r2, [pc, #104]	@ (800306c <TIM_OC3_SetConfig+0xf8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d113      	bne.n	800302e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4a19      	ldr	r2, [pc, #100]	@ (8003070 <TIM_OC3_SetConfig+0xfc>)
 800300a:	4013      	ands	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4a18      	ldr	r2, [pc, #96]	@ (8003074 <TIM_OC3_SetConfig+0x100>)
 8003012:	4013      	ands	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	621a      	str	r2, [r3, #32]
}
 8003048:	46c0      	nop			@ (mov r8, r8)
 800304a:	46bd      	mov	sp, r7
 800304c:	b006      	add	sp, #24
 800304e:	bd80      	pop	{r7, pc}
 8003050:	fffffeff 	.word	0xfffffeff
 8003054:	fffeff8f 	.word	0xfffeff8f
 8003058:	fffffdff 	.word	0xfffffdff
 800305c:	40012c00 	.word	0x40012c00
 8003060:	fffff7ff 	.word	0xfffff7ff
 8003064:	fffffbff 	.word	0xfffffbff
 8003068:	40014400 	.word	0x40014400
 800306c:	40014800 	.word	0x40014800
 8003070:	ffffefff 	.word	0xffffefff
 8003074:	ffffdfff 	.word	0xffffdfff

08003078 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	4a24      	ldr	r2, [pc, #144]	@ (8003120 <TIM_OC4_SetConfig+0xa8>)
 800308e:	401a      	ands	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4a20      	ldr	r2, [pc, #128]	@ (8003124 <TIM_OC4_SetConfig+0xac>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003128 <TIM_OC4_SetConfig+0xb0>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4a1b      	ldr	r2, [pc, #108]	@ (800312c <TIM_OC4_SetConfig+0xb4>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	031b      	lsls	r3, r3, #12
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a17      	ldr	r2, [pc, #92]	@ (8003130 <TIM_OC4_SetConfig+0xb8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d007      	beq.n	80030e8 <TIM_OC4_SetConfig+0x70>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a16      	ldr	r2, [pc, #88]	@ (8003134 <TIM_OC4_SetConfig+0xbc>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d003      	beq.n	80030e8 <TIM_OC4_SetConfig+0x70>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a15      	ldr	r2, [pc, #84]	@ (8003138 <TIM_OC4_SetConfig+0xc0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d109      	bne.n	80030fc <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	4a14      	ldr	r2, [pc, #80]	@ (800313c <TIM_OC4_SetConfig+0xc4>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	019b      	lsls	r3, r3, #6
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	621a      	str	r2, [r3, #32]
}
 8003116:	46c0      	nop			@ (mov r8, r8)
 8003118:	46bd      	mov	sp, r7
 800311a:	b006      	add	sp, #24
 800311c:	bd80      	pop	{r7, pc}
 800311e:	46c0      	nop			@ (mov r8, r8)
 8003120:	ffffefff 	.word	0xffffefff
 8003124:	feff8fff 	.word	0xfeff8fff
 8003128:	fffffcff 	.word	0xfffffcff
 800312c:	ffffdfff 	.word	0xffffdfff
 8003130:	40012c00 	.word	0x40012c00
 8003134:	40014400 	.word	0x40014400
 8003138:	40014800 	.word	0x40014800
 800313c:	ffffbfff 	.word	0xffffbfff

08003140 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	4a21      	ldr	r2, [pc, #132]	@ (80031dc <TIM_OC5_SetConfig+0x9c>)
 8003156:	401a      	ands	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4a1d      	ldr	r2, [pc, #116]	@ (80031e0 <TIM_OC5_SetConfig+0xa0>)
 800316c:	4013      	ands	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4a19      	ldr	r2, [pc, #100]	@ (80031e4 <TIM_OC5_SetConfig+0xa4>)
 800317e:	4013      	ands	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	041b      	lsls	r3, r3, #16
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a15      	ldr	r2, [pc, #84]	@ (80031e8 <TIM_OC5_SetConfig+0xa8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d007      	beq.n	80031a6 <TIM_OC5_SetConfig+0x66>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a14      	ldr	r2, [pc, #80]	@ (80031ec <TIM_OC5_SetConfig+0xac>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d003      	beq.n	80031a6 <TIM_OC5_SetConfig+0x66>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a13      	ldr	r2, [pc, #76]	@ (80031f0 <TIM_OC5_SetConfig+0xb0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d109      	bne.n	80031ba <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	4a0c      	ldr	r2, [pc, #48]	@ (80031dc <TIM_OC5_SetConfig+0x9c>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	621a      	str	r2, [r3, #32]
}
 80031d4:	46c0      	nop			@ (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b006      	add	sp, #24
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	fffeffff 	.word	0xfffeffff
 80031e0:	fffeff8f 	.word	0xfffeff8f
 80031e4:	fffdffff 	.word	0xfffdffff
 80031e8:	40012c00 	.word	0x40012c00
 80031ec:	40014400 	.word	0x40014400
 80031f0:	40014800 	.word	0x40014800

080031f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	4a22      	ldr	r2, [pc, #136]	@ (8003294 <TIM_OC6_SetConfig+0xa0>)
 800320a:	401a      	ands	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4a1e      	ldr	r2, [pc, #120]	@ (8003298 <TIM_OC6_SetConfig+0xa4>)
 8003220:	4013      	ands	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	021b      	lsls	r3, r3, #8
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4313      	orrs	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4a1a      	ldr	r2, [pc, #104]	@ (800329c <TIM_OC6_SetConfig+0xa8>)
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	051b      	lsls	r3, r3, #20
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a16      	ldr	r2, [pc, #88]	@ (80032a0 <TIM_OC6_SetConfig+0xac>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d007      	beq.n	800325c <TIM_OC6_SetConfig+0x68>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a15      	ldr	r2, [pc, #84]	@ (80032a4 <TIM_OC6_SetConfig+0xb0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d003      	beq.n	800325c <TIM_OC6_SetConfig+0x68>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a14      	ldr	r2, [pc, #80]	@ (80032a8 <TIM_OC6_SetConfig+0xb4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d109      	bne.n	8003270 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	4a13      	ldr	r2, [pc, #76]	@ (80032ac <TIM_OC6_SetConfig+0xb8>)
 8003260:	4013      	ands	r3, r2
 8003262:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	029b      	lsls	r3, r3, #10
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	4313      	orrs	r3, r2
 800326e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	621a      	str	r2, [r3, #32]
}
 800328a:	46c0      	nop			@ (mov r8, r8)
 800328c:	46bd      	mov	sp, r7
 800328e:	b006      	add	sp, #24
 8003290:	bd80      	pop	{r7, pc}
 8003292:	46c0      	nop			@ (mov r8, r8)
 8003294:	ffefffff 	.word	0xffefffff
 8003298:	feff8fff 	.word	0xfeff8fff
 800329c:	ffdfffff 	.word	0xffdfffff
 80032a0:	40012c00 	.word	0x40012c00
 80032a4:	40014400 	.word	0x40014400
 80032a8:	40014800 	.word	0x40014800
 80032ac:	fffbffff 	.word	0xfffbffff

080032b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	2201      	movs	r2, #1
 80032c8:	4393      	bics	r3, r2
 80032ca:	001a      	movs	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	22f0      	movs	r2, #240	@ 0xf0
 80032da:	4393      	bics	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	220a      	movs	r2, #10
 80032ec:	4393      	bics	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	621a      	str	r2, [r3, #32]
}
 8003304:	46c0      	nop			@ (mov r8, r8)
 8003306:	46bd      	mov	sp, r7
 8003308:	b006      	add	sp, #24
 800330a:	bd80      	pop	{r7, pc}

0800330c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	2210      	movs	r2, #16
 8003324:	4393      	bics	r3, r2
 8003326:	001a      	movs	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4a0d      	ldr	r2, [pc, #52]	@ (800336c <TIM_TI2_ConfigInputStage+0x60>)
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	031b      	lsls	r3, r3, #12
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	22a0      	movs	r2, #160	@ 0xa0
 8003348:	4393      	bics	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	621a      	str	r2, [r3, #32]
}
 8003362:	46c0      	nop			@ (mov r8, r8)
 8003364:	46bd      	mov	sp, r7
 8003366:	b006      	add	sp, #24
 8003368:	bd80      	pop	{r7, pc}
 800336a:	46c0      	nop			@ (mov r8, r8)
 800336c:	ffff0fff 	.word	0xffff0fff

08003370 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4a08      	ldr	r2, [pc, #32]	@ (80033a4 <TIM_ITRx_SetConfig+0x34>)
 8003384:	4013      	ands	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	2207      	movs	r2, #7
 8003390:	4313      	orrs	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	609a      	str	r2, [r3, #8]
}
 800339a:	46c0      	nop			@ (mov r8, r8)
 800339c:	46bd      	mov	sp, r7
 800339e:	b004      	add	sp, #16
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	46c0      	nop			@ (mov r8, r8)
 80033a4:	ffcfff8f 	.word	0xffcfff8f

080033a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	4a09      	ldr	r2, [pc, #36]	@ (80033e4 <TIM_ETR_SetConfig+0x3c>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	021a      	lsls	r2, r3, #8
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	431a      	orrs	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	609a      	str	r2, [r3, #8]
}
 80033dc:	46c0      	nop			@ (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	b006      	add	sp, #24
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	ffff00ff 	.word	0xffff00ff

080033e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	221f      	movs	r2, #31
 80033f8:	4013      	ands	r3, r2
 80033fa:	2201      	movs	r2, #1
 80033fc:	409a      	lsls	r2, r3
 80033fe:	0013      	movs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	43d2      	mvns	r2, r2
 800340a:	401a      	ands	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a1a      	ldr	r2, [r3, #32]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	211f      	movs	r1, #31
 8003418:	400b      	ands	r3, r1
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4099      	lsls	r1, r3
 800341e:	000b      	movs	r3, r1
 8003420:	431a      	orrs	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	621a      	str	r2, [r3, #32]
}
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	46bd      	mov	sp, r7
 800342a:	b006      	add	sp, #24
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d108      	bne.n	8003452 <HAL_TIMEx_PWMN_Start+0x22>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2244      	movs	r2, #68	@ 0x44
 8003444:	5c9b      	ldrb	r3, [r3, r2]
 8003446:	b2db      	uxtb	r3, r3
 8003448:	3b01      	subs	r3, #1
 800344a:	1e5a      	subs	r2, r3, #1
 800344c:	4193      	sbcs	r3, r2
 800344e:	b2db      	uxtb	r3, r3
 8003450:	e01f      	b.n	8003492 <HAL_TIMEx_PWMN_Start+0x62>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b04      	cmp	r3, #4
 8003456:	d108      	bne.n	800346a <HAL_TIMEx_PWMN_Start+0x3a>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2245      	movs	r2, #69	@ 0x45
 800345c:	5c9b      	ldrb	r3, [r3, r2]
 800345e:	b2db      	uxtb	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	1e5a      	subs	r2, r3, #1
 8003464:	4193      	sbcs	r3, r2
 8003466:	b2db      	uxtb	r3, r3
 8003468:	e013      	b.n	8003492 <HAL_TIMEx_PWMN_Start+0x62>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b08      	cmp	r3, #8
 800346e:	d108      	bne.n	8003482 <HAL_TIMEx_PWMN_Start+0x52>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2246      	movs	r2, #70	@ 0x46
 8003474:	5c9b      	ldrb	r3, [r3, r2]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	1e5a      	subs	r2, r3, #1
 800347c:	4193      	sbcs	r3, r2
 800347e:	b2db      	uxtb	r3, r3
 8003480:	e007      	b.n	8003492 <HAL_TIMEx_PWMN_Start+0x62>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2247      	movs	r2, #71	@ 0x47
 8003486:	5c9b      	ldrb	r3, [r3, r2]
 8003488:	b2db      	uxtb	r3, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	1e5a      	subs	r2, r3, #1
 800348e:	4193      	sbcs	r3, r2
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e057      	b.n	800354a <HAL_TIMEx_PWMN_Start+0x11a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d104      	bne.n	80034aa <HAL_TIMEx_PWMN_Start+0x7a>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2244      	movs	r2, #68	@ 0x44
 80034a4:	2102      	movs	r1, #2
 80034a6:	5499      	strb	r1, [r3, r2]
 80034a8:	e013      	b.n	80034d2 <HAL_TIMEx_PWMN_Start+0xa2>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d104      	bne.n	80034ba <HAL_TIMEx_PWMN_Start+0x8a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2245      	movs	r2, #69	@ 0x45
 80034b4:	2102      	movs	r1, #2
 80034b6:	5499      	strb	r1, [r3, r2]
 80034b8:	e00b      	b.n	80034d2 <HAL_TIMEx_PWMN_Start+0xa2>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d104      	bne.n	80034ca <HAL_TIMEx_PWMN_Start+0x9a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2246      	movs	r2, #70	@ 0x46
 80034c4:	2102      	movs	r1, #2
 80034c6:	5499      	strb	r1, [r3, r2]
 80034c8:	e003      	b.n	80034d2 <HAL_TIMEx_PWMN_Start+0xa2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2247      	movs	r2, #71	@ 0x47
 80034ce:	2102      	movs	r1, #2
 80034d0:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6839      	ldr	r1, [r7, #0]
 80034d8:	2204      	movs	r2, #4
 80034da:	0018      	movs	r0, r3
 80034dc:	f000 f956 	bl	800378c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2180      	movs	r1, #128	@ 0x80
 80034ec:	0209      	lsls	r1, r1, #8
 80034ee:	430a      	orrs	r2, r1
 80034f0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a17      	ldr	r2, [pc, #92]	@ (8003554 <HAL_TIMEx_PWMN_Start+0x124>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d004      	beq.n	8003506 <HAL_TIMEx_PWMN_Start+0xd6>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a15      	ldr	r2, [pc, #84]	@ (8003558 <HAL_TIMEx_PWMN_Start+0x128>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d116      	bne.n	8003534 <HAL_TIMEx_PWMN_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4a13      	ldr	r2, [pc, #76]	@ (800355c <HAL_TIMEx_PWMN_Start+0x12c>)
 800350e:	4013      	ands	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b06      	cmp	r3, #6
 8003516:	d016      	beq.n	8003546 <HAL_TIMEx_PWMN_Start+0x116>
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	2380      	movs	r3, #128	@ 0x80
 800351c:	025b      	lsls	r3, r3, #9
 800351e:	429a      	cmp	r2, r3
 8003520:	d011      	beq.n	8003546 <HAL_TIMEx_PWMN_Start+0x116>
    {
      __HAL_TIM_ENABLE(htim);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2101      	movs	r1, #1
 800352e:	430a      	orrs	r2, r1
 8003530:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003532:	e008      	b.n	8003546 <HAL_TIMEx_PWMN_Start+0x116>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2101      	movs	r1, #1
 8003540:	430a      	orrs	r2, r1
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	e000      	b.n	8003548 <HAL_TIMEx_PWMN_Start+0x118>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003546:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	0018      	movs	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	b004      	add	sp, #16
 8003550:	bd80      	pop	{r7, pc}
 8003552:	46c0      	nop			@ (mov r8, r8)
 8003554:	40012c00 	.word	0x40012c00
 8003558:	40000400 	.word	0x40000400
 800355c:	00010007 	.word	0x00010007

08003560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	223c      	movs	r2, #60	@ 0x3c
 800356e:	5c9b      	ldrb	r3, [r3, r2]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003574:	2302      	movs	r3, #2
 8003576:	e04a      	b.n	800360e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	223c      	movs	r2, #60	@ 0x3c
 800357c:	2101      	movs	r1, #1
 800357e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	223d      	movs	r2, #61	@ 0x3d
 8003584:	2102      	movs	r1, #2
 8003586:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a1e      	ldr	r2, [pc, #120]	@ (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d108      	bne.n	80035b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	4a1d      	ldr	r2, [pc, #116]	@ (800361c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2270      	movs	r2, #112	@ 0x70
 80035b8:	4393      	bics	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a11      	ldr	r2, [pc, #68]	@ (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d004      	beq.n	80035e2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a10      	ldr	r2, [pc, #64]	@ (8003620 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d10c      	bne.n	80035fc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2280      	movs	r2, #128	@ 0x80
 80035e6:	4393      	bics	r3, r2
 80035e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	223d      	movs	r2, #61	@ 0x3d
 8003600:	2101      	movs	r1, #1
 8003602:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	223c      	movs	r2, #60	@ 0x3c
 8003608:	2100      	movs	r1, #0
 800360a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	0018      	movs	r0, r3
 8003610:	46bd      	mov	sp, r7
 8003612:	b004      	add	sp, #16
 8003614:	bd80      	pop	{r7, pc}
 8003616:	46c0      	nop			@ (mov r8, r8)
 8003618:	40012c00 	.word	0x40012c00
 800361c:	ff0fffff 	.word	0xff0fffff
 8003620:	40000400 	.word	0x40000400

08003624 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	223c      	movs	r2, #60	@ 0x3c
 8003636:	5c9b      	ldrb	r3, [r3, r2]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800363c:	2302      	movs	r3, #2
 800363e:	e06f      	b.n	8003720 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	223c      	movs	r2, #60	@ 0x3c
 8003644:	2101      	movs	r1, #1
 8003646:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	22ff      	movs	r2, #255	@ 0xff
 800364c:	4393      	bics	r3, r2
 800364e:	001a      	movs	r2, r3
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4313      	orrs	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4a33      	ldr	r2, [pc, #204]	@ (8003728 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800365c:	401a      	ands	r2, r3
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4a30      	ldr	r2, [pc, #192]	@ (800372c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800366a:	401a      	ands	r2, r3
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4313      	orrs	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4a2e      	ldr	r2, [pc, #184]	@ (8003730 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003678:	401a      	ands	r2, r3
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4a2b      	ldr	r2, [pc, #172]	@ (8003734 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003686:	401a      	ands	r2, r3
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4a29      	ldr	r2, [pc, #164]	@ (8003738 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003694:	401a      	ands	r2, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4a26      	ldr	r2, [pc, #152]	@ (800373c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80036a2:	401a      	ands	r2, r3
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4a24      	ldr	r2, [pc, #144]	@ (8003740 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80036b0:	401a      	ands	r2, r3
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	041b      	lsls	r3, r3, #16
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4a21      	ldr	r2, [pc, #132]	@ (8003744 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80036c0:	401a      	ands	r2, r3
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003748 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d11c      	bne.n	800370e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4a1d      	ldr	r2, [pc, #116]	@ (800374c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80036d8:	401a      	ands	r2, r3
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036de:	051b      	lsls	r3, r3, #20
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4a1a      	ldr	r2, [pc, #104]	@ (8003750 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80036e8:	401a      	ands	r2, r3
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	4a17      	ldr	r2, [pc, #92]	@ (8003754 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80036f6:	401a      	ands	r2, r3
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a15      	ldr	r2, [pc, #84]	@ (8003758 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003704:	401a      	ands	r2, r3
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	223c      	movs	r2, #60	@ 0x3c
 800371a:	2100      	movs	r1, #0
 800371c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	0018      	movs	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	b004      	add	sp, #16
 8003726:	bd80      	pop	{r7, pc}
 8003728:	fffffcff 	.word	0xfffffcff
 800372c:	fffffbff 	.word	0xfffffbff
 8003730:	fffff7ff 	.word	0xfffff7ff
 8003734:	ffffefff 	.word	0xffffefff
 8003738:	ffffdfff 	.word	0xffffdfff
 800373c:	ffffbfff 	.word	0xffffbfff
 8003740:	fff0ffff 	.word	0xfff0ffff
 8003744:	efffffff 	.word	0xefffffff
 8003748:	40012c00 	.word	0x40012c00
 800374c:	ff0fffff 	.word	0xff0fffff
 8003750:	feffffff 	.word	0xfeffffff
 8003754:	fdffffff 	.word	0xfdffffff
 8003758:	dfffffff 	.word	0xdfffffff

0800375c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003764:	46c0      	nop			@ (mov r8, r8)
 8003766:	46bd      	mov	sp, r7
 8003768:	b002      	add	sp, #8
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003774:	46c0      	nop			@ (mov r8, r8)
 8003776:	46bd      	mov	sp, r7
 8003778:	b002      	add	sp, #8
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003784:	46c0      	nop			@ (mov r8, r8)
 8003786:	46bd      	mov	sp, r7
 8003788:	b002      	add	sp, #8
 800378a:	bd80      	pop	{r7, pc}

0800378c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	220f      	movs	r2, #15
 800379c:	4013      	ands	r3, r2
 800379e:	2204      	movs	r2, #4
 80037a0:	409a      	lsls	r2, r3
 80037a2:	0013      	movs	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	43d2      	mvns	r2, r2
 80037ae:	401a      	ands	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a1a      	ldr	r2, [r3, #32]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	210f      	movs	r1, #15
 80037bc:	400b      	ands	r3, r1
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	4099      	lsls	r1, r3
 80037c2:	000b      	movs	r3, r1
 80037c4:	431a      	orrs	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	621a      	str	r2, [r3, #32]
}
 80037ca:	46c0      	nop			@ (mov r8, r8)
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b006      	add	sp, #24
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e046      	b.n	8003874 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2288      	movs	r2, #136	@ 0x88
 80037ea:	589b      	ldr	r3, [r3, r2]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d107      	bne.n	8003800 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2284      	movs	r2, #132	@ 0x84
 80037f4:	2100      	movs	r1, #0
 80037f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	0018      	movs	r0, r3
 80037fc:	f7fd fa16 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2288      	movs	r2, #136	@ 0x88
 8003804:	2124      	movs	r1, #36	@ 0x24
 8003806:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2101      	movs	r1, #1
 8003814:	438a      	bics	r2, r1
 8003816:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	0018      	movs	r0, r3
 8003824:	f000 fa10 	bl	8003c48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	0018      	movs	r0, r3
 800382c:	f000 f8a2 	bl	8003974 <UART_SetConfig>
 8003830:	0003      	movs	r3, r0
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e01c      	b.n	8003874 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	490d      	ldr	r1, [pc, #52]	@ (800387c <HAL_UART_Init+0xa8>)
 8003846:	400a      	ands	r2, r1
 8003848:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	212a      	movs	r1, #42	@ 0x2a
 8003856:	438a      	bics	r2, r1
 8003858:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2101      	movs	r1, #1
 8003866:	430a      	orrs	r2, r1
 8003868:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	0018      	movs	r0, r3
 800386e:	f000 fa9f 	bl	8003db0 <UART_CheckIdleState>
 8003872:	0003      	movs	r3, r0
}
 8003874:	0018      	movs	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	b002      	add	sp, #8
 800387a:	bd80      	pop	{r7, pc}
 800387c:	ffffb7ff 	.word	0xffffb7ff

08003880 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	1dbb      	adds	r3, r7, #6
 800388c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	228c      	movs	r2, #140	@ 0x8c
 8003892:	589b      	ldr	r3, [r3, r2]
 8003894:	2b20      	cmp	r3, #32
 8003896:	d145      	bne.n	8003924 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_UART_Receive_DMA+0x26>
 800389e:	1dbb      	adds	r3, r7, #6
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e03d      	b.n	8003926 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	2380      	movs	r3, #128	@ 0x80
 80038b0:	015b      	lsls	r3, r3, #5
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d109      	bne.n	80038ca <HAL_UART_Receive_DMA+0x4a>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d105      	bne.n	80038ca <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2201      	movs	r2, #1
 80038c2:	4013      	ands	r3, r2
 80038c4:	d001      	beq.n	80038ca <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e02d      	b.n	8003926 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	2380      	movs	r3, #128	@ 0x80
 80038d8:	041b      	lsls	r3, r3, #16
 80038da:	4013      	ands	r3, r2
 80038dc:	d019      	beq.n	8003912 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038de:	f3ef 8310 	mrs	r3, PRIMASK
 80038e2:	613b      	str	r3, [r7, #16]
  return(result);
 80038e4:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80038e6:	61fb      	str	r3, [r7, #28]
 80038e8:	2301      	movs	r3, #1
 80038ea:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f383 8810 	msr	PRIMASK, r3
}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2180      	movs	r1, #128	@ 0x80
 8003900:	04c9      	lsls	r1, r1, #19
 8003902:	430a      	orrs	r2, r1
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f383 8810 	msr	PRIMASK, r3
}
 8003910:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003912:	1dbb      	adds	r3, r7, #6
 8003914:	881a      	ldrh	r2, [r3, #0]
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	0018      	movs	r0, r3
 800391c:	f000 fb62 	bl	8003fe4 <UART_Start_Receive_DMA>
 8003920:	0003      	movs	r3, r0
 8003922:	e000      	b.n	8003926 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003924:	2302      	movs	r3, #2
  }
}
 8003926:	0018      	movs	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	b008      	add	sp, #32
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	b002      	add	sp, #8
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003946:	46c0      	nop			@ (mov r8, r8)
 8003948:	46bd      	mov	sp, r7
 800394a:	b002      	add	sp, #8
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003956:	46c0      	nop			@ (mov r8, r8)
 8003958:	46bd      	mov	sp, r7
 800395a:	b002      	add	sp, #8
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	000a      	movs	r2, r1
 8003968:	1cbb      	adds	r3, r7, #2
 800396a:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800396c:	46c0      	nop			@ (mov r8, r8)
 800396e:	46bd      	mov	sp, r7
 8003970:	b002      	add	sp, #8
 8003972:	bd80      	pop	{r7, pc}

08003974 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800397c:	231a      	movs	r3, #26
 800397e:	18fb      	adds	r3, r7, r3
 8003980:	2200      	movs	r2, #0
 8003982:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	4313      	orrs	r3, r2
 800399a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4aa1      	ldr	r2, [pc, #644]	@ (8003c28 <UART_SetConfig+0x2b4>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	0019      	movs	r1, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	69fa      	ldr	r2, [r7, #28]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	4a9c      	ldr	r2, [pc, #624]	@ (8003c2c <UART_SetConfig+0x2b8>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	0019      	movs	r1, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	69fa      	ldr	r2, [r7, #28]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	4a93      	ldr	r2, [pc, #588]	@ (8003c30 <UART_SetConfig+0x2bc>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	0019      	movs	r1, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f6:	220f      	movs	r2, #15
 80039f8:	4393      	bics	r3, r2
 80039fa:	0019      	movs	r1, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a89      	ldr	r2, [pc, #548]	@ (8003c34 <UART_SetConfig+0x2c0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d127      	bne.n	8003a62 <UART_SetConfig+0xee>
 8003a12:	4b89      	ldr	r3, [pc, #548]	@ (8003c38 <UART_SetConfig+0x2c4>)
 8003a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a16:	2203      	movs	r2, #3
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d017      	beq.n	8003a4e <UART_SetConfig+0xda>
 8003a1e:	d81b      	bhi.n	8003a58 <UART_SetConfig+0xe4>
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d00a      	beq.n	8003a3a <UART_SetConfig+0xc6>
 8003a24:	d818      	bhi.n	8003a58 <UART_SetConfig+0xe4>
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <UART_SetConfig+0xbc>
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d00a      	beq.n	8003a44 <UART_SetConfig+0xd0>
 8003a2e:	e013      	b.n	8003a58 <UART_SetConfig+0xe4>
 8003a30:	231b      	movs	r3, #27
 8003a32:	18fb      	adds	r3, r7, r3
 8003a34:	2200      	movs	r2, #0
 8003a36:	701a      	strb	r2, [r3, #0]
 8003a38:	e021      	b.n	8003a7e <UART_SetConfig+0x10a>
 8003a3a:	231b      	movs	r3, #27
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	2202      	movs	r2, #2
 8003a40:	701a      	strb	r2, [r3, #0]
 8003a42:	e01c      	b.n	8003a7e <UART_SetConfig+0x10a>
 8003a44:	231b      	movs	r3, #27
 8003a46:	18fb      	adds	r3, r7, r3
 8003a48:	2204      	movs	r2, #4
 8003a4a:	701a      	strb	r2, [r3, #0]
 8003a4c:	e017      	b.n	8003a7e <UART_SetConfig+0x10a>
 8003a4e:	231b      	movs	r3, #27
 8003a50:	18fb      	adds	r3, r7, r3
 8003a52:	2208      	movs	r2, #8
 8003a54:	701a      	strb	r2, [r3, #0]
 8003a56:	e012      	b.n	8003a7e <UART_SetConfig+0x10a>
 8003a58:	231b      	movs	r3, #27
 8003a5a:	18fb      	adds	r3, r7, r3
 8003a5c:	2210      	movs	r2, #16
 8003a5e:	701a      	strb	r2, [r3, #0]
 8003a60:	e00d      	b.n	8003a7e <UART_SetConfig+0x10a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a75      	ldr	r2, [pc, #468]	@ (8003c3c <UART_SetConfig+0x2c8>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d104      	bne.n	8003a76 <UART_SetConfig+0x102>
 8003a6c:	231b      	movs	r3, #27
 8003a6e:	18fb      	adds	r3, r7, r3
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
 8003a74:	e003      	b.n	8003a7e <UART_SetConfig+0x10a>
 8003a76:	231b      	movs	r3, #27
 8003a78:	18fb      	adds	r3, r7, r3
 8003a7a:	2210      	movs	r2, #16
 8003a7c:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69da      	ldr	r2, [r3, #28]
 8003a82:	2380      	movs	r3, #128	@ 0x80
 8003a84:	021b      	lsls	r3, r3, #8
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d000      	beq.n	8003a8c <UART_SetConfig+0x118>
 8003a8a:	e065      	b.n	8003b58 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8003a8c:	231b      	movs	r3, #27
 8003a8e:	18fb      	adds	r3, r7, r3
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d015      	beq.n	8003ac2 <UART_SetConfig+0x14e>
 8003a96:	dc18      	bgt.n	8003aca <UART_SetConfig+0x156>
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d00d      	beq.n	8003ab8 <UART_SetConfig+0x144>
 8003a9c:	dc15      	bgt.n	8003aca <UART_SetConfig+0x156>
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <UART_SetConfig+0x134>
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d005      	beq.n	8003ab2 <UART_SetConfig+0x13e>
 8003aa6:	e010      	b.n	8003aca <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa8:	f7fe fbfa 	bl	80022a0 <HAL_RCC_GetPCLK1Freq>
 8003aac:	0003      	movs	r3, r0
 8003aae:	617b      	str	r3, [r7, #20]
        break;
 8003ab0:	e012      	b.n	8003ad8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ab2:	4b63      	ldr	r3, [pc, #396]	@ (8003c40 <UART_SetConfig+0x2cc>)
 8003ab4:	617b      	str	r3, [r7, #20]
        break;
 8003ab6:	e00f      	b.n	8003ad8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ab8:	f7fe fb68 	bl	800218c <HAL_RCC_GetSysClockFreq>
 8003abc:	0003      	movs	r3, r0
 8003abe:	617b      	str	r3, [r7, #20]
        break;
 8003ac0:	e00a      	b.n	8003ad8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ac2:	2380      	movs	r3, #128	@ 0x80
 8003ac4:	021b      	lsls	r3, r3, #8
 8003ac6:	617b      	str	r3, [r7, #20]
        break;
 8003ac8:	e006      	b.n	8003ad8 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ace:	231a      	movs	r3, #26
 8003ad0:	18fb      	adds	r3, r7, r3
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	701a      	strb	r2, [r3, #0]
        break;
 8003ad6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d100      	bne.n	8003ae0 <UART_SetConfig+0x16c>
 8003ade:	e08d      	b.n	8003bfc <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ae4:	4b57      	ldr	r3, [pc, #348]	@ (8003c44 <UART_SetConfig+0x2d0>)
 8003ae6:	0052      	lsls	r2, r2, #1
 8003ae8:	5ad3      	ldrh	r3, [r2, r3]
 8003aea:	0019      	movs	r1, r3
 8003aec:	6978      	ldr	r0, [r7, #20]
 8003aee:	f7fc fb07 	bl	8000100 <__udivsi3>
 8003af2:	0003      	movs	r3, r0
 8003af4:	005a      	lsls	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	085b      	lsrs	r3, r3, #1
 8003afc:	18d2      	adds	r2, r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	0019      	movs	r1, r3
 8003b04:	0010      	movs	r0, r2
 8003b06:	f7fc fafb 	bl	8000100 <__udivsi3>
 8003b0a:	0003      	movs	r3, r0
 8003b0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	2b0f      	cmp	r3, #15
 8003b12:	d91c      	bls.n	8003b4e <UART_SetConfig+0x1da>
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	2380      	movs	r3, #128	@ 0x80
 8003b18:	025b      	lsls	r3, r3, #9
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d217      	bcs.n	8003b4e <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	200e      	movs	r0, #14
 8003b24:	183b      	adds	r3, r7, r0
 8003b26:	210f      	movs	r1, #15
 8003b28:	438a      	bics	r2, r1
 8003b2a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	085b      	lsrs	r3, r3, #1
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2207      	movs	r2, #7
 8003b34:	4013      	ands	r3, r2
 8003b36:	b299      	uxth	r1, r3
 8003b38:	183b      	adds	r3, r7, r0
 8003b3a:	183a      	adds	r2, r7, r0
 8003b3c:	8812      	ldrh	r2, [r2, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	183a      	adds	r2, r7, r0
 8003b48:	8812      	ldrh	r2, [r2, #0]
 8003b4a:	60da      	str	r2, [r3, #12]
 8003b4c:	e056      	b.n	8003bfc <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003b4e:	231a      	movs	r3, #26
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	2201      	movs	r2, #1
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	e051      	b.n	8003bfc <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b58:	231b      	movs	r3, #27
 8003b5a:	18fb      	adds	r3, r7, r3
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d015      	beq.n	8003b8e <UART_SetConfig+0x21a>
 8003b62:	dc18      	bgt.n	8003b96 <UART_SetConfig+0x222>
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d00d      	beq.n	8003b84 <UART_SetConfig+0x210>
 8003b68:	dc15      	bgt.n	8003b96 <UART_SetConfig+0x222>
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <UART_SetConfig+0x200>
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d005      	beq.n	8003b7e <UART_SetConfig+0x20a>
 8003b72:	e010      	b.n	8003b96 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b74:	f7fe fb94 	bl	80022a0 <HAL_RCC_GetPCLK1Freq>
 8003b78:	0003      	movs	r3, r0
 8003b7a:	617b      	str	r3, [r7, #20]
        break;
 8003b7c:	e012      	b.n	8003ba4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b7e:	4b30      	ldr	r3, [pc, #192]	@ (8003c40 <UART_SetConfig+0x2cc>)
 8003b80:	617b      	str	r3, [r7, #20]
        break;
 8003b82:	e00f      	b.n	8003ba4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b84:	f7fe fb02 	bl	800218c <HAL_RCC_GetSysClockFreq>
 8003b88:	0003      	movs	r3, r0
 8003b8a:	617b      	str	r3, [r7, #20]
        break;
 8003b8c:	e00a      	b.n	8003ba4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b8e:	2380      	movs	r3, #128	@ 0x80
 8003b90:	021b      	lsls	r3, r3, #8
 8003b92:	617b      	str	r3, [r7, #20]
        break;
 8003b94:	e006      	b.n	8003ba4 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b9a:	231a      	movs	r3, #26
 8003b9c:	18fb      	adds	r3, r7, r3
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	701a      	strb	r2, [r3, #0]
        break;
 8003ba2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d028      	beq.n	8003bfc <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bae:	4b25      	ldr	r3, [pc, #148]	@ (8003c44 <UART_SetConfig+0x2d0>)
 8003bb0:	0052      	lsls	r2, r2, #1
 8003bb2:	5ad3      	ldrh	r3, [r2, r3]
 8003bb4:	0019      	movs	r1, r3
 8003bb6:	6978      	ldr	r0, [r7, #20]
 8003bb8:	f7fc faa2 	bl	8000100 <__udivsi3>
 8003bbc:	0003      	movs	r3, r0
 8003bbe:	001a      	movs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	085b      	lsrs	r3, r3, #1
 8003bc6:	18d2      	adds	r2, r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	0019      	movs	r1, r3
 8003bce:	0010      	movs	r0, r2
 8003bd0:	f7fc fa96 	bl	8000100 <__udivsi3>
 8003bd4:	0003      	movs	r3, r0
 8003bd6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	2b0f      	cmp	r3, #15
 8003bdc:	d90a      	bls.n	8003bf4 <UART_SetConfig+0x280>
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	2380      	movs	r3, #128	@ 0x80
 8003be2:	025b      	lsls	r3, r3, #9
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d205      	bcs.n	8003bf4 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60da      	str	r2, [r3, #12]
 8003bf2:	e003      	b.n	8003bfc <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003bf4:	231a      	movs	r3, #26
 8003bf6:	18fb      	adds	r3, r7, r3
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	226a      	movs	r2, #106	@ 0x6a
 8003c00:	2101      	movs	r1, #1
 8003c02:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2268      	movs	r2, #104	@ 0x68
 8003c08:	2101      	movs	r1, #1
 8003c0a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003c18:	231a      	movs	r3, #26
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	781b      	ldrb	r3, [r3, #0]
}
 8003c1e:	0018      	movs	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	b008      	add	sp, #32
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	46c0      	nop			@ (mov r8, r8)
 8003c28:	cfff69f3 	.word	0xcfff69f3
 8003c2c:	ffffcfff 	.word	0xffffcfff
 8003c30:	11fff4ff 	.word	0x11fff4ff
 8003c34:	40013800 	.word	0x40013800
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	40004400 	.word	0x40004400
 8003c40:	00f42400 	.word	0x00f42400
 8003c44:	08004598 	.word	0x08004598

08003c48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c54:	2208      	movs	r2, #8
 8003c56:	4013      	ands	r3, r2
 8003c58:	d00b      	beq.n	8003c72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	4a4a      	ldr	r2, [pc, #296]	@ (8003d8c <UART_AdvFeatureConfig+0x144>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	0019      	movs	r1, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c76:	2201      	movs	r2, #1
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d00b      	beq.n	8003c94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	4a43      	ldr	r2, [pc, #268]	@ (8003d90 <UART_AdvFeatureConfig+0x148>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	0019      	movs	r1, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c98:	2202      	movs	r2, #2
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d00b      	beq.n	8003cb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	4a3b      	ldr	r2, [pc, #236]	@ (8003d94 <UART_AdvFeatureConfig+0x14c>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	0019      	movs	r1, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cba:	2204      	movs	r2, #4
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d00b      	beq.n	8003cd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	4a34      	ldr	r2, [pc, #208]	@ (8003d98 <UART_AdvFeatureConfig+0x150>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	0019      	movs	r1, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cdc:	2210      	movs	r2, #16
 8003cde:	4013      	ands	r3, r2
 8003ce0:	d00b      	beq.n	8003cfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	4a2c      	ldr	r2, [pc, #176]	@ (8003d9c <UART_AdvFeatureConfig+0x154>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	0019      	movs	r1, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfe:	2220      	movs	r2, #32
 8003d00:	4013      	ands	r3, r2
 8003d02:	d00b      	beq.n	8003d1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	4a25      	ldr	r2, [pc, #148]	@ (8003da0 <UART_AdvFeatureConfig+0x158>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	0019      	movs	r1, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d20:	2240      	movs	r2, #64	@ 0x40
 8003d22:	4013      	ands	r3, r2
 8003d24:	d01d      	beq.n	8003d62 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003da4 <UART_AdvFeatureConfig+0x15c>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	0019      	movs	r1, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d42:	2380      	movs	r3, #128	@ 0x80
 8003d44:	035b      	lsls	r3, r3, #13
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d10b      	bne.n	8003d62 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	4a15      	ldr	r2, [pc, #84]	@ (8003da8 <UART_AdvFeatureConfig+0x160>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	0019      	movs	r1, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d66:	2280      	movs	r2, #128	@ 0x80
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d00b      	beq.n	8003d84 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	4a0e      	ldr	r2, [pc, #56]	@ (8003dac <UART_AdvFeatureConfig+0x164>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	0019      	movs	r1, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	605a      	str	r2, [r3, #4]
  }
}
 8003d84:	46c0      	nop			@ (mov r8, r8)
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b002      	add	sp, #8
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	ffff7fff 	.word	0xffff7fff
 8003d90:	fffdffff 	.word	0xfffdffff
 8003d94:	fffeffff 	.word	0xfffeffff
 8003d98:	fffbffff 	.word	0xfffbffff
 8003d9c:	ffffefff 	.word	0xffffefff
 8003da0:	ffffdfff 	.word	0xffffdfff
 8003da4:	ffefffff 	.word	0xffefffff
 8003da8:	ff9fffff 	.word	0xff9fffff
 8003dac:	fff7ffff 	.word	0xfff7ffff

08003db0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b092      	sub	sp, #72	@ 0x48
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2290      	movs	r2, #144	@ 0x90
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dc0:	f7fd f88c 	bl	8000edc <HAL_GetTick>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2208      	movs	r2, #8
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d12d      	bne.n	8003e32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dd8:	2280      	movs	r2, #128	@ 0x80
 8003dda:	0391      	lsls	r1, r2, #14
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	4a47      	ldr	r2, [pc, #284]	@ (8003efc <UART_CheckIdleState+0x14c>)
 8003de0:	9200      	str	r2, [sp, #0]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f000 f88e 	bl	8003f04 <UART_WaitOnFlagUntilTimeout>
 8003de8:	1e03      	subs	r3, r0, #0
 8003dea:	d022      	beq.n	8003e32 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dec:	f3ef 8310 	mrs	r3, PRIMASK
 8003df0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003df4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003df6:	2301      	movs	r3, #1
 8003df8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfc:	f383 8810 	msr	PRIMASK, r3
}
 8003e00:	46c0      	nop			@ (mov r8, r8)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2180      	movs	r1, #128	@ 0x80
 8003e0e:	438a      	bics	r2, r1
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e18:	f383 8810 	msr	PRIMASK, r3
}
 8003e1c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2288      	movs	r2, #136	@ 0x88
 8003e22:	2120      	movs	r1, #32
 8003e24:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2284      	movs	r2, #132	@ 0x84
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e060      	b.n	8003ef4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2204      	movs	r2, #4
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d146      	bne.n	8003ece <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e42:	2280      	movs	r2, #128	@ 0x80
 8003e44:	03d1      	lsls	r1, r2, #15
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	4a2c      	ldr	r2, [pc, #176]	@ (8003efc <UART_CheckIdleState+0x14c>)
 8003e4a:	9200      	str	r2, [sp, #0]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f000 f859 	bl	8003f04 <UART_WaitOnFlagUntilTimeout>
 8003e52:	1e03      	subs	r3, r0, #0
 8003e54:	d03b      	beq.n	8003ece <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e56:	f3ef 8310 	mrs	r3, PRIMASK
 8003e5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e60:	2301      	movs	r3, #1
 8003e62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f383 8810 	msr	PRIMASK, r3
}
 8003e6a:	46c0      	nop			@ (mov r8, r8)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4922      	ldr	r1, [pc, #136]	@ (8003f00 <UART_CheckIdleState+0x150>)
 8003e78:	400a      	ands	r2, r1
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f383 8810 	msr	PRIMASK, r3
}
 8003e86:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e88:	f3ef 8310 	mrs	r3, PRIMASK
 8003e8c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e8e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e90:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e92:	2301      	movs	r3, #1
 8003e94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	f383 8810 	msr	PRIMASK, r3
}
 8003e9c:	46c0      	nop			@ (mov r8, r8)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	438a      	bics	r2, r1
 8003eac:	609a      	str	r2, [r3, #8]
 8003eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	f383 8810 	msr	PRIMASK, r3
}
 8003eb8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	228c      	movs	r2, #140	@ 0x8c
 8003ebe:	2120      	movs	r1, #32
 8003ec0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2284      	movs	r2, #132	@ 0x84
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e012      	b.n	8003ef4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2288      	movs	r2, #136	@ 0x88
 8003ed2:	2120      	movs	r1, #32
 8003ed4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	228c      	movs	r2, #140	@ 0x8c
 8003eda:	2120      	movs	r1, #32
 8003edc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2284      	movs	r2, #132	@ 0x84
 8003eee:	2100      	movs	r1, #0
 8003ef0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b010      	add	sp, #64	@ 0x40
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	01ffffff 	.word	0x01ffffff
 8003f00:	fffffedf 	.word	0xfffffedf

08003f04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	1dfb      	adds	r3, r7, #7
 8003f12:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f14:	e051      	b.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	d04e      	beq.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1c:	f7fc ffde 	bl	8000edc <HAL_GetTick>
 8003f20:	0002      	movs	r2, r0
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d302      	bcc.n	8003f32 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e051      	b.n	8003fda <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d03b      	beq.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb6>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b80      	cmp	r3, #128	@ 0x80
 8003f46:	d038      	beq.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb6>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2b40      	cmp	r3, #64	@ 0x40
 8003f4c:	d035      	beq.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	2208      	movs	r2, #8
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d111      	bne.n	8003f80 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2208      	movs	r2, #8
 8003f62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	0018      	movs	r0, r3
 8003f68:	f000 f922 	bl	80041b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2290      	movs	r2, #144	@ 0x90
 8003f70:	2108      	movs	r1, #8
 8003f72:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2284      	movs	r2, #132	@ 0x84
 8003f78:	2100      	movs	r1, #0
 8003f7a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e02c      	b.n	8003fda <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	69da      	ldr	r2, [r3, #28]
 8003f86:	2380      	movs	r3, #128	@ 0x80
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	401a      	ands	r2, r3
 8003f8c:	2380      	movs	r3, #128	@ 0x80
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d112      	bne.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2280      	movs	r2, #128	@ 0x80
 8003f9a:	0112      	lsls	r2, r2, #4
 8003f9c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f000 f905 	bl	80041b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2290      	movs	r2, #144	@ 0x90
 8003faa:	2120      	movs	r1, #32
 8003fac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2284      	movs	r2, #132	@ 0x84
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e00f      	b.n	8003fda <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	425a      	negs	r2, r3
 8003fca:	4153      	adcs	r3, r2
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	001a      	movs	r2, r3
 8003fd0:	1dfb      	adds	r3, r7, #7
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d09e      	beq.n	8003f16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	0018      	movs	r0, r3
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	b004      	add	sp, #16
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b090      	sub	sp, #64	@ 0x40
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	1dbb      	adds	r3, r7, #6
 8003ff0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	1dba      	adds	r2, r7, #6
 8003ffc:	215c      	movs	r1, #92	@ 0x5c
 8003ffe:	8812      	ldrh	r2, [r2, #0]
 8004000:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2290      	movs	r2, #144	@ 0x90
 8004006:	2100      	movs	r1, #0
 8004008:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	228c      	movs	r2, #140	@ 0x8c
 800400e:	2122      	movs	r1, #34	@ 0x22
 8004010:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2280      	movs	r2, #128	@ 0x80
 8004016:	589b      	ldr	r3, [r3, r2]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d02d      	beq.n	8004078 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2280      	movs	r2, #128	@ 0x80
 8004020:	589b      	ldr	r3, [r3, r2]
 8004022:	4a40      	ldr	r2, [pc, #256]	@ (8004124 <UART_Start_Receive_DMA+0x140>)
 8004024:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2280      	movs	r2, #128	@ 0x80
 800402a:	589b      	ldr	r3, [r3, r2]
 800402c:	4a3e      	ldr	r2, [pc, #248]	@ (8004128 <UART_Start_Receive_DMA+0x144>)
 800402e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2280      	movs	r2, #128	@ 0x80
 8004034:	589b      	ldr	r3, [r3, r2]
 8004036:	4a3d      	ldr	r2, [pc, #244]	@ (800412c <UART_Start_Receive_DMA+0x148>)
 8004038:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2280      	movs	r2, #128	@ 0x80
 800403e:	589b      	ldr	r3, [r3, r2]
 8004040:	2200      	movs	r2, #0
 8004042:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2280      	movs	r2, #128	@ 0x80
 8004048:	5898      	ldr	r0, [r3, r2]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3324      	adds	r3, #36	@ 0x24
 8004050:	0019      	movs	r1, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004056:	001a      	movs	r2, r3
 8004058:	1dbb      	adds	r3, r7, #6
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	f7fd f8b0 	bl	80011c0 <HAL_DMA_Start_IT>
 8004060:	1e03      	subs	r3, r0, #0
 8004062:	d009      	beq.n	8004078 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2290      	movs	r2, #144	@ 0x90
 8004068:	2110      	movs	r1, #16
 800406a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	228c      	movs	r2, #140	@ 0x8c
 8004070:	2120      	movs	r1, #32
 8004072:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e050      	b.n	800411a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d019      	beq.n	80040b4 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004080:	f3ef 8310 	mrs	r3, PRIMASK
 8004084:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004088:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800408a:	2301      	movs	r3, #1
 800408c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004090:	f383 8810 	msr	PRIMASK, r3
}
 8004094:	46c0      	nop			@ (mov r8, r8)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2180      	movs	r1, #128	@ 0x80
 80040a2:	0049      	lsls	r1, r1, #1
 80040a4:	430a      	orrs	r2, r1
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040aa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ae:	f383 8810 	msr	PRIMASK, r3
}
 80040b2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040b4:	f3ef 8310 	mrs	r3, PRIMASK
 80040b8:	613b      	str	r3, [r7, #16]
  return(result);
 80040ba:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040be:	2301      	movs	r3, #1
 80040c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f383 8810 	msr	PRIMASK, r3
}
 80040c8:	46c0      	nop			@ (mov r8, r8)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2101      	movs	r1, #1
 80040d6:	430a      	orrs	r2, r1
 80040d8:	609a      	str	r2, [r3, #8]
 80040da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	f383 8810 	msr	PRIMASK, r3
}
 80040e4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e6:	f3ef 8310 	mrs	r3, PRIMASK
 80040ea:	61fb      	str	r3, [r7, #28]
  return(result);
 80040ec:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80040f0:	2301      	movs	r3, #1
 80040f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	f383 8810 	msr	PRIMASK, r3
}
 80040fa:	46c0      	nop			@ (mov r8, r8)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2140      	movs	r1, #64	@ 0x40
 8004108:	430a      	orrs	r2, r1
 800410a:	609a      	str	r2, [r3, #8]
 800410c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800410e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004112:	f383 8810 	msr	PRIMASK, r3
}
 8004116:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	0018      	movs	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	b010      	add	sp, #64	@ 0x40
 8004120:	bd80      	pop	{r7, pc}
 8004122:	46c0      	nop			@ (mov r8, r8)
 8004124:	0800427d 	.word	0x0800427d
 8004128:	080043ad 	.word	0x080043ad
 800412c:	080043ef 	.word	0x080043ef

08004130 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08a      	sub	sp, #40	@ 0x28
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004138:	f3ef 8310 	mrs	r3, PRIMASK
 800413c:	60bb      	str	r3, [r7, #8]
  return(result);
 800413e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004140:	627b      	str	r3, [r7, #36]	@ 0x24
 8004142:	2301      	movs	r3, #1
 8004144:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f383 8810 	msr	PRIMASK, r3
}
 800414c:	46c0      	nop			@ (mov r8, r8)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	21c0      	movs	r1, #192	@ 0xc0
 800415a:	438a      	bics	r2, r1
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004160:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f383 8810 	msr	PRIMASK, r3
}
 8004168:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800416a:	f3ef 8310 	mrs	r3, PRIMASK
 800416e:	617b      	str	r3, [r7, #20]
  return(result);
 8004170:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004172:	623b      	str	r3, [r7, #32]
 8004174:	2301      	movs	r3, #1
 8004176:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	f383 8810 	msr	PRIMASK, r3
}
 800417e:	46c0      	nop			@ (mov r8, r8)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4908      	ldr	r1, [pc, #32]	@ (80041ac <UART_EndTxTransfer+0x7c>)
 800418c:	400a      	ands	r2, r1
 800418e:	609a      	str	r2, [r3, #8]
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	f383 8810 	msr	PRIMASK, r3
}
 800419a:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2288      	movs	r2, #136	@ 0x88
 80041a0:	2120      	movs	r1, #32
 80041a2:	5099      	str	r1, [r3, r2]
}
 80041a4:	46c0      	nop			@ (mov r8, r8)
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b00a      	add	sp, #40	@ 0x28
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	ff7fffff 	.word	0xff7fffff

080041b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08e      	sub	sp, #56	@ 0x38
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b8:	f3ef 8310 	mrs	r3, PRIMASK
 80041bc:	617b      	str	r3, [r7, #20]
  return(result);
 80041be:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80041c2:	2301      	movs	r3, #1
 80041c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	f383 8810 	msr	PRIMASK, r3
}
 80041cc:	46c0      	nop			@ (mov r8, r8)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4926      	ldr	r1, [pc, #152]	@ (8004274 <UART_EndRxTransfer+0xc4>)
 80041da:	400a      	ands	r2, r1
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	f383 8810 	msr	PRIMASK, r3
}
 80041e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ea:	f3ef 8310 	mrs	r3, PRIMASK
 80041ee:	623b      	str	r3, [r7, #32]
  return(result);
 80041f0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80041f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80041f4:	2301      	movs	r3, #1
 80041f6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fa:	f383 8810 	msr	PRIMASK, r3
}
 80041fe:	46c0      	nop			@ (mov r8, r8)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	491b      	ldr	r1, [pc, #108]	@ (8004278 <UART_EndRxTransfer+0xc8>)
 800420c:	400a      	ands	r2, r1
 800420e:	609a      	str	r2, [r3, #8]
 8004210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004212:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004216:	f383 8810 	msr	PRIMASK, r3
}
 800421a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004220:	2b01      	cmp	r3, #1
 8004222:	d118      	bne.n	8004256 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004224:	f3ef 8310 	mrs	r3, PRIMASK
 8004228:	60bb      	str	r3, [r7, #8]
  return(result);
 800422a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800422c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800422e:	2301      	movs	r3, #1
 8004230:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f383 8810 	msr	PRIMASK, r3
}
 8004238:	46c0      	nop			@ (mov r8, r8)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2110      	movs	r1, #16
 8004246:	438a      	bics	r2, r1
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800424c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f383 8810 	msr	PRIMASK, r3
}
 8004254:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	228c      	movs	r2, #140	@ 0x8c
 800425a:	2120      	movs	r1, #32
 800425c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800426a:	46c0      	nop			@ (mov r8, r8)
 800426c:	46bd      	mov	sp, r7
 800426e:	b00e      	add	sp, #56	@ 0x38
 8004270:	bd80      	pop	{r7, pc}
 8004272:	46c0      	nop			@ (mov r8, r8)
 8004274:	fffffedf 	.word	0xfffffedf
 8004278:	effffffe 	.word	0xeffffffe

0800427c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b094      	sub	sp, #80	@ 0x50
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004288:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2220      	movs	r2, #32
 8004292:	4013      	ands	r3, r2
 8004294:	d16f      	bne.n	8004376 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004296:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004298:	225e      	movs	r2, #94	@ 0x5e
 800429a:	2100      	movs	r1, #0
 800429c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800429e:	f3ef 8310 	mrs	r3, PRIMASK
 80042a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80042a4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042a8:	2301      	movs	r3, #1
 80042aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f383 8810 	msr	PRIMASK, r3
}
 80042b2:	46c0      	nop			@ (mov r8, r8)
 80042b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	493a      	ldr	r1, [pc, #232]	@ (80043a8 <UART_DMAReceiveCplt+0x12c>)
 80042c0:	400a      	ands	r2, r1
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	f383 8810 	msr	PRIMASK, r3
}
 80042ce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d0:	f3ef 8310 	mrs	r3, PRIMASK
 80042d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80042d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80042da:	2301      	movs	r3, #1
 80042dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e0:	f383 8810 	msr	PRIMASK, r3
}
 80042e4:	46c0      	nop			@ (mov r8, r8)
 80042e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2101      	movs	r1, #1
 80042f2:	438a      	bics	r2, r1
 80042f4:	609a      	str	r2, [r3, #8]
 80042f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042fc:	f383 8810 	msr	PRIMASK, r3
}
 8004300:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004302:	f3ef 8310 	mrs	r3, PRIMASK
 8004306:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800430a:	643b      	str	r3, [r7, #64]	@ 0x40
 800430c:	2301      	movs	r3, #1
 800430e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004312:	f383 8810 	msr	PRIMASK, r3
}
 8004316:	46c0      	nop			@ (mov r8, r8)
 8004318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2140      	movs	r1, #64	@ 0x40
 8004324:	438a      	bics	r2, r1
 8004326:	609a      	str	r2, [r3, #8]
 8004328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800432a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432e:	f383 8810 	msr	PRIMASK, r3
}
 8004332:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004336:	228c      	movs	r2, #140	@ 0x8c
 8004338:	2120      	movs	r1, #32
 800433a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800433c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800433e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004340:	2b01      	cmp	r3, #1
 8004342:	d118      	bne.n	8004376 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004344:	f3ef 8310 	mrs	r3, PRIMASK
 8004348:	60fb      	str	r3, [r7, #12]
  return(result);
 800434a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800434c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800434e:	2301      	movs	r3, #1
 8004350:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f383 8810 	msr	PRIMASK, r3
}
 8004358:	46c0      	nop			@ (mov r8, r8)
 800435a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2110      	movs	r1, #16
 8004366:	438a      	bics	r2, r1
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800436c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f383 8810 	msr	PRIMASK, r3
}
 8004374:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004378:	2200      	movs	r2, #0
 800437a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800437c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800437e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004380:	2b01      	cmp	r3, #1
 8004382:	d108      	bne.n	8004396 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004386:	225c      	movs	r2, #92	@ 0x5c
 8004388:	5a9a      	ldrh	r2, [r3, r2]
 800438a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800438c:	0011      	movs	r1, r2
 800438e:	0018      	movs	r0, r3
 8004390:	f7ff fae5 	bl	800395e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004394:	e003      	b.n	800439e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8004396:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004398:	0018      	movs	r0, r3
 800439a:	f7ff fac8 	bl	800392e <HAL_UART_RxCpltCallback>
}
 800439e:	46c0      	nop			@ (mov r8, r8)
 80043a0:	46bd      	mov	sp, r7
 80043a2:	b014      	add	sp, #80	@ 0x50
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	46c0      	nop			@ (mov r8, r8)
 80043a8:	fffffeff 	.word	0xfffffeff

080043ac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d10a      	bne.n	80043de <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	225c      	movs	r2, #92	@ 0x5c
 80043cc:	5a9b      	ldrh	r3, [r3, r2]
 80043ce:	085b      	lsrs	r3, r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	0011      	movs	r1, r2
 80043d6:	0018      	movs	r0, r3
 80043d8:	f7ff fac1 	bl	800395e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80043dc:	e003      	b.n	80043e6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	0018      	movs	r0, r3
 80043e2:	f7ff faac 	bl	800393e <HAL_UART_RxHalfCpltCallback>
}
 80043e6:	46c0      	nop			@ (mov r8, r8)
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b004      	add	sp, #16
 80043ec:	bd80      	pop	{r7, pc}

080043ee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b086      	sub	sp, #24
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043fa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2288      	movs	r2, #136	@ 0x88
 8004400:	589b      	ldr	r3, [r3, r2]
 8004402:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	228c      	movs	r2, #140	@ 0x8c
 8004408:	589b      	ldr	r3, [r3, r2]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	2280      	movs	r2, #128	@ 0x80
 8004414:	4013      	ands	r3, r2
 8004416:	2b80      	cmp	r3, #128	@ 0x80
 8004418:	d10a      	bne.n	8004430 <UART_DMAError+0x42>
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b21      	cmp	r3, #33	@ 0x21
 800441e:	d107      	bne.n	8004430 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2256      	movs	r2, #86	@ 0x56
 8004424:	2100      	movs	r1, #0
 8004426:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	0018      	movs	r0, r3
 800442c:	f7ff fe80 	bl	8004130 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2240      	movs	r2, #64	@ 0x40
 8004438:	4013      	ands	r3, r2
 800443a:	2b40      	cmp	r3, #64	@ 0x40
 800443c:	d10a      	bne.n	8004454 <UART_DMAError+0x66>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b22      	cmp	r3, #34	@ 0x22
 8004442:	d107      	bne.n	8004454 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	225e      	movs	r2, #94	@ 0x5e
 8004448:	2100      	movs	r1, #0
 800444a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	0018      	movs	r0, r3
 8004450:	f7ff feae 	bl	80041b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2290      	movs	r2, #144	@ 0x90
 8004458:	589b      	ldr	r3, [r3, r2]
 800445a:	2210      	movs	r2, #16
 800445c:	431a      	orrs	r2, r3
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2190      	movs	r1, #144	@ 0x90
 8004462:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	0018      	movs	r0, r3
 8004468:	f7ff fa71 	bl	800394e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800446c:	46c0      	nop			@ (mov r8, r8)
 800446e:	46bd      	mov	sp, r7
 8004470:	b006      	add	sp, #24
 8004472:	bd80      	pop	{r7, pc}

08004474 <memset>:
 8004474:	0003      	movs	r3, r0
 8004476:	1882      	adds	r2, r0, r2
 8004478:	4293      	cmp	r3, r2
 800447a:	d100      	bne.n	800447e <memset+0xa>
 800447c:	4770      	bx	lr
 800447e:	7019      	strb	r1, [r3, #0]
 8004480:	3301      	adds	r3, #1
 8004482:	e7f9      	b.n	8004478 <memset+0x4>

08004484 <__libc_init_array>:
 8004484:	b570      	push	{r4, r5, r6, lr}
 8004486:	2600      	movs	r6, #0
 8004488:	4c0c      	ldr	r4, [pc, #48]	@ (80044bc <__libc_init_array+0x38>)
 800448a:	4d0d      	ldr	r5, [pc, #52]	@ (80044c0 <__libc_init_array+0x3c>)
 800448c:	1b64      	subs	r4, r4, r5
 800448e:	10a4      	asrs	r4, r4, #2
 8004490:	42a6      	cmp	r6, r4
 8004492:	d109      	bne.n	80044a8 <__libc_init_array+0x24>
 8004494:	2600      	movs	r6, #0
 8004496:	f000 f819 	bl	80044cc <_init>
 800449a:	4c0a      	ldr	r4, [pc, #40]	@ (80044c4 <__libc_init_array+0x40>)
 800449c:	4d0a      	ldr	r5, [pc, #40]	@ (80044c8 <__libc_init_array+0x44>)
 800449e:	1b64      	subs	r4, r4, r5
 80044a0:	10a4      	asrs	r4, r4, #2
 80044a2:	42a6      	cmp	r6, r4
 80044a4:	d105      	bne.n	80044b2 <__libc_init_array+0x2e>
 80044a6:	bd70      	pop	{r4, r5, r6, pc}
 80044a8:	00b3      	lsls	r3, r6, #2
 80044aa:	58eb      	ldr	r3, [r5, r3]
 80044ac:	4798      	blx	r3
 80044ae:	3601      	adds	r6, #1
 80044b0:	e7ee      	b.n	8004490 <__libc_init_array+0xc>
 80044b2:	00b3      	lsls	r3, r6, #2
 80044b4:	58eb      	ldr	r3, [r5, r3]
 80044b6:	4798      	blx	r3
 80044b8:	3601      	adds	r6, #1
 80044ba:	e7f2      	b.n	80044a2 <__libc_init_array+0x1e>
 80044bc:	080045b0 	.word	0x080045b0
 80044c0:	080045b0 	.word	0x080045b0
 80044c4:	080045b4 	.word	0x080045b4
 80044c8:	080045b0 	.word	0x080045b0

080044cc <_init>:
 80044cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ce:	46c0      	nop			@ (mov r8, r8)
 80044d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d2:	bc08      	pop	{r3}
 80044d4:	469e      	mov	lr, r3
 80044d6:	4770      	bx	lr

080044d8 <_fini>:
 80044d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044da:	46c0      	nop			@ (mov r8, r8)
 80044dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044de:	bc08      	pop	{r3}
 80044e0:	469e      	mov	lr, r3
 80044e2:	4770      	bx	lr
