
MD-test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c4c  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004d04  08004d04  00005d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004de0  08004de0  00006014  2**0
                  CONTENTS
  4 .ARM          00000000  08004de0  08004de0  00006014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004de0  08004de0  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004de0  08004de0  00005de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004de4  08004de4  00005de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004de8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000014  08004dfc  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08004dfc  0000637c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108c9  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b0  00000000  00000000  00016905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00018cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b3d  00000000  00000000  00019ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a3b  00000000  00000000  0001a61d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011738  00000000  00000000  00030058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a9cd  00000000  00000000  00041790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000cc15d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000333c  00000000  00000000  000cc1e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000cf520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000014 	.word	0x20000014
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004cec 	.word	0x08004cec

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000018 	.word	0x20000018
 80000fc:	08004cec 	.word	0x08004cec

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
    if (htim == &htim3){
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d104      	bne.n	8000406 <HAL_TIM_PeriodElapsedCallback+0x1a>
        u10_counter++;
 80003fc:	4b05      	ldr	r3, [pc, #20]	@ (8000414 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	1c5a      	adds	r2, r3, #1
 8000402:	4b04      	ldr	r3, [pc, #16]	@ (8000414 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000404:	601a      	str	r2, [r3, #0]
    }
}
 8000406:	46c0      	nop			@ (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	b002      	add	sp, #8
 800040c:	bd80      	pop	{r7, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)
 8000410:	20000030 	.word	0x20000030
 8000414:	200002a8 	.word	0x200002a8

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b089      	sub	sp, #36	@ 0x24
 800041c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041e:	f000 feb1 	bl	8001184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000422:	f000 f95d 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000426:	f000 fb33 	bl	8000a90 <MX_GPIO_Init>
  MX_DMA_Init();
 800042a:	f000 fb0b 	bl	8000a44 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800042e:	f000 fad5 	bl	80009dc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000432:	f000 f9a9 	bl	8000788 <MX_TIM3_Init>
  MX_TIM16_Init();
 8000436:	f000 f9fb 	bl	8000830 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 800043a:	f000 fa81 	bl	8000940 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800043e:	4b96      	ldr	r3, [pc, #600]	@ (8000698 <main+0x280>)
 8000440:	0018      	movs	r0, r3
 8000442:	f002 fa91 	bl	8002968 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000446:	4b95      	ldr	r3, [pc, #596]	@ (800069c <main+0x284>)
 8000448:	2100      	movs	r1, #0
 800044a:	0018      	movs	r0, r3
 800044c:	f002 fb3a 	bl	8002ac4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim16, TIM_CHANNEL_1);
 8000450:	4b92      	ldr	r3, [pc, #584]	@ (800069c <main+0x284>)
 8000452:	2100      	movs	r1, #0
 8000454:	0018      	movs	r0, r3
 8000456:	f003 fae1 	bl	8003a1c <HAL_TIMEx_PWMN_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t dutyCyc = 50;
 800045a:	1cbb      	adds	r3, r7, #2
 800045c:	2232      	movs	r2, #50	@ 0x32
 800045e:	801a      	strh	r2, [r3, #0]

  uint32_t Ltika_pcounter = u10_counter;
 8000460:	4b8f      	ldr	r3, [pc, #572]	@ (80006a0 <main+0x288>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	60fb      	str	r3, [r7, #12]
  uint32_t duty_pcounter = u10_counter;
 8000466:	4b8e      	ldr	r3, [pc, #568]	@ (80006a0 <main+0x288>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	60bb      	str	r3, [r7, #8]
  uint32_t d_pcounter = u10_counter;
 800046c:	4b8c      	ldr	r3, [pc, #560]	@ (80006a0 <main+0x288>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	607b      	str	r3, [r7, #4]

  uint8_t ID;

  if(readID() < 4){
 8000472:	f000 fc07 	bl	8000c84 <readID>
 8000476:	0003      	movs	r3, r0
 8000478:	2b03      	cmp	r3, #3
 800047a:	d81e      	bhi.n	80004ba <main+0xa2>
	  ID = readID();//自身のID
 800047c:	1c7c      	adds	r4, r7, #1
 800047e:	f000 fc01 	bl	8000c84 <readID>
 8000482:	0003      	movs	r3, r0
 8000484:	7023      	strb	r3, [r4, #0]
	    	Ltika_pcounter = u10_counter;
		  }else{}
	  }
  }

  HAL_UART_Receive_DMA(&huart1,rxBufA,64);
 8000486:	4987      	ldr	r1, [pc, #540]	@ (80006a4 <main+0x28c>)
 8000488:	4b87      	ldr	r3, [pc, #540]	@ (80006a8 <main+0x290>)
 800048a:	2240      	movs	r2, #64	@ 0x40
 800048c:	0018      	movs	r0, r3
 800048e:	f003 fced 	bl	8003e6c <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2,rxBufB,128);
 8000492:	4986      	ldr	r1, [pc, #536]	@ (80006ac <main+0x294>)
 8000494:	4b86      	ldr	r3, [pc, #536]	@ (80006b0 <main+0x298>)
 8000496:	2280      	movs	r2, #128	@ 0x80
 8000498:	0018      	movs	r0, r3
 800049a:	f003 fce7 	bl	8003e6c <HAL_UART_Receive_DMA>

  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, 0);
 800049e:	23a0      	movs	r3, #160	@ 0xa0
 80004a0:	05db      	lsls	r3, r3, #23
 80004a2:	2200      	movs	r2, #0
 80004a4:	2120      	movs	r1, #32
 80004a6:	0018      	movs	r0, r3
 80004a8:	f001 fba3 	bl	8001bf2 <HAL_GPIO_WritePin>
  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, duty);
 80004ac:	4b81      	ldr	r3, [pc, #516]	@ (80006b4 <main+0x29c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	5e9a      	ldrsh	r2, [r3, r2]
 80004b2:	4b7a      	ldr	r3, [pc, #488]	@ (800069c <main+0x284>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80004b8:	e00f      	b.n	80004da <main+0xc2>
		  if(u10_counter - Ltika_pcounter > 10000){
 80004ba:	4b79      	ldr	r3, [pc, #484]	@ (80006a0 <main+0x288>)
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	1ad3      	subs	r3, r2, r3
 80004c2:	4a7d      	ldr	r2, [pc, #500]	@ (80006b8 <main+0x2a0>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d9f8      	bls.n	80004ba <main+0xa2>
		  	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004c8:	4b7c      	ldr	r3, [pc, #496]	@ (80006bc <main+0x2a4>)
 80004ca:	2180      	movs	r1, #128	@ 0x80
 80004cc:	0018      	movs	r0, r3
 80004ce:	f001 fbad 	bl	8001c2c <HAL_GPIO_TogglePin>
	    	Ltika_pcounter = u10_counter;
 80004d2:	4b73      	ldr	r3, [pc, #460]	@ (80006a0 <main+0x288>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	60fb      	str	r3, [r7, #12]
		  if(u10_counter - Ltika_pcounter > 10000){
 80004d8:	e7ef      	b.n	80004ba <main+0xa2>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  dtime = u10_counter - d_pcounter;
 80004da:	4b71      	ldr	r3, [pc, #452]	@ (80006a0 <main+0x288>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	b29a      	uxth	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	b29b      	uxth	r3, r3
 80004e4:	1ad3      	subs	r3, r2, r3
 80004e6:	b29a      	uxth	r2, r3
 80004e8:	4b75      	ldr	r3, [pc, #468]	@ (80006c0 <main+0x2a8>)
 80004ea:	801a      	strh	r2, [r3, #0]
	  d_pcounter = u10_counter;
 80004ec:	4b6c      	ldr	r3, [pc, #432]	@ (80006a0 <main+0x288>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	607b      	str	r3, [r7, #4]

//if value did not update, alert by LED and motor sound.
//対策 against DMA did not start correctly
//bus=0つまりwhen MD does not communicate with Mother,STOP(起動直後のがたつきと通信線繋いでないときの動作)

	  readBuf(&huart1, rxBufA, 64, rxDataA, 2, 0, 5);
 80004f2:	4b74      	ldr	r3, [pc, #464]	@ (80006c4 <main+0x2ac>)
 80004f4:	496b      	ldr	r1, [pc, #428]	@ (80006a4 <main+0x28c>)
 80004f6:	486c      	ldr	r0, [pc, #432]	@ (80006a8 <main+0x290>)
 80004f8:	2205      	movs	r2, #5
 80004fa:	9202      	str	r2, [sp, #8]
 80004fc:	2200      	movs	r2, #0
 80004fe:	9201      	str	r2, [sp, #4]
 8000500:	2202      	movs	r2, #2
 8000502:	9200      	str	r2, [sp, #0]
 8000504:	2240      	movs	r2, #64	@ 0x40
 8000506:	f000 fb5f 	bl	8000bc8 <readBuf>
	  readBuf(&huart2, rxBufB, 128, rxDataB, 2, ID, 25);
 800050a:	1c7b      	adds	r3, r7, #1
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	4a6e      	ldr	r2, [pc, #440]	@ (80006c8 <main+0x2b0>)
 8000510:	4966      	ldr	r1, [pc, #408]	@ (80006ac <main+0x294>)
 8000512:	4867      	ldr	r0, [pc, #412]	@ (80006b0 <main+0x298>)
 8000514:	2419      	movs	r4, #25
 8000516:	9402      	str	r4, [sp, #8]
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2302      	movs	r3, #2
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	0013      	movs	r3, r2
 8000520:	2280      	movs	r2, #128	@ 0x80
 8000522:	f000 fb51 	bl	8000bc8 <readBuf>

	  goalSpeed = rxDataB[0] + rxDataB[1]*100;
 8000526:	4b68      	ldr	r3, [pc, #416]	@ (80006c8 <main+0x2b0>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	001a      	movs	r2, r3
 800052c:	4b66      	ldr	r3, [pc, #408]	@ (80006c8 <main+0x2b0>)
 800052e:	785b      	ldrb	r3, [r3, #1]
 8000530:	0019      	movs	r1, r3
 8000532:	2364      	movs	r3, #100	@ 0x64
 8000534:	434b      	muls	r3, r1
 8000536:	b29b      	uxth	r3, r3
 8000538:	18d3      	adds	r3, r2, r3
 800053a:	b29a      	uxth	r2, r3
 800053c:	4b63      	ldr	r3, [pc, #396]	@ (80006cc <main+0x2b4>)
 800053e:	801a      	strh	r2, [r3, #0]
	  nowSpeed = rxDataA[0] + rxDataA[1]*100;
 8000540:	4b60      	ldr	r3, [pc, #384]	@ (80006c4 <main+0x2ac>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	001a      	movs	r2, r3
 8000546:	4b5f      	ldr	r3, [pc, #380]	@ (80006c4 <main+0x2ac>)
 8000548:	785b      	ldrb	r3, [r3, #1]
 800054a:	0019      	movs	r1, r3
 800054c:	2364      	movs	r3, #100	@ 0x64
 800054e:	434b      	muls	r3, r1
 8000550:	b29b      	uxth	r3, r3
 8000552:	18d3      	adds	r3, r2, r3
 8000554:	b29a      	uxth	r2, r3
 8000556:	4b5e      	ldr	r3, [pc, #376]	@ (80006d0 <main+0x2b8>)
 8000558:	801a      	strh	r2, [r3, #0]

	  difSpeed = abs(goalSpeed - nowSpeed);
 800055a:	4b5c      	ldr	r3, [pc, #368]	@ (80006cc <main+0x2b4>)
 800055c:	881b      	ldrh	r3, [r3, #0]
 800055e:	001a      	movs	r2, r3
 8000560:	4b5b      	ldr	r3, [pc, #364]	@ (80006d0 <main+0x2b8>)
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	17da      	asrs	r2, r3, #31
 8000568:	189b      	adds	r3, r3, r2
 800056a:	4053      	eors	r3, r2
 800056c:	b29a      	uxth	r2, r3
 800056e:	4b59      	ldr	r3, [pc, #356]	@ (80006d4 <main+0x2bc>)
 8000570:	801a      	strh	r2, [r3, #0]
	  dDuty = difSpeed / 50;
 8000572:	4b58      	ldr	r3, [pc, #352]	@ (80006d4 <main+0x2bc>)
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	2132      	movs	r1, #50	@ 0x32
 8000578:	0018      	movs	r0, r3
 800057a:	f7ff fdc1 	bl	8000100 <__udivsi3>
 800057e:	0003      	movs	r3, r0
 8000580:	b29b      	uxth	r3, r3
 8000582:	b21a      	sxth	r2, r3
 8000584:	4b54      	ldr	r3, [pc, #336]	@ (80006d8 <main+0x2c0>)
 8000586:	801a      	strh	r2, [r3, #0]


	  if((u10_counter - duty_pcounter) > dutyCyc){
 8000588:	4b45      	ldr	r3, [pc, #276]	@ (80006a0 <main+0x288>)
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	1ad2      	subs	r2, r2, r3
 8000590:	1cbb      	adds	r3, r7, #2
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	429a      	cmp	r2, r3
 8000596:	d929      	bls.n	80005ec <main+0x1d4>
		  if(goalSpeed < nowSpeed){duty = duty - dDuty;}
 8000598:	4b4c      	ldr	r3, [pc, #304]	@ (80006cc <main+0x2b4>)
 800059a:	881a      	ldrh	r2, [r3, #0]
 800059c:	4b4c      	ldr	r3, [pc, #304]	@ (80006d0 <main+0x2b8>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d20d      	bcs.n	80005c0 <main+0x1a8>
 80005a4:	4b43      	ldr	r3, [pc, #268]	@ (80006b4 <main+0x29c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	5e9b      	ldrsh	r3, [r3, r2]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	4b4a      	ldr	r3, [pc, #296]	@ (80006d8 <main+0x2c0>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	5e5b      	ldrsh	r3, [r3, r1]
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	b21a      	sxth	r2, r3
 80005ba:	4b3e      	ldr	r3, [pc, #248]	@ (80006b4 <main+0x29c>)
 80005bc:	801a      	strh	r2, [r3, #0]
 80005be:	e012      	b.n	80005e6 <main+0x1ce>
		  else if(goalSpeed > nowSpeed){duty = duty + dDuty;}
 80005c0:	4b42      	ldr	r3, [pc, #264]	@ (80006cc <main+0x2b4>)
 80005c2:	881a      	ldrh	r2, [r3, #0]
 80005c4:	4b42      	ldr	r3, [pc, #264]	@ (80006d0 <main+0x2b8>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d90c      	bls.n	80005e6 <main+0x1ce>
 80005cc:	4b39      	ldr	r3, [pc, #228]	@ (80006b4 <main+0x29c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	5e9b      	ldrsh	r3, [r3, r2]
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b40      	ldr	r3, [pc, #256]	@ (80006d8 <main+0x2c0>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	5e5b      	ldrsh	r3, [r3, r1]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	18d3      	adds	r3, r2, r3
 80005de:	b29b      	uxth	r3, r3
 80005e0:	b21a      	sxth	r2, r3
 80005e2:	4b34      	ldr	r3, [pc, #208]	@ (80006b4 <main+0x29c>)
 80005e4:	801a      	strh	r2, [r3, #0]
		  else{}
		  duty_pcounter = u10_counter;
 80005e6:	4b2e      	ldr	r3, [pc, #184]	@ (80006a0 <main+0x288>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	60bb      	str	r3, [r7, #8]
	  }else{}


	  if(duty > 3120){duty = 3120;}
 80005ec:	4b31      	ldr	r3, [pc, #196]	@ (80006b4 <main+0x29c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	5e9a      	ldrsh	r2, [r3, r2]
 80005f2:	23c3      	movs	r3, #195	@ 0xc3
 80005f4:	011b      	lsls	r3, r3, #4
 80005f6:	429a      	cmp	r2, r3
 80005f8:	dd04      	ble.n	8000604 <main+0x1ec>
 80005fa:	4b2e      	ldr	r3, [pc, #184]	@ (80006b4 <main+0x29c>)
 80005fc:	22c3      	movs	r2, #195	@ 0xc3
 80005fe:	0112      	lsls	r2, r2, #4
 8000600:	801a      	strh	r2, [r3, #0]
 8000602:	e00d      	b.n	8000620 <main+0x208>
	  else if(duty < 80){duty = 80;}
 8000604:	4b2b      	ldr	r3, [pc, #172]	@ (80006b4 <main+0x29c>)
 8000606:	2200      	movs	r2, #0
 8000608:	5e9b      	ldrsh	r3, [r3, r2]
 800060a:	2b4f      	cmp	r3, #79	@ 0x4f
 800060c:	dc03      	bgt.n	8000616 <main+0x1fe>
 800060e:	4b29      	ldr	r3, [pc, #164]	@ (80006b4 <main+0x29c>)
 8000610:	2250      	movs	r2, #80	@ 0x50
 8000612:	801a      	strh	r2, [r3, #0]
 8000614:	e004      	b.n	8000620 <main+0x208>
	  else{duty = duty;}
 8000616:	4b27      	ldr	r3, [pc, #156]	@ (80006b4 <main+0x29c>)
 8000618:	2200      	movs	r2, #0
 800061a:	5e9a      	ldrsh	r2, [r3, r2]
 800061c:	4b25      	ldr	r3, [pc, #148]	@ (80006b4 <main+0x29c>)
 800061e:	801a      	strh	r2, [r3, #0]

	  if(HAL_GPIO_ReadPin(SLSW_GPIO_Port, SLSW_Pin) == 1){
 8000620:	23a0      	movs	r3, #160	@ 0xa0
 8000622:	05db      	lsls	r3, r3, #23
 8000624:	2102      	movs	r1, #2
 8000626:	0018      	movs	r0, r3
 8000628:	f001 fac6 	bl	8001bb8 <HAL_GPIO_ReadPin>
 800062c:	0003      	movs	r3, r0
 800062e:	2b01      	cmp	r3, #1
 8000630:	d111      	bne.n	8000656 <main+0x23e>
		  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, 1);
 8000632:	23a0      	movs	r3, #160	@ 0xa0
 8000634:	05db      	lsls	r3, r3, #23
 8000636:	2201      	movs	r2, #1
 8000638:	2120      	movs	r1, #32
 800063a:	0018      	movs	r0, r3
 800063c:	f001 fad9 	bl	8001bf2 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 3200-duty);
 8000640:	4b1c      	ldr	r3, [pc, #112]	@ (80006b4 <main+0x29c>)
 8000642:	2200      	movs	r2, #0
 8000644:	5e9b      	ldrsh	r3, [r3, r2]
 8000646:	001a      	movs	r2, r3
 8000648:	23c8      	movs	r3, #200	@ 0xc8
 800064a:	011b      	lsls	r3, r3, #4
 800064c:	1a9a      	subs	r2, r3, r2
 800064e:	4b13      	ldr	r3, [pc, #76]	@ (800069c <main+0x284>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	635a      	str	r2, [r3, #52]	@ 0x34
 8000654:	e00f      	b.n	8000676 <main+0x25e>
	  }else{
		  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, 0);
 8000656:	23a0      	movs	r3, #160	@ 0xa0
 8000658:	05db      	lsls	r3, r3, #23
 800065a:	2200      	movs	r2, #0
 800065c:	2120      	movs	r1, #32
 800065e:	0018      	movs	r0, r3
 8000660:	f001 fac7 	bl	8001bf2 <HAL_GPIO_WritePin>
		  duty = 1600;
 8000664:	4b13      	ldr	r3, [pc, #76]	@ (80006b4 <main+0x29c>)
 8000666:	22c8      	movs	r2, #200	@ 0xc8
 8000668:	00d2      	lsls	r2, r2, #3
 800066a:	801a      	strh	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 1600);
 800066c:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <main+0x284>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	22c8      	movs	r2, #200	@ 0xc8
 8000672:	00d2      	lsls	r2, r2, #3
 8000674:	635a      	str	r2, [r3, #52]	@ 0x34
	  }



	  if(u10_counter - Ltika_pcounter > 100000){
 8000676:	4b0a      	ldr	r3, [pc, #40]	@ (80006a0 <main+0x288>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	4a17      	ldr	r2, [pc, #92]	@ (80006dc <main+0x2c4>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d800      	bhi.n	8000686 <main+0x26e>
 8000684:	e729      	b.n	80004da <main+0xc2>
	  	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000686:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <main+0x2a4>)
 8000688:	2180      	movs	r1, #128	@ 0x80
 800068a:	0018      	movs	r0, r3
 800068c:	f001 face 	bl	8001c2c <HAL_GPIO_TogglePin>
    	Ltika_pcounter = u10_counter;
 8000690:	4b03      	ldr	r3, [pc, #12]	@ (80006a0 <main+0x288>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	60fb      	str	r3, [r7, #12]
	  dtime = u10_counter - d_pcounter;
 8000696:	e720      	b.n	80004da <main+0xc2>
 8000698:	20000030 	.word	0x20000030
 800069c:	2000007c 	.word	0x2000007c
 80006a0:	200002a8 	.word	0x200002a8
 80006a4:	200002ac 	.word	0x200002ac
 80006a8:	200000c8 	.word	0x200000c8
 80006ac:	200002f0 	.word	0x200002f0
 80006b0:	2000015c 	.word	0x2000015c
 80006b4:	20000004 	.word	0x20000004
 80006b8:	00002710 	.word	0x00002710
 80006bc:	50000400 	.word	0x50000400
 80006c0:	20000376 	.word	0x20000376
 80006c4:	200002ec 	.word	0x200002ec
 80006c8:	20000370 	.word	0x20000370
 80006cc:	20000000 	.word	0x20000000
 80006d0:	20000002 	.word	0x20000002
 80006d4:	20000372 	.word	0x20000372
 80006d8:	20000374 	.word	0x20000374
 80006dc:	000186a0 	.word	0x000186a0

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b093      	sub	sp, #76	@ 0x4c
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	2414      	movs	r4, #20
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	0018      	movs	r0, r3
 80006ec:	2334      	movs	r3, #52	@ 0x34
 80006ee:	001a      	movs	r2, r3
 80006f0:	2100      	movs	r1, #0
 80006f2:	f004 facf 	bl	8004c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	0018      	movs	r0, r3
 80006fa:	2310      	movs	r3, #16
 80006fc:	001a      	movs	r2, r3
 80006fe:	2100      	movs	r1, #0
 8000700:	f004 fac8 	bl	8004c94 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2380      	movs	r3, #128	@ 0x80
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	0018      	movs	r0, r3
 800070a:	f001 faab 	bl	8001c64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2201      	movs	r2, #1
 8000712:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000714:	193b      	adds	r3, r7, r4
 8000716:	22a0      	movs	r2, #160	@ 0xa0
 8000718:	02d2      	lsls	r2, r2, #11
 800071a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	0021      	movs	r1, r4
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2202      	movs	r2, #2
 8000722:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2203      	movs	r2, #3
 8000728:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2200      	movs	r2, #0
 800072e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2208      	movs	r2, #8
 8000734:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2280      	movs	r2, #128	@ 0x80
 800073a:	0292      	lsls	r2, r2, #10
 800073c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2280      	movs	r2, #128	@ 0x80
 8000742:	0592      	lsls	r2, r2, #22
 8000744:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	187b      	adds	r3, r7, r1
 8000748:	0018      	movs	r0, r3
 800074a:	f001 fad7 	bl	8001cfc <HAL_RCC_OscConfig>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000752:	f000 fae9 	bl	8000d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2207      	movs	r2, #7
 800075a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2202      	movs	r2, #2
 8000760:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2102      	movs	r1, #2
 8000772:	0018      	movs	r0, r3
 8000774:	f001 fdd2 	bl	800231c <HAL_RCC_ClockConfig>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800077c:	f000 fad4 	bl	8000d28 <Error_Handler>
  }
}
 8000780:	46c0      	nop			@ (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	b013      	add	sp, #76	@ 0x4c
 8000786:	bd90      	pop	{r4, r7, pc}

08000788 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078e:	2310      	movs	r3, #16
 8000790:	18fb      	adds	r3, r7, r3
 8000792:	0018      	movs	r0, r3
 8000794:	2310      	movs	r3, #16
 8000796:	001a      	movs	r2, r3
 8000798:	2100      	movs	r1, #0
 800079a:	f004 fa7b 	bl	8004c94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	0018      	movs	r0, r3
 80007a2:	230c      	movs	r3, #12
 80007a4:	001a      	movs	r2, r3
 80007a6:	2100      	movs	r1, #0
 80007a8:	f004 fa74 	bl	8004c94 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000828 <MX_TIM3_Init+0xa0>)
 80007ae:	4a1f      	ldr	r2, [pc, #124]	@ (800082c <MX_TIM3_Init+0xa4>)
 80007b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80007b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000828 <MX_TIM3_Init+0xa0>)
 80007b4:	223f      	movs	r2, #63	@ 0x3f
 80007b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <MX_TIM3_Init+0xa0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 80007be:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <MX_TIM3_Init+0xa0>)
 80007c0:	2209      	movs	r2, #9
 80007c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c4:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <MX_TIM3_Init+0xa0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ca:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <MX_TIM3_Init+0xa0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <MX_TIM3_Init+0xa0>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f002 f870 	bl	80028b8 <HAL_TIM_Base_Init>
 80007d8:	1e03      	subs	r3, r0, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80007dc:	f000 faa4 	bl	8000d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e0:	2110      	movs	r1, #16
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2280      	movs	r2, #128	@ 0x80
 80007e6:	0152      	lsls	r2, r2, #5
 80007e8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007ea:	187a      	adds	r2, r7, r1
 80007ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_TIM3_Init+0xa0>)
 80007ee:	0011      	movs	r1, r2
 80007f0:	0018      	movs	r0, r3
 80007f2:	f002 fc47 	bl	8003084 <HAL_TIM_ConfigClockSource>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80007fa:	f000 fa95 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800080a:	1d3a      	adds	r2, r7, #4
 800080c:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_TIM3_Init+0xa0>)
 800080e:	0011      	movs	r1, r2
 8000810:	0018      	movs	r0, r3
 8000812:	f003 f99b 	bl	8003b4c <HAL_TIMEx_MasterConfigSynchronization>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800081a:	f000 fa85 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800081e:	46c0      	nop			@ (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b008      	add	sp, #32
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			@ (mov r8, r8)
 8000828:	20000030 	.word	0x20000030
 800082c:	40000400 	.word	0x40000400

08000830 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b094      	sub	sp, #80	@ 0x50
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000836:	2334      	movs	r3, #52	@ 0x34
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	0018      	movs	r0, r3
 800083c:	231c      	movs	r3, #28
 800083e:	001a      	movs	r2, r3
 8000840:	2100      	movs	r1, #0
 8000842:	f004 fa27 	bl	8004c94 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000846:	003b      	movs	r3, r7
 8000848:	0018      	movs	r0, r3
 800084a:	2334      	movs	r3, #52	@ 0x34
 800084c:	001a      	movs	r2, r3
 800084e:	2100      	movs	r1, #0
 8000850:	f004 fa20 	bl	8004c94 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000854:	4b37      	ldr	r3, [pc, #220]	@ (8000934 <MX_TIM16_Init+0x104>)
 8000856:	4a38      	ldr	r2, [pc, #224]	@ (8000938 <MX_TIM16_Init+0x108>)
 8000858:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800085a:	4b36      	ldr	r3, [pc, #216]	@ (8000934 <MX_TIM16_Init+0x104>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000860:	4b34      	ldr	r3, [pc, #208]	@ (8000934 <MX_TIM16_Init+0x104>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3199;
 8000866:	4b33      	ldr	r3, [pc, #204]	@ (8000934 <MX_TIM16_Init+0x104>)
 8000868:	4a34      	ldr	r2, [pc, #208]	@ (800093c <MX_TIM16_Init+0x10c>)
 800086a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086c:	4b31      	ldr	r3, [pc, #196]	@ (8000934 <MX_TIM16_Init+0x104>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000872:	4b30      	ldr	r3, [pc, #192]	@ (8000934 <MX_TIM16_Init+0x104>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000878:	4b2e      	ldr	r3, [pc, #184]	@ (8000934 <MX_TIM16_Init+0x104>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800087e:	4b2d      	ldr	r3, [pc, #180]	@ (8000934 <MX_TIM16_Init+0x104>)
 8000880:	0018      	movs	r0, r3
 8000882:	f002 f819 	bl	80028b8 <HAL_TIM_Base_Init>
 8000886:	1e03      	subs	r3, r0, #0
 8000888:	d001      	beq.n	800088e <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 800088a:	f000 fa4d 	bl	8000d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800088e:	4b29      	ldr	r3, [pc, #164]	@ (8000934 <MX_TIM16_Init+0x104>)
 8000890:	0018      	movs	r0, r3
 8000892:	f002 f8b7 	bl	8002a04 <HAL_TIM_PWM_Init>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 800089a:	f000 fa45 	bl	8000d28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089e:	2134      	movs	r1, #52	@ 0x34
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2260      	movs	r2, #96	@ 0x60
 80008a4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ca:	1879      	adds	r1, r7, r1
 80008cc:	4b19      	ldr	r3, [pc, #100]	@ (8000934 <MX_TIM16_Init+0x104>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	0018      	movs	r0, r3
 80008d2:	f002 fad7 	bl	8002e84 <HAL_TIM_PWM_ConfigChannel>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 80008da:	f000 fa25 	bl	8000d28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008de:	003b      	movs	r3, r7
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008e4:	003b      	movs	r3, r7
 80008e6:	2200      	movs	r2, #0
 80008e8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008ea:	003b      	movs	r3, r7
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008f0:	003b      	movs	r3, r7
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008f6:	003b      	movs	r3, r7
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008fc:	003b      	movs	r3, r7
 80008fe:	2280      	movs	r2, #128	@ 0x80
 8000900:	0192      	lsls	r2, r2, #6
 8000902:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000904:	003b      	movs	r3, r7
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800090a:	003b      	movs	r3, r7
 800090c:	2200      	movs	r2, #0
 800090e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000910:	003a      	movs	r2, r7
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <MX_TIM16_Init+0x104>)
 8000914:	0011      	movs	r1, r2
 8000916:	0018      	movs	r0, r3
 8000918:	f003 f97a 	bl	8003c10 <HAL_TIMEx_ConfigBreakDeadTime>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8000920:	f000 fa02 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000924:	4b03      	ldr	r3, [pc, #12]	@ (8000934 <MX_TIM16_Init+0x104>)
 8000926:	0018      	movs	r0, r3
 8000928:	f000 fa64 	bl	8000df4 <HAL_TIM_MspPostInit>

}
 800092c:	46c0      	nop			@ (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	b014      	add	sp, #80	@ 0x50
 8000932:	bd80      	pop	{r7, pc}
 8000934:	2000007c 	.word	0x2000007c
 8000938:	40014400 	.word	0x40014400
 800093c:	00000c7f 	.word	0x00000c7f

08000940 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000944:	4b22      	ldr	r3, [pc, #136]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 8000946:	4a23      	ldr	r2, [pc, #140]	@ (80009d4 <MX_USART1_UART_Init+0x94>)
 8000948:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 800094a:	4b21      	ldr	r3, [pc, #132]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 800094c:	4a22      	ldr	r2, [pc, #136]	@ (80009d8 <MX_USART1_UART_Init+0x98>)
 800094e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000950:	4b1f      	ldr	r3, [pc, #124]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000956:	4b1e      	ldr	r3, [pc, #120]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800095c:	4b1c      	ldr	r3, [pc, #112]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000962:	4b1b      	ldr	r3, [pc, #108]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 8000964:	220c      	movs	r2, #12
 8000966:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000968:	4b19      	ldr	r3, [pc, #100]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800096e:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000974:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800097a:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000980:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000986:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 8000988:	0018      	movs	r0, r3
 800098a:	f003 fa19 	bl	8003dc0 <HAL_UART_Init>
 800098e:	1e03      	subs	r3, r0, #0
 8000990:	d001      	beq.n	8000996 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000992:	f000 f9c9 	bl	8000d28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 8000998:	2100      	movs	r1, #0
 800099a:	0018      	movs	r0, r3
 800099c:	f004 f89a 	bl	8004ad4 <HAL_UARTEx_SetTxFifoThreshold>
 80009a0:	1e03      	subs	r3, r0, #0
 80009a2:	d001      	beq.n	80009a8 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 80009a4:	f000 f9c0 	bl	8000d28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a8:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 80009aa:	2100      	movs	r1, #0
 80009ac:	0018      	movs	r0, r3
 80009ae:	f004 f8d1 	bl	8004b54 <HAL_UARTEx_SetRxFifoThreshold>
 80009b2:	1e03      	subs	r3, r0, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 80009b6:	f000 f9b7 	bl	8000d28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009ba:	4b05      	ldr	r3, [pc, #20]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 80009bc:	0018      	movs	r0, r3
 80009be:	f004 f84f 	bl	8004a60 <HAL_UARTEx_DisableFifoMode>
 80009c2:	1e03      	subs	r3, r0, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80009c6:	f000 f9af 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ca:	46c0      	nop			@ (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200000c8 	.word	0x200000c8
 80009d4:	40013800 	.word	0x40013800
 80009d8:	0007a120 	.word	0x0007a120

080009dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e0:	4b16      	ldr	r3, [pc, #88]	@ (8000a3c <MX_USART2_UART_Init+0x60>)
 80009e2:	4a17      	ldr	r2, [pc, #92]	@ (8000a40 <MX_USART2_UART_Init+0x64>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009e6:	4b15      	ldr	r3, [pc, #84]	@ (8000a3c <MX_USART2_UART_Init+0x60>)
 80009e8:	22e1      	movs	r2, #225	@ 0xe1
 80009ea:	0252      	lsls	r2, r2, #9
 80009ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b13      	ldr	r3, [pc, #76]	@ (8000a3c <MX_USART2_UART_Init+0x60>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <MX_USART2_UART_Init+0x60>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <MX_USART2_UART_Init+0x60>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <MX_USART2_UART_Init+0x60>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b0d      	ldr	r3, [pc, #52]	@ (8000a3c <MX_USART2_UART_Init+0x60>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a3c <MX_USART2_UART_Init+0x60>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a12:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <MX_USART2_UART_Init+0x60>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a18:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <MX_USART2_UART_Init+0x60>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <MX_USART2_UART_Init+0x60>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a24:	4b05      	ldr	r3, [pc, #20]	@ (8000a3c <MX_USART2_UART_Init+0x60>)
 8000a26:	0018      	movs	r0, r3
 8000a28:	f003 f9ca 	bl	8003dc0 <HAL_UART_Init>
 8000a2c:	1e03      	subs	r3, r0, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a30:	f000 f97a 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a34:	46c0      	nop			@ (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	2000015c 	.word	0x2000015c
 8000a40:	40004400 	.word	0x40004400

08000a44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a4a:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <MX_DMA_Init+0x48>)
 8000a4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <MX_DMA_Init+0x48>)
 8000a50:	2101      	movs	r1, #1
 8000a52:	430a      	orrs	r2, r1
 8000a54:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a56:	4b0d      	ldr	r3, [pc, #52]	@ (8000a8c <MX_DMA_Init+0x48>)
 8000a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	2009      	movs	r0, #9
 8000a68:	f000 fcbe 	bl	80013e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a6c:	2009      	movs	r0, #9
 8000a6e:	f000 fcd0 	bl	8001412 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	200a      	movs	r0, #10
 8000a78:	f000 fcb6 	bl	80013e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000a7c:	200a      	movs	r0, #10
 8000a7e:	f000 fcc8 	bl	8001412 <HAL_NVIC_EnableIRQ>

}
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b002      	add	sp, #8
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	40021000 	.word	0x40021000

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b089      	sub	sp, #36	@ 0x24
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	240c      	movs	r4, #12
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	2314      	movs	r3, #20
 8000a9e:	001a      	movs	r2, r3
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	f004 f8f7 	bl	8004c94 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	4b44      	ldr	r3, [pc, #272]	@ (8000bb8 <MX_GPIO_Init+0x128>)
 8000aa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000aaa:	4b43      	ldr	r3, [pc, #268]	@ (8000bb8 <MX_GPIO_Init+0x128>)
 8000aac:	2104      	movs	r1, #4
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ab2:	4b41      	ldr	r3, [pc, #260]	@ (8000bb8 <MX_GPIO_Init+0x128>)
 8000ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ab6:	2204      	movs	r2, #4
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b3e      	ldr	r3, [pc, #248]	@ (8000bb8 <MX_GPIO_Init+0x128>)
 8000ac0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ac2:	4b3d      	ldr	r3, [pc, #244]	@ (8000bb8 <MX_GPIO_Init+0x128>)
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aca:	4b3b      	ldr	r3, [pc, #236]	@ (8000bb8 <MX_GPIO_Init+0x128>)
 8000acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	4b38      	ldr	r3, [pc, #224]	@ (8000bb8 <MX_GPIO_Init+0x128>)
 8000ad8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ada:	4b37      	ldr	r3, [pc, #220]	@ (8000bb8 <MX_GPIO_Init+0x128>)
 8000adc:	2102      	movs	r1, #2
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ae2:	4b35      	ldr	r3, [pc, #212]	@ (8000bb8 <MX_GPIO_Init+0x128>)
 8000ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	4013      	ands	r3, r2
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_RESET);
 8000aee:	23a0      	movs	r3, #160	@ 0xa0
 8000af0:	05db      	lsls	r3, r3, #23
 8000af2:	2200      	movs	r2, #0
 8000af4:	2120      	movs	r1, #32
 8000af6:	0018      	movs	r0, r3
 8000af8:	f001 f87b 	bl	8001bf2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000afc:	4b2f      	ldr	r3, [pc, #188]	@ (8000bbc <MX_GPIO_Init+0x12c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	2180      	movs	r1, #128	@ 0x80
 8000b02:	0018      	movs	r0, r3
 8000b04:	f001 f875 	bl	8001bf2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SLSW_Pin SW3_Pin SW1_Pin */
  GPIO_InitStruct.Pin = SLSW_Pin|SW3_Pin|SW1_Pin;
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	4a2d      	ldr	r2, [pc, #180]	@ (8000bc0 <MX_GPIO_Init+0x130>)
 8000b0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	2200      	movs	r2, #0
 8000b12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	193a      	adds	r2, r7, r4
 8000b1c:	23a0      	movs	r3, #160	@ 0xa0
 8000b1e:	05db      	lsls	r3, r3, #23
 8000b20:	0011      	movs	r1, r2
 8000b22:	0018      	movs	r0, r3
 8000b24:	f000 fee4 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8000b28:	193b      	adds	r3, r7, r4
 8000b2a:	2220      	movs	r2, #32
 8000b2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	193b      	adds	r3, r7, r4
 8000b30:	2201      	movs	r2, #1
 8000b32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	193b      	adds	r3, r7, r4
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	193b      	adds	r3, r7, r4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8000b40:	193a      	adds	r2, r7, r4
 8000b42:	23a0      	movs	r3, #160	@ 0xa0
 8000b44:	05db      	lsls	r3, r3, #23
 8000b46:	0011      	movs	r1, r2
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f000 fed1 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW5_Pin SW4_Pin */
  GPIO_InitStruct.Pin = SW5_Pin|SW4_Pin;
 8000b4e:	193b      	adds	r3, r7, r4
 8000b50:	2206      	movs	r2, #6
 8000b52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	4a16      	ldr	r2, [pc, #88]	@ (8000bbc <MX_GPIO_Init+0x12c>)
 8000b64:	0019      	movs	r1, r3
 8000b66:	0010      	movs	r0, r2
 8000b68:	f000 fec2 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW2_Pin */
  GPIO_InitStruct.Pin = SW2_Pin;
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	2240      	movs	r2, #64	@ 0x40
 8000b70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b72:	193b      	adds	r3, r7, r4
 8000b74:	2200      	movs	r2, #0
 8000b76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	4a10      	ldr	r2, [pc, #64]	@ (8000bc4 <MX_GPIO_Init+0x134>)
 8000b82:	0019      	movs	r1, r3
 8000b84:	0010      	movs	r0, r2
 8000b86:	f000 feb3 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b8a:	0021      	movs	r1, r4
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2201      	movs	r2, #1
 8000b96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	4a05      	ldr	r2, [pc, #20]	@ (8000bbc <MX_GPIO_Init+0x12c>)
 8000ba8:	0019      	movs	r1, r3
 8000baa:	0010      	movs	r0, r2
 8000bac:	f000 fea0 	bl	80018f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb0:	46c0      	nop			@ (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b009      	add	sp, #36	@ 0x24
 8000bb6:	bd90      	pop	{r4, r7, pc}
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	50000400 	.word	0x50000400
 8000bc0:	00000902 	.word	0x00000902
 8000bc4:	50000800 	.word	0x50000800

08000bc8 <readBuf>:

/* USER CODE BEGIN 4 */

void readBuf(UART_HandleTypeDef* uart, uint8_t* buf, int buf_size, uint8_t* data, int data_size, int id, int go_back){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	@ 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
 8000bd4:	603b      	str	r3, [r7, #0]
	int index = uart->hdmarx->Instance->CNDTR;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	2280      	movs	r2, #128	@ 0x80
 8000bda:	589b      	ldr	r3, [r3, r2]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	61bb      	str	r3, [r7, #24]
	index = buf_size - index;
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	61bb      	str	r3, [r7, #24]
	int indexRead = index - go_back;
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24
	if(indexRead < 0){indexRead = indexRead + buf_size;}
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	da03      	bge.n	8000c00 <readBuf+0x38>
 8000bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	18d3      	adds	r3, r2, r3
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24

	while(1){
		uint8_t readData = buf[indexRead];
 8000c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	18d2      	adds	r2, r2, r3
 8000c06:	2117      	movs	r1, #23
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	7812      	ldrb	r2, [r2, #0]
 8000c0c:	701a      	strb	r2, [r3, #0]
		if(readData == 250+id){
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	781a      	ldrb	r2, [r3, #0]
 8000c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c14:	33fa      	adds	r3, #250	@ 0xfa
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d11f      	bne.n	8000c5a <readBuf+0x92>
			for(int i=1; i<=data_size; i++){
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	623b      	str	r3, [r7, #32]
 8000c1e:	e017      	b.n	8000c50 <readBuf+0x88>
				int readPoint = indexRead + i;
 8000c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c22:	6a3b      	ldr	r3, [r7, #32]
 8000c24:	18d3      	adds	r3, r2, r3
 8000c26:	61fb      	str	r3, [r7, #28]
				if(readPoint>buf_size-1){readPoint = readPoint - buf_size;}
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	dc03      	bgt.n	8000c38 <readBuf+0x70>
 8000c30:	69fa      	ldr	r2, [r7, #28]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	61fb      	str	r3, [r7, #28]
				data[i-1] = buf[readPoint];
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	18d2      	adds	r2, r2, r3
 8000c3e:	6a3b      	ldr	r3, [r7, #32]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	6839      	ldr	r1, [r7, #0]
 8000c44:	18cb      	adds	r3, r1, r3
 8000c46:	7812      	ldrb	r2, [r2, #0]
 8000c48:	701a      	strb	r2, [r3, #0]
			for(int i=1; i<=data_size; i++){
 8000c4a:	6a3b      	ldr	r3, [r7, #32]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	623b      	str	r3, [r7, #32]
 8000c50:	6a3a      	ldr	r2, [r7, #32]
 8000c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c54:	429a      	cmp	r2, r3
 8000c56:	dde3      	ble.n	8000c20 <readBuf+0x58>
			}
			break;
 8000c58:	e010      	b.n	8000c7c <readBuf+0xb4>
		}
		indexRead++;
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
		if(indexRead>buf_size-1){indexRead = indexRead - buf_size;}
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dc03      	bgt.n	8000c70 <readBuf+0xa8>
 8000c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
		if(indexRead == index){break;}
 8000c70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d000      	beq.n	8000c7a <readBuf+0xb2>
	while(1){
 8000c78:	e7c2      	b.n	8000c00 <readBuf+0x38>
		if(indexRead == index){break;}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000c7c:	46c0      	nop			@ (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b00a      	add	sp, #40	@ 0x28
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <readID>:
	int index = uart->hdmarx->Instance->CNDTR;
	index = buf_size - index;
	return index;
}

uint8_t readID(){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
	uint8_t id;
	if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin)==1){id=0;}
 8000c8a:	2380      	movs	r3, #128	@ 0x80
 8000c8c:	011a      	lsls	r2, r3, #4
 8000c8e:	23a0      	movs	r3, #160	@ 0xa0
 8000c90:	05db      	lsls	r3, r3, #23
 8000c92:	0011      	movs	r1, r2
 8000c94:	0018      	movs	r0, r3
 8000c96:	f000 ff8f 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000c9a:	0003      	movs	r3, r0
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d103      	bne.n	8000ca8 <readID+0x24>
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	e035      	b.n	8000d14 <readID+0x90>
	else if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin)==1){id=1;}
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <readID+0x9c>)
 8000caa:	2140      	movs	r1, #64	@ 0x40
 8000cac:	0018      	movs	r0, r3
 8000cae:	f000 ff83 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000cb2:	0003      	movs	r3, r0
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d103      	bne.n	8000cc0 <readID+0x3c>
 8000cb8:	1dfb      	adds	r3, r7, #7
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
 8000cbe:	e029      	b.n	8000d14 <readID+0x90>
	else if(HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin)==1){id=2;}
 8000cc0:	2380      	movs	r3, #128	@ 0x80
 8000cc2:	005a      	lsls	r2, r3, #1
 8000cc4:	23a0      	movs	r3, #160	@ 0xa0
 8000cc6:	05db      	lsls	r3, r3, #23
 8000cc8:	0011      	movs	r1, r2
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f000 ff74 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d103      	bne.n	8000cde <readID+0x5a>
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	2202      	movs	r2, #2
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	e01a      	b.n	8000d14 <readID+0x90>
	else if(HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin)==1){id=3;}
 8000cde:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <readID+0xa0>)
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f000 ff68 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000ce8:	0003      	movs	r3, r0
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d103      	bne.n	8000cf6 <readID+0x72>
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	701a      	strb	r2, [r3, #0]
 8000cf4:	e00e      	b.n	8000d14 <readID+0x90>
	else if(HAL_GPIO_ReadPin(SW5_GPIO_Port, SW5_Pin)==1){id=4;}
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <readID+0xa0>)
 8000cf8:	2102      	movs	r1, #2
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 ff5c 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000d00:	0003      	movs	r3, r0
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d103      	bne.n	8000d0e <readID+0x8a>
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	2204      	movs	r2, #4
 8000d0a:	701a      	strb	r2, [r3, #0]
 8000d0c:	e002      	b.n	8000d14 <readID+0x90>
	else{id=5;}
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	2205      	movs	r2, #5
 8000d12:	701a      	strb	r2, [r3, #0]
	return id;
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	781b      	ldrb	r3, [r3, #0]
}
 8000d18:	0018      	movs	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b002      	add	sp, #8
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	50000800 	.word	0x50000800
 8000d24:	50000400 	.word	0x50000400

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
}
 8000d2e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d30:	46c0      	nop			@ (mov r8, r8)
 8000d32:	e7fd      	b.n	8000d30 <Error_Handler+0x8>

08000d34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d78 <HAL_MspInit+0x44>)
 8000d3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <HAL_MspInit+0x44>)
 8000d40:	2101      	movs	r1, #1
 8000d42:	430a      	orrs	r2, r1
 8000d44:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d46:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <HAL_MspInit+0x44>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <HAL_MspInit+0x44>)
 8000d54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d56:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <HAL_MspInit+0x44>)
 8000d58:	2180      	movs	r1, #128	@ 0x80
 8000d5a:	0549      	lsls	r1, r1, #21
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d60:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <HAL_MspInit+0x44>)
 8000d62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d64:	2380      	movs	r3, #128	@ 0x80
 8000d66:	055b      	lsls	r3, r3, #21
 8000d68:	4013      	ands	r3, r2
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6e:	46c0      	nop			@ (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b002      	add	sp, #8
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	40021000 	.word	0x40021000

08000d7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a17      	ldr	r2, [pc, #92]	@ (8000de8 <HAL_TIM_Base_MspInit+0x6c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d114      	bne.n	8000db8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d8e:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <HAL_TIM_Base_MspInit+0x70>)
 8000d90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d92:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <HAL_TIM_Base_MspInit+0x70>)
 8000d94:	2102      	movs	r1, #2
 8000d96:	430a      	orrs	r2, r1
 8000d98:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d9a:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <HAL_TIM_Base_MspInit+0x70>)
 8000d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d9e:	2202      	movs	r2, #2
 8000da0:	4013      	ands	r3, r2
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	2010      	movs	r0, #16
 8000dac:	f000 fb1c 	bl	80013e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000db0:	2010      	movs	r0, #16
 8000db2:	f000 fb2e 	bl	8001412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000db6:	e012      	b.n	8000dde <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM16)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8000df0 <HAL_TIM_Base_MspInit+0x74>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d10d      	bne.n	8000dde <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <HAL_TIM_Base_MspInit+0x70>)
 8000dc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dc6:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <HAL_TIM_Base_MspInit+0x70>)
 8000dc8:	2180      	movs	r1, #128	@ 0x80
 8000dca:	0289      	lsls	r1, r1, #10
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	641a      	str	r2, [r3, #64]	@ 0x40
 8000dd0:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_TIM_Base_MspInit+0x70>)
 8000dd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dd4:	2380      	movs	r3, #128	@ 0x80
 8000dd6:	029b      	lsls	r3, r3, #10
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
}
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b004      	add	sp, #16
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	40000400 	.word	0x40000400
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40014400 	.word	0x40014400

08000df4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b08b      	sub	sp, #44	@ 0x2c
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	2414      	movs	r4, #20
 8000dfe:	193b      	adds	r3, r7, r4
 8000e00:	0018      	movs	r0, r3
 8000e02:	2314      	movs	r3, #20
 8000e04:	001a      	movs	r2, r3
 8000e06:	2100      	movs	r1, #0
 8000e08:	f003 ff44 	bl	8004c94 <memset>
  if(htim->Instance==TIM16)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a25      	ldr	r2, [pc, #148]	@ (8000ea8 <HAL_TIM_MspPostInit+0xb4>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d143      	bne.n	8000e9e <HAL_TIM_MspPostInit+0xaa>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	4b25      	ldr	r3, [pc, #148]	@ (8000eac <HAL_TIM_MspPostInit+0xb8>)
 8000e18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e1a:	4b24      	ldr	r3, [pc, #144]	@ (8000eac <HAL_TIM_MspPostInit+0xb8>)
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e22:	4b22      	ldr	r3, [pc, #136]	@ (8000eac <HAL_TIM_MspPostInit+0xb8>)
 8000e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e26:	2201      	movs	r2, #1
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000eac <HAL_TIM_MspPostInit+0xb8>)
 8000e30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e32:	4b1e      	ldr	r3, [pc, #120]	@ (8000eac <HAL_TIM_MspPostInit+0xb8>)
 8000e34:	2102      	movs	r1, #2
 8000e36:	430a      	orrs	r2, r1
 8000e38:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eac <HAL_TIM_MspPostInit+0xb8>)
 8000e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e3e:	2202      	movs	r2, #2
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    PB6     ------> TIM16_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e46:	193b      	adds	r3, r7, r4
 8000e48:	2240      	movs	r2, #64	@ 0x40
 8000e4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	193b      	adds	r3, r7, r4
 8000e4e:	2202      	movs	r2, #2
 8000e50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	193b      	adds	r3, r7, r4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8000e5e:	193b      	adds	r3, r7, r4
 8000e60:	2205      	movs	r2, #5
 8000e62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	193a      	adds	r2, r7, r4
 8000e66:	23a0      	movs	r3, #160	@ 0xa0
 8000e68:	05db      	lsls	r3, r3, #23
 8000e6a:	0011      	movs	r1, r2
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f000 fd3f 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e72:	0021      	movs	r1, r4
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2240      	movs	r2, #64	@ 0x40
 8000e78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	2202      	movs	r2, #2
 8000e90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	4a06      	ldr	r2, [pc, #24]	@ (8000eb0 <HAL_TIM_MspPostInit+0xbc>)
 8000e96:	0019      	movs	r1, r3
 8000e98:	0010      	movs	r0, r2
 8000e9a:	f000 fd29 	bl	80018f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b00b      	add	sp, #44	@ 0x2c
 8000ea4:	bd90      	pop	{r4, r7, pc}
 8000ea6:	46c0      	nop			@ (mov r8, r8)
 8000ea8:	40014400 	.word	0x40014400
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	50000400 	.word	0x50000400

08000eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b093      	sub	sp, #76	@ 0x4c
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	2334      	movs	r3, #52	@ 0x34
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	2314      	movs	r3, #20
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	f003 fee4 	bl	8004c94 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ecc:	241c      	movs	r4, #28
 8000ece:	193b      	adds	r3, r7, r4
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	2318      	movs	r3, #24
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	f003 fedc 	bl	8004c94 <memset>
  if(huart->Instance==USART1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a69      	ldr	r2, [pc, #420]	@ (8001088 <HAL_UART_MspInit+0x1d4>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d16b      	bne.n	8000fbe <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ee6:	193b      	adds	r3, r7, r4
 8000ee8:	2201      	movs	r2, #1
 8000eea:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000eec:	193b      	adds	r3, r7, r4
 8000eee:	2200      	movs	r2, #0
 8000ef0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef2:	193b      	adds	r3, r7, r4
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f001 fbb9 	bl	800266c <HAL_RCCEx_PeriphCLKConfig>
 8000efa:	1e03      	subs	r3, r0, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000efe:	f7ff ff13 	bl	8000d28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f02:	4b62      	ldr	r3, [pc, #392]	@ (800108c <HAL_UART_MspInit+0x1d8>)
 8000f04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f06:	4b61      	ldr	r3, [pc, #388]	@ (800108c <HAL_UART_MspInit+0x1d8>)
 8000f08:	2180      	movs	r1, #128	@ 0x80
 8000f0a:	01c9      	lsls	r1, r1, #7
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f10:	4b5e      	ldr	r3, [pc, #376]	@ (800108c <HAL_UART_MspInit+0x1d8>)
 8000f12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f14:	2380      	movs	r3, #128	@ 0x80
 8000f16:	01db      	lsls	r3, r3, #7
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
 8000f1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	4b5b      	ldr	r3, [pc, #364]	@ (800108c <HAL_UART_MspInit+0x1d8>)
 8000f20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f22:	4b5a      	ldr	r3, [pc, #360]	@ (800108c <HAL_UART_MspInit+0x1d8>)
 8000f24:	2101      	movs	r1, #1
 8000f26:	430a      	orrs	r2, r1
 8000f28:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f2a:	4b58      	ldr	r3, [pc, #352]	@ (800108c <HAL_UART_MspInit+0x1d8>)
 8000f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4013      	ands	r3, r2
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f36:	2134      	movs	r1, #52	@ 0x34
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	22c0      	movs	r2, #192	@ 0xc0
 8000f3c:	00d2      	lsls	r2, r2, #3
 8000f3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2202      	movs	r2, #2
 8000f44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	2201      	movs	r2, #1
 8000f56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	187a      	adds	r2, r7, r1
 8000f5a:	23a0      	movs	r3, #160	@ 0xa0
 8000f5c:	05db      	lsls	r3, r3, #23
 8000f5e:	0011      	movs	r1, r2
 8000f60:	0018      	movs	r0, r3
 8000f62:	f000 fcc5 	bl	80018f0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8000f66:	4b4a      	ldr	r3, [pc, #296]	@ (8001090 <HAL_UART_MspInit+0x1dc>)
 8000f68:	4a4a      	ldr	r2, [pc, #296]	@ (8001094 <HAL_UART_MspInit+0x1e0>)
 8000f6a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000f6c:	4b48      	ldr	r3, [pc, #288]	@ (8001090 <HAL_UART_MspInit+0x1dc>)
 8000f6e:	2232      	movs	r2, #50	@ 0x32
 8000f70:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f72:	4b47      	ldr	r3, [pc, #284]	@ (8001090 <HAL_UART_MspInit+0x1dc>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f78:	4b45      	ldr	r3, [pc, #276]	@ (8001090 <HAL_UART_MspInit+0x1dc>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f7e:	4b44      	ldr	r3, [pc, #272]	@ (8001090 <HAL_UART_MspInit+0x1dc>)
 8000f80:	2280      	movs	r2, #128	@ 0x80
 8000f82:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f84:	4b42      	ldr	r3, [pc, #264]	@ (8001090 <HAL_UART_MspInit+0x1dc>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f8a:	4b41      	ldr	r3, [pc, #260]	@ (8001090 <HAL_UART_MspInit+0x1dc>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000f90:	4b3f      	ldr	r3, [pc, #252]	@ (8001090 <HAL_UART_MspInit+0x1dc>)
 8000f92:	2220      	movs	r2, #32
 8000f94:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f96:	4b3e      	ldr	r3, [pc, #248]	@ (8001090 <HAL_UART_MspInit+0x1dc>)
 8000f98:	2280      	movs	r2, #128	@ 0x80
 8000f9a:	0152      	lsls	r2, r2, #5
 8000f9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f9e:	4b3c      	ldr	r3, [pc, #240]	@ (8001090 <HAL_UART_MspInit+0x1dc>)
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f000 fa53 	bl	800144c <HAL_DMA_Init>
 8000fa6:	1e03      	subs	r3, r0, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8000faa:	f7ff febd 	bl	8000d28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2180      	movs	r1, #128	@ 0x80
 8000fb2:	4a37      	ldr	r2, [pc, #220]	@ (8001090 <HAL_UART_MspInit+0x1dc>)
 8000fb4:	505a      	str	r2, [r3, r1]
 8000fb6:	4b36      	ldr	r3, [pc, #216]	@ (8001090 <HAL_UART_MspInit+0x1dc>)
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fbc:	e05f      	b.n	800107e <HAL_UART_MspInit+0x1ca>
  else if(huart->Instance==USART2)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a35      	ldr	r2, [pc, #212]	@ (8001098 <HAL_UART_MspInit+0x1e4>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d15a      	bne.n	800107e <HAL_UART_MspInit+0x1ca>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc8:	4b30      	ldr	r3, [pc, #192]	@ (800108c <HAL_UART_MspInit+0x1d8>)
 8000fca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	@ (800108c <HAL_UART_MspInit+0x1d8>)
 8000fce:	2180      	movs	r1, #128	@ 0x80
 8000fd0:	0289      	lsls	r1, r1, #10
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fd6:	4b2d      	ldr	r3, [pc, #180]	@ (800108c <HAL_UART_MspInit+0x1d8>)
 8000fd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fda:	2380      	movs	r3, #128	@ 0x80
 8000fdc:	029b      	lsls	r3, r3, #10
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	4b29      	ldr	r3, [pc, #164]	@ (800108c <HAL_UART_MspInit+0x1d8>)
 8000fe6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fe8:	4b28      	ldr	r3, [pc, #160]	@ (800108c <HAL_UART_MspInit+0x1d8>)
 8000fea:	2101      	movs	r1, #1
 8000fec:	430a      	orrs	r2, r1
 8000fee:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ff0:	4b26      	ldr	r3, [pc, #152]	@ (800108c <HAL_UART_MspInit+0x1d8>)
 8000ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000ffc:	2134      	movs	r1, #52	@ 0x34
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	4a26      	ldr	r2, [pc, #152]	@ (800109c <HAL_UART_MspInit+0x1e8>)
 8001002:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	187b      	adds	r3, r7, r1
 8001006:	2202      	movs	r2, #2
 8001008:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	187b      	adds	r3, r7, r1
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	187b      	adds	r3, r7, r1
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001016:	187b      	adds	r3, r7, r1
 8001018:	2201      	movs	r2, #1
 800101a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	187a      	adds	r2, r7, r1
 800101e:	23a0      	movs	r3, #160	@ 0xa0
 8001020:	05db      	lsls	r3, r3, #23
 8001022:	0011      	movs	r1, r2
 8001024:	0018      	movs	r0, r3
 8001026:	f000 fc63 	bl	80018f0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800102a:	4b1d      	ldr	r3, [pc, #116]	@ (80010a0 <HAL_UART_MspInit+0x1ec>)
 800102c:	4a1d      	ldr	r2, [pc, #116]	@ (80010a4 <HAL_UART_MspInit+0x1f0>)
 800102e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001030:	4b1b      	ldr	r3, [pc, #108]	@ (80010a0 <HAL_UART_MspInit+0x1ec>)
 8001032:	2234      	movs	r2, #52	@ 0x34
 8001034:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001036:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <HAL_UART_MspInit+0x1ec>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800103c:	4b18      	ldr	r3, [pc, #96]	@ (80010a0 <HAL_UART_MspInit+0x1ec>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001042:	4b17      	ldr	r3, [pc, #92]	@ (80010a0 <HAL_UART_MspInit+0x1ec>)
 8001044:	2280      	movs	r2, #128	@ 0x80
 8001046:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001048:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <HAL_UART_MspInit+0x1ec>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800104e:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <HAL_UART_MspInit+0x1ec>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001054:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <HAL_UART_MspInit+0x1ec>)
 8001056:	2220      	movs	r2, #32
 8001058:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800105a:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <HAL_UART_MspInit+0x1ec>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001060:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <HAL_UART_MspInit+0x1ec>)
 8001062:	0018      	movs	r0, r3
 8001064:	f000 f9f2 	bl	800144c <HAL_DMA_Init>
 8001068:	1e03      	subs	r3, r0, #0
 800106a:	d001      	beq.n	8001070 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 800106c:	f7ff fe5c 	bl	8000d28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2180      	movs	r1, #128	@ 0x80
 8001074:	4a0a      	ldr	r2, [pc, #40]	@ (80010a0 <HAL_UART_MspInit+0x1ec>)
 8001076:	505a      	str	r2, [r3, r1]
 8001078:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <HAL_UART_MspInit+0x1ec>)
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800107e:	46c0      	nop			@ (mov r8, r8)
 8001080:	46bd      	mov	sp, r7
 8001082:	b013      	add	sp, #76	@ 0x4c
 8001084:	bd90      	pop	{r4, r7, pc}
 8001086:	46c0      	nop			@ (mov r8, r8)
 8001088:	40013800 	.word	0x40013800
 800108c:	40021000 	.word	0x40021000
 8001090:	200001f0 	.word	0x200001f0
 8001094:	4002001c 	.word	0x4002001c
 8001098:	40004400 	.word	0x40004400
 800109c:	00008004 	.word	0x00008004
 80010a0:	2000024c 	.word	0x2000024c
 80010a4:	40020008 	.word	0x40020008

080010a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010ac:	46c0      	nop			@ (mov r8, r8)
 80010ae:	e7fd      	b.n	80010ac <NMI_Handler+0x4>

080010b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b4:	46c0      	nop			@ (mov r8, r8)
 80010b6:	e7fd      	b.n	80010b4 <HardFault_Handler+0x4>

080010b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010bc:	46c0      	nop			@ (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c6:	46c0      	nop			@ (mov r8, r8)
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d0:	f000 f8c2 	bl	8001258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d4:	46c0      	nop			@ (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80010e0:	4b03      	ldr	r3, [pc, #12]	@ (80010f0 <DMA1_Channel1_IRQHandler+0x14>)
 80010e2:	0018      	movs	r0, r3
 80010e4:	f000 fac2 	bl	800166c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80010e8:	46c0      	nop			@ (mov r8, r8)
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	46c0      	nop			@ (mov r8, r8)
 80010f0:	2000024c 	.word	0x2000024c

080010f4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80010f8:	4b03      	ldr	r3, [pc, #12]	@ (8001108 <DMA1_Channel2_3_IRQHandler+0x14>)
 80010fa:	0018      	movs	r0, r3
 80010fc:	f000 fab6 	bl	800166c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001100:	46c0      	nop			@ (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	46c0      	nop			@ (mov r8, r8)
 8001108:	200001f0 	.word	0x200001f0

0800110c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001110:	4b03      	ldr	r3, [pc, #12]	@ (8001120 <TIM3_IRQHandler+0x14>)
 8001112:	0018      	movs	r0, r3
 8001114:	f001 fdae 	bl	8002c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001118:	46c0      	nop			@ (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	46c0      	nop			@ (mov r8, r8)
 8001120:	20000030 	.word	0x20000030

08001124 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001128:	46c0      	nop			@ (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001130:	480d      	ldr	r0, [pc, #52]	@ (8001168 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001132:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001134:	f7ff fff6 	bl	8001124 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001138:	480c      	ldr	r0, [pc, #48]	@ (800116c <LoopForever+0x6>)
  ldr r1, =_edata
 800113a:	490d      	ldr	r1, [pc, #52]	@ (8001170 <LoopForever+0xa>)
  ldr r2, =_sidata
 800113c:	4a0d      	ldr	r2, [pc, #52]	@ (8001174 <LoopForever+0xe>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001150:	4c0a      	ldr	r4, [pc, #40]	@ (800117c <LoopForever+0x16>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800115e:	f003 fda1 	bl	8004ca4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001162:	f7ff f959 	bl	8000418 <main>

08001166 <LoopForever>:

LoopForever:
  b LoopForever
 8001166:	e7fe      	b.n	8001166 <LoopForever>
  ldr   r0, =_estack
 8001168:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001170:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001174:	08004de8 	.word	0x08004de8
  ldr r2, =_sbss
 8001178:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800117c:	2000037c 	.word	0x2000037c

08001180 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC1_IRQHandler>
	...

08001184 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800118a:	1dfb      	adds	r3, r7, #7
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <HAL_Init+0x3c>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <HAL_Init+0x3c>)
 8001196:	2180      	movs	r1, #128	@ 0x80
 8001198:	0049      	lsls	r1, r1, #1
 800119a:	430a      	orrs	r2, r1
 800119c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800119e:	2003      	movs	r0, #3
 80011a0:	f000 f810 	bl	80011c4 <HAL_InitTick>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80011a8:	1dfb      	adds	r3, r7, #7
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]
 80011ae:	e001      	b.n	80011b4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80011b0:	f7ff fdc0 	bl	8000d34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011b4:	1dfb      	adds	r3, r7, #7
 80011b6:	781b      	ldrb	r3, [r3, #0]
}
 80011b8:	0018      	movs	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b002      	add	sp, #8
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40022000 	.word	0x40022000

080011c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011cc:	230f      	movs	r3, #15
 80011ce:	18fb      	adds	r3, r7, r3
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80011d4:	4b1d      	ldr	r3, [pc, #116]	@ (800124c <HAL_InitTick+0x88>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d02b      	beq.n	8001234 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80011dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001250 <HAL_InitTick+0x8c>)
 80011de:	681c      	ldr	r4, [r3, #0]
 80011e0:	4b1a      	ldr	r3, [pc, #104]	@ (800124c <HAL_InitTick+0x88>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	0019      	movs	r1, r3
 80011e6:	23fa      	movs	r3, #250	@ 0xfa
 80011e8:	0098      	lsls	r0, r3, #2
 80011ea:	f7fe ff89 	bl	8000100 <__udivsi3>
 80011ee:	0003      	movs	r3, r0
 80011f0:	0019      	movs	r1, r3
 80011f2:	0020      	movs	r0, r4
 80011f4:	f7fe ff84 	bl	8000100 <__udivsi3>
 80011f8:	0003      	movs	r3, r0
 80011fa:	0018      	movs	r0, r3
 80011fc:	f000 f919 	bl	8001432 <HAL_SYSTICK_Config>
 8001200:	1e03      	subs	r3, r0, #0
 8001202:	d112      	bne.n	800122a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b03      	cmp	r3, #3
 8001208:	d80a      	bhi.n	8001220 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	2301      	movs	r3, #1
 800120e:	425b      	negs	r3, r3
 8001210:	2200      	movs	r2, #0
 8001212:	0018      	movs	r0, r3
 8001214:	f000 f8e8 	bl	80013e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001218:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <HAL_InitTick+0x90>)
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	e00d      	b.n	800123c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001220:	230f      	movs	r3, #15
 8001222:	18fb      	adds	r3, r7, r3
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
 8001228:	e008      	b.n	800123c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800122a:	230f      	movs	r3, #15
 800122c:	18fb      	adds	r3, r7, r3
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
 8001232:	e003      	b.n	800123c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001234:	230f      	movs	r3, #15
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800123c:	230f      	movs	r3, #15
 800123e:	18fb      	adds	r3, r7, r3
 8001240:	781b      	ldrb	r3, [r3, #0]
}
 8001242:	0018      	movs	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	b005      	add	sp, #20
 8001248:	bd90      	pop	{r4, r7, pc}
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	20000010 	.word	0x20000010
 8001250:	20000008 	.word	0x20000008
 8001254:	2000000c 	.word	0x2000000c

08001258 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800125c:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <HAL_IncTick+0x1c>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	001a      	movs	r2, r3
 8001262:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <HAL_IncTick+0x20>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	18d2      	adds	r2, r2, r3
 8001268:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <HAL_IncTick+0x20>)
 800126a:	601a      	str	r2, [r3, #0]
}
 800126c:	46c0      	nop			@ (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			@ (mov r8, r8)
 8001274:	20000010 	.word	0x20000010
 8001278:	20000378 	.word	0x20000378

0800127c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b02      	ldr	r3, [pc, #8]	@ (800128c <HAL_GetTick+0x10>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	0018      	movs	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	46c0      	nop			@ (mov r8, r8)
 800128c:	20000378 	.word	0x20000378

08001290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	0002      	movs	r2, r0
 8001298:	1dfb      	adds	r3, r7, #7
 800129a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800129c:	1dfb      	adds	r3, r7, #7
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80012a2:	d809      	bhi.n	80012b8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a4:	1dfb      	adds	r3, r7, #7
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	001a      	movs	r2, r3
 80012aa:	231f      	movs	r3, #31
 80012ac:	401a      	ands	r2, r3
 80012ae:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <__NVIC_EnableIRQ+0x30>)
 80012b0:	2101      	movs	r1, #1
 80012b2:	4091      	lsls	r1, r2
 80012b4:	000a      	movs	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80012b8:	46c0      	nop			@ (mov r8, r8)
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b002      	add	sp, #8
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	0002      	movs	r2, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	1dfb      	adds	r3, r7, #7
 80012d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80012d8:	d828      	bhi.n	800132c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012da:	4a2f      	ldr	r2, [pc, #188]	@ (8001398 <__NVIC_SetPriority+0xd4>)
 80012dc:	1dfb      	adds	r3, r7, #7
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	b25b      	sxtb	r3, r3
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	33c0      	adds	r3, #192	@ 0xc0
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	589b      	ldr	r3, [r3, r2]
 80012ea:	1dfa      	adds	r2, r7, #7
 80012ec:	7812      	ldrb	r2, [r2, #0]
 80012ee:	0011      	movs	r1, r2
 80012f0:	2203      	movs	r2, #3
 80012f2:	400a      	ands	r2, r1
 80012f4:	00d2      	lsls	r2, r2, #3
 80012f6:	21ff      	movs	r1, #255	@ 0xff
 80012f8:	4091      	lsls	r1, r2
 80012fa:	000a      	movs	r2, r1
 80012fc:	43d2      	mvns	r2, r2
 80012fe:	401a      	ands	r2, r3
 8001300:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	019b      	lsls	r3, r3, #6
 8001306:	22ff      	movs	r2, #255	@ 0xff
 8001308:	401a      	ands	r2, r3
 800130a:	1dfb      	adds	r3, r7, #7
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	0018      	movs	r0, r3
 8001310:	2303      	movs	r3, #3
 8001312:	4003      	ands	r3, r0
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001318:	481f      	ldr	r0, [pc, #124]	@ (8001398 <__NVIC_SetPriority+0xd4>)
 800131a:	1dfb      	adds	r3, r7, #7
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b25b      	sxtb	r3, r3
 8001320:	089b      	lsrs	r3, r3, #2
 8001322:	430a      	orrs	r2, r1
 8001324:	33c0      	adds	r3, #192	@ 0xc0
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800132a:	e031      	b.n	8001390 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800132c:	4a1b      	ldr	r2, [pc, #108]	@ (800139c <__NVIC_SetPriority+0xd8>)
 800132e:	1dfb      	adds	r3, r7, #7
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	0019      	movs	r1, r3
 8001334:	230f      	movs	r3, #15
 8001336:	400b      	ands	r3, r1
 8001338:	3b08      	subs	r3, #8
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3306      	adds	r3, #6
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	18d3      	adds	r3, r2, r3
 8001342:	3304      	adds	r3, #4
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	1dfa      	adds	r2, r7, #7
 8001348:	7812      	ldrb	r2, [r2, #0]
 800134a:	0011      	movs	r1, r2
 800134c:	2203      	movs	r2, #3
 800134e:	400a      	ands	r2, r1
 8001350:	00d2      	lsls	r2, r2, #3
 8001352:	21ff      	movs	r1, #255	@ 0xff
 8001354:	4091      	lsls	r1, r2
 8001356:	000a      	movs	r2, r1
 8001358:	43d2      	mvns	r2, r2
 800135a:	401a      	ands	r2, r3
 800135c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	019b      	lsls	r3, r3, #6
 8001362:	22ff      	movs	r2, #255	@ 0xff
 8001364:	401a      	ands	r2, r3
 8001366:	1dfb      	adds	r3, r7, #7
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	0018      	movs	r0, r3
 800136c:	2303      	movs	r3, #3
 800136e:	4003      	ands	r3, r0
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001374:	4809      	ldr	r0, [pc, #36]	@ (800139c <__NVIC_SetPriority+0xd8>)
 8001376:	1dfb      	adds	r3, r7, #7
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	001c      	movs	r4, r3
 800137c:	230f      	movs	r3, #15
 800137e:	4023      	ands	r3, r4
 8001380:	3b08      	subs	r3, #8
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	430a      	orrs	r2, r1
 8001386:	3306      	adds	r3, #6
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	18c3      	adds	r3, r0, r3
 800138c:	3304      	adds	r3, #4
 800138e:	601a      	str	r2, [r3, #0]
}
 8001390:	46c0      	nop			@ (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	b003      	add	sp, #12
 8001396:	bd90      	pop	{r4, r7, pc}
 8001398:	e000e100 	.word	0xe000e100
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	1e5a      	subs	r2, r3, #1
 80013ac:	2380      	movs	r3, #128	@ 0x80
 80013ae:	045b      	lsls	r3, r3, #17
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d301      	bcc.n	80013b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b4:	2301      	movs	r3, #1
 80013b6:	e010      	b.n	80013da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b8:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <SysTick_Config+0x44>)
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	3a01      	subs	r2, #1
 80013be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c0:	2301      	movs	r3, #1
 80013c2:	425b      	negs	r3, r3
 80013c4:	2103      	movs	r1, #3
 80013c6:	0018      	movs	r0, r3
 80013c8:	f7ff ff7c 	bl	80012c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013cc:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <SysTick_Config+0x44>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d2:	4b04      	ldr	r3, [pc, #16]	@ (80013e4 <SysTick_Config+0x44>)
 80013d4:	2207      	movs	r2, #7
 80013d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d8:	2300      	movs	r3, #0
}
 80013da:	0018      	movs	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	b002      	add	sp, #8
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	46c0      	nop			@ (mov r8, r8)
 80013e4:	e000e010 	.word	0xe000e010

080013e8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	210f      	movs	r1, #15
 80013f4:	187b      	adds	r3, r7, r1
 80013f6:	1c02      	adds	r2, r0, #0
 80013f8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b25b      	sxtb	r3, r3
 8001402:	0011      	movs	r1, r2
 8001404:	0018      	movs	r0, r3
 8001406:	f7ff ff5d 	bl	80012c4 <__NVIC_SetPriority>
}
 800140a:	46c0      	nop			@ (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	b004      	add	sp, #16
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	0002      	movs	r2, r0
 800141a:	1dfb      	adds	r3, r7, #7
 800141c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b25b      	sxtb	r3, r3
 8001424:	0018      	movs	r0, r3
 8001426:	f7ff ff33 	bl	8001290 <__NVIC_EnableIRQ>
}
 800142a:	46c0      	nop			@ (mov r8, r8)
 800142c:	46bd      	mov	sp, r7
 800142e:	b002      	add	sp, #8
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	0018      	movs	r0, r3
 800143e:	f7ff ffaf 	bl	80013a0 <SysTick_Config>
 8001442:	0003      	movs	r3, r0
}
 8001444:	0018      	movs	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	b002      	add	sp, #8
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e077      	b.n	800154e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a3d      	ldr	r2, [pc, #244]	@ (8001558 <HAL_DMA_Init+0x10c>)
 8001464:	4694      	mov	ip, r2
 8001466:	4463      	add	r3, ip
 8001468:	2114      	movs	r1, #20
 800146a:	0018      	movs	r0, r3
 800146c:	f7fe fe48 	bl	8000100 <__udivsi3>
 8001470:	0003      	movs	r3, r0
 8001472:	009a      	lsls	r2, r3, #2
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2225      	movs	r2, #37	@ 0x25
 800147c:	2102      	movs	r1, #2
 800147e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4934      	ldr	r1, [pc, #208]	@ (800155c <HAL_DMA_Init+0x110>)
 800148c:	400a      	ands	r2, r1
 800148e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6819      	ldr	r1, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	431a      	orrs	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	431a      	orrs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	0018      	movs	r0, r3
 80014ca:	f000 f9c1 	bl	8001850 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	2380      	movs	r3, #128	@ 0x80
 80014d4:	01db      	lsls	r3, r3, #7
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d102      	bne.n	80014e0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e8:	213f      	movs	r1, #63	@ 0x3f
 80014ea:	400a      	ands	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80014f6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d011      	beq.n	8001524 <HAL_DMA_Init+0xd8>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b04      	cmp	r3, #4
 8001506:	d80d      	bhi.n	8001524 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	0018      	movs	r0, r3
 800150c:	f000 f9cc 	bl	80018a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	e008      	b.n	8001536 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2225      	movs	r2, #37	@ 0x25
 8001540:	2101      	movs	r1, #1
 8001542:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2224      	movs	r2, #36	@ 0x24
 8001548:	2100      	movs	r1, #0
 800154a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	0018      	movs	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	b002      	add	sp, #8
 8001554:	bd80      	pop	{r7, pc}
 8001556:	46c0      	nop			@ (mov r8, r8)
 8001558:	bffdfff8 	.word	0xbffdfff8
 800155c:	ffff800f 	.word	0xffff800f

08001560 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800156e:	2317      	movs	r3, #23
 8001570:	18fb      	adds	r3, r7, r3
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2224      	movs	r2, #36	@ 0x24
 800157a:	5c9b      	ldrb	r3, [r3, r2]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d101      	bne.n	8001584 <HAL_DMA_Start_IT+0x24>
 8001580:	2302      	movs	r3, #2
 8001582:	e06f      	b.n	8001664 <HAL_DMA_Start_IT+0x104>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2224      	movs	r2, #36	@ 0x24
 8001588:	2101      	movs	r1, #1
 800158a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2225      	movs	r2, #37	@ 0x25
 8001590:	5c9b      	ldrb	r3, [r3, r2]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b01      	cmp	r3, #1
 8001596:	d157      	bne.n	8001648 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2225      	movs	r2, #37	@ 0x25
 800159c:	2102      	movs	r1, #2
 800159e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2101      	movs	r1, #1
 80015b2:	438a      	bics	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f000 f907 	bl	80017d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d008      	beq.n	80015dc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	210e      	movs	r1, #14
 80015d6:	430a      	orrs	r2, r1
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	e00f      	b.n	80015fc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2104      	movs	r1, #4
 80015e8:	438a      	bics	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	210a      	movs	r1, #10
 80015f8:	430a      	orrs	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	2380      	movs	r3, #128	@ 0x80
 8001604:	025b      	lsls	r3, r3, #9
 8001606:	4013      	ands	r3, r2
 8001608:	d008      	beq.n	800161c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001614:	2180      	movs	r1, #128	@ 0x80
 8001616:	0049      	lsls	r1, r1, #1
 8001618:	430a      	orrs	r2, r1
 800161a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001620:	2b00      	cmp	r3, #0
 8001622:	d008      	beq.n	8001636 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800162e:	2180      	movs	r1, #128	@ 0x80
 8001630:	0049      	lsls	r1, r1, #1
 8001632:	430a      	orrs	r2, r1
 8001634:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2101      	movs	r1, #1
 8001642:	430a      	orrs	r2, r1
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	e00a      	b.n	800165e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2280      	movs	r2, #128	@ 0x80
 800164c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2224      	movs	r2, #36	@ 0x24
 8001652:	2100      	movs	r1, #0
 8001654:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001656:	2317      	movs	r3, #23
 8001658:	18fb      	adds	r3, r7, r3
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800165e:	2317      	movs	r3, #23
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	781b      	ldrb	r3, [r3, #0]
}
 8001664:	0018      	movs	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	b006      	add	sp, #24
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001674:	4b55      	ldr	r3, [pc, #340]	@ (80017cc <HAL_DMA_IRQHandler+0x160>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	221c      	movs	r2, #28
 8001688:	4013      	ands	r3, r2
 800168a:	2204      	movs	r2, #4
 800168c:	409a      	lsls	r2, r3
 800168e:	0013      	movs	r3, r2
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	4013      	ands	r3, r2
 8001694:	d027      	beq.n	80016e6 <HAL_DMA_IRQHandler+0x7a>
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	2204      	movs	r2, #4
 800169a:	4013      	ands	r3, r2
 800169c:	d023      	beq.n	80016e6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2220      	movs	r2, #32
 80016a6:	4013      	ands	r3, r2
 80016a8:	d107      	bne.n	80016ba <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2104      	movs	r1, #4
 80016b6:	438a      	bics	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80016ba:	4b44      	ldr	r3, [pc, #272]	@ (80017cc <HAL_DMA_IRQHandler+0x160>)
 80016bc:	6859      	ldr	r1, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	221c      	movs	r2, #28
 80016c4:	4013      	ands	r3, r2
 80016c6:	2204      	movs	r2, #4
 80016c8:	409a      	lsls	r2, r3
 80016ca:	4b40      	ldr	r3, [pc, #256]	@ (80017cc <HAL_DMA_IRQHandler+0x160>)
 80016cc:	430a      	orrs	r2, r1
 80016ce:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d100      	bne.n	80016da <HAL_DMA_IRQHandler+0x6e>
 80016d8:	e073      	b.n	80017c2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	0010      	movs	r0, r2
 80016e2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80016e4:	e06d      	b.n	80017c2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	221c      	movs	r2, #28
 80016ec:	4013      	ands	r3, r2
 80016ee:	2202      	movs	r2, #2
 80016f0:	409a      	lsls	r2, r3
 80016f2:	0013      	movs	r3, r2
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	4013      	ands	r3, r2
 80016f8:	d02e      	beq.n	8001758 <HAL_DMA_IRQHandler+0xec>
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	2202      	movs	r2, #2
 80016fe:	4013      	ands	r3, r2
 8001700:	d02a      	beq.n	8001758 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2220      	movs	r2, #32
 800170a:	4013      	ands	r3, r2
 800170c:	d10b      	bne.n	8001726 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	210a      	movs	r1, #10
 800171a:	438a      	bics	r2, r1
 800171c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2225      	movs	r2, #37	@ 0x25
 8001722:	2101      	movs	r1, #1
 8001724:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001726:	4b29      	ldr	r3, [pc, #164]	@ (80017cc <HAL_DMA_IRQHandler+0x160>)
 8001728:	6859      	ldr	r1, [r3, #4]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	221c      	movs	r2, #28
 8001730:	4013      	ands	r3, r2
 8001732:	2202      	movs	r2, #2
 8001734:	409a      	lsls	r2, r3
 8001736:	4b25      	ldr	r3, [pc, #148]	@ (80017cc <HAL_DMA_IRQHandler+0x160>)
 8001738:	430a      	orrs	r2, r1
 800173a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2224      	movs	r2, #36	@ 0x24
 8001740:	2100      	movs	r1, #0
 8001742:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001748:	2b00      	cmp	r3, #0
 800174a:	d03a      	beq.n	80017c2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	0010      	movs	r0, r2
 8001754:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001756:	e034      	b.n	80017c2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175c:	221c      	movs	r2, #28
 800175e:	4013      	ands	r3, r2
 8001760:	2208      	movs	r2, #8
 8001762:	409a      	lsls	r2, r3
 8001764:	0013      	movs	r3, r2
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	4013      	ands	r3, r2
 800176a:	d02b      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x158>
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2208      	movs	r2, #8
 8001770:	4013      	ands	r3, r2
 8001772:	d027      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	210e      	movs	r1, #14
 8001780:	438a      	bics	r2, r1
 8001782:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001784:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <HAL_DMA_IRQHandler+0x160>)
 8001786:	6859      	ldr	r1, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	221c      	movs	r2, #28
 800178e:	4013      	ands	r3, r2
 8001790:	2201      	movs	r2, #1
 8001792:	409a      	lsls	r2, r3
 8001794:	4b0d      	ldr	r3, [pc, #52]	@ (80017cc <HAL_DMA_IRQHandler+0x160>)
 8001796:	430a      	orrs	r2, r1
 8001798:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2225      	movs	r2, #37	@ 0x25
 80017a4:	2101      	movs	r1, #1
 80017a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2224      	movs	r2, #36	@ 0x24
 80017ac:	2100      	movs	r1, #0
 80017ae:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	0010      	movs	r0, r2
 80017c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80017c2:	46c0      	nop			@ (mov r8, r8)
 80017c4:	46c0      	nop			@ (mov r8, r8)
}
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b004      	add	sp, #16
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40020000 	.word	0x40020000

080017d0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
 80017dc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80017e6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d004      	beq.n	80017fa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80017f8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80017fa:	4b14      	ldr	r3, [pc, #80]	@ (800184c <DMA_SetConfig+0x7c>)
 80017fc:	6859      	ldr	r1, [r3, #4]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	221c      	movs	r2, #28
 8001804:	4013      	ands	r3, r2
 8001806:	2201      	movs	r2, #1
 8001808:	409a      	lsls	r2, r3
 800180a:	4b10      	ldr	r3, [pc, #64]	@ (800184c <DMA_SetConfig+0x7c>)
 800180c:	430a      	orrs	r2, r1
 800180e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b10      	cmp	r3, #16
 800181e:	d108      	bne.n	8001832 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001830:	e007      	b.n	8001842 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	60da      	str	r2, [r3, #12]
}
 8001842:	46c0      	nop			@ (mov r8, r8)
 8001844:	46bd      	mov	sp, r7
 8001846:	b004      	add	sp, #16
 8001848:	bd80      	pop	{r7, pc}
 800184a:	46c0      	nop			@ (mov r8, r8)
 800184c:	40020000 	.word	0x40020000

08001850 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	4a10      	ldr	r2, [pc, #64]	@ (80018a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001860:	4694      	mov	ip, r2
 8001862:	4463      	add	r3, ip
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	001a      	movs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	001a      	movs	r2, r3
 8001872:	23ff      	movs	r3, #255	@ 0xff
 8001874:	4013      	ands	r3, r2
 8001876:	3b08      	subs	r3, #8
 8001878:	2114      	movs	r1, #20
 800187a:	0018      	movs	r0, r3
 800187c:	f7fe fc40 	bl	8000100 <__udivsi3>
 8001880:	0003      	movs	r3, r0
 8001882:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a07      	ldr	r2, [pc, #28]	@ (80018a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001888:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	221f      	movs	r2, #31
 800188e:	4013      	ands	r3, r2
 8001890:	2201      	movs	r2, #1
 8001892:	409a      	lsls	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001898:	46c0      	nop			@ (mov r8, r8)
 800189a:	46bd      	mov	sp, r7
 800189c:	b004      	add	sp, #16
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	10008200 	.word	0x10008200
 80018a4:	40020880 	.word	0x40020880

080018a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	223f      	movs	r2, #63	@ 0x3f
 80018b6:	4013      	ands	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80018be:	4694      	mov	ip, r2
 80018c0:	4463      	add	r3, ip
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	001a      	movs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a07      	ldr	r2, [pc, #28]	@ (80018ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80018ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	4013      	ands	r3, r2
 80018d8:	2201      	movs	r2, #1
 80018da:	409a      	lsls	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80018e0:	46c0      	nop			@ (mov r8, r8)
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b004      	add	sp, #16
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	1000823f 	.word	0x1000823f
 80018ec:	40020940 	.word	0x40020940

080018f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fe:	e147      	b.n	8001b90 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2101      	movs	r1, #1
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4091      	lsls	r1, r2
 800190a:	000a      	movs	r2, r1
 800190c:	4013      	ands	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d100      	bne.n	8001918 <HAL_GPIO_Init+0x28>
 8001916:	e138      	b.n	8001b8a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2203      	movs	r2, #3
 800191e:	4013      	ands	r3, r2
 8001920:	2b01      	cmp	r3, #1
 8001922:	d005      	beq.n	8001930 <HAL_GPIO_Init+0x40>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2203      	movs	r2, #3
 800192a:	4013      	ands	r3, r2
 800192c:	2b02      	cmp	r3, #2
 800192e:	d130      	bne.n	8001992 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	2203      	movs	r2, #3
 800193c:	409a      	lsls	r2, r3
 800193e:	0013      	movs	r3, r2
 8001940:	43da      	mvns	r2, r3
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	409a      	lsls	r2, r3
 8001952:	0013      	movs	r3, r2
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001966:	2201      	movs	r2, #1
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
 800196c:	0013      	movs	r3, r2
 800196e:	43da      	mvns	r2, r3
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	091b      	lsrs	r3, r3, #4
 800197c:	2201      	movs	r2, #1
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
 8001984:	0013      	movs	r3, r2
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2203      	movs	r2, #3
 8001998:	4013      	ands	r3, r2
 800199a:	2b03      	cmp	r3, #3
 800199c:	d017      	beq.n	80019ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	2203      	movs	r2, #3
 80019aa:	409a      	lsls	r2, r3
 80019ac:	0013      	movs	r3, r2
 80019ae:	43da      	mvns	r2, r3
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	409a      	lsls	r2, r3
 80019c0:	0013      	movs	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2203      	movs	r2, #3
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d123      	bne.n	8001a22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	08da      	lsrs	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3208      	adds	r2, #8
 80019e2:	0092      	lsls	r2, r2, #2
 80019e4:	58d3      	ldr	r3, [r2, r3]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	2207      	movs	r2, #7
 80019ec:	4013      	ands	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	220f      	movs	r2, #15
 80019f2:	409a      	lsls	r2, r3
 80019f4:	0013      	movs	r3, r2
 80019f6:	43da      	mvns	r2, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	2107      	movs	r1, #7
 8001a06:	400b      	ands	r3, r1
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	0013      	movs	r3, r2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	08da      	lsrs	r2, r3, #3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3208      	adds	r2, #8
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	6939      	ldr	r1, [r7, #16]
 8001a20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	0013      	movs	r3, r2
 8001a32:	43da      	mvns	r2, r3
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2203      	movs	r2, #3
 8001a40:	401a      	ands	r2, r3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	409a      	lsls	r2, r3
 8001a48:	0013      	movs	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	23c0      	movs	r3, #192	@ 0xc0
 8001a5c:	029b      	lsls	r3, r3, #10
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d100      	bne.n	8001a64 <HAL_GPIO_Init+0x174>
 8001a62:	e092      	b.n	8001b8a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001a64:	4a50      	ldr	r2, [pc, #320]	@ (8001ba8 <HAL_GPIO_Init+0x2b8>)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	089b      	lsrs	r3, r3, #2
 8001a6a:	3318      	adds	r3, #24
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	589b      	ldr	r3, [r3, r2]
 8001a70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	2203      	movs	r2, #3
 8001a76:	4013      	ands	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	220f      	movs	r2, #15
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	0013      	movs	r3, r2
 8001a80:	43da      	mvns	r2, r3
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	23a0      	movs	r3, #160	@ 0xa0
 8001a8c:	05db      	lsls	r3, r3, #23
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d013      	beq.n	8001aba <HAL_GPIO_Init+0x1ca>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a45      	ldr	r2, [pc, #276]	@ (8001bac <HAL_GPIO_Init+0x2bc>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d00d      	beq.n	8001ab6 <HAL_GPIO_Init+0x1c6>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a44      	ldr	r2, [pc, #272]	@ (8001bb0 <HAL_GPIO_Init+0x2c0>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d007      	beq.n	8001ab2 <HAL_GPIO_Init+0x1c2>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a43      	ldr	r2, [pc, #268]	@ (8001bb4 <HAL_GPIO_Init+0x2c4>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d101      	bne.n	8001aae <HAL_GPIO_Init+0x1be>
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x1cc>
 8001aae:	2305      	movs	r3, #5
 8001ab0:	e004      	b.n	8001abc <HAL_GPIO_Init+0x1cc>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e002      	b.n	8001abc <HAL_GPIO_Init+0x1cc>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_GPIO_Init+0x1cc>
 8001aba:	2300      	movs	r3, #0
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	2103      	movs	r1, #3
 8001ac0:	400a      	ands	r2, r1
 8001ac2:	00d2      	lsls	r2, r2, #3
 8001ac4:	4093      	lsls	r3, r2
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001acc:	4936      	ldr	r1, [pc, #216]	@ (8001ba8 <HAL_GPIO_Init+0x2b8>)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	3318      	adds	r3, #24
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ada:	4b33      	ldr	r3, [pc, #204]	@ (8001ba8 <HAL_GPIO_Init+0x2b8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	2380      	movs	r3, #128	@ 0x80
 8001af0:	035b      	lsls	r3, r3, #13
 8001af2:	4013      	ands	r3, r2
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001afe:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba8 <HAL_GPIO_Init+0x2b8>)
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001b04:	4b28      	ldr	r3, [pc, #160]	@ (8001ba8 <HAL_GPIO_Init+0x2b8>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	43da      	mvns	r2, r3
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	2380      	movs	r3, #128	@ 0x80
 8001b1a:	039b      	lsls	r3, r3, #14
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b28:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba8 <HAL_GPIO_Init+0x2b8>)
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ba8 <HAL_GPIO_Init+0x2b8>)
 8001b30:	2384      	movs	r3, #132	@ 0x84
 8001b32:	58d3      	ldr	r3, [r2, r3]
 8001b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	43da      	mvns	r2, r3
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	2380      	movs	r3, #128	@ 0x80
 8001b46:	029b      	lsls	r3, r3, #10
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b54:	4914      	ldr	r1, [pc, #80]	@ (8001ba8 <HAL_GPIO_Init+0x2b8>)
 8001b56:	2284      	movs	r2, #132	@ 0x84
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001b5c:	4a12      	ldr	r2, [pc, #72]	@ (8001ba8 <HAL_GPIO_Init+0x2b8>)
 8001b5e:	2380      	movs	r3, #128	@ 0x80
 8001b60:	58d3      	ldr	r3, [r2, r3]
 8001b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	43da      	mvns	r2, r3
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	2380      	movs	r3, #128	@ 0x80
 8001b74:	025b      	lsls	r3, r3, #9
 8001b76:	4013      	ands	r3, r2
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b82:	4909      	ldr	r1, [pc, #36]	@ (8001ba8 <HAL_GPIO_Init+0x2b8>)
 8001b84:	2280      	movs	r2, #128	@ 0x80
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	40da      	lsrs	r2, r3
 8001b98:	1e13      	subs	r3, r2, #0
 8001b9a:	d000      	beq.n	8001b9e <HAL_GPIO_Init+0x2ae>
 8001b9c:	e6b0      	b.n	8001900 <HAL_GPIO_Init+0x10>
  }
}
 8001b9e:	46c0      	nop			@ (mov r8, r8)
 8001ba0:	46c0      	nop			@ (mov r8, r8)
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b006      	add	sp, #24
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021800 	.word	0x40021800
 8001bac:	50000400 	.word	0x50000400
 8001bb0:	50000800 	.word	0x50000800
 8001bb4:	50000c00 	.word	0x50000c00

08001bb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	000a      	movs	r2, r1
 8001bc2:	1cbb      	adds	r3, r7, #2
 8001bc4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	1cba      	adds	r2, r7, #2
 8001bcc:	8812      	ldrh	r2, [r2, #0]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d004      	beq.n	8001bdc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001bd2:	230f      	movs	r3, #15
 8001bd4:	18fb      	adds	r3, r7, r3
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	e003      	b.n	8001be4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bdc:	230f      	movs	r3, #15
 8001bde:	18fb      	adds	r3, r7, r3
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001be4:	230f      	movs	r3, #15
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	781b      	ldrb	r3, [r3, #0]
}
 8001bea:	0018      	movs	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b004      	add	sp, #16
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	0008      	movs	r0, r1
 8001bfc:	0011      	movs	r1, r2
 8001bfe:	1cbb      	adds	r3, r7, #2
 8001c00:	1c02      	adds	r2, r0, #0
 8001c02:	801a      	strh	r2, [r3, #0]
 8001c04:	1c7b      	adds	r3, r7, #1
 8001c06:	1c0a      	adds	r2, r1, #0
 8001c08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c0a:	1c7b      	adds	r3, r7, #1
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d004      	beq.n	8001c1c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c12:	1cbb      	adds	r3, r7, #2
 8001c14:	881a      	ldrh	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c1a:	e003      	b.n	8001c24 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c1c:	1cbb      	adds	r3, r7, #2
 8001c1e:	881a      	ldrh	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c24:	46c0      	nop			@ (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b002      	add	sp, #8
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	000a      	movs	r2, r1
 8001c36:	1cbb      	adds	r3, r7, #2
 8001c38:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c40:	1cbb      	adds	r3, r7, #2
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4013      	ands	r3, r2
 8001c48:	041a      	lsls	r2, r3, #16
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	1cb9      	adds	r1, r7, #2
 8001c50:	8809      	ldrh	r1, [r1, #0]
 8001c52:	400b      	ands	r3, r1
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	619a      	str	r2, [r3, #24]
}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b004      	add	sp, #16
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001c6c:	4b19      	ldr	r3, [pc, #100]	@ (8001cd4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a19      	ldr	r2, [pc, #100]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	0019      	movs	r1, r3
 8001c76:	4b17      	ldr	r3, [pc, #92]	@ (8001cd4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	2380      	movs	r3, #128	@ 0x80
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d11f      	bne.n	8001cc8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001c88:	4b14      	ldr	r3, [pc, #80]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	0013      	movs	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	189b      	adds	r3, r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4912      	ldr	r1, [pc, #72]	@ (8001ce0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001c96:	0018      	movs	r0, r3
 8001c98:	f7fe fa32 	bl	8000100 <__udivsi3>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ca2:	e008      	b.n	8001cb6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	e001      	b.n	8001cb6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e009      	b.n	8001cca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cb6:	4b07      	ldr	r3, [pc, #28]	@ (8001cd4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cb8:	695a      	ldr	r2, [r3, #20]
 8001cba:	2380      	movs	r3, #128	@ 0x80
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	2380      	movs	r3, #128	@ 0x80
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d0ed      	beq.n	8001ca4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	0018      	movs	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b004      	add	sp, #16
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			@ (mov r8, r8)
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	fffff9ff 	.word	0xfffff9ff
 8001cdc:	20000008 	.word	0x20000008
 8001ce0:	000f4240 	.word	0x000f4240

08001ce4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001ce8:	4b03      	ldr	r3, [pc, #12]	@ (8001cf8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	23e0      	movs	r3, #224	@ 0xe0
 8001cee:	01db      	lsls	r3, r3, #7
 8001cf0:	4013      	ands	r3, r2
}
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40021000 	.word	0x40021000

08001cfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e2f3      	b.n	80022f6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2201      	movs	r2, #1
 8001d14:	4013      	ands	r3, r2
 8001d16:	d100      	bne.n	8001d1a <HAL_RCC_OscConfig+0x1e>
 8001d18:	e07c      	b.n	8001e14 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d1a:	4bc3      	ldr	r3, [pc, #780]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2238      	movs	r2, #56	@ 0x38
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d24:	4bc0      	ldr	r3, [pc, #768]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	2203      	movs	r2, #3
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	2b10      	cmp	r3, #16
 8001d32:	d102      	bne.n	8001d3a <HAL_RCC_OscConfig+0x3e>
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d002      	beq.n	8001d40 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	d10b      	bne.n	8001d58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d40:	4bb9      	ldr	r3, [pc, #740]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2380      	movs	r3, #128	@ 0x80
 8001d46:	029b      	lsls	r3, r3, #10
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d062      	beq.n	8001e12 <HAL_RCC_OscConfig+0x116>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d15e      	bne.n	8001e12 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e2ce      	b.n	80022f6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	2380      	movs	r3, #128	@ 0x80
 8001d5e:	025b      	lsls	r3, r3, #9
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d107      	bne.n	8001d74 <HAL_RCC_OscConfig+0x78>
 8001d64:	4bb0      	ldr	r3, [pc, #704]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4baf      	ldr	r3, [pc, #700]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001d6a:	2180      	movs	r1, #128	@ 0x80
 8001d6c:	0249      	lsls	r1, r1, #9
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	e020      	b.n	8001db6 <HAL_RCC_OscConfig+0xba>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	23a0      	movs	r3, #160	@ 0xa0
 8001d7a:	02db      	lsls	r3, r3, #11
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d10e      	bne.n	8001d9e <HAL_RCC_OscConfig+0xa2>
 8001d80:	4ba9      	ldr	r3, [pc, #676]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4ba8      	ldr	r3, [pc, #672]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001d86:	2180      	movs	r1, #128	@ 0x80
 8001d88:	02c9      	lsls	r1, r1, #11
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	4ba6      	ldr	r3, [pc, #664]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	4ba5      	ldr	r3, [pc, #660]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001d94:	2180      	movs	r1, #128	@ 0x80
 8001d96:	0249      	lsls	r1, r1, #9
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	e00b      	b.n	8001db6 <HAL_RCC_OscConfig+0xba>
 8001d9e:	4ba2      	ldr	r3, [pc, #648]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	4ba1      	ldr	r3, [pc, #644]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001da4:	49a1      	ldr	r1, [pc, #644]	@ (800202c <HAL_RCC_OscConfig+0x330>)
 8001da6:	400a      	ands	r2, r1
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	4b9f      	ldr	r3, [pc, #636]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4b9e      	ldr	r3, [pc, #632]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001db0:	499f      	ldr	r1, [pc, #636]	@ (8002030 <HAL_RCC_OscConfig+0x334>)
 8001db2:	400a      	ands	r2, r1
 8001db4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d014      	beq.n	8001de8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	f7ff fa5d 	bl	800127c <HAL_GetTick>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7ff fa58 	bl	800127c <HAL_GetTick>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	@ 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e28d      	b.n	80022f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dda:	4b93      	ldr	r3, [pc, #588]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	2380      	movs	r3, #128	@ 0x80
 8001de0:	029b      	lsls	r3, r3, #10
 8001de2:	4013      	ands	r3, r2
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0xcc>
 8001de6:	e015      	b.n	8001e14 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7ff fa48 	bl	800127c <HAL_GetTick>
 8001dec:	0003      	movs	r3, r0
 8001dee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df2:	f7ff fa43 	bl	800127c <HAL_GetTick>
 8001df6:	0002      	movs	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b64      	cmp	r3, #100	@ 0x64
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e278      	b.n	80022f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e04:	4b88      	ldr	r3, [pc, #544]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	2380      	movs	r3, #128	@ 0x80
 8001e0a:	029b      	lsls	r3, r3, #10
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0xf6>
 8001e10:	e000      	b.n	8001e14 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e12:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2202      	movs	r2, #2
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d100      	bne.n	8001e20 <HAL_RCC_OscConfig+0x124>
 8001e1e:	e099      	b.n	8001f54 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e20:	4b81      	ldr	r3, [pc, #516]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2238      	movs	r2, #56	@ 0x38
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e2a:	4b7f      	ldr	r3, [pc, #508]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2203      	movs	r2, #3
 8001e30:	4013      	ands	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	2b10      	cmp	r3, #16
 8001e38:	d102      	bne.n	8001e40 <HAL_RCC_OscConfig+0x144>
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d002      	beq.n	8001e46 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d135      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e46:	4b78      	ldr	r3, [pc, #480]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	2380      	movs	r3, #128	@ 0x80
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d005      	beq.n	8001e5e <HAL_RCC_OscConfig+0x162>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e24b      	b.n	80022f6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5e:	4b72      	ldr	r3, [pc, #456]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	4a74      	ldr	r2, [pc, #464]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	0019      	movs	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	021a      	lsls	r2, r3, #8
 8001e6e:	4b6e      	ldr	r3, [pc, #440]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001e70:	430a      	orrs	r2, r1
 8001e72:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d112      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e7a:	4b6b      	ldr	r3, [pc, #428]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a6e      	ldr	r2, [pc, #440]	@ (8002038 <HAL_RCC_OscConfig+0x33c>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	0019      	movs	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	4b67      	ldr	r3, [pc, #412]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001e8e:	4b66      	ldr	r3, [pc, #408]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	0adb      	lsrs	r3, r3, #11
 8001e94:	2207      	movs	r2, #7
 8001e96:	4013      	ands	r3, r2
 8001e98:	4a68      	ldr	r2, [pc, #416]	@ (800203c <HAL_RCC_OscConfig+0x340>)
 8001e9a:	40da      	lsrs	r2, r3
 8001e9c:	4b68      	ldr	r3, [pc, #416]	@ (8002040 <HAL_RCC_OscConfig+0x344>)
 8001e9e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ea0:	4b68      	ldr	r3, [pc, #416]	@ (8002044 <HAL_RCC_OscConfig+0x348>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f7ff f98d 	bl	80011c4 <HAL_InitTick>
 8001eaa:	1e03      	subs	r3, r0, #0
 8001eac:	d051      	beq.n	8001f52 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e221      	b.n	80022f6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d030      	beq.n	8001f1c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001eba:	4b5b      	ldr	r3, [pc, #364]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a5e      	ldr	r2, [pc, #376]	@ (8002038 <HAL_RCC_OscConfig+0x33c>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	4b57      	ldr	r3, [pc, #348]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001ece:	4b56      	ldr	r3, [pc, #344]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	4b55      	ldr	r3, [pc, #340]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001ed4:	2180      	movs	r1, #128	@ 0x80
 8001ed6:	0049      	lsls	r1, r1, #1
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7ff f9ce 	bl	800127c <HAL_GetTick>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee6:	f7ff f9c9 	bl	800127c <HAL_GetTick>
 8001eea:	0002      	movs	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e1fe      	b.n	80022f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef8:	4b4b      	ldr	r3, [pc, #300]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	2380      	movs	r3, #128	@ 0x80
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4013      	ands	r3, r2
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f04:	4b48      	ldr	r3, [pc, #288]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4a4a      	ldr	r2, [pc, #296]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	021a      	lsls	r2, r3, #8
 8001f14:	4b44      	ldr	r3, [pc, #272]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001f16:	430a      	orrs	r2, r1
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	e01b      	b.n	8001f54 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001f1c:	4b42      	ldr	r3, [pc, #264]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b41      	ldr	r3, [pc, #260]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001f22:	4949      	ldr	r1, [pc, #292]	@ (8002048 <HAL_RCC_OscConfig+0x34c>)
 8001f24:	400a      	ands	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7ff f9a8 	bl	800127c <HAL_GetTick>
 8001f2c:	0003      	movs	r3, r0
 8001f2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f32:	f7ff f9a3 	bl	800127c <HAL_GetTick>
 8001f36:	0002      	movs	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e1d8      	b.n	80022f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f44:	4b38      	ldr	r3, [pc, #224]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	2380      	movs	r3, #128	@ 0x80
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d1f0      	bne.n	8001f32 <HAL_RCC_OscConfig+0x236>
 8001f50:	e000      	b.n	8001f54 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f52:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2208      	movs	r2, #8
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d047      	beq.n	8001fee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f5e:	4b32      	ldr	r3, [pc, #200]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2238      	movs	r2, #56	@ 0x38
 8001f64:	4013      	ands	r3, r2
 8001f66:	2b18      	cmp	r3, #24
 8001f68:	d10a      	bne.n	8001f80 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f6e:	2202      	movs	r2, #2
 8001f70:	4013      	ands	r3, r2
 8001f72:	d03c      	beq.n	8001fee <HAL_RCC_OscConfig+0x2f2>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d138      	bne.n	8001fee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e1ba      	b.n	80022f6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d019      	beq.n	8001fbc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001f88:	4b27      	ldr	r3, [pc, #156]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001f8a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f8c:	4b26      	ldr	r3, [pc, #152]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001f8e:	2101      	movs	r1, #1
 8001f90:	430a      	orrs	r2, r1
 8001f92:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7ff f972 	bl	800127c <HAL_GetTick>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9e:	f7ff f96d 	bl	800127c <HAL_GetTick>
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e1a2      	b.n	80022f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d0f1      	beq.n	8001f9e <HAL_RCC_OscConfig+0x2a2>
 8001fba:	e018      	b.n	8001fee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001fbe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001fc0:	4b19      	ldr	r3, [pc, #100]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	438a      	bics	r2, r1
 8001fc6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7ff f958 	bl	800127c <HAL_GetTick>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd2:	f7ff f953 	bl	800127c <HAL_GetTick>
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e188      	b.n	80022f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fe4:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8001fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe8:	2202      	movs	r2, #2
 8001fea:	4013      	ands	r3, r2
 8001fec:	d1f1      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d100      	bne.n	8001ffa <HAL_RCC_OscConfig+0x2fe>
 8001ff8:	e0c6      	b.n	8002188 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffa:	231f      	movs	r3, #31
 8001ffc:	18fb      	adds	r3, r7, r3
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002002:	4b09      	ldr	r3, [pc, #36]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2238      	movs	r2, #56	@ 0x38
 8002008:	4013      	ands	r3, r2
 800200a:	2b20      	cmp	r3, #32
 800200c:	d11e      	bne.n	800204c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800200e:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <HAL_RCC_OscConfig+0x32c>)
 8002010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002012:	2202      	movs	r2, #2
 8002014:	4013      	ands	r3, r2
 8002016:	d100      	bne.n	800201a <HAL_RCC_OscConfig+0x31e>
 8002018:	e0b6      	b.n	8002188 <HAL_RCC_OscConfig+0x48c>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d000      	beq.n	8002024 <HAL_RCC_OscConfig+0x328>
 8002022:	e0b1      	b.n	8002188 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e166      	b.n	80022f6 <HAL_RCC_OscConfig+0x5fa>
 8002028:	40021000 	.word	0x40021000
 800202c:	fffeffff 	.word	0xfffeffff
 8002030:	fffbffff 	.word	0xfffbffff
 8002034:	ffff80ff 	.word	0xffff80ff
 8002038:	ffffc7ff 	.word	0xffffc7ff
 800203c:	00f42400 	.word	0x00f42400
 8002040:	20000008 	.word	0x20000008
 8002044:	2000000c 	.word	0x2000000c
 8002048:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800204c:	4bac      	ldr	r3, [pc, #688]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 800204e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002050:	2380      	movs	r3, #128	@ 0x80
 8002052:	055b      	lsls	r3, r3, #21
 8002054:	4013      	ands	r3, r2
 8002056:	d101      	bne.n	800205c <HAL_RCC_OscConfig+0x360>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <HAL_RCC_OscConfig+0x362>
 800205c:	2300      	movs	r3, #0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d011      	beq.n	8002086 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	4ba7      	ldr	r3, [pc, #668]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 8002064:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002066:	4ba6      	ldr	r3, [pc, #664]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	0549      	lsls	r1, r1, #21
 800206c:	430a      	orrs	r2, r1
 800206e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002070:	4ba3      	ldr	r3, [pc, #652]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 8002072:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002074:	2380      	movs	r3, #128	@ 0x80
 8002076:	055b      	lsls	r3, r3, #21
 8002078:	4013      	ands	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800207e:	231f      	movs	r3, #31
 8002080:	18fb      	adds	r3, r7, r3
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002086:	4b9f      	ldr	r3, [pc, #636]	@ (8002304 <HAL_RCC_OscConfig+0x608>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	2380      	movs	r3, #128	@ 0x80
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4013      	ands	r3, r2
 8002090:	d11a      	bne.n	80020c8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002092:	4b9c      	ldr	r3, [pc, #624]	@ (8002304 <HAL_RCC_OscConfig+0x608>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4b9b      	ldr	r3, [pc, #620]	@ (8002304 <HAL_RCC_OscConfig+0x608>)
 8002098:	2180      	movs	r1, #128	@ 0x80
 800209a:	0049      	lsls	r1, r1, #1
 800209c:	430a      	orrs	r2, r1
 800209e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80020a0:	f7ff f8ec 	bl	800127c <HAL_GetTick>
 80020a4:	0003      	movs	r3, r0
 80020a6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020aa:	f7ff f8e7 	bl	800127c <HAL_GetTick>
 80020ae:	0002      	movs	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e11c      	b.n	80022f6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020bc:	4b91      	ldr	r3, [pc, #580]	@ (8002304 <HAL_RCC_OscConfig+0x608>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	2380      	movs	r3, #128	@ 0x80
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4013      	ands	r3, r2
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d106      	bne.n	80020de <HAL_RCC_OscConfig+0x3e2>
 80020d0:	4b8b      	ldr	r3, [pc, #556]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 80020d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020d4:	4b8a      	ldr	r3, [pc, #552]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 80020d6:	2101      	movs	r1, #1
 80020d8:	430a      	orrs	r2, r1
 80020da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020dc:	e01c      	b.n	8002118 <HAL_RCC_OscConfig+0x41c>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b05      	cmp	r3, #5
 80020e4:	d10c      	bne.n	8002100 <HAL_RCC_OscConfig+0x404>
 80020e6:	4b86      	ldr	r3, [pc, #536]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 80020e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020ea:	4b85      	ldr	r3, [pc, #532]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 80020ec:	2104      	movs	r1, #4
 80020ee:	430a      	orrs	r2, r1
 80020f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020f2:	4b83      	ldr	r3, [pc, #524]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 80020f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020f6:	4b82      	ldr	r3, [pc, #520]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 80020f8:	2101      	movs	r1, #1
 80020fa:	430a      	orrs	r2, r1
 80020fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020fe:	e00b      	b.n	8002118 <HAL_RCC_OscConfig+0x41c>
 8002100:	4b7f      	ldr	r3, [pc, #508]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 8002102:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002104:	4b7e      	ldr	r3, [pc, #504]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 8002106:	2101      	movs	r1, #1
 8002108:	438a      	bics	r2, r1
 800210a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800210c:	4b7c      	ldr	r3, [pc, #496]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 800210e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002110:	4b7b      	ldr	r3, [pc, #492]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 8002112:	2104      	movs	r1, #4
 8002114:	438a      	bics	r2, r1
 8002116:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d014      	beq.n	800214a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002120:	f7ff f8ac 	bl	800127c <HAL_GetTick>
 8002124:	0003      	movs	r3, r0
 8002126:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002128:	e009      	b.n	800213e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212a:	f7ff f8a7 	bl	800127c <HAL_GetTick>
 800212e:	0002      	movs	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	4a74      	ldr	r2, [pc, #464]	@ (8002308 <HAL_RCC_OscConfig+0x60c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e0db      	b.n	80022f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800213e:	4b70      	ldr	r3, [pc, #448]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 8002140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002142:	2202      	movs	r2, #2
 8002144:	4013      	ands	r3, r2
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x42e>
 8002148:	e013      	b.n	8002172 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214a:	f7ff f897 	bl	800127c <HAL_GetTick>
 800214e:	0003      	movs	r3, r0
 8002150:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002152:	e009      	b.n	8002168 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002154:	f7ff f892 	bl	800127c <HAL_GetTick>
 8002158:	0002      	movs	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	4a6a      	ldr	r2, [pc, #424]	@ (8002308 <HAL_RCC_OscConfig+0x60c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e0c6      	b.n	80022f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002168:	4b65      	ldr	r3, [pc, #404]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 800216a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800216c:	2202      	movs	r2, #2
 800216e:	4013      	ands	r3, r2
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002172:	231f      	movs	r3, #31
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d105      	bne.n	8002188 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800217c:	4b60      	ldr	r3, [pc, #384]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 800217e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002180:	4b5f      	ldr	r3, [pc, #380]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 8002182:	4962      	ldr	r1, [pc, #392]	@ (800230c <HAL_RCC_OscConfig+0x610>)
 8002184:	400a      	ands	r2, r1
 8002186:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d100      	bne.n	8002192 <HAL_RCC_OscConfig+0x496>
 8002190:	e0b0      	b.n	80022f4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002192:	4b5b      	ldr	r3, [pc, #364]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2238      	movs	r2, #56	@ 0x38
 8002198:	4013      	ands	r3, r2
 800219a:	2b10      	cmp	r3, #16
 800219c:	d100      	bne.n	80021a0 <HAL_RCC_OscConfig+0x4a4>
 800219e:	e078      	b.n	8002292 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d153      	bne.n	8002250 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a8:	4b55      	ldr	r3, [pc, #340]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4b54      	ldr	r3, [pc, #336]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 80021ae:	4958      	ldr	r1, [pc, #352]	@ (8002310 <HAL_RCC_OscConfig+0x614>)
 80021b0:	400a      	ands	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7ff f862 	bl	800127c <HAL_GetTick>
 80021b8:	0003      	movs	r3, r0
 80021ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021be:	f7ff f85d 	bl	800127c <HAL_GetTick>
 80021c2:	0002      	movs	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e092      	b.n	80022f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	2380      	movs	r3, #128	@ 0x80
 80021d6:	049b      	lsls	r3, r3, #18
 80021d8:	4013      	ands	r3, r2
 80021da:	d1f0      	bne.n	80021be <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021dc:	4b48      	ldr	r3, [pc, #288]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002314 <HAL_RCC_OscConfig+0x618>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	0019      	movs	r1, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1a      	ldr	r2, [r3, #32]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fc:	431a      	orrs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	431a      	orrs	r2, r3
 8002204:	4b3e      	ldr	r3, [pc, #248]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 8002206:	430a      	orrs	r2, r1
 8002208:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800220a:	4b3d      	ldr	r3, [pc, #244]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	4b3c      	ldr	r3, [pc, #240]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 8002210:	2180      	movs	r1, #128	@ 0x80
 8002212:	0449      	lsls	r1, r1, #17
 8002214:	430a      	orrs	r2, r1
 8002216:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002218:	4b39      	ldr	r3, [pc, #228]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	4b38      	ldr	r3, [pc, #224]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 800221e:	2180      	movs	r1, #128	@ 0x80
 8002220:	0549      	lsls	r1, r1, #21
 8002222:	430a      	orrs	r2, r1
 8002224:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002226:	f7ff f829 	bl	800127c <HAL_GetTick>
 800222a:	0003      	movs	r3, r0
 800222c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002230:	f7ff f824 	bl	800127c <HAL_GetTick>
 8002234:	0002      	movs	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e059      	b.n	80022f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002242:	4b2f      	ldr	r3, [pc, #188]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	2380      	movs	r3, #128	@ 0x80
 8002248:	049b      	lsls	r3, r3, #18
 800224a:	4013      	ands	r3, r2
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0x534>
 800224e:	e051      	b.n	80022f4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002250:	4b2b      	ldr	r3, [pc, #172]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b2a      	ldr	r3, [pc, #168]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 8002256:	492e      	ldr	r1, [pc, #184]	@ (8002310 <HAL_RCC_OscConfig+0x614>)
 8002258:	400a      	ands	r2, r1
 800225a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7ff f80e 	bl	800127c <HAL_GetTick>
 8002260:	0003      	movs	r3, r0
 8002262:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002266:	f7ff f809 	bl	800127c <HAL_GetTick>
 800226a:	0002      	movs	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e03e      	b.n	80022f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002278:	4b21      	ldr	r3, [pc, #132]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	2380      	movs	r3, #128	@ 0x80
 800227e:	049b      	lsls	r3, r3, #18
 8002280:	4013      	ands	r3, r2
 8002282:	d1f0      	bne.n	8002266 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002284:	4b1e      	ldr	r3, [pc, #120]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	4b1d      	ldr	r3, [pc, #116]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 800228a:	4923      	ldr	r1, [pc, #140]	@ (8002318 <HAL_RCC_OscConfig+0x61c>)
 800228c:	400a      	ands	r2, r1
 800228e:	60da      	str	r2, [r3, #12]
 8002290:	e030      	b.n	80022f4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e02b      	b.n	80022f6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800229e:	4b18      	ldr	r3, [pc, #96]	@ (8002300 <HAL_RCC_OscConfig+0x604>)
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2203      	movs	r2, #3
 80022a8:	401a      	ands	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d11e      	bne.n	80022f0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2270      	movs	r2, #112	@ 0x70
 80022b6:	401a      	ands	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022bc:	429a      	cmp	r2, r3
 80022be:	d117      	bne.n	80022f0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	23fe      	movs	r3, #254	@ 0xfe
 80022c4:	01db      	lsls	r3, r3, #7
 80022c6:	401a      	ands	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022cc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d10e      	bne.n	80022f0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	23f8      	movs	r3, #248	@ 0xf8
 80022d6:	039b      	lsls	r3, r3, #14
 80022d8:	401a      	ands	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022de:	429a      	cmp	r2, r3
 80022e0:	d106      	bne.n	80022f0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	0f5b      	lsrs	r3, r3, #29
 80022e6:	075a      	lsls	r2, r3, #29
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	0018      	movs	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b008      	add	sp, #32
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	46c0      	nop			@ (mov r8, r8)
 8002300:	40021000 	.word	0x40021000
 8002304:	40007000 	.word	0x40007000
 8002308:	00001388 	.word	0x00001388
 800230c:	efffffff 	.word	0xefffffff
 8002310:	feffffff 	.word	0xfeffffff
 8002314:	1fc1808c 	.word	0x1fc1808c
 8002318:	effefffc 	.word	0xeffefffc

0800231c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0e9      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002330:	4b76      	ldr	r3, [pc, #472]	@ (800250c <HAL_RCC_ClockConfig+0x1f0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2207      	movs	r2, #7
 8002336:	4013      	ands	r3, r2
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d91e      	bls.n	800237c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b73      	ldr	r3, [pc, #460]	@ (800250c <HAL_RCC_ClockConfig+0x1f0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2207      	movs	r2, #7
 8002344:	4393      	bics	r3, r2
 8002346:	0019      	movs	r1, r3
 8002348:	4b70      	ldr	r3, [pc, #448]	@ (800250c <HAL_RCC_ClockConfig+0x1f0>)
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002350:	f7fe ff94 	bl	800127c <HAL_GetTick>
 8002354:	0003      	movs	r3, r0
 8002356:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002358:	e009      	b.n	800236e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800235a:	f7fe ff8f 	bl	800127c <HAL_GetTick>
 800235e:	0002      	movs	r2, r0
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	4a6a      	ldr	r2, [pc, #424]	@ (8002510 <HAL_RCC_ClockConfig+0x1f4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d901      	bls.n	800236e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e0ca      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800236e:	4b67      	ldr	r3, [pc, #412]	@ (800250c <HAL_RCC_ClockConfig+0x1f0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2207      	movs	r2, #7
 8002374:	4013      	ands	r3, r2
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d1ee      	bne.n	800235a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2202      	movs	r2, #2
 8002382:	4013      	ands	r3, r2
 8002384:	d015      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2204      	movs	r2, #4
 800238c:	4013      	ands	r3, r2
 800238e:	d006      	beq.n	800239e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002390:	4b60      	ldr	r3, [pc, #384]	@ (8002514 <HAL_RCC_ClockConfig+0x1f8>)
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	4b5f      	ldr	r3, [pc, #380]	@ (8002514 <HAL_RCC_ClockConfig+0x1f8>)
 8002396:	21e0      	movs	r1, #224	@ 0xe0
 8002398:	01c9      	lsls	r1, r1, #7
 800239a:	430a      	orrs	r2, r1
 800239c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800239e:	4b5d      	ldr	r3, [pc, #372]	@ (8002514 <HAL_RCC_ClockConfig+0x1f8>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	4a5d      	ldr	r2, [pc, #372]	@ (8002518 <HAL_RCC_ClockConfig+0x1fc>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	0019      	movs	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	4b59      	ldr	r3, [pc, #356]	@ (8002514 <HAL_RCC_ClockConfig+0x1f8>)
 80023ae:	430a      	orrs	r2, r1
 80023b0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2201      	movs	r2, #1
 80023b8:	4013      	ands	r3, r2
 80023ba:	d057      	beq.n	800246c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d107      	bne.n	80023d4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023c4:	4b53      	ldr	r3, [pc, #332]	@ (8002514 <HAL_RCC_ClockConfig+0x1f8>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	2380      	movs	r3, #128	@ 0x80
 80023ca:	029b      	lsls	r3, r3, #10
 80023cc:	4013      	ands	r3, r2
 80023ce:	d12b      	bne.n	8002428 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e097      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d107      	bne.n	80023ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002514 <HAL_RCC_ClockConfig+0x1f8>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	2380      	movs	r3, #128	@ 0x80
 80023e2:	049b      	lsls	r3, r3, #18
 80023e4:	4013      	ands	r3, r2
 80023e6:	d11f      	bne.n	8002428 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e08b      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d107      	bne.n	8002404 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f4:	4b47      	ldr	r3, [pc, #284]	@ (8002514 <HAL_RCC_ClockConfig+0x1f8>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	2380      	movs	r3, #128	@ 0x80
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4013      	ands	r3, r2
 80023fe:	d113      	bne.n	8002428 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e07f      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d106      	bne.n	800241a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800240c:	4b41      	ldr	r3, [pc, #260]	@ (8002514 <HAL_RCC_ClockConfig+0x1f8>)
 800240e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002410:	2202      	movs	r2, #2
 8002412:	4013      	ands	r3, r2
 8002414:	d108      	bne.n	8002428 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e074      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800241a:	4b3e      	ldr	r3, [pc, #248]	@ (8002514 <HAL_RCC_ClockConfig+0x1f8>)
 800241c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241e:	2202      	movs	r2, #2
 8002420:	4013      	ands	r3, r2
 8002422:	d101      	bne.n	8002428 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e06d      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002428:	4b3a      	ldr	r3, [pc, #232]	@ (8002514 <HAL_RCC_ClockConfig+0x1f8>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2207      	movs	r2, #7
 800242e:	4393      	bics	r3, r2
 8002430:	0019      	movs	r1, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	4b37      	ldr	r3, [pc, #220]	@ (8002514 <HAL_RCC_ClockConfig+0x1f8>)
 8002438:	430a      	orrs	r2, r1
 800243a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800243c:	f7fe ff1e 	bl	800127c <HAL_GetTick>
 8002440:	0003      	movs	r3, r0
 8002442:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002444:	e009      	b.n	800245a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002446:	f7fe ff19 	bl	800127c <HAL_GetTick>
 800244a:	0002      	movs	r2, r0
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	4a2f      	ldr	r2, [pc, #188]	@ (8002510 <HAL_RCC_ClockConfig+0x1f4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e054      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	4b2e      	ldr	r3, [pc, #184]	@ (8002514 <HAL_RCC_ClockConfig+0x1f8>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2238      	movs	r2, #56	@ 0x38
 8002460:	401a      	ands	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	429a      	cmp	r2, r3
 800246a:	d1ec      	bne.n	8002446 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800246c:	4b27      	ldr	r3, [pc, #156]	@ (800250c <HAL_RCC_ClockConfig+0x1f0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2207      	movs	r2, #7
 8002472:	4013      	ands	r3, r2
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d21e      	bcs.n	80024b8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b24      	ldr	r3, [pc, #144]	@ (800250c <HAL_RCC_ClockConfig+0x1f0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2207      	movs	r2, #7
 8002480:	4393      	bics	r3, r2
 8002482:	0019      	movs	r1, r3
 8002484:	4b21      	ldr	r3, [pc, #132]	@ (800250c <HAL_RCC_ClockConfig+0x1f0>)
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800248c:	f7fe fef6 	bl	800127c <HAL_GetTick>
 8002490:	0003      	movs	r3, r0
 8002492:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002494:	e009      	b.n	80024aa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002496:	f7fe fef1 	bl	800127c <HAL_GetTick>
 800249a:	0002      	movs	r2, r0
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002510 <HAL_RCC_ClockConfig+0x1f4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e02c      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024aa:	4b18      	ldr	r3, [pc, #96]	@ (800250c <HAL_RCC_ClockConfig+0x1f0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2207      	movs	r2, #7
 80024b0:	4013      	ands	r3, r2
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d1ee      	bne.n	8002496 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2204      	movs	r2, #4
 80024be:	4013      	ands	r3, r2
 80024c0:	d009      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024c2:	4b14      	ldr	r3, [pc, #80]	@ (8002514 <HAL_RCC_ClockConfig+0x1f8>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	4a15      	ldr	r2, [pc, #84]	@ (800251c <HAL_RCC_ClockConfig+0x200>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	0019      	movs	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	4b10      	ldr	r3, [pc, #64]	@ (8002514 <HAL_RCC_ClockConfig+0x1f8>)
 80024d2:	430a      	orrs	r2, r1
 80024d4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80024d6:	f000 f829 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80024da:	0001      	movs	r1, r0
 80024dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002514 <HAL_RCC_ClockConfig+0x1f8>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	220f      	movs	r2, #15
 80024e4:	401a      	ands	r2, r3
 80024e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002520 <HAL_RCC_ClockConfig+0x204>)
 80024e8:	0092      	lsls	r2, r2, #2
 80024ea:	58d3      	ldr	r3, [r2, r3]
 80024ec:	221f      	movs	r2, #31
 80024ee:	4013      	ands	r3, r2
 80024f0:	000a      	movs	r2, r1
 80024f2:	40da      	lsrs	r2, r3
 80024f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002524 <HAL_RCC_ClockConfig+0x208>)
 80024f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <HAL_RCC_ClockConfig+0x20c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	0018      	movs	r0, r3
 80024fe:	f7fe fe61 	bl	80011c4 <HAL_InitTick>
 8002502:	0003      	movs	r3, r0
}
 8002504:	0018      	movs	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	b004      	add	sp, #16
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40022000 	.word	0x40022000
 8002510:	00001388 	.word	0x00001388
 8002514:	40021000 	.word	0x40021000
 8002518:	fffff0ff 	.word	0xfffff0ff
 800251c:	ffff8fff 	.word	0xffff8fff
 8002520:	08004d04 	.word	0x08004d04
 8002524:	20000008 	.word	0x20000008
 8002528:	2000000c 	.word	0x2000000c

0800252c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002532:	4b3c      	ldr	r3, [pc, #240]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2238      	movs	r2, #56	@ 0x38
 8002538:	4013      	ands	r3, r2
 800253a:	d10f      	bne.n	800255c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800253c:	4b39      	ldr	r3, [pc, #228]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xf8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	0adb      	lsrs	r3, r3, #11
 8002542:	2207      	movs	r2, #7
 8002544:	4013      	ands	r3, r2
 8002546:	2201      	movs	r2, #1
 8002548:	409a      	lsls	r2, r3
 800254a:	0013      	movs	r3, r2
 800254c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800254e:	6839      	ldr	r1, [r7, #0]
 8002550:	4835      	ldr	r0, [pc, #212]	@ (8002628 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002552:	f7fd fdd5 	bl	8000100 <__udivsi3>
 8002556:	0003      	movs	r3, r0
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	e05d      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800255c:	4b31      	ldr	r3, [pc, #196]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xf8>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	2238      	movs	r2, #56	@ 0x38
 8002562:	4013      	ands	r3, r2
 8002564:	2b08      	cmp	r3, #8
 8002566:	d102      	bne.n	800256e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002568:	4b2f      	ldr	r3, [pc, #188]	@ (8002628 <HAL_RCC_GetSysClockFreq+0xfc>)
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	e054      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800256e:	4b2d      	ldr	r3, [pc, #180]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2238      	movs	r2, #56	@ 0x38
 8002574:	4013      	ands	r3, r2
 8002576:	2b10      	cmp	r3, #16
 8002578:	d138      	bne.n	80025ec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800257a:	4b2a      	ldr	r3, [pc, #168]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xf8>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2203      	movs	r2, #3
 8002580:	4013      	ands	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002584:	4b27      	ldr	r3, [pc, #156]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	2207      	movs	r2, #7
 800258c:	4013      	ands	r3, r2
 800258e:	3301      	adds	r3, #1
 8002590:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2b03      	cmp	r3, #3
 8002596:	d10d      	bne.n	80025b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	4823      	ldr	r0, [pc, #140]	@ (8002628 <HAL_RCC_GetSysClockFreq+0xfc>)
 800259c:	f7fd fdb0 	bl	8000100 <__udivsi3>
 80025a0:	0003      	movs	r3, r0
 80025a2:	0019      	movs	r1, r3
 80025a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	0a1b      	lsrs	r3, r3, #8
 80025aa:	227f      	movs	r2, #127	@ 0x7f
 80025ac:	4013      	ands	r3, r2
 80025ae:	434b      	muls	r3, r1
 80025b0:	617b      	str	r3, [r7, #20]
        break;
 80025b2:	e00d      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	481c      	ldr	r0, [pc, #112]	@ (8002628 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025b8:	f7fd fda2 	bl	8000100 <__udivsi3>
 80025bc:	0003      	movs	r3, r0
 80025be:	0019      	movs	r1, r3
 80025c0:	4b18      	ldr	r3, [pc, #96]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	227f      	movs	r2, #127	@ 0x7f
 80025c8:	4013      	ands	r3, r2
 80025ca:	434b      	muls	r3, r1
 80025cc:	617b      	str	r3, [r7, #20]
        break;
 80025ce:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80025d0:	4b14      	ldr	r3, [pc, #80]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	0f5b      	lsrs	r3, r3, #29
 80025d6:	2207      	movs	r2, #7
 80025d8:	4013      	ands	r3, r2
 80025da:	3301      	adds	r3, #1
 80025dc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	6978      	ldr	r0, [r7, #20]
 80025e2:	f7fd fd8d 	bl	8000100 <__udivsi3>
 80025e6:	0003      	movs	r3, r0
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	e015      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80025ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2238      	movs	r2, #56	@ 0x38
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d103      	bne.n	8002600 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80025f8:	2380      	movs	r3, #128	@ 0x80
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	e00b      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002600:	4b08      	ldr	r3, [pc, #32]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2238      	movs	r2, #56	@ 0x38
 8002606:	4013      	ands	r3, r2
 8002608:	2b18      	cmp	r3, #24
 800260a:	d103      	bne.n	8002614 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800260c:	23fa      	movs	r3, #250	@ 0xfa
 800260e:	01db      	lsls	r3, r3, #7
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	e001      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002618:	693b      	ldr	r3, [r7, #16]
}
 800261a:	0018      	movs	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	b006      	add	sp, #24
 8002620:	bd80      	pop	{r7, pc}
 8002622:	46c0      	nop			@ (mov r8, r8)
 8002624:	40021000 	.word	0x40021000
 8002628:	00f42400 	.word	0x00f42400

0800262c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002630:	4b02      	ldr	r3, [pc, #8]	@ (800263c <HAL_RCC_GetHCLKFreq+0x10>)
 8002632:	681b      	ldr	r3, [r3, #0]
}
 8002634:	0018      	movs	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	46c0      	nop			@ (mov r8, r8)
 800263c:	20000008 	.word	0x20000008

08002640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002640:	b5b0      	push	{r4, r5, r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002644:	f7ff fff2 	bl	800262c <HAL_RCC_GetHCLKFreq>
 8002648:	0004      	movs	r4, r0
 800264a:	f7ff fb4b 	bl	8001ce4 <LL_RCC_GetAPB1Prescaler>
 800264e:	0003      	movs	r3, r0
 8002650:	0b1a      	lsrs	r2, r3, #12
 8002652:	4b05      	ldr	r3, [pc, #20]	@ (8002668 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002654:	0092      	lsls	r2, r2, #2
 8002656:	58d3      	ldr	r3, [r2, r3]
 8002658:	221f      	movs	r2, #31
 800265a:	4013      	ands	r3, r2
 800265c:	40dc      	lsrs	r4, r3
 800265e:	0023      	movs	r3, r4
}
 8002660:	0018      	movs	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	bdb0      	pop	{r4, r5, r7, pc}
 8002666:	46c0      	nop			@ (mov r8, r8)
 8002668:	08004d44 	.word	0x08004d44

0800266c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002674:	2313      	movs	r3, #19
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800267c:	2312      	movs	r3, #18
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	2380      	movs	r3, #128	@ 0x80
 800268a:	029b      	lsls	r3, r3, #10
 800268c:	4013      	ands	r3, r2
 800268e:	d100      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002690:	e0a3      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002692:	2011      	movs	r0, #17
 8002694:	183b      	adds	r3, r7, r0
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269a:	4b7f      	ldr	r3, [pc, #508]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800269c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800269e:	2380      	movs	r3, #128	@ 0x80
 80026a0:	055b      	lsls	r3, r3, #21
 80026a2:	4013      	ands	r3, r2
 80026a4:	d110      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a6:	4b7c      	ldr	r3, [pc, #496]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026aa:	4b7b      	ldr	r3, [pc, #492]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026ac:	2180      	movs	r1, #128	@ 0x80
 80026ae:	0549      	lsls	r1, r1, #21
 80026b0:	430a      	orrs	r2, r1
 80026b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026b4:	4b78      	ldr	r3, [pc, #480]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026b8:	2380      	movs	r3, #128	@ 0x80
 80026ba:	055b      	lsls	r3, r3, #21
 80026bc:	4013      	ands	r3, r2
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c2:	183b      	adds	r3, r7, r0
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026c8:	4b74      	ldr	r3, [pc, #464]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b73      	ldr	r3, [pc, #460]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026ce:	2180      	movs	r1, #128	@ 0x80
 80026d0:	0049      	lsls	r1, r1, #1
 80026d2:	430a      	orrs	r2, r1
 80026d4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026d6:	f7fe fdd1 	bl	800127c <HAL_GetTick>
 80026da:	0003      	movs	r3, r0
 80026dc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026de:	e00b      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e0:	f7fe fdcc 	bl	800127c <HAL_GetTick>
 80026e4:	0002      	movs	r2, r0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d904      	bls.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80026ee:	2313      	movs	r3, #19
 80026f0:	18fb      	adds	r3, r7, r3
 80026f2:	2203      	movs	r2, #3
 80026f4:	701a      	strb	r2, [r3, #0]
        break;
 80026f6:	e005      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026f8:	4b68      	ldr	r3, [pc, #416]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	2380      	movs	r3, #128	@ 0x80
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4013      	ands	r3, r2
 8002702:	d0ed      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002704:	2313      	movs	r3, #19
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d154      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800270e:	4b62      	ldr	r3, [pc, #392]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002710:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002712:	23c0      	movs	r3, #192	@ 0xc0
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4013      	ands	r3, r2
 8002718:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d019      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	429a      	cmp	r2, r3
 8002728:	d014      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800272a:	4b5b      	ldr	r3, [pc, #364]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800272c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800272e:	4a5c      	ldr	r2, [pc, #368]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002730:	4013      	ands	r3, r2
 8002732:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002734:	4b58      	ldr	r3, [pc, #352]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002736:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002738:	4b57      	ldr	r3, [pc, #348]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800273a:	2180      	movs	r1, #128	@ 0x80
 800273c:	0249      	lsls	r1, r1, #9
 800273e:	430a      	orrs	r2, r1
 8002740:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002742:	4b55      	ldr	r3, [pc, #340]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002744:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002746:	4b54      	ldr	r3, [pc, #336]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002748:	4956      	ldr	r1, [pc, #344]	@ (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800274a:	400a      	ands	r2, r1
 800274c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800274e:	4b52      	ldr	r3, [pc, #328]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	2201      	movs	r2, #1
 8002758:	4013      	ands	r3, r2
 800275a:	d016      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7fe fd8e 	bl	800127c <HAL_GetTick>
 8002760:	0003      	movs	r3, r0
 8002762:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002764:	e00c      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002766:	f7fe fd89 	bl	800127c <HAL_GetTick>
 800276a:	0002      	movs	r2, r0
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	4a4d      	ldr	r2, [pc, #308]	@ (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d904      	bls.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002776:	2313      	movs	r3, #19
 8002778:	18fb      	adds	r3, r7, r3
 800277a:	2203      	movs	r2, #3
 800277c:	701a      	strb	r2, [r3, #0]
            break;
 800277e:	e004      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002780:	4b45      	ldr	r3, [pc, #276]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002784:	2202      	movs	r2, #2
 8002786:	4013      	ands	r3, r2
 8002788:	d0ed      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800278a:	2313      	movs	r3, #19
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10a      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002794:	4b40      	ldr	r3, [pc, #256]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002798:	4a41      	ldr	r2, [pc, #260]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800279a:	4013      	ands	r3, r2
 800279c:	0019      	movs	r1, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027a4:	430a      	orrs	r2, r1
 80027a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027a8:	e00c      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027aa:	2312      	movs	r3, #18
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	2213      	movs	r2, #19
 80027b0:	18ba      	adds	r2, r7, r2
 80027b2:	7812      	ldrb	r2, [r2, #0]
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	e005      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b8:	2312      	movs	r3, #18
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	2213      	movs	r2, #19
 80027be:	18ba      	adds	r2, r7, r2
 80027c0:	7812      	ldrb	r2, [r2, #0]
 80027c2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027c4:	2311      	movs	r3, #17
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d105      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ce:	4b32      	ldr	r3, [pc, #200]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027d2:	4b31      	ldr	r3, [pc, #196]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027d4:	4935      	ldr	r1, [pc, #212]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027d6:	400a      	ands	r2, r1
 80027d8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2201      	movs	r2, #1
 80027e0:	4013      	ands	r3, r2
 80027e2:	d009      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e8:	2203      	movs	r2, #3
 80027ea:	4393      	bics	r3, r2
 80027ec:	0019      	movs	r1, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	4b29      	ldr	r3, [pc, #164]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027f4:	430a      	orrs	r2, r1
 80027f6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2220      	movs	r2, #32
 80027fe:	4013      	ands	r3, r2
 8002800:	d009      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002802:	4b25      	ldr	r3, [pc, #148]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002806:	4a2a      	ldr	r2, [pc, #168]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002808:	4013      	ands	r3, r2
 800280a:	0019      	movs	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	4b21      	ldr	r3, [pc, #132]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002812:	430a      	orrs	r2, r1
 8002814:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	2380      	movs	r3, #128	@ 0x80
 800281c:	01db      	lsls	r3, r3, #7
 800281e:	4013      	ands	r3, r2
 8002820:	d015      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002822:	4b1d      	ldr	r3, [pc, #116]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	0899      	lsrs	r1, r3, #2
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	4b1a      	ldr	r3, [pc, #104]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002830:	430a      	orrs	r2, r1
 8002832:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	2380      	movs	r3, #128	@ 0x80
 800283a:	05db      	lsls	r3, r3, #23
 800283c:	429a      	cmp	r2, r3
 800283e:	d106      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002840:	4b15      	ldr	r3, [pc, #84]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	4b14      	ldr	r3, [pc, #80]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002846:	2180      	movs	r1, #128	@ 0x80
 8002848:	0249      	lsls	r1, r1, #9
 800284a:	430a      	orrs	r2, r1
 800284c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	2380      	movs	r3, #128	@ 0x80
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	4013      	ands	r3, r2
 8002858:	d016      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800285a:	4b0f      	ldr	r3, [pc, #60]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800285c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285e:	4a15      	ldr	r2, [pc, #84]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002860:	4013      	ands	r3, r2
 8002862:	0019      	movs	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	4b0b      	ldr	r3, [pc, #44]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800286a:	430a      	orrs	r2, r1
 800286c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	2380      	movs	r3, #128	@ 0x80
 8002874:	01db      	lsls	r3, r3, #7
 8002876:	429a      	cmp	r2, r3
 8002878:	d106      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800287a:	4b07      	ldr	r3, [pc, #28]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002880:	2180      	movs	r1, #128	@ 0x80
 8002882:	0249      	lsls	r1, r1, #9
 8002884:	430a      	orrs	r2, r1
 8002886:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002888:	2312      	movs	r3, #18
 800288a:	18fb      	adds	r3, r7, r3
 800288c:	781b      	ldrb	r3, [r3, #0]
}
 800288e:	0018      	movs	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	b006      	add	sp, #24
 8002894:	bd80      	pop	{r7, pc}
 8002896:	46c0      	nop			@ (mov r8, r8)
 8002898:	40021000 	.word	0x40021000
 800289c:	40007000 	.word	0x40007000
 80028a0:	fffffcff 	.word	0xfffffcff
 80028a4:	fffeffff 	.word	0xfffeffff
 80028a8:	00001388 	.word	0x00001388
 80028ac:	efffffff 	.word	0xefffffff
 80028b0:	ffffcfff 	.word	0xffffcfff
 80028b4:	ffff3fff 	.word	0xffff3fff

080028b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e04a      	b.n	8002960 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	223d      	movs	r2, #61	@ 0x3d
 80028ce:	5c9b      	ldrb	r3, [r3, r2]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d107      	bne.n	80028e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	223c      	movs	r2, #60	@ 0x3c
 80028da:	2100      	movs	r1, #0
 80028dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	0018      	movs	r0, r3
 80028e2:	f7fe fa4b 	bl	8000d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	223d      	movs	r2, #61	@ 0x3d
 80028ea:	2102      	movs	r1, #2
 80028ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3304      	adds	r3, #4
 80028f6:	0019      	movs	r1, r3
 80028f8:	0010      	movs	r0, r2
 80028fa:	f000 fcb9 	bl	8003270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2248      	movs	r2, #72	@ 0x48
 8002902:	2101      	movs	r1, #1
 8002904:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	223e      	movs	r2, #62	@ 0x3e
 800290a:	2101      	movs	r1, #1
 800290c:	5499      	strb	r1, [r3, r2]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	223f      	movs	r2, #63	@ 0x3f
 8002912:	2101      	movs	r1, #1
 8002914:	5499      	strb	r1, [r3, r2]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2240      	movs	r2, #64	@ 0x40
 800291a:	2101      	movs	r1, #1
 800291c:	5499      	strb	r1, [r3, r2]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2241      	movs	r2, #65	@ 0x41
 8002922:	2101      	movs	r1, #1
 8002924:	5499      	strb	r1, [r3, r2]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2242      	movs	r2, #66	@ 0x42
 800292a:	2101      	movs	r1, #1
 800292c:	5499      	strb	r1, [r3, r2]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2243      	movs	r2, #67	@ 0x43
 8002932:	2101      	movs	r1, #1
 8002934:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2244      	movs	r2, #68	@ 0x44
 800293a:	2101      	movs	r1, #1
 800293c:	5499      	strb	r1, [r3, r2]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2245      	movs	r2, #69	@ 0x45
 8002942:	2101      	movs	r1, #1
 8002944:	5499      	strb	r1, [r3, r2]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2246      	movs	r2, #70	@ 0x46
 800294a:	2101      	movs	r1, #1
 800294c:	5499      	strb	r1, [r3, r2]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2247      	movs	r2, #71	@ 0x47
 8002952:	2101      	movs	r1, #1
 8002954:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	223d      	movs	r2, #61	@ 0x3d
 800295a:	2101      	movs	r1, #1
 800295c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	0018      	movs	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	b002      	add	sp, #8
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	223d      	movs	r2, #61	@ 0x3d
 8002974:	5c9b      	ldrb	r3, [r3, r2]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b01      	cmp	r3, #1
 800297a:	d001      	beq.n	8002980 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e037      	b.n	80029f0 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	223d      	movs	r2, #61	@ 0x3d
 8002984:	2102      	movs	r1, #2
 8002986:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2101      	movs	r1, #1
 8002994:	430a      	orrs	r2, r1
 8002996:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a16      	ldr	r2, [pc, #88]	@ (80029f8 <HAL_TIM_Base_Start_IT+0x90>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d004      	beq.n	80029ac <HAL_TIM_Base_Start_IT+0x44>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a15      	ldr	r2, [pc, #84]	@ (80029fc <HAL_TIM_Base_Start_IT+0x94>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d116      	bne.n	80029da <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	4a13      	ldr	r2, [pc, #76]	@ (8002a00 <HAL_TIM_Base_Start_IT+0x98>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2b06      	cmp	r3, #6
 80029bc:	d016      	beq.n	80029ec <HAL_TIM_Base_Start_IT+0x84>
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	2380      	movs	r3, #128	@ 0x80
 80029c2:	025b      	lsls	r3, r3, #9
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d011      	beq.n	80029ec <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2101      	movs	r1, #1
 80029d4:	430a      	orrs	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d8:	e008      	b.n	80029ec <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2101      	movs	r1, #1
 80029e6:	430a      	orrs	r2, r1
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	e000      	b.n	80029ee <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ec:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	0018      	movs	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b004      	add	sp, #16
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40012c00 	.word	0x40012c00
 80029fc:	40000400 	.word	0x40000400
 8002a00:	00010007 	.word	0x00010007

08002a04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e04a      	b.n	8002aac <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	223d      	movs	r2, #61	@ 0x3d
 8002a1a:	5c9b      	ldrb	r3, [r3, r2]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d107      	bne.n	8002a32 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	223c      	movs	r2, #60	@ 0x3c
 8002a26:	2100      	movs	r1, #0
 8002a28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f000 f841 	bl	8002ab4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	223d      	movs	r2, #61	@ 0x3d
 8002a36:	2102      	movs	r1, #2
 8002a38:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3304      	adds	r3, #4
 8002a42:	0019      	movs	r1, r3
 8002a44:	0010      	movs	r0, r2
 8002a46:	f000 fc13 	bl	8003270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2248      	movs	r2, #72	@ 0x48
 8002a4e:	2101      	movs	r1, #1
 8002a50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	223e      	movs	r2, #62	@ 0x3e
 8002a56:	2101      	movs	r1, #1
 8002a58:	5499      	strb	r1, [r3, r2]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	223f      	movs	r2, #63	@ 0x3f
 8002a5e:	2101      	movs	r1, #1
 8002a60:	5499      	strb	r1, [r3, r2]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2240      	movs	r2, #64	@ 0x40
 8002a66:	2101      	movs	r1, #1
 8002a68:	5499      	strb	r1, [r3, r2]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2241      	movs	r2, #65	@ 0x41
 8002a6e:	2101      	movs	r1, #1
 8002a70:	5499      	strb	r1, [r3, r2]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2242      	movs	r2, #66	@ 0x42
 8002a76:	2101      	movs	r1, #1
 8002a78:	5499      	strb	r1, [r3, r2]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2243      	movs	r2, #67	@ 0x43
 8002a7e:	2101      	movs	r1, #1
 8002a80:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2244      	movs	r2, #68	@ 0x44
 8002a86:	2101      	movs	r1, #1
 8002a88:	5499      	strb	r1, [r3, r2]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2245      	movs	r2, #69	@ 0x45
 8002a8e:	2101      	movs	r1, #1
 8002a90:	5499      	strb	r1, [r3, r2]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2246      	movs	r2, #70	@ 0x46
 8002a96:	2101      	movs	r1, #1
 8002a98:	5499      	strb	r1, [r3, r2]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2247      	movs	r2, #71	@ 0x47
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	223d      	movs	r2, #61	@ 0x3d
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	0018      	movs	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b002      	add	sp, #8
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002abc:	46c0      	nop			@ (mov r8, r8)
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b002      	add	sp, #8
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d108      	bne.n	8002ae6 <HAL_TIM_PWM_Start+0x22>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	223e      	movs	r2, #62	@ 0x3e
 8002ad8:	5c9b      	ldrb	r3, [r3, r2]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	3b01      	subs	r3, #1
 8002ade:	1e5a      	subs	r2, r3, #1
 8002ae0:	4193      	sbcs	r3, r2
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	e037      	b.n	8002b56 <HAL_TIM_PWM_Start+0x92>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d108      	bne.n	8002afe <HAL_TIM_PWM_Start+0x3a>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	223f      	movs	r2, #63	@ 0x3f
 8002af0:	5c9b      	ldrb	r3, [r3, r2]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	1e5a      	subs	r2, r3, #1
 8002af8:	4193      	sbcs	r3, r2
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	e02b      	b.n	8002b56 <HAL_TIM_PWM_Start+0x92>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d108      	bne.n	8002b16 <HAL_TIM_PWM_Start+0x52>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2240      	movs	r2, #64	@ 0x40
 8002b08:	5c9b      	ldrb	r3, [r3, r2]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	1e5a      	subs	r2, r3, #1
 8002b10:	4193      	sbcs	r3, r2
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	e01f      	b.n	8002b56 <HAL_TIM_PWM_Start+0x92>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b0c      	cmp	r3, #12
 8002b1a:	d108      	bne.n	8002b2e <HAL_TIM_PWM_Start+0x6a>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2241      	movs	r2, #65	@ 0x41
 8002b20:	5c9b      	ldrb	r3, [r3, r2]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	1e5a      	subs	r2, r3, #1
 8002b28:	4193      	sbcs	r3, r2
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	e013      	b.n	8002b56 <HAL_TIM_PWM_Start+0x92>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b10      	cmp	r3, #16
 8002b32:	d108      	bne.n	8002b46 <HAL_TIM_PWM_Start+0x82>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2242      	movs	r2, #66	@ 0x42
 8002b38:	5c9b      	ldrb	r3, [r3, r2]
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	1e5a      	subs	r2, r3, #1
 8002b40:	4193      	sbcs	r3, r2
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	e007      	b.n	8002b56 <HAL_TIM_PWM_Start+0x92>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2243      	movs	r2, #67	@ 0x43
 8002b4a:	5c9b      	ldrb	r3, [r3, r2]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	1e5a      	subs	r2, r3, #1
 8002b52:	4193      	sbcs	r3, r2
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e07b      	b.n	8002c56 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d104      	bne.n	8002b6e <HAL_TIM_PWM_Start+0xaa>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	223e      	movs	r2, #62	@ 0x3e
 8002b68:	2102      	movs	r1, #2
 8002b6a:	5499      	strb	r1, [r3, r2]
 8002b6c:	e023      	b.n	8002bb6 <HAL_TIM_PWM_Start+0xf2>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d104      	bne.n	8002b7e <HAL_TIM_PWM_Start+0xba>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	223f      	movs	r2, #63	@ 0x3f
 8002b78:	2102      	movs	r1, #2
 8002b7a:	5499      	strb	r1, [r3, r2]
 8002b7c:	e01b      	b.n	8002bb6 <HAL_TIM_PWM_Start+0xf2>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d104      	bne.n	8002b8e <HAL_TIM_PWM_Start+0xca>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2240      	movs	r2, #64	@ 0x40
 8002b88:	2102      	movs	r1, #2
 8002b8a:	5499      	strb	r1, [r3, r2]
 8002b8c:	e013      	b.n	8002bb6 <HAL_TIM_PWM_Start+0xf2>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b0c      	cmp	r3, #12
 8002b92:	d104      	bne.n	8002b9e <HAL_TIM_PWM_Start+0xda>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2241      	movs	r2, #65	@ 0x41
 8002b98:	2102      	movs	r1, #2
 8002b9a:	5499      	strb	r1, [r3, r2]
 8002b9c:	e00b      	b.n	8002bb6 <HAL_TIM_PWM_Start+0xf2>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b10      	cmp	r3, #16
 8002ba2:	d104      	bne.n	8002bae <HAL_TIM_PWM_Start+0xea>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2242      	movs	r2, #66	@ 0x42
 8002ba8:	2102      	movs	r1, #2
 8002baa:	5499      	strb	r1, [r3, r2]
 8002bac:	e003      	b.n	8002bb6 <HAL_TIM_PWM_Start+0xf2>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2243      	movs	r2, #67	@ 0x43
 8002bb2:	2102      	movs	r1, #2
 8002bb4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6839      	ldr	r1, [r7, #0]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f000 ff08 	bl	80039d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a25      	ldr	r2, [pc, #148]	@ (8002c60 <HAL_TIM_PWM_Start+0x19c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d009      	beq.n	8002be2 <HAL_TIM_PWM_Start+0x11e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a24      	ldr	r2, [pc, #144]	@ (8002c64 <HAL_TIM_PWM_Start+0x1a0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d004      	beq.n	8002be2 <HAL_TIM_PWM_Start+0x11e>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a22      	ldr	r2, [pc, #136]	@ (8002c68 <HAL_TIM_PWM_Start+0x1a4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d101      	bne.n	8002be6 <HAL_TIM_PWM_Start+0x122>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <HAL_TIM_PWM_Start+0x124>
 8002be6:	2300      	movs	r3, #0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2180      	movs	r1, #128	@ 0x80
 8002bf8:	0209      	lsls	r1, r1, #8
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a17      	ldr	r2, [pc, #92]	@ (8002c60 <HAL_TIM_PWM_Start+0x19c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d004      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x14e>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a17      	ldr	r2, [pc, #92]	@ (8002c6c <HAL_TIM_PWM_Start+0x1a8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d116      	bne.n	8002c40 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	4a15      	ldr	r2, [pc, #84]	@ (8002c70 <HAL_TIM_PWM_Start+0x1ac>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b06      	cmp	r3, #6
 8002c22:	d016      	beq.n	8002c52 <HAL_TIM_PWM_Start+0x18e>
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	2380      	movs	r3, #128	@ 0x80
 8002c28:	025b      	lsls	r3, r3, #9
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d011      	beq.n	8002c52 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2101      	movs	r1, #1
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c3e:	e008      	b.n	8002c52 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	e000      	b.n	8002c54 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c52:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	0018      	movs	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b004      	add	sp, #16
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	46c0      	nop			@ (mov r8, r8)
 8002c60:	40012c00 	.word	0x40012c00
 8002c64:	40014400 	.word	0x40014400
 8002c68:	40014800 	.word	0x40014800
 8002c6c:	40000400 	.word	0x40000400
 8002c70:	00010007 	.word	0x00010007

08002c74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	4013      	ands	r3, r2
 8002c92:	d021      	beq.n	8002cd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2202      	movs	r2, #2
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d01d      	beq.n	8002cd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	4252      	negs	r2, r2
 8002ca4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d004      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f000 fac0 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 8002cc0:	e007      	b.n	8002cd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f000 fab3 	bl	8003230 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f000 fabf 	bl	8003250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2204      	movs	r2, #4
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d022      	beq.n	8002d26 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d01e      	beq.n	8002d26 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2205      	movs	r2, #5
 8002cee:	4252      	negs	r2, r2
 8002cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	23c0      	movs	r3, #192	@ 0xc0
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4013      	ands	r3, r2
 8002d04:	d004      	beq.n	8002d10 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f000 fa99 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 8002d0e:	e007      	b.n	8002d20 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	0018      	movs	r0, r3
 8002d14:	f000 fa8c 	bl	8003230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f000 fa98 	bl	8003250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2208      	movs	r2, #8
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d021      	beq.n	8002d72 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2208      	movs	r2, #8
 8002d32:	4013      	ands	r3, r2
 8002d34:	d01d      	beq.n	8002d72 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2209      	movs	r2, #9
 8002d3c:	4252      	negs	r2, r2
 8002d3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2204      	movs	r2, #4
 8002d44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d004      	beq.n	8002d5c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	0018      	movs	r0, r3
 8002d56:	f000 fa73 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 8002d5a:	e007      	b.n	8002d6c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f000 fa66 	bl	8003230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	0018      	movs	r0, r3
 8002d68:	f000 fa72 	bl	8003250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2210      	movs	r2, #16
 8002d76:	4013      	ands	r3, r2
 8002d78:	d022      	beq.n	8002dc0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2210      	movs	r2, #16
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d01e      	beq.n	8002dc0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2211      	movs	r2, #17
 8002d88:	4252      	negs	r2, r2
 8002d8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2208      	movs	r2, #8
 8002d90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69da      	ldr	r2, [r3, #28]
 8002d98:	23c0      	movs	r3, #192	@ 0xc0
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d004      	beq.n	8002daa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	0018      	movs	r0, r3
 8002da4:	f000 fa4c 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 8002da8:	e007      	b.n	8002dba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	0018      	movs	r0, r3
 8002dae:	f000 fa3f 	bl	8003230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	0018      	movs	r0, r3
 8002db6:	f000 fa4b 	bl	8003250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d00c      	beq.n	8002de2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d008      	beq.n	8002de2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	4252      	negs	r2, r2
 8002dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f7fd fb05 	bl	80003ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2280      	movs	r2, #128	@ 0x80
 8002de6:	4013      	ands	r3, r2
 8002de8:	d104      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	2380      	movs	r3, #128	@ 0x80
 8002dee:	019b      	lsls	r3, r3, #6
 8002df0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002df2:	d00b      	beq.n	8002e0c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2280      	movs	r2, #128	@ 0x80
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d007      	beq.n	8002e0c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a1e      	ldr	r2, [pc, #120]	@ (8002e7c <HAL_TIM_IRQHandler+0x208>)
 8002e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	0018      	movs	r0, r3
 8002e08:	f000 ffa6 	bl	8003d58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	2380      	movs	r3, #128	@ 0x80
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	4013      	ands	r3, r2
 8002e14:	d00b      	beq.n	8002e2e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2280      	movs	r2, #128	@ 0x80
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d007      	beq.n	8002e2e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a17      	ldr	r2, [pc, #92]	@ (8002e80 <HAL_TIM_IRQHandler+0x20c>)
 8002e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f000 ff9d 	bl	8003d68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2240      	movs	r2, #64	@ 0x40
 8002e32:	4013      	ands	r3, r2
 8002e34:	d00c      	beq.n	8002e50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2240      	movs	r2, #64	@ 0x40
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d008      	beq.n	8002e50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2241      	movs	r2, #65	@ 0x41
 8002e44:	4252      	negs	r2, r2
 8002e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f000 fa08 	bl	8003260 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2220      	movs	r2, #32
 8002e54:	4013      	ands	r3, r2
 8002e56:	d00c      	beq.n	8002e72 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d008      	beq.n	8002e72 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2221      	movs	r2, #33	@ 0x21
 8002e66:	4252      	negs	r2, r2
 8002e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f000 ff6b 	bl	8003d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e72:	46c0      	nop			@ (mov r8, r8)
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b004      	add	sp, #16
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			@ (mov r8, r8)
 8002e7c:	ffffdf7f 	.word	0xffffdf7f
 8002e80:	fffffeff 	.word	0xfffffeff

08002e84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e90:	2317      	movs	r3, #23
 8002e92:	18fb      	adds	r3, r7, r3
 8002e94:	2200      	movs	r2, #0
 8002e96:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	223c      	movs	r2, #60	@ 0x3c
 8002e9c:	5c9b      	ldrb	r3, [r3, r2]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e0e5      	b.n	8003072 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	223c      	movs	r2, #60	@ 0x3c
 8002eaa:	2101      	movs	r1, #1
 8002eac:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b14      	cmp	r3, #20
 8002eb2:	d900      	bls.n	8002eb6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002eb4:	e0d1      	b.n	800305a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	009a      	lsls	r2, r3, #2
 8002eba:	4b70      	ldr	r3, [pc, #448]	@ (800307c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002ebc:	18d3      	adds	r3, r2, r3
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	0011      	movs	r1, r2
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f000 fa4a 	bl	8003364 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2108      	movs	r1, #8
 8002edc:	430a      	orrs	r2, r1
 8002ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2104      	movs	r1, #4
 8002eec:	438a      	bics	r2, r1
 8002eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6999      	ldr	r1, [r3, #24]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	619a      	str	r2, [r3, #24]
      break;
 8002f02:	e0af      	b.n	8003064 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	0011      	movs	r1, r2
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f000 faa9 	bl	8003464 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699a      	ldr	r2, [r3, #24]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2180      	movs	r1, #128	@ 0x80
 8002f1e:	0109      	lsls	r1, r1, #4
 8002f20:	430a      	orrs	r2, r1
 8002f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4954      	ldr	r1, [pc, #336]	@ (8003080 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002f30:	400a      	ands	r2, r1
 8002f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6999      	ldr	r1, [r3, #24]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	021a      	lsls	r2, r3, #8
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	619a      	str	r2, [r3, #24]
      break;
 8002f48:	e08c      	b.n	8003064 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	0011      	movs	r1, r2
 8002f52:	0018      	movs	r0, r3
 8002f54:	f000 fb04 	bl	8003560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	69da      	ldr	r2, [r3, #28]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2108      	movs	r1, #8
 8002f64:	430a      	orrs	r2, r1
 8002f66:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	69da      	ldr	r2, [r3, #28]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2104      	movs	r1, #4
 8002f74:	438a      	bics	r2, r1
 8002f76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	69d9      	ldr	r1, [r3, #28]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	691a      	ldr	r2, [r3, #16]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	61da      	str	r2, [r3, #28]
      break;
 8002f8a:	e06b      	b.n	8003064 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	0011      	movs	r1, r2
 8002f94:	0018      	movs	r0, r3
 8002f96:	f000 fb65 	bl	8003664 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69da      	ldr	r2, [r3, #28]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2180      	movs	r1, #128	@ 0x80
 8002fa6:	0109      	lsls	r1, r1, #4
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	69da      	ldr	r2, [r3, #28]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4932      	ldr	r1, [pc, #200]	@ (8003080 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002fb8:	400a      	ands	r2, r1
 8002fba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	69d9      	ldr	r1, [r3, #28]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	021a      	lsls	r2, r3, #8
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	61da      	str	r2, [r3, #28]
      break;
 8002fd0:	e048      	b.n	8003064 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	0011      	movs	r1, r2
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f000 fba6 	bl	800372c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2108      	movs	r1, #8
 8002fec:	430a      	orrs	r2, r1
 8002fee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2104      	movs	r1, #4
 8002ffc:	438a      	bics	r2, r1
 8002ffe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	691a      	ldr	r2, [r3, #16]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003012:	e027      	b.n	8003064 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	0011      	movs	r1, r2
 800301c:	0018      	movs	r0, r3
 800301e:	f000 fbdf 	bl	80037e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2180      	movs	r1, #128	@ 0x80
 800302e:	0109      	lsls	r1, r1, #4
 8003030:	430a      	orrs	r2, r1
 8003032:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4910      	ldr	r1, [pc, #64]	@ (8003080 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003040:	400a      	ands	r2, r1
 8003042:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	021a      	lsls	r2, r3, #8
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003058:	e004      	b.n	8003064 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800305a:	2317      	movs	r3, #23
 800305c:	18fb      	adds	r3, r7, r3
 800305e:	2201      	movs	r2, #1
 8003060:	701a      	strb	r2, [r3, #0]
      break;
 8003062:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	223c      	movs	r2, #60	@ 0x3c
 8003068:	2100      	movs	r1, #0
 800306a:	5499      	strb	r1, [r3, r2]

  return status;
 800306c:	2317      	movs	r3, #23
 800306e:	18fb      	adds	r3, r7, r3
 8003070:	781b      	ldrb	r3, [r3, #0]
}
 8003072:	0018      	movs	r0, r3
 8003074:	46bd      	mov	sp, r7
 8003076:	b006      	add	sp, #24
 8003078:	bd80      	pop	{r7, pc}
 800307a:	46c0      	nop			@ (mov r8, r8)
 800307c:	08004d64 	.word	0x08004d64
 8003080:	fffffbff 	.word	0xfffffbff

08003084 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800308e:	230f      	movs	r3, #15
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	2200      	movs	r2, #0
 8003094:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	223c      	movs	r2, #60	@ 0x3c
 800309a:	5c9b      	ldrb	r3, [r3, r2]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_TIM_ConfigClockSource+0x20>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e0bc      	b.n	800321e <HAL_TIM_ConfigClockSource+0x19a>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	223c      	movs	r2, #60	@ 0x3c
 80030a8:	2101      	movs	r1, #1
 80030aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	223d      	movs	r2, #61	@ 0x3d
 80030b0:	2102      	movs	r1, #2
 80030b2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4a5a      	ldr	r2, [pc, #360]	@ (8003228 <HAL_TIM_ConfigClockSource+0x1a4>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4a59      	ldr	r2, [pc, #356]	@ (800322c <HAL_TIM_ConfigClockSource+0x1a8>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2280      	movs	r2, #128	@ 0x80
 80030da:	0192      	lsls	r2, r2, #6
 80030dc:	4293      	cmp	r3, r2
 80030de:	d040      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0xde>
 80030e0:	2280      	movs	r2, #128	@ 0x80
 80030e2:	0192      	lsls	r2, r2, #6
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d900      	bls.n	80030ea <HAL_TIM_ConfigClockSource+0x66>
 80030e8:	e088      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x178>
 80030ea:	2280      	movs	r2, #128	@ 0x80
 80030ec:	0152      	lsls	r2, r2, #5
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d100      	bne.n	80030f4 <HAL_TIM_ConfigClockSource+0x70>
 80030f2:	e088      	b.n	8003206 <HAL_TIM_ConfigClockSource+0x182>
 80030f4:	2280      	movs	r2, #128	@ 0x80
 80030f6:	0152      	lsls	r2, r2, #5
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d900      	bls.n	80030fe <HAL_TIM_ConfigClockSource+0x7a>
 80030fc:	e07e      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x178>
 80030fe:	2b70      	cmp	r3, #112	@ 0x70
 8003100:	d018      	beq.n	8003134 <HAL_TIM_ConfigClockSource+0xb0>
 8003102:	d900      	bls.n	8003106 <HAL_TIM_ConfigClockSource+0x82>
 8003104:	e07a      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x178>
 8003106:	2b60      	cmp	r3, #96	@ 0x60
 8003108:	d04f      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0x126>
 800310a:	d900      	bls.n	800310e <HAL_TIM_ConfigClockSource+0x8a>
 800310c:	e076      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x178>
 800310e:	2b50      	cmp	r3, #80	@ 0x50
 8003110:	d03b      	beq.n	800318a <HAL_TIM_ConfigClockSource+0x106>
 8003112:	d900      	bls.n	8003116 <HAL_TIM_ConfigClockSource+0x92>
 8003114:	e072      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x178>
 8003116:	2b40      	cmp	r3, #64	@ 0x40
 8003118:	d057      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0x146>
 800311a:	d900      	bls.n	800311e <HAL_TIM_ConfigClockSource+0x9a>
 800311c:	e06e      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x178>
 800311e:	2b30      	cmp	r3, #48	@ 0x30
 8003120:	d063      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x166>
 8003122:	d86b      	bhi.n	80031fc <HAL_TIM_ConfigClockSource+0x178>
 8003124:	2b20      	cmp	r3, #32
 8003126:	d060      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x166>
 8003128:	d868      	bhi.n	80031fc <HAL_TIM_ConfigClockSource+0x178>
 800312a:	2b00      	cmp	r3, #0
 800312c:	d05d      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x166>
 800312e:	2b10      	cmp	r3, #16
 8003130:	d05b      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x166>
 8003132:	e063      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003144:	f000 fc26 	bl	8003994 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2277      	movs	r2, #119	@ 0x77
 8003154:	4313      	orrs	r3, r2
 8003156:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	609a      	str	r2, [r3, #8]
      break;
 8003160:	e052      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003172:	f000 fc0f 	bl	8003994 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2180      	movs	r1, #128	@ 0x80
 8003182:	01c9      	lsls	r1, r1, #7
 8003184:	430a      	orrs	r2, r1
 8003186:	609a      	str	r2, [r3, #8]
      break;
 8003188:	e03e      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003196:	001a      	movs	r2, r3
 8003198:	f000 fb80 	bl	800389c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2150      	movs	r1, #80	@ 0x50
 80031a2:	0018      	movs	r0, r3
 80031a4:	f000 fbda 	bl	800395c <TIM_ITRx_SetConfig>
      break;
 80031a8:	e02e      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031b6:	001a      	movs	r2, r3
 80031b8:	f000 fb9e 	bl	80038f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2160      	movs	r1, #96	@ 0x60
 80031c2:	0018      	movs	r0, r3
 80031c4:	f000 fbca 	bl	800395c <TIM_ITRx_SetConfig>
      break;
 80031c8:	e01e      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031d6:	001a      	movs	r2, r3
 80031d8:	f000 fb60 	bl	800389c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2140      	movs	r1, #64	@ 0x40
 80031e2:	0018      	movs	r0, r3
 80031e4:	f000 fbba 	bl	800395c <TIM_ITRx_SetConfig>
      break;
 80031e8:	e00e      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	0019      	movs	r1, r3
 80031f4:	0010      	movs	r0, r2
 80031f6:	f000 fbb1 	bl	800395c <TIM_ITRx_SetConfig>
      break;
 80031fa:	e005      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80031fc:	230f      	movs	r3, #15
 80031fe:	18fb      	adds	r3, r7, r3
 8003200:	2201      	movs	r2, #1
 8003202:	701a      	strb	r2, [r3, #0]
      break;
 8003204:	e000      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003206:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	223d      	movs	r2, #61	@ 0x3d
 800320c:	2101      	movs	r1, #1
 800320e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	223c      	movs	r2, #60	@ 0x3c
 8003214:	2100      	movs	r1, #0
 8003216:	5499      	strb	r1, [r3, r2]

  return status;
 8003218:	230f      	movs	r3, #15
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	781b      	ldrb	r3, [r3, #0]
}
 800321e:	0018      	movs	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	b004      	add	sp, #16
 8003224:	bd80      	pop	{r7, pc}
 8003226:	46c0      	nop			@ (mov r8, r8)
 8003228:	ffceff88 	.word	0xffceff88
 800322c:	ffff00ff 	.word	0xffff00ff

08003230 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003238:	46c0      	nop			@ (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	b002      	add	sp, #8
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003248:	46c0      	nop			@ (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	b002      	add	sp, #8
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003258:	46c0      	nop			@ (mov r8, r8)
 800325a:	46bd      	mov	sp, r7
 800325c:	b002      	add	sp, #8
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003268:	46c0      	nop			@ (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	b002      	add	sp, #8
 800326e:	bd80      	pop	{r7, pc}

08003270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a32      	ldr	r2, [pc, #200]	@ (800334c <TIM_Base_SetConfig+0xdc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d003      	beq.n	8003290 <TIM_Base_SetConfig+0x20>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a31      	ldr	r2, [pc, #196]	@ (8003350 <TIM_Base_SetConfig+0xe0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d108      	bne.n	80032a2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2270      	movs	r2, #112	@ 0x70
 8003294:	4393      	bics	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a29      	ldr	r2, [pc, #164]	@ (800334c <TIM_Base_SetConfig+0xdc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00f      	beq.n	80032ca <TIM_Base_SetConfig+0x5a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a28      	ldr	r2, [pc, #160]	@ (8003350 <TIM_Base_SetConfig+0xe0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00b      	beq.n	80032ca <TIM_Base_SetConfig+0x5a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a27      	ldr	r2, [pc, #156]	@ (8003354 <TIM_Base_SetConfig+0xe4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d007      	beq.n	80032ca <TIM_Base_SetConfig+0x5a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a26      	ldr	r2, [pc, #152]	@ (8003358 <TIM_Base_SetConfig+0xe8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d003      	beq.n	80032ca <TIM_Base_SetConfig+0x5a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a25      	ldr	r2, [pc, #148]	@ (800335c <TIM_Base_SetConfig+0xec>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d108      	bne.n	80032dc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a24      	ldr	r2, [pc, #144]	@ (8003360 <TIM_Base_SetConfig+0xf0>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2280      	movs	r2, #128	@ 0x80
 80032e0:	4393      	bics	r3, r2
 80032e2:	001a      	movs	r2, r3
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a11      	ldr	r2, [pc, #68]	@ (800334c <TIM_Base_SetConfig+0xdc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d007      	beq.n	800331a <TIM_Base_SetConfig+0xaa>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a12      	ldr	r2, [pc, #72]	@ (8003358 <TIM_Base_SetConfig+0xe8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d003      	beq.n	800331a <TIM_Base_SetConfig+0xaa>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a11      	ldr	r2, [pc, #68]	@ (800335c <TIM_Base_SetConfig+0xec>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d103      	bne.n	8003322 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	2201      	movs	r2, #1
 800332e:	4013      	ands	r3, r2
 8003330:	2b01      	cmp	r3, #1
 8003332:	d106      	bne.n	8003342 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	2201      	movs	r2, #1
 800333a:	4393      	bics	r3, r2
 800333c:	001a      	movs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	611a      	str	r2, [r3, #16]
  }
}
 8003342:	46c0      	nop			@ (mov r8, r8)
 8003344:	46bd      	mov	sp, r7
 8003346:	b004      	add	sp, #16
 8003348:	bd80      	pop	{r7, pc}
 800334a:	46c0      	nop			@ (mov r8, r8)
 800334c:	40012c00 	.word	0x40012c00
 8003350:	40000400 	.word	0x40000400
 8003354:	40002000 	.word	0x40002000
 8003358:	40014400 	.word	0x40014400
 800335c:	40014800 	.word	0x40014800
 8003360:	fffffcff 	.word	0xfffffcff

08003364 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	2201      	movs	r2, #1
 800337a:	4393      	bics	r3, r2
 800337c:	001a      	movs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4a2e      	ldr	r2, [pc, #184]	@ (800344c <TIM_OC1_SetConfig+0xe8>)
 8003392:	4013      	ands	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2203      	movs	r2, #3
 800339a:	4393      	bics	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2202      	movs	r2, #2
 80033ac:	4393      	bics	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a24      	ldr	r2, [pc, #144]	@ (8003450 <TIM_OC1_SetConfig+0xec>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d007      	beq.n	80033d2 <TIM_OC1_SetConfig+0x6e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a23      	ldr	r2, [pc, #140]	@ (8003454 <TIM_OC1_SetConfig+0xf0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d003      	beq.n	80033d2 <TIM_OC1_SetConfig+0x6e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a22      	ldr	r2, [pc, #136]	@ (8003458 <TIM_OC1_SetConfig+0xf4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d10c      	bne.n	80033ec <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2208      	movs	r2, #8
 80033d6:	4393      	bics	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2204      	movs	r2, #4
 80033e8:	4393      	bics	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a18      	ldr	r2, [pc, #96]	@ (8003450 <TIM_OC1_SetConfig+0xec>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d007      	beq.n	8003404 <TIM_OC1_SetConfig+0xa0>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a17      	ldr	r2, [pc, #92]	@ (8003454 <TIM_OC1_SetConfig+0xf0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d003      	beq.n	8003404 <TIM_OC1_SetConfig+0xa0>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a16      	ldr	r2, [pc, #88]	@ (8003458 <TIM_OC1_SetConfig+0xf4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d111      	bne.n	8003428 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4a15      	ldr	r2, [pc, #84]	@ (800345c <TIM_OC1_SetConfig+0xf8>)
 8003408:	4013      	ands	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4a14      	ldr	r2, [pc, #80]	@ (8003460 <TIM_OC1_SetConfig+0xfc>)
 8003410:	4013      	ands	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	621a      	str	r2, [r3, #32]
}
 8003442:	46c0      	nop			@ (mov r8, r8)
 8003444:	46bd      	mov	sp, r7
 8003446:	b006      	add	sp, #24
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			@ (mov r8, r8)
 800344c:	fffeff8f 	.word	0xfffeff8f
 8003450:	40012c00 	.word	0x40012c00
 8003454:	40014400 	.word	0x40014400
 8003458:	40014800 	.word	0x40014800
 800345c:	fffffeff 	.word	0xfffffeff
 8003460:	fffffdff 	.word	0xfffffdff

08003464 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	2210      	movs	r2, #16
 800347a:	4393      	bics	r3, r2
 800347c:	001a      	movs	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4a2c      	ldr	r2, [pc, #176]	@ (8003544 <TIM_OC2_SetConfig+0xe0>)
 8003492:	4013      	ands	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4a2b      	ldr	r2, [pc, #172]	@ (8003548 <TIM_OC2_SetConfig+0xe4>)
 800349a:	4013      	ands	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	021b      	lsls	r3, r3, #8
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2220      	movs	r2, #32
 80034ae:	4393      	bics	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a22      	ldr	r2, [pc, #136]	@ (800354c <TIM_OC2_SetConfig+0xe8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d10d      	bne.n	80034e2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2280      	movs	r2, #128	@ 0x80
 80034ca:	4393      	bics	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2240      	movs	r2, #64	@ 0x40
 80034de:	4393      	bics	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a19      	ldr	r2, [pc, #100]	@ (800354c <TIM_OC2_SetConfig+0xe8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d007      	beq.n	80034fa <TIM_OC2_SetConfig+0x96>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a18      	ldr	r2, [pc, #96]	@ (8003550 <TIM_OC2_SetConfig+0xec>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d003      	beq.n	80034fa <TIM_OC2_SetConfig+0x96>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a17      	ldr	r2, [pc, #92]	@ (8003554 <TIM_OC2_SetConfig+0xf0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d113      	bne.n	8003522 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	4a16      	ldr	r2, [pc, #88]	@ (8003558 <TIM_OC2_SetConfig+0xf4>)
 80034fe:	4013      	ands	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	4a15      	ldr	r2, [pc, #84]	@ (800355c <TIM_OC2_SetConfig+0xf8>)
 8003506:	4013      	ands	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4313      	orrs	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	621a      	str	r2, [r3, #32]
}
 800353c:	46c0      	nop			@ (mov r8, r8)
 800353e:	46bd      	mov	sp, r7
 8003540:	b006      	add	sp, #24
 8003542:	bd80      	pop	{r7, pc}
 8003544:	feff8fff 	.word	0xfeff8fff
 8003548:	fffffcff 	.word	0xfffffcff
 800354c:	40012c00 	.word	0x40012c00
 8003550:	40014400 	.word	0x40014400
 8003554:	40014800 	.word	0x40014800
 8003558:	fffffbff 	.word	0xfffffbff
 800355c:	fffff7ff 	.word	0xfffff7ff

08003560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4a31      	ldr	r2, [pc, #196]	@ (800363c <TIM_OC3_SetConfig+0xdc>)
 8003576:	401a      	ands	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4a2d      	ldr	r2, [pc, #180]	@ (8003640 <TIM_OC3_SetConfig+0xe0>)
 800358c:	4013      	ands	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2203      	movs	r2, #3
 8003594:	4393      	bics	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	4a27      	ldr	r2, [pc, #156]	@ (8003644 <TIM_OC3_SetConfig+0xe4>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a23      	ldr	r2, [pc, #140]	@ (8003648 <TIM_OC3_SetConfig+0xe8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d10d      	bne.n	80035da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	4a22      	ldr	r2, [pc, #136]	@ (800364c <TIM_OC3_SetConfig+0xec>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003650 <TIM_OC3_SetConfig+0xf0>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003648 <TIM_OC3_SetConfig+0xe8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d007      	beq.n	80035f2 <TIM_OC3_SetConfig+0x92>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003654 <TIM_OC3_SetConfig+0xf4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d003      	beq.n	80035f2 <TIM_OC3_SetConfig+0x92>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003658 <TIM_OC3_SetConfig+0xf8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d113      	bne.n	800361a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	4a19      	ldr	r2, [pc, #100]	@ (800365c <TIM_OC3_SetConfig+0xfc>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4a18      	ldr	r2, [pc, #96]	@ (8003660 <TIM_OC3_SetConfig+0x100>)
 80035fe:	4013      	ands	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	621a      	str	r2, [r3, #32]
}
 8003634:	46c0      	nop			@ (mov r8, r8)
 8003636:	46bd      	mov	sp, r7
 8003638:	b006      	add	sp, #24
 800363a:	bd80      	pop	{r7, pc}
 800363c:	fffffeff 	.word	0xfffffeff
 8003640:	fffeff8f 	.word	0xfffeff8f
 8003644:	fffffdff 	.word	0xfffffdff
 8003648:	40012c00 	.word	0x40012c00
 800364c:	fffff7ff 	.word	0xfffff7ff
 8003650:	fffffbff 	.word	0xfffffbff
 8003654:	40014400 	.word	0x40014400
 8003658:	40014800 	.word	0x40014800
 800365c:	ffffefff 	.word	0xffffefff
 8003660:	ffffdfff 	.word	0xffffdfff

08003664 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	4a24      	ldr	r2, [pc, #144]	@ (800370c <TIM_OC4_SetConfig+0xa8>)
 800367a:	401a      	ands	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4a20      	ldr	r2, [pc, #128]	@ (8003710 <TIM_OC4_SetConfig+0xac>)
 8003690:	4013      	ands	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4a1f      	ldr	r2, [pc, #124]	@ (8003714 <TIM_OC4_SetConfig+0xb0>)
 8003698:	4013      	ands	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003718 <TIM_OC4_SetConfig+0xb4>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	031b      	lsls	r3, r3, #12
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a17      	ldr	r2, [pc, #92]	@ (800371c <TIM_OC4_SetConfig+0xb8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d007      	beq.n	80036d4 <TIM_OC4_SetConfig+0x70>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a16      	ldr	r2, [pc, #88]	@ (8003720 <TIM_OC4_SetConfig+0xbc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_OC4_SetConfig+0x70>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a15      	ldr	r2, [pc, #84]	@ (8003724 <TIM_OC4_SetConfig+0xc0>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d109      	bne.n	80036e8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	4a14      	ldr	r2, [pc, #80]	@ (8003728 <TIM_OC4_SetConfig+0xc4>)
 80036d8:	4013      	ands	r3, r2
 80036da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	019b      	lsls	r3, r3, #6
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	46c0      	nop			@ (mov r8, r8)
 8003704:	46bd      	mov	sp, r7
 8003706:	b006      	add	sp, #24
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			@ (mov r8, r8)
 800370c:	ffffefff 	.word	0xffffefff
 8003710:	feff8fff 	.word	0xfeff8fff
 8003714:	fffffcff 	.word	0xfffffcff
 8003718:	ffffdfff 	.word	0xffffdfff
 800371c:	40012c00 	.word	0x40012c00
 8003720:	40014400 	.word	0x40014400
 8003724:	40014800 	.word	0x40014800
 8003728:	ffffbfff 	.word	0xffffbfff

0800372c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	4a21      	ldr	r2, [pc, #132]	@ (80037c8 <TIM_OC5_SetConfig+0x9c>)
 8003742:	401a      	ands	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4a1d      	ldr	r2, [pc, #116]	@ (80037cc <TIM_OC5_SetConfig+0xa0>)
 8003758:	4013      	ands	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	4a19      	ldr	r2, [pc, #100]	@ (80037d0 <TIM_OC5_SetConfig+0xa4>)
 800376a:	4013      	ands	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	041b      	lsls	r3, r3, #16
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a15      	ldr	r2, [pc, #84]	@ (80037d4 <TIM_OC5_SetConfig+0xa8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d007      	beq.n	8003792 <TIM_OC5_SetConfig+0x66>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a14      	ldr	r2, [pc, #80]	@ (80037d8 <TIM_OC5_SetConfig+0xac>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <TIM_OC5_SetConfig+0x66>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a13      	ldr	r2, [pc, #76]	@ (80037dc <TIM_OC5_SetConfig+0xb0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d109      	bne.n	80037a6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	4a0c      	ldr	r2, [pc, #48]	@ (80037c8 <TIM_OC5_SetConfig+0x9c>)
 8003796:	4013      	ands	r3, r2
 8003798:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	021b      	lsls	r3, r3, #8
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	621a      	str	r2, [r3, #32]
}
 80037c0:	46c0      	nop			@ (mov r8, r8)
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b006      	add	sp, #24
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	fffeffff 	.word	0xfffeffff
 80037cc:	fffeff8f 	.word	0xfffeff8f
 80037d0:	fffdffff 	.word	0xfffdffff
 80037d4:	40012c00 	.word	0x40012c00
 80037d8:	40014400 	.word	0x40014400
 80037dc:	40014800 	.word	0x40014800

080037e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	4a22      	ldr	r2, [pc, #136]	@ (8003880 <TIM_OC6_SetConfig+0xa0>)
 80037f6:	401a      	ands	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4a1e      	ldr	r2, [pc, #120]	@ (8003884 <TIM_OC6_SetConfig+0xa4>)
 800380c:	4013      	ands	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	021b      	lsls	r3, r3, #8
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4a1a      	ldr	r2, [pc, #104]	@ (8003888 <TIM_OC6_SetConfig+0xa8>)
 8003820:	4013      	ands	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	051b      	lsls	r3, r3, #20
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a16      	ldr	r2, [pc, #88]	@ (800388c <TIM_OC6_SetConfig+0xac>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d007      	beq.n	8003848 <TIM_OC6_SetConfig+0x68>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a15      	ldr	r2, [pc, #84]	@ (8003890 <TIM_OC6_SetConfig+0xb0>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d003      	beq.n	8003848 <TIM_OC6_SetConfig+0x68>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a14      	ldr	r2, [pc, #80]	@ (8003894 <TIM_OC6_SetConfig+0xb4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d109      	bne.n	800385c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	4a13      	ldr	r2, [pc, #76]	@ (8003898 <TIM_OC6_SetConfig+0xb8>)
 800384c:	4013      	ands	r3, r2
 800384e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	029b      	lsls	r3, r3, #10
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	621a      	str	r2, [r3, #32]
}
 8003876:	46c0      	nop			@ (mov r8, r8)
 8003878:	46bd      	mov	sp, r7
 800387a:	b006      	add	sp, #24
 800387c:	bd80      	pop	{r7, pc}
 800387e:	46c0      	nop			@ (mov r8, r8)
 8003880:	ffefffff 	.word	0xffefffff
 8003884:	feff8fff 	.word	0xfeff8fff
 8003888:	ffdfffff 	.word	0xffdfffff
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40014400 	.word	0x40014400
 8003894:	40014800 	.word	0x40014800
 8003898:	fffbffff 	.word	0xfffbffff

0800389c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	2201      	movs	r2, #1
 80038b4:	4393      	bics	r3, r2
 80038b6:	001a      	movs	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	22f0      	movs	r2, #240	@ 0xf0
 80038c6:	4393      	bics	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	220a      	movs	r2, #10
 80038d8:	4393      	bics	r3, r2
 80038da:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	621a      	str	r2, [r3, #32]
}
 80038f0:	46c0      	nop			@ (mov r8, r8)
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b006      	add	sp, #24
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	2210      	movs	r2, #16
 8003910:	4393      	bics	r3, r2
 8003912:	001a      	movs	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4a0d      	ldr	r2, [pc, #52]	@ (8003958 <TIM_TI2_ConfigInputStage+0x60>)
 8003922:	4013      	ands	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	031b      	lsls	r3, r3, #12
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	22a0      	movs	r2, #160	@ 0xa0
 8003934:	4393      	bics	r3, r2
 8003936:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	621a      	str	r2, [r3, #32]
}
 800394e:	46c0      	nop			@ (mov r8, r8)
 8003950:	46bd      	mov	sp, r7
 8003952:	b006      	add	sp, #24
 8003954:	bd80      	pop	{r7, pc}
 8003956:	46c0      	nop			@ (mov r8, r8)
 8003958:	ffff0fff 	.word	0xffff0fff

0800395c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4a08      	ldr	r2, [pc, #32]	@ (8003990 <TIM_ITRx_SetConfig+0x34>)
 8003970:	4013      	ands	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4313      	orrs	r3, r2
 800397a:	2207      	movs	r2, #7
 800397c:	4313      	orrs	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	609a      	str	r2, [r3, #8]
}
 8003986:	46c0      	nop			@ (mov r8, r8)
 8003988:	46bd      	mov	sp, r7
 800398a:	b004      	add	sp, #16
 800398c:	bd80      	pop	{r7, pc}
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	ffcfff8f 	.word	0xffcfff8f

08003994 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	4a09      	ldr	r2, [pc, #36]	@ (80039d0 <TIM_ETR_SetConfig+0x3c>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	021a      	lsls	r2, r3, #8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	609a      	str	r2, [r3, #8]
}
 80039c8:	46c0      	nop			@ (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b006      	add	sp, #24
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	ffff00ff 	.word	0xffff00ff

080039d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	221f      	movs	r2, #31
 80039e4:	4013      	ands	r3, r2
 80039e6:	2201      	movs	r2, #1
 80039e8:	409a      	lsls	r2, r3
 80039ea:	0013      	movs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	43d2      	mvns	r2, r2
 80039f6:	401a      	ands	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a1a      	ldr	r2, [r3, #32]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	211f      	movs	r1, #31
 8003a04:	400b      	ands	r3, r1
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	4099      	lsls	r1, r3
 8003a0a:	000b      	movs	r3, r1
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	621a      	str	r2, [r3, #32]
}
 8003a12:	46c0      	nop			@ (mov r8, r8)
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b006      	add	sp, #24
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d108      	bne.n	8003a3e <HAL_TIMEx_PWMN_Start+0x22>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2244      	movs	r2, #68	@ 0x44
 8003a30:	5c9b      	ldrb	r3, [r3, r2]
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	1e5a      	subs	r2, r3, #1
 8003a38:	4193      	sbcs	r3, r2
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	e01f      	b.n	8003a7e <HAL_TIMEx_PWMN_Start+0x62>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d108      	bne.n	8003a56 <HAL_TIMEx_PWMN_Start+0x3a>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2245      	movs	r2, #69	@ 0x45
 8003a48:	5c9b      	ldrb	r3, [r3, r2]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	1e5a      	subs	r2, r3, #1
 8003a50:	4193      	sbcs	r3, r2
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	e013      	b.n	8003a7e <HAL_TIMEx_PWMN_Start+0x62>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d108      	bne.n	8003a6e <HAL_TIMEx_PWMN_Start+0x52>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2246      	movs	r2, #70	@ 0x46
 8003a60:	5c9b      	ldrb	r3, [r3, r2]
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	1e5a      	subs	r2, r3, #1
 8003a68:	4193      	sbcs	r3, r2
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	e007      	b.n	8003a7e <HAL_TIMEx_PWMN_Start+0x62>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2247      	movs	r2, #71	@ 0x47
 8003a72:	5c9b      	ldrb	r3, [r3, r2]
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	3b01      	subs	r3, #1
 8003a78:	1e5a      	subs	r2, r3, #1
 8003a7a:	4193      	sbcs	r3, r2
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e057      	b.n	8003b36 <HAL_TIMEx_PWMN_Start+0x11a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d104      	bne.n	8003a96 <HAL_TIMEx_PWMN_Start+0x7a>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2244      	movs	r2, #68	@ 0x44
 8003a90:	2102      	movs	r1, #2
 8003a92:	5499      	strb	r1, [r3, r2]
 8003a94:	e013      	b.n	8003abe <HAL_TIMEx_PWMN_Start+0xa2>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d104      	bne.n	8003aa6 <HAL_TIMEx_PWMN_Start+0x8a>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2245      	movs	r2, #69	@ 0x45
 8003aa0:	2102      	movs	r1, #2
 8003aa2:	5499      	strb	r1, [r3, r2]
 8003aa4:	e00b      	b.n	8003abe <HAL_TIMEx_PWMN_Start+0xa2>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d104      	bne.n	8003ab6 <HAL_TIMEx_PWMN_Start+0x9a>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2246      	movs	r2, #70	@ 0x46
 8003ab0:	2102      	movs	r1, #2
 8003ab2:	5499      	strb	r1, [r3, r2]
 8003ab4:	e003      	b.n	8003abe <HAL_TIMEx_PWMN_Start+0xa2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2247      	movs	r2, #71	@ 0x47
 8003aba:	2102      	movs	r1, #2
 8003abc:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6839      	ldr	r1, [r7, #0]
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f000 f956 	bl	8003d78 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2180      	movs	r1, #128	@ 0x80
 8003ad8:	0209      	lsls	r1, r1, #8
 8003ada:	430a      	orrs	r2, r1
 8003adc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a17      	ldr	r2, [pc, #92]	@ (8003b40 <HAL_TIMEx_PWMN_Start+0x124>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d004      	beq.n	8003af2 <HAL_TIMEx_PWMN_Start+0xd6>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a15      	ldr	r2, [pc, #84]	@ (8003b44 <HAL_TIMEx_PWMN_Start+0x128>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d116      	bne.n	8003b20 <HAL_TIMEx_PWMN_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	4a13      	ldr	r2, [pc, #76]	@ (8003b48 <HAL_TIMEx_PWMN_Start+0x12c>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b06      	cmp	r3, #6
 8003b02:	d016      	beq.n	8003b32 <HAL_TIMEx_PWMN_Start+0x116>
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	2380      	movs	r3, #128	@ 0x80
 8003b08:	025b      	lsls	r3, r3, #9
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d011      	beq.n	8003b32 <HAL_TIMEx_PWMN_Start+0x116>
    {
      __HAL_TIM_ENABLE(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2101      	movs	r1, #1
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1e:	e008      	b.n	8003b32 <HAL_TIMEx_PWMN_Start+0x116>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	e000      	b.n	8003b34 <HAL_TIMEx_PWMN_Start+0x118>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b32:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	0018      	movs	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b004      	add	sp, #16
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	46c0      	nop			@ (mov r8, r8)
 8003b40:	40012c00 	.word	0x40012c00
 8003b44:	40000400 	.word	0x40000400
 8003b48:	00010007 	.word	0x00010007

08003b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	223c      	movs	r2, #60	@ 0x3c
 8003b5a:	5c9b      	ldrb	r3, [r3, r2]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e04a      	b.n	8003bfa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	223c      	movs	r2, #60	@ 0x3c
 8003b68:	2101      	movs	r1, #1
 8003b6a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	223d      	movs	r2, #61	@ 0x3d
 8003b70:	2102      	movs	r1, #2
 8003b72:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a1e      	ldr	r2, [pc, #120]	@ (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d108      	bne.n	8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4a1d      	ldr	r2, [pc, #116]	@ (8003c08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2270      	movs	r2, #112	@ 0x70
 8003ba4:	4393      	bics	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a11      	ldr	r2, [pc, #68]	@ (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d004      	beq.n	8003bce <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a10      	ldr	r2, [pc, #64]	@ (8003c0c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d10c      	bne.n	8003be8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2280      	movs	r2, #128	@ 0x80
 8003bd2:	4393      	bics	r3, r2
 8003bd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	223d      	movs	r2, #61	@ 0x3d
 8003bec:	2101      	movs	r1, #1
 8003bee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	223c      	movs	r2, #60	@ 0x3c
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b004      	add	sp, #16
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	46c0      	nop			@ (mov r8, r8)
 8003c04:	40012c00 	.word	0x40012c00
 8003c08:	ff0fffff 	.word	0xff0fffff
 8003c0c:	40000400 	.word	0x40000400

08003c10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	223c      	movs	r2, #60	@ 0x3c
 8003c22:	5c9b      	ldrb	r3, [r3, r2]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e06f      	b.n	8003d0c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	223c      	movs	r2, #60	@ 0x3c
 8003c30:	2101      	movs	r1, #1
 8003c32:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	22ff      	movs	r2, #255	@ 0xff
 8003c38:	4393      	bics	r3, r2
 8003c3a:	001a      	movs	r2, r3
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4a33      	ldr	r2, [pc, #204]	@ (8003d14 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003c48:	401a      	ands	r2, r3
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4a30      	ldr	r2, [pc, #192]	@ (8003d18 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003c56:	401a      	ands	r2, r3
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4a2e      	ldr	r2, [pc, #184]	@ (8003d1c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003c64:	401a      	ands	r2, r3
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4a2b      	ldr	r2, [pc, #172]	@ (8003d20 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003c72:	401a      	ands	r2, r3
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4a29      	ldr	r2, [pc, #164]	@ (8003d24 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003c80:	401a      	ands	r2, r3
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4a26      	ldr	r2, [pc, #152]	@ (8003d28 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003c8e:	401a      	ands	r2, r3
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a24      	ldr	r2, [pc, #144]	@ (8003d2c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003c9c:	401a      	ands	r2, r3
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	041b      	lsls	r3, r3, #16
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4a21      	ldr	r2, [pc, #132]	@ (8003d30 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003cac:	401a      	ands	r2, r3
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1e      	ldr	r2, [pc, #120]	@ (8003d34 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d11c      	bne.n	8003cfa <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8003d38 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003cc4:	401a      	ands	r2, r3
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cca:	051b      	lsls	r3, r3, #20
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4a1a      	ldr	r2, [pc, #104]	@ (8003d3c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003cd4:	401a      	ands	r2, r3
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4a17      	ldr	r2, [pc, #92]	@ (8003d40 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4a15      	ldr	r2, [pc, #84]	@ (8003d44 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003cf0:	401a      	ands	r2, r3
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	223c      	movs	r2, #60	@ 0x3c
 8003d06:	2100      	movs	r1, #0
 8003d08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b004      	add	sp, #16
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	fffffcff 	.word	0xfffffcff
 8003d18:	fffffbff 	.word	0xfffffbff
 8003d1c:	fffff7ff 	.word	0xfffff7ff
 8003d20:	ffffefff 	.word	0xffffefff
 8003d24:	ffffdfff 	.word	0xffffdfff
 8003d28:	ffffbfff 	.word	0xffffbfff
 8003d2c:	fff0ffff 	.word	0xfff0ffff
 8003d30:	efffffff 	.word	0xefffffff
 8003d34:	40012c00 	.word	0x40012c00
 8003d38:	ff0fffff 	.word	0xff0fffff
 8003d3c:	feffffff 	.word	0xfeffffff
 8003d40:	fdffffff 	.word	0xfdffffff
 8003d44:	dfffffff 	.word	0xdfffffff

08003d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d50:	46c0      	nop			@ (mov r8, r8)
 8003d52:	46bd      	mov	sp, r7
 8003d54:	b002      	add	sp, #8
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d60:	46c0      	nop			@ (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b002      	add	sp, #8
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d70:	46c0      	nop			@ (mov r8, r8)
 8003d72:	46bd      	mov	sp, r7
 8003d74:	b002      	add	sp, #8
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	220f      	movs	r2, #15
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	409a      	lsls	r2, r3
 8003d8e:	0013      	movs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	43d2      	mvns	r2, r2
 8003d9a:	401a      	ands	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a1a      	ldr	r2, [r3, #32]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	210f      	movs	r1, #15
 8003da8:	400b      	ands	r3, r1
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	4099      	lsls	r1, r3
 8003dae:	000b      	movs	r3, r1
 8003db0:	431a      	orrs	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	621a      	str	r2, [r3, #32]
}
 8003db6:	46c0      	nop			@ (mov r8, r8)
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b006      	add	sp, #24
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e046      	b.n	8003e60 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2288      	movs	r2, #136	@ 0x88
 8003dd6:	589b      	ldr	r3, [r3, r2]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d107      	bne.n	8003dec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2284      	movs	r2, #132	@ 0x84
 8003de0:	2100      	movs	r1, #0
 8003de2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	0018      	movs	r0, r3
 8003de8:	f7fd f864 	bl	8000eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2288      	movs	r2, #136	@ 0x88
 8003df0:	2124      	movs	r1, #36	@ 0x24
 8003df2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2101      	movs	r1, #1
 8003e00:	438a      	bics	r2, r1
 8003e02:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f000 fa10 	bl	8004234 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	0018      	movs	r0, r3
 8003e18:	f000 f8a2 	bl	8003f60 <UART_SetConfig>
 8003e1c:	0003      	movs	r3, r0
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e01c      	b.n	8003e60 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	490d      	ldr	r1, [pc, #52]	@ (8003e68 <HAL_UART_Init+0xa8>)
 8003e32:	400a      	ands	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	212a      	movs	r1, #42	@ 0x2a
 8003e42:	438a      	bics	r2, r1
 8003e44:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2101      	movs	r1, #1
 8003e52:	430a      	orrs	r2, r1
 8003e54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f000 fa9f 	bl	800439c <UART_CheckIdleState>
 8003e5e:	0003      	movs	r3, r0
}
 8003e60:	0018      	movs	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b002      	add	sp, #8
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	ffffb7ff 	.word	0xffffb7ff

08003e6c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	1dbb      	adds	r3, r7, #6
 8003e78:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	228c      	movs	r2, #140	@ 0x8c
 8003e7e:	589b      	ldr	r3, [r3, r2]
 8003e80:	2b20      	cmp	r3, #32
 8003e82:	d145      	bne.n	8003f10 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_UART_Receive_DMA+0x26>
 8003e8a:	1dbb      	adds	r3, r7, #6
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e03d      	b.n	8003f12 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	2380      	movs	r3, #128	@ 0x80
 8003e9c:	015b      	lsls	r3, r3, #5
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d109      	bne.n	8003eb6 <HAL_UART_Receive_DMA+0x4a>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d105      	bne.n	8003eb6 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2201      	movs	r2, #1
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d001      	beq.n	8003eb6 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e02d      	b.n	8003f12 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	2380      	movs	r3, #128	@ 0x80
 8003ec4:	041b      	lsls	r3, r3, #16
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d019      	beq.n	8003efe <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eca:	f3ef 8310 	mrs	r3, PRIMASK
 8003ece:	613b      	str	r3, [r7, #16]
  return(result);
 8003ed0:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ed2:	61fb      	str	r3, [r7, #28]
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f383 8810 	msr	PRIMASK, r3
}
 8003ede:	46c0      	nop			@ (mov r8, r8)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2180      	movs	r1, #128	@ 0x80
 8003eec:	04c9      	lsls	r1, r1, #19
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	f383 8810 	msr	PRIMASK, r3
}
 8003efc:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003efe:	1dbb      	adds	r3, r7, #6
 8003f00:	881a      	ldrh	r2, [r3, #0]
 8003f02:	68b9      	ldr	r1, [r7, #8]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	0018      	movs	r0, r3
 8003f08:	f000 fb62 	bl	80045d0 <UART_Start_Receive_DMA>
 8003f0c:	0003      	movs	r3, r0
 8003f0e:	e000      	b.n	8003f12 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003f10:	2302      	movs	r3, #2
  }
}
 8003f12:	0018      	movs	r0, r3
 8003f14:	46bd      	mov	sp, r7
 8003f16:	b008      	add	sp, #32
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003f22:	46c0      	nop			@ (mov r8, r8)
 8003f24:	46bd      	mov	sp, r7
 8003f26:	b002      	add	sp, #8
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003f32:	46c0      	nop			@ (mov r8, r8)
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b002      	add	sp, #8
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b082      	sub	sp, #8
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f42:	46c0      	nop			@ (mov r8, r8)
 8003f44:	46bd      	mov	sp, r7
 8003f46:	b002      	add	sp, #8
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	000a      	movs	r2, r1
 8003f54:	1cbb      	adds	r3, r7, #2
 8003f56:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f58:	46c0      	nop			@ (mov r8, r8)
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b002      	add	sp, #8
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f68:	231a      	movs	r3, #26
 8003f6a:	18fb      	adds	r3, r7, r3
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4aa1      	ldr	r2, [pc, #644]	@ (8004214 <UART_SetConfig+0x2b4>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	0019      	movs	r1, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	4a9c      	ldr	r2, [pc, #624]	@ (8004218 <UART_SetConfig+0x2b8>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	0019      	movs	r1, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	4a93      	ldr	r2, [pc, #588]	@ (800421c <UART_SetConfig+0x2bc>)
 8003fce:	4013      	ands	r3, r2
 8003fd0:	0019      	movs	r1, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe2:	220f      	movs	r2, #15
 8003fe4:	4393      	bics	r3, r2
 8003fe6:	0019      	movs	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a89      	ldr	r2, [pc, #548]	@ (8004220 <UART_SetConfig+0x2c0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d127      	bne.n	800404e <UART_SetConfig+0xee>
 8003ffe:	4b89      	ldr	r3, [pc, #548]	@ (8004224 <UART_SetConfig+0x2c4>)
 8004000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004002:	2203      	movs	r2, #3
 8004004:	4013      	ands	r3, r2
 8004006:	2b03      	cmp	r3, #3
 8004008:	d017      	beq.n	800403a <UART_SetConfig+0xda>
 800400a:	d81b      	bhi.n	8004044 <UART_SetConfig+0xe4>
 800400c:	2b02      	cmp	r3, #2
 800400e:	d00a      	beq.n	8004026 <UART_SetConfig+0xc6>
 8004010:	d818      	bhi.n	8004044 <UART_SetConfig+0xe4>
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <UART_SetConfig+0xbc>
 8004016:	2b01      	cmp	r3, #1
 8004018:	d00a      	beq.n	8004030 <UART_SetConfig+0xd0>
 800401a:	e013      	b.n	8004044 <UART_SetConfig+0xe4>
 800401c:	231b      	movs	r3, #27
 800401e:	18fb      	adds	r3, r7, r3
 8004020:	2200      	movs	r2, #0
 8004022:	701a      	strb	r2, [r3, #0]
 8004024:	e021      	b.n	800406a <UART_SetConfig+0x10a>
 8004026:	231b      	movs	r3, #27
 8004028:	18fb      	adds	r3, r7, r3
 800402a:	2202      	movs	r2, #2
 800402c:	701a      	strb	r2, [r3, #0]
 800402e:	e01c      	b.n	800406a <UART_SetConfig+0x10a>
 8004030:	231b      	movs	r3, #27
 8004032:	18fb      	adds	r3, r7, r3
 8004034:	2204      	movs	r2, #4
 8004036:	701a      	strb	r2, [r3, #0]
 8004038:	e017      	b.n	800406a <UART_SetConfig+0x10a>
 800403a:	231b      	movs	r3, #27
 800403c:	18fb      	adds	r3, r7, r3
 800403e:	2208      	movs	r2, #8
 8004040:	701a      	strb	r2, [r3, #0]
 8004042:	e012      	b.n	800406a <UART_SetConfig+0x10a>
 8004044:	231b      	movs	r3, #27
 8004046:	18fb      	adds	r3, r7, r3
 8004048:	2210      	movs	r2, #16
 800404a:	701a      	strb	r2, [r3, #0]
 800404c:	e00d      	b.n	800406a <UART_SetConfig+0x10a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a75      	ldr	r2, [pc, #468]	@ (8004228 <UART_SetConfig+0x2c8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d104      	bne.n	8004062 <UART_SetConfig+0x102>
 8004058:	231b      	movs	r3, #27
 800405a:	18fb      	adds	r3, r7, r3
 800405c:	2200      	movs	r2, #0
 800405e:	701a      	strb	r2, [r3, #0]
 8004060:	e003      	b.n	800406a <UART_SetConfig+0x10a>
 8004062:	231b      	movs	r3, #27
 8004064:	18fb      	adds	r3, r7, r3
 8004066:	2210      	movs	r2, #16
 8004068:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69da      	ldr	r2, [r3, #28]
 800406e:	2380      	movs	r3, #128	@ 0x80
 8004070:	021b      	lsls	r3, r3, #8
 8004072:	429a      	cmp	r2, r3
 8004074:	d000      	beq.n	8004078 <UART_SetConfig+0x118>
 8004076:	e065      	b.n	8004144 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8004078:	231b      	movs	r3, #27
 800407a:	18fb      	adds	r3, r7, r3
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b08      	cmp	r3, #8
 8004080:	d015      	beq.n	80040ae <UART_SetConfig+0x14e>
 8004082:	dc18      	bgt.n	80040b6 <UART_SetConfig+0x156>
 8004084:	2b04      	cmp	r3, #4
 8004086:	d00d      	beq.n	80040a4 <UART_SetConfig+0x144>
 8004088:	dc15      	bgt.n	80040b6 <UART_SetConfig+0x156>
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <UART_SetConfig+0x134>
 800408e:	2b02      	cmp	r3, #2
 8004090:	d005      	beq.n	800409e <UART_SetConfig+0x13e>
 8004092:	e010      	b.n	80040b6 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004094:	f7fe fad4 	bl	8002640 <HAL_RCC_GetPCLK1Freq>
 8004098:	0003      	movs	r3, r0
 800409a:	617b      	str	r3, [r7, #20]
        break;
 800409c:	e012      	b.n	80040c4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800409e:	4b63      	ldr	r3, [pc, #396]	@ (800422c <UART_SetConfig+0x2cc>)
 80040a0:	617b      	str	r3, [r7, #20]
        break;
 80040a2:	e00f      	b.n	80040c4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040a4:	f7fe fa42 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80040a8:	0003      	movs	r3, r0
 80040aa:	617b      	str	r3, [r7, #20]
        break;
 80040ac:	e00a      	b.n	80040c4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ae:	2380      	movs	r3, #128	@ 0x80
 80040b0:	021b      	lsls	r3, r3, #8
 80040b2:	617b      	str	r3, [r7, #20]
        break;
 80040b4:	e006      	b.n	80040c4 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80040ba:	231a      	movs	r3, #26
 80040bc:	18fb      	adds	r3, r7, r3
 80040be:	2201      	movs	r2, #1
 80040c0:	701a      	strb	r2, [r3, #0]
        break;
 80040c2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d100      	bne.n	80040cc <UART_SetConfig+0x16c>
 80040ca:	e08d      	b.n	80041e8 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040d0:	4b57      	ldr	r3, [pc, #348]	@ (8004230 <UART_SetConfig+0x2d0>)
 80040d2:	0052      	lsls	r2, r2, #1
 80040d4:	5ad3      	ldrh	r3, [r2, r3]
 80040d6:	0019      	movs	r1, r3
 80040d8:	6978      	ldr	r0, [r7, #20]
 80040da:	f7fc f811 	bl	8000100 <__udivsi3>
 80040de:	0003      	movs	r3, r0
 80040e0:	005a      	lsls	r2, r3, #1
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	085b      	lsrs	r3, r3, #1
 80040e8:	18d2      	adds	r2, r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	0019      	movs	r1, r3
 80040f0:	0010      	movs	r0, r2
 80040f2:	f7fc f805 	bl	8000100 <__udivsi3>
 80040f6:	0003      	movs	r3, r0
 80040f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b0f      	cmp	r3, #15
 80040fe:	d91c      	bls.n	800413a <UART_SetConfig+0x1da>
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	2380      	movs	r3, #128	@ 0x80
 8004104:	025b      	lsls	r3, r3, #9
 8004106:	429a      	cmp	r2, r3
 8004108:	d217      	bcs.n	800413a <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	b29a      	uxth	r2, r3
 800410e:	200e      	movs	r0, #14
 8004110:	183b      	adds	r3, r7, r0
 8004112:	210f      	movs	r1, #15
 8004114:	438a      	bics	r2, r1
 8004116:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	085b      	lsrs	r3, r3, #1
 800411c:	b29b      	uxth	r3, r3
 800411e:	2207      	movs	r2, #7
 8004120:	4013      	ands	r3, r2
 8004122:	b299      	uxth	r1, r3
 8004124:	183b      	adds	r3, r7, r0
 8004126:	183a      	adds	r2, r7, r0
 8004128:	8812      	ldrh	r2, [r2, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	183a      	adds	r2, r7, r0
 8004134:	8812      	ldrh	r2, [r2, #0]
 8004136:	60da      	str	r2, [r3, #12]
 8004138:	e056      	b.n	80041e8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800413a:	231a      	movs	r3, #26
 800413c:	18fb      	adds	r3, r7, r3
 800413e:	2201      	movs	r2, #1
 8004140:	701a      	strb	r2, [r3, #0]
 8004142:	e051      	b.n	80041e8 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004144:	231b      	movs	r3, #27
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b08      	cmp	r3, #8
 800414c:	d015      	beq.n	800417a <UART_SetConfig+0x21a>
 800414e:	dc18      	bgt.n	8004182 <UART_SetConfig+0x222>
 8004150:	2b04      	cmp	r3, #4
 8004152:	d00d      	beq.n	8004170 <UART_SetConfig+0x210>
 8004154:	dc15      	bgt.n	8004182 <UART_SetConfig+0x222>
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <UART_SetConfig+0x200>
 800415a:	2b02      	cmp	r3, #2
 800415c:	d005      	beq.n	800416a <UART_SetConfig+0x20a>
 800415e:	e010      	b.n	8004182 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004160:	f7fe fa6e 	bl	8002640 <HAL_RCC_GetPCLK1Freq>
 8004164:	0003      	movs	r3, r0
 8004166:	617b      	str	r3, [r7, #20]
        break;
 8004168:	e012      	b.n	8004190 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800416a:	4b30      	ldr	r3, [pc, #192]	@ (800422c <UART_SetConfig+0x2cc>)
 800416c:	617b      	str	r3, [r7, #20]
        break;
 800416e:	e00f      	b.n	8004190 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004170:	f7fe f9dc 	bl	800252c <HAL_RCC_GetSysClockFreq>
 8004174:	0003      	movs	r3, r0
 8004176:	617b      	str	r3, [r7, #20]
        break;
 8004178:	e00a      	b.n	8004190 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800417a:	2380      	movs	r3, #128	@ 0x80
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	617b      	str	r3, [r7, #20]
        break;
 8004180:	e006      	b.n	8004190 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004186:	231a      	movs	r3, #26
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	2201      	movs	r2, #1
 800418c:	701a      	strb	r2, [r3, #0]
        break;
 800418e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d028      	beq.n	80041e8 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800419a:	4b25      	ldr	r3, [pc, #148]	@ (8004230 <UART_SetConfig+0x2d0>)
 800419c:	0052      	lsls	r2, r2, #1
 800419e:	5ad3      	ldrh	r3, [r2, r3]
 80041a0:	0019      	movs	r1, r3
 80041a2:	6978      	ldr	r0, [r7, #20]
 80041a4:	f7fb ffac 	bl	8000100 <__udivsi3>
 80041a8:	0003      	movs	r3, r0
 80041aa:	001a      	movs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	085b      	lsrs	r3, r3, #1
 80041b2:	18d2      	adds	r2, r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	0019      	movs	r1, r3
 80041ba:	0010      	movs	r0, r2
 80041bc:	f7fb ffa0 	bl	8000100 <__udivsi3>
 80041c0:	0003      	movs	r3, r0
 80041c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b0f      	cmp	r3, #15
 80041c8:	d90a      	bls.n	80041e0 <UART_SetConfig+0x280>
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	2380      	movs	r3, #128	@ 0x80
 80041ce:	025b      	lsls	r3, r3, #9
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d205      	bcs.n	80041e0 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	60da      	str	r2, [r3, #12]
 80041de:	e003      	b.n	80041e8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80041e0:	231a      	movs	r3, #26
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	2201      	movs	r2, #1
 80041e6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	226a      	movs	r2, #106	@ 0x6a
 80041ec:	2101      	movs	r1, #1
 80041ee:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2268      	movs	r2, #104	@ 0x68
 80041f4:	2101      	movs	r1, #1
 80041f6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004204:	231a      	movs	r3, #26
 8004206:	18fb      	adds	r3, r7, r3
 8004208:	781b      	ldrb	r3, [r3, #0]
}
 800420a:	0018      	movs	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	b008      	add	sp, #32
 8004210:	bd80      	pop	{r7, pc}
 8004212:	46c0      	nop			@ (mov r8, r8)
 8004214:	cfff69f3 	.word	0xcfff69f3
 8004218:	ffffcfff 	.word	0xffffcfff
 800421c:	11fff4ff 	.word	0x11fff4ff
 8004220:	40013800 	.word	0x40013800
 8004224:	40021000 	.word	0x40021000
 8004228:	40004400 	.word	0x40004400
 800422c:	00f42400 	.word	0x00f42400
 8004230:	08004db8 	.word	0x08004db8

08004234 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004240:	2208      	movs	r2, #8
 8004242:	4013      	ands	r3, r2
 8004244:	d00b      	beq.n	800425e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4a4a      	ldr	r2, [pc, #296]	@ (8004378 <UART_AdvFeatureConfig+0x144>)
 800424e:	4013      	ands	r3, r2
 8004250:	0019      	movs	r1, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004262:	2201      	movs	r2, #1
 8004264:	4013      	ands	r3, r2
 8004266:	d00b      	beq.n	8004280 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4a43      	ldr	r2, [pc, #268]	@ (800437c <UART_AdvFeatureConfig+0x148>)
 8004270:	4013      	ands	r3, r2
 8004272:	0019      	movs	r1, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004284:	2202      	movs	r2, #2
 8004286:	4013      	ands	r3, r2
 8004288:	d00b      	beq.n	80042a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	4a3b      	ldr	r2, [pc, #236]	@ (8004380 <UART_AdvFeatureConfig+0x14c>)
 8004292:	4013      	ands	r3, r2
 8004294:	0019      	movs	r1, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a6:	2204      	movs	r2, #4
 80042a8:	4013      	ands	r3, r2
 80042aa:	d00b      	beq.n	80042c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	4a34      	ldr	r2, [pc, #208]	@ (8004384 <UART_AdvFeatureConfig+0x150>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	0019      	movs	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c8:	2210      	movs	r2, #16
 80042ca:	4013      	ands	r3, r2
 80042cc:	d00b      	beq.n	80042e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	4a2c      	ldr	r2, [pc, #176]	@ (8004388 <UART_AdvFeatureConfig+0x154>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	0019      	movs	r1, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ea:	2220      	movs	r2, #32
 80042ec:	4013      	ands	r3, r2
 80042ee:	d00b      	beq.n	8004308 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	4a25      	ldr	r2, [pc, #148]	@ (800438c <UART_AdvFeatureConfig+0x158>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	0019      	movs	r1, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430c:	2240      	movs	r2, #64	@ 0x40
 800430e:	4013      	ands	r3, r2
 8004310:	d01d      	beq.n	800434e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	4a1d      	ldr	r2, [pc, #116]	@ (8004390 <UART_AdvFeatureConfig+0x15c>)
 800431a:	4013      	ands	r3, r2
 800431c:	0019      	movs	r1, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800432e:	2380      	movs	r3, #128	@ 0x80
 8004330:	035b      	lsls	r3, r3, #13
 8004332:	429a      	cmp	r2, r3
 8004334:	d10b      	bne.n	800434e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	4a15      	ldr	r2, [pc, #84]	@ (8004394 <UART_AdvFeatureConfig+0x160>)
 800433e:	4013      	ands	r3, r2
 8004340:	0019      	movs	r1, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004352:	2280      	movs	r2, #128	@ 0x80
 8004354:	4013      	ands	r3, r2
 8004356:	d00b      	beq.n	8004370 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	4a0e      	ldr	r2, [pc, #56]	@ (8004398 <UART_AdvFeatureConfig+0x164>)
 8004360:	4013      	ands	r3, r2
 8004362:	0019      	movs	r1, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	605a      	str	r2, [r3, #4]
  }
}
 8004370:	46c0      	nop			@ (mov r8, r8)
 8004372:	46bd      	mov	sp, r7
 8004374:	b002      	add	sp, #8
 8004376:	bd80      	pop	{r7, pc}
 8004378:	ffff7fff 	.word	0xffff7fff
 800437c:	fffdffff 	.word	0xfffdffff
 8004380:	fffeffff 	.word	0xfffeffff
 8004384:	fffbffff 	.word	0xfffbffff
 8004388:	ffffefff 	.word	0xffffefff
 800438c:	ffffdfff 	.word	0xffffdfff
 8004390:	ffefffff 	.word	0xffefffff
 8004394:	ff9fffff 	.word	0xff9fffff
 8004398:	fff7ffff 	.word	0xfff7ffff

0800439c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b092      	sub	sp, #72	@ 0x48
 80043a0:	af02      	add	r7, sp, #8
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2290      	movs	r2, #144	@ 0x90
 80043a8:	2100      	movs	r1, #0
 80043aa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043ac:	f7fc ff66 	bl	800127c <HAL_GetTick>
 80043b0:	0003      	movs	r3, r0
 80043b2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2208      	movs	r2, #8
 80043bc:	4013      	ands	r3, r2
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d12d      	bne.n	800441e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043c4:	2280      	movs	r2, #128	@ 0x80
 80043c6:	0391      	lsls	r1, r2, #14
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	4a47      	ldr	r2, [pc, #284]	@ (80044e8 <UART_CheckIdleState+0x14c>)
 80043cc:	9200      	str	r2, [sp, #0]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f000 f88e 	bl	80044f0 <UART_WaitOnFlagUntilTimeout>
 80043d4:	1e03      	subs	r3, r0, #0
 80043d6:	d022      	beq.n	800441e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d8:	f3ef 8310 	mrs	r3, PRIMASK
 80043dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80043de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80043e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043e2:	2301      	movs	r3, #1
 80043e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e8:	f383 8810 	msr	PRIMASK, r3
}
 80043ec:	46c0      	nop			@ (mov r8, r8)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2180      	movs	r1, #128	@ 0x80
 80043fa:	438a      	bics	r2, r1
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004400:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004404:	f383 8810 	msr	PRIMASK, r3
}
 8004408:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2288      	movs	r2, #136	@ 0x88
 800440e:	2120      	movs	r1, #32
 8004410:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2284      	movs	r2, #132	@ 0x84
 8004416:	2100      	movs	r1, #0
 8004418:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e060      	b.n	80044e0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2204      	movs	r2, #4
 8004426:	4013      	ands	r3, r2
 8004428:	2b04      	cmp	r3, #4
 800442a:	d146      	bne.n	80044ba <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800442c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800442e:	2280      	movs	r2, #128	@ 0x80
 8004430:	03d1      	lsls	r1, r2, #15
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	4a2c      	ldr	r2, [pc, #176]	@ (80044e8 <UART_CheckIdleState+0x14c>)
 8004436:	9200      	str	r2, [sp, #0]
 8004438:	2200      	movs	r2, #0
 800443a:	f000 f859 	bl	80044f0 <UART_WaitOnFlagUntilTimeout>
 800443e:	1e03      	subs	r3, r0, #0
 8004440:	d03b      	beq.n	80044ba <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004442:	f3ef 8310 	mrs	r3, PRIMASK
 8004446:	60fb      	str	r3, [r7, #12]
  return(result);
 8004448:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800444a:	637b      	str	r3, [r7, #52]	@ 0x34
 800444c:	2301      	movs	r3, #1
 800444e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f383 8810 	msr	PRIMASK, r3
}
 8004456:	46c0      	nop			@ (mov r8, r8)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4922      	ldr	r1, [pc, #136]	@ (80044ec <UART_CheckIdleState+0x150>)
 8004464:	400a      	ands	r2, r1
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800446a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f383 8810 	msr	PRIMASK, r3
}
 8004472:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004474:	f3ef 8310 	mrs	r3, PRIMASK
 8004478:	61bb      	str	r3, [r7, #24]
  return(result);
 800447a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447c:	633b      	str	r3, [r7, #48]	@ 0x30
 800447e:	2301      	movs	r3, #1
 8004480:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	f383 8810 	msr	PRIMASK, r3
}
 8004488:	46c0      	nop			@ (mov r8, r8)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2101      	movs	r1, #1
 8004496:	438a      	bics	r2, r1
 8004498:	609a      	str	r2, [r3, #8]
 800449a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	f383 8810 	msr	PRIMASK, r3
}
 80044a4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	228c      	movs	r2, #140	@ 0x8c
 80044aa:	2120      	movs	r1, #32
 80044ac:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2284      	movs	r2, #132	@ 0x84
 80044b2:	2100      	movs	r1, #0
 80044b4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e012      	b.n	80044e0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2288      	movs	r2, #136	@ 0x88
 80044be:	2120      	movs	r1, #32
 80044c0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	228c      	movs	r2, #140	@ 0x8c
 80044c6:	2120      	movs	r1, #32
 80044c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2284      	movs	r2, #132	@ 0x84
 80044da:	2100      	movs	r1, #0
 80044dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	0018      	movs	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	b010      	add	sp, #64	@ 0x40
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	01ffffff 	.word	0x01ffffff
 80044ec:	fffffedf 	.word	0xfffffedf

080044f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	603b      	str	r3, [r7, #0]
 80044fc:	1dfb      	adds	r3, r7, #7
 80044fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004500:	e051      	b.n	80045a6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	3301      	adds	r3, #1
 8004506:	d04e      	beq.n	80045a6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004508:	f7fc feb8 	bl	800127c <HAL_GetTick>
 800450c:	0002      	movs	r2, r0
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	429a      	cmp	r2, r3
 8004516:	d302      	bcc.n	800451e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e051      	b.n	80045c6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2204      	movs	r2, #4
 800452a:	4013      	ands	r3, r2
 800452c:	d03b      	beq.n	80045a6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b80      	cmp	r3, #128	@ 0x80
 8004532:	d038      	beq.n	80045a6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b40      	cmp	r3, #64	@ 0x40
 8004538:	d035      	beq.n	80045a6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	2208      	movs	r2, #8
 8004542:	4013      	ands	r3, r2
 8004544:	2b08      	cmp	r3, #8
 8004546:	d111      	bne.n	800456c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2208      	movs	r2, #8
 800454e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	0018      	movs	r0, r3
 8004554:	f000 f922 	bl	800479c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2290      	movs	r2, #144	@ 0x90
 800455c:	2108      	movs	r1, #8
 800455e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2284      	movs	r2, #132	@ 0x84
 8004564:	2100      	movs	r1, #0
 8004566:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e02c      	b.n	80045c6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	69da      	ldr	r2, [r3, #28]
 8004572:	2380      	movs	r3, #128	@ 0x80
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	401a      	ands	r2, r3
 8004578:	2380      	movs	r3, #128	@ 0x80
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	429a      	cmp	r2, r3
 800457e:	d112      	bne.n	80045a6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2280      	movs	r2, #128	@ 0x80
 8004586:	0112      	lsls	r2, r2, #4
 8004588:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	0018      	movs	r0, r3
 800458e:	f000 f905 	bl	800479c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2290      	movs	r2, #144	@ 0x90
 8004596:	2120      	movs	r1, #32
 8004598:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2284      	movs	r2, #132	@ 0x84
 800459e:	2100      	movs	r1, #0
 80045a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e00f      	b.n	80045c6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	4013      	ands	r3, r2
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	425a      	negs	r2, r3
 80045b6:	4153      	adcs	r3, r2
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	001a      	movs	r2, r3
 80045bc:	1dfb      	adds	r3, r7, #7
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d09e      	beq.n	8004502 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	0018      	movs	r0, r3
 80045c8:	46bd      	mov	sp, r7
 80045ca:	b004      	add	sp, #16
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b090      	sub	sp, #64	@ 0x40
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	1dbb      	adds	r3, r7, #6
 80045dc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	1dba      	adds	r2, r7, #6
 80045e8:	215c      	movs	r1, #92	@ 0x5c
 80045ea:	8812      	ldrh	r2, [r2, #0]
 80045ec:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2290      	movs	r2, #144	@ 0x90
 80045f2:	2100      	movs	r1, #0
 80045f4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	228c      	movs	r2, #140	@ 0x8c
 80045fa:	2122      	movs	r1, #34	@ 0x22
 80045fc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2280      	movs	r2, #128	@ 0x80
 8004602:	589b      	ldr	r3, [r3, r2]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d02d      	beq.n	8004664 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2280      	movs	r2, #128	@ 0x80
 800460c:	589b      	ldr	r3, [r3, r2]
 800460e:	4a40      	ldr	r2, [pc, #256]	@ (8004710 <UART_Start_Receive_DMA+0x140>)
 8004610:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2280      	movs	r2, #128	@ 0x80
 8004616:	589b      	ldr	r3, [r3, r2]
 8004618:	4a3e      	ldr	r2, [pc, #248]	@ (8004714 <UART_Start_Receive_DMA+0x144>)
 800461a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2280      	movs	r2, #128	@ 0x80
 8004620:	589b      	ldr	r3, [r3, r2]
 8004622:	4a3d      	ldr	r2, [pc, #244]	@ (8004718 <UART_Start_Receive_DMA+0x148>)
 8004624:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2280      	movs	r2, #128	@ 0x80
 800462a:	589b      	ldr	r3, [r3, r2]
 800462c:	2200      	movs	r2, #0
 800462e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2280      	movs	r2, #128	@ 0x80
 8004634:	5898      	ldr	r0, [r3, r2]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3324      	adds	r3, #36	@ 0x24
 800463c:	0019      	movs	r1, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004642:	001a      	movs	r2, r3
 8004644:	1dbb      	adds	r3, r7, #6
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	f7fc ff8a 	bl	8001560 <HAL_DMA_Start_IT>
 800464c:	1e03      	subs	r3, r0, #0
 800464e:	d009      	beq.n	8004664 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2290      	movs	r2, #144	@ 0x90
 8004654:	2110      	movs	r1, #16
 8004656:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	228c      	movs	r2, #140	@ 0x8c
 800465c:	2120      	movs	r1, #32
 800465e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e050      	b.n	8004706 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d019      	beq.n	80046a0 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800466c:	f3ef 8310 	mrs	r3, PRIMASK
 8004670:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004674:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004676:	2301      	movs	r3, #1
 8004678:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800467c:	f383 8810 	msr	PRIMASK, r3
}
 8004680:	46c0      	nop			@ (mov r8, r8)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2180      	movs	r1, #128	@ 0x80
 800468e:	0049      	lsls	r1, r1, #1
 8004690:	430a      	orrs	r2, r1
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004696:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469a:	f383 8810 	msr	PRIMASK, r3
}
 800469e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046a0:	f3ef 8310 	mrs	r3, PRIMASK
 80046a4:	613b      	str	r3, [r7, #16]
  return(result);
 80046a6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046aa:	2301      	movs	r3, #1
 80046ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f383 8810 	msr	PRIMASK, r3
}
 80046b4:	46c0      	nop			@ (mov r8, r8)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2101      	movs	r1, #1
 80046c2:	430a      	orrs	r2, r1
 80046c4:	609a      	str	r2, [r3, #8]
 80046c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	f383 8810 	msr	PRIMASK, r3
}
 80046d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046d2:	f3ef 8310 	mrs	r3, PRIMASK
 80046d6:	61fb      	str	r3, [r7, #28]
  return(result);
 80046d8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046da:	637b      	str	r3, [r7, #52]	@ 0x34
 80046dc:	2301      	movs	r3, #1
 80046de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	f383 8810 	msr	PRIMASK, r3
}
 80046e6:	46c0      	nop			@ (mov r8, r8)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689a      	ldr	r2, [r3, #8]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2140      	movs	r1, #64	@ 0x40
 80046f4:	430a      	orrs	r2, r1
 80046f6:	609a      	str	r2, [r3, #8]
 80046f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046fa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fe:	f383 8810 	msr	PRIMASK, r3
}
 8004702:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	0018      	movs	r0, r3
 8004708:	46bd      	mov	sp, r7
 800470a:	b010      	add	sp, #64	@ 0x40
 800470c:	bd80      	pop	{r7, pc}
 800470e:	46c0      	nop			@ (mov r8, r8)
 8004710:	08004869 	.word	0x08004869
 8004714:	08004999 	.word	0x08004999
 8004718:	080049db 	.word	0x080049db

0800471c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b08a      	sub	sp, #40	@ 0x28
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004724:	f3ef 8310 	mrs	r3, PRIMASK
 8004728:	60bb      	str	r3, [r7, #8]
  return(result);
 800472a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800472c:	627b      	str	r3, [r7, #36]	@ 0x24
 800472e:	2301      	movs	r3, #1
 8004730:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f383 8810 	msr	PRIMASK, r3
}
 8004738:	46c0      	nop			@ (mov r8, r8)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	21c0      	movs	r1, #192	@ 0xc0
 8004746:	438a      	bics	r2, r1
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f383 8810 	msr	PRIMASK, r3
}
 8004754:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004756:	f3ef 8310 	mrs	r3, PRIMASK
 800475a:	617b      	str	r3, [r7, #20]
  return(result);
 800475c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800475e:	623b      	str	r3, [r7, #32]
 8004760:	2301      	movs	r3, #1
 8004762:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	f383 8810 	msr	PRIMASK, r3
}
 800476a:	46c0      	nop			@ (mov r8, r8)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4908      	ldr	r1, [pc, #32]	@ (8004798 <UART_EndTxTransfer+0x7c>)
 8004778:	400a      	ands	r2, r1
 800477a:	609a      	str	r2, [r3, #8]
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f383 8810 	msr	PRIMASK, r3
}
 8004786:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2288      	movs	r2, #136	@ 0x88
 800478c:	2120      	movs	r1, #32
 800478e:	5099      	str	r1, [r3, r2]
}
 8004790:	46c0      	nop			@ (mov r8, r8)
 8004792:	46bd      	mov	sp, r7
 8004794:	b00a      	add	sp, #40	@ 0x28
 8004796:	bd80      	pop	{r7, pc}
 8004798:	ff7fffff 	.word	0xff7fffff

0800479c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08e      	sub	sp, #56	@ 0x38
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047a4:	f3ef 8310 	mrs	r3, PRIMASK
 80047a8:	617b      	str	r3, [r7, #20]
  return(result);
 80047aa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ae:	2301      	movs	r3, #1
 80047b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	f383 8810 	msr	PRIMASK, r3
}
 80047b8:	46c0      	nop			@ (mov r8, r8)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4926      	ldr	r1, [pc, #152]	@ (8004860 <UART_EndRxTransfer+0xc4>)
 80047c6:	400a      	ands	r2, r1
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	f383 8810 	msr	PRIMASK, r3
}
 80047d4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d6:	f3ef 8310 	mrs	r3, PRIMASK
 80047da:	623b      	str	r3, [r7, #32]
  return(result);
 80047dc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80047de:	633b      	str	r3, [r7, #48]	@ 0x30
 80047e0:	2301      	movs	r3, #1
 80047e2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e6:	f383 8810 	msr	PRIMASK, r3
}
 80047ea:	46c0      	nop			@ (mov r8, r8)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	491b      	ldr	r1, [pc, #108]	@ (8004864 <UART_EndRxTransfer+0xc8>)
 80047f8:	400a      	ands	r2, r1
 80047fa:	609a      	str	r2, [r3, #8]
 80047fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004802:	f383 8810 	msr	PRIMASK, r3
}
 8004806:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800480c:	2b01      	cmp	r3, #1
 800480e:	d118      	bne.n	8004842 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004810:	f3ef 8310 	mrs	r3, PRIMASK
 8004814:	60bb      	str	r3, [r7, #8]
  return(result);
 8004816:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004818:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800481a:	2301      	movs	r3, #1
 800481c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f383 8810 	msr	PRIMASK, r3
}
 8004824:	46c0      	nop			@ (mov r8, r8)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2110      	movs	r1, #16
 8004832:	438a      	bics	r2, r1
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004838:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f383 8810 	msr	PRIMASK, r3
}
 8004840:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	228c      	movs	r2, #140	@ 0x8c
 8004846:	2120      	movs	r1, #32
 8004848:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004856:	46c0      	nop			@ (mov r8, r8)
 8004858:	46bd      	mov	sp, r7
 800485a:	b00e      	add	sp, #56	@ 0x38
 800485c:	bd80      	pop	{r7, pc}
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	fffffedf 	.word	0xfffffedf
 8004864:	effffffe 	.word	0xeffffffe

08004868 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b094      	sub	sp, #80	@ 0x50
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004874:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2220      	movs	r2, #32
 800487e:	4013      	ands	r3, r2
 8004880:	d16f      	bne.n	8004962 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004884:	225e      	movs	r2, #94	@ 0x5e
 8004886:	2100      	movs	r1, #0
 8004888:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800488a:	f3ef 8310 	mrs	r3, PRIMASK
 800488e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004890:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004892:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004894:	2301      	movs	r3, #1
 8004896:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f383 8810 	msr	PRIMASK, r3
}
 800489e:	46c0      	nop			@ (mov r8, r8)
 80048a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	493a      	ldr	r1, [pc, #232]	@ (8004994 <UART_DMAReceiveCplt+0x12c>)
 80048ac:	400a      	ands	r2, r1
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	f383 8810 	msr	PRIMASK, r3
}
 80048ba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048bc:	f3ef 8310 	mrs	r3, PRIMASK
 80048c0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80048c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80048c6:	2301      	movs	r3, #1
 80048c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048cc:	f383 8810 	msr	PRIMASK, r3
}
 80048d0:	46c0      	nop			@ (mov r8, r8)
 80048d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2101      	movs	r1, #1
 80048de:	438a      	bics	r2, r1
 80048e0:	609a      	str	r2, [r3, #8]
 80048e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e8:	f383 8810 	msr	PRIMASK, r3
}
 80048ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ee:	f3ef 8310 	mrs	r3, PRIMASK
 80048f2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80048f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80048f8:	2301      	movs	r3, #1
 80048fa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048fe:	f383 8810 	msr	PRIMASK, r3
}
 8004902:	46c0      	nop			@ (mov r8, r8)
 8004904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2140      	movs	r1, #64	@ 0x40
 8004910:	438a      	bics	r2, r1
 8004912:	609a      	str	r2, [r3, #8]
 8004914:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004916:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491a:	f383 8810 	msr	PRIMASK, r3
}
 800491e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004922:	228c      	movs	r2, #140	@ 0x8c
 8004924:	2120      	movs	r1, #32
 8004926:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004928:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800492a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800492c:	2b01      	cmp	r3, #1
 800492e:	d118      	bne.n	8004962 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004930:	f3ef 8310 	mrs	r3, PRIMASK
 8004934:	60fb      	str	r3, [r7, #12]
  return(result);
 8004936:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004938:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800493a:	2301      	movs	r3, #1
 800493c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f383 8810 	msr	PRIMASK, r3
}
 8004944:	46c0      	nop			@ (mov r8, r8)
 8004946:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2110      	movs	r1, #16
 8004952:	438a      	bics	r2, r1
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004958:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f383 8810 	msr	PRIMASK, r3
}
 8004960:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004962:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004964:	2200      	movs	r2, #0
 8004966:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004968:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800496a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800496c:	2b01      	cmp	r3, #1
 800496e:	d108      	bne.n	8004982 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004972:	225c      	movs	r2, #92	@ 0x5c
 8004974:	5a9a      	ldrh	r2, [r3, r2]
 8004976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004978:	0011      	movs	r1, r2
 800497a:	0018      	movs	r0, r3
 800497c:	f7ff fae5 	bl	8003f4a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004980:	e003      	b.n	800498a <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8004982:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004984:	0018      	movs	r0, r3
 8004986:	f7ff fac8 	bl	8003f1a <HAL_UART_RxCpltCallback>
}
 800498a:	46c0      	nop			@ (mov r8, r8)
 800498c:	46bd      	mov	sp, r7
 800498e:	b014      	add	sp, #80	@ 0x50
 8004990:	bd80      	pop	{r7, pc}
 8004992:	46c0      	nop			@ (mov r8, r8)
 8004994:	fffffeff 	.word	0xfffffeff

08004998 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2201      	movs	r2, #1
 80049aa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d10a      	bne.n	80049ca <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	225c      	movs	r2, #92	@ 0x5c
 80049b8:	5a9b      	ldrh	r3, [r3, r2]
 80049ba:	085b      	lsrs	r3, r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	0011      	movs	r1, r2
 80049c2:	0018      	movs	r0, r3
 80049c4:	f7ff fac1 	bl	8003f4a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049c8:	e003      	b.n	80049d2 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	0018      	movs	r0, r3
 80049ce:	f7ff faac 	bl	8003f2a <HAL_UART_RxHalfCpltCallback>
}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b004      	add	sp, #16
 80049d8:	bd80      	pop	{r7, pc}

080049da <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b086      	sub	sp, #24
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2288      	movs	r2, #136	@ 0x88
 80049ec:	589b      	ldr	r3, [r3, r2]
 80049ee:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	228c      	movs	r2, #140	@ 0x8c
 80049f4:	589b      	ldr	r3, [r3, r2]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	2280      	movs	r2, #128	@ 0x80
 8004a00:	4013      	ands	r3, r2
 8004a02:	2b80      	cmp	r3, #128	@ 0x80
 8004a04:	d10a      	bne.n	8004a1c <UART_DMAError+0x42>
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	2b21      	cmp	r3, #33	@ 0x21
 8004a0a:	d107      	bne.n	8004a1c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2256      	movs	r2, #86	@ 0x56
 8004a10:	2100      	movs	r1, #0
 8004a12:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	0018      	movs	r0, r3
 8004a18:	f7ff fe80 	bl	800471c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	2240      	movs	r2, #64	@ 0x40
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b40      	cmp	r3, #64	@ 0x40
 8004a28:	d10a      	bne.n	8004a40 <UART_DMAError+0x66>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b22      	cmp	r3, #34	@ 0x22
 8004a2e:	d107      	bne.n	8004a40 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	225e      	movs	r2, #94	@ 0x5e
 8004a34:	2100      	movs	r1, #0
 8004a36:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f7ff feae 	bl	800479c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2290      	movs	r2, #144	@ 0x90
 8004a44:	589b      	ldr	r3, [r3, r2]
 8004a46:	2210      	movs	r2, #16
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2190      	movs	r1, #144	@ 0x90
 8004a4e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	0018      	movs	r0, r3
 8004a54:	f7ff fa71 	bl	8003f3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a58:	46c0      	nop			@ (mov r8, r8)
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	b006      	add	sp, #24
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2284      	movs	r2, #132	@ 0x84
 8004a6c:	5c9b      	ldrb	r3, [r3, r2]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <HAL_UARTEx_DisableFifoMode+0x16>
 8004a72:	2302      	movs	r3, #2
 8004a74:	e027      	b.n	8004ac6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2284      	movs	r2, #132	@ 0x84
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2288      	movs	r2, #136	@ 0x88
 8004a82:	2124      	movs	r1, #36	@ 0x24
 8004a84:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2101      	movs	r1, #1
 8004a9a:	438a      	bics	r2, r1
 8004a9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8004ad0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2288      	movs	r2, #136	@ 0x88
 8004ab8:	2120      	movs	r1, #32
 8004aba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2284      	movs	r2, #132	@ 0x84
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b004      	add	sp, #16
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	46c0      	nop			@ (mov r8, r8)
 8004ad0:	dfffffff 	.word	0xdfffffff

08004ad4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2284      	movs	r2, #132	@ 0x84
 8004ae2:	5c9b      	ldrb	r3, [r3, r2]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	e02e      	b.n	8004b4a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2284      	movs	r2, #132	@ 0x84
 8004af0:	2101      	movs	r1, #1
 8004af2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2288      	movs	r2, #136	@ 0x88
 8004af8:	2124      	movs	r1, #36	@ 0x24
 8004afa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2101      	movs	r1, #1
 8004b10:	438a      	bics	r2, r1
 8004b12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	08d9      	lsrs	r1, r3, #3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f000 f854 	bl	8004bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2288      	movs	r2, #136	@ 0x88
 8004b3c:	2120      	movs	r1, #32
 8004b3e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2284      	movs	r2, #132	@ 0x84
 8004b44:	2100      	movs	r1, #0
 8004b46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	0018      	movs	r0, r3
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	b004      	add	sp, #16
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2284      	movs	r2, #132	@ 0x84
 8004b62:	5c9b      	ldrb	r3, [r3, r2]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e02f      	b.n	8004bcc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2284      	movs	r2, #132	@ 0x84
 8004b70:	2101      	movs	r1, #1
 8004b72:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2288      	movs	r2, #136	@ 0x88
 8004b78:	2124      	movs	r1, #36	@ 0x24
 8004b7a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2101      	movs	r1, #1
 8004b90:	438a      	bics	r2, r1
 8004b92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8004bd4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	0019      	movs	r1, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	0018      	movs	r0, r3
 8004bae:	f000 f813 	bl	8004bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2288      	movs	r2, #136	@ 0x88
 8004bbe:	2120      	movs	r1, #32
 8004bc0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2284      	movs	r2, #132	@ 0x84
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	0018      	movs	r0, r3
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	b004      	add	sp, #16
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	f1ffffff 	.word	0xf1ffffff

08004bd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d108      	bne.n	8004bfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	226a      	movs	r2, #106	@ 0x6a
 8004bec:	2101      	movs	r1, #1
 8004bee:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2268      	movs	r2, #104	@ 0x68
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004bf8:	e043      	b.n	8004c82 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004bfa:	260f      	movs	r6, #15
 8004bfc:	19bb      	adds	r3, r7, r6
 8004bfe:	2208      	movs	r2, #8
 8004c00:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c02:	200e      	movs	r0, #14
 8004c04:	183b      	adds	r3, r7, r0
 8004c06:	2208      	movs	r2, #8
 8004c08:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	0e5b      	lsrs	r3, r3, #25
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	240d      	movs	r4, #13
 8004c16:	193b      	adds	r3, r7, r4
 8004c18:	2107      	movs	r1, #7
 8004c1a:	400a      	ands	r2, r1
 8004c1c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	0f5b      	lsrs	r3, r3, #29
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	250c      	movs	r5, #12
 8004c2a:	197b      	adds	r3, r7, r5
 8004c2c:	2107      	movs	r1, #7
 8004c2e:	400a      	ands	r2, r1
 8004c30:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c32:	183b      	adds	r3, r7, r0
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	197a      	adds	r2, r7, r5
 8004c38:	7812      	ldrb	r2, [r2, #0]
 8004c3a:	4914      	ldr	r1, [pc, #80]	@ (8004c8c <UARTEx_SetNbDataToProcess+0xb4>)
 8004c3c:	5c8a      	ldrb	r2, [r1, r2]
 8004c3e:	435a      	muls	r2, r3
 8004c40:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c42:	197b      	adds	r3, r7, r5
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	4a12      	ldr	r2, [pc, #72]	@ (8004c90 <UARTEx_SetNbDataToProcess+0xb8>)
 8004c48:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c4a:	0019      	movs	r1, r3
 8004c4c:	f7fb fae2 	bl	8000214 <__divsi3>
 8004c50:	0003      	movs	r3, r0
 8004c52:	b299      	uxth	r1, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	226a      	movs	r2, #106	@ 0x6a
 8004c58:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c5a:	19bb      	adds	r3, r7, r6
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	193a      	adds	r2, r7, r4
 8004c60:	7812      	ldrb	r2, [r2, #0]
 8004c62:	490a      	ldr	r1, [pc, #40]	@ (8004c8c <UARTEx_SetNbDataToProcess+0xb4>)
 8004c64:	5c8a      	ldrb	r2, [r1, r2]
 8004c66:	435a      	muls	r2, r3
 8004c68:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c6a:	193b      	adds	r3, r7, r4
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	4a08      	ldr	r2, [pc, #32]	@ (8004c90 <UARTEx_SetNbDataToProcess+0xb8>)
 8004c70:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c72:	0019      	movs	r1, r3
 8004c74:	f7fb face 	bl	8000214 <__divsi3>
 8004c78:	0003      	movs	r3, r0
 8004c7a:	b299      	uxth	r1, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2268      	movs	r2, #104	@ 0x68
 8004c80:	5299      	strh	r1, [r3, r2]
}
 8004c82:	46c0      	nop			@ (mov r8, r8)
 8004c84:	46bd      	mov	sp, r7
 8004c86:	b005      	add	sp, #20
 8004c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c8a:	46c0      	nop			@ (mov r8, r8)
 8004c8c:	08004dd0 	.word	0x08004dd0
 8004c90:	08004dd8 	.word	0x08004dd8

08004c94 <memset>:
 8004c94:	0003      	movs	r3, r0
 8004c96:	1882      	adds	r2, r0, r2
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d100      	bne.n	8004c9e <memset+0xa>
 8004c9c:	4770      	bx	lr
 8004c9e:	7019      	strb	r1, [r3, #0]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	e7f9      	b.n	8004c98 <memset+0x4>

08004ca4 <__libc_init_array>:
 8004ca4:	b570      	push	{r4, r5, r6, lr}
 8004ca6:	2600      	movs	r6, #0
 8004ca8:	4c0c      	ldr	r4, [pc, #48]	@ (8004cdc <__libc_init_array+0x38>)
 8004caa:	4d0d      	ldr	r5, [pc, #52]	@ (8004ce0 <__libc_init_array+0x3c>)
 8004cac:	1b64      	subs	r4, r4, r5
 8004cae:	10a4      	asrs	r4, r4, #2
 8004cb0:	42a6      	cmp	r6, r4
 8004cb2:	d109      	bne.n	8004cc8 <__libc_init_array+0x24>
 8004cb4:	2600      	movs	r6, #0
 8004cb6:	f000 f819 	bl	8004cec <_init>
 8004cba:	4c0a      	ldr	r4, [pc, #40]	@ (8004ce4 <__libc_init_array+0x40>)
 8004cbc:	4d0a      	ldr	r5, [pc, #40]	@ (8004ce8 <__libc_init_array+0x44>)
 8004cbe:	1b64      	subs	r4, r4, r5
 8004cc0:	10a4      	asrs	r4, r4, #2
 8004cc2:	42a6      	cmp	r6, r4
 8004cc4:	d105      	bne.n	8004cd2 <__libc_init_array+0x2e>
 8004cc6:	bd70      	pop	{r4, r5, r6, pc}
 8004cc8:	00b3      	lsls	r3, r6, #2
 8004cca:	58eb      	ldr	r3, [r5, r3]
 8004ccc:	4798      	blx	r3
 8004cce:	3601      	adds	r6, #1
 8004cd0:	e7ee      	b.n	8004cb0 <__libc_init_array+0xc>
 8004cd2:	00b3      	lsls	r3, r6, #2
 8004cd4:	58eb      	ldr	r3, [r5, r3]
 8004cd6:	4798      	blx	r3
 8004cd8:	3601      	adds	r6, #1
 8004cda:	e7f2      	b.n	8004cc2 <__libc_init_array+0x1e>
 8004cdc:	08004de0 	.word	0x08004de0
 8004ce0:	08004de0 	.word	0x08004de0
 8004ce4:	08004de4 	.word	0x08004de4
 8004ce8:	08004de0 	.word	0x08004de0

08004cec <_init>:
 8004cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cee:	46c0      	nop			@ (mov r8, r8)
 8004cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf2:	bc08      	pop	{r3}
 8004cf4:	469e      	mov	lr, r3
 8004cf6:	4770      	bx	lr

08004cf8 <_fini>:
 8004cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfa:	46c0      	nop			@ (mov r8, r8)
 8004cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cfe:	bc08      	pop	{r3}
 8004d00:	469e      	mov	lr, r3
 8004d02:	4770      	bx	lr
